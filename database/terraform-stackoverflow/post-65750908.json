{"Id": "65750908", "PostTypeId": "1", "AcceptedAnswerId": "65752080", "CreationDate": "2021-01-16T14:44:51.223", "Score": "2", "ViewCount": "2388", "Body": "<p>I need help to configure the post methods as lambda type without proxy and the 200 response type application / json =&gt; Empty</p>\n<p>This is my Terraform file at aws, I'm new to Terraform, it just lacked this configuration to work if someone can help me.</p>\n<p>I'm having an error response in terraform apply</p>\n<p>Error creating API Gateway Integration Response: NotFoundException: Invalid Integration identifier specified Error creating API Gateway Deployment: BadRequestException: No integration defined for method</p>\n<pre><code>resource &quot;aws_dynamodb_table&quot; &quot;basic-dynamodb-table&quot; {\n  name           = &quot;stone-test&quot;\n  billing_mode   = &quot;PROVISIONED&quot;\n  read_capacity  = 20\n  write_capacity = 20\n  hash_key       = &quot;id&quot;\n\n  attribute {\n    name = &quot;id&quot;\n    type = &quot;N&quot;\n  }\n\n  ttl {\n    attribute_name = &quot;TimeToExist&quot;\n    enabled        = false\n  }\n\n  tags = {\n    Name        = &quot;dynamodb-table-1&quot;\n    Environment = &quot;dev&quot;\n  }\n}\n\nresource &quot;aws_iam_role_policy&quot; &quot;lambda_policy&quot; {\n  name = &quot;lambda_policy&quot;\n  role = aws_iam_role.role_for_LDC.id\n\n  policy = file(&quot;policy.json&quot;)\n}\n\n\nresource &quot;aws_iam_role&quot; &quot;role_for_LDC&quot; {\n  name = &quot;myrole&quot;\n  \n  assume_role_policy = file(&quot;assume_role_policy.json&quot;)\n\n}\n\nresource &quot;aws_lambda_function&quot; &quot;stone_register2&quot; {\n  filename      = &quot;stone_register.zip&quot;\n  function_name = &quot;stone_register3&quot;\n  role          = aws_iam_role.role_for_LDC.arn\n  handler       = &quot;stone_register.lambda_handler&quot;\n\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\n  # source_code_hash = &quot;${base64sha256(file(&quot;stone_register.zip&quot;))}&quot;\n  source_code_hash = filebase64sha256(&quot;stone_register.zip&quot;)\n\n  runtime = &quot;python3.6&quot;\n\n  environment {\n    variables = {\n      DB_TABLE_NAME = &quot;stone-test&quot;\n    }\n  }\n}\n\n\n\nresource &quot;aws_lambda_function&quot; &quot;stone_delete2&quot; {\n  filename      = &quot;stone_delete.zip&quot;\n  function_name = &quot;stone_delete3&quot;\n  role          = aws_iam_role.role_for_LDC.arn\n  handler       = &quot;stone_delete.lambda_handler&quot;\n\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\n  # source_code_hash = &quot;${base64sha256(file(&quot;stone_delete.zip&quot;))}&quot;\n  source_code_hash = filebase64sha256(&quot;stone_delete.zip&quot;)\n\n  runtime = &quot;python3.6&quot;\n\n  environment {\n    variables = {\n      DB_TABLE_NAME = &quot;stone-test&quot;\n    }\n  }\n}\n\n\nresource &quot;aws_lambda_function&quot; &quot;stone_search2&quot; {\n  filename      = &quot;stone_search.zip&quot;\n  function_name = &quot;stone_search3&quot;\n  role          = aws_iam_role.role_for_LDC.arn\n  handler       = &quot;stone_search.lambda_handler&quot;\n\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\n  # source_code_hash = &quot;${base64sha256(file(&quot;stone_search.zip&quot;))}&quot;\n  source_code_hash = filebase64sha256(&quot;stone_search.zip&quot;)\n\n  runtime = &quot;python3.6&quot;\n\n  environment {\n    variables = {\n      DB_TABLE_NAME = &quot;stone-test&quot;\n    }\n  }\n}\n\nresource &quot;aws_lambda_function&quot; &quot;stone2&quot; {\n  filename      = &quot;bot.zip&quot;\n  function_name = &quot;stone3&quot;\n  role          = aws_iam_role.role_for_LDC.arn\n  handler       = &quot;bot.lambda_handler&quot;\n\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\n  # source_code_hash = &quot;${base64sha256(file(&quot;bot.zip&quot;))}&quot;\n  source_code_hash = filebase64sha256(&quot;bot.zip&quot;)\n\n  runtime = &quot;python3.6&quot;\n\n  environment {\n    variables = {\n      DB_TABLE_NAME = &quot;stone-test&quot;\n    }\n  }\n}\n\nresource &quot;aws_api_gateway_rest_api&quot; &quot;apiLambda&quot; {\n  name        = &quot;myAPI&quot;\n\n}\n\n\n  resource &quot;aws_api_gateway_resource&quot; &quot;Resource&quot; {\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\n  path_part   = &quot;bot&quot;\n\n}\n\nresource &quot;aws_api_gateway_method&quot; &quot;Method&quot; {\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\n   resource_id   = aws_api_gateway_resource.Resource.id\n   http_method   = &quot;POST&quot;\n   authorization = &quot;NONE&quot;\n}\n\nresource &quot;aws_api_gateway_integration&quot; &quot;lambdaInt&quot; {\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n   resource_id = aws_api_gateway_resource.Resource.id\n   http_method = aws_api_gateway_method.Method.http_method\n\n   integration_http_method = &quot;POST&quot;\n   type                    = &quot;AWS&quot;\n   uri                     = aws_lambda_function.stone2.invoke_arn\n   \n}\n\nresource &quot;aws_api_gateway_method_response&quot; &quot;response_200&quot; {\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n  resource_id = aws_api_gateway_resource.Resource.id\n  http_method = aws_api_gateway_method.Method.http_method\n  status_code = &quot;200&quot;\n}\n\nresource &quot;aws_api_gateway_integration_response&quot; &quot;MyDemoIntegrationResponse&quot; {\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n  resource_id = aws_api_gateway_resource.Resource.id\n  http_method = aws_api_gateway_method.Method.http_method\n  status_code = aws_api_gateway_method_response.response_200.status_code\n}\n\n  resource &quot;aws_api_gateway_resource&quot; &quot;Resource2&quot; {\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\n  path_part   = &quot;register&quot;\n\n}\n\nresource &quot;aws_api_gateway_method&quot; &quot;Method2&quot; {\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\n   resource_id   = aws_api_gateway_resource.Resource2.id\n   http_method   = &quot;POST&quot;\n   authorization = &quot;NONE&quot;\n}\n\nresource &quot;aws_api_gateway_integration&quot; &quot;lambdaInt2&quot; {\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n   resource_id = aws_api_gateway_resource.Resource2.id\n   http_method = aws_api_gateway_method.Method2.http_method\n\n   integration_http_method = &quot;POST&quot;\n   type                    = &quot;AWS_PROXY&quot;\n   uri                     = aws_lambda_function.stone_register2.invoke_arn\n   \n}\n\nresource &quot;aws_api_gateway_resource&quot; &quot;Resource3&quot; {\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\n  path_part   = &quot;delete&quot;\n\n}\n\nresource &quot;aws_api_gateway_method&quot; &quot;Method3&quot; {\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\n   resource_id   = aws_api_gateway_resource.Resource3.id\n   http_method   = &quot;POST&quot;\n   authorization = &quot;NONE&quot;\n}\n\nresource &quot;aws_api_gateway_integration&quot; &quot;lambdaInt3&quot; {\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n   resource_id = aws_api_gateway_resource.Resource3.id\n   http_method = aws_api_gateway_method.Method3.http_method\n\n   integration_http_method = &quot;POST&quot;\n   type                    = &quot;AWS_PROXY&quot;\n   uri                     = aws_lambda_function.stone_delete2.invoke_arn\n   \n}\n\nresource &quot;aws_api_gateway_resource&quot; &quot;Resource4&quot; {\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\n  path_part   = &quot;search&quot;\n\n}\n\nresource &quot;aws_api_gateway_method&quot; &quot;Method4&quot; {\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\n   resource_id   = aws_api_gateway_resource.Resource4.id\n   http_method   = &quot;POST&quot;\n   authorization = &quot;NONE&quot;\n}\n\nresource &quot;aws_api_gateway_integration&quot; &quot;lambdaInt4&quot; {\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n   resource_id = aws_api_gateway_resource.Resource4.id\n   http_method = aws_api_gateway_method.Method4.http_method\n\n   integration_http_method = &quot;POST&quot;\n   type                    = &quot;AWS_PROXY&quot;\n   uri                     = aws_lambda_function.stone_search2.invoke_arn\n   \n}\n\n\nresource &quot;aws_api_gateway_deployment&quot; &quot;apideploy&quot; {\n   depends_on = [aws_api_gateway_integration.lambdaInt]\n\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\n   stage_name  = &quot;Prod&quot;\n}\n\n\nresource &quot;aws_lambda_permission&quot; &quot;apigw&quot; {\n   statement_id  = &quot;AllowExecutionFromAPIGateway&quot;\n   action        = &quot;lambda:InvokeFunction&quot;\n   function_name = aws_lambda_function.stone2.function_name\n   principal     = &quot;apigateway.amazonaws.com&quot;\n\n   source_arn = &quot;${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/bot&quot;\n\n}\n\nresource &quot;aws_lambda_permission&quot; &quot;apigw2&quot; {\n   statement_id  = &quot;AllowExecutionFromAPIGateway&quot;\n   action        = &quot;lambda:InvokeFunction&quot;\n   function_name = aws_lambda_function.stone_register2.function_name\n   principal     = &quot;apigateway.amazonaws.com&quot;\n\n   source_arn = &quot;${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/register&quot;\n\n}\n\n  \n\n\nresource &quot;aws_lambda_permission&quot; &quot;apigw3&quot; {\n   statement_id  = &quot;AllowExecutionFromAPIGateway&quot;\n   action        = &quot;lambda:InvokeFunction&quot;\n   function_name = aws_lambda_function.stone_delete2.function_name\n   principal     = &quot;apigateway.amazonaws.com&quot;\n\n   source_arn = &quot;${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/delete&quot;\n\n}\n\n\nresource &quot;aws_lambda_permission&quot; &quot;apigw4&quot; {\n   statement_id  = &quot;AllowExecutionFromAPIGateway&quot;\n   action        = &quot;lambda:InvokeFunction&quot;\n   function_name = aws_lambda_function.stone_search2.function_name\n   principal     = &quot;apigateway.amazonaws.com&quot;\n\n   source_arn = &quot;${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/search&quot;\n\n}\n\n \n\n\noutput &quot;base_url&quot; {\n  value = aws_api_gateway_deployment.apideploy.invoke_url\n}\n\n\n</code></pre>\n", "OwnerUserId": "9073682", "LastEditorUserId": "9073682", "LastEditDate": "2021-01-17T14:22:59.057", "LastActivityDate": "2021-01-17T14:22:59.057", "Title": "Terraform add aws_api_gateway_integration response json", "Tags": "<amazon-web-services><terraform-provider-aws>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "238879597", "PostHistoryTypeId": "2", "PostId": "65750908", "RevisionGUID": "e949c453-eee9-4759-8eb8-786b7770beb2", "CreationDate": "2021-01-16T14:44:51.223", "UserId": "9073682", "Text": "I need help to configure the post methods as lambda type without proxy and the 200 response type application / json => Empty\r\n\r\nThis is my Terraform file at aws, I'm new to Terraform, it just lacked this configuration to work if someone can help me.\r\n\r\nJust teach me how to do just for an API function that I follow with the others\r\n```\r\nresource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {\r\n  name           = \"stone-test\"\r\n  billing_mode   = \"PROVISIONED\"\r\n  read_capacity  = 20\r\n  write_capacity = 20\r\n  hash_key       = \"id\"\r\n\r\n  attribute {\r\n    name = \"id\"\r\n    type = \"N\"\r\n  }\r\n\r\n  ttl {\r\n    attribute_name = \"TimeToExist\"\r\n    enabled        = false\r\n  }\r\n\r\n  tags = {\r\n    Name        = \"dynamodb-table-1\"\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"lambda_policy\" {\r\n  name = \"lambda_policy\"\r\n  role = aws_iam_role.role_for_LDC.id\r\n\r\n  policy = file(\"policy.json\")\r\n}\r\n\r\n\r\nresource \"aws_iam_role\" \"role_for_LDC\" {\r\n  name = \"myrole\"\r\n  \r\n  assume_role_policy = file(\"assume_role_policy.json\")\r\n\r\n}\r\n\r\nresource \"aws_lambda_function\" \"stone_register2\" {\r\n  filename      = \"stone_register.zip\"\r\n  function_name = \"stone_register3\"\r\n  role          = aws_iam_role.role_for_LDC.arn\r\n  handler       = \"stone_register.lambda_handler\"\r\n\r\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\r\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\r\n  # source_code_hash = \"${base64sha256(file(\"stone_register.zip\"))}\"\r\n  source_code_hash = filebase64sha256(\"stone_register.zip\")\r\n\r\n  runtime = \"python3.6\"\r\n\r\n  environment {\r\n    variables = {\r\n      DB_TABLE_NAME = \"stone-test\"\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nresource \"aws_lambda_function\" \"stone_delete2\" {\r\n  filename      = \"stone_delete.zip\"\r\n  function_name = \"stone_delete3\"\r\n  role          = aws_iam_role.role_for_LDC.arn\r\n  handler       = \"stone_delete.lambda_handler\"\r\n\r\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\r\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\r\n  # source_code_hash = \"${base64sha256(file(\"stone_delete.zip\"))}\"\r\n  source_code_hash = filebase64sha256(\"stone_delete.zip\")\r\n\r\n  runtime = \"python3.6\"\r\n\r\n  environment {\r\n    variables = {\r\n      DB_TABLE_NAME = \"stone-test\"\r\n    }\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_lambda_function\" \"stone_search2\" {\r\n  filename      = \"stone_search.zip\"\r\n  function_name = \"stone_search3\"\r\n  role          = aws_iam_role.role_for_LDC.arn\r\n  handler       = \"stone_search.lambda_handler\"\r\n\r\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\r\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\r\n  # source_code_hash = \"${base64sha256(file(\"stone_search.zip\"))}\"\r\n  source_code_hash = filebase64sha256(\"stone_search.zip\")\r\n\r\n  runtime = \"python3.6\"\r\n\r\n  environment {\r\n    variables = {\r\n      DB_TABLE_NAME = \"stone-test\"\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_lambda_function\" \"stone2\" {\r\n  filename      = \"bot.zip\"\r\n  function_name = \"stone3\"\r\n  role          = aws_iam_role.role_for_LDC.arn\r\n  handler       = \"bot.lambda_handler\"\r\n\r\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\r\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\r\n  # source_code_hash = \"${base64sha256(file(\"bot.zip\"))}\"\r\n  source_code_hash = filebase64sha256(\"bot.zip\")\r\n\r\n  runtime = \"python3.6\"\r\n\r\n  environment {\r\n    variables = {\r\n      DB_TABLE_NAME = \"stone-test\"\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_api_gateway_rest_api\" \"apiLambda\" {\r\n  name        = \"myAPI\"\r\n\r\n}\r\n\r\n\r\n  resource \"aws_api_gateway_resource\" \"Resource\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\r\n  path_part   = \"bot\"\r\n\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"Method\" {\r\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id   = aws_api_gateway_resource.Resource.id\r\n   http_method   = \"POST\"\r\n   authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"lambdaInt\" {\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id = aws_api_gateway_resource.Resource.id\r\n   http_method = aws_api_gateway_method.Method.http_method\r\n\r\n   integration_http_method = \"POST\"\r\n   type                    = \"AWS_PROXY\"\r\n   uri                     = aws_lambda_function.stone2.invoke_arn\r\n   \r\n}\r\n\r\n  resource \"aws_api_gateway_resource\" \"Resource2\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\r\n  path_part   = \"register\"\r\n\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"Method2\" {\r\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id   = aws_api_gateway_resource.Resource2.id\r\n   http_method   = \"POST\"\r\n   authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"lambdaInt2\" {\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id = aws_api_gateway_resource.Resource2.id\r\n   http_method = aws_api_gateway_method.Method2.http_method\r\n\r\n   integration_http_method = \"POST\"\r\n   type                    = \"AWS_PROXY\"\r\n   uri                     = aws_lambda_function.stone_register2.invoke_arn\r\n   \r\n}\r\n\r\nresource \"aws_api_gateway_resource\" \"Resource3\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\r\n  path_part   = \"delete\"\r\n\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"Method3\" {\r\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id   = aws_api_gateway_resource.Resource3.id\r\n   http_method   = \"POST\"\r\n   authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"lambdaInt3\" {\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id = aws_api_gateway_resource.Resource3.id\r\n   http_method = aws_api_gateway_method.Method3.http_method\r\n\r\n   integration_http_method = \"POST\"\r\n   type                    = \"AWS_PROXY\"\r\n   uri                     = aws_lambda_function.stone_delete2.invoke_arn\r\n   \r\n}\r\n\r\nresource \"aws_api_gateway_resource\" \"Resource4\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\r\n  path_part   = \"search\"\r\n\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"Method4\" {\r\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id   = aws_api_gateway_resource.Resource4.id\r\n   http_method   = \"POST\"\r\n   authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"lambdaInt4\" {\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id = aws_api_gateway_resource.Resource4.id\r\n   http_method = aws_api_gateway_method.Method4.http_method\r\n\r\n   integration_http_method = \"POST\"\r\n   type                    = \"AWS_PROXY\"\r\n   uri                     = aws_lambda_function.stone_search2.invoke_arn\r\n   \r\n}\r\n\r\n\r\nresource \"aws_api_gateway_deployment\" \"apideploy\" {\r\n   depends_on = [aws_api_gateway_integration.lambdaInt]\r\n\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   stage_name  = \"Prod\"\r\n}\r\n\r\n\r\nresource \"aws_lambda_permission\" \"apigw\" {\r\n   statement_id  = \"AllowExecutionFromAPIGateway\"\r\n   action        = \"lambda:InvokeFunction\"\r\n   function_name = aws_lambda_function.stone2.function_name\r\n   principal     = \"apigateway.amazonaws.com\"\r\n\r\n   source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/bot\"\r\n\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"apigw2\" {\r\n   statement_id  = \"AllowExecutionFromAPIGateway\"\r\n   action        = \"lambda:InvokeFunction\"\r\n   function_name = aws_lambda_function.stone_register2.function_name\r\n   principal     = \"apigateway.amazonaws.com\"\r\n\r\n   source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/register\"\r\n\r\n}\r\n\r\n  \r\n\r\n\r\nresource \"aws_lambda_permission\" \"apigw3\" {\r\n   statement_id  = \"AllowExecutionFromAPIGateway\"\r\n   action        = \"lambda:InvokeFunction\"\r\n   function_name = aws_lambda_function.stone_delete2.function_name\r\n   principal     = \"apigateway.amazonaws.com\"\r\n\r\n   source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/delete\"\r\n\r\n}\r\n\r\n\r\nresource \"aws_lambda_permission\" \"apigw4\" {\r\n   statement_id  = \"AllowExecutionFromAPIGateway\"\r\n   action        = \"lambda:InvokeFunction\"\r\n   function_name = aws_lambda_function.stone_search2.function_name\r\n   principal     = \"apigateway.amazonaws.com\"\r\n\r\n   source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/search\"\r\n\r\n}\r\n\r\n \r\n\r\n\r\noutput \"base_url\" {\r\n  value = aws_api_gateway_deployment.apideploy.invoke_url\r\n}\r\n\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Just teach me how to do just for an API function that I follow with the others ``` resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" { name = \"stone-test\" billing_mode = \"PROVISIONED\" read_capacity = 20 write_capacity = 20 hash_key = \"id\" attribute { name = \"id\" type = \"N\" } ttl { attribute_name = \"TimeToExist\" enabled = false } tags = { Name = \"dynamodb-table-1\" Environment = \"dev\" } } resource \"aws_iam_role_policy\" \"lambda_policy\" { name = \"lambda_policy\" role = aws_iam_role.role_for_LDC.id policy = file(\"policy.json\") } resource \"aws_iam_role\" \"role_for_LDC\" { name = \"myrole\" assume_role_policy = file(\"assume_role_policy.json\") } resource \"aws_lambda_function\" \"stone_register2\" { filename = \"stone_register.zip\" function_name = \"stone_register3\" role = aws_iam_role.role_for_LDC.arn handler = \"stone_register.lambda_handler\" # The filebase64sha256() function is available in Terraform 0.11.12 and later # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function: # source_code_hash = \"${base64sha256(file(\"stone_register.zip\"))}\" source_code_hash = filebase64sha256(\"stone_register.zip\") runtime = \"python3.6\" environment { variables = { DB_TABLE_NAME = \"stone-test\" } } } resource \"aws_lambda_function\" \"stone_delete2\" { filename = \"stone_delete.zip\" function_name = \"stone_delete3\" role = aws_iam_role.role_for_LDC.arn handler = \"stone_delete.lambda_handler\" # The filebase64sha256() function is available in Terraform 0.11.12 and later # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function: # source_code_hash = \"${base64sha256(file(\"stone_delete.zip\"))}\" source_code_hash = filebase64sha256(\"stone_delete.zip\") runtime = \"python3.6\" environment { variables = { DB_TABLE_NAME = \"stone-test\" } } } resource \"aws_lambda_function\" \"stone_search2\" { filename = \"stone_search.zip\" function_name = \"stone_search3\" role = aws_iam_role.role_for_LDC.arn handler = \"stone_search.lambda_handler\" # The filebase64sha256() function is available in Terraform 0.11.12 and later # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function: # source_code_hash = \"${base64sha256(file(\"stone_search.zip\"))}\" source_code_hash = filebase64sha256(\"stone_search.zip\") runtime = \"python3.6\" environment { variables = { DB_TABLE_NAME = \"stone-test\" } } } resource \"aws_lambda_function\" \"stone2\" { filename = \"bot.zip\" function_name = \"stone3\" role = aws_iam_role.role_for_LDC.arn handler = \"bot.lambda_handler\" # The filebase64sha256() function is available in Terraform 0.11.12 and later # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function: # source_code_hash = \"${base64sha256(file(\"bot.zip\"))}\" source_code_hash = filebase64sha256(\"bot.zip\") runtime = \"python3.6\" environment { variables = { DB_TABLE_NAME = \"stone-test\" } } } resource \"aws_api_gateway_rest_api\" \"apiLambda\" { name = \"myAPI\" } resource \"aws_api_gateway_resource\" \"Resource\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id parent_id = aws_api_gateway_rest_api.apiLambda.root_resource_id path_part = \"bot\" } resource \"aws_api_gateway_method\" \"Method\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource.id http_method = \"POST\" authorization = \"NONE\" } resource \"aws_api_gateway_integration\" \"lambdaInt\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource.id http_method = aws_api_gateway_method.Method.http_method integration_http_method = \"POST\" type = \"AWS_PROXY\" uri = aws_lambda_function.stone2.invoke_arn } resource \"aws_api_gateway_resource\" \"Resource2\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id parent_id = aws_api_gateway_rest_api.apiLambda.root_resource_id path_part = \"register\" } resource \"aws_api_gateway_method\" \"Method2\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource2.id http_method = \"POST\" authorization = \"NONE\" } resource \"aws_api_gateway_integration\" \"lambdaInt2\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource2.id http_method = aws_api_gateway_method.Method2.http_method integration_http_method = \"POST\" type = \"AWS_PROXY\" uri = aws_lambda_function.stone_register2.invoke_arn } resource \"aws_api_gateway_resource\" \"Resource3\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id parent_id = aws_api_gateway_rest_api.apiLambda.root_resource_id path_part = \"delete\" } resource \"aws_api_gateway_method\" \"Method3\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource3.id http_method = \"POST\" authorization = \"NONE\" } resource \"aws_api_gateway_integration\" \"lambdaInt3\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource3.id http_method = aws_api_gateway_method.Method3.http_method integration_http_method = \"POST\" type = \"AWS_PROXY\" uri = aws_lambda_function.stone_delete2.invoke_arn } resource \"aws_api_gateway_resource\" \"Resource4\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id parent_id = aws_api_gateway_rest_api.apiLambda.root_resource_id path_part = \"search\" } resource \"aws_api_gateway_method\" \"Method4\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource4.id http_method = \"POST\" authorization = \"NONE\" } resource \"aws_api_gateway_integration\" \"lambdaInt4\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource4.id http_method = aws_api_gateway_method.Method4.http_method integration_http_method = \"POST\" type = \"AWS_PROXY\" uri = aws_lambda_function.stone_search2.invoke_arn } resource \"aws_api_gateway_deployment\" \"apideploy\" { depends_on = [aws_api_gateway_integration.lambdaInt] rest_api_id = aws_api_gateway_rest_api.apiLambda.id stage_name = \"Prod\" } resource \"aws_lambda_permission\" \"apigw\" { statement_id = \"AllowExecutionFromAPIGateway\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.stone2.function_name principal = \"apigateway.amazonaws.com\" source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/bot\" } resource \"aws_lambda_permission\" \"apigw2\" { statement_id = \"AllowExecutionFromAPIGateway\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.stone_register2.function_name principal = \"apigateway.amazonaws.com\" source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/register\" } resource \"aws_lambda_permission\" \"apigw3\" { statement_id = \"AllowExecutionFromAPIGateway\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.stone_delete2.function_name principal = \"apigateway.amazonaws.com\" source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/delete\" } resource \"aws_lambda_permission\" \"apigw4\" { statement_id = \"AllowExecutionFromAPIGateway\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.stone_search2.function_name principal = \"apigateway.amazonaws.com\" source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/search\" ", "keywords": ["bill", "policy", "test"]}]}, {"Id": "238879598", "PostHistoryTypeId": "1", "PostId": "65750908", "RevisionGUID": "e949c453-eee9-4759-8eb8-786b7770beb2", "CreationDate": "2021-01-16T14:44:51.223", "UserId": "9073682", "Text": "Terraform add aws_api_gateway_integration response json", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "238879599", "PostHistoryTypeId": "3", "PostId": "65750908", "RevisionGUID": "e949c453-eee9-4759-8eb8-786b7770beb2", "CreationDate": "2021-01-16T14:44:51.223", "UserId": "9073682", "Text": "<amazon-web-services><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "238926053", "PostHistoryTypeId": "5", "PostId": "65750908", "RevisionGUID": "54dc46db-1af8-4bd6-a7f1-128751f0d3ac", "CreationDate": "2021-01-17T14:22:59.057", "UserId": "9073682", "Comment": "added 759 characters in body", "Text": "I need help to configure the post methods as lambda type without proxy and the 200 response type application / json => Empty\r\n\r\nThis is my Terraform file at aws, I'm new to Terraform, it just lacked this configuration to work if someone can help me.\r\n\r\n\r\nI'm having an error response in terraform apply\r\n\r\nError creating API Gateway Integration Response: NotFoundException: Invalid Integration identifier specified Error creating API Gateway Deployment: BadRequestException: No integration defined for method \r\n\r\n```\r\nresource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {\r\n  name           = \"stone-test\"\r\n  billing_mode   = \"PROVISIONED\"\r\n  read_capacity  = 20\r\n  write_capacity = 20\r\n  hash_key       = \"id\"\r\n\r\n  attribute {\r\n    name = \"id\"\r\n    type = \"N\"\r\n  }\r\n\r\n  ttl {\r\n    attribute_name = \"TimeToExist\"\r\n    enabled        = false\r\n  }\r\n\r\n  tags = {\r\n    Name        = \"dynamodb-table-1\"\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"lambda_policy\" {\r\n  name = \"lambda_policy\"\r\n  role = aws_iam_role.role_for_LDC.id\r\n\r\n  policy = file(\"policy.json\")\r\n}\r\n\r\n\r\nresource \"aws_iam_role\" \"role_for_LDC\" {\r\n  name = \"myrole\"\r\n  \r\n  assume_role_policy = file(\"assume_role_policy.json\")\r\n\r\n}\r\n\r\nresource \"aws_lambda_function\" \"stone_register2\" {\r\n  filename      = \"stone_register.zip\"\r\n  function_name = \"stone_register3\"\r\n  role          = aws_iam_role.role_for_LDC.arn\r\n  handler       = \"stone_register.lambda_handler\"\r\n\r\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\r\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\r\n  # source_code_hash = \"${base64sha256(file(\"stone_register.zip\"))}\"\r\n  source_code_hash = filebase64sha256(\"stone_register.zip\")\r\n\r\n  runtime = \"python3.6\"\r\n\r\n  environment {\r\n    variables = {\r\n      DB_TABLE_NAME = \"stone-test\"\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nresource \"aws_lambda_function\" \"stone_delete2\" {\r\n  filename      = \"stone_delete.zip\"\r\n  function_name = \"stone_delete3\"\r\n  role          = aws_iam_role.role_for_LDC.arn\r\n  handler       = \"stone_delete.lambda_handler\"\r\n\r\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\r\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\r\n  # source_code_hash = \"${base64sha256(file(\"stone_delete.zip\"))}\"\r\n  source_code_hash = filebase64sha256(\"stone_delete.zip\")\r\n\r\n  runtime = \"python3.6\"\r\n\r\n  environment {\r\n    variables = {\r\n      DB_TABLE_NAME = \"stone-test\"\r\n    }\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_lambda_function\" \"stone_search2\" {\r\n  filename      = \"stone_search.zip\"\r\n  function_name = \"stone_search3\"\r\n  role          = aws_iam_role.role_for_LDC.arn\r\n  handler       = \"stone_search.lambda_handler\"\r\n\r\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\r\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\r\n  # source_code_hash = \"${base64sha256(file(\"stone_search.zip\"))}\"\r\n  source_code_hash = filebase64sha256(\"stone_search.zip\")\r\n\r\n  runtime = \"python3.6\"\r\n\r\n  environment {\r\n    variables = {\r\n      DB_TABLE_NAME = \"stone-test\"\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_lambda_function\" \"stone2\" {\r\n  filename      = \"bot.zip\"\r\n  function_name = \"stone3\"\r\n  role          = aws_iam_role.role_for_LDC.arn\r\n  handler       = \"bot.lambda_handler\"\r\n\r\n  # The filebase64sha256() function is available in Terraform 0.11.12 and later\r\n  # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function:\r\n  # source_code_hash = \"${base64sha256(file(\"bot.zip\"))}\"\r\n  source_code_hash = filebase64sha256(\"bot.zip\")\r\n\r\n  runtime = \"python3.6\"\r\n\r\n  environment {\r\n    variables = {\r\n      DB_TABLE_NAME = \"stone-test\"\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_api_gateway_rest_api\" \"apiLambda\" {\r\n  name        = \"myAPI\"\r\n\r\n}\r\n\r\n\r\n  resource \"aws_api_gateway_resource\" \"Resource\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\r\n  path_part   = \"bot\"\r\n\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"Method\" {\r\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id   = aws_api_gateway_resource.Resource.id\r\n   http_method   = \"POST\"\r\n   authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"lambdaInt\" {\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id = aws_api_gateway_resource.Resource.id\r\n   http_method = aws_api_gateway_method.Method.http_method\r\n\r\n   integration_http_method = \"POST\"\r\n   type                    = \"AWS\"\r\n   uri                     = aws_lambda_function.stone2.invoke_arn\r\n   \r\n}\r\n\r\nresource \"aws_api_gateway_method_response\" \"response_200\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  resource_id = aws_api_gateway_resource.Resource.id\r\n  http_method = aws_api_gateway_method.Method.http_method\r\n  status_code = \"200\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration_response\" \"MyDemoIntegrationResponse\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  resource_id = aws_api_gateway_resource.Resource.id\r\n  http_method = aws_api_gateway_method.Method.http_method\r\n  status_code = aws_api_gateway_method_response.response_200.status_code\r\n}\r\n\r\n  resource \"aws_api_gateway_resource\" \"Resource2\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\r\n  path_part   = \"register\"\r\n\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"Method2\" {\r\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id   = aws_api_gateway_resource.Resource2.id\r\n   http_method   = \"POST\"\r\n   authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"lambdaInt2\" {\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id = aws_api_gateway_resource.Resource2.id\r\n   http_method = aws_api_gateway_method.Method2.http_method\r\n\r\n   integration_http_method = \"POST\"\r\n   type                    = \"AWS_PROXY\"\r\n   uri                     = aws_lambda_function.stone_register2.invoke_arn\r\n   \r\n}\r\n\r\nresource \"aws_api_gateway_resource\" \"Resource3\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\r\n  path_part   = \"delete\"\r\n\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"Method3\" {\r\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id   = aws_api_gateway_resource.Resource3.id\r\n   http_method   = \"POST\"\r\n   authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"lambdaInt3\" {\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id = aws_api_gateway_resource.Resource3.id\r\n   http_method = aws_api_gateway_method.Method3.http_method\r\n\r\n   integration_http_method = \"POST\"\r\n   type                    = \"AWS_PROXY\"\r\n   uri                     = aws_lambda_function.stone_delete2.invoke_arn\r\n   \r\n}\r\n\r\nresource \"aws_api_gateway_resource\" \"Resource4\" {\r\n  rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n  parent_id   = aws_api_gateway_rest_api.apiLambda.root_resource_id\r\n  path_part   = \"search\"\r\n\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"Method4\" {\r\n   rest_api_id   = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id   = aws_api_gateway_resource.Resource4.id\r\n   http_method   = \"POST\"\r\n   authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"lambdaInt4\" {\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   resource_id = aws_api_gateway_resource.Resource4.id\r\n   http_method = aws_api_gateway_method.Method4.http_method\r\n\r\n   integration_http_method = \"POST\"\r\n   type                    = \"AWS_PROXY\"\r\n   uri                     = aws_lambda_function.stone_search2.invoke_arn\r\n   \r\n}\r\n\r\n\r\nresource \"aws_api_gateway_deployment\" \"apideploy\" {\r\n   depends_on = [aws_api_gateway_integration.lambdaInt]\r\n\r\n   rest_api_id = aws_api_gateway_rest_api.apiLambda.id\r\n   stage_name  = \"Prod\"\r\n}\r\n\r\n\r\nresource \"aws_lambda_permission\" \"apigw\" {\r\n   statement_id  = \"AllowExecutionFromAPIGateway\"\r\n   action        = \"lambda:InvokeFunction\"\r\n   function_name = aws_lambda_function.stone2.function_name\r\n   principal     = \"apigateway.amazonaws.com\"\r\n\r\n   source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/bot\"\r\n\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"apigw2\" {\r\n   statement_id  = \"AllowExecutionFromAPIGateway\"\r\n   action        = \"lambda:InvokeFunction\"\r\n   function_name = aws_lambda_function.stone_register2.function_name\r\n   principal     = \"apigateway.amazonaws.com\"\r\n\r\n   source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/register\"\r\n\r\n}\r\n\r\n  \r\n\r\n\r\nresource \"aws_lambda_permission\" \"apigw3\" {\r\n   statement_id  = \"AllowExecutionFromAPIGateway\"\r\n   action        = \"lambda:InvokeFunction\"\r\n   function_name = aws_lambda_function.stone_delete2.function_name\r\n   principal     = \"apigateway.amazonaws.com\"\r\n\r\n   source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/delete\"\r\n\r\n}\r\n\r\n\r\nresource \"aws_lambda_permission\" \"apigw4\" {\r\n   statement_id  = \"AllowExecutionFromAPIGateway\"\r\n   action        = \"lambda:InvokeFunction\"\r\n   function_name = aws_lambda_function.stone_search2.function_name\r\n   principal     = \"apigateway.amazonaws.com\"\r\n\r\n   source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/search\"\r\n\r\n}\r\n\r\n \r\n\r\n\r\noutput \"base_url\" {\r\n  value = aws_api_gateway_deployment.apideploy.invoke_url\r\n}\r\n\r\n\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm having an error response in terraform apply Error creating API Gateway Integration Response: NotFoundException: Invalid Integration identifier specified Error creating API Gateway Deployment: BadRequestException: No integration defined for method ``` resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" { name = \"stone-test\" billing_mode = \"PROVISIONED\" read_capacity = 20 write_capacity = 20 hash_key = \"id\" attribute { name = \"id\" type = \"N\" } ttl { attribute_name = \"TimeToExist\" enabled = false } tags = { Name = \"dynamodb-table-1\" Environment = \"dev\" } } resource \"aws_iam_role_policy\" \"lambda_policy\" { name = \"lambda_policy\" role = aws_iam_role.role_for_LDC.id policy = file(\"policy.json\") } resource \"aws_iam_role\" \"role_for_LDC\" { name = \"myrole\" assume_role_policy = file(\"assume_role_policy.json\") } resource \"aws_lambda_function\" \"stone_register2\" { filename = \"stone_register.zip\" function_name = \"stone_register3\" role = aws_iam_role.role_for_LDC.arn handler = \"stone_register.lambda_handler\" # The filebase64sha256() function is available in Terraform 0.11.12 and later # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function: # source_code_hash = \"${base64sha256(file(\"stone_register.zip\"))}\" source_code_hash = filebase64sha256(\"stone_register.zip\") runtime = \"python3.6\" environment { variables = { DB_TABLE_NAME = \"stone-test\" } } } resource \"aws_lambda_function\" \"stone_delete2\" { filename = \"stone_delete.zip\" function_name = \"stone_delete3\" role = aws_iam_role.role_for_LDC.arn handler = \"stone_delete.lambda_handler\" # The filebase64sha256() function is available in Terraform 0.11.12 and later # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function: # source_code_hash = \"${base64sha256(file(\"stone_delete.zip\"))}\" source_code_hash = filebase64sha256(\"stone_delete.zip\") runtime = \"python3.6\" environment { variables = { DB_TABLE_NAME = \"stone-test\" } } } resource \"aws_lambda_function\" \"stone_search2\" { filename = \"stone_search.zip\" function_name = \"stone_search3\" role = aws_iam_role.role_for_LDC.arn handler = \"stone_search.lambda_handler\" # The filebase64sha256() function is available in Terraform 0.11.12 and later # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function: # source_code_hash = \"${base64sha256(file(\"stone_search.zip\"))}\" source_code_hash = filebase64sha256(\"stone_search.zip\") runtime = \"python3.6\" environment { variables = { DB_TABLE_NAME = \"stone-test\" } } } resource \"aws_lambda_function\" \"stone2\" { filename = \"bot.zip\" function_name = \"stone3\" role = aws_iam_role.role_for_LDC.arn handler = \"bot.lambda_handler\" # The filebase64sha256() function is available in Terraform 0.11.12 and later # For Terraform 0.11.11 and earlier, use the base64sha256() function and the file() function: # source_code_hash = \"${base64sha256(file(\"bot.zip\"))}\" source_code_hash = filebase64sha256(\"bot.zip\") runtime = \"python3.6\" environment { variables = { DB_TABLE_NAME = \"stone-test\" } } } resource \"aws_api_gateway_rest_api\" \"apiLambda\" { name = \"myAPI\" } resource \"aws_api_gateway_resource\" \"Resource\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id parent_id = aws_api_gateway_rest_api.apiLambda.root_resource_id path_part = \"bot\" } resource \"aws_api_gateway_method\" \"Method\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource.id http_method = \"POST\" authorization = \"NONE\" } resource \"aws_api_gateway_integration\" \"lambdaInt\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource.id http_method = aws_api_gateway_method.Method.http_method integration_http_method = \"POST\" type = \"AWS\" uri = aws_lambda_function.stone2.invoke_arn } resource \"aws_api_gateway_method_response\" \"response_200\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource.id http_method = aws_api_gateway_method.Method.http_method status_code = \"200\" } resource \"aws_api_gateway_integration_response\" \"MyDemoIntegrationResponse\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource.id http_method = aws_api_gateway_method.Method.http_method status_code = aws_api_gateway_method_response.response_200.status_code } resource \"aws_api_gateway_resource\" \"Resource2\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id parent_id = aws_api_gateway_rest_api.apiLambda.root_resource_id path_part = \"register\" } resource \"aws_api_gateway_method\" \"Method2\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource2.id http_method = \"POST\" authorization = \"NONE\" } resource \"aws_api_gateway_integration\" \"lambdaInt2\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource2.id http_method = aws_api_gateway_method.Method2.http_method integration_http_method = \"POST\" type = \"AWS_PROXY\" uri = aws_lambda_function.stone_register2.invoke_arn } resource \"aws_api_gateway_resource\" \"Resource3\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id parent_id = aws_api_gateway_rest_api.apiLambda.root_resource_id path_part = \"delete\" } resource \"aws_api_gateway_method\" \"Method3\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource3.id http_method = \"POST\" authorization = \"NONE\" } resource \"aws_api_gateway_integration\" \"lambdaInt3\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource3.id http_method = aws_api_gateway_method.Method3.http_method integration_http_method = \"POST\" type = \"AWS_PROXY\" uri = aws_lambda_function.stone_delete2.invoke_arn } resource \"aws_api_gateway_resource\" \"Resource4\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id parent_id = aws_api_gateway_rest_api.apiLambda.root_resource_id path_part = \"search\" } resource \"aws_api_gateway_method\" \"Method4\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource4.id http_method = \"POST\" authorization = \"NONE\" } resource \"aws_api_gateway_integration\" \"lambdaInt4\" { rest_api_id = aws_api_gateway_rest_api.apiLambda.id resource_id = aws_api_gateway_resource.Resource4.id http_method = aws_api_gateway_method.Method4.http_method integration_http_method = \"POST\" type = \"AWS_PROXY\" uri = aws_lambda_function.stone_search2.invoke_arn } resource \"aws_api_gateway_deployment\" \"apideploy\" { depends_on = [aws_api_gateway_integration.lambdaInt] rest_api_id = aws_api_gateway_rest_api.apiLambda.id stage_name = \"Prod\" } resource \"aws_lambda_permission\" \"apigw\" { statement_id = \"AllowExecutionFromAPIGateway\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.stone2.function_name principal = \"apigateway.amazonaws.com\" source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/bot\" } resource \"aws_lambda_permission\" \"apigw2\" { statement_id = \"AllowExecutionFromAPIGateway\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.stone_register2.function_name principal = \"apigateway.amazonaws.com\" source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/register\" } resource \"aws_lambda_permission\" \"apigw3\" { statement_id = \"AllowExecutionFromAPIGateway\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.stone_delete2.function_name principal = \"apigateway.amazonaws.com\" source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/delete\" } resource \"aws_lambda_permission\" \"apigw4\" { statement_id = \"AllowExecutionFromAPIGateway\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.stone_search2.function_name principal = \"apigateway.amazonaws.com\" source_arn = \"${aws_api_gateway_rest_api.apiLambda.execution_arn}/Prod/POST/search\" ", "keywords": ["bill", "policy", "test"]}]}], "answers": [{"Id": "65752080", "PostTypeId": "2", "ParentId": "65750908", "CreationDate": "2021-01-16T16:50:26.373", "Score": "3", "Body": "<p>You are already on the correct path, all you need to do create the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_method_response\" rel=\"nofollow noreferrer\">method_response</a>  and use the same for creating the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration_response\" rel=\"nofollow noreferrer\">integration_response</a></p>\n<p>And change the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration\" rel=\"nofollow noreferrer\">integration type</a></p>\n<p>There is a comprehensive list of the types and what they can do and how can you leverage them in <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-integration-types.html\" rel=\"nofollow noreferrer\">documentation</a></p>\n<p>I only adjusted a few settings in the code you shared, which are below:</p>\n<pre><code>...\nresource &quot;aws_api_gateway_integration&quot; &quot;integration&quot; {\n  rest_api_id             = aws_api_gateway_rest_api.api.id\n  resource_id             = aws_api_gateway_resource.resource.id\n  http_method             = aws_api_gateway_method.method.http_method\n  integration_http_method = &quot;POST&quot;\n  type                    = &quot;AWS&quot;\n  uri = aws_lambda_function.lambda.invoke_arn\n}\n\n....\n\nresource &quot;aws_api_gateway_method_response&quot; &quot;response_200&quot; {\n  rest_api_id = aws_api_gateway_rest_api.api.id\n  resource_id = aws_api_gateway_resource.resource.id\n  http_method = aws_api_gateway_method.method.http_method\n  status_code = &quot;200&quot;\n}\n\nresource &quot;aws_api_gateway_integration_response&quot; &quot;MyDemoIntegrationResponse&quot; {\n  rest_api_id = aws_api_gateway_rest_api.api.id\n  resource_id = aws_api_gateway_resource.resource.id\n  http_method = aws_api_gateway_method.method.http_method\n  status_code = aws_api_gateway_method_response.response_200.status_code\n}\n</code></pre>\n<p>when I test the function from the AWS console I get the following:</p>\n<p><a href=\"https://i.stack.imgur.com/Azfui.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Azfui.png\" alt=\"enter image description here\" /></a></p>\n", "OwnerUserId": "2246345", "LastActivityDate": "2021-01-16T16:50:26.373", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "116270109", "PostId": "65752080", "Score": "0", "Text": "Thank you very much I tried but I had the following error as an answer\n\nMy code: https://pastebin.com/tqssNVxt\n\nError creating API Gateway Integration Response: NotFoundException: Invalid Integration identifier specified\n\nError creating API Gateway Deployment: BadRequestException: No integration defined for method", "CreationDate": "2021-01-17T14:11:23.077", "UserId": "9073682", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "116270652", "PostId": "65752080", "Score": "0", "Text": "you can tell me where I went wrong, I edited my question.  My code https://pastebin.com/tqssNVxt", "CreationDate": "2021-01-17T14:38:44.730", "UserId": "9073682", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "116270779", "PostId": "65752080", "Score": "1", "Text": "seems like a race condition, can you place a [depends_on](https://www.terraform.io/docs/configuration/meta-arguments/depends_on.html) clause for < aws_api_gateway_integration> .", "CreationDate": "2021-01-17T14:45:49.070", "UserId": "2246345", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "116271058", "PostId": "65752080", "Score": "1", "Text": "@AdilmarCoelhoDantas if this works for you can accept this as an answer, this helps the community and anyone who stumble upon this qeustion.", "CreationDate": "2021-01-17T14:59:24.653", "UserId": "2246345", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "238884720", "PostHistoryTypeId": "2", "PostId": "65752080", "RevisionGUID": "3cc18fa9-d992-45b9-9960-e1f4ef5a18e6", "CreationDate": "2021-01-16T16:50:26.373", "UserId": "2246345", "Text": "You are already on the correct path, all you need to do create the [method_response](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_method_response)  and use the same for creating the [integration_response](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration_response)\r\n\r\nAnd change the [integration type](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration)\r\n\r\nThere is a comprehensive list of the types and what they can do and how can you leverage them in [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-integration-types.html)\r\n\r\nI only adjusted a few settings in the code you shared, which are below:\r\n\r\n    ...\r\n    resource \"aws_api_gateway_integration\" \"integration\" {\r\n      rest_api_id             = aws_api_gateway_rest_api.api.id\r\n      resource_id             = aws_api_gateway_resource.resource.id\r\n      http_method             = aws_api_gateway_method.method.http_method\r\n      integration_http_method = \"POST\"\r\n      type                    = \"AWS\"\r\n      uri = aws_lambda_function.lambda.invoke_arn\r\n    }\r\n\r\n    ....\r\n   \r\n    resource \"aws_api_gateway_method_response\" \"response_200\" {\r\n      rest_api_id = aws_api_gateway_rest_api.api.id\r\n      resource_id = aws_api_gateway_resource.resource.id\r\n      http_method = aws_api_gateway_method.method.http_method\r\n      status_code = \"200\"\r\n    }\r\n\r\n    resource \"aws_api_gateway_integration_response\" \"MyDemoIntegrationResponse\" {\r\n      rest_api_id = aws_api_gateway_rest_api.api.id\r\n      resource_id = aws_api_gateway_resource.resource.id\r\n      http_method = aws_api_gateway_method.method.http_method\r\n      status_code = aws_api_gateway_method_response.response_200.status_code\r\n    }\r\n\r\nwhen I test the function from the AWS console I get the following:\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Azfui.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You are already on the correct path, all you need to do create the [method_response](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_method_response) and use the same for creating the [integration_response](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration_response) And change the [integration type](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration) There is a comprehensive list of the types and what they can do and how can you leverage them in [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-integration-types.html) I only adjusted a few settings in the code you shared, which are below: ... resource \"aws_api_gateway_integration\" \"integration\" { rest_api_id = aws_api_gateway_rest_api.api.id resource_id = aws_api_gateway_resource.resource.id http_method = aws_api_gateway_method.method.http_method integration_http_method = \"POST\" type = \"AWS\" uri = aws_lambda_function.lambda.invoke_arn } .... resource \"aws_api_gateway_method_response\" \"response_200\" { rest_api_id = aws_api_gateway_rest_api.api.id resource_id = aws_api_gateway_resource.resource.id http_method = aws_api_gateway_method.method.http_method status_code = \"200\" } resource \"aws_api_gateway_integration_response\" \"MyDemoIntegrationResponse\" { rest_api_id = aws_api_gateway_rest_api.api.id resource_id = aws_api_gateway_resource.resource.id http_method = aws_api_gateway_method.method.http_method status_code = aws_api_gateway_method_response.response_200.status_code } when I test the function from the AWS console I get the following: [![enter image description here][1]][1] [1]: https://i.stack.imgur.com/Azfui.png", "keywords": ["change", "test"]}]}], "filtered-sentences": [{"source": "Body", "text": "You are already on the correct path, all you need to do create the method_response and use the same for creating the integration_response And change the integration type ", "keywords": ["change"]}, {"source": "Body", "text": "There is a comprehensive list of the types and what they can do and how can you leverage them in documentation I only adjusted a few settings in the code you shared, which are below: when I test the function from the AWS console I get the following:", "keywords": ["test"]}]}], "contains-topic": true, "filtered-sentences": []}