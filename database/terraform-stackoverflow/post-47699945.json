{"Id": "47699945", "PostTypeId": "1", "CreationDate": "2017-12-07T16:52:08.850", "Score": "4", "ViewCount": "2211", "Body": "<p>I have been experimenting with Terraform over the last while and it seems to be a very powerful tool for setting up / tearing down cloud infrastructure quickly. </p>\n\n<p>I am trying to work out though what are the actual use cases for this in the real world beyond the initial setup  of your VMs etc? Once the initial setup has completed do you use something like Chef to manage the infrastructure? It just seems that Terraform would not be used too often for smaller companies who are not constantly setting up and tearing down clusters or data centres.</p>\n\n<p>Can someone set me in the right direction, i have checked Hashicorps docs but it is still not abundantly clear to me what the real world scenarios would be to use this once your infrastructure has been set up.</p>\n", "OwnerUserId": "7680075", "LastActivityDate": "2020-06-18T00:18:22.910", "Title": "Terraform how is it used?", "Tags": "<terraform>", "AnswerCount": "3", "CommentCount": "3", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "82359852", "PostId": "47699945", "Score": "1", "Text": "That's broadly accurate - Terraform is basically responsible for provisioning (cloud) infrastructure.  If your infrastructure requirements don't change, then your Terraform code doesn't need to change.", "CreationDate": "2017-12-07T16:53:23.800", "UserId": "129570", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "If your infrastructure requirements don't change, then your Terraform code doesn't need to change.", "keywords": ["change"]}]}, {"Id": "82370023", "PostId": "47699945", "Score": "2", "Text": "I use it to manage my entire AWS infrastructure: Security groups, VPCs, subnets, long-running instances, launch configurations, autoscaling groups, s3 buckets, lambda functions, IAM users, groups & policies, aws inspector, amazon config, load balancers, ECS clusters, ECS registries - etc, etc. I could add our DNS configuration in, I could connect it to Google Cloud resources", "CreationDate": "2017-12-07T22:34:37.323", "UserId": "1125714", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "82530332", "PostId": "47699945", "Score": "2", "Text": "The whole idea of Terraform could be resumed in `Infrastructure as Code`, so basically terraform allows you to create infrastructure (not configure it) in a testable, reliable, reproducible and automatic way. After applying terraform you still probably want to run a `Configuration Management` tool like Puppet, Chef or Salt.", "CreationDate": "2017-12-13T02:06:45.983", "UserId": "3791400", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The whole idea of Terraform could be resumed in `Infrastructure as Code`, so basically terraform allows you to create infrastructure (not configure it) in a testable, reliable, reproducible and automatic way. ", "keywords": ["test"]}]}], "history": [{"Id": "162300477", "PostHistoryTypeId": "2", "PostId": "47699945", "RevisionGUID": "8e7504f6-4a4c-4fb4-b68e-316580ac844a", "CreationDate": "2017-12-07T16:52:08.850", "UserId": "7680075", "Text": "I have been experimenting with Terraform over the last while and it seems to be a very powerful tool for setting up / tearing down cloud infrastructure quickly. \r\n\r\nI am trying to work out though what are the actual use cases for this in the real world beyond the initial setup  of your VMs etc? Once the initial setup has completed do you use something like Chef to manage the infrastructure? It just seems that Terraform would not be used too often for smaller companies who are not constantly setting up and tearing down clusters or data centres.\r\n\r\nCan someone set me in the right direction, i have checked Hashicorps docs but it is still not abundantly clear to me what the real world scenarios would be to use this once your infrastructure has been set up.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "162300478", "PostHistoryTypeId": "1", "PostId": "47699945", "RevisionGUID": "8e7504f6-4a4c-4fb4-b68e-316580ac844a", "CreationDate": "2017-12-07T16:52:08.850", "UserId": "7680075", "Text": "Terraform how is it used?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "162300479", "PostHistoryTypeId": "3", "PostId": "47699945", "RevisionGUID": "8e7504f6-4a4c-4fb4-b68e-316580ac844a", "CreationDate": "2017-12-07T16:52:08.850", "UserId": "7680075", "Text": "<terraform>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "47847475", "PostTypeId": "2", "ParentId": "47699945", "CreationDate": "2017-12-16T16:00:53.967", "Score": "3", "Body": "<p>Terraform can be used to setup your infrastructure the way you want. It can be used to setup cluster of nodes in a smaller amount of time than doing it manually which is time consuming. Once you write down terraform templates you can run it to setup the nodes instantly. The greatest advantage of using Terraform is that it supports various cloud providers like AWS, Microsoft Azure, Google Cloud, Openstack etc and it is open source.</p>\n\n<p>If you have a dynamic environment where you would need to scale up and down often definitely terraform will help you to ease the work. For example setting up a Mesos or a DC/OS cluster. If you want to increase the number of nodes in your mesos cluster you just need to update the number of instances require in your terraform template file. Once you have setup your cluster you can utilize any configuration management tool like chef to apply the configurations.</p>\n\n<p>I would recommend reading the <a href=\"https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca?gi=b2b93de2739f\" rel=\"nofollow noreferrer\">blog series</a> which explains well why Terraform is needed.</p>\n", "OwnerUserId": "3256048", "LastActivityDate": "2017-12-16T16:00:53.967", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "162938608", "PostHistoryTypeId": "2", "PostId": "47847475", "RevisionGUID": "a29243f2-08be-45cc-8013-508086a4f31d", "CreationDate": "2017-12-16T16:00:53.967", "UserId": "3256048", "Text": "Terraform can be used to setup your infrastructure the way you want. It can be used to setup cluster of nodes in a smaller amount of time than doing it manually which is time consuming. Once you write down terraform templates you can run it to setup the nodes instantly. The greatest advantage of using Terraform is that it supports various cloud providers like AWS, Microsoft Azure, Google Cloud, Openstack etc and it is open source.\n\nIf you have a dynamic environment where you would need to scale up and down often definitely terraform will help you to ease the work. For example setting up a Mesos or a DC/OS cluster. If you want to increase the number of nodes in your mesos cluster you just need to update the number of instances require in your terraform template file. Once you have setup your cluster you can utilize any configuration management tool like chef to apply the configurations.\n\nI would recommend reading the [blog series][1] which explains well why Terraform is needed.\n\n\n  [1]: https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca?gi=b2b93de2739f", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "It can be used to setup cluster of nodes in a smaller amount of time than doing it manually which is time consuming. ", "keywords": ["cluster"]}, {"source": "Text", "text": "For example setting up a Mesos or a DC/OS cluster. ", "keywords": ["cluster"]}, {"source": "Text", "text": "If you want to increase the number of nodes in your mesos cluster you just need to update the number of instances require in your terraform template file. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Once you have setup your cluster you can utilize any configuration management tool like chef to apply the configurations. ", "keywords": ["cluster"]}]}], "filtered-sentences": [{"source": "Body", "text": "It can be used to setup cluster of nodes in a smaller amount of time than doing it manually which is time consuming. ", "keywords": ["cluster"]}, {"source": "Body", "text": "For example setting up a Mesos or a DC/OS cluster. ", "keywords": ["cluster"]}, {"source": "Body", "text": "If you want to increase the number of nodes in your mesos cluster you just need to update the number of instances require in your terraform template file. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Once you have setup your cluster you can utilize any configuration management tool like chef to apply the configurations. ", "keywords": ["cluster"]}]}, {"Id": "62440367", "PostTypeId": "2", "ParentId": "47699945", "CreationDate": "2020-06-18T00:18:22.910", "Score": "0", "Body": "<p>Terraform is the IAAS(Infrastructure as the service) tool. It is used to automate the infra provision on the various cloud providers (more than 75). It has become the industry standard for IAAC.</p>\n\n<p><a href=\"https://www.terraform.io/docs/providers/index.html\" rel=\"nofollow noreferrer\">https://www.terraform.io/docs/providers/index.html</a></p>\n\n<p>Why Terraform ?</p>\n\n<ul>\n<li>Free of cost</li>\n<li>The manual tasks are error-prone and inconsistent  </li>\n<li>Multiple platform support</li>\n<li>Easy to write (JSON based) </li>\n<li>Easy integration with configuration management tool (Ansible).</li>\n</ul>\n\n<p>Sample script to launch AWS - EC2 instance </p>\n\n<pre><code>provider \"aws\" {\n  region     = \"us-west-2\"\n  access_key = \"\"\n  secret_key = \"\"\n}\n\nresource \"aws_instance\" \"myec2\" {\n  ami = \"ami-0e34e7b9ca0ace12d\"\n  instance_type= \"t2.micro\"\n}\n</code></pre>\n", "OwnerUserId": "4455023", "LastActivityDate": "2020-06-18T00:18:22.910", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "224324466", "PostHistoryTypeId": "2", "PostId": "62440367", "RevisionGUID": "4d0f3c21-7c34-4119-bad0-07f35fe8b361", "CreationDate": "2020-06-18T00:18:22.910", "UserId": "4455023", "Text": "Terraform is the IAAS(Infrastructure as the service) tool. It is used to automate the infra provision on the various cloud providers (more than 75). It has become the industry standard for IAAC.\r\n\r\nhttps://www.terraform.io/docs/providers/index.html\r\n\r\nWhy Terraform ?\r\n\r\n- Free of cost\r\n- The manual tasks are error-prone and inconsistent  \r\n- Multiple platform support\r\n- Easy to write (JSON based) \r\n- Easy integration with configuration management tool (Ansible).\r\n\r\n\r\n\r\nSample script to launch AWS - EC2 instance \r\n\r\n \r\n\r\n    provider \"aws\" {\r\n      region     = \"us-west-2\"\r\n      access_key = \"\"\r\n      secret_key = \"\"\r\n    }\r\n    \r\n    resource \"aws_instance\" \"myec2\" {\r\n      ami = \"ami-0e34e7b9ca0ace12d\"\r\n      instance_type= \"t2.micro\"\r\n    }\r\n\r\n \r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "https://www.terraform.io/docs/providers/index.html Why Terraform ? - Free of cost - The manual tasks are error-prone and inconsistent - Multiple platform support - Easy to write (JSON based) - Easy integration with configuration management tool (Ansible). ", "keywords": ["cost"]}, {"source": "Text", "text": "Sample script to launch AWS - EC2 instance provider \"aws\" { region = \"us-west-2\" access_key = \"\" secret_key = \"\" } resource \"aws_instance\" \"myec2\" { ami = \"ami-0e34e7b9ca0ace12d\" instance_type= \"t2.micro\" }", "keywords": ["instance", "provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "Free of cost ", "keywords": ["cost"]}, {"source": "Body", "text": "Sample script to launch AWS - EC2 instance", "keywords": ["instance"]}]}, {"Id": "61205172", "PostTypeId": "2", "ParentId": "47699945", "CreationDate": "2020-04-14T10:06:15.003", "Score": "4", "Body": "<p>You can use terraform to setup resources, modify, delete them. You just need to write the terraform file/code/template which is used to manage resources. This Terraform code help us to manage resources</p>\n\n<p>e.g. You can use Terraform Template/File/Code to create EC2 instance resource on AWS Cloud, modify it and delete when not needed. Here, AWS is called as a provider.</p>\n\n<p>Terraform support a lot of providers.</p>\n\n<p>A basic template would like as follows. </p>\n\n<p>This template will create a VPC resource on AWS provider.</p>\n\n<p>variables.tf</p>\n\n<pre><code>variable \"access_key\" {\n     description = \"Access key to AWS console\"\n}\nvariable \"secret_key\" {\n     description = \"Secret key to AWS console\"\n}\nvariable \"region\" {\n     description = \"Region of AWS VPC\"\n}\n</code></pre>\n\n<p>terraform.tfvars</p>\n\n<pre><code>region = \"eu-west-3\"\naccess_key = \"YOUR-ACCESS-KEY\"\nsecret_key = \"YOUR-SECRET-KEY\"\n\n</code></pre>\n\n<p>main.tf</p>\n\n<pre><code>provider \"aws\" {\n      region     = \"${var.region}\"\n      access_key = \"${var.access_key}\"\n      secret_key = \"${var.secret_key}\"\n}\nresource \"aws_vpc\" \"vpc\" {\n     cidr_block = \"10.0.0.0/16\"\n}\nresource \"aws_internet_gateway\" \"gateway\" {\n     vpc_id = \"${aws_vpc.vpc.id}\"\n}\nresource \"aws_route\" \"route\" {\n     route_table_id         = \"${aws_vpc.vpc.main_route_table_id}\"\n     destination_cidr_block = \"0.0.0.0/0\"\n     gateway_id             = \"${aws_internet_gateway.gateway.id}\"\n}\ndata \"aws_availability_zones\" \"available\" {}\nresource \"aws_subnet\" \"main\" {\n    count                   = \"${length(data.aws_availability_zones.available.names)}\"\n    vpc_id                  = \"${aws_vpc.vpc.id}\"\n    cidr_block              = \"10.0.${count.index}.0/24\"\n    map_public_ip_on_launch = true\n    availability_zone       = \"${element(data.aws_availability_zones.available.names, count.index)}\"\n}\n\n</code></pre>\n\n<p>Commands:</p>\n\n<pre><code>terraform init\nterraform plan\nterraform apply\n\n</code></pre>\n\n<p>I would recommend to go through Terraform's Official <a href=\"https://learn.hashicorp.com/terraform\" rel=\"nofollow noreferrer\">Site</a>. They have good documentations available on their site.</p>\n", "OwnerUserId": "13113900", "LastEditorUserId": "13113900", "LastEditDate": "2020-04-14T10:40:26.253", "LastActivityDate": "2020-04-14T10:40:26.253", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "219163275", "PostHistoryTypeId": "2", "PostId": "61205172", "RevisionGUID": "d9d9f8d0-f4d0-4b96-bdaa-29a712b2bc9a", "CreationDate": "2020-04-14T10:06:15.003", "UserId": "13113900", "Text": "You can use terraform to setup resources, modify, delete them. You just need to write the terraform file/code/template which is used to manage resources. This Terraform code help us to manage resources\r\n\r\ne.g. You can use Terraform Template/File/Code to create EC2 instance resource on AWS Cloud, modify it and delete when not needed. Here, AWS is called as a provider.\r\n\r\nTerraform support a lot of providers.\r\n\r\nA basic template would like as follows. \r\n\r\nThis template will create a VPC resource on AWS provider.\r\n\r\n\r\n```\r\nprovider \"aws\" {\r\n      region     = \"${var.region}\"\r\n      access_key = \"${var.access_key}\"\r\n      secret_key = \"${var.secret_key}\"\r\n}\r\nresource \"aws_vpc\" \"vpc\" {\r\n     cidr_block = \"10.0.0.0/16\"\r\n}\r\n\r\n```\r\n\r\nI would recommend to go through Terraform's Official [Site][1]. They have good documentations available on their site.\r\n\r\n\r\n\r\n  [1]: https://learn.hashicorp.com/terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can use Terraform Template/File/Code to create EC2 instance resource on AWS Cloud, modify it and delete when not needed. ", "keywords": ["instance"]}, {"source": "Text", "text": "Here, AWS is called as a provider. ", "keywords": ["provider"]}, {"source": "Text", "text": "This template will create a VPC resource on AWS provider. ", "keywords": ["provider"]}, {"source": "Text", "text": "``` provider \"aws\" { region = \"${var.region}\" access_key = \"${var.access_key}\" secret_key = \"${var.secret_key}\" } resource \"aws_vpc\" \"vpc\" { cidr_block = \"10.0.0.0/16\" ", "keywords": ["provider"]}]}, {"Id": "219165684", "PostHistoryTypeId": "5", "PostId": "61205172", "RevisionGUID": "62887ce3-a827-4c41-acf8-66be34449cdd", "CreationDate": "2020-04-14T10:40:26.253", "UserId": "13113900", "Comment": "added 441 characters in body", "Text": "You can use terraform to setup resources, modify, delete them. You just need to write the terraform file/code/template which is used to manage resources. This Terraform code help us to manage resources\r\n\r\ne.g. You can use Terraform Template/File/Code to create EC2 instance resource on AWS Cloud, modify it and delete when not needed. Here, AWS is called as a provider.\r\n\r\nTerraform support a lot of providers.\r\n\r\nA basic template would like as follows. \r\n\r\nThis template will create a VPC resource on AWS provider.\r\n\r\nvariables.tf\r\n```\r\nvariable \"access_key\" {\r\n     description = \"Access key to AWS console\"\r\n}\r\nvariable \"secret_key\" {\r\n     description = \"Secret key to AWS console\"\r\n}\r\nvariable \"region\" {\r\n     description = \"Region of AWS VPC\"\r\n}\r\n```\r\n\r\nterraform.tfvars\r\n```\r\nregion = \"eu-west-3\"\r\naccess_key = \"YOUR-ACCESS-KEY\"\r\nsecret_key = \"YOUR-SECRET-KEY\"\r\n\r\n```\r\n\r\nmain.tf\r\n```\r\nprovider \"aws\" {\r\n      region     = \"${var.region}\"\r\n      access_key = \"${var.access_key}\"\r\n      secret_key = \"${var.secret_key}\"\r\n}\r\nresource \"aws_vpc\" \"vpc\" {\r\n     cidr_block = \"10.0.0.0/16\"\r\n}\r\nresource \"aws_internet_gateway\" \"gateway\" {\r\n     vpc_id = \"${aws_vpc.vpc.id}\"\r\n}\r\nresource \"aws_route\" \"route\" {\r\n     route_table_id         = \"${aws_vpc.vpc.main_route_table_id}\"\r\n     destination_cidr_block = \"0.0.0.0/0\"\r\n     gateway_id             = \"${aws_internet_gateway.gateway.id}\"\r\n}\r\ndata \"aws_availability_zones\" \"available\" {}\r\nresource \"aws_subnet\" \"main\" {\r\n    count                   = \"${length(data.aws_availability_zones.available.names)}\"\r\n    vpc_id                  = \"${aws_vpc.vpc.id}\"\r\n    cidr_block              = \"10.0.${count.index}.0/24\"\r\n    map_public_ip_on_launch = true\r\n    availability_zone       = \"${element(data.aws_availability_zones.available.names, count.index)}\"\r\n}\r\n\r\n```\r\n\r\nCommands:\r\n```\r\nterraform init\r\nterraform plan\r\nterraform apply\r\n\r\n```\r\n\r\nI would recommend to go through Terraform's Official [Site][1]. They have good documentations available on their site.\r\n\r\n\r\n\r\n  [1]: https://learn.hashicorp.com/terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can use Terraform Template/File/Code to create EC2 instance resource on AWS Cloud, modify it and delete when not needed. ", "keywords": ["instance"]}, {"source": "Text", "text": "Here, AWS is called as a provider. ", "keywords": ["provider"]}, {"source": "Text", "text": "This template will create a VPC resource on AWS provider. ", "keywords": ["provider"]}, {"source": "Text", "text": "variables.tf ``` variable \"access_key\" { description = \"Access key to AWS console\" } variable \"secret_key\" { description = \"Secret key to AWS console\" } variable \"region\" { description = \"Region of AWS VPC\" } ``` terraform.tfvars ``` region = \"eu-west-3\" access_key = \"YOUR-ACCESS-KEY\" secret_key = \"YOUR-SECRET-KEY\" ``` main.tf ``` provider \"aws\" { region = \"${var.region}\" access_key = \"${var.access_key}\" secret_key = \"${var.secret_key}\" } resource \"aws_vpc\" \"vpc\" { cidr_block = \"10.0.0.0/16\" ", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can use Terraform Template/File/Code to create EC2 instance resource on AWS Cloud, modify it and delete when not needed. ", "keywords": ["instance"]}, {"source": "Body", "text": "Here, AWS is called as a provider. ", "keywords": ["provider"]}, {"source": "Body", "text": "This template will create a VPC resource on AWS provider. ", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": []}