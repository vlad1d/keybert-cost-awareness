{"Id": "58840666", "PostTypeId": "1", "AcceptedAnswerId": "58920556", "CreationDate": "2019-11-13T15:42:44.087", "Score": "1", "ViewCount": "1807", "Body": "<p>I deployed k8s cluster on bare metal using terraform following <a href=\"https://github.com/packet-labs/kubernetes-bgp/blob/master/nodes.tf\" rel=\"nofollow noreferrer\">this repository on github</a></p>\n\n<p>Now I have three nodes: </p>\n\n<p><strong><em>ewr1-controller, ewr1-worker-0, ewr1-worker-1</em></strong></p>\n\n<p>Next, I would like to run terraform apply and increment the worker nodes (<strong>*ewr1-worker-3, ewr1-worker-4 ... *</strong>) while keeping the existing controller and worker nodes.\nI tried incrementing the count.index to start from 3, however it still overwrites the existing workers.</p>\n\n<pre><code>resource \"packet_device\" \"k8s_workers\" {\n  project_id       = \"${packet_project.kubenet.id}\"\n  facilities       = \"${var.facilities}\"\n  count            = \"${var.worker_count}\"\n  plan             = \"${var.worker_plan}\"\n  operating_system = \"ubuntu_16_04\"\n  hostname         = \"${format(\"%s-%s-%d\", \"${var.facilities[0]}\", \"worker\", count.index+3)}\"\n  billing_cycle    = \"hourly\"\n  tags             = [\"kubernetes\", \"k8s\", \"worker\"]\n} \n</code></pre>\n\n<p>I havent tried this but if I do  </p>\n\n<pre><code>terraform state rm 'packet_device.k8s_workers'\n</code></pre>\n\n<p>I am assuming these worker nodes will not be managed by the kubernetes master. I don't want to create all the nodes at beginning because the worker nodes that I am adding will have different specs(instance types).</p>\n\n<p>The entire script I used is available here on <a href=\"https://github.com/packet-labs/kubernetes-bgp\" rel=\"nofollow noreferrer\">this github repository</a>.\nI appreciate it if someone could tell what I am missing here and how to achieve this. </p>\n\n<p>Thanks!</p>\n", "OwnerUserId": "12178460", "LastEditorUserId": "16007", "LastEditDate": "2019-11-16T08:05:46.917", "LastActivityDate": "2019-11-18T18:09:24.687", "Title": "Terraform apply, how to increment count and add kubernetes worker nodes to the existing workers?", "Tags": "<kubernetes><terraform><kubeadm><bare-metal-server><metallb>", "AnswerCount": "2", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "103963122", "PostId": "58840666", "Score": "1", "Text": "You need a **deployment strategy** and it must be implemented by your **provider** e.g. Auto Scaling Groups for AWS, https://medium.com/@endofcake/using-terraform-for-zero-downtime-updates-of-an-auto-scaling-group-in-aws-60faca582664", "CreationDate": "2019-11-13T20:01:14.427", "UserId": "213269", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You need a **deployment strategy** and it must be implemented by your **provider** e.g. Auto Scaling Groups for AWS, https://medium.com/@endofcake/using-terraform-for-zero-downtime-updates-of-an-auto-scaling-group-in-aws-60faca582664", "keywords": ["provider"]}]}, {"Id": "104017358", "PostId": "58840666", "Score": "0", "Text": "Can you try to `disallow deletion of the resource` that has been mentioned here:\n\nhttps://coderbook.com/@marcus/prevent-terraform-from-recreating-or-deleting-resource/\n\nBy adding this to your file: \n    lifecycle {\n            prevent_destroy = true\n    }\n}", "CreationDate": "2019-11-15T10:16:50.570", "UserId": "12186585", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "104026504", "PostId": "58840666", "Score": "0", "Text": "@acid_fuji I tried but that doesn't for my situation, the problem is not just keeping the worker nodes but adding them to the existing k8s cluster.", "CreationDate": "2019-11-15T15:07:02.567", "UserId": "12178460", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I tried but that doesn't for my situation, the problem is not just keeping the worker nodes but adding them to the existing k8s cluster.", "keywords": ["cluster"]}]}], "links": [{"Id": "1710592697", "CreationDate": "2019-11-18T13:58:28.987", "PostId": "58840666", "RelatedPostId": "45782516", "LinkTypeId": "1"}], "history": [{"Id": "209136762", "PostHistoryTypeId": "2", "PostId": "58840666", "RevisionGUID": "91734b33-f9a6-4ca4-a83a-3951ec2bd372", "CreationDate": "2019-11-13T15:42:44.087", "UserId": "12178460", "Text": "I deployed k8s cluster on bare metal using terraform following [this repository on github][1]\r\n\r\n\r\nNow I have three nodes: \r\n\r\n***ewr1-controller, ewr1-worker-0, ewr1-worker-1***\r\n\r\nNext, I would like to run terraform apply and increment the worker nodes (***ewr1-worker-3, ewr1-worker-4 ... ***) while keeping the existing controller and worker nodes.\r\nI tried incrementing the count.index to start from 3, however it still overwrites the existing workers.\r\n\r\n    resource \"packet_device\" \"k8s_workers\" {\r\n      project_id       = \"${packet_project.kubenet.id}\"\r\n      facilities       = \"${var.facilities}\"\r\n      count            = \"${var.worker_count}\"\r\n      plan             = \"${var.worker_plan}\"\r\n      operating_system = \"ubuntu_16_04\"\r\n      hostname         = \"${format(\"%s-%s-%d\", \"${var.facilities[0]}\", \"worker\", count.index+3)}\"\r\n      billing_cycle    = \"hourly\"\r\n      tags             = [\"kubernetes\", \"k8s\", \"worker\"]\r\n    } \r\n\r\nI havent tried this but if I do  \r\n\r\n    terraform state rm 'packet_device.k8s_workers'\r\nI am assuming these worker nodes will not be managed by the kubernetes master. Since the ***kubeadm join ...*** generates new hash every time. I don't want to create all the nodes at beginning because the worker nodes that I am adding will have different specs(instance types).\r\n\r\nThe entire script I used is available here on [this github repository][2].\r\nI appreciate it if someone could tell what I am missing here and how to achieve this. \r\n\r\nThanks!\r\n\r\n\r\n  [1]: https://github.com/packet-labs/kubernetes-bgp/blob/master/nodes.tf\r\n  [2]: https://github.com/packet-labs/kubernetes-bgp", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I deployed k8s cluster on bare metal using terraform following [this repository on github][1] ", "keywords": ["cluster"]}, {"source": "Text", "text": "resource \"packet_device\" \"k8s_workers\" { project_id = \"${packet_project.kubenet.id}\" facilities = \"${var.facilities}\" count = \"${var.worker_count}\" plan = \"${var.worker_plan}\" operating_system = \"ubuntu_16_04\" hostname = \"${format(\"%s-%s-%d\", \"${var.facilities[0]}\", \"worker\", count.index+3)}\" billing_cycle = \"hourly\" tags = [\"kubernetes\", \"k8s\", \"worker\"] } I havent tried this but if I do terraform state rm 'packet_device.k8s_workers' ", "keywords": ["bill"]}, {"source": "Text", "text": "I don't want to create all the nodes at beginning because the worker nodes that I am adding will have different specs(instance types). ", "keywords": ["instance"]}]}, {"Id": "209136763", "PostHistoryTypeId": "1", "PostId": "58840666", "RevisionGUID": "91734b33-f9a6-4ca4-a83a-3951ec2bd372", "CreationDate": "2019-11-13T15:42:44.087", "UserId": "12178460", "Text": "Terraform apply, how to increment count and add kubernetes worker nodes to the existing workers?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "209136764", "PostHistoryTypeId": "3", "PostId": "58840666", "RevisionGUID": "91734b33-f9a6-4ca4-a83a-3951ec2bd372", "CreationDate": "2019-11-13T15:42:44.087", "UserId": "12178460", "Text": "<kubernetes><terraform><kubeadm><bare-metal><metallb>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "209153044", "PostHistoryTypeId": "5", "PostId": "58840666", "RevisionGUID": "36a4e195-fc16-4688-8be3-f10b1be13a87", "CreationDate": "2019-11-13T19:58:52.080", "UserId": "12178460", "Comment": "deleted 64 characters in body", "Text": "I deployed k8s cluster on bare metal using terraform following [this repository on github][1]\r\n\r\n\r\nNow I have three nodes: \r\n\r\n***ewr1-controller, ewr1-worker-0, ewr1-worker-1***\r\n\r\nNext, I would like to run terraform apply and increment the worker nodes (***ewr1-worker-3, ewr1-worker-4 ... ***) while keeping the existing controller and worker nodes.\r\nI tried incrementing the count.index to start from 3, however it still overwrites the existing workers.\r\n\r\n    resource \"packet_device\" \"k8s_workers\" {\r\n      project_id       = \"${packet_project.kubenet.id}\"\r\n      facilities       = \"${var.facilities}\"\r\n      count            = \"${var.worker_count}\"\r\n      plan             = \"${var.worker_plan}\"\r\n      operating_system = \"ubuntu_16_04\"\r\n      hostname         = \"${format(\"%s-%s-%d\", \"${var.facilities[0]}\", \"worker\", count.index+3)}\"\r\n      billing_cycle    = \"hourly\"\r\n      tags             = [\"kubernetes\", \"k8s\", \"worker\"]\r\n    } \r\n\r\nI havent tried this but if I do  \r\n\r\n    terraform state rm 'packet_device.k8s_workers'\r\nI am assuming these worker nodes will not be managed by the kubernetes master. I don't want to create all the nodes at beginning because the worker nodes that I am adding will have different specs(instance types).\r\n\r\nThe entire script I used is available here on [this github repository][2].\r\nI appreciate it if someone could tell what I am missing here and how to achieve this. \r\n\r\nThanks!\r\n\r\n\r\n  [1]: https://github.com/packet-labs/kubernetes-bgp/blob/master/nodes.tf\r\n  [2]: https://github.com/packet-labs/kubernetes-bgp", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I deployed k8s cluster on bare metal using terraform following [this repository on github][1] ", "keywords": ["cluster"]}, {"source": "Text", "text": "resource \"packet_device\" \"k8s_workers\" { project_id = \"${packet_project.kubenet.id}\" facilities = \"${var.facilities}\" count = \"${var.worker_count}\" plan = \"${var.worker_plan}\" operating_system = \"ubuntu_16_04\" hostname = \"${format(\"%s-%s-%d\", \"${var.facilities[0]}\", \"worker\", count.index+3)}\" billing_cycle = \"hourly\" tags = [\"kubernetes\", \"k8s\", \"worker\"] } I havent tried this but if I do terraform state rm 'packet_device.k8s_workers' ", "keywords": ["bill"]}, {"source": "Text", "text": "I don't want to create all the nodes at beginning because the worker nodes that I am adding will have different specs(instance types). ", "keywords": ["instance"]}]}, {"Id": "209333965", "PostHistoryTypeId": "6", "PostId": "58840666", "RevisionGUID": "82c1a4b9-60b3-4cce-bc7c-9b0e28d946ca", "CreationDate": "2019-11-16T08:05:46.917", "UserId": "16007", "Comment": "edited tags", "Text": "<kubernetes><terraform><kubeadm><bare-metal-server><metallb>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "58920556", "PostTypeId": "2", "ParentId": "58840666", "CreationDate": "2019-11-18T18:09:24.687", "Score": "1", "Body": "<p>I solved this issue by modifying and removing modules, resources from the terraform.state: manually modifying it and using <a href=\"https://www.terraform.io/docs/commands/state/rm.html\" rel=\"nofollow noreferrer\">terraform state rm &lt;---></a>. </p>\n\n<ul>\n<li><p>Leaving out (<a href=\"https://www.terraform.io/docs/commands/state/rm.html\" rel=\"nofollow noreferrer\">remove state</a>) the section that I want to keep as they\nare.  </p></li>\n<li><p>Modifying the sections in terraform.state that I want change when new servers are added.</p></li>\n<li><p>Incrementing the counter to add new resources, see <a href=\"https://www.terraform.io/docs/configuration-0-11/interpolation.html\" rel=\"nofollow noreferrer\">terraform\ninterpolation</a>.</p></li>\n</ul>\n\n<p>I am using bare-metal cloud provider to deploy k8s and it doesn't support k8s HA or VA autos-calling. This is may not be optimal solution as other have pointed out but if it is not something you need to do quite often, terraform can do the job albeit the hardway. </p>\n", "OwnerUserId": "12178460", "LastActivityDate": "2019-11-18T18:09:24.687", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "209465864", "PostHistoryTypeId": "2", "PostId": "58920556", "RevisionGUID": "5c4be7c0-3bba-425f-a216-54bb87712971", "CreationDate": "2019-11-18T18:09:24.687", "UserId": "12178460", "Text": "I solved this issue by modifying and removing modules, resources from the terraform.state: manually modifying it and using [terraform state rm <--->][1]. \r\n\r\n - Leaving out ([remove state][1]) the section that I want to keep as they\r\n   are.  \r\n  \r\n - Modifying the sections in terraform.state that I want change when new servers are added.\r\n   \r\n - Incrementing the counter to add new resources, see [terraform\r\n   interpolation][2].\r\n\r\nI am using bare-metal cloud provider to deploy k8s and it doesn't support k8s HA or VA autos-calling. This is may not be optimal solution as other have pointed out but if it is not something you need to do quite often, terraform can do the job albeit the hardway. \r\n \r\n\r\n\r\n  [1]: https://www.terraform.io/docs/commands/state/rm.html\r\n  [2]: https://www.terraform.io/docs/configuration-0-11/interpolation.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "- Modifying the sections in terraform.state that I want change when new servers are added. ", "keywords": ["change"]}, {"source": "Text", "text": "I am using bare-metal cloud provider to deploy k8s and it doesn't support k8s HA or VA autos-calling. ", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "Modifying the sections in terraform.state that I want change when new servers are added. ", "keywords": ["change"]}, {"source": "Body", "text": "I am using bare-metal cloud provider to deploy k8s and it doesn't support k8s HA or VA autos-calling. ", "keywords": ["provider"]}]}, {"Id": "58916246", "PostTypeId": "2", "ParentId": "58840666", "CreationDate": "2019-11-18T13:58:28.987", "Score": "2", "Body": "<p>Node resizing is best addressed using an autoscaler. Using Terraform to scale a nodepool might not be the optimal approach as the tool is meant to declare the state of the system rather than dynamically change it.  The best approach for this is to use a cloud auto scaler.\nIn bare metal, you can implement a <code>CloudProvider interface</code> (like the one provided by cloud such as AWS, GCP, Azure)  as described <a href=\"https://github.com/kubernetes/autoscaler/issues/953\" rel=\"nofollow noreferrer\">here</a></p>\n\n<p>After implementing that, you need to determine if your K8s implementation can be <a href=\"https://stackoverflow.com/a/45803656/10892354\">operated as a provider by Terraform</a>, and if that's the case, find the nodepool <code>autoscaler</code> resource that allows the <code>autoscaling</code>.</p>\n\n<p>Wrapping up, Terraform is not meant to be used as an <code>autoscaler</code> given its natures as a declarative language that describes the infrastructure.</p>\n\n<p>The <a href=\"https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler#introduction\" rel=\"nofollow noreferrer\">autoscaling features</a> in K8s are meant to tackle this kind of requirements.</p>\n", "OwnerUserId": "12186585", "LastActivityDate": "2019-11-18T13:58:28.987", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "104101823", "PostId": "58916246", "Score": "0", "Text": "The cloud provider in this case doesn't support autos-caller, I have been doing that on other cloud providers. Here I was looking for way to get around this problem by modifying the terrafrom script.", "CreationDate": "2019-11-18T17:50:04.117", "UserId": "12178460", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The cloud provider in this case doesn't support autos-caller, I have been doing that on other cloud providers. ", "keywords": ["provider"]}]}], "history": [{"Id": "209448647", "PostHistoryTypeId": "2", "PostId": "58916246", "RevisionGUID": "4148c692-fe86-40a0-9a51-acc61ce26387", "CreationDate": "2019-11-18T13:58:28.987", "UserId": "12186585", "Text": "Node resizing is best addressed using an autoscaler. Using Terraform to scale a nodepool might not be the optimal approach as the tool is meant to declare the state of the system rather than dynamically change it.  The best approach for this is to use a cloud auto scaler.\r\nIn bare metal, you can implement a `CloudProvider interface` (like the one provided by cloud such as AWS, GCP, Azure)  as described [here][1]\r\n\r\nAfter implementing that, you need to determine if your K8s implementation can be [operated as a provider by Terraform][2], and if that's the case, find the nodepool `autoscaler` resource that allows the `autoscaling`.\r\n\r\nWrapping up, Terraform is not meant to be used as an `autoscaler` given its natures as a declarative language that describes the infrastructure.\r\n\r\nThe [autoscaling features][3] in K8s are meant to tackle this kind of requirements.\r\n\r\n  [1]: https://github.com/kubernetes/autoscaler/issues/953\r\n  [2]: https://stackoverflow.com/a/45803656/10892354\r\n  [3]: https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler#introduction", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Using Terraform to scale a nodepool might not be the optimal approach as the tool is meant to declare the state of the system rather than dynamically change it. ", "keywords": ["change"]}, {"source": "Text", "text": "After implementing that, you need to determine if your K8s implementation can be [operated as a provider by Terraform][2], and if that's the case, find the nodepool `autoscaler` resource that allows the `autoscaling`. ", "keywords": ["provider"]}, {"source": "Text", "text": "The [autoscaling features][3] in K8s are meant to tackle this kind of requirements. [1]: https://github.com/kubernetes/autoscaler/issues/953 [2]: https://stackoverflow.com/a/45803656/10892354 [3]: https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler#introduction", "keywords": ["cluster"]}]}], "filtered-sentences": [{"source": "Body", "text": "Using Terraform to scale a nodepool might not be the optimal approach as the tool is meant to declare the state of the system rather than dynamically change it. ", "keywords": ["change"]}, {"source": "Body", "text": "In bare metal, you can implement a CloudProvider interface (like the one provided by cloud such as AWS, GCP, Azure) as described here After implementing that, you need to determine if your K8s implementation can be operated as a provider by Terraform, and if that's the case, find the nodepool autoscaler resource that allows the autoscaling. ", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I deployed k8s cluster on bare metal using terraform following this repository on github Now I have three nodes: ewr1-controller, ewr1-worker-0, ewr1-worker-1 Next, I would like to run terraform apply and increment the worker nodes (*ewr1-worker-3, ewr1-worker-4 ... *) while keeping the existing controller and worker nodes. ", "keywords": ["cluster"]}, {"source": "Body", "text": "I don't want to create all the nodes at beginning because the worker nodes that I am adding will have different specs(instance types). ", "keywords": ["instance"]}]}