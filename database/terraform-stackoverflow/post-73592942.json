{"Id": "73592942", "PostTypeId": "1", "CreationDate": "2022-09-03T14:21:54.893", "Score": "0", "ViewCount": "98", "Body": "<p>I'm testing the PAN-OS provider from Palo Alto networks, with the goal of configuring a firewall as-code. I can easily make a security policy:</p>\n<pre><code>resource &quot;panos_security_policy&quot; &quot;security_policy&quot; {\n    rule {\n        name = var.name\n        source_zones = var.source_zones\n        source_addresses = var.source_addresses\n        source_users = var.source_users\n        destination_zones = var.destination_zones\n        destination_addresses = var.destination_addresses\n        applications = var.applications\n        services = var.services\n        categories = var.categories\n        action = var.action\n    }\n}\n</code></pre>\n<p>I have 50+ rules that will need to be managed this way. I could brute-force each rule as an individual resource, or I could use a module with mapped values. But both of those seem like a lot of manual work and hard to maintain. Any ideas for the most efficient way to iterate this resource over a set of values? Anyone who has had to manage a large AWS security group with lots of rules may know of something.</p>\n", "OwnerUserId": "14496639", "LastActivityDate": "2022-09-03T15:24:50.500", "Title": "Terraform: Iterating a resources over multiple values?", "Tags": "<terraform>", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129957234", "PostId": "73592942", "Score": "2", "Text": "Well, you could use a `for_each` loop.", "CreationDate": "2022-09-03T14:33:48.750", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "277531952", "PostHistoryTypeId": "2", "PostId": "73592942", "RevisionGUID": "5b579456-6afe-41a1-9738-4d0e2b661d2c", "CreationDate": "2022-09-03T14:21:54.893", "UserId": "14496639", "Text": "I'm testing the PAN-OS provider from Palo Alto networks, with the goal of configuring a firewall as-code. I can easily make a security policy: \r\n\r\n    resource \"panos_security_policy\" \"security_policy\" {\r\n        rule {\r\n            name = var.name\r\n            source_zones = var.source_zones\r\n            source_addresses = var.source_addresses\r\n            source_users = var.source_users\r\n            destination_zones = var.destination_zones\r\n            destination_addresses = var.destination_addresses\r\n            applications = var.applications\r\n            services = var.services\r\n            categories = var.categories\r\n            action = var.action\r\n        }\r\n    }\r\n\r\nI have 50+ rules that will need to be managed this way. I could brute-force each rule as an individual resource, or I could use a module with mapped values. But both of those seem like a lot of manual work and hard to maintain. Any ideas for the most efficient way to iterate this resource over a set of values? Anyone who has had to manage a large AWS security group with lots of rules may know of something. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm testing the PAN-OS provider from Palo Alto networks, with the goal of configuring a firewall as-code. ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "I can easily make a security policy: resource \"panos_security_policy\" \"security_policy\" { rule { name = var.name source_zones = var.source_zones source_addresses = var.source_addresses source_users = var.source_users destination_zones = var.destination_zones destination_addresses = var.destination_addresses applications = var.applications services = var.services categories = var.categories action = var.action } } I have 50+ rules that will need to be managed this way. ", "keywords": ["policy"]}, {"source": "Text", "text": "Any ideas for the most efficient way to iterate this resource over a set of values? ", "keywords": ["efficient"]}]}, {"Id": "277531954", "PostHistoryTypeId": "1", "PostId": "73592942", "RevisionGUID": "5b579456-6afe-41a1-9738-4d0e2b661d2c", "CreationDate": "2022-09-03T14:21:54.893", "UserId": "14496639", "Text": "Terraform: Iterating a resources over multiple values?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "277531955", "PostHistoryTypeId": "3", "PostId": "73592942", "RevisionGUID": "5b579456-6afe-41a1-9738-4d0e2b661d2c", "CreationDate": "2022-09-03T14:21:54.893", "UserId": "14496639", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "73593375", "PostTypeId": "2", "ParentId": "73592942", "CreationDate": "2022-09-03T15:24:50.500", "Score": "2", "Body": "<p>You can use a <code>for_each</code> loop, e.g.</p>\n<pre><code>for_each = { for k, v in var.rules : k =&gt; v }\n\nname = each.key\nsource_zones = each.value.source_zones\nsource_addresses = each.value.source_addresses\nsource_users = each.value.source_users\n...\n</code></pre>\n<p>on variables file:</p>\n<pre><code>rules = {\n    rulename1 = {\n      source_zones   = &quot;foo&quot;\n      source_address = &quot;bar&quot;\n      source_users   = &quot;baz&quot;\n    }\n    rulename2 = {\n      source_zones   = &quot;foo&quot;\n      source_address = &quot;biz&quot;\n      source_users   = &quot;buz&quot;\n    }\n  }\n</code></pre>\n<p>Make sure to read <a href=\"https://www.terraform.io/language/meta-arguments/for_each\" rel=\"nofollow noreferrer\">this</a> if you need further details.</p>\n", "OwnerUserId": "16970043", "LastActivityDate": "2022-09-03T15:24:50.500", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "277534273", "PostHistoryTypeId": "2", "PostId": "73593375", "RevisionGUID": "73807d76-13ff-4f92-921a-ef92678aeb57", "CreationDate": "2022-09-03T15:24:50.500", "UserId": "16970043", "Text": "You can use a `for_each` loop, e.g.\r\n\r\n```\r\nfor_each = { for k, v in var.rules : k => v }\r\n\r\nname = each.key\r\nsource_zones = each.value.source_zones\r\nsource_addresses = each.value.source_addresses\r\nsource_users = each.value.source_users\r\n...\r\n```\r\n\r\non variables file:\r\n\r\n```\r\nrules = {\r\n    rulename1 = {\r\n      source_zones   = \"foo\"\r\n      source_address = \"bar\"\r\n      source_users   = \"baz\"\r\n    }\r\n    rulename2 = {\r\n      source_zones   = \"foo\"\r\n      source_address = \"biz\"\r\n      source_users   = \"buz\"\r\n    }\r\n  }\r\n```\r\n\r\nMake sure to read [this][1] if you need further details.\r\n\r\n\r\n  [1]: https://www.terraform.io/language/meta-arguments/for_each", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I'm testing the PAN-OS provider from Palo Alto networks, with the goal of configuring a firewall as-code. ", "keywords": ["provider", "test"]}, {"source": "Body", "text": "I can easily make a security policy: I have 50+ rules that will need to be managed this way. ", "keywords": ["policy"]}, {"source": "Body", "text": "Any ideas for the most efficient way to iterate this resource over a set of values? ", "keywords": ["efficient"]}]}