{"Id": "67312304", "PostTypeId": "1", "AcceptedAnswerId": "67312406", "CreationDate": "2021-04-29T06:50:07.983", "Score": "0", "ViewCount": "800", "Body": "<p>I am trying to run this code:</p>\n<pre><code>locals {\n    terraform_modules_git = &quot;git::ssh://....@vs-ssh.visualstudio.com/v3/...../terraform-modules&quot;\n    terraform_modules_module = &quot;resource_group?ref=v15.0.0&quot;\n}\n\nmodule &quot;MyModuleCall&quot; {\n    source = &quot;${local.terraform_modules_git}/${local.terraform_modules_module}&quot;\n}\n</code></pre>\n<p>My goal was to consolidate all Tag references in one place and not duplicate long string with the name of the repo with all my modules numerous times.</p>\n<p>And I get this error:</p>\n<pre><code>Error: Variables not allowed\n\n  on main.tf line 12, in module &quot;MyModuleCall&quot;:\n  12:   source = &quot;${local.terraform_modules_git}/${local.terraform_modules_module}&quot;\n\nVariables may not be used here.\n</code></pre>\n<p>Does anybody know why they have put this limitation? What is wrong with using variables?\nDoes anybody see any work around?</p>\n", "OwnerUserId": "7405738", "LastEditorUserId": "7405738", "LastEditDate": "2021-04-29T07:56:50.620", "LastActivityDate": "2021-04-29T18:56:02.627", "Title": "Using variables when specifying location of the module in Terraform", "Tags": "<terraform>", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "245617239", "PostHistoryTypeId": "2", "PostId": "67312304", "RevisionGUID": "5a9ac8f3-82a0-4573-8400-06ddf1f20af1", "CreationDate": "2021-04-29T06:50:07.983", "UserId": "7405738", "Text": "I am trying to run this code:\r\n\r\n    locals {\r\n     terraform_modules_git = \"git::ssh://....@vs-ssh.visualstudio.com/v3/...../terraform-modules\"\r\n     terraform_modules_module = \"resource_group?ref=v15.0.0\"\r\n    }\r\n    \r\n    module \"MyModuleCall\" {\r\n     source = \"${local.terraform_modules_git}/${local.terraform_modules_module}\"\r\n    }\r\n\r\nAnd I get this error:\r\n\r\n    Error: Variables not allowed\r\n    \r\n      on main.tf line 12, in module \"MyModuleCall\":\r\n      12:   source = \"${local.terraform_modules_git}/${local.terraform_modules_module}\"\r\n    \r\n    Variables may not be used here.\r\n\r\n\r\nDoes anybody know why they have put this limitation? What is wrong with using variables?\r\nDoes anybody see any work around?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "245617240", "PostHistoryTypeId": "1", "PostId": "67312304", "RevisionGUID": "5a9ac8f3-82a0-4573-8400-06ddf1f20af1", "CreationDate": "2021-04-29T06:50:07.983", "UserId": "7405738", "Text": "Using variables when specifying location of the module in Terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "245617241", "PostHistoryTypeId": "3", "PostId": "67312304", "RevisionGUID": "5a9ac8f3-82a0-4573-8400-06ddf1f20af1", "CreationDate": "2021-04-29T06:50:07.983", "UserId": "7405738", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "245621159", "PostHistoryTypeId": "5", "PostId": "67312304", "RevisionGUID": "9b91f690-041e-4a4f-86b4-cc916a6fcce8", "CreationDate": "2021-04-29T07:56:50.620", "UserId": "7405738", "Comment": "added 154 characters in body", "Text": "I am trying to run this code:\r\n\r\n    locals {\r\n     terraform_modules_git = \"git::ssh://....@vs-ssh.visualstudio.com/v3/...../terraform-modules\"\r\n     terraform_modules_module = \"resource_group?ref=v15.0.0\"\r\n    }\r\n    \r\n    module \"MyModuleCall\" {\r\n     source = \"${local.terraform_modules_git}/${local.terraform_modules_module}\"\r\n    }\r\n\r\nMy goal was to consolidate all Tag references in one place and not duplicate long string with the name of the repo with all my modules numerous times.\r\n\r\nAnd I get this error:\r\n\r\n    Error: Variables not allowed\r\n    \r\n      on main.tf line 12, in module \"MyModuleCall\":\r\n      12:   source = \"${local.terraform_modules_git}/${local.terraform_modules_module}\"\r\n    \r\n    Variables may not be used here.\r\n\r\n\r\nDoes anybody know why they have put this limitation? What is wrong with using variables?\r\nDoes anybody see any work around?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "67312406", "PostTypeId": "2", "ParentId": "67312304", "CreationDate": "2021-04-29T06:58:27.753", "Score": "2", "Body": "<p>You can't dynamically generate <code>source</code>. You must explicitly hardcode it, as explained in the <a href=\"https://www.terraform.io/docs/language/modules/syntax.html#source\" rel=\"nofollow noreferrer\">docs</a>:</p>\n<blockquote>\n<p>This value <strong>must be a literal string</strong> with no template sequences; arbitrary expressions are not allowed.</p>\n</blockquote>\n<p>Sadly, I'm not aware of any workaround, except pre-processing templates before using them. The pre-processing would just find and replace the <code>source</code> with what you want.</p>\n", "OwnerUserId": "248823", "LastActivityDate": "2021-04-29T06:58:27.753", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "118980131", "PostId": "67312406", "Score": "0", "Text": "Yeah. They should be better programmers... Language should be a language..", "CreationDate": "2021-04-29T07:53:57.770", "UserId": "7405738", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "245617678", "PostHistoryTypeId": "2", "PostId": "67312406", "RevisionGUID": "344af9f0-fce1-49c9-8553-ee1e5419c1ad", "CreationDate": "2021-04-29T06:58:27.753", "UserId": "248823", "Text": "You can't dynamically generate `source`. You must explicitly hardcode it, as explained in the [docs](https://www.terraform.io/docs/language/modules/syntax.html#source):\r\n\r\n> This value **must be a literal string** with no template sequences; arbitrary expressions are not allowed. \r\n\r\nSadly, I'm not aware of any workaround, except pre-processing templates before using them. The pre-processing would just find and replace the `source` with what you want.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "67323504", "PostTypeId": "2", "ParentId": "67312304", "CreationDate": "2021-04-29T18:56:02.627", "Score": "0", "Body": "<p>Dependencies in Terraform are handled statically before executing the program, because the runtime needs to have access to all of the involved code (in Terraform's case, both modules and providers) before it can create a runtime context in order to execute any code. This is similar to most other programming languages, where you'd typically install dependencies using a separate command like <code>pip install</code> or <code>npm install</code> or <code>go get</code> before you can run the main program. In Terraform's case, the dependency installer is <code>terraform init</code>, and &quot;running the program&quot; means running <code>terraform plan</code> or <code>terraform apply</code>.</p>\n<p>For this reason, Terraform cannot and does not permit dynamically-constructed module or provider source addresses. If you need to abstract the physical location and access method of your modules from the address specified in calling modules then one option is to use a <a href=\"https://www.terraform.io/docs/internals/module-registry-protocol.html\" rel=\"nofollow noreferrer\">module registry</a> to tell Terraform how to map a local address like <code>yourcompany.example.com/yourteam/resource-group/azure</code> to the more complex Git URL that Terraform will actually use to fetch it.</p>\n<p>However, in practice most teams prefer to specify their Git URLs directly because it results in a simpler overall system, albeit at the expense of it being harder to move your modules to a new location at a later date. A compromise between these two is to use a hosted service which provides Terraform Registry services, such as Terraform Cloud, but of course that comes at the expense of introducing another possible point of failure into your overall system.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2021-04-29T18:56:02.627", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "119006194", "PostId": "67323504", "Score": "0", "Text": "Thanks for participation. Nevertheless. All junior compiler developers know what is \"constant expression\". They are calculated at the compile time. None of the programming languages that I know have problem with that. Terraform looks to be the first. They should maybe order a book about compilers at Amazon. This should help. There is no need to get location of the module say out of a data source block. The simplest form of a constant expression would be enough. In any case during \"terraform init\" they already do full parsing. Calculating a constant expression at this point is not a big deal.", "CreationDate": "2021-04-30T04:03:08.040", "UserId": "7405738", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119020826", "PostId": "67323504", "Score": "0", "Text": "Yup. Constant expressions in the Terraform language include only literal values, not references to local values, and thus the error you shared in your question.", "CreationDate": "2021-04-30T15:21:01.687", "UserId": "281848", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119026360", "PostId": "67323504", "Score": "0", "Text": "In other languages there is a concept of \"const\". This way something is marked as immutable explicitly. Terraform does not have such thing. But even without marking something as const explicitly compiler can still do its job and understand if this value may change or not. And, propagate this property to expressions.", "CreationDate": "2021-04-30T19:23:28.987", "UserId": "7405738", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "But even without marking something as const explicitly compiler can still do its job and understand if this value may change or not. ", "keywords": ["change"]}]}, {"Id": "119028675", "PostId": "67323504", "Score": "0", "Text": "Indeed, the Terraform language doesn't have the idea of a symbol referring to a constant.", "CreationDate": "2021-04-30T21:25:02.037", "UserId": "281848", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "245663804", "PostHistoryTypeId": "2", "PostId": "67323504", "RevisionGUID": "c02c0cae-8a36-4289-8d79-e8eba0b29fe3", "CreationDate": "2021-04-29T18:56:02.627", "UserId": "281848", "Text": "Dependencies in Terraform are handled statically before executing the program, because the runtime needs to have access to all of the involved code (in Terraform's case, both modules and providers) before it can create a runtime context in order to execute any code. This is similar to most other programming languages, where you'd typically install dependencies using a separate command like `pip install` or `npm install` or `go get` before you can run the main program. In Terraform's case, the dependency installer is `terraform init`, and \"running the program\" means running `terraform plan` or `terraform apply`.\r\n\r\nFor this reason, Terraform cannot and does not permit dynamically-constructed module or provider source addresses. If you need to abstract the physical location and access method of your modules from the address specified in calling modules then one option is to use a [module registry](https://www.terraform.io/docs/internals/module-registry-protocol.html) to tell Terraform how to map a local address like `yourcompany.example.com/yourteam/resource-group/azure` to the more complex Git URL that Terraform will actually use to fetch it.\r\n\r\nHowever, in practice most teams prefer to specify their Git URLs directly because it results in a simpler overall system, albeit at the expense of it being harder to move your modules to a new location at a later date. A compromise between these two is to use a hosted service which provides Terraform Registry services, such as Terraform Cloud, but of course that comes at the expense of introducing another possible point of failure into your overall system.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For this reason, Terraform cannot and does not permit dynamically-constructed module or provider source addresses. ", "keywords": ["provider"]}, {"source": "Text", "text": "However, in practice most teams prefer to specify their Git URLs directly because it results in a simpler overall system, albeit at the expense of it being harder to move your modules to a new location at a later date. ", "keywords": ["expense"]}, {"source": "Text", "text": "A compromise between these two is to use a hosted service which provides Terraform Registry services, such as Terraform Cloud, but of course that comes at the expense of introducing another possible point of failure into your overall system.", "keywords": ["expense"]}]}], "filtered-sentences": [{"source": "Body", "text": "For this reason, Terraform cannot and does not permit dynamically-constructed module or provider source addresses. ", "keywords": ["provider"]}, {"source": "Body", "text": "However, in practice most teams prefer to specify their Git URLs directly because it results in a simpler overall system, albeit at the expense of it being harder to move your modules to a new location at a later date. ", "keywords": ["expense"]}, {"source": "Body", "text": "A compromise between these two is to use a hosted service which provides Terraform Registry services, such as Terraform Cloud, but of course that comes at the expense of introducing another possible point of failure into your overall system.", "keywords": ["expense"]}]}], "contains-topic": true, "filtered-sentences": []}