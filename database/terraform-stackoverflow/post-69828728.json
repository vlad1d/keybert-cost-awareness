{"Id": "69828728", "PostTypeId": "1", "CreationDate": "2021-11-03T16:50:04.613", "Score": "0", "ViewCount": "376", "Body": "<p>I have a locally hosted gitlab instance, with two repositories insisde same group.</p>\n<pre><code>AWS:\n-   /Modules\n-   /VPC\n</code></pre>\n<p>Inside the vpc repo I am referring to a module present inside <code>Modules</code> repo</p>\n<pre><code>module &quot;custom-vpc&quot; {\n  source      = &quot;git::https://local.gitlab.mydomain.com/aws/modules.git//vpc&quot;\n\u2026\n</code></pre>\n<p>However, in <code>CI</code> this results in following error during <code>init</code> stage:</p>\n<pre><code>fatal: unable to access\n\u2502 'https://local.gitlab.mydomain.com/aws/modules.git/': SSL\n\u2502 certificate problem: unable to get local issuer certificate\n</code></pre>\n<p>Since both repos are part of the same group and hosted locally, is there a way I can reference modules without going to a https route? Or what other solutions are there for this?</p>\n", "OwnerUserId": "971741", "LastActivityDate": "2021-11-04T02:39:09.660", "Title": "Referencing a module in a peer repository on a locally hosted gitlab", "Tags": "<gitlab><terraform><gitlab-ci>", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "123437625", "PostId": "69828728", "Score": "1", "Text": "Maybe use git+ssh instead of http(s)? You could use [deploy keys](https://docs.gitlab.com/ee/user/project/deploy_keys/) as-needed for project-scoped SSH keys. Would that help resolve your issue? Though I think you could also just resolve the SSL issue as well and use https.", "CreationDate": "2021-11-03T20:42:14.113", "UserId": "5747944", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "123438848", "PostId": "69828728", "Score": "0", "Text": "@sytech I tried that, what blocked me there is `deploy_keys` are available as CI env variable however interpolating them into terraform code doesnt seems to be working.", "CreationDate": "2021-11-03T21:42:58.250", "UserId": "971741", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "257219252", "PostHistoryTypeId": "2", "PostId": "69828728", "RevisionGUID": "70002539-1748-4ffc-be77-e865b0335784", "CreationDate": "2021-11-03T16:50:04.613", "UserId": "971741", "Text": "I have a locally hosted gitlab instance, with two repositories insisde same group.\r\n\r\n    AWS:\r\n    - /Modules\r\n    - /VPC\r\n\r\nInside the vpc repo I am referring to a module present inside `Modules` repo\r\n\r\n    module \"custom-vpc\" {\r\n      source      = \"git::https://local.gitlab.mydomain.com/aws/modules.git//vpc\"\r\n    \u2026\r\n\r\nHowever, in `CI` this results in following error during `init` stage:\r\n\r\n    fatal: unable to access\r\n    \u2502 'https://local.gitlab.mydomain.com/aws/modules.git/': SSL\r\n    \u2502 certificate problem: unable to get local issuer certificate\r\n\r\nSince both repos are part of the same group and hosted locally, is there a way I can reference modules without going to a https route? Or what other solutions are there for this?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have a locally hosted gitlab instance, with two repositories insisde same group. ", "keywords": ["instance"]}]}, {"Id": "257219254", "PostHistoryTypeId": "1", "PostId": "69828728", "RevisionGUID": "70002539-1748-4ffc-be77-e865b0335784", "CreationDate": "2021-11-03T16:50:04.613", "UserId": "971741", "Text": "Referencing a module in a peer repository on a locally hosted gitlab", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "257219255", "PostHistoryTypeId": "3", "PostId": "69828728", "RevisionGUID": "70002539-1748-4ffc-be77-e865b0335784", "CreationDate": "2021-11-03T16:50:04.613", "UserId": "971741", "Text": "<gitlab><terraform><gitlab-ci>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "69833953", "PostTypeId": "2", "ParentId": "69828728", "CreationDate": "2021-11-04T02:39:09.660", "Score": "0", "Body": "<p>If you're trying to avoid using HTTPS, your essentially have two options:</p>\n<ol>\n<li>Use SSH (which you can use with a deploy key as sytech mentions in the comments), or</li>\n<li>Use a git submodule, and reference your module file locally.</li>\n</ol>\n<p>If you choose to use the second option, just embed your first git repo within the second repo as a submodule, and ensure your CI/CD settings are set to fetch your submodules. Once you have that set up, refer to the module path as if it were a local file, and you should be good with no HTTPS needed.</p>\n<p>All that having been set up, if you plan to use this setup long term, you should really set up HTTPS. The correct way to handle this is to use the <a href=\"https://docs.gitlab.com/ee/user/packages/terraform_module_registry/\" rel=\"nofollow noreferrer\">GitLab terraform module repository</a>, which will still require HTTPS. You can get a free certificate using lets encrypt, and it's pretty cheap to buy a domain to validate.</p>\n", "OwnerUserId": "1170451", "LastActivityDate": "2021-11-04T02:39:09.660", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "257246831", "PostHistoryTypeId": "2", "PostId": "69833953", "RevisionGUID": "1f60cbd5-d3e1-40ff-9d56-a6c80d0261fd", "CreationDate": "2021-11-04T02:39:09.660", "UserId": "1170451", "Text": "If you're trying to avoid using HTTPS, your essentially have two options:\r\n\r\n 1. Use SSH (which you can use with a deploy key as sytech mentions in the comments), or\r\n 2. Use a git submodule, and reference your module file locally.\r\n\r\nIf you choose to use the second option, just embed your first git repo within the second repo as a submodule, and ensure your CI/CD settings are set to fetch your submodules. Once you have that set up, refer to the module path as if it were a local file, and you should be good with no HTTPS needed.\r\n\r\nAll that having been set up, if you plan to use this setup long term, you should really set up HTTPS. The correct way to handle this is to use the [GitLab terraform module repository][1], which will still require HTTPS. You can get a free certificate using lets encrypt, and it's pretty cheap to buy a domain to validate.\r\n\r\n\r\n  [1]: https://docs.gitlab.com/ee/user/packages/terraform_module_registry/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can get a free certificate using lets encrypt, and it's pretty cheap to buy a domain to validate. ", "keywords": ["cheap", "domain"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can get a free certificate using lets encrypt, and it's pretty cheap to buy a domain to validate.", "keywords": ["cheap", "domain"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have a locally hosted gitlab instance, with two repositories insisde same group. ", "keywords": ["instance"]}]}