{"Id": "69360523", "PostTypeId": "1", "AcceptedAnswerId": "69360861", "CreationDate": "2021-09-28T11:02:26.137", "Score": "0", "ViewCount": "153", "Body": "<p>I'm working on creating the repos using terraform. The git repo input is passing as a list to terraform.tfvars as given below</p>\n<p>repo_list = [&quot;Test-Repo1&quot;,&quot;Dev-Repo2&quot;,&quot;Prod_Repo3&quot;]</p>\n<p>i'm using the below configuration language to provision the repos</p>\n<pre><code>resource &quot;azuredevops_git_repository&quot; &quot;test&quot; {\n  count = length(var.repo_list )\n  project_id = azuredevops_project.proj.id\n  name       = var.repo_list[count.index]\n  initialization {\n  init_type = &quot;Clean&quot;\n }\n}\n</code></pre>\n<p>With the above configuration i'm able to provision the repo with the name as given in the repo_list. But i'm looking to split the repo name using the delimiter &quot;-&quot;. So if i'm giving &quot;Test-Repo4&quot; then i should able to split it and pass the value &quot;Repo4&quot; to above configuration and Repo4 should get created. But as per the current setup Test-Repo4 repo will get created.</p>\n<p>I'm new to Terraform. So  ready to restructure my code based on the suggestions . The reason why i'm using the &quot;ENV_REPO&quot; is because i'm performing the serious of functions in batch script based on this value</p>\n", "OwnerUserId": "1490489", "LastEditorUserId": "1490489", "LastEditDate": "2021-09-28T11:18:45.230", "LastActivityDate": "2021-09-28T18:14:33.887", "Title": "Terraform to split the input before provisioning", "Tags": "<azure-devops><terraform>", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "254679245", "PostHistoryTypeId": "2", "PostId": "69360523", "RevisionGUID": "9237cc5b-f7b9-44f6-86a9-aa2c53872850", "CreationDate": "2021-09-28T11:02:26.137", "UserId": "1490489", "Text": "I'm working on creating the Azure git repos using terraform. The git repo input is passing as a list to terraform.tfvars as given below\r\n\r\nrepo_list = [\"Test-Repo1\",\"Dev-Repo2\",\"Prod_Repo3\"]\r\n\r\ni'm using the below configuration language to provision the repos\r\n\r\n    resource \"azuredevops_git_repository\" \"test\" {\r\n      count = length(var.repo_list )\r\n      project_id = azuredevops_project.proj.id\r\n      name       = var.repo_list[count.index]\r\n      initialization {\r\n      init_type = \"Clean\"\r\n     }\r\n    }\r\n\r\nWith the above configuration i'm able to provision the repo with the name as given in the repo_list. But i'm looking to split the repo name using the delimiter \"-\". So if i'm giving \"Test-Repo4\" then i should able to split it and pass the value \"Repo4\" to above configuration and Repo4 should get created. But as per the current setup Test-Repo4 repo will get created.\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The git repo input is passing as a list to terraform.tfvars as given below repo_list = [\"Test-Repo1\",\"Dev-Repo2\",\"Prod_Repo3\"] i'm using the below configuration language to provision the repos resource \"azuredevops_git_repository\" \"test\" { count = length(var.repo_list ) project_id = azuredevops_project.proj.id name = var.repo_list[count.index] initialization { init_type = \"Clean\" } } ", "keywords": ["test"]}, {"source": "Text", "text": "So if i'm giving \"Test-Repo4\" then i should able to split it and pass the value \"Repo4\" to above configuration and Repo4 should get created. ", "keywords": ["test"]}, {"source": "Text", "text": "But as per the current setup Test-Repo4 repo will get created.", "keywords": ["test"]}]}, {"Id": "254679247", "PostHistoryTypeId": "1", "PostId": "69360523", "RevisionGUID": "9237cc5b-f7b9-44f6-86a9-aa2c53872850", "CreationDate": "2021-09-28T11:02:26.137", "UserId": "1490489", "Text": "Terraform to split the input before provisioning", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "254679248", "PostHistoryTypeId": "3", "PostId": "69360523", "RevisionGUID": "9237cc5b-f7b9-44f6-86a9-aa2c53872850", "CreationDate": "2021-09-28T11:02:26.137", "UserId": "1490489", "Text": "<azure-devops><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "254680426", "PostHistoryTypeId": "5", "PostId": "69360523", "RevisionGUID": "180dfdcb-6ad3-4ca8-9042-e63a85e8da44", "CreationDate": "2021-09-28T11:18:45.230", "UserId": "1490489", "Comment": "added 85 characters in body", "Text": "I'm working on creating the repos using terraform. The git repo input is passing as a list to terraform.tfvars as given below\r\n\r\nrepo_list = [\"Test-Repo1\",\"Dev-Repo2\",\"Prod_Repo3\"]\r\n\r\ni'm using the below configuration language to provision the repos\r\n\r\n    resource \"azuredevops_git_repository\" \"test\" {\r\n      count = length(var.repo_list )\r\n      project_id = azuredevops_project.proj.id\r\n      name       = var.repo_list[count.index]\r\n      initialization {\r\n      init_type = \"Clean\"\r\n     }\r\n    }\r\n\r\nWith the above configuration i'm able to provision the repo with the name as given in the repo_list. But i'm looking to split the repo name using the delimiter \"-\". So if i'm giving \"Test-Repo4\" then i should able to split it and pass the value \"Repo4\" to above configuration and Repo4 should get created. But as per the current setup Test-Repo4 repo will get created.\r\n\r\nI'm new to Terraform. So  ready to restructure my code based on the suggestions . The reason why i'm using the \"ENV_REPO\" is because i'm performing the serious of functions in batch script based on this value\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The git repo input is passing as a list to terraform.tfvars as given below repo_list = [\"Test-Repo1\",\"Dev-Repo2\",\"Prod_Repo3\"] i'm using the below configuration language to provision the repos resource \"azuredevops_git_repository\" \"test\" { count = length(var.repo_list ) project_id = azuredevops_project.proj.id name = var.repo_list[count.index] initialization { init_type = \"Clean\" } } ", "keywords": ["test"]}, {"source": "Text", "text": "So if i'm giving \"Test-Repo4\" then i should able to split it and pass the value \"Repo4\" to above configuration and Repo4 should get created. ", "keywords": ["test"]}, {"source": "Text", "text": "But as per the current setup Test-Repo4 repo will get created. ", "keywords": ["test"]}]}], "answers": [{"Id": "69366649", "PostTypeId": "2", "ParentId": "69360523", "CreationDate": "2021-09-28T18:14:33.887", "Score": "0", "Body": "<p>As an alternative to the accepted answer (both are valid!), if you know that your names will <em>always</em> be structured into two parts like that, and the two parts each have a fixed meaning, then you could use <a href=\"https://www.terraform.io/docs/language/functions/regex.html\" rel=\"nofollow noreferrer\">the <code>regex</code> function</a> to unpack them into a map that might make the meaning clearer to future readers:</p>\n<pre><code>locals {\n  repositories = tomap({\n    for name in var.repo_list :\n    name =&gt; regex(&quot;^(?P&lt;environment&gt;\\\\w)-(?P&lt;repository&gt;\\\\w)$&quot;)\n  })\n}\n\nresource &quot;azuredevops_git_repository&quot; &quot;test&quot; {\n  for_each = local.repositories\n\n  project_id = azuredevops_project.proj.id\n  name       = each.value.repository\n  initialization {\n    init_type = &quot;Clean&quot;\n  }\n}\n</code></pre>\n<p>This regular expression pattern uses named capture groups, and so the result will be a map whose keys are the capture group names. For your input (assuming you meant to use the <code>-</code> separator for all three examples) <code>local.repositories</code> would be:</p>\n<pre><code>tomap({\n  Test-Repo1 = tomap({\n    environment = &quot;Test&quot;\n    repository  = &quot;Repo1&quot;\n  })\n  Dev-Repo2 = tomap({\n    environment = &quot;Dev&quot;\n    repository  = &quot;Repo2&quot;\n  })\n  Prod-Repo3 = tomap({\n    environment = &quot;Prod&quot;\n    repository  = &quot;Repo3&quot;\n  })\n})\n</code></pre>\n<p>My tradeoff here is that I'd rather see <code>.environment</code> and <code>.repository</code> when referring to this elsewhere in configuration, as opposed to <code>[0]</code> and <code>[1]</code>, so that the intent is easier to understand. However, this does come at the cost of a non-trivial regular expression pattern that might be hard to read itself, so I think this would be worthwhile only if you're unlikely to often refer to or maintain that regular expression pattern in particular.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2021-09-28T18:14:33.887", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "254710967", "PostHistoryTypeId": "2", "PostId": "69366649", "RevisionGUID": "1b81993c-40e7-4588-ab7f-37f62b7c3e9e", "CreationDate": "2021-09-28T18:14:33.887", "UserId": "281848", "Text": "As an alternative to the accepted answer (both are valid!), if you know that your names will _always_ be structured into two parts like that, and the two parts each have a fixed meaning, then you could use [the `regex` function](https://www.terraform.io/docs/language/functions/regex.html) to unpack them into a map that might make the meaning clearer to future readers:\r\n\r\n```\r\nlocals {\r\n  repositories = tomap({\r\n    for name in var.repo_list :\r\n    name => regex(\"^(?P<environment>\\\\w)-(?P<repository>\\\\w)$\")\r\n  })\r\n}\r\n\r\nresource \"azuredevops_git_repository\" \"test\" {\r\n  for_each = local.repositories\r\n\r\n  project_id = azuredevops_project.proj.id\r\n  name       = each.value.repository\r\n  initialization {\r\n    init_type = \"Clean\"\r\n  }\r\n}\r\n```\r\n\r\nThis regular expression pattern uses named capture groups, and so the result will be a map whose keys are the capture group names. For your input (assuming you meant to use the `-` separator for all three examples) `local.repositories` would be:\r\n\r\n```\r\ntomap({\r\n  Test-Repo1 = tomap({\r\n    environment = \"Test\"\r\n    repository  = \"Repo1\"\r\n  })\r\n  Dev-Repo2 = tomap({\r\n    environment = \"Dev\"\r\n    repository  = \"Repo2\"\r\n  })\r\n  Prod-Repo3 = tomap({\r\n    environment = \"Prod\"\r\n    repository  = \"Repo3\"\r\n  })\r\n})\r\n```\r\n\r\nMy tradeoff here is that I'd rather see `.environment` and `.repository` when referring to this elsewhere in configuration, as opposed to `[0]` and `[1]`, so that the intent is easier to understand. However, this does come at the cost of a non-trivial regular expression pattern that might be hard to read itself, so I think this would be worthwhile only if you're unlikely to often refer to or maintain that regular expression pattern in particular.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As an alternative to the accepted answer (both are valid!), if you know that your names will _always_ be structured into two parts like that, and the two parts each have a fixed meaning, then you could use [the `regex` function](https://www.terraform.io/docs/language/functions/regex.html) to unpack them into a map that might make the meaning clearer to future readers: ``` locals { repositories = tomap({ for name in var.repo_list : name => regex(\"^(?P\\\\w)-(?P\\\\w)$\") }) } resource \"azuredevops_git_repository\" \"test\" { for_each = local.repositories project_id = azuredevops_project.proj.id name = each.value.repository initialization { init_type = \"Clean\" } } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "For your input (assuming you meant to use the `-` separator for all three examples) `local.repositories` would be: ``` tomap({ Test-Repo1 = tomap({ environment = \"Test\" repository = \"Repo1\" }) Dev-Repo2 = tomap({ environment = \"Dev\" repository = \"Repo2\" }) Prod-Repo3 = tomap({ environment = \"Prod\" repository = \"Repo3\" }) }) ``` ", "keywords": ["test"]}, {"source": "Text", "text": "However, this does come at the cost of a non-trivial regular expression pattern that might be hard to read itself, so I think this would be worthwhile only if you're unlikely to often refer to or maintain that regular expression pattern in particular.", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "However, this does come at the cost of a non-trivial regular expression pattern that might be hard to read itself, so I think this would be worthwhile only if you're unlikely to often refer to or maintain that regular expression pattern in particular.", "keywords": ["cost"]}]}, {"Id": "69360861", "PostTypeId": "2", "ParentId": "69360523", "CreationDate": "2021-09-28T11:25:48.613", "Score": "3", "Body": "<p>You should use split function and then element function to select proper value. Please check below snippet:</p>\n<pre><code>resource &quot;azuredevops_git_repository&quot; &quot;test&quot; {\n  count = length(var.repo_list )\n  project_id = azuredevops_project.proj.id\n  name       = &quot;${element(split(&quot;-&quot;, var.repo_list[count.index]), 1)}&quot;\n  initialization {\n  init_type = &quot;Clean&quot;\n }\n}\n</code></pre>\n", "OwnerUserId": "2347999", "LastActivityDate": "2021-09-28T11:25:48.613", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "122597905", "PostId": "69360861", "Score": "0", "Text": "Thank you @Krzysztof\nyour solution works perfectly.\n\nJust for my knowledge  , how i can make use of terraform locals here?", "CreationDate": "2021-09-28T13:55:26.800", "UserId": "1490489", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "122599515", "PostId": "69360861", "Score": "0", "Text": "You can use locals in the same way as variables. Just use `local.some_name`.", "CreationDate": "2021-09-28T14:46:18.473", "UserId": "2347999", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "254681002", "PostHistoryTypeId": "2", "PostId": "69360861", "RevisionGUID": "101406fa-5a06-4b1e-98d4-cc092e16a48e", "CreationDate": "2021-09-28T11:25:48.613", "UserId": "2347999", "Text": "You should use split function and then element function to select proper value. Please check below snippet:\r\n\r\n```terraform\r\nresource \"azuredevops_git_repository\" \"test\" {\r\n  count = length(var.repo_list )\r\n  project_id = azuredevops_project.proj.id\r\n  name       = \"${element(split(\"-\", var.repo_list[count.index]), 1)}\"\r\n  initialization {\r\n  init_type = \"Clean\"\r\n }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Please check below snippet: ```terraform resource \"azuredevops_git_repository\" \"test\" { count = length(var.repo_list ) project_id = azuredevops_project.proj.id name = \"${element(split(\"-\", var.repo_list[count.index]), 1)}\" initialization { init_type = \"Clean\" } } ```", "keywords": ["test"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "The git repo input is passing as a list to terraform.tfvars as given below repo_list = [\"Test-Repo1\",\"Dev-Repo2\",\"Prod_Repo3\"] i'm using the below configuration language to provision the repos ", "keywords": ["test"]}, {"source": "Body", "text": "So if i'm giving \"Test-Repo4\" then i should able to split it and pass the value \"Repo4\" to above configuration and Repo4 should get created. ", "keywords": ["test"]}, {"source": "Body", "text": "But as per the current setup Test-Repo4 repo will get created. ", "keywords": ["test"]}]}