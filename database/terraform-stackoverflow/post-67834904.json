{"Id": "67834904", "PostTypeId": "1", "AcceptedAnswerId": "67878001", "CreationDate": "2021-06-04T09:33:00.150", "Score": "1", "ViewCount": "1319", "Body": "<p>Im trying to debug why my <code>Terraform</code> script is not working. Due an unknown reason <code>Terraform</code> keeps destroying my MySQL database and recreates it after that.</p>\n<p>Below is the output of the execution plan:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>  # azurerm_mysql_server.test01 will be destroyed\n  - resource &quot;azurerm_mysql_server&quot; &quot;test01&quot; {\n      - administrator_login               = &quot;me&quot; -&gt; null\n      - auto_grow_enabled                 = true -&gt; null\n      - backup_retention_days             = 7 -&gt; null\n      - create_mode                       = &quot;Default&quot; -&gt; null\n      - fqdn                              = &quot;db-test01.mysql.database.azure.com&quot; -&gt; null\n      - geo_redundant_backup_enabled      = false -&gt; null\n      - id                                = &quot;/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01&quot; -&gt; null\n      - infrastructure_encryption_enabled = false -&gt; null\n      - location                          = &quot;westeurope&quot; -&gt; null\n      - name                              = &quot;db-test01&quot; -&gt; null\n      - public_network_access_enabled     = true -&gt; null\n      - resource_group_name               = &quot;production-rg&quot; -&gt; null\n      - sku_name                          = &quot;B_Gen5_1&quot; -&gt; null\n      - ssl_enforcement                   = &quot;Disabled&quot; -&gt; null\n      - ssl_enforcement_enabled           = false -&gt; null\n      - ssl_minimal_tls_version_enforced  = &quot;TLSEnforcementDisabled&quot; -&gt; null\n      - storage_mb                        = 51200 -&gt; null\n      - tags                              = {} -&gt; null\n      - version                           = &quot;8.0&quot; -&gt; null\n\n      - storage_profile {\n          - auto_grow             = &quot;Enabled&quot; -&gt; null\n          - backup_retention_days = 7 -&gt; null\n          - geo_redundant_backup  = &quot;Disabled&quot; -&gt; null\n          - storage_mb            = 51200 -&gt; null\n        }\n\n      - timeouts {}\n    }\n\n  # module.databases.module.test.azurerm_mysql_server.test01 will be created\n  + resource &quot;azurerm_mysql_server&quot; &quot;test01&quot; {\n      + administrator_login               = &quot;me&quot;\n      + administrator_login_password      = (sensitive value)\n      + auto_grow_enabled                 = true\n      + backup_retention_days             = 7\n      + create_mode                       = &quot;Default&quot;\n      + fqdn                              = (known after apply)\n      + geo_redundant_backup_enabled      = false\n      + id                                = (known after apply)\n      + infrastructure_encryption_enabled = false\n      + location                          = &quot;westeurope&quot;\n      + name                              = &quot;db-test01&quot;\n      + public_network_access_enabled     = true\n      + resource_group_name               = &quot;production-rg&quot;\n      + sku_name                          = &quot;B_Gen5_1&quot;\n      + ssl_enforcement                   = (known after apply)\n      + ssl_enforcement_enabled           = false\n      + ssl_minimal_tls_version_enforced  = &quot;TLSEnforcementDisabled&quot;\n      + storage_mb                        = 51200\n      + version                           = &quot;8.0&quot;\n\n      + storage_profile {\n          + auto_grow             = (known after apply)\n          + backup_retention_days = (known after apply)\n          + geo_redundant_backup  = (known after apply)\n          + storage_mb            = (known after apply)\n        }\n    }\n</code></pre>\n<p>As far as i know all is exactly the same. To prevent this i also did a manually <code>terraform import</code> to sync the state with the remote state.</p>\n<p>The actually resource as defined in my main.tf</p>\n<pre class=\"lang-sh prettyprint-override\"><code>resource &quot;azurerm_mysql_server&quot; &quot;test01&quot; {\n  name                = &quot;db-test01&quot;\n  location            = &quot;West Europe&quot;\n  resource_group_name = var.rg\n\n  administrator_login          = &quot;me&quot;\n  administrator_login_password = var.root_password\n\n  sku_name   = &quot;B_Gen5_1&quot;\n  storage_mb = 51200\n  version    = &quot;8.0&quot;\n\n  auto_grow_enabled                 = true\n  backup_retention_days             = 7\n  geo_redundant_backup_enabled      = false\n  infrastructure_encryption_enabled = false\n  public_network_access_enabled     = true\n  ssl_enforcement_enabled           = false\n}\n</code></pre>\n<p>The other odd thing is that below command will output that all is actually in sync?</p>\n<pre class=\"lang-sh prettyprint-override\"><code>\u279c  terraform git:(develop) \u2717 terraform plan --refresh-only\nazurerm_mysql_server.test01: Refreshing state... [id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/firstklas-production-rg/providers/Microsoft.DBforMySQL/servers/db-test01]\n\nNo changes. Your infrastructure still matches the configuration.\n</code></pre>\n<p>After an actual import the same still happens even though the import states all is in state:</p>\n<pre><code>\u279c  terraform git:(develop) \u2717 terraform import azurerm_mysql_server.test01 /subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\nazurerm_mysql_server.test01: Importing from ID &quot;/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01&quot;...\nazurerm_mysql_server.test01: Import prepared!\n  Prepared azurerm_mysql_server for import\nazurerm_mysql_server.test01: Refreshing state... [id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01]\n\nImport successful!\n\nThe resources that were imported are shown above. These resources are now in\nyour Terraform state and will henceforth be managed by Terraform.\n</code></pre>\n<p>What can i do to prevent this destroy? Or even figure out why the actually destroy is triggered? This is happening on multiple azure instances at this point.</p>\n<p><em>NOTE: the subscription ID is spoofed so don't worry</em></p>\n<p>Best,\nPim</p>\n", "OwnerUserId": "2942538", "LastEditorUserId": "2942538", "LastEditDate": "2021-06-04T10:48:49.973", "LastActivityDate": "2022-08-29T15:22:42.467", "Title": "Terraform keeps destroying existing resource", "Tags": "<terraform><azure-rm>", "AnswerCount": "2", "CommentCount": "5", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "119901264", "PostId": "67834904", "Score": "2", "Text": "What's the code that produces this issue?", "CreationDate": "2021-06-04T09:57:07.077", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119901522", "PostId": "67834904", "Score": "0", "Text": "Can you add `timeouts {}` in your code just to make sure this isn't causing TF to be  confused?", "CreationDate": "2021-06-04T10:07:44.973", "UserId": "16046045", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119902087", "PostId": "67834904", "Score": "0", "Text": "@Marcin i added the code snippet to the thread", "CreationDate": "2021-06-04T10:31:45.270", "UserId": "2942538", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119902925", "PostId": "67834904", "Score": "0", "Text": "@KedMardemootoo same output, see also the additional comments i placed", "CreationDate": "2021-06-04T11:10:28.620", "UserId": "2942538", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119906172", "PostId": "67834904", "Score": "0", "Text": "Could you verify if your remote state is correct by using the command `terraform state list`. If your `sqlserver` is there, download the remote state and verify if the settings in your state are the same as the properties of your azure resource.", "CreationDate": "2021-06-04T13:17:05.657", "UserId": "6810982", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "247867406", "PostHistoryTypeId": "2", "PostId": "67834904", "RevisionGUID": "86704648-1b00-4c72-99c2-7204bdd6bac8", "CreationDate": "2021-06-04T09:33:00.150", "UserId": "2942538", "Text": "Im trying to debug why my `Terraform` script is not working. Due an unknown reason `Terraform` keeps destroying my MySQL database and recreates it after that.\r\n\r\nBelow is the output of the execution plan:\r\n```shell\r\n  # azurerm_mysql_server.test01 will be destroyed\r\n  - resource \"azurerm_mysql_server\" \"test01\" {\r\n      - administrator_login               = \"me\" -> null\r\n      - auto_grow_enabled                 = true -> null\r\n      - backup_retention_days             = 7 -> null\r\n      - create_mode                       = \"Default\" -> null\r\n      - fqdn                              = \"db-test01.mysql.database.azure.com\" -> null\r\n      - geo_redundant_backup_enabled      = false -> null\r\n      - id                                = \"/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\" -> null\r\n      - infrastructure_encryption_enabled = false -> null\r\n      - location                          = \"westeurope\" -> null\r\n      - name                              = \"db-test01\" -> null\r\n      - public_network_access_enabled     = true -> null\r\n      - resource_group_name               = \"production-rg\" -> null\r\n      - sku_name                          = \"B_Gen5_1\" -> null\r\n      - ssl_enforcement                   = \"Disabled\" -> null\r\n      - ssl_enforcement_enabled           = false -> null\r\n      - ssl_minimal_tls_version_enforced  = \"TLSEnforcementDisabled\" -> null\r\n      - storage_mb                        = 51200 -> null\r\n      - tags                              = {} -> null\r\n      - version                           = \"8.0\" -> null\r\n\r\n      - storage_profile {\r\n          - auto_grow             = \"Enabled\" -> null\r\n          - backup_retention_days = 7 -> null\r\n          - geo_redundant_backup  = \"Disabled\" -> null\r\n          - storage_mb            = 51200 -> null\r\n        }\r\n\r\n      - timeouts {}\r\n    }\r\n\r\n  # module.databases.module.test.azurerm_mysql_server.test01 will be created\r\n  + resource \"azurerm_mysql_server\" \"test01\" {\r\n      + administrator_login               = \"me\"\r\n      + administrator_login_password      = (sensitive value)\r\n      + auto_grow_enabled                 = true\r\n      + backup_retention_days             = 7\r\n      + create_mode                       = \"Default\"\r\n      + fqdn                              = (known after apply)\r\n      + geo_redundant_backup_enabled      = false\r\n      + id                                = (known after apply)\r\n      + infrastructure_encryption_enabled = false\r\n      + location                          = \"westeurope\"\r\n      + name                              = \"db-test01\"\r\n      + public_network_access_enabled     = true\r\n      + resource_group_name               = \"production-rg\"\r\n      + sku_name                          = \"B_Gen5_1\"\r\n      + ssl_enforcement                   = (known after apply)\r\n      + ssl_enforcement_enabled           = false\r\n      + ssl_minimal_tls_version_enforced  = \"TLSEnforcementDisabled\"\r\n      + storage_mb                        = 51200\r\n      + version                           = \"8.0\"\r\n\r\n      + storage_profile {\r\n          + auto_grow             = (known after apply)\r\n          + backup_retention_days = (known after apply)\r\n          + geo_redundant_backup  = (known after apply)\r\n          + storage_mb            = (known after apply)\r\n        }\r\n    }\r\n```\r\n\r\nAs far as i know all is exactly the same. To prevent this i also did a manually `terraform import` to sync the state with the remote state.\r\n\r\nThe other odd thing is that below command will output that all is actually in sync?\r\n```shell\r\n\u279c  terraform git:(develop) \u2717 terraform plan --refresh-only\r\nazurerm_mysql_server.test01: Refreshing state... [id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/firstklas-production-rg/providers/Microsoft.DBforMySQL/servers/db-test01]\r\n\r\nNo changes. Your infrastructure still matches the configuration.\r\n```\r\n\r\nWhat can i do to prevent this destroy? Or even figure out why the actually destroy is triggered? This is happening on multiple azure instances at this point.\r\n\r\n*NOTE: the subscription ID is spoofed so don't worry*\r\n\r\nBest,\r\nPim", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Below is the output of the execution plan: ```shell # azurerm_mysql_server.test01 will be destroyed - resource \"azurerm_mysql_server\" \"test01\" { - administrator_login = \"me\" -> null - auto_grow_enabled = true -> null - backup_retention_days = 7 -> null - create_mode = \"Default\" -> null - fqdn = \"db-test01.mysql.database.azure.com\" -> null - geo_redundant_backup_enabled = false -> null - id = \"/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\" -> null - infrastructure_encryption_enabled = false -> null - location = \"westeurope\" -> null - name = \"db-test01\" -> null - public_network_access_enabled = true -> null - resource_group_name = \"production-rg\" -> null - sku_name = \"B_Gen5_1\" -> null - ssl_enforcement = \"Disabled\" -> null - ssl_enforcement_enabled = false -> null - ssl_minimal_tls_version_enforced = \"TLSEnforcementDisabled\" -> null - storage_mb = 51200 -> null - tags = {} -> null - version = \"8.0\" -> null - storage_profile { - auto_grow = \"Enabled\" -> null - backup_retention_days = 7 -> null - geo_redundant_backup = \"Disabled\" -> null - storage_mb = 51200 -> null } - timeouts {} } # module.databases.module.test.azurerm_mysql_server.test01 will be created + resource \"azurerm_mysql_server\" \"test01\" { + administrator_login = \"me\" + administrator_login_password = (sensitive value) + auto_grow_enabled = true + backup_retention_days = 7 + create_mode = \"Default\" + fqdn = (known after apply) + geo_redundant_backup_enabled = false + id = (known after apply) + infrastructure_encryption_enabled = false + location = \"westeurope\" + name = \"db-test01\" + public_network_access_enabled = true + resource_group_name = \"production-rg\" + sku_name = \"B_Gen5_1\" + ssl_enforcement = (known after apply) + ssl_enforcement_enabled = false + ssl_minimal_tls_version_enforced = \"TLSEnforcementDisabled\" + storage_mb = 51200 + version = \"8.0\" + storage_profile { + auto_grow = (known after apply) + backup_retention_days = (known after apply) + geo_redundant_backup = (known after apply) + storage_mb = (known after apply) } } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "```shell \u279c terraform git:(develop) \u2717 terraform plan --refresh-only azurerm_mysql_server.test01: Refreshing state... ", "keywords": ["test"]}, {"source": "Text", "text": "[id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/firstklas-production-rg/providers/Microsoft.DBforMySQL/servers/db-test01] No changes. ", "keywords": ["change", "test"]}]}, {"Id": "247867407", "PostHistoryTypeId": "1", "PostId": "67834904", "RevisionGUID": "86704648-1b00-4c72-99c2-7204bdd6bac8", "CreationDate": "2021-06-04T09:33:00.150", "UserId": "2942538", "Text": "Terraform keeps destroying existing resource", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "247867408", "PostHistoryTypeId": "3", "PostId": "67834904", "RevisionGUID": "86704648-1b00-4c72-99c2-7204bdd6bac8", "CreationDate": "2021-06-04T09:33:00.150", "UserId": "2942538", "Text": "<terraform><azure-rm>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "247870131", "PostHistoryTypeId": "5", "PostId": "67834904", "RevisionGUID": "b037dfd7-3aeb-4cb9-b728-fb115841fba5", "CreationDate": "2021-06-04T10:20:32.307", "UserId": "2942538", "Comment": "added main.tf content", "Text": "Im trying to debug why my `Terraform` script is not working. Due an unknown reason `Terraform` keeps destroying my MySQL database and recreates it after that.\r\n\r\nBelow is the output of the execution plan:\r\n```shell\r\n  # azurerm_mysql_server.test01 will be destroyed\r\n  - resource \"azurerm_mysql_server\" \"test01\" {\r\n      - administrator_login               = \"me\" -> null\r\n      - auto_grow_enabled                 = true -> null\r\n      - backup_retention_days             = 7 -> null\r\n      - create_mode                       = \"Default\" -> null\r\n      - fqdn                              = \"db-test01.mysql.database.azure.com\" -> null\r\n      - geo_redundant_backup_enabled      = false -> null\r\n      - id                                = \"/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\" -> null\r\n      - infrastructure_encryption_enabled = false -> null\r\n      - location                          = \"westeurope\" -> null\r\n      - name                              = \"db-test01\" -> null\r\n      - public_network_access_enabled     = true -> null\r\n      - resource_group_name               = \"production-rg\" -> null\r\n      - sku_name                          = \"B_Gen5_1\" -> null\r\n      - ssl_enforcement                   = \"Disabled\" -> null\r\n      - ssl_enforcement_enabled           = false -> null\r\n      - ssl_minimal_tls_version_enforced  = \"TLSEnforcementDisabled\" -> null\r\n      - storage_mb                        = 51200 -> null\r\n      - tags                              = {} -> null\r\n      - version                           = \"8.0\" -> null\r\n\r\n      - storage_profile {\r\n          - auto_grow             = \"Enabled\" -> null\r\n          - backup_retention_days = 7 -> null\r\n          - geo_redundant_backup  = \"Disabled\" -> null\r\n          - storage_mb            = 51200 -> null\r\n        }\r\n\r\n      - timeouts {}\r\n    }\r\n\r\n  # module.databases.module.test.azurerm_mysql_server.test01 will be created\r\n  + resource \"azurerm_mysql_server\" \"test01\" {\r\n      + administrator_login               = \"me\"\r\n      + administrator_login_password      = (sensitive value)\r\n      + auto_grow_enabled                 = true\r\n      + backup_retention_days             = 7\r\n      + create_mode                       = \"Default\"\r\n      + fqdn                              = (known after apply)\r\n      + geo_redundant_backup_enabled      = false\r\n      + id                                = (known after apply)\r\n      + infrastructure_encryption_enabled = false\r\n      + location                          = \"westeurope\"\r\n      + name                              = \"db-test01\"\r\n      + public_network_access_enabled     = true\r\n      + resource_group_name               = \"production-rg\"\r\n      + sku_name                          = \"B_Gen5_1\"\r\n      + ssl_enforcement                   = (known after apply)\r\n      + ssl_enforcement_enabled           = false\r\n      + ssl_minimal_tls_version_enforced  = \"TLSEnforcementDisabled\"\r\n      + storage_mb                        = 51200\r\n      + version                           = \"8.0\"\r\n\r\n      + storage_profile {\r\n          + auto_grow             = (known after apply)\r\n          + backup_retention_days = (known after apply)\r\n          + geo_redundant_backup  = (known after apply)\r\n          + storage_mb            = (known after apply)\r\n        }\r\n    }\r\n```\r\n\r\nAs far as i know all is exactly the same. To prevent this i also did a manually `terraform import` to sync the state with the remote state.\r\n\r\nThe actually resource as defined in my main.tf\r\n\r\n```sh\r\nresource \"azurerm_mysql_server\" \"test01\" {\r\n  name                = \"db-test01\"\r\n  location            = \"West Europe\"\r\n  resource_group_name = var.rg\r\n\r\n  administrator_login          = \"me\"\r\n  administrator_login_password = var.root_password\r\n\r\n  sku_name   = \"B_Gen5_1\"\r\n  storage_mb = 51200\r\n  version    = \"8.0\"\r\n\r\n  auto_grow_enabled                 = true\r\n  backup_retention_days             = 7\r\n  geo_redundant_backup_enabled      = false\r\n  infrastructure_encryption_enabled = false\r\n  public_network_access_enabled     = true\r\n  ssl_enforcement_enabled           = false\r\n}\r\n```\r\n\r\nThe other odd thing is that below command will output that all is actually in sync?\r\n```shell\r\n\u279c  terraform git:(develop) \u2717 terraform plan --refresh-only\r\nazurerm_mysql_server.test01: Refreshing state... [id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/firstklas-production-rg/providers/Microsoft.DBforMySQL/servers/db-test01]\r\n\r\nNo changes. Your infrastructure still matches the configuration.\r\n```\r\n\r\nWhat can i do to prevent this destroy? Or even figure out why the actually destroy is triggered? This is happening on multiple azure instances at this point.\r\n\r\n*NOTE: the subscription ID is spoofed so don't worry*\r\n\r\nBest,\r\nPim", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Below is the output of the execution plan: ```shell # azurerm_mysql_server.test01 will be destroyed - resource \"azurerm_mysql_server\" \"test01\" { - administrator_login = \"me\" -> null - auto_grow_enabled = true -> null - backup_retention_days = 7 -> null - create_mode = \"Default\" -> null - fqdn = \"db-test01.mysql.database.azure.com\" -> null - geo_redundant_backup_enabled = false -> null - id = \"/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\" -> null - infrastructure_encryption_enabled = false -> null - location = \"westeurope\" -> null - name = \"db-test01\" -> null - public_network_access_enabled = true -> null - resource_group_name = \"production-rg\" -> null - sku_name = \"B_Gen5_1\" -> null - ssl_enforcement = \"Disabled\" -> null - ssl_enforcement_enabled = false -> null - ssl_minimal_tls_version_enforced = \"TLSEnforcementDisabled\" -> null - storage_mb = 51200 -> null - tags = {} -> null - version = \"8.0\" -> null - storage_profile { - auto_grow = \"Enabled\" -> null - backup_retention_days = 7 -> null - geo_redundant_backup = \"Disabled\" -> null - storage_mb = 51200 -> null } - timeouts {} } # module.databases.module.test.azurerm_mysql_server.test01 will be created + resource \"azurerm_mysql_server\" \"test01\" { + administrator_login = \"me\" + administrator_login_password = (sensitive value) + auto_grow_enabled = true + backup_retention_days = 7 + create_mode = \"Default\" + fqdn = (known after apply) + geo_redundant_backup_enabled = false + id = (known after apply) + infrastructure_encryption_enabled = false + location = \"westeurope\" + name = \"db-test01\" + public_network_access_enabled = true + resource_group_name = \"production-rg\" + sku_name = \"B_Gen5_1\" + ssl_enforcement = (known after apply) + ssl_enforcement_enabled = false + ssl_minimal_tls_version_enforced = \"TLSEnforcementDisabled\" + storage_mb = 51200 + version = \"8.0\" + storage_profile { + auto_grow = (known after apply) + backup_retention_days = (known after apply) + geo_redundant_backup = (known after apply) + storage_mb = (known after apply) } } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "The actually resource as defined in my main.tf ```sh resource \"azurerm_mysql_server\" \"test01\" { name = \"db-test01\" location = \"West Europe\" resource_group_name = var.rg administrator_login = \"me\" administrator_login_password = var.root_password sku_name = \"B_Gen5_1\" storage_mb = 51200 version = \"8.0\" auto_grow_enabled = true backup_retention_days = 7 geo_redundant_backup_enabled = false infrastructure_encryption_enabled = false public_network_access_enabled = true ssl_enforcement_enabled = false } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "The other odd thing is that below command will output that all is actually in sync? ```shell \u279c terraform git:(develop) \u2717 terraform plan --refresh-only azurerm_mysql_server.test01: Refreshing state... ", "keywords": ["test"]}, {"source": "Text", "text": "[id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/firstklas-production-rg/providers/Microsoft.DBforMySQL/servers/db-test01] No changes. ", "keywords": ["change", "test"]}]}, {"Id": "247871592", "PostHistoryTypeId": "5", "PostId": "67834904", "RevisionGUID": "7bff5062-248a-4881-aa93-90064d6b3c9f", "CreationDate": "2021-06-04T10:48:49.973", "UserId": "2942538", "Comment": "Added the actual import output", "Text": "Im trying to debug why my `Terraform` script is not working. Due an unknown reason `Terraform` keeps destroying my MySQL database and recreates it after that.\r\n\r\nBelow is the output of the execution plan:\r\n```shell\r\n  # azurerm_mysql_server.test01 will be destroyed\r\n  - resource \"azurerm_mysql_server\" \"test01\" {\r\n      - administrator_login               = \"me\" -> null\r\n      - auto_grow_enabled                 = true -> null\r\n      - backup_retention_days             = 7 -> null\r\n      - create_mode                       = \"Default\" -> null\r\n      - fqdn                              = \"db-test01.mysql.database.azure.com\" -> null\r\n      - geo_redundant_backup_enabled      = false -> null\r\n      - id                                = \"/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\" -> null\r\n      - infrastructure_encryption_enabled = false -> null\r\n      - location                          = \"westeurope\" -> null\r\n      - name                              = \"db-test01\" -> null\r\n      - public_network_access_enabled     = true -> null\r\n      - resource_group_name               = \"production-rg\" -> null\r\n      - sku_name                          = \"B_Gen5_1\" -> null\r\n      - ssl_enforcement                   = \"Disabled\" -> null\r\n      - ssl_enforcement_enabled           = false -> null\r\n      - ssl_minimal_tls_version_enforced  = \"TLSEnforcementDisabled\" -> null\r\n      - storage_mb                        = 51200 -> null\r\n      - tags                              = {} -> null\r\n      - version                           = \"8.0\" -> null\r\n\r\n      - storage_profile {\r\n          - auto_grow             = \"Enabled\" -> null\r\n          - backup_retention_days = 7 -> null\r\n          - geo_redundant_backup  = \"Disabled\" -> null\r\n          - storage_mb            = 51200 -> null\r\n        }\r\n\r\n      - timeouts {}\r\n    }\r\n\r\n  # module.databases.module.test.azurerm_mysql_server.test01 will be created\r\n  + resource \"azurerm_mysql_server\" \"test01\" {\r\n      + administrator_login               = \"me\"\r\n      + administrator_login_password      = (sensitive value)\r\n      + auto_grow_enabled                 = true\r\n      + backup_retention_days             = 7\r\n      + create_mode                       = \"Default\"\r\n      + fqdn                              = (known after apply)\r\n      + geo_redundant_backup_enabled      = false\r\n      + id                                = (known after apply)\r\n      + infrastructure_encryption_enabled = false\r\n      + location                          = \"westeurope\"\r\n      + name                              = \"db-test01\"\r\n      + public_network_access_enabled     = true\r\n      + resource_group_name               = \"production-rg\"\r\n      + sku_name                          = \"B_Gen5_1\"\r\n      + ssl_enforcement                   = (known after apply)\r\n      + ssl_enforcement_enabled           = false\r\n      + ssl_minimal_tls_version_enforced  = \"TLSEnforcementDisabled\"\r\n      + storage_mb                        = 51200\r\n      + version                           = \"8.0\"\r\n\r\n      + storage_profile {\r\n          + auto_grow             = (known after apply)\r\n          + backup_retention_days = (known after apply)\r\n          + geo_redundant_backup  = (known after apply)\r\n          + storage_mb            = (known after apply)\r\n        }\r\n    }\r\n```\r\n\r\nAs far as i know all is exactly the same. To prevent this i also did a manually `terraform import` to sync the state with the remote state.\r\n\r\nThe actually resource as defined in my main.tf\r\n\r\n```sh\r\nresource \"azurerm_mysql_server\" \"test01\" {\r\n  name                = \"db-test01\"\r\n  location            = \"West Europe\"\r\n  resource_group_name = var.rg\r\n\r\n  administrator_login          = \"me\"\r\n  administrator_login_password = var.root_password\r\n\r\n  sku_name   = \"B_Gen5_1\"\r\n  storage_mb = 51200\r\n  version    = \"8.0\"\r\n\r\n  auto_grow_enabled                 = true\r\n  backup_retention_days             = 7\r\n  geo_redundant_backup_enabled      = false\r\n  infrastructure_encryption_enabled = false\r\n  public_network_access_enabled     = true\r\n  ssl_enforcement_enabled           = false\r\n}\r\n```\r\n\r\nThe other odd thing is that below command will output that all is actually in sync?\r\n```shell\r\n\u279c  terraform git:(develop) \u2717 terraform plan --refresh-only\r\nazurerm_mysql_server.test01: Refreshing state... [id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/firstklas-production-rg/providers/Microsoft.DBforMySQL/servers/db-test01]\r\n\r\nNo changes. Your infrastructure still matches the configuration.\r\n```\r\n\r\nAfter an actual import the same still happens even though the import states all is in state:\r\n\r\n```\r\n\u279c  terraform git:(develop) \u2717 terraform import azurerm_mysql_server.test01 /subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\r\nazurerm_mysql_server.test01: Importing from ID \"/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\"...\r\nazurerm_mysql_server.test01: Import prepared!\r\n  Prepared azurerm_mysql_server for import\r\nazurerm_mysql_server.test01: Refreshing state... [id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01]\r\n\r\nImport successful!\r\n\r\nThe resources that were imported are shown above. These resources are now in\r\nyour Terraform state and will henceforth be managed by Terraform.\r\n```\r\n\r\nWhat can i do to prevent this destroy? Or even figure out why the actually destroy is triggered? This is happening on multiple azure instances at this point.\r\n\r\n*NOTE: the subscription ID is spoofed so don't worry*\r\n\r\nBest,\r\nPim", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Below is the output of the execution plan: ```shell # azurerm_mysql_server.test01 will be destroyed - resource \"azurerm_mysql_server\" \"test01\" { - administrator_login = \"me\" -> null - auto_grow_enabled = true -> null - backup_retention_days = 7 -> null - create_mode = \"Default\" -> null - fqdn = \"db-test01.mysql.database.azure.com\" -> null - geo_redundant_backup_enabled = false -> null - id = \"/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\" -> null - infrastructure_encryption_enabled = false -> null - location = \"westeurope\" -> null - name = \"db-test01\" -> null - public_network_access_enabled = true -> null - resource_group_name = \"production-rg\" -> null - sku_name = \"B_Gen5_1\" -> null - ssl_enforcement = \"Disabled\" -> null - ssl_enforcement_enabled = false -> null - ssl_minimal_tls_version_enforced = \"TLSEnforcementDisabled\" -> null - storage_mb = 51200 -> null - tags = {} -> null - version = \"8.0\" -> null - storage_profile { - auto_grow = \"Enabled\" -> null - backup_retention_days = 7 -> null - geo_redundant_backup = \"Disabled\" -> null - storage_mb = 51200 -> null } - timeouts {} } # module.databases.module.test.azurerm_mysql_server.test01 will be created + resource \"azurerm_mysql_server\" \"test01\" { + administrator_login = \"me\" + administrator_login_password = (sensitive value) + auto_grow_enabled = true + backup_retention_days = 7 + create_mode = \"Default\" + fqdn = (known after apply) + geo_redundant_backup_enabled = false + id = (known after apply) + infrastructure_encryption_enabled = false + location = \"westeurope\" + name = \"db-test01\" + public_network_access_enabled = true + resource_group_name = \"production-rg\" + sku_name = \"B_Gen5_1\" + ssl_enforcement = (known after apply) + ssl_enforcement_enabled = false + ssl_minimal_tls_version_enforced = \"TLSEnforcementDisabled\" + storage_mb = 51200 + version = \"8.0\" + storage_profile { + auto_grow = (known after apply) + backup_retention_days = (known after apply) + geo_redundant_backup = (known after apply) + storage_mb = (known after apply) } } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "The actually resource as defined in my main.tf ```sh resource \"azurerm_mysql_server\" \"test01\" { name = \"db-test01\" location = \"West Europe\" resource_group_name = var.rg administrator_login = \"me\" administrator_login_password = var.root_password sku_name = \"B_Gen5_1\" storage_mb = 51200 version = \"8.0\" auto_grow_enabled = true backup_retention_days = 7 geo_redundant_backup_enabled = false infrastructure_encryption_enabled = false public_network_access_enabled = true ssl_enforcement_enabled = false } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "The other odd thing is that below command will output that all is actually in sync? ```shell \u279c terraform git:(develop) \u2717 terraform plan --refresh-only azurerm_mysql_server.test01: Refreshing state... [id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/firstklas-production-rg/providers/Microsoft.DBforMySQL/servers/db-test01] No changes. ", "keywords": ["change", "test"]}, {"source": "Text", "text": "After an actual import the same still happens even though the import states all is in state: ``` \u279c terraform git:(develop) \u2717 terraform import azurerm_mysql_server.test01 /subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01 azurerm_mysql_server.test01: Importing from ID \"/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\"... azurerm_mysql_server.test01: Import prepared! Prepared azurerm_mysql_server for import azurerm_mysql_server.test01: Refreshing state... [id=/subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01] Import successful! ", "keywords": ["test"]}]}], "answers": [{"Id": "73530977", "PostTypeId": "2", "ParentId": "67834904", "CreationDate": "2022-08-29T15:17:36.250", "Score": "0", "Body": "<p>There is a way.\nuser</p>\n<p>Plan\nApply\nterraform state rm &quot;resource_name&quot; --------This will eliminate or remove resource from current state\nnext Apply</p>\n<p>Worked perfectly on GCP for creating 2 successive VM using same TF script.</p>\n<p>Only thing is we need to write/code to get current resources and store somewhere and create commands in config: require blocks for upstream dependencies #3. While destroying we can add back using terraform state mv &quot;resource_name&quot;</p>\n<p>Note : This has risk as the very first VM did not get deleted as it is considered generated out of scope of terraform. So your cost may persist. So you have to have back up (incremental for states)</p>\n<p>Hope this helps.</p>\n", "OwnerUserId": "19871915", "LastEditorUserId": "19871915", "LastEditDate": "2022-08-29T15:22:42.467", "LastActivityDate": "2022-08-29T15:22:42.467", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "277194761", "PostHistoryTypeId": "2", "PostId": "73530977", "RevisionGUID": "e02ff580-af21-46ee-a572-02f4f019e587", "CreationDate": "2022-08-29T15:17:36.250", "UserId": "19871915", "Text": "There is a way.\r\nuser\r\n\r\nPlan\r\nApply\r\nterraform state rm \"resource_name\" --------This will eliminate or remove resource from current state\r\nnext Apply\r\n\r\nWorked perfectly on GCP for creating 2 successive VM using same TF script.\r\n\r\nOnly thing is we need to write/code to get current resources and store somewhere and create commands in config: require blocks for upstream dependencies #3. While destroying we can add back using terraform state mv \"resource_name\"\r\n\r\nHope this helps.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "277194970", "PostHistoryTypeId": "5", "PostId": "73530977", "RevisionGUID": "e38639a8-eef9-4358-a6ba-150f3fb38c99", "CreationDate": "2022-08-29T15:21:04.037", "UserId": "19871915", "Comment": "added 148 characters in body", "Text": "There is a way.\r\nuser\r\n\r\nPlan\r\nApply\r\nterraform state rm \"resource_name\" --------This will eliminate or remove resource from current state\r\nnext Apply\r\n\r\nWorked perfectly on GCP for creating 2 successive VM using same TF script.\r\n\r\nOnly thing is we need to write/code to get current resources and store somewhere and create commands in config: require blocks for upstream dependencies #3. While destroying we can add back using terraform state mv \"resource_name\"\r\n\r\nNote : This has risk as the very first VM did not get deleted as it is considered generated out of scope of terraform. So your cost may persist.\r\n\r\nHope this helps.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "So your cost may persist. ", "keywords": ["cost"]}]}, {"Id": "277195073", "PostHistoryTypeId": "5", "PostId": "73530977", "RevisionGUID": "b0b6f504-fd14-4f73-a490-b1a031b2907d", "CreationDate": "2022-08-29T15:22:42.467", "UserId": "19871915", "Comment": "added 53 characters in body", "Text": "There is a way.\r\nuser\r\n\r\nPlan\r\nApply\r\nterraform state rm \"resource_name\" --------This will eliminate or remove resource from current state\r\nnext Apply\r\n\r\nWorked perfectly on GCP for creating 2 successive VM using same TF script.\r\n\r\nOnly thing is we need to write/code to get current resources and store somewhere and create commands in config: require blocks for upstream dependencies #3. While destroying we can add back using terraform state mv \"resource_name\"\r\n\r\nNote : This has risk as the very first VM did not get deleted as it is considered generated out of scope of terraform. So your cost may persist. So you have to have back up (incremental for states)\r\n\r\nHope this helps.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "So your cost may persist. ", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "So your cost may persist. ", "keywords": ["cost"]}]}, {"Id": "67878001", "PostTypeId": "2", "ParentId": "67834904", "CreationDate": "2021-06-07T19:59:45.623", "Score": "2", "Body": "<p>Your plan output shows that Terraform is seeing two different resource addresses:</p>\n<pre><code>  # azurerm_mysql_server.test01 will be destroyed\n  # module.databases.module.test.azurerm_mysql_server.test01 will be created\n</code></pre>\n<p>Notice that the one to be created is in a nested module, not in the root module.</p>\n<p>If your intent is to import this object to the address that is shown as needing to be created above, you'll need to specify this full address in the <code>terraform import</code> command:</p>\n<pre><code>terraform import 'module.databases.module.test.azurerm_mysql_server.test01' /subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\n</code></pre>\n<p>The <code>terraform import</code> command tells Terraform to bind an existing remote object to a particular Terraform address, and so when you use it you need to be careful to specify the correct Terraform address to bind to.</p>\n<p>In your case, you told Terraform to bind the object to a hypothetical <code>resource &quot;azurerm_mysql_server&quot; &quot;test01&quot;</code> block in the root module, but your configuration has no such block and so when you ran <code>terraform plan</code> Terraform assumed that you wanted to delete that object, because deleting a <code>resource</code> block is how we typically tell Terraform that we intend to delete something.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2021-06-07T19:59:45.623", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "119977786", "PostId": "67878001", "Score": "0", "Text": "This is it! Thanks a lot. Indeed i was importing it not from the root level what caused the issue.", "CreationDate": "2021-06-07T20:41:47.210", "UserId": "2942538", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "248053053", "PostHistoryTypeId": "2", "PostId": "67878001", "RevisionGUID": "ce41d8fd-0428-4ddf-a199-13af0fccbdce", "CreationDate": "2021-06-07T19:59:45.623", "UserId": "281848", "Text": "Your plan output shows that Terraform is seeing two different resource addresses:\r\n\r\n```\r\n  # azurerm_mysql_server.test01 will be destroyed\r\n  # module.databases.module.test.azurerm_mysql_server.test01 will be created\r\n```\r\n\r\nNotice that the one to be created is in a nested module, not in the root module.\r\n\r\nIf your intent is to import this object to the address that is shown as needing to be created above, you'll need to specify this full address in the `terraform import` command:\r\n\r\n```\r\nterraform import 'module.databases.module.test.azurerm_mysql_server.test01' /subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01\r\n```\r\n\r\nThe `terraform import` command tells Terraform to bind an existing remote object to a particular Terraform address, and so when you use it you need to be careful to specify the correct Terraform address to bind to.\r\n\r\nIn your case, you told Terraform to bind the object to a hypothetical `resource \"azurerm_mysql_server\" \"test01\"` block in the root module, but your configuration has no such block and so when you ran `terraform plan` Terraform assumed that you wanted to delete that object, because deleting a `resource` block is how we typically tell Terraform that we intend to delete something.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Your plan output shows that Terraform is seeing two different resource addresses: ``` # azurerm_mysql_server.test01 will be destroyed # module.databases.module.test.azurerm_mysql_server.test01 will be created ``` ", "keywords": ["test"]}, {"source": "Text", "text": "If your intent is to import this object to the address that is shown as needing to be created above, you'll need to specify this full address in the `terraform import` command: ``` terraform import 'module.databases.module.test.azurerm_mysql_server.test01' /subscriptions/8012-4035-b8f3-860f8cb1119e/resourceGroups/production-rg/providers/Microsoft.DBforMySQL/servers/db-test01 ``` ", "keywords": ["test"]}, {"source": "Text", "text": "In your case, you told Terraform to bind the object to a hypothetical `resource \"azurerm_mysql_server\" \"test01\"` block in the root module, but your configuration has no such block and so when you ran `terraform plan` ", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "In your case, you told Terraform to bind the object to a hypothetical resource \"azurerm_mysql_server\" \"test01\" block in the root module, but your configuration has no such block and so when you ran terraform plan Terraform assumed that you wanted to delete that object, because deleting a resource block is how we typically tell Terraform that we intend to delete something.", "keywords": ["test"]}]}], "contains-topic": true, "filtered-sentences": []}