{"Id": "58907705", "PostTypeId": "1", "AcceptedAnswerId": "59004941", "CreationDate": "2019-11-18T03:42:05.073", "Score": "0", "ViewCount": "3013", "Body": "<p>The issue I'm running into is with regard to the load balancer front end ip so it can use a unique Public IP to reach a different server in a different Availability Zone. I'm using count on creating the Public IPs, but I'm not using count on the load balancer because I don't want a new LB for each server. If i could somehow save the Public IPs to a variable then i could reference them using for_each inside the dynamic block but I can't find a way to do that. Here is the code i have so far, but it can't work as is. There may not be a solution to this problem, which really stinks.\nBTW I'm using the split function below so it returns a list that the properties need. It's a bit hackish but it does work.</p>\n\n<pre><code>resource \"azurerm_public_ip\" \"pip\" {\n  count               = \"${var.nblinuxvms}\"\n  name                = \"${var.proj_name}-lbpip${count.index}-${var.region}-${var.app_env}\"\n  location            =  var.region\n  resource_group_name = \"${azurerm_resource_group.rg.name}\"\n  allocation_method   = \"Static\"   #Public IP Standard SKUs require allocation_method to be set to Static\n  sku                 = \"Standard\" #Standard SKU Required for Zones\n  domain_name_label   = \"${var.proj_name}${count.index}${split(\"\", \"${element([\"1\", \"2\", \"3\"], \"${count.index}\")}\")}\"\n  zones = \"${var.avzones}\" ? split(\"\", \"${element([\"1\", \"2\", \"3\"], \"${count.index}\")}\") : null\n}\nresource \"azurerm_lb\" \"lb\" {\n  name                = \"externallb\"\n  location            = \"${azurerm_resource_group.rg.location}\"\n  resource_group_name = \"${azurerm_resource_group.rg.name}\"\n  sku                 = \"standard\" #standard SKU needed to support zones\n dynamic \"frontend_ip_configuration\" {\n   for_each             = \"${azurerm_public_ip.test.*.ip_address}\" #this is the problem line. I need a way to store all the IPs in a variable and then iterate through them for each new frontend ip configuration\n   content{\n     name  = \"primary${count.index}\" #This name is also important as this is how I'll connect the nat rule down below\n     public_ip_address_id = \"${azurerm_public_ip.pip.id}\"\n  }\nresource \"azurerm_lb_nat_rule\" \"lbnr\" {\n  count                          = \"${var.nblinuxvms}\"\n  resource_group_name            = \"${azurerm_resource_group.rg.name}\"\n  loadbalancer_id                = \"${azurerm_lb.lb.id}\"\n  name                           = \"SSHHost${count.index}\"\n  protocol                       = \"Tcp\"\n  frontend_port                  = \"${2200 + count.index}\"\n  backend_port                   = 22\n  frontend_ip_configuration_name = \"primary${count.index}\" #This name needs to match the LB Front End IP Configuartion\n}\n</code></pre>\n\n<p>The frontend_ip_configuration_name needs to match the load balancer name. Dynamic block with for_each seems like the best solution for the particular issue as its not a resource...but I don't see a way to save the public ip to any variables i can reference. If there isn't a solution how are people solving this? By creating a separate LB per Azure availability zone? Since it has to be a standard, not basic LB that seems cost prohibitive. Hopefully I've just missed something. Any help would be greatly appreciated. Note i have only shared the relevent code from my terraform project. If more code is needed please let me know.(I couldn't add dynamic block to the question tag because my rep is to low.)\nThanks,\n-Sam Kachar</p>\n", "OwnerUserId": "12067887", "LastActivityDate": "2019-11-23T18:44:19.340", "Title": "How to use terraform dynamic block to build multiple front end ip in the az load balancer that leverages public ips for azure availability zones", "Tags": "<azure><foreach><load-balancing><terraform><azure-public-ip>", "AnswerCount": "2", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "104084824", "PostId": "58907705", "Score": "0", "Text": "Don't know why your question got downvoted", "CreationDate": "2019-11-18T09:25:34.737", "UserId": "316978", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "209414675", "PostHistoryTypeId": "2", "PostId": "58907705", "RevisionGUID": "2a7e5d42-e9fa-4061-87ae-b00f7189b800", "CreationDate": "2019-11-18T03:42:05.073", "UserId": "12067887", "Text": "The issue I'm running into is with regard to the load balancer front end ip so it can use a unique Public IP to reach a different server in a different Availability Zone. I'm using count on creating the Public IPs, but I'm not using count on the load balancer because I don't want a new LB for each server. If i could somehow save the Public IPs to a variable then i could reference them using for_each inside the dynamic block but I can't find a way to do that. Here is the code i have so far, but it can't work as is. There may not be a solution to this problem, which really stinks.\r\nBTW I'm using the split function below so it returns a list that the properties need. It's a bit hackish but it does work.\r\n```\r\nresource \"azurerm_public_ip\" \"pip\" {\r\n  count               = \"${var.nblinuxvms}\"\r\n  name                = \"${var.proj_name}-lbpip${count.index}-${var.region}-${var.app_env}\"\r\n  location            =  var.region\r\n  resource_group_name = \"${azurerm_resource_group.rg.name}\"\r\n  allocation_method   = \"Static\"   #Public IP Standard SKUs require allocation_method to be set to Static\r\n  sku                 = \"Standard\" #Standard SKU Required for Zones\r\n  domain_name_label   = \"${var.proj_name}${count.index}${split(\"\", \"${element([\"1\", \"2\", \"3\"], \"${count.index}\")}\")}\"\r\n  zones = \"${var.avzones}\" ? split(\"\", \"${element([\"1\", \"2\", \"3\"], \"${count.index}\")}\") : null\r\n}\r\nresource \"azurerm_lb\" \"lb\" {\r\n  name                = \"externallb\"\r\n  location            = \"${azurerm_resource_group.rg.location}\"\r\n  resource_group_name = \"${azurerm_resource_group.rg.name}\"\r\n  sku                 = \"standard\" #standard SKU needed to support zones\r\n dynamic \"frontend_ip_configuration\" {\r\n   for_each             = \"${azurerm_public_ip.test.*.ip_address}\" #this is the problem line. I need a way to store all the IPs in a variable and then iterate through them for each new frontend ip configuration\r\n   content{\r\n     name  = \"primary${count.index}\" #This name is also important as this is how I'll connect the nat rule down below\r\n     public_ip_address_id = \"${azurerm_public_ip.pip.id}\"\r\n  }\r\nresource \"azurerm_lb_nat_rule\" \"lbnr\" {\r\n  count                          = \"${var.nblinuxvms}\"\r\n  resource_group_name            = \"${azurerm_resource_group.rg.name}\"\r\n  loadbalancer_id                = \"${azurerm_lb.lb.id}\"\r\n  name                           = \"SSHHost${count.index}\"\r\n  protocol                       = \"Tcp\"\r\n  frontend_port                  = \"${2200 + count.index}\"\r\n  backend_port                   = 22\r\n  frontend_ip_configuration_name = \"primary${count.index}\" #This name needs to match the LB Front End IP Configuartion\r\n}\r\n```\r\nThe frontend_ip_configuration_name needs to match the load balancer name. Dynamic block with for_each seems like the best solution for the particular issue as its not a resource...but I don't see a way to save the public ip to any variables i can reference. If there isn't a solution how are people solving this? By creating a separate LB per Azure availability zone? Since it has to be a standard, not basic LB that seems cost prohibitive. Hopefully I've just missed something. Any help would be greatly appreciated. Note i have only shared the relevent code from my terraform project. If more code is needed please let me know.(I couldn't add dynamic block to the question tag because my rep is to low.)\r\nThanks,\r\n-Sam Kachar", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "``` resource \"azurerm_public_ip\" \"pip\" { count = \"${var.nblinuxvms}\" name = \"${var.proj_name}-lbpip${count.index}-${var.region}-${var.app_env}\" location = var.region resource_group_name = \"${azurerm_resource_group.rg.name}\" allocation_method = \"Static\" #Public IP Standard SKUs require allocation_method to be set to Static sku = \"Standard\" #Standard SKU Required for Zones domain_name_label = \"${var.proj_name}${count.index}${split(\"\", \"${element([\"1\", \"2\", \"3\"], \"${count.index}\")}\")}\" zones = \"${var.avzones}\" ? split(\"\", \"${element([\"1\", \"2\", \"3\"], \"${count.index}\")}\") : null } resource \"azurerm_lb\" \"lb\" { name = \"externallb\" location = \"${azurerm_resource_group.rg.location}\" resource_group_name = \"${azurerm_resource_group.rg.name}\" sku = \"standard\" #standard SKU needed to support zones dynamic \"frontend_ip_configuration\" { for_each = \"${azurerm_public_ip.test.*.ip_address}\" #this is the problem line. ", "keywords": ["test"]}, {"source": "Text", "text": "I need a way to store all the IPs in a variable and then iterate through them for each new frontend ip configuration content{ name = \"primary${count.index}\" #This name is also important as this is how I'll connect the nat rule down below public_ip_address_id = \"${azurerm_public_ip.pip.id}\" } resource \"azurerm_lb_nat_rule\" \"lbnr\" { count = \"${var.nblinuxvms}\" resource_group_name = \"${azurerm_resource_group.rg.name}\" loadbalancer_id = \"${azurerm_lb.lb.id}\" name = \"SSHHost${count.index}\" protocol = \"Tcp\" frontend_port = \"${2200 + count.index}\" backend_port = 22 frontend_ip_configuration_name = \"primary${count.index}\" #This name needs to match the LB Front End IP Configuartion } ``` ", "keywords": ["nat"]}, {"source": "Text", "text": "Since it has to be a standard, not basic LB that seems cost prohibitive. ", "keywords": ["cost"]}]}, {"Id": "209414676", "PostHistoryTypeId": "1", "PostId": "58907705", "RevisionGUID": "2a7e5d42-e9fa-4061-87ae-b00f7189b800", "CreationDate": "2019-11-18T03:42:05.073", "UserId": "12067887", "Text": "How to use terraform dynamic block to build multiple front end ip in the az load balancer that leverages public ips for azure availability zones", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "209414677", "PostHistoryTypeId": "3", "PostId": "58907705", "RevisionGUID": "2a7e5d42-e9fa-4061-87ae-b00f7189b800", "CreationDate": "2019-11-18T03:42:05.073", "UserId": "12067887", "Text": "<azure><foreach><load-balancing><terraform><azure-public-ip>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "59004941", "PostTypeId": "2", "ParentId": "58907705", "CreationDate": "2019-11-23T05:51:41.417", "Score": "0", "Body": "<p>Wesley,\nI can't thank you enough for your response. It gave me the confirmation I needed to see this through and that i was in fact heading in the right direction. I just last night was able to get around to testing the solution. It took a little more research to finally get it working though. </p>\n\n<p>Attempting to use the each.value reference kept failing. It was throwing an error something like each.value needs to be used with for_each...Which i found frustrating as for_each was just 2 lines above where i was trying to use/reference it. Moreover in the error it had created 3 error messages, so it was iterating using the for_each. For whatever reason though it couldn't pull values using each.value.</p>\n\n<p>The code that ended up working for my LB / Azure Availability Zones was the following (hint, had to use the iterator option):</p>\n\n<pre><code>resource \"azurerm_lb\" \"lb\" {\n  name                = \"externallb\"\n  location            = \"${azurerm_resource_group.rg.location}\"\n  resource_group_name = \"${azurerm_resource_group.rg.name}\"\n  sku                 = \"standard\" #standard SKU needed to support zones\n  dynamic \"frontend_ip_configuration\" {\n    iterator = pub\n    for_each = azurerm_public_ip.pip \n    content {\n      name                 = \"config_${pub.value.ip_address}\"\n      public_ip_address_id = pub.value.id\n    }\n\n  }\n}\n\n....\n\nresource \"azurerm_lb_nat_rule\" \"lbnr\" {\n  count                          = \"${var.nblinuxvms}\"\n  resource_group_name            = \"${azurerm_resource_group.rg.name}\"\n  loadbalancer_id                = \"${azurerm_lb.lb.id}\"\n  name                           = \"SSHHost${count.index}\"\n  protocol                       = \"Tcp\"\n  frontend_port                  = \"${2200 + count.index}\"\n  backend_port                   = 22\n  frontend_ip_configuration_name = \"config_${azurerm_public_ip.pip[count.index].ip_address}\"\n}\n</code></pre>\n\n<p>From how i understand the iterator option, you don't have to use it, and can just reference whats in the dynamic block label directly as a prefix but that would be super long and unwieldy. The code example i posted above is functioning code :-). I was very happy when that went through. Spent a few days trying to get this all sorted out.</p>\n\n<p>As for your last statement about this not being version 11 and I don't need all the interpolation syntax, I'm working on cleaning that up. That's one of my tasks on my to do list that I need to complete yet, as i finish up this project for a fully featured VM module. Would have saved me a ton of time had the terraform registry had Azure Zones in their compute module, but in building out all this code I\"ve had to learn the language much better than i would've just calling the registry.</p>\n\n<p>Like I said above, thanks again for posting an answer, it confirmed i was headed down the right path. Hope all this time i put in helps someone else out should they run into a similar problem. Just note for anyone who reads this I have a azurerm_public_ip block that creates as many PIP as needed for the VM's and LB. If anyone wants me to add that code i can. Just shoot me a message or comment on my post.</p>\n\n<p>Cheers,\n-Sam Kachar</p>\n", "OwnerUserId": "12067887", "LastEditorUserId": "12067887", "LastEditDate": "2019-11-23T18:44:19.340", "LastActivityDate": "2019-11-23T18:44:19.340", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "209814927", "PostHistoryTypeId": "2", "PostId": "59004941", "RevisionGUID": "f98ab681-d375-4588-8f56-76c60d1ab1a7", "CreationDate": "2019-11-23T05:51:41.417", "UserId": "12067887", "Text": "Wesley,\r\nI can't thank you for your response enough. I just last night was able to get around to testing the solution. It took a little more research to finally get it working. Attempting to use the each reference kept failing. It was throwing an error something like each needs to be used with for_each...Which i found frustrating as for_each was just 2 lines above where i was trying to use reference it.\r\n\r\nThe code that ended up working for my LB / Azure Availability Zones was the following(hint, had to use the iterator option):\r\n\r\n```\r\nresource \"azurerm_lb\" \"lb\" {\r\n  name                = \"externallb\"\r\n  location            = \"${azurerm_resource_group.rg.location}\"\r\n  resource_group_name = \"${azurerm_resource_group.rg.name}\"\r\n  sku                 = \"standard\" #standard SKU needed to support zones\r\n  dynamic \"frontend_ip_configuration\" {\r\n    iterator = pub\r\n    for_each = azurerm_public_ip.pip \r\n    content {\r\n      name                 = \"config_${pub.value.ip_address}\"\r\n      public_ip_address_id = pub.value.id\r\n    }\r\n    \r\n  }\r\n}\r\n\r\n....\r\n\r\nresource \"azurerm_lb_nat_rule\" \"lbnr\" {\r\n  count                          = \"${var.nblinuxvms}\"\r\n  resource_group_name            = \"${azurerm_resource_group.rg.name}\"\r\n  loadbalancer_id                = \"${azurerm_lb.lb.id}\"\r\n  name                           = \"SSHHost${count.index}\"\r\n  protocol                       = \"Tcp\"\r\n  frontend_port                  = \"${2200 + count.index}\"\r\n  backend_port                   = 22\r\n  frontend_ip_configuration_name = \"config_${azurerm_public_ip.pip[count.index].ip_address}\"\r\n}\r\n```\r\n\r\nFrom how i understand the iterator option, you don't have to use it, and can just reference whats in the dynamic block label directly as a prefix but that would be super long and unwieldy. The code example i posted above is functioning code :-). I was very happy when that went through. Spent a few days trying to get this all sorted out.\r\n\r\nAs for your last statement about this not being version 11 and I don't need all the interpolation syntax, I'm working on cleaning that up. That's one of my tasks I need to complete yet as i finish up this project.\r\n\r\nThanks again for posting an answer, it confirmed i was headed down the right path. Hope all this time i put in helps someone else out should they run into a similar problem.\r\n\r\nCheers,\r\n-Sam Kachar", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I just last night was able to get around to testing the solution. ", "keywords": ["test"]}]}, {"Id": "209843493", "PostHistoryTypeId": "5", "PostId": "59004941", "RevisionGUID": "d9319b58-43b3-4124-a3e2-b9e164ec3d44", "CreationDate": "2019-11-23T18:44:19.340", "UserId": "12067887", "Comment": "added 810 characters in body", "Text": "Wesley,\r\nI can't thank you enough for your response. It gave me the confirmation I needed to see this through and that i was in fact heading in the right direction. I just last night was able to get around to testing the solution. It took a little more research to finally get it working though. \r\n\r\nAttempting to use the each.value reference kept failing. It was throwing an error something like each.value needs to be used with for_each...Which i found frustrating as for_each was just 2 lines above where i was trying to use/reference it. Moreover in the error it had created 3 error messages, so it was iterating using the for_each. For whatever reason though it couldn't pull values using each.value.\r\n\r\nThe code that ended up working for my LB / Azure Availability Zones was the following (hint, had to use the iterator option):\r\n\r\n```\r\nresource \"azurerm_lb\" \"lb\" {\r\n  name                = \"externallb\"\r\n  location            = \"${azurerm_resource_group.rg.location}\"\r\n  resource_group_name = \"${azurerm_resource_group.rg.name}\"\r\n  sku                 = \"standard\" #standard SKU needed to support zones\r\n  dynamic \"frontend_ip_configuration\" {\r\n    iterator = pub\r\n    for_each = azurerm_public_ip.pip \r\n    content {\r\n      name                 = \"config_${pub.value.ip_address}\"\r\n      public_ip_address_id = pub.value.id\r\n    }\r\n    \r\n  }\r\n}\r\n\r\n....\r\n\r\nresource \"azurerm_lb_nat_rule\" \"lbnr\" {\r\n  count                          = \"${var.nblinuxvms}\"\r\n  resource_group_name            = \"${azurerm_resource_group.rg.name}\"\r\n  loadbalancer_id                = \"${azurerm_lb.lb.id}\"\r\n  name                           = \"SSHHost${count.index}\"\r\n  protocol                       = \"Tcp\"\r\n  frontend_port                  = \"${2200 + count.index}\"\r\n  backend_port                   = 22\r\n  frontend_ip_configuration_name = \"config_${azurerm_public_ip.pip[count.index].ip_address}\"\r\n}\r\n```\r\n\r\nFrom how i understand the iterator option, you don't have to use it, and can just reference whats in the dynamic block label directly as a prefix but that would be super long and unwieldy. The code example i posted above is functioning code :-). I was very happy when that went through. Spent a few days trying to get this all sorted out.\r\n\r\nAs for your last statement about this not being version 11 and I don't need all the interpolation syntax, I'm working on cleaning that up. That's one of my tasks on my to do list that I need to complete yet, as i finish up this project for a fully featured VM module. Would have saved me a ton of time had the terraform registry had Azure Zones in their compute module, but in building out all this code I\"ve had to learn the language much better than i would've just calling the registry.\r\n\r\nLike I said above, thanks again for posting an answer, it confirmed i was headed down the right path. Hope all this time i put in helps someone else out should they run into a similar problem. Just note for anyone who reads this I have a azurerm_public_ip block that creates as many PIP as needed for the VM's and LB. If anyone wants me to add that code i can. Just shoot me a message or comment on my post.\r\n\r\nCheers,\r\n-Sam Kachar", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I just last night was able to get around to testing the solution. ", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "I just last night was able to get around to testing the solution. ", "keywords": ["test"]}]}, {"Id": "58912298", "PostTypeId": "2", "ParentId": "58907705", "CreationDate": "2019-11-18T10:18:34.167", "Score": "1", "Body": "<p>I feel what you are trying to do makes perfect sense and should be possible. Some things to note:</p>\n\n<ul>\n<li>Within the <code>for_each</code> block, you can use <code>each.value</code> to access the value (in this case that's the public ip object). See <a href=\"https://www.terraform.io/docs/configuration/resources.html#for_each-multiple-resource-instances-defined-by-a-map-or-set-of-strings\" rel=\"nofollow noreferrer\">for_each documentation</a> for details</li>\n<li><code>ip_address</code> refers to the actual assign ip, not to the object</li>\n<li><code>count</code> is not available in <code>for_each</code> blocks, so the name of the <code>frontend_ip_configuration</code> blocks should be deduced from the public ip object directly.</li>\n</ul>\n\n<p>Given the above, you could try something like this (not tested out!):</p>\n\n<pre><code>resource \"azurerm_lb_nat_rule\" \"lbnr\" {\n  count                          = \"${var.nblinuxvms}\"\n  ...\n  frontend_ip_configuration_name = \"config_${azurerm_public_ip[count].name}\"\n}\ndynamic \"frontend_ip_configuration\" {\n   for_each = \"${azurerm_public_ip.pip}\"\n   content{\n     name                 = \"config_${each.value.name}\" \n     public_ip_address_id = \"${each.value.id}\"\n  }\n</code></pre>\n\n<p>I assume you are using terraform 0.12 given <code>for_each</code> was not available in 0.11. The verbose interpolation syntax you are using has already been deprecated in the latest version, better use the new one:</p>\n\n<pre><code>resource \"azurerm_lb_nat_rule\" \"lbnr\" {\n  count                          = var.nblinuxvms\n  ...\n  frontend_ip_configuration_name = \"config_${azurerm_public_ip[count].name}\"\n}\ndynamic \"frontend_ip_configuration\" {\n   for_each = azurerm_public_ip.pip\n   content{\n     name                 = \"config_${each.value.name}\" \n     public_ip_address_id = each.value.id\n}\n</code></pre>\n", "OwnerUserId": "316978", "LastActivityDate": "2019-11-18T10:18:34.167", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "209432998", "PostHistoryTypeId": "2", "PostId": "58912298", "RevisionGUID": "659e8f46-f6af-4558-8c30-eeb0c15d9897", "CreationDate": "2019-11-18T10:18:34.167", "UserId": "316978", "Text": "I feel what you are trying to do makes perfect sense and should be possible. Some things to note:\r\n\r\n- Within the `for_each` block, you can use `each.value` to access the value (in this case that's the public ip object). See [for_each documentation](https://www.terraform.io/docs/configuration/resources.html#for_each-multiple-resource-instances-defined-by-a-map-or-set-of-strings) for details\r\n- `ip_address` refers to the actual assign ip, not to the object\r\n- `count` is not available in `for_each` blocks, so the name of the `frontend_ip_configuration` blocks should be deduced from the public ip object directly.\r\n\r\nGiven the above, you could try something like this (not tested out!):\r\n```\r\nresource \"azurerm_lb_nat_rule\" \"lbnr\" {\r\n  count                          = \"${var.nblinuxvms}\"\r\n  ...\r\n  frontend_ip_configuration_name = \"config_${azurerm_public_ip[count].name}\"\r\n}\r\ndynamic \"frontend_ip_configuration\" {\r\n   for_each = \"${azurerm_public_ip.pip}\"\r\n   content{\r\n     name                 = \"config_${each.value.name}\" \r\n     public_ip_address_id = \"${each.value.id}\"\r\n  }\r\n``` \r\n\r\nI assume you are using terraform 0.12 given `for_each` was not available in 0.11. The verbose interpolation syntax you are using has already been deprecated in the latest version, better use the new one:\r\n```\r\nresource \"azurerm_lb_nat_rule\" \"lbnr\" {\r\n  count                          = var.nblinuxvms\r\n  ...\r\n  frontend_ip_configuration_name = \"config_${azurerm_public_ip[count].name}\"\r\n}\r\ndynamic \"frontend_ip_configuration\" {\r\n   for_each = azurerm_public_ip.pip\r\n   content{\r\n     name                 = \"config_${each.value.name}\" \r\n     public_ip_address_id = each.value.id\r\n}\r\n``` \r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Given the above, you could try something like this (not tested out!): ``` resource \"azurerm_lb_nat_rule\" \"lbnr\" { count = \"${var.nblinuxvms}\" ... frontend_ip_configuration_name = \"config_${azurerm_public_ip[count].name}\" } dynamic \"frontend_ip_configuration\" { for_each = \"${azurerm_public_ip.pip}\" content{ name = \"config_${each.value.name}\" public_ip_address_id = \"${each.value.id}\" } ``` ", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "Given the above, you could try something like this (not tested out!): I assume you are using terraform 0.12 given for_each was not available in 0.11. ", "keywords": ["test"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Since it has to be a standard, not basic LB that seems cost prohibitive. ", "keywords": ["cost"]}]}