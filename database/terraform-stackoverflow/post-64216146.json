{"Id": "64216146", "PostTypeId": "1", "AcceptedAnswerId": "64326553", "CreationDate": "2020-10-05T21:01:58.433", "Score": "1", "ViewCount": "306", "Body": "<p>I have an AWS Auto-Scalling Group that spawns (or shuts down) one EC2 machine based on the amount of messages in a specific SQS Queue. That works as expected, but sometimes I get the following error:</p>\n<blockquote>\n<p>Launching a new EC2 instance. Status Reason: Could not launch Spot\nInstances. InsufficientInstanceCapacity - There is no Spot capacity\navailable that matches your request. Launching EC2 instance failed.</p>\n</blockquote>\n<p>A DevOps guy I know told me to &quot;<em>increase the amount of spot_instance_pools to 20 and add some more instance_types</em>&quot;.</p>\n<p>I did some research and found that <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group#spot_instance_pools\" rel=\"nofollow noreferrer\">the default number of spot_instance_pools is 2</a>. That same number is shown on AWS Console. Whenever I have this problem, I deploy a new script changing the EC instance type and it works, so both those suggestions seems like a valid ones to me.</p>\n<p>The problem is that my current Terraform script does not have the enclosing <code>mixed_instances_policy</code> and I'm unsure how to configure it to keep only <code>on_spot</code> instances (since they are cheaper) and no <code>on_demand</code> instances. So far I have come up with:</p>\n<pre><code>  mixed_instances_policy = {\n    on_demand_percentage_above_base_capacity = 0\n    spot_instance_pools                      = 20   \n  }\n</code></pre>\n<p>Keeping the other values inside <code>mixed_instances_policy</code> with the defaults should suffice for me.</p>\n<p>But I did not understand how to configure the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group#launch_template_specification\" rel=\"nofollow noreferrer\">mixed_instances_policy launch_template</a>. Is it nested within <code>mixed_instances_policy</code>? Should I add a <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group#instance_type\" rel=\"nofollow noreferrer\">mixed_instances_policy launch_template override</a> too? Or perhaps a launch_template_specification</p>\n<p><strong>TL;DR;</strong></p>\n<p>How do I configure an AWS Auto-Scalling Group mixed_instances_policy to only allow for spot_instances with multiple EC2 instance_types?</p>\n", "OwnerUserId": "4385621", "LastActivityDate": "2020-10-12T23:22:55.217", "Title": "How should I configure an AWS Auto-Scalling Group mixed_instances_policy to only allow for spot_instances with multiple EC2 instance_types?", "Tags": "<amazon-web-services><amazon-ec2><terraform><autoscaling>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "232209754", "PostHistoryTypeId": "2", "PostId": "64216146", "RevisionGUID": "59ee69b6-af04-44c9-9fc5-d77d4d2ca381", "CreationDate": "2020-10-05T21:01:58.433", "UserId": "4385621", "Text": "I have an AWS Auto-Scalling Group that spawns (or shuts down) one EC2 machine based on the amount of messages in a specific SQS Queue. That works as expected, but sometimes I get the following error:\r\n\r\n> Launching a new EC2 instance. Status Reason: Could not launch Spot\r\n> Instances. InsufficientInstanceCapacity - There is no Spot capacity\r\n> available that matches your request. Launching EC2 instance failed.\r\n\r\nA DevOps guy I know told me to \"*increase the amount of spot_instance_pools to 20 and add some more instance_types*\". \r\n\r\nI did some research and found that [the default number of spot_instance_pools is 2][1]. That same number is shown on AWS Console. Whenever I have this problem, I deploy a new script changing the EC instance type and it works, so both those suggestions seems like a valid ones to me.\r\n\r\nThe problem is that my current Terraform script does not have the enclosing `mixed_instances_policy` and I'm unsure how to configure it to keep only `on_spot` instances (since they are cheaper) and no `on_demand` instances. So far I have come up with:\r\n\r\n      mixed_instances_policy = {\r\n        on_demand_percentage_above_base_capacity = 0\r\n        spot_instance_pools                      = 20   \r\n      }\r\n\r\n  Keeping the other values inside `mixed_instances_policy` with the defaults should suffice for me. \r\n\r\nBut I did not understand how to configure the [mixed_instances_policy launch_template][2]. Is it nested within `mixed_instances_policy`? Should I add a [mixed_instances_policy launch_template override][3] too? Or perhaps a launch_template_specification\r\n\r\n**TL;DR;**\r\n\r\nHow do I configure an AWS Auto-Scalling Group mixed_instances_policy to only allow for spot_instances with multiple EC2 instance_types?\r\n\r\n\r\n  [1]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group#spot_instance_pools\r\n  [2]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group#launch_template_specification\r\n  [3]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group#instance_type", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "That works as expected, but sometimes I get the following error: > Launching a new EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Launching EC2 instance failed. ", "keywords": ["instance"]}, {"source": "Text", "text": "Whenever I have this problem, I deploy a new script changing the EC instance type and it works, so both those suggestions seems like a valid ones to me. ", "keywords": ["instance", "change"]}, {"source": "Text", "text": "The problem is that my current Terraform script does not have the enclosing `mixed_instances_policy` and I'm unsure how to configure it to keep only `on_spot` instances (since they are cheaper) and no `on_demand` instances. ", "keywords": ["cheap"]}]}, {"Id": "232209755", "PostHistoryTypeId": "1", "PostId": "64216146", "RevisionGUID": "59ee69b6-af04-44c9-9fc5-d77d4d2ca381", "CreationDate": "2020-10-05T21:01:58.433", "UserId": "4385621", "Text": "How should I configure an AWS Auto-Scalling Group mixed_instances_policy to only allow for spot_instances with multiple EC2 instance_types?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "232209756", "PostHistoryTypeId": "3", "PostId": "64216146", "RevisionGUID": "59ee69b6-af04-44c9-9fc5-d77d4d2ca381", "CreationDate": "2020-10-05T21:01:58.433", "UserId": "4385621", "Text": "<amazon-web-services><amazon-ec2><terraform><autoscaling>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "64326553", "PostTypeId": "2", "ParentId": "64216146", "CreationDate": "2020-10-12T23:22:55.217", "Score": "1", "Body": "<p>The <code>on_demand_percentage_above_base_capacity = 0</code> line is the one you want.  Based on the doc you shared and the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html\" rel=\"nofollow noreferrer\">structure in the AWS doc</a>, I'd say it probably goes inside <code>instances_distribution</code>  That tells the ASG to launch 0% on demand (aka 100% spot).  Within the <code>mixed_instances_policy</code> you need to add <code>overrides</code> for the instance types you're adding (weights are optional.  Weight is the number of desired capacity units that instance type counts as).</p>\n<p>Also, the number of spot pools doesn't mater much for your use case.  That's saying /if everything is available/ launch up to that many different spot types per AZ.  Having more pools does help a bit with availability though, because if one pool becomes supply constrained, then you won't have all your instances terminated at once, but it doesn't impact being able to launch at all.</p>\n<p>Actually, if you want cheaper cost, you want the number lower.  Because if you have allocation strategy as 'cheapest first' then you want few pools per AZ (since its only the cheapest few pools then).  If there's only 1 instance type available in the AZ, its going to launch that one regardless.  So the number of overrides you select is the important part to maintain availability when launching.</p>\n", "OwnerUserId": "7097192", "LastActivityDate": "2020-10-12T23:22:55.217", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "232690452", "PostHistoryTypeId": "2", "PostId": "64326553", "RevisionGUID": "8198f1a8-0c8c-403b-9427-d9271d0d465e", "CreationDate": "2020-10-12T23:22:55.217", "UserId": "7097192", "Text": "The `on_demand_percentage_above_base_capacity = 0` line is the one you want.  Based on the doc you shared and the [structure in the AWS doc][1], I'd say it probably goes inside `instances_distribution`  That tells the ASG to launch 0% on demand (aka 100% spot).  Within the `mixed_instances_policy` you need to add `overrides` for the instance types you're adding (weights are optional.  Weight is the number of desired capacity units that instance type counts as).  \r\n\r\nAlso, the number of spot pools doesn't mater much for your use case.  That's saying /if everything is available/ launch up to that many different spot types per AZ.  Having more pools does help a bit with availability though, because if one pool becomes supply constrained, then you won't have all your instances terminated at once, but it doesn't impact being able to launch at all.\r\n\r\nActually, if you want cheaper cost, you want the number lower.  Because if you have allocation strategy as 'cheapest first' then you want few pools per AZ (since its only the cheapest few pools then).  If there's only 1 instance type available in the AZ, its going to launch that one regardless.  So the number of overrides you select is the important part to maintain availability when launching.  \r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Within the `mixed_instances_policy` you need to add `overrides` for the instance types you're adding (weights are optional. ", "keywords": ["instance"]}, {"source": "Text", "text": "Weight is the number of desired capacity units that instance type counts as). ", "keywords": ["instance"]}, {"source": "Text", "text": "Actually, if you want cheaper cost, you want the number lower. ", "keywords": ["cheap", "cost"]}, {"source": "Text", "text": "Because if you have allocation strategy as 'cheapest first' then you want few pools per AZ (since its only the cheapest few pools then). ", "keywords": ["cheap"]}, {"source": "Text", "text": "If there's only 1 instance type available in the AZ, its going to launch that one regardless. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Within the mixed_instances_policy you need to add overrides for the instance types you're adding (weights are optional. ", "keywords": ["instance"]}, {"source": "Body", "text": "Weight is the number of desired capacity units that instance type counts as). ", "keywords": ["instance"]}, {"source": "Body", "text": "Actually, if you want cheaper cost, you want the number lower. ", "keywords": ["cheap", "cost"]}, {"source": "Body", "text": "Because if you have allocation strategy as 'cheapest first' then you want few pools per AZ (since its only the cheapest few pools then). ", "keywords": ["cheap"]}, {"source": "Body", "text": "If there's only 1 instance type available in the AZ, its going to launch that one regardless. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "That works as expected, but sometimes I get the following error: Launching a new EC2 instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "Launching EC2 instance failed. ", "keywords": ["instance"]}, {"source": "Body", "text": "Whenever I have this problem, I deploy a new script changing the EC instance type and it works, so both those suggestions seems like a valid ones to me. ", "keywords": ["instance", "change"]}, {"source": "Body", "text": "The problem is that my current Terraform script does not have the enclosing mixed_instances_policy and I'm unsure how to configure it to keep only on_spot instances (since they are cheaper) and no on_demand instances. ", "keywords": ["cheap"]}]}