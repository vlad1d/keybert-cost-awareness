{"Id": "58770363", "PostTypeId": "1", "CreationDate": "2019-11-08T16:24:24.903", "Score": "1", "ViewCount": "495", "Body": "<p>I would like to discuss what are the best practices/approaches engineers do while upgrading <code>elasticsearch</code> clusters. I believe this post may serve as a good example of strategies and steps to perform, guaranteeing no data loss, minimum downtime, scalability and availability of the <code>elasticsearch</code> services. </p>\n\n<p>To start the initiative, we can break the upgrade into two subsections:</p>\n\n<p>1) Performing upgrade on <code>master nodes</code>:</p>\n\n<p>Since master nodes do not contain any data and are responsible for controlling the cluster I believe we can safely do terraform apply to add all the upgraded master node VMs and then remove the old ones.</p>\n\n<p>2) Performing upgrade on <code>data nodes</code>:</p>\n\n<p>As many people already know, there is certain limitation on the ability to update data nodes. We cannot afford to completely deallocate the VM and replace it with another. A good practice in my opinion is to: </p>\n\n<p>a) Stop the index allocation to the old VM</p>\n\n<p>b) Then performing <code>terraform apply</code> to create the new upgraded version of the data node VM(and manually modifying the <code>terraform state</code> in order the old VM not to be destroyed)</p>\n\n<p>c) Allowing traffic(index creation) to the new VM and using the <code>elasticsearch</code> APIs to transfer the data from the old to the new VM</p>\n\n<p>d) Manually changing the <code>terraform state</code> allowing it to delete the old VM.</p>\n\n<p>These are just idealistic steps, I would like to see your opinion and strategies to perform safe <strong>elasticsearch</strong> upgrades via <strong>Terraform</strong>.</p>\n", "OwnerUserId": "3083031", "LastEditorUserId": "11439664", "LastEditDate": "2019-11-09T05:42:28.503", "LastActivityDate": "2019-11-09T14:18:14.520", "Title": "The right approach to do Elasticsearch upgrades via terraform", "Tags": "<azure><elasticsearch><terraform><terraform-provider-azure>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "208837124", "PostHistoryTypeId": "2", "PostId": "58770363", "RevisionGUID": "3cba3bbe-ba95-46b0-8166-4e18e3cb170a", "CreationDate": "2019-11-08T16:24:24.903", "UserId": "3083031", "Text": "I would like to discuss what are the best practices/approaches engineers do while upgrading `elasticsearch` clusters. I believe this post may serve as a good example of strategies and steps to perform, guaranteeing no data loss, minimum downtime, scalability and availability of the `elasticsearch` services. \r\n\r\nTo start the initiative, we can break the upgrade into two subsections:\r\n\r\n1) Performing upgrade on `master nodes`:\r\n\r\nSince master nodes do not contain any data and are responsible for controlling the cluster I believe we can safely do terraform apply to add all the upgraded master node VMs and then remove the old ones.\r\n\r\n2) Performing upgrade on `data nodes`:\r\n\r\n As many people already know, there is certain limitation on the ability to update data nodes. We cannot afford to completely deallocate the VM and replace it with another. A good practice in my opinion is to: \r\n\r\na) Stop the index allocation to the old VM\r\n\r\nb) Then performing `terraform apply` to create the new upgraded version of the data node VM(and manually modifying the `terraform state` in order the old VM not to be destroyed)\r\n\r\nc) Allowing traffic(index creation) to the new VM and using the `elasticsearch` APIs to transfer the data from the old to the new VM\r\n\r\nd) Manually changing the `terraform state` allowing it to delete the old VM.\r\n\r\nThese are just idealistic steps, I would like to see your opinion and strategies to perform safe **elasticsearch** upgrades via **Terraform**.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Since master nodes do not contain any data and are responsible for controlling the cluster I believe we can safely do terraform apply to add all the upgraded master node VMs and then remove the old ones. ", "keywords": ["cluster"]}, {"source": "Text", "text": "APIs to transfer the data from the old to the new VM d) Manually changing the `terraform state` allowing it to delete the old VM. ", "keywords": ["change"]}]}, {"Id": "208837125", "PostHistoryTypeId": "1", "PostId": "58770363", "RevisionGUID": "3cba3bbe-ba95-46b0-8166-4e18e3cb170a", "CreationDate": "2019-11-08T16:24:24.903", "UserId": "3083031", "Text": "The right approach to do Elasticsearch upgrades via terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "208837126", "PostHistoryTypeId": "3", "PostId": "58770363", "RevisionGUID": "3cba3bbe-ba95-46b0-8166-4e18e3cb170a", "CreationDate": "2019-11-08T16:24:24.903", "UserId": "3083031", "Text": "<elasticsearch><azure-devops><terraform><terraform-provider-azure>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "208871616", "PostHistoryTypeId": "6", "PostId": "58770363", "RevisionGUID": "d8a803bc-e31f-4c1e-a64f-126b11370991", "CreationDate": "2019-11-09T05:42:28.503", "UserId": "11439664", "Comment": "edited tags", "Text": "<azure><elasticsearch><terraform><terraform-provider-azure>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "58780149", "PostTypeId": "2", "ParentId": "58770363", "CreationDate": "2019-11-09T14:18:14.520", "Score": "1", "Body": "<p>The reference manual has guidelines regarding <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-adding-removing-nodes.html#modules-discovery-removing-nodes\" rel=\"nofollow noreferrer\">removing master-eligible nodes</a> that you must respect in versions 7 and later. It's much trickier to get this right in earlier versions because of the <code>discovery.zen.minimum_master_nodes</code> setting.</p>\n\n<p>Your strategy for data nodes sounds slow and expensive given that you might be moving many terabytes of data around for each node. It's normally better to restart/upgrade larger data nodes \"in place\", detaching and reattaching the underlying storage if needed.</p>\n", "OwnerUserId": "215485", "LastActivityDate": "2019-11-09T14:18:14.520", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "208887213", "PostHistoryTypeId": "2", "PostId": "58780149", "RevisionGUID": "932e0bcf-a5fa-4e4d-a47f-6ce73e8c1511", "CreationDate": "2019-11-09T14:18:14.520", "UserId": "215485", "Text": "The reference manual has guidelines regarding [removing master-eligible nodes](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-adding-removing-nodes.html#modules-discovery-removing-nodes) that you must respect in versions 7 and later. It's much trickier to get this right in earlier versions because of the `discovery.zen.minimum_master_nodes` setting.\r\n\r\nYour strategy for data nodes sounds slow and expensive given that you might be moving many terabytes of data around for each node. It's normally better to restart/upgrade larger data nodes \"in place\", detaching and reattaching the underlying storage if needed.\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Your strategy for data nodes sounds slow and expensive given that you might be moving many terabytes of data around for each node. ", "keywords": ["expense"]}, {"source": "Text", "text": "It's normally better to restart/upgrade larger data nodes \"in place\", detaching and reattaching the underlying storage if needed.", "keywords": ["storage"]}]}], "filtered-sentences": [{"source": "Body", "text": "Your strategy for data nodes sounds slow and expensive given that you might be moving many terabytes of data around for each node. ", "keywords": ["expense"]}, {"source": "Body", "text": "It's normally better to restart/upgrade larger data nodes \"in place\", detaching and reattaching the underlying storage if needed.", "keywords": ["storage"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "1) Performing upgrade on master nodes: Since master nodes do not contain any data and are responsible for controlling the cluster I believe we can safely do terraform apply to add all the upgraded master node VMs and then remove the old ones. ", "keywords": ["cluster"]}, {"source": "Body", "text": "c) Allowing traffic(index creation) to the new VM and using the elasticsearch APIs to transfer the data from the old to the new VM d) Manually changing the terraform state allowing it to delete the old VM. ", "keywords": ["change"]}]}