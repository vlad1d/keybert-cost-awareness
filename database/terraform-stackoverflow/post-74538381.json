{"Id": "74538381", "PostTypeId": "1", "AcceptedAnswerId": "74542866", "CreationDate": "2022-11-22T20:06:02.900", "Score": "0", "ViewCount": "103", "Body": "<p>I have multiple databases running in each environment which are charging me a lot of cost each month, so i wanted to downscale the DTUs to some lower count during non-working hours, again during working hours DTUs to be upscale back to actual DTUs count, it should happen automatically as per time settings every single day. If it's possible, can anyone please help me out with this?</p>\n<p>I am trying write a terraform script and run the azure devops pipeline, deploy it in each subscription/environment as it automatically applies in each environment databases.</p>\n", "OwnerUserId": "20575750", "LastActivityDate": "2022-11-30T13:17:07.677", "Title": "Downscale database dtu during out of office hours, it should happen every day automatically, is it possible?", "Tags": "<mysql><terraform-provider-azure>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "282789648", "PostHistoryTypeId": "2", "PostId": "74538381", "RevisionGUID": "536025f9-3873-4ef7-9b5a-692a2ef7078d", "CreationDate": "2022-11-22T20:06:02.900", "UserId": "20575750", "Text": "I have multiple databases running in each environment which are charging me a lot of cost each month, so i wanted to downscale the DTUs to some lower count during non-working hours, again during working hours DTUs to be upscale back to actual DTUs count, it should happen automatically as per time settings every single day. If it's possible, can anyone please help me out with this?\r\n\r\nI am trying write a terraform script and run the azure devops pipeline, deploy it in each subscription/environment as it automatically applies in each environment databases.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have multiple databases running in each environment which are charging me a lot of cost each month, so i wanted to downscale the DTUs to some lower count during non-working hours, again during working hours DTUs to be upscale back to actual DTUs count, it should happen automatically as per time settings every single day. ", "keywords": ["cost"]}]}, {"Id": "282789650", "PostHistoryTypeId": "1", "PostId": "74538381", "RevisionGUID": "536025f9-3873-4ef7-9b5a-692a2ef7078d", "CreationDate": "2022-11-22T20:06:02.900", "UserId": "20575750", "Text": "Downscale database dtu during out of office hours, it should happen every day automatically, is it possible?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "282789651", "PostHistoryTypeId": "3", "PostId": "74538381", "RevisionGUID": "536025f9-3873-4ef7-9b5a-692a2ef7078d", "CreationDate": "2022-11-22T20:06:02.900", "UserId": "20575750", "Text": "<mysql><terraform-provider-azure>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "282789652", "PostHistoryTypeId": "66", "PostId": "74538381", "RevisionGUID": "536025f9-3873-4ef7-9b5a-692a2ef7078d", "CreationDate": "2022-11-22T20:06:02.900", "UserId": "20575750", "filtered-sentences": []}], "answers": [{"Id": "74542866", "PostTypeId": "2", "ParentId": "74538381", "CreationDate": "2022-11-23T07:00:40.163", "Score": "1", "Body": "<p>You can do this by creating <a href=\"https://learn.microsoft.com/en-us/azure/automation/start-runbooks\" rel=\"nofollow noreferrer\">Azure Automation Account and use runbooks</a> to do the scheduled job. Using PowerShell/PowerShell Workflow as a runbook type would be better for this case. You can create 1 runbook for scale down and 1 for scale up.</p>\n<p>You can use resource tags as your reference point for the target azure sql database/s. See link on <a href=\"https://learn.microsoft.com/en-us/azure/virtual-machines/tag-portal\" rel=\"nofollow noreferrer\">how to add tags a resource in Azure.</a>\n<a href=\"https://i.stack.imgur.com/ihuro.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/ihuro.png\" alt=\"enter image description here\" /></a></p>\n<p>You can now use this tag as your parameter in your runbook script to view and make some changes on the target azure sql database.\nHere is sample code snippet:</p>\n<pre><code>\n   workflow ScaleDown_DBs_S0_Tags\n   {\n    Param(\n        [Parameter(Mandatory=$true)]\n        [String]\n        $ScaleDown_Schedule_TagValue\n        )\n\n     InlineScript{\n    \n    $NewEdition = &quot;Standard&quot; \n    $NewTier = &quot;S0&quot; \n\n    #Converting Tag parameter for use in InlineScript\n    $TagValue = $Using:ScaleDown_Schedule_TagValue\n    \n    #Getting the current subscription details\n    $Context = Get-AzureRmContext\n\n    #Getting the current subscription name\n    $CurrentSub = $Context.Subscription.Name\n    $Time = (get-date).ToString('T')\n    Write-Output &quot;Starting job at $($Time)&quot;\n    Write-Output &quot;&quot;\n    Write-Output &quot;Getting all Databases with tags $($TagValue) under $($CurrentSub) Subscription...&quot;\n    \n    #Getting all database objects with tags as per tag parameter\n    $TaggedDBObjects = Get-AzureRmResource | where {$_.Tags.Values -like &quot;*$TagValue*&quot;}\n    $count = $TaggedDBObjects.count \n    Write-Output &quot;Total of $($Count) databases found:&quot;\n    $TaggedDBObjects.Name \n   \n      foreach ($TaggedDBObject in $TaggedDBObjects) {\n        $SplitName = $TaggedDBObject.Name.Split('/') \n        $SqlServerName = $SplitName[0]\n        $DatabaseName = $SplitName[1] \n        $ResourceGroupName = $TaggedDBObject.ResourceGroupName \n        Write-Output &quot;&quot;\n        Write-Output &quot;Checking current Edition/Tier of $($DatabaseName)...&quot;\n\n        #Getting database complete object using Get-AzureRmSqlDatabase\n        $GetDBs = Get-AzureRmSqlDatabase -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -DatabaseName $DatabaseName\n        $CurrentEdition = $GetDBs.Edition\n        $CurrentTier = $GetDBs.CurrentServiceObjectiveName\n        #Validating if Edition is already set and if action needed, if false\n            if($CurrentTier -eq $NewTier){            \n               \n                Write-Output &quot;Database $($DatabaseName) is already under $($CurrentEdition)/$($CurrentTier) plan. No action will be taken&quot;\n           \n            }\n\n            Else{\n                Write-Output &quot;&quot;\n                Write-Output &quot;Current plan is $($CurrentEdition)/$($CurrentTier)&quot;\n                Write-Output &quot;&quot;\n                Write-Output &quot;Begin vertical scaling of database $($DatabaseName) to $($NewEdition)/$($NewTier) plan&quot;\n                Write-Output &quot;&quot;\n                #Changing Edition/Tier accordingly\n                Set-AzureRmSqlDatabase -DatabaseName $DatabaseName -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -Edition $NewEdition -RequestedServiceObjectiveName $NewTier -AsJob\n                \n                Write-Output &quot;&quot;\n                Write-Output &quot;Database $($DatabaseName) successfully scaled to $($NewEdition)/$($NewTier)&quot;\n            \n            }\n        }\n    }\n   }\n</code></pre>\n<p>After working with the script, you can now <a href=\"https://learn.microsoft.com/en-us/azure/automation/manage-runbooks#schedule-a-runbook-in-the-azure-portal\" rel=\"nofollow noreferrer\">create a schedule and link it to your runbook.</a></p>\n<p><a href=\"https://i.stack.imgur.com/c0vvr.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/c0vvr.png\" alt=\"enter image description here\" /></a></p>\n", "OwnerUserId": "18746184", "LastEditorUserId": "18746184", "LastEditDate": "2022-11-30T13:17:07.677", "LastActivityDate": "2022-11-30T13:17:07.677", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131703611", "PostId": "74542866", "Score": "0", "Text": "Tried the run book and thrown multiple errors!", "CreationDate": "2022-11-29T12:38:15.960", "UserId": "20575750", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131741589", "PostId": "74542866", "Score": "0", "Text": "Hi @GowthamVarmaDanthuluri, I've update the script, I've miss to add the workflow part in the beginning can you try again on your end.", "CreationDate": "2022-12-01T02:36:03.000", "UserId": "18746184", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "282815415", "PostHistoryTypeId": "2", "PostId": "74542866", "RevisionGUID": "70b874a4-11d5-4032-990f-513a0a076a90", "CreationDate": "2022-11-23T07:00:40.163", "UserId": "18746184", "Text": "You can do this by creating [Azure Automation Account and use runbooks][1] to do the scheduled job. Using PowerShell/PowerShell Workflow as a runbook type would be better for this case. You can create 1 runbook for scale down and 1 for scale up.\r\n\r\nYou can use resource tags as your reference point for the target azure sql database/s. See link on [how to add tags a resource in Azure.][2]\r\n\r\n\r\nYou can now use this tag in your runbook script to view and make some changes on the target azure sql database.\r\nHere is sample code snippet:\r\n\r\n   \r\n```powershell\r\n    Param(\r\n        [Parameter(Mandatory=$true)]\r\n        [String]\r\n        $ScaleDown_Schedule_TagValue\r\n        )\r\n\r\n     InlineScript{\r\n    \r\n    $NewEdition = \"Standard\" \r\n    $NewTier = \"S0\" \r\n\r\n    #Converting Tag parameter for use in InlineScript\r\n    $TagValue = $Using:ScaleDown_Schedule_TagValue\r\n    \r\n    #Getting the current subscription details\r\n    $Context = Get-AzureRmContext\r\n\r\n    #Getting the current subscription name\r\n    $CurrentSub = $Context.Subscription.Name\r\n    $Time = (get-date).ToString('T')\r\n    Write-Output \"Starting job at $($Time)\"\r\n    Write-Output \"\"\r\n    Write-Output \"Getting all Databases with tags $($TagValue) under $($CurrentSub) Subscription...\"\r\n    \r\n    #Getting all database objects with tags as per tag parameter\r\n    $TaggedDBObjects = Get-AzureRmResource | where {$_.Tags.Values -like \"*$TagValue*\"}\r\n    $count = $TaggedDBObjects.count \r\n    Write-Output \"Total of $($Count) databases found:\"\r\n    $TaggedDBObjects.Name \r\n   \r\n      foreach ($TaggedDBObject in $TaggedDBObjects) {\r\n        $SplitName = $TaggedDBObject.Name.Split('/') \r\n        $SqlServerName = $SplitName[0]\r\n        $DatabaseName = $SplitName[1] \r\n        $ResourceGroupName = $TaggedDBObject.ResourceGroupName \r\n        Write-Output \"\"\r\n        Write-Output \"Checking current Edition/Tier of $($DatabaseName)...\"\r\n\r\n        #Getting database complete object using Get-AzureRmSqlDatabase\r\n        $GetDBs = Get-AzureRmSqlDatabase -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -DatabaseName $DatabaseName\r\n        $CurrentEdition = $GetDBs.Edition\r\n        $CurrentTier = $GetDBs.CurrentServiceObjectiveName\r\n        #Validating if Edition is already set and if action needed, if false\r\n            if($CurrentTier -eq $NewTier){            \r\n               \r\n                Write-Output \"Database $($DatabaseName) is already under $($CurrentEdition)/$($CurrentTier) plan. No action will be taken\"\r\n           \r\n            }\r\n\r\n            Else{\r\n                Write-Output \"\"\r\n                Write-Output \"Current plan is $($CurrentEdition)/$($CurrentTier)\"\r\n                Write-Output \"\"\r\n                Write-Output \"Begin vertical scaling of database $($DatabaseName) to $($NewEdition)/$($NewTier) plan\"\r\n                Write-Output \"\"\r\n                #Changing Edition/Tier accordingly\r\n                Set-AzureRmSqlDatabase -DatabaseName $DatabaseName -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -Edition $NewEdition -RequestedServiceObjectiveName $NewTier -AsJob\r\n                \r\n                Write-Output \"\"\r\n                Write-Output \"Database $($DatabaseName) successfully scaled to $($NewEdition)/$($NewTier)\"\r\n            \r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nAfter working with the script, you can now [create a schedule and link it to your runbook.][3] \r\n\r\n  [1]: https://learn.microsoft.com/en-us/azure/automation/start-runbooks\r\n  [2]: https://learn.microsoft.com/en-us/azure/virtual-machines/tag-portal\r\n  [3]: https://learn.microsoft.com/en-us/azure/automation/manage-runbooks#schedule-a-runbook-in-the-azure-portal\r\n ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can now use this tag in your runbook script to view and make some changes on the target azure sql database. ", "keywords": ["change"]}, {"source": "Text", "text": "Here is sample code snippet: ```powershell Param( [Parameter(Mandatory=$true)] [String] $ScaleDown_Schedule_TagValue ) InlineScript{ $NewEdition = \"Standard\" $NewTier = \"S0\" #Converting Tag parameter for use in InlineScript $TagValue = $Using:ScaleDown_Schedule_TagValue #Getting the current subscription details $Context = Get-AzureRmContext #Getting the current subscription name $CurrentSub = $Context.Subscription.Name $Time = (get-date).ToString('T') Write-Output \"Starting job at $($Time)\" Write-Output \"\" Write-Output \"Getting all Databases with tags $($TagValue) under $($CurrentSub) Subscription...\" #Getting all database objects with tags as per tag parameter $TaggedDBObjects = Get-AzureRmResource | where {$_.Tags.Values -like \"*$TagValue*\"} $count = $TaggedDBObjects.count Write-Output \"Total of $($Count) databases found:\" $TaggedDBObjects.Name foreach ($TaggedDBObject in $TaggedDBObjects) { $SplitName = $TaggedDBObject.Name.Split('/') $SqlServerName = $SplitName[0] $DatabaseName = $SplitName[1] $ResourceGroupName = $TaggedDBObject.ResourceGroupName Write-Output \"\" Write-Output \"Checking current Edition/Tier of $($DatabaseName)...\" #Getting database complete object using Get-AzureRmSqlDatabase $GetDBs = Get-AzureRmSqlDatabase -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -DatabaseName $DatabaseName $CurrentEdition = $GetDBs.Edition $CurrentTier = $GetDBs.CurrentServiceObjectiveName #Validating if Edition is already set and if action needed, if false if($CurrentTier -eq $NewTier){ Write-Output \"Database $($DatabaseName) is already under $($CurrentEdition)/$($CurrentTier) plan. No action will be taken\" } Else{ Write-Output \"\" Write-Output \"Current plan is $($CurrentEdition)/$($CurrentTier)\" Write-Output \"\" Write-Output \"Begin vertical scaling of database $($DatabaseName) to $($NewEdition)/$($NewTier) plan\" Write-Output \"\" #Changing Edition/Tier accordingly Set-AzureRmSqlDatabase -DatabaseName $DatabaseName -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -Edition $NewEdition -RequestedServiceObjectiveName $NewTier -AsJob Write-Output \"\" Write-Output \"Database $($DatabaseName) successfully scaled to $($NewEdition)/$($NewTier)\" } } } ``` After working with the script, you can now [create a schedule and link it to your runbook.][3] [1]: https://learn.microsoft.com/en-us/azure/automation/start-runbooks [2]: https://learn.microsoft.com/en-us/azure/virtual-machines/tag-portal [3]: https://learn.microsoft.com/en-us/azure/automation/manage-runbooks#schedule-a-runbook-in-the-azure-portal", "keywords": ["change"]}]}, {"Id": "282815760", "PostHistoryTypeId": "5", "PostId": "74542866", "RevisionGUID": "50e118cf-ba13-4adc-ba62-e97aa888fc39", "CreationDate": "2022-11-23T07:07:14.523", "UserId": "18746184", "Comment": "added 18 characters in body", "Text": "You can do this by creating [Azure Automation Account and use runbooks][1] to do the scheduled job. Using PowerShell/PowerShell Workflow as a runbook type would be better for this case. You can create 1 runbook for scale down and 1 for scale up.\r\n\r\nYou can use resource tags as your reference point for the target azure sql database/s. See link on [how to add tags a resource in Azure.][2]\r\n\r\n\r\nYou can now use this tag as your parameter in your runbook script to view and make some changes on the target azure sql database.\r\nHere is sample code snippet:\r\n\r\n   \r\n```powershell\r\n    Param(\r\n        [Parameter(Mandatory=$true)]\r\n        [String]\r\n        $ScaleDown_Schedule_TagValue\r\n        )\r\n\r\n     InlineScript{\r\n    \r\n    $NewEdition = \"Standard\" \r\n    $NewTier = \"S0\" \r\n\r\n    #Converting Tag parameter for use in InlineScript\r\n    $TagValue = $Using:ScaleDown_Schedule_TagValue\r\n    \r\n    #Getting the current subscription details\r\n    $Context = Get-AzureRmContext\r\n\r\n    #Getting the current subscription name\r\n    $CurrentSub = $Context.Subscription.Name\r\n    $Time = (get-date).ToString('T')\r\n    Write-Output \"Starting job at $($Time)\"\r\n    Write-Output \"\"\r\n    Write-Output \"Getting all Databases with tags $($TagValue) under $($CurrentSub) Subscription...\"\r\n    \r\n    #Getting all database objects with tags as per tag parameter\r\n    $TaggedDBObjects = Get-AzureRmResource | where {$_.Tags.Values -like \"*$TagValue*\"}\r\n    $count = $TaggedDBObjects.count \r\n    Write-Output \"Total of $($Count) databases found:\"\r\n    $TaggedDBObjects.Name \r\n   \r\n      foreach ($TaggedDBObject in $TaggedDBObjects) {\r\n        $SplitName = $TaggedDBObject.Name.Split('/') \r\n        $SqlServerName = $SplitName[0]\r\n        $DatabaseName = $SplitName[1] \r\n        $ResourceGroupName = $TaggedDBObject.ResourceGroupName \r\n        Write-Output \"\"\r\n        Write-Output \"Checking current Edition/Tier of $($DatabaseName)...\"\r\n\r\n        #Getting database complete object using Get-AzureRmSqlDatabase\r\n        $GetDBs = Get-AzureRmSqlDatabase -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -DatabaseName $DatabaseName\r\n        $CurrentEdition = $GetDBs.Edition\r\n        $CurrentTier = $GetDBs.CurrentServiceObjectiveName\r\n        #Validating if Edition is already set and if action needed, if false\r\n            if($CurrentTier -eq $NewTier){            \r\n               \r\n                Write-Output \"Database $($DatabaseName) is already under $($CurrentEdition)/$($CurrentTier) plan. No action will be taken\"\r\n           \r\n            }\r\n\r\n            Else{\r\n                Write-Output \"\"\r\n                Write-Output \"Current plan is $($CurrentEdition)/$($CurrentTier)\"\r\n                Write-Output \"\"\r\n                Write-Output \"Begin vertical scaling of database $($DatabaseName) to $($NewEdition)/$($NewTier) plan\"\r\n                Write-Output \"\"\r\n                #Changing Edition/Tier accordingly\r\n                Set-AzureRmSqlDatabase -DatabaseName $DatabaseName -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -Edition $NewEdition -RequestedServiceObjectiveName $NewTier -AsJob\r\n                \r\n                Write-Output \"\"\r\n                Write-Output \"Database $($DatabaseName) successfully scaled to $($NewEdition)/$($NewTier)\"\r\n            \r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nAfter working with the script, you can now [create a schedule and link it to your runbook.][3] \r\n\r\n  [1]: https://learn.microsoft.com/en-us/azure/automation/start-runbooks\r\n  [2]: https://learn.microsoft.com/en-us/azure/virtual-machines/tag-portal\r\n  [3]: https://learn.microsoft.com/en-us/azure/automation/manage-runbooks#schedule-a-runbook-in-the-azure-portal\r\n ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can now use this tag as your parameter in your runbook script to view and make some changes on the target azure sql database. ", "keywords": ["change"]}, {"source": "Text", "text": "Here is sample code snippet: ```powershell Param( [Parameter(Mandatory=$true)] [String] $ScaleDown_Schedule_TagValue ) InlineScript{ $NewEdition = \"Standard\" $NewTier = \"S0\" #Converting Tag parameter for use in InlineScript $TagValue = $Using:ScaleDown_Schedule_TagValue #Getting the current subscription details $Context = Get-AzureRmContext #Getting the current subscription name $CurrentSub = $Context.Subscription.Name $Time = (get-date).ToString('T') Write-Output \"Starting job at $($Time)\" Write-Output \"\" Write-Output \"Getting all Databases with tags $($TagValue) under $($CurrentSub) Subscription...\" #Getting all database objects with tags as per tag parameter $TaggedDBObjects = Get-AzureRmResource | where {$_.Tags.Values -like \"*$TagValue*\"} $count = $TaggedDBObjects.count Write-Output \"Total of $($Count) databases found:\" $TaggedDBObjects.Name foreach ($TaggedDBObject in $TaggedDBObjects) { $SplitName = $TaggedDBObject.Name.Split('/') $SqlServerName = $SplitName[0] $DatabaseName = $SplitName[1] $ResourceGroupName = $TaggedDBObject.ResourceGroupName Write-Output \"\" Write-Output \"Checking current Edition/Tier of $($DatabaseName)...\" #Getting database complete object using Get-AzureRmSqlDatabase $GetDBs = Get-AzureRmSqlDatabase -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -DatabaseName $DatabaseName $CurrentEdition = $GetDBs.Edition $CurrentTier = $GetDBs.CurrentServiceObjectiveName #Validating if Edition is already set and if action needed, if false if($CurrentTier -eq $NewTier){ Write-Output \"Database $($DatabaseName) is already under $($CurrentEdition)/$($CurrentTier) plan. No action will be taken\" } Else{ Write-Output \"\" Write-Output \"Current plan is $($CurrentEdition)/$($CurrentTier)\" Write-Output \"\" Write-Output \"Begin vertical scaling of database $($DatabaseName) to $($NewEdition)/$($NewTier) plan\" Write-Output \"\" #Changing Edition/Tier accordingly Set-AzureRmSqlDatabase -DatabaseName $DatabaseName -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -Edition $NewEdition -RequestedServiceObjectiveName $NewTier -AsJob Write-Output \"\" Write-Output \"Database $($DatabaseName) successfully scaled to $($NewEdition)/$($NewTier)\" } } } ``` ", "keywords": ["change"]}]}, {"Id": "282822263", "PostHistoryTypeId": "5", "PostId": "74542866", "RevisionGUID": "9d802762-d0b4-4544-a880-6e54f83e0cdd", "CreationDate": "2022-11-23T09:01:49.847", "UserId": "18746184", "Comment": "added 169 characters in body", "Text": "You can do this by creating [Azure Automation Account and use runbooks][1] to do the scheduled job. Using PowerShell/PowerShell Workflow as a runbook type would be better for this case. You can create 1 runbook for scale down and 1 for scale up.\r\n\r\nYou can use resource tags as your reference point for the target azure sql database/s. See link on [how to add tags a resource in Azure.][2]\r\n[![enter image description here][3]][3]\r\n\r\nYou can now use this tag as your parameter in your runbook script to view and make some changes on the target azure sql database.\r\nHere is sample code snippet:\r\n\r\n   \r\n```powershell\r\n    Param(\r\n        [Parameter(Mandatory=$true)]\r\n        [String]\r\n        $ScaleDown_Schedule_TagValue\r\n        )\r\n\r\n     InlineScript{\r\n    \r\n    $NewEdition = \"Standard\" \r\n    $NewTier = \"S0\" \r\n\r\n    #Converting Tag parameter for use in InlineScript\r\n    $TagValue = $Using:ScaleDown_Schedule_TagValue\r\n    \r\n    #Getting the current subscription details\r\n    $Context = Get-AzureRmContext\r\n\r\n    #Getting the current subscription name\r\n    $CurrentSub = $Context.Subscription.Name\r\n    $Time = (get-date).ToString('T')\r\n    Write-Output \"Starting job at $($Time)\"\r\n    Write-Output \"\"\r\n    Write-Output \"Getting all Databases with tags $($TagValue) under $($CurrentSub) Subscription...\"\r\n    \r\n    #Getting all database objects with tags as per tag parameter\r\n    $TaggedDBObjects = Get-AzureRmResource | where {$_.Tags.Values -like \"*$TagValue*\"}\r\n    $count = $TaggedDBObjects.count \r\n    Write-Output \"Total of $($Count) databases found:\"\r\n    $TaggedDBObjects.Name \r\n   \r\n      foreach ($TaggedDBObject in $TaggedDBObjects) {\r\n        $SplitName = $TaggedDBObject.Name.Split('/') \r\n        $SqlServerName = $SplitName[0]\r\n        $DatabaseName = $SplitName[1] \r\n        $ResourceGroupName = $TaggedDBObject.ResourceGroupName \r\n        Write-Output \"\"\r\n        Write-Output \"Checking current Edition/Tier of $($DatabaseName)...\"\r\n\r\n        #Getting database complete object using Get-AzureRmSqlDatabase\r\n        $GetDBs = Get-AzureRmSqlDatabase -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -DatabaseName $DatabaseName\r\n        $CurrentEdition = $GetDBs.Edition\r\n        $CurrentTier = $GetDBs.CurrentServiceObjectiveName\r\n        #Validating if Edition is already set and if action needed, if false\r\n            if($CurrentTier -eq $NewTier){            \r\n               \r\n                Write-Output \"Database $($DatabaseName) is already under $($CurrentEdition)/$($CurrentTier) plan. No action will be taken\"\r\n           \r\n            }\r\n\r\n            Else{\r\n                Write-Output \"\"\r\n                Write-Output \"Current plan is $($CurrentEdition)/$($CurrentTier)\"\r\n                Write-Output \"\"\r\n                Write-Output \"Begin vertical scaling of database $($DatabaseName) to $($NewEdition)/$($NewTier) plan\"\r\n                Write-Output \"\"\r\n                #Changing Edition/Tier accordingly\r\n                Set-AzureRmSqlDatabase -DatabaseName $DatabaseName -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -Edition $NewEdition -RequestedServiceObjectiveName $NewTier -AsJob\r\n                \r\n                Write-Output \"\"\r\n                Write-Output \"Database $($DatabaseName) successfully scaled to $($NewEdition)/$($NewTier)\"\r\n            \r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nAfter working with the script, you can now [create a schedule and link it to your runbook.][4] \r\n\r\n[![enter image description here][5]][5]\r\n\r\n\r\n  [1]: https://learn.microsoft.com/en-us/azure/automation/start-runbooks\r\n  [2]: https://learn.microsoft.com/en-us/azure/virtual-machines/tag-portal\r\n  [3]: https://i.stack.imgur.com/ihuro.png\r\n  [4]: https://learn.microsoft.com/en-us/azure/automation/manage-runbooks#schedule-a-runbook-in-the-azure-portal\r\n  [5]: https://i.stack.imgur.com/c0vvr.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can now use this tag as your parameter in your runbook script to view and make some changes on the target azure sql database. ", "keywords": ["change"]}, {"source": "Text", "text": "Here is sample code snippet: ```powershell Param( [Parameter(Mandatory=$true)] [String] $ScaleDown_Schedule_TagValue ) InlineScript{ $NewEdition = \"Standard\" $NewTier = \"S0\" #Converting Tag parameter for use in InlineScript $TagValue = $Using:ScaleDown_Schedule_TagValue #Getting the current subscription details $Context = Get-AzureRmContext #Getting the current subscription name $CurrentSub = $Context.Subscription.Name $Time = (get-date).ToString('T') Write-Output \"Starting job at $($Time)\" Write-Output \"\" Write-Output \"Getting all Databases with tags $($TagValue) under $($CurrentSub) Subscription...\" #Getting all database objects with tags as per tag parameter $TaggedDBObjects = Get-AzureRmResource | where {$_.Tags.Values -like \"*$TagValue*\"} $count = $TaggedDBObjects.count Write-Output \"Total of $($Count) databases found:\" $TaggedDBObjects.Name foreach ($TaggedDBObject in $TaggedDBObjects) { $SplitName = $TaggedDBObject.Name.Split('/') $SqlServerName = $SplitName[0] $DatabaseName = $SplitName[1] $ResourceGroupName = $TaggedDBObject.ResourceGroupName Write-Output \"\" Write-Output \"Checking current Edition/Tier of $($DatabaseName)...\" #Getting database complete object using Get-AzureRmSqlDatabase $GetDBs = Get-AzureRmSqlDatabase -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -DatabaseName $DatabaseName $CurrentEdition = $GetDBs.Edition $CurrentTier = $GetDBs.CurrentServiceObjectiveName #Validating if Edition is already set and if action needed, if false if($CurrentTier -eq $NewTier){ Write-Output \"Database $($DatabaseName) is already under $($CurrentEdition)/$($CurrentTier) plan. No action will be taken\" } Else{ Write-Output \"\" Write-Output \"Current plan is $($CurrentEdition)/$($CurrentTier)\" Write-Output \"\" Write-Output \"Begin vertical scaling of database $($DatabaseName) to $($NewEdition)/$($NewTier) plan\" Write-Output \"\" #Changing Edition/Tier accordingly Set-AzureRmSqlDatabase -DatabaseName $DatabaseName -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -Edition $NewEdition -RequestedServiceObjectiveName $NewTier -AsJob Write-Output \"\" Write-Output \"Database $($DatabaseName) successfully scaled to $($NewEdition)/$($NewTier)\" } } } ``` ", "keywords": ["change"]}]}, {"Id": "283312628", "PostHistoryTypeId": "5", "PostId": "74542866", "RevisionGUID": "ff3ce332-5572-40e0-93e1-9627b7d59985", "CreationDate": "2022-11-30T13:17:07.677", "UserId": "18746184", "Comment": "added 49 characters in body", "Text": "You can do this by creating [Azure Automation Account and use runbooks][1] to do the scheduled job. Using PowerShell/PowerShell Workflow as a runbook type would be better for this case. You can create 1 runbook for scale down and 1 for scale up.\r\n\r\nYou can use resource tags as your reference point for the target azure sql database/s. See link on [how to add tags a resource in Azure.][2]\r\n[![enter image description here][3]][3]\r\n\r\nYou can now use this tag as your parameter in your runbook script to view and make some changes on the target azure sql database.\r\nHere is sample code snippet:\r\n\r\n   \r\n```powershell\r\n\r\n   workflow ScaleDown_DBs_S0_Tags\r\n   {\r\n    Param(\r\n        [Parameter(Mandatory=$true)]\r\n        [String]\r\n        $ScaleDown_Schedule_TagValue\r\n        )\r\n\r\n     InlineScript{\r\n    \r\n    $NewEdition = \"Standard\" \r\n    $NewTier = \"S0\" \r\n\r\n    #Converting Tag parameter for use in InlineScript\r\n    $TagValue = $Using:ScaleDown_Schedule_TagValue\r\n    \r\n    #Getting the current subscription details\r\n    $Context = Get-AzureRmContext\r\n\r\n    #Getting the current subscription name\r\n    $CurrentSub = $Context.Subscription.Name\r\n    $Time = (get-date).ToString('T')\r\n    Write-Output \"Starting job at $($Time)\"\r\n    Write-Output \"\"\r\n    Write-Output \"Getting all Databases with tags $($TagValue) under $($CurrentSub) Subscription...\"\r\n    \r\n    #Getting all database objects with tags as per tag parameter\r\n    $TaggedDBObjects = Get-AzureRmResource | where {$_.Tags.Values -like \"*$TagValue*\"}\r\n    $count = $TaggedDBObjects.count \r\n    Write-Output \"Total of $($Count) databases found:\"\r\n    $TaggedDBObjects.Name \r\n   \r\n      foreach ($TaggedDBObject in $TaggedDBObjects) {\r\n        $SplitName = $TaggedDBObject.Name.Split('/') \r\n        $SqlServerName = $SplitName[0]\r\n        $DatabaseName = $SplitName[1] \r\n        $ResourceGroupName = $TaggedDBObject.ResourceGroupName \r\n        Write-Output \"\"\r\n        Write-Output \"Checking current Edition/Tier of $($DatabaseName)...\"\r\n\r\n        #Getting database complete object using Get-AzureRmSqlDatabase\r\n        $GetDBs = Get-AzureRmSqlDatabase -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -DatabaseName $DatabaseName\r\n        $CurrentEdition = $GetDBs.Edition\r\n        $CurrentTier = $GetDBs.CurrentServiceObjectiveName\r\n        #Validating if Edition is already set and if action needed, if false\r\n            if($CurrentTier -eq $NewTier){            \r\n               \r\n                Write-Output \"Database $($DatabaseName) is already under $($CurrentEdition)/$($CurrentTier) plan. No action will be taken\"\r\n           \r\n            }\r\n\r\n            Else{\r\n                Write-Output \"\"\r\n                Write-Output \"Current plan is $($CurrentEdition)/$($CurrentTier)\"\r\n                Write-Output \"\"\r\n                Write-Output \"Begin vertical scaling of database $($DatabaseName) to $($NewEdition)/$($NewTier) plan\"\r\n                Write-Output \"\"\r\n                #Changing Edition/Tier accordingly\r\n                Set-AzureRmSqlDatabase -DatabaseName $DatabaseName -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -Edition $NewEdition -RequestedServiceObjectiveName $NewTier -AsJob\r\n                \r\n                Write-Output \"\"\r\n                Write-Output \"Database $($DatabaseName) successfully scaled to $($NewEdition)/$($NewTier)\"\r\n            \r\n            }\r\n        }\r\n    }\r\n   }\r\n```\r\n\r\nAfter working with the script, you can now [create a schedule and link it to your runbook.][4] \r\n\r\n[![enter image description here][5]][5]\r\n\r\n\r\n  [1]: https://learn.microsoft.com/en-us/azure/automation/start-runbooks\r\n  [2]: https://learn.microsoft.com/en-us/azure/virtual-machines/tag-portal\r\n  [3]: https://i.stack.imgur.com/ihuro.png\r\n  [4]: https://learn.microsoft.com/en-us/azure/automation/manage-runbooks#schedule-a-runbook-in-the-azure-portal\r\n  [5]: https://i.stack.imgur.com/c0vvr.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can now use this tag as your parameter in your runbook script to view and make some changes on the target azure sql database. ", "keywords": ["change"]}, {"source": "Text", "text": "Here is sample code snippet: ```powershell workflow ScaleDown_DBs_S0_Tags { Param( [Parameter(Mandatory=$true)] [String] $ScaleDown_Schedule_TagValue ) InlineScript{ $NewEdition = \"Standard\" $NewTier = \"S0\" #Converting Tag parameter for use in InlineScript $TagValue = $Using:ScaleDown_Schedule_TagValue #Getting the current subscription details $Context = Get-AzureRmContext #Getting the current subscription name $CurrentSub = $Context.Subscription.Name $Time = (get-date).ToString('T') Write-Output \"Starting job at $($Time)\" Write-Output \"\" Write-Output \"Getting all Databases with tags $($TagValue) under $($CurrentSub) Subscription...\" #Getting all database objects with tags as per tag parameter $TaggedDBObjects = Get-AzureRmResource | where {$_.Tags.Values -like \"*$TagValue*\"} $count = $TaggedDBObjects.count Write-Output \"Total of $($Count) databases found:\" $TaggedDBObjects.Name foreach ($TaggedDBObject in $TaggedDBObjects) { $SplitName = $TaggedDBObject.Name.Split('/') $SqlServerName = $SplitName[0] $DatabaseName = $SplitName[1] $ResourceGroupName = $TaggedDBObject.ResourceGroupName Write-Output \"\" Write-Output \"Checking current Edition/Tier of $($DatabaseName)...\" #Getting database complete object using Get-AzureRmSqlDatabase $GetDBs = Get-AzureRmSqlDatabase -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -DatabaseName $DatabaseName $CurrentEdition = $GetDBs.Edition $CurrentTier = $GetDBs.CurrentServiceObjectiveName #Validating if Edition is already set and if action needed, if false if($CurrentTier -eq $NewTier){ Write-Output \"Database $($DatabaseName) is already under $($CurrentEdition)/$($CurrentTier) plan. No action will be taken\" } Else{ Write-Output \"\" Write-Output \"Current plan is $($CurrentEdition)/$($CurrentTier)\" Write-Output \"\" Write-Output \"Begin vertical scaling of database $($DatabaseName) to $($NewEdition)/$($NewTier) plan\" Write-Output \"\" #Changing Edition/Tier accordingly Set-AzureRmSqlDatabase -DatabaseName $DatabaseName -ServerName $SqlServerName -ResourceGroupName $ResourceGroupName -Edition $NewEdition -RequestedServiceObjectiveName $NewTier -AsJob Write-Output \"\" Write-Output \"Database $($DatabaseName) successfully scaled to $($NewEdition)/$($NewTier)\" } } } } ``` ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can now use this tag as your parameter in your runbook script to view and make some changes on the target azure sql database. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have multiple databases running in each environment which are charging me a lot of cost each month, so i wanted to downscale the DTUs to some lower count during non-working hours, again during working hours DTUs to be upscale back to actual DTUs count, it should happen automatically as per time settings every single day. ", "keywords": ["cost"]}]}