{"Id": "63628934", "PostTypeId": "1", "AcceptedAnswerId": "63629385", "CreationDate": "2020-08-28T06:57:58.820", "Score": "3", "ViewCount": "5707", "Body": "<p>I got the following problem. I create a local variable like:</p>\n<pre><code>variable vpcs {\n  type = map\n  default = {\n    &quot;tftest&quot; = {\n      &quot;cidr&quot; = &quot;10.1.0.0/16&quot;,\n      &quot;tags&quot; = {\n        &quot;cost&quot;    = &quot;shared&quot;,\n        &quot;service&quot; = &quot;TEST&quot;\n      }\n    }\n  }\n}\n\ndata &quot;aws_availability_zones&quot; &quot;azs&quot; {\n  state = &quot;available&quot;\n}\n\nvariable subnets {\n  type = map\n  default = {\n    &quot;pub1&quot;  = { &quot;subnet&quot; = 0, &quot;rttable&quot; = &quot;public&quot; },\n    &quot;pub2&quot;  = { &quot;subnet&quot; = 1, &quot;rttable&quot; = &quot;public&quot; },\n    &quot;priv1&quot; = { &quot;subnet&quot; = 2, &quot;rttable&quot; = &quot;default&quot; },\n    &quot;priv2&quot; = { &quot;subnet&quot; = 3, &quot;rttable&quot; = &quot;default&quot; }\n  }\n}\n\nlocals {\n  vpc_subnet_var = flatten([\n    for v in keys(var.vpcs) : [\n      for s in keys(var.subnets) : {\n        network_name   = v\n        tags           = var.vpcs[v][&quot;tags&quot;]\n        subnet_name    = format(&quot;%v_%s&quot;, v, s)\n        subnet_cidr    = cidrsubnet(var.vpcs[v][&quot;cidr&quot;], 8, var.subnets[s][&quot;subnet&quot;])\n        subnet_az      = element(local.my_azs, var.subnets[s][&quot;subnet&quot;] % 2)\n        subnet_rttable = var.subnets[s][&quot;rttable&quot;]\n      }\n    ]\n  ])\n  prefix = &quot;${var.prefix}-${terraform.workspace}-tf&quot;\n  common_tags = {\n    Environment = terraform.workspace\n    Project     = var.project\n    ManagedBy   = &quot;Terraform&quot;\n  }\n  my_azs = slice(data.aws_availability_zones.azs.names, 0, 2)\n}\n\nresource &quot;aws_vpc&quot; &quot;test&quot; {\n  for_each   = var.vpcs\n  cidr_block = each.value[&quot;cidr&quot;]\n  tags = merge(each.value[&quot;tags&quot;],\n    {\n      Name = each.key\n  })\n}\n\nresource &quot;aws_subnet&quot; &quot;test&quot; {\n  for_each = {\n    for s in local.vpc_subnet_var : s.subnet_name =&gt; s\n  }\n  vpc_id            = aws_vpc.test[each.value.network_name].id\n  availability_zone = each.value.subnet_az\n  cidr_block        = each.value.subnet_cidr\n  tags = merge(each.value.tags,\n    {\n      Name = each.value.subnet_name\n  })\n}\n</code></pre>\n<p>An example test output would be:</p>\n<pre><code>test                = [\n      + {\n          + tftest_priv1 = {\n              + arn                             = (known after apply)\n              + assign_ipv6_address_on_creation = false\n              + availability_zone               = &quot;eu-west-1a&quot;\n              + availability_zone_id            = (known after apply)\n              + cidr_block                      = &quot;10.1.2.0/24&quot;\n              + id                              = (known after apply)\n              + ipv6_cidr_block                 = (known after apply)\n              + ipv6_cidr_block_association_id  = (known after apply)\n              + map_public_ip_on_launch         = false\n              + owner_id                        = (known after apply)\n              + tags                            = {\n                  + &quot;Name&quot;    = &quot;tftest_priv1&quot;\n                  + &quot;cost&quot;    = &quot;shared&quot;\n                  + &quot;service&quot; = &quot;TEST&quot;\n                }\n              + timeouts                        = null\n              + vpc_id                          = (known after apply)\n            }\n          + tftest_priv2 = {\n              + arn                             = (known after apply)\n              + assign_ipv6_address_on_creation = false\n              + availability_zone               = &quot;eu-west-1b&quot;\n              + availability_zone_id            = (known after apply)\n              + cidr_block                      = &quot;10.1.3.0/24&quot;\n              + id                              = (known after apply)\n              + ipv6_cidr_block                 = (known after apply)\n              + ipv6_cidr_block_association_id  = (known after apply)\n              + map_public_ip_on_launch         = false\n              + owner_id                        = (known after apply)\n              + tags                            = {\n                  + &quot;Name&quot;    = &quot;tftest_priv2&quot;\n                  + &quot;cost&quot;    = &quot;shared&quot;\n                  + &quot;service&quot; = &quot;TEST&quot;\n                }\n              + timeouts                        = null\n              + vpc_id                          = (known after apply)\n            }\n          + tftest_pub1  = {\n              + arn                             = (known after apply)\n              + assign_ipv6_address_on_creation = false\n              + availability_zone               = &quot;eu-west-1a&quot;\n              + availability_zone_id            = (known after apply)\n              + cidr_block                      = &quot;10.1.0.0/24&quot;\n              + id                              = (known after apply)\n              + ipv6_cidr_block                 = (known after apply)\n              + ipv6_cidr_block_association_id  = (known after apply)\n              + map_public_ip_on_launch         = false\n              + owner_id                        = (known after apply)\n              + tags                            = {\n                  + &quot;Name&quot;    = &quot;tftest_pub1&quot;\n                  + &quot;cost&quot;    = &quot;shared&quot;\n                  + &quot;service&quot; = &quot;TEST&quot;\n                }\n              + timeouts                        = null\n              + vpc_id                          = (known after apply)\n            }\n          + tftest_pub2  = {\n              + arn                             = (known after apply)\n              + assign_ipv6_address_on_creation = false\n              + availability_zone               = &quot;eu-west-1b&quot;\n              + availability_zone_id            = (known after apply)\n              + cidr_block                      = &quot;10.1.1.0/24&quot;\n              + id                              = (known after apply)\n              + ipv6_cidr_block                 = (known after apply)\n              + ipv6_cidr_block_association_id  = (known after apply)\n              + map_public_ip_on_launch         = false\n              + owner_id                        = (known after apply)\n              + tags                            = {\n                  + &quot;Name&quot;    = &quot;tftest_pub2&quot;\n                  + &quot;cost&quot;    = &quot;shared&quot;\n                  + &quot;service&quot; = &quot;TEST&quot;\n                }\n              + timeouts                        = null\n              + vpc_id                          = (known after apply)\n            }\n        },\n    ]\n</code></pre>\n<p>Now I want to use the created Subnets for creating a db_subnet_group in the private subnets e.g.:</p>\n<pre><code>resource &quot;aws_db_subnet_group&quot; &quot;main&quot; {\n  name = &quot;${local.prefix}-main&quot;\n subnet_ids = [ \n    aws_subnet.test[&quot;tftest_priv1&quot;].id,\n    aws_subnet.test[&quot;tftest_priv2&quot;].id\n  ]\n}\n</code></pre>\n<p>But of course not with fixed values :) I thought of using dynamic blocks, but this does not work :/</p>\n<pre><code>resource &quot;aws_db_subnet_group&quot; &quot;main&quot; {\n  name = &quot;${local.prefix}-main&quot;\n  dynamic &quot;subnet_ids&quot; {\n      for_each = {\n            for s in local.vpc_subnet_var : s.subnet_az =&gt; s... if s.subnet_rttable == &quot;public&quot;\n        }\n  content {\n      subnet_ids = aws_subnet.test[s.subnet_name].id\n  }\n  }\n</code></pre>\n<p>I am able to get the needed ids like in my output example:</p>\n<pre><code>output &quot;test&quot; {\n    value = [for s in local.vpc_subnet_var : {\n        subnet_ids = aws_subnet.test[s.subnet_name].id\n    } if s.subnet_rttable == &quot;default&quot;\n    ]\n}\n------------------------ OUTPUT ------------------------\n  + test                = [\n      + {\n          + subnet_ids = (known after apply)\n        },\n      + {\n          + subnet_ids = (known after apply)\n        },\n    ]\n</code></pre>\n<p>But how do I only get the IDs to put it in a list like [&quot;priv_subnet_id1&quot;, &quot;priv_subnet_id2&quot;]... To use it e.g. in the aws_db_subnet_group resource? Probably create another local?</p>\n<p>I hope you understand the question :D I tried a lot of things now but didn't get it to work. If you need more input please tell me (it is my first question on stackoverflow)</p>\n<p>Thx,\nDaniel</p>\n", "OwnerUserId": "14180554", "LastEditorUserId": "14180554", "LastEditDate": "2020-08-28T07:13:12.657", "LastActivityDate": "2020-08-28T07:33:16.760", "Title": "Terraform creating a list out of a dict", "Tags": "<terraform><terraform-provider-aws>", "AnswerCount": "1", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "112516402", "PostId": "63628934", "Score": "0", "Text": "What are `var.vpcs`, `var.subnets`? Can you provide any reproducible example suitable for copy-and-paste?", "CreationDate": "2020-08-28T07:01:31.110", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112516502", "PostId": "63628934", "Score": "0", "Text": "I added the two variables and the creation of the subnets in the code above. the example is quite big, I am not sure if I can submit the complete project here.", "CreationDate": "2020-08-28T07:05:52.707", "UserId": "14180554", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112516624", "PostId": "63628934", "Score": "0", "Text": "There is no need for complete project. What is `local.my_azs`? You can just provide some dummy example values for `local.my_azs`, to show its structure.", "CreationDate": "2020-08-28T07:10:15.687", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112516711", "PostId": "63628934", "Score": "0", "Text": "Added every local :) now it should be a working project to create the subnets", "CreationDate": "2020-08-28T07:14:10.543", "UserId": "14180554", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112516790", "PostId": "63628934", "Score": "0", "Text": "Thanks. it works.  Its very helpful when attempting to find solution to your issue.", "CreationDate": "2020-08-28T07:17:13.847", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "229688121", "PostHistoryTypeId": "2", "PostId": "63628934", "RevisionGUID": "5fcb2045-66c3-4a15-8e59-13011abca69f", "CreationDate": "2020-08-28T06:57:58.820", "UserId": "14180554", "Text": "i following problem. I create a local variable like:\r\n\r\n```\r\nlocals {\r\n  vpc_subnet_var = flatten([\r\n    for v in keys(var.vpcs) : [\r\n      for s in keys(var.subnets) : {\r\n        network_name   = v\r\n        tags           = var.vpcs[v][\"tags\"]\r\n        subnet_name    = format(\"%v_%s\", v, s)\r\n        subnet_cidr    = cidrsubnet(var.vpcs[v][\"cidr\"], 8, var.subnets[s][\"subnet\"])\r\n        subnet_az      = element(local.my_azs, var.subnets[s][\"subnet\"] % 2)\r\n        subnet_rttable = var.subnets[s][\"rttable\"]\r\n      }\r\n    ]\r\n  ])\r\n...\r\n}\r\n```\r\n\r\nAn example test output would be:\r\n```\r\ntest                = [\r\n      + {\r\n          + tftest_priv1 = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1a\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.2.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_priv1\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n          + tftest_priv2 = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1b\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.3.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_priv2\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n          + tftest_pub1  = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1a\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.0.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_pub1\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n          + tftest_pub2  = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1b\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.1.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_pub2\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n        },\r\n    ]\r\n```\r\n\r\nNow I want to use the created Subnets for creating a db_subnet_group in the private subnets e.g.:\r\n```\r\nresource \"aws_db_subnet_group\" \"main\" {\r\n  name = \"${local.prefix}-main\"\r\n subnet_ids = [ \r\n    aws_subnet.test[\"tftest_priv1\"].id,\r\n    aws_subnet.test[\"tftest_priv2\"].id\r\n  ]\r\n}\r\n```\r\n\r\nBut of course not with fixed values :) I thought of using dynamic blocks, but this does not work :/\r\n```\r\nresource \"aws_db_subnet_group\" \"main\" {\r\n  name = \"${local.prefix}-main\"\r\n  dynamic \"subnet_ids\" {\r\n      for_each = {\r\n            for s in local.vpc_subnet_var : s.subnet_az => s... if s.subnet_rttable == \"public\"\r\n        }\r\n  content {\r\n      subnet_ids = aws_subnet.test[s.subnet_name].id\r\n  }\r\n  }\r\n```\r\n\r\nI am able to get the needed ids like in my output example: \r\n```\r\noutput \"test\" {\r\n    value = [for s in local.vpc_subnet_var : {\r\n        subnet_ids = aws_subnet.test[s.subnet_name].id\r\n    } if s.subnet_rttable == \"default\"\r\n    ]\r\n}\r\n------------------------ OUTPUT ------------------------\r\n  + test                = [\r\n      + {\r\n          + subnet_ids = (known after apply)\r\n        },\r\n      + {\r\n          + subnet_ids = (known after apply)\r\n        },\r\n    ]\r\n```\r\nBut how do I only get the IDs to put it in a list like [\"priv_subnet_id1\", \"priv_subnet_id2\"]... To use it e.g. in the aws_db_subnet_group resource? Probably create another local?\r\n\r\nI hope you understand the question :D I tried a lot of things now but didn't get it to work. If you need more input please tell me (it is my first question on stackoverflow)\r\n\r\nThx,\r\nDaniel", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "An example test output would be: ``` test = [ + { + tftest_priv1 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.2.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_priv1\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } + tftest_priv2 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.3.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_priv2\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } + tftest_pub1 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.0.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_pub1\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } + tftest_pub2 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.1.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_pub2\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } }, ] ``` Now I want to use the created Subnets for creating a db_subnet_group in the private subnets e.g.: ``` resource \"aws_db_subnet_group\" \"main\" { name = \"${local.prefix}-main\" subnet_ids = [ aws_subnet.test[\"tftest_priv1\"].id, aws_subnet.test[\"tftest_priv2\"].id ] } ``` But of course not with fixed values :) I thought of using dynamic blocks, but this does not work :/ ``` resource \"aws_db_subnet_group\" \"main\" { name = \"${local.prefix}-main\" dynamic \"subnet_ids\" { for_each = { for s in local.vpc_subnet_var : s.subnet_az => s... if s.subnet_rttable == \"public\" } content { subnet_ids = aws_subnet.test[s.subnet_name].id } } ``` I am able to get the needed ids like in my output example: ``` output \"test\" { value = [for s in local.vpc_subnet_var : { subnet_ids = aws_subnet.test[s.subnet_name].id } if s.subnet_rttable == \"default\" ] } ------------------------ OUTPUT ------------------------ + test = [ + { + subnet_ids = (known after apply) }, + { + subnet_ids = (known after apply) }, ] ``` But how do I only get the IDs to put it in a list like [\"priv_subnet_id1\", \"priv_subnet_id2\"]..", "keywords": ["cost", "test"]}]}, {"Id": "229688122", "PostHistoryTypeId": "1", "PostId": "63628934", "RevisionGUID": "5fcb2045-66c3-4a15-8e59-13011abca69f", "CreationDate": "2020-08-28T06:57:58.820", "UserId": "14180554", "Text": "Terraform creating a list out of a dict", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "229688123", "PostHistoryTypeId": "3", "PostId": "63628934", "RevisionGUID": "5fcb2045-66c3-4a15-8e59-13011abca69f", "CreationDate": "2020-08-28T06:57:58.820", "UserId": "14180554", "Text": "<terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "229688387", "PostHistoryTypeId": "5", "PostId": "63628934", "RevisionGUID": "dbae237f-e2d1-4b67-b1cc-5bd28f4935d4", "CreationDate": "2020-08-28T07:03:16.900", "UserId": "14180554", "Comment": "added 553 characters in body", "Text": "I got the following problem. I create a local variable like:\r\n\r\n```\r\nvariable vpcs {\r\n  type = map\r\n  default = {\r\n    \"tftest\" = {\r\n      \"cidr\" = \"10.1.0.0/16\",\r\n      \"tags\" = {\r\n        \"cost\"    = \"shared\",\r\n        \"service\" = \"TEST\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ndata \"aws_availability_zones\" \"azs\" {\r\n  state = \"available\"\r\n}\r\n\r\nvariable subnets {\r\n  type = map\r\n  default = {\r\n    \"pub1\"  = { \"subnet\" = 0, \"rttable\" = \"public\" },\r\n    \"pub2\"  = { \"subnet\" = 1, \"rttable\" = \"public\" },\r\n    \"priv1\" = { \"subnet\" = 2, \"rttable\" = \"default\" },\r\n    \"priv2\" = { \"subnet\" = 3, \"rttable\" = \"default\" }\r\n  }\r\n}\r\n\r\nlocals {\r\n  vpc_subnet_var = flatten([\r\n    for v in keys(var.vpcs) : [\r\n      for s in keys(var.subnets) : {\r\n        network_name   = v\r\n        tags           = var.vpcs[v][\"tags\"]\r\n        subnet_name    = format(\"%v_%s\", v, s)\r\n        subnet_cidr    = cidrsubnet(var.vpcs[v][\"cidr\"], 8, var.subnets[s][\"subnet\"])\r\n        subnet_az      = element(local.my_azs, var.subnets[s][\"subnet\"] % 2)\r\n        subnet_rttable = var.subnets[s][\"rttable\"]\r\n      }\r\n    ]\r\n  ])\r\n...\r\n}\r\n\r\nresource \"aws_vpc\" \"test\" {\r\n  for_each   = var.vpcs\r\n  cidr_block = each.value[\"cidr\"]\r\n  tags = merge(each.value[\"tags\"],\r\n    {\r\n      Name = each.key\r\n  })\r\n}\r\n\r\nresource \"aws_subnet\" \"test\" {\r\n  for_each = {\r\n    for s in local.vpc_subnet_var : s.subnet_name => s\r\n  }\r\n  vpc_id            = aws_vpc.test[each.value.network_name].id\r\n  availability_zone = each.value.subnet_az\r\n  cidr_block        = each.value.subnet_cidr\r\n  tags = merge(each.value.tags,\r\n    {\r\n      Name = each.value.subnet_name\r\n  })\r\n}\r\n```\r\n\r\nAn example test output would be:\r\n```\r\ntest                = [\r\n      + {\r\n          + tftest_priv1 = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1a\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.2.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_priv1\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n          + tftest_priv2 = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1b\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.3.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_priv2\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n          + tftest_pub1  = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1a\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.0.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_pub1\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n          + tftest_pub2  = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1b\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.1.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_pub2\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n        },\r\n    ]\r\n```\r\n\r\nNow I want to use the created Subnets for creating a db_subnet_group in the private subnets e.g.:\r\n```\r\nresource \"aws_db_subnet_group\" \"main\" {\r\n  name = \"${local.prefix}-main\"\r\n subnet_ids = [ \r\n    aws_subnet.test[\"tftest_priv1\"].id,\r\n    aws_subnet.test[\"tftest_priv2\"].id\r\n  ]\r\n}\r\n```\r\n\r\nBut of course not with fixed values :) I thought of using dynamic blocks, but this does not work :/\r\n```\r\nresource \"aws_db_subnet_group\" \"main\" {\r\n  name = \"${local.prefix}-main\"\r\n  dynamic \"subnet_ids\" {\r\n      for_each = {\r\n            for s in local.vpc_subnet_var : s.subnet_az => s... if s.subnet_rttable == \"public\"\r\n        }\r\n  content {\r\n      subnet_ids = aws_subnet.test[s.subnet_name].id\r\n  }\r\n  }\r\n```\r\n\r\nI am able to get the needed ids like in my output example: \r\n```\r\noutput \"test\" {\r\n    value = [for s in local.vpc_subnet_var : {\r\n        subnet_ids = aws_subnet.test[s.subnet_name].id\r\n    } if s.subnet_rttable == \"default\"\r\n    ]\r\n}\r\n------------------------ OUTPUT ------------------------\r\n  + test                = [\r\n      + {\r\n          + subnet_ids = (known after apply)\r\n        },\r\n      + {\r\n          + subnet_ids = (known after apply)\r\n        },\r\n    ]\r\n```\r\nBut how do I only get the IDs to put it in a list like [\"priv_subnet_id1\", \"priv_subnet_id2\"]... To use it e.g. in the aws_db_subnet_group resource? Probably create another local?\r\n\r\nI hope you understand the question :D I tried a lot of things now but didn't get it to work. If you need more input please tell me (it is my first question on stackoverflow)\r\n\r\nThx,\r\nDaniel", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I create a local variable like: ``` variable vpcs { type = map default = { \"tftest\" = { \"cidr\" = \"10.1.0.0/16\", \"tags\" = { \"cost\" = \"shared\", \"service\" = \"TEST\" } } } } data \"aws_availability_zones\" \"azs\" { state = \"available\" } variable subnets { type = map default = { \"pub1\" = { \"subnet\" = 0, \"rttable\" = \"public\" }, \"pub2\" = { \"subnet\" = 1, \"rttable\" = \"public\" }, \"priv1\" = { \"subnet\" = 2, \"rttable\" = \"default\" }, \"priv2\" = { \"subnet\" = 3, \"rttable\" = \"default\" } } } locals { vpc_subnet_var = flatten([ for v in keys(var.vpcs) : [ for s in keys(var.subnets) : { network_name = v tags = var.vpcs[v][\"tags\"] subnet_name = format(\"%v_%s\", v, s) subnet_cidr = cidrsubnet(var.vpcs[v][\"cidr\"], 8, var.subnets[s][\"subnet\"]) subnet_az = element(local.my_azs, var.subnets[s][\"subnet\"] % 2) subnet_rttable = var.subnets[s][\"rttable\"] } ] ]) ... } resource \"aws_vpc\" \"test\" { for_each = var.vpcs cidr_block = each.value[\"cidr\"] tags = merge(each.value[\"tags\"], { Name = each.key }) } resource \"aws_subnet\" \"test\" { for_each = { for s in local.vpc_subnet_var : s.subnet_name => s } vpc_id = aws_vpc.test[each.value.network_name].id availability_zone = each.value.subnet_az cidr_block = each.value.subnet_cidr tags = merge(each.value.tags, { Name = each.value.subnet_name }) } ``` ", "keywords": ["cost", "test"]}, {"source": "Text", "text": "An example test output would be: ``` test = [ + { + tftest_priv1 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.2.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_priv1\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } + tftest_priv2 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.3.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_priv2\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } + tftest_pub1 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.0.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_pub1\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } + tftest_pub2 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.1.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_pub2\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } }, ] ``` Now I want to use the created Subnets for creating a db_subnet_group in the private subnets e.g.: ``` resource \"aws_db_subnet_group\" \"main\" { name = \"${local.prefix}-main\" subnet_ids = [ aws_subnet.test[\"tftest_priv1\"].id, aws_subnet.test[\"tftest_priv2\"].id ] } ``` But of course not with fixed values :) I thought of using dynamic blocks, but this does not work :/ ``` resource \"aws_db_subnet_group\" \"main\" { name = \"${local.prefix}-main\" dynamic \"subnet_ids\" { for_each = { for s in local.vpc_subnet_var : s.subnet_az => s... if s.subnet_rttable == \"public\" } content { subnet_ids = aws_subnet.test[s.subnet_name].id } } ``` I am able to get the needed ids like in my output example: ``` output \"test\" { value = [for s in local.vpc_subnet_var : { subnet_ids = aws_subnet.test[s.subnet_name].id } if s.subnet_rttable == \"default\" ] } ------------------------ OUTPUT ------------------------ + test = [ + { + subnet_ids = (known after apply) }, + { + subnet_ids = (known after apply) }, ] ``` But how do I only get the IDs to put it in a list like [\"priv_subnet_id1\", \"priv_subnet_id2\"]..", "keywords": ["cost", "test"]}]}, {"Id": "229688908", "PostHistoryTypeId": "5", "PostId": "63628934", "RevisionGUID": "abb6e5ac-fc1a-43e9-816d-c606c7398f80", "CreationDate": "2020-08-28T07:13:12.657", "UserId": "14180554", "Comment": "added 237 characters in body", "Text": "I got the following problem. I create a local variable like:\r\n\r\n```\r\nvariable vpcs {\r\n  type = map\r\n  default = {\r\n    \"tftest\" = {\r\n      \"cidr\" = \"10.1.0.0/16\",\r\n      \"tags\" = {\r\n        \"cost\"    = \"shared\",\r\n        \"service\" = \"TEST\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ndata \"aws_availability_zones\" \"azs\" {\r\n  state = \"available\"\r\n}\r\n\r\nvariable subnets {\r\n  type = map\r\n  default = {\r\n    \"pub1\"  = { \"subnet\" = 0, \"rttable\" = \"public\" },\r\n    \"pub2\"  = { \"subnet\" = 1, \"rttable\" = \"public\" },\r\n    \"priv1\" = { \"subnet\" = 2, \"rttable\" = \"default\" },\r\n    \"priv2\" = { \"subnet\" = 3, \"rttable\" = \"default\" }\r\n  }\r\n}\r\n\r\nlocals {\r\n  vpc_subnet_var = flatten([\r\n    for v in keys(var.vpcs) : [\r\n      for s in keys(var.subnets) : {\r\n        network_name   = v\r\n        tags           = var.vpcs[v][\"tags\"]\r\n        subnet_name    = format(\"%v_%s\", v, s)\r\n        subnet_cidr    = cidrsubnet(var.vpcs[v][\"cidr\"], 8, var.subnets[s][\"subnet\"])\r\n        subnet_az      = element(local.my_azs, var.subnets[s][\"subnet\"] % 2)\r\n        subnet_rttable = var.subnets[s][\"rttable\"]\r\n      }\r\n    ]\r\n  ])\r\n  prefix = \"${var.prefix}-${terraform.workspace}-tf\"\r\n  common_tags = {\r\n    Environment = terraform.workspace\r\n    Project     = var.project\r\n    ManagedBy   = \"Terraform\"\r\n  }\r\n  my_azs = slice(data.aws_availability_zones.azs.names, 0, 2)\r\n}\r\n\r\nresource \"aws_vpc\" \"test\" {\r\n  for_each   = var.vpcs\r\n  cidr_block = each.value[\"cidr\"]\r\n  tags = merge(each.value[\"tags\"],\r\n    {\r\n      Name = each.key\r\n  })\r\n}\r\n\r\nresource \"aws_subnet\" \"test\" {\r\n  for_each = {\r\n    for s in local.vpc_subnet_var : s.subnet_name => s\r\n  }\r\n  vpc_id            = aws_vpc.test[each.value.network_name].id\r\n  availability_zone = each.value.subnet_az\r\n  cidr_block        = each.value.subnet_cidr\r\n  tags = merge(each.value.tags,\r\n    {\r\n      Name = each.value.subnet_name\r\n  })\r\n}\r\n```\r\n\r\nAn example test output would be:\r\n```\r\ntest                = [\r\n      + {\r\n          + tftest_priv1 = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1a\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.2.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_priv1\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n          + tftest_priv2 = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1b\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.3.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_priv2\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n          + tftest_pub1  = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1a\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.0.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_pub1\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n          + tftest_pub2  = {\r\n              + arn                             = (known after apply)\r\n              + assign_ipv6_address_on_creation = false\r\n              + availability_zone               = \"eu-west-1b\"\r\n              + availability_zone_id            = (known after apply)\r\n              + cidr_block                      = \"10.1.1.0/24\"\r\n              + id                              = (known after apply)\r\n              + ipv6_cidr_block                 = (known after apply)\r\n              + ipv6_cidr_block_association_id  = (known after apply)\r\n              + map_public_ip_on_launch         = false\r\n              + owner_id                        = (known after apply)\r\n              + tags                            = {\r\n                  + \"Name\"    = \"tftest_pub2\"\r\n                  + \"cost\"    = \"shared\"\r\n                  + \"service\" = \"TEST\"\r\n                }\r\n              + timeouts                        = null\r\n              + vpc_id                          = (known after apply)\r\n            }\r\n        },\r\n    ]\r\n```\r\n\r\nNow I want to use the created Subnets for creating a db_subnet_group in the private subnets e.g.:\r\n```\r\nresource \"aws_db_subnet_group\" \"main\" {\r\n  name = \"${local.prefix}-main\"\r\n subnet_ids = [ \r\n    aws_subnet.test[\"tftest_priv1\"].id,\r\n    aws_subnet.test[\"tftest_priv2\"].id\r\n  ]\r\n}\r\n```\r\n\r\nBut of course not with fixed values :) I thought of using dynamic blocks, but this does not work :/\r\n```\r\nresource \"aws_db_subnet_group\" \"main\" {\r\n  name = \"${local.prefix}-main\"\r\n  dynamic \"subnet_ids\" {\r\n      for_each = {\r\n            for s in local.vpc_subnet_var : s.subnet_az => s... if s.subnet_rttable == \"public\"\r\n        }\r\n  content {\r\n      subnet_ids = aws_subnet.test[s.subnet_name].id\r\n  }\r\n  }\r\n```\r\n\r\nI am able to get the needed ids like in my output example: \r\n```\r\noutput \"test\" {\r\n    value = [for s in local.vpc_subnet_var : {\r\n        subnet_ids = aws_subnet.test[s.subnet_name].id\r\n    } if s.subnet_rttable == \"default\"\r\n    ]\r\n}\r\n------------------------ OUTPUT ------------------------\r\n  + test                = [\r\n      + {\r\n          + subnet_ids = (known after apply)\r\n        },\r\n      + {\r\n          + subnet_ids = (known after apply)\r\n        },\r\n    ]\r\n```\r\nBut how do I only get the IDs to put it in a list like [\"priv_subnet_id1\", \"priv_subnet_id2\"]... To use it e.g. in the aws_db_subnet_group resource? Probably create another local?\r\n\r\nI hope you understand the question :D I tried a lot of things now but didn't get it to work. If you need more input please tell me (it is my first question on stackoverflow)\r\n\r\nThx,\r\nDaniel", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I create a local variable like: ``` variable vpcs { type = map default = { \"tftest\" = { \"cidr\" = \"10.1.0.0/16\", \"tags\" = { \"cost\" = \"shared\", \"service\" = \"TEST\" } } } } data \"aws_availability_zones\" \"azs\" { state = \"available\" } variable subnets { type = map default = { \"pub1\" = { \"subnet\" = 0, \"rttable\" = \"public\" }, \"pub2\" = { \"subnet\" = 1, \"rttable\" = \"public\" }, \"priv1\" = { \"subnet\" = 2, \"rttable\" = \"default\" }, \"priv2\" = { \"subnet\" = 3, \"rttable\" = \"default\" } } } locals { vpc_subnet_var = flatten([ for v in keys(var.vpcs) : [ for s in keys(var.subnets) : { network_name = v tags = var.vpcs[v][\"tags\"] subnet_name = format(\"%v_%s\", v, s) subnet_cidr = cidrsubnet(var.vpcs[v][\"cidr\"], 8, var.subnets[s][\"subnet\"]) subnet_az = element(local.my_azs, var.subnets[s][\"subnet\"] % 2) subnet_rttable = var.subnets[s][\"rttable\"] } ] ]) prefix = \"${var.prefix}-${terraform.workspace}-tf\" common_tags = { Environment = terraform.workspace Project = var.project ManagedBy = \"Terraform\" } my_azs = slice(data.aws_availability_zones.azs.names, 0, 2) } resource \"aws_vpc\" \"test\" { for_each = var.vpcs cidr_block = each.value[\"cidr\"] tags = merge(each.value[\"tags\"], { Name = each.key }) } resource \"aws_subnet\" \"test\" { for_each = { for s in local.vpc_subnet_var : s.subnet_name => s } vpc_id = aws_vpc.test[each.value.network_name].id availability_zone = each.value.subnet_az cidr_block = each.value.subnet_cidr tags = merge(each.value.tags, { Name = each.value.subnet_name }) } ``` ", "keywords": ["cost", "test"]}, {"source": "Text", "text": "An example test output would be: ``` test = [ + { + tftest_priv1 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.2.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_priv1\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } + tftest_priv2 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.3.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_priv2\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } + tftest_pub1 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.0.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_pub1\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } + tftest_pub2 = { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"eu-west-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.1.1.0/24\" + id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + map_public_ip_on_launch = false + owner_id = (known after apply) + tags = { + \"Name\" = \"tftest_pub2\" + \"cost\" = \"shared\" + \"service\" = \"TEST\" } + timeouts = null + vpc_id = (known after apply) } }, ] ``` Now I want to use the created Subnets for creating a db_subnet_group in the private subnets e.g.: ``` resource \"aws_db_subnet_group\" \"main\" { name = \"${local.prefix}-main\" subnet_ids = [ aws_subnet.test[\"tftest_priv1\"].id, aws_subnet.test[\"tftest_priv2\"].id ] } ``` But of course not with fixed values :) I thought of using dynamic blocks, but this does not work :/ ``` resource \"aws_db_subnet_group\" \"main\" { name = \"${local.prefix}-main\" dynamic \"subnet_ids\" { for_each = { for s in local.vpc_subnet_var : s.subnet_az => s... if s.subnet_rttable == \"public\" } content { subnet_ids = aws_subnet.test[s.subnet_name].id } } ``` I am able to get the needed ids like in my output example: ``` output \"test\" { value = [for s in local.vpc_subnet_var : { subnet_ids = aws_subnet.test[s.subnet_name].id } if s.subnet_rttable == \"default\" ] } ------------------------ OUTPUT ------------------------ + test = [ + { + subnet_ids = (known after apply) }, + { + subnet_ids = (known after apply) }, ] ``` But how do I only get the IDs to put it in a list like [\"priv_subnet_id1\", \"priv_subnet_id2\"]..", "keywords": ["cost", "test"]}]}], "answers": [{"Id": "63629385", "PostTypeId": "2", "ParentId": "63628934", "CreationDate": "2020-08-28T07:33:16.760", "Score": "0", "Body": "<p>Based on the data available, I think (assuming I did not misunderstood the issue) you are very close.</p>\n<p>I don't have <code>aws_subnet.test</code> thus I can't fully reproduce nor verify the outcome, but I think the following should result in a list of subnet ids. I setup a <code>private_subnets_list</code> local variable:</p>\n<pre><code>locals {\n\n  private_subnets_list = [\n      for s in local.vpc_subnet_var:\n        aws_subnet.test[s.subnet_name].id if s.subnet_rttable == &quot;default&quot;]\n\n}\n</code></pre>\n<p>The above assumes that <code>aws_subnet.test[s.subnet_name].id</code> is correct and that <code>aws_subnet.test</code> are indexed by <code>s.subnet_name</code>.</p>\n<p>Then to create the subnet group, the following could be tried:</p>\n<pre><code>resource &quot;aws_db_subnet_group&quot; &quot;main&quot; {\n  name = &quot;${local.prefix}-main&quot;\n  subnet_ids = local.private_subnets_list\n}\n</code></pre>\n", "OwnerUserId": "248823", "LastActivityDate": "2020-08-28T07:33:16.760", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "112517312", "PostId": "63629385", "Score": "1", "Text": "Thx, I just did nearly the same :D and it seems to work! private_sub_ids = flatten([\n    for s in local.vpc_subnet_var : {\n        subnet_ids = aws_subnet.test[s.subnet_name].id\n    } if s.subnet_rttable == \"default\"\n  ])               and than resource \"aws_db_subnet_group\" \"main\" {\n  name = \"${local.prefix}-main\"\n  subnet_ids = [for i in local.private_sub_ids: i[\"subnet_ids\"]]\n}", "CreationDate": "2020-08-28T07:37:38.533", "UserId": "14180554", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Thx, I just did nearly the same :D and it seems to work! private_sub_ids = flatten([ for s in local.vpc_subnet_var : { subnet_ids = aws_subnet.test[s.subnet_name].id } if s.subnet_rttable == \"default\" ]) and than resource \"aws_db_subnet_group\" \"main\" { name = \"${local.prefix}-main\" subnet_ids = [for i in local.private_sub_ids: i[\"subnet_ids\"]] }", "keywords": ["test"]}]}, {"Id": "112517354", "PostId": "63629385", "Score": "1", "Text": "thx so much for the fast help, I think it is right and it works! perfect", "CreationDate": "2020-08-28T07:39:19.147", "UserId": "14180554", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "229689969", "PostHistoryTypeId": "2", "PostId": "63629385", "RevisionGUID": "0b49cb7e-fbc4-44a4-a661-64067a342bd7", "CreationDate": "2020-08-28T07:33:16.760", "UserId": "248823", "Text": "Based on the data available, I think (assuming I did not misunderstood the issue) you are very close.\r\n\r\nI don't have `aws_subnet.test` thus I can't fully reproduce nor verify the outcome, but I think the following should result in a list of subnet ids. I setup a `private_subnets_list` local variable:\r\n\r\n```\r\nlocals {\r\n\r\n  private_subnets_list = [\r\n      for s in local.vpc_subnet_var:\r\n        aws_subnet.test[s.subnet_name].id if s.subnet_rttable == \"default\"]\r\n\r\n}\r\n```\r\n\r\nThe above assumes that `aws_subnet.test[s.subnet_name].id` is correct and that `aws_subnet.test` are indexed by `s.subnet_name`.\r\n\r\nThen to create the subnet group, the following could be tried:\r\n\r\n```\r\nresource \"aws_db_subnet_group\" \"main\" {\r\n  name = \"${local.prefix}-main\"\r\n  subnet_ids = local.private_subnets_list\r\n}\r\n```\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I don't have `aws_subnet.test` thus I can't fully reproduce nor verify the outcome, but I think the following should result in a list of subnet ids. ", "keywords": ["test"]}, {"source": "Text", "text": "I setup a `private_subnets_list` local variable: ``` locals { private_subnets_list = [ for s in local.vpc_subnet_var: aws_subnet.test[s.subnet_name].id if s.subnet_rttable == \"default\"] } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "The above assumes that `aws_subnet.test[s.subnet_name].id` is correct and that `aws_subnet.test` are indexed by `s.subnet_name`", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "I don't have aws_subnet.test thus I can't fully reproduce nor verify the outcome, but I think the following should result in a list of subnet ids. ", "keywords": ["test"]}, {"source": "Body", "text": "I setup a private_subnets_list local variable: The above assumes that aws_subnet.test[s.subnet_name].id is correct and that aws_subnet.test are indexed by s.subnet_name. ", "keywords": ["test"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I create a local variable like: An example test output would be: Now I want to use the created Subnets for creating a db_subnet_group in the private subnets e.g.: But of course not with fixed values :) ", "keywords": ["test"]}]}