{"Id": "55265203", "PostTypeId": "1", "AcceptedAnswerId": "55271805", "CreationDate": "2019-03-20T16:02:15.630", "Score": "49", "ViewCount": "46990", "Body": "<p>I have a Terraform 0.11 project with 30-40 different resources. I would like to delete all of them except a few - and those few are logically related to each other.</p>\n\n<p>I was looking for something close to <code>terraform destroy --except=resource-id</code> but that of course doesn't exist.</p>\n\n<p>Is there a way to achieve that without too much scripting (Terraform admins have various OSs)? Would using modules make that process easier perhaps?</p>\n", "OwnerUserId": "2194007", "LastActivityDate": "2023-08-09T10:11:15.990", "Title": "Terraform - Delete all resources except one", "Tags": "<terraform><terraform-provider-aws><infrastructure>", "AnswerCount": "7", "CommentCount": "5", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "97264606", "PostId": "55265203", "Score": "2", "Text": "The answer is to not structure your code base this way. Things in the same directory should all be creatable or destroyable at the same time. Part applying changes is an escape hatch, not something to rely on.", "CreationDate": "2019-03-20T17:17:53.263", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Part applying changes is an escape hatch, not something to rely on.", "keywords": ["change"]}]}, {"Id": "97264682", "PostId": "55265203", "Score": "0", "Text": "@ydaetskcoR This makes sense. I would accept this answer, if you can write it up", "CreationDate": "2019-03-20T17:20:25.550", "UserId": "2194007", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "97265391", "PostId": "55265203", "Score": "1", "Text": "It feels like it might be a duplicate, let me have a dig around, otherwise I'll write it up as an answer here.", "CreationDate": "2019-03-20T17:42:42.613", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "101578354", "PostId": "55265203", "Score": "1", "Text": "what about eips? say for example you had these whitelisted and don't want to destroy them because you need a change control elsewhere, you set Terraform to create and mark wit prevent_destroy, all prevent_destroy does here is to fail your terraform destroy command. You could create the eip outside terraform and just manage the association, but both feel like this could be handled better", "CreationDate": "2019-08-19T13:55:51.757", "UserId": "134848", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "what about eips? say for example you had these whitelisted and don't want to destroy them because you need a change control elsewhere, you set Terraform to create and mark wit prevent_destroy, all prevent_destroy does here is to fail your terraform destroy command. ", "keywords": ["change"]}]}, {"Id": "133033724", "PostId": "55265203", "Score": "0", "Text": "None of these answers is satisfying. I have a set of related infrastructure AND I want a couple items to remain after destroy AND they should remain in TF's state. Use cases: some S3 buckets (I recently \"lost\" an S3 bucket name for a transient test environment due to namesquatting); and ACM certs which require manual validation with non-AWS DNS provider. For environments that come and go (i.e. test environments taken down overnight to reduce cost). I don't think this is unreasonable.", "CreationDate": "2023-02-09T07:20:48.990", "UserId": "3558355", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Use cases: some S3 buckets (I recently \"lost\" an S3 bucket name for a transient test environment due to namesquatting); and ACM certs which require manual validation with non-AWS DNS provider. ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "For environments that come and go (i.e. test environments taken down overnight to reduce cost). ", "keywords": ["cost", "test"]}]}], "history": [{"Id": "194047539", "PostHistoryTypeId": "2", "PostId": "55265203", "RevisionGUID": "6ba4d96c-3bcb-44be-a121-71fb261e488a", "CreationDate": "2019-03-20T16:02:15.630", "UserId": "2194007", "Text": "I have a Terraform 0.11 project with 30-40 different resources. I would like to delete all of them except a few - and those few are logically related to each other.\r\n\r\nI was looking for something close to `terraform destroy --except=resource-id` but that of course doesn't exist.\r\n\r\nIs there a way to achieve that without too much scripting (Terraform admins have various OSs)? Would using modules make that process easier perhaps?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "194047540", "PostHistoryTypeId": "1", "PostId": "55265203", "RevisionGUID": "6ba4d96c-3bcb-44be-a121-71fb261e488a", "CreationDate": "2019-03-20T16:02:15.630", "UserId": "2194007", "Text": "Terraform - Delete all resources except one", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "194047541", "PostHistoryTypeId": "3", "PostId": "55265203", "RevisionGUID": "6ba4d96c-3bcb-44be-a121-71fb261e488a", "CreationDate": "2019-03-20T16:02:15.630", "UserId": "2194007", "Text": "<terraform><terraform-provider-aws><infrastructure>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "60657686", "PostTypeId": "2", "ParentId": "55265203", "CreationDate": "2020-03-12T15:56:04.633", "Score": "12", "Body": "<p>Targetting each resource (while skipping over the data resources) except the one you want is probably the only way atm:</p>\n\n<pre><code>#! /bin/bash\n\nwhile read -r resource; do\n    terraform destroy -target=\"$resource\"\ndone &lt; &lt;(terraform state list | grep -vE \"^data\\.\" | grep -vE \"dont_remove|also_important\")\n</code></pre>\n", "OwnerUserId": "2416376", "LastActivityDate": "2020-03-12T15:56:04.633", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "133746776", "PostId": "60657686", "Score": "0", "Text": "If you're using a module the \"^data\\.\" pattern needs to be \"\\.data\\.\"", "CreationDate": "2023-03-23T11:19:18.140", "UserId": "916373", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "133747250", "PostId": "60657686", "Score": "0", "Text": "And (obviously, but I missed it!) its not use TF's dependency graph, so this probably won't work except in simple cases.", "CreationDate": "2023-03-23T11:52:11.140", "UserId": "916373", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "216812542", "PostHistoryTypeId": "2", "PostId": "60657686", "RevisionGUID": "111a58d8-850e-4208-bb31-6c50a134e4f7", "CreationDate": "2020-03-12T15:56:04.633", "UserId": "2416376", "Text": "Targetting each resource (while skipping over the data resources) except the one you want is probably the only way atm:\r\n\r\n    #! /bin/bash\r\n    \r\n    while read -r resource; do\r\n        terraform destroy -target=\"$resource\"\r\n    done < <(terraform state list | grep -vE \"^data\\.\" | grep -vE \"dont_remove|also_important\")", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "59511596", "PostTypeId": "2", "ParentId": "55265203", "CreationDate": "2019-12-28T14:05:38.510", "Score": "1", "Body": "<p>I have a bit of a different work around. The resources I do not want to delete with \"terraform destroy\" I create as \"null_resource\" using a provisioner with CLI. You can still use your variables in terraform as well.</p>\n\n<p>for example (Create a resource group, but it is persistent due to null_resource)</p>\n\n<pre><code>resource \"null_resource\" \"backend-config\" {\n        provisioner \"local-exec\" {\n        command     = &lt;&lt;EOT\n    az group create --location ${var.Location} --name ${var.Resource_group_name} --tags 'LineOfBusiness=${var.Lob}' 'Region=${var.Region}' 'Purpose=\"Terraform-Primary-Resource-Group-${var.Lob}'\n    EOT\n        interpreter = [\"Powershell\", \"-Command\"]\n      }\n    }\n</code></pre>\n\n<p>Now if you destroy the resources using terraform destroy.\nAny null_resource will remain intact.</p>\n", "OwnerUserId": "10553409", "LastEditorUserId": "10553409", "LastEditDate": "2019-12-28T14:12:22.833", "LastActivityDate": "2019-12-28T14:12:22.833", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "211977306", "PostHistoryTypeId": "2", "PostId": "59511596", "RevisionGUID": "e7c2e9cf-849a-4904-bf42-ec5294a6fa90", "CreationDate": "2019-12-28T14:05:38.510", "UserId": "10553409", "Text": "I have a bit of a different work around.\r\nThe resources I do not want to delete with \"terraform destroy\" I create as \"null_resource\" using a provisioner.\r\nYou can still use your variables in terraform as well.\r\n\r\nfor example (Create a resource group, but it is immutable due to null_resource)\r\n\r\n    resource \"null_resource\" \"backend-config\" {\r\n            provisioner \"local-exec\" {\r\n            command     = <<EOT\r\n        az group create --location ${var.Location} --name ${var.Resource_group_name} --tags 'LineOfBusiness=${var.Lob}' 'Region=${var.Region}' 'Purpose=\"Terraform-Primary-Resource-Group-${var.Lob}'\r\n        EOT\r\n            interpreter = [\"Powershell\", \"-Command\"]\r\n          }\r\n        }\r\n\r\nNow if you destroy the resources using terraform destroy.\r\nAny null_resource will remain intact.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "211977555", "PostHistoryTypeId": "5", "PostId": "59511596", "RevisionGUID": "12343129-2171-4f95-81ab-64f8da828977", "CreationDate": "2019-12-28T14:12:22.833", "UserId": "10553409", "Comment": "added 8 characters in body", "Text": "I have a bit of a different work around. The resources I do not want to delete with \"terraform destroy\" I create as \"null_resource\" using a provisioner with CLI. You can still use your variables in terraform as well.\r\n\r\nfor example (Create a resource group, but it is persistent due to null_resource)\r\n\r\n    resource \"null_resource\" \"backend-config\" {\r\n            provisioner \"local-exec\" {\r\n            command     = <<EOT\r\n        az group create --location ${var.Location} --name ${var.Resource_group_name} --tags 'LineOfBusiness=${var.Lob}' 'Region=${var.Region}' 'Purpose=\"Terraform-Primary-Resource-Group-${var.Lob}'\r\n        EOT\r\n            interpreter = [\"Powershell\", \"-Command\"]\r\n          }\r\n        }\r\n\r\nNow if you destroy the resources using terraform destroy.\r\nAny null_resource will remain intact.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "55271805", "PostTypeId": "2", "ParentId": "55265203", "CreationDate": "2019-03-20T23:50:31.013", "Score": "94", "Body": "<p>There is no <code>--except</code> feature in <code>terraform destroy</code> command currently. If you really want to do that, and you know what you are doing, here is the workaround.</p>\n<pre><code># list all resources\nterraform state list\n\n# remove that resource you don't want to destroy\n# you can add more to be excluded if required\nterraform state rm &lt;resource_to_be_deleted&gt; \n\n# destroy the whole stack except above excluded resource(s)\nterraform destroy \n</code></pre>\n<h3>So why do these commands work for your idea?</h3>\n<p><a href=\"https://www.terraform.io/docs/state/\" rel=\"noreferrer\">The state</a> (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.</p>\n<p><code>terraform state rm</code> cleans a record (resource) from the state file (*.tfstate) only. It doesn't destroy the real resource.</p>\n<p>Since you don't run <code>terraform apply</code> or <code>terraform refresh</code>, after <code>terraform state rm</code>, terraform doesn't know the excluded resource was created at all.</p>\n<p>When you run <code>terraform destroy</code>, it has no detail about that excluded resource\u2019s state and will not destroy it. It will destroy the rest.</p>\n<p>By the way, later you still have chance to import the resource back with <code>terraform import</code> command if you want.</p>\n", "OwnerUserId": "498256", "LastEditorUserId": "316805", "LastEditDate": "2022-03-30T11:36:21.790", "LastActivityDate": "2022-03-30T11:36:21.790", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "97282636", "PostId": "55271805", "Score": "7", "Text": "This now orphans the state of the resource that's not deleted so Terraform won't manage it any more which isn't really what the OP wanted. You _could_ import it again after deleting everything else but in general partial apply and destroy is a bad idea.", "CreationDate": "2019-03-21T08:24:15.110", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "97285638", "PostId": "55271805", "Score": "5", "Text": "This is a decent workaround for my situation. Not ideal, as ydaetskcor says, but good enough.", "CreationDate": "2019-03-21T10:02:05.410", "UserId": "2194007", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "125462286", "PostId": "55271805", "Score": "0", "Text": "its working fine", "CreationDate": "2022-02-03T12:20:23.357", "UserId": "3894130", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "134424603", "PostId": "55271805", "Score": "0", "Text": "what would the `import` be? `terraform import <resource_to_be_reimported>` ?", "CreationDate": "2023-05-11T11:51:48.707", "UserId": "16431106", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "134948110", "PostId": "55271805", "Score": "0", "Text": "Import command would be different to each resource, you need take reference from the terraform document.", "CreationDate": "2023-06-23T05:53:15.977", "UserId": "498256", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "194074186", "PostHistoryTypeId": "2", "PostId": "55271805", "RevisionGUID": "01bbe328-1dd1-4dfb-8397-ee4003033b63", "CreationDate": "2019-03-20T23:50:31.013", "UserId": "498256", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above resource(s)\r\n    terraform destroy \r\n\r\n### So why these commands work for your idea?\r\n\r\n`terraform state rm` removes an item (resource) from the state (*.tfstate). \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform will not know the waiting-deleted resource was created at all. So when you run `terraform destroy`, it doesn't have that resource state and will not touch and destroy. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "194079215", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "04981c8f-8f93-45fe-b89f-e8fb823561aa", "CreationDate": "2019-03-21T02:35:31.063", "UserId": "498256", "Comment": "deleted 7 characters in body", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above resource(s)\r\n    terraform destroy \r\n\r\n### So why these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` removes an item (resource) from the state (*.tfstate). \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no that resource state and will not destroy it. It will destroy the rest.\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "194086427", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "efdb96e0-5fe6-4fd3-8c1b-512d8ba37c82", "CreationDate": "2019-03-21T06:09:42.290", "UserId": "498256", "Comment": "added 3 characters in body", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above resource(s)\r\n    terraform destroy \r\n\r\n### So why do these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` removes an item (resource) from the state (*.tfstate). \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no that resource state and will not destroy it. It will destroy the rest.\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "200929590", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "882a05c9-ec58-492a-8cb0-d7df2f2c57e0", "CreationDate": "2019-07-04T20:49:00.477", "UserId": "498256", "Comment": "added 15 characters in body", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above resource(s)\r\n    terraform destroy \r\n\r\n### So why do these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` removes an item (resource) from the state (*.tfstate). \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no detail about that resource\u2019s state and will not destroy it. It will destroy the rest.\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "215908677", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "1bb3a974-9111-4b29-8eda-e91afc479a9e", "CreationDate": "2020-02-28T03:55:29.640", "UserId": "498256", "Comment": "added 46 characters in body", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above resource(s)\r\n    terraform destroy \r\n\r\n### So why do these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` cleans an item (resource) from the state file (*.tfstate) only. It doesn't remove the real resource. \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no detail about that resource\u2019s state and will not destroy it. It will destroy the rest.\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "218938289", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "bd23fb74-4086-4ad2-ae04-a96b5d3d9317", "CreationDate": "2020-04-11T03:15:24.203", "UserId": "498256", "Comment": "added 114 characters in body", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above resource(s)\r\n    terraform destroy \r\n\r\n### So why do these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` cleans an item (resource) from the state file (*.tfstate) only. It doesn't remove the real resource. \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no detail about that resource\u2019s state and will not destroy it. It will destroy the rest.\r\n\r\nBy the way, later you still have chance to input the resource back with `terraform import` command if you want. \r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "226923828", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "a02a0591-7f73-49d2-ad95-5089079f0730", "CreationDate": "2020-07-18T20:25:23.197", "UserId": "498256", "Comment": "added 1 character in body", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above resource(s)\r\n    terraform destroy \r\n\r\n### So why do these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` cleans an item (resource) from the state file (*.tfstate) only. It doesn't destroy the real resource. \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no detail about that resource\u2019s state and will not destroy it. It will destroy the rest.\r\n\r\nBy the way, later you still have chance to input the resource back with `terraform import` command if you want. \r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "235219665", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "3da7a665-8e62-47d4-8edf-921e96712b43", "CreationDate": "2020-11-19T07:14:44.013", "UserId": "498256", "Comment": "added 9 characters in body", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above excluded resource(s)\r\n    terraform destroy \r\n\r\n### So why do these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` cleans an record (resource) from the state file (*.tfstate) only. It doesn't destroy the real resource. \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no detail about that excluded resource\u2019s state and will not destroy it. It will destroy the rest.\r\n\r\nBy the way, later you still have chance to input the resource back with `terraform import` command if you want. \r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "238946242", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "93c09aab-bdd2-43c7-b169-c8e1a8528834", "CreationDate": "2021-01-17T22:05:48.217", "UserId": "498256", "Comment": "deleted 1 character in body", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above excluded resource(s)\r\n    terraform destroy \r\n\r\n### So why do these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` cleans a record (resource) from the state file (*.tfstate) only. It doesn't destroy the real resource. \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no detail about that excluded resource\u2019s state and will not destroy it. It will destroy the rest.\r\n\r\nBy the way, later you still have chance to input the resource back with `terraform import` command if you want. \r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "242443679", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "ccc6473e-ceef-4594-954a-63ca84146ee5", "CreationDate": "2021-03-11T07:59:48.087", "UserId": "498256", "Comment": "added 1 character in body", "Text": "There is no exist feature in `terraform destroy` command currently. If you really want to do that, and you know what you do, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above excluded resource(s)\r\n    terraform destroy \r\n\r\n### So why do these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` cleans a record (resource) from the state file (*.tfstate) only. It doesn't destroy the real resource. \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no detail about that excluded resource\u2019s state and will not destroy it. It will destroy the rest.\r\n\r\nBy the way, later you still have chance to import the resource back with `terraform import` command if you want. \r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no exist feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "267104900", "PostHistoryTypeId": "5", "PostId": "55271805", "RevisionGUID": "ecf4b962-4afa-4bf5-b008-d8c75daba3fa", "CreationDate": "2022-03-30T11:36:21.790", "UserId": "316805", "Comment": "Improve introduction paragraph", "Text": "There is no `--except` feature in `terraform destroy` command currently. If you really want to do that, and you know what you are doing, here is the workaround.\r\n\r\n    # list all resources\r\n    terraform state list\r\n\r\n    # remove that resource you don't want to destroy\r\n    # you can add more to be excluded if required\r\n    terraform state rm <resource_to_be_deleted> \r\n\r\n    # destroy the whole stack except above excluded resource(s)\r\n    terraform destroy \r\n\r\n### So why do these commands work for your idea?\r\n\r\n[The state][1] (*.tfstate) is used by Terraform to map real world resources to your configuration, keep track of metadata.\r\n\r\n`terraform state rm` cleans a record (resource) from the state file (*.tfstate) only. It doesn't destroy the real resource. \r\n\r\nSince you don't run `terraform apply` or `terraform refresh`, after `terraform state rm`, terraform doesn't know the excluded resource was created at all. \r\n\r\nWhen you run `terraform destroy`, it has no detail about that excluded resource\u2019s state and will not destroy it. It will destroy the rest.\r\n\r\nBy the way, later you still have chance to import the resource back with `terraform import` command if you want. \r\n\r\n  [1]: https://www.terraform.io/docs/state/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is no `--except` feature in `terraform destroy` command currently. ", "keywords": ["feature"]}]}, {"Id": "267104901", "PostHistoryTypeId": "24", "PostId": "55271805", "RevisionGUID": "ecf4b962-4afa-4bf5-b008-d8c75daba3fa", "CreationDate": "2022-03-30T11:36:21.790", "Comment": "Proposed by 316805 approved by 401059, 2920343 edit id of 5344039", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": [{"source": "Body", "text": "There is no --except feature in terraform destroy command currently. ", "keywords": ["feature"]}]}, {"Id": "74388126", "PostTypeId": "2", "ParentId": "55265203", "CreationDate": "2022-11-10T11:18:02.610", "Score": "1", "Body": "<p><a href=\"https://stackoverflow.com/a/55271805/3377926\">BMW's answer</a> is best if you just need to destroy things, <em>and not change the code</em>. That is, if you intend to bring those resources back up at some later time.</p>\n<p>If you just want to remove the resources, the proper solution is to remove the Terraform definitions you wish to destroy, and then do a normal <code>terraform apply</code>. Just as you would for <em>adding</em> a resource.</p>\n<p>(An old question, I know, but I was surprised to not see anyone mention alternative. The OP's use case seems to be covered by the other answers, so this answer is for others stumbling in here.)</p>\n", "OwnerUserId": "3377926", "LastActivityDate": "2022-11-10T11:18:02.610", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "281922069", "PostHistoryTypeId": "2", "PostId": "74388126", "RevisionGUID": "72b58895-0e81-461f-ad97-e85643737c2f", "CreationDate": "2022-11-10T11:18:02.610", "UserId": "3377926", "Text": "[BMW's answer][1] is best if you just need to destroy things, _and not change the code_. That is, if you intend to bring those resources back up at some later time.\r\n\r\nIf you just want to remove the resources, the proper solution is to remove the Terraform definitions you wish to destroy, and then do a normal `terraform apply`. Just as you would for _adding_ a resource.\r\n\r\n\r\n(An old question, I know, but I was surprised to not see anyone mention alternative. The OP's use case seems to be covered by the other answers, so this answer is for others stumbling in here.)\r\n\r\n  [1]: https://stackoverflow.com/a/55271805/3377926", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "[BMW's answer][1] is best if you just need to destroy things, _and not change the code_. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "BMW's answer is best if you just need to destroy things, and not change the code. ", "keywords": ["change"]}]}, {"Id": "68879525", "PostTypeId": "2", "ParentId": "55265203", "CreationDate": "2021-08-22T08:09:55.003", "Score": "-2", "Body": "<p>terraform destroy -target RESOURCE_TYPE.NAME -target RESOURCE_TYPE2.NAME</p>\n", "OwnerUserId": "393896", "LastActivityDate": "2021-08-22T08:09:55.003", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "124680147", "PostId": "68879525", "Score": "0", "Text": "can you comment whats wrong on my answer?", "CreationDate": "2021-12-30T14:02:05.893", "UserId": "393896", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127617418", "PostId": "68879525", "Score": "6", "Text": "question is asking how to destroy all resources but one, you are showing (without explaining) how to destroy single resources. If someone follows blindly your answer he/she would destroy just the resource he/she wants to keep", "CreationDate": "2022-05-13T14:50:35.663", "UserId": "5471773", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "252408554", "PostHistoryTypeId": "2", "PostId": "68879525", "RevisionGUID": "a504aa39-6862-40fd-8639-951c52dcd8ea", "CreationDate": "2021-08-22T08:09:55.003", "UserId": "393896", "Text": "terraform destroy -target RESOURCE_TYPE.NAME -target RESOURCE_TYPE2.NAME", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "74985739", "PostTypeId": "2", "ParentId": "55265203", "CreationDate": "2023-01-02T18:13:00.887", "Score": "6", "Body": "<p>To delete all your stack except some resources, you need to:</p>\n<ol>\n<li>Create a backup of your current state : <code>terraform state pull &gt; bkup.json</code></li>\n<li>List all your resources : <code>terraform state list</code></li>\n<li>&quot;rm&quot; the resources that <strong>you want to keep</strong> : <code>terraform state rm &quot;aws_myresource&quot;</code>. It will not delete the resource in your cloud, but only from the terraform perspective.</li>\n<li>Destroy your stack : it will be delete from the cloud all your resources except the ones you &quot;rm&quot; just before. <code>terraform destroy</code></li>\n<li>You now have an empty state (0 resources). Save it in order to be able to edit it : <code>terraform state pull &gt; state-to-edit.json</code></li>\n<li>Edit the <code>state-to-edit.json</code> by adding resources object <code>{}</code> from the <code>bkup.json</code> in the <code>.resources[]</code> block. You also need to increment by 1 the <code>.serial</code> value</li>\n<li>Push the modified state : <code>terraform state push ./state-to-edit.json</code></li>\n<li>You can verify with <code>terraform plan</code> or <code>terraform state list</code> that you still have the wanted resources &amp; deleted all the others.</li>\n</ol>\n", "OwnerUserId": "8613429", "LastEditorUserId": "10871073", "LastEditDate": "2023-01-03T06:10:01.557", "LastActivityDate": "2023-01-03T06:10:01.557", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "133034184", "PostId": "74985739", "Score": "1", "Text": "This is the only answer that does what the OP asked. I'm just sad this is necessary. See also this nearly four year old [issue](https://github.com/hashicorp/terraform/issues/23547).", "CreationDate": "2023-02-09T07:54:22.473", "UserId": "3558355", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "133044054", "PostId": "74985739", "Score": "1", "Text": "Thank you @ChuckBatson, I added it in the issue for visibility purpose. Hopes it helps people.", "CreationDate": "2023-02-09T16:15:33.373", "UserId": "8613429", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "135497989", "PostId": "74985739", "Score": "0", "Text": "I wonder why terraform was created with so much hate in one's soul.", "CreationDate": "2023-08-08T13:26:27.437", "UserId": "9351221", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "285374232", "PostHistoryTypeId": "2", "PostId": "74985739", "RevisionGUID": "49a1073f-1236-4fb0-b7a9-29ed6d845cc7", "CreationDate": "2023-01-02T18:13:00.887", "UserId": "8613429", "Text": "To delete all your stack except some resources, you need to :\r\n\r\n 1. create a backup of your current state : `terraform state pull > bkup.json`\r\n 2. list all your resources : `terraform state list`\r\n 3. \"rm\" the resources that **you want to keep** : `terraform state rm \"aws_myresource\"`. It will not delete the resource in your cloud, but only from the terraform perspective.\r\n 4. Destroy your stack : it will be delete from the cloud all your resources except the ones you \"rm\" just before. `terraform destroy`\r\n 5. you know have an empty state (0 resources). Save it in order to be able to edit it : `terraform state pull > state-to-edit.json`\r\n 6. edit the `state-to-edit.json` by adding resources object `{}` from the `bkup.json` in the `.resources[]` block. You also need to increment by 1 the `.serial` value\r\n7. Push the modified state : `terraform state push ./state-to-edit.json`\r\n8. You can verify with `terraform plan` or `terraform state list` that you still have the wanted resources & deleted all the others.\r\n\r\n\r\nHope it was enough clear,\r\n\r\nR\u00e9mi", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "285397054", "PostHistoryTypeId": "5", "PostId": "74985739", "RevisionGUID": "51e15073-bfac-44bd-a753-842fd8400169", "CreationDate": "2023-01-03T06:10:01.557", "UserId": "10871073", "Comment": "deleted 41 characters in body", "Text": "To delete all your stack except some resources, you need to:\r\n\r\n 1. Create a backup of your current state : `terraform state pull > bkup.json`\r\n 2. List all your resources : `terraform state list`\r\n 3. \"rm\" the resources that **you want to keep** : `terraform state rm \"aws_myresource\"`. It will not delete the resource in your cloud, but only from the terraform perspective.\r\n 4. Destroy your stack : it will be delete from the cloud all your resources except the ones you \"rm\" just before. `terraform destroy`\r\n 5. You now have an empty state (0 resources). Save it in order to be able to edit it : `terraform state pull > state-to-edit.json`\r\n 6. Edit the `state-to-edit.json` by adding resources object `{}` from the `bkup.json` in the `.resources[]` block. You also need to increment by 1 the `.serial` value\r\n7. Push the modified state : `terraform state push ./state-to-edit.json`\r\n8. You can verify with `terraform plan` or `terraform state list` that you still have the wanted resources & deleted all the others.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "69398810", "PostTypeId": "2", "ParentId": "55265203", "CreationDate": "2021-09-30T21:04:42.873", "Score": "0", "Body": "<ol>\n<li><p>List resources:</p>\n<pre><code>terraform state list\n\n  data.terraform_remote_state.rg\n  azurerm_postgresql_database.postgresql_database\n  azurerm_postgresql_server.postgresql_server\n</code></pre>\n</li>\n<li><p>Remove resource</p>\n<pre><code>terraform destroy -target azurerm_postgresql_database.postgresql_database -auto-approve\n</code></pre>\n</li>\n</ol>\n", "OwnerUserId": "9028384", "LastEditorUserId": "9028384", "LastEditDate": "2021-09-30T21:10:14.463", "LastActivityDate": "2021-09-30T21:10:14.463", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "254877743", "PostHistoryTypeId": "2", "PostId": "69398810", "RevisionGUID": "d6a2ec88-a5ed-4840-a37a-9d9a9a7d0d8e", "CreationDate": "2021-09-30T21:04:42.873", "UserId": "9028384", "Text": "1. List resources:\r\n\r\n    $ terraform state list\r\n\r\n      data.terraform_remote_state.rg\r\n\r\n      azurerm_postgresql_database.postgresql_database\r\n\r\n      azurerm_postgresql_server.postgresql_server\r\n\r\n2. Remove resource\r\n\r\n    $ terraform destroy -target azurerm_postgresql_database.postgresql_database -auto-approve", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "254878011", "PostHistoryTypeId": "5", "PostId": "69398810", "RevisionGUID": "78ee90ec-0dd2-4fec-97d6-76ba109a5e9c", "CreationDate": "2021-09-30T21:10:14.463", "UserId": "9028384", "Comment": "added 42 characters in body", "Text": "1. List resources:\r\n\r\n    ```console\r\n    terraform state list\r\n\r\n      data.terraform_remote_state.rg\r\n      azurerm_postgresql_database.postgresql_database\r\n      azurerm_postgresql_server.postgresql_server\r\n    ```\r\n\r\n2. Remove resource\r\n\r\n    ```console\r\n    terraform destroy -target azurerm_postgresql_database.postgresql_database -auto-approve\r\n    ```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}