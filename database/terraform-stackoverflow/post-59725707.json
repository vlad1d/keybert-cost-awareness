{"Id": "59725707", "PostTypeId": "1", "CreationDate": "2020-01-13T23:36:47.053", "Score": "10", "ViewCount": "15653", "Body": "<p>I am trying to enable CORS on my aws project which consists of <code>API Gateway</code> and <code>Lambda</code> function.\nI'm creating an API Gateway with <code>GET</code> and <code>OPTIONS</code> methods.\n<code>OPTIONS</code> is meant to be a mock endpoint for enabling CORS as per aws <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html\" rel=\"noreferrer\">documentation</a>.\nThere is a lambda function (<code>aws_lambda_function.app_lambda</code>) which is invoked by <code>GET</code> method and in response headers has:</p>\n\n<pre><code>\"Access-Control-Allow-Origin\": \"*\",\n\"Access-Control-Allow-Headers\": \"Content-Type\",\n\"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET\"\n</code></pre>\n\n<p>But still, I cannot pass CORS.</p>\n\n<pre><code>resource \"aws_api_gateway_rest_api\" \"rest_api\" {\n  name        = \"appAPIGateway\"\n  description = \"App App App\"\n}\n\nresource \"aws_api_gateway_resource\" \"rest_api_resource\" {\n  depends_on = [\"aws_api_gateway_rest_api.rest_api\"]\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\n  parent_id = \"${aws_api_gateway_rest_api.rest_api.root_resource_id}\"\n  path_part = \"playground\"\n}\n\nresource \"aws_api_gateway_method\" \"opt\" {\n  rest_api_id   = \"${aws_api_gateway_rest_api.rest_api.id}\"\n  resource_id   = \"${aws_api_gateway_resource.rest_api_resource.id}\"\n  http_method   = \"OPTIONS\"\n  authorization = \"NONE\"\n  api_key_required = true\n}\n\nresource \"aws_api_gateway_integration\" \"opt\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\n  resource_id = \"${aws_api_gateway_resource.rest_api_resource.id}\"\n  http_method = \"${aws_api_gateway_method.opt.http_method}\"\n  type = \"MOCK\"\n}\n\nresource \"aws_api_gateway_integration_response\" \"opt\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\n  resource_id = \"${aws_api_gateway_resource.rest_api_resource.id}\"\n  http_method = \"${aws_api_gateway_method.opt.http_method}\"\n  status_code = 200\n  response_parameters = {\n    \"method.response.header.Access-Control-Allow-Origin\" = \"'*'\",\n    \"method.response.header.Access-Control-Allow-Headers\" = \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'\",\n    \"method.response.header.Access-Control-Allow-Methods\" = \"'GET,OPTIONS,POST,PUT'\"\n  }\n  depends_on = [\"aws_api_gateway_integration.opt\", \"aws_api_gateway_method_response.opt\"]\n}\n\nresource \"aws_api_gateway_method_response\" \"opt\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\n  resource_id = \"${aws_api_gateway_resource.rest_api_resource.id}\"\n  http_method = \"${aws_api_gateway_method.opt.http_method}\"\n  status_code = 200\n  response_parameters = {\n    \"method.response.header.Access-Control-Allow-Origin\" = true,\n    \"method.response.header.Access-Control-Allow-Methods\" = true,\n    \"method.response.header.Access-Control-Allow-Headers\" = true\n  }\n  response_models = {\n    \"application/json\" = \"Empty\"\n  }\n  depends_on = [\"aws_api_gateway_method.opt\"]\n}\n\nresource \"aws_api_gateway_method\" \"app_api_gateway_method\" {\n  rest_api_id      = \"${aws_api_gateway_rest_api.rest_api.id}\"\n  resource_id      = \"${aws_api_gateway_resource.rest_api_resource.id}\"\n  http_method      = \"GET\"\n  authorization    = \"NONE\"\n  api_key_required = true\n}\n\nresource \"aws_api_gateway_method_response\" \"app_cors_method_response_200\" {\n    rest_api_id   = \"${aws_api_gateway_rest_api.rest_api.id}\"\n    resource_id   = \"${aws_api_gateway_resource.rest_api_resource.id}\"\n    http_method   = \"${aws_api_gateway_method.app_api_gateway_method.http_method}\"\n    status_code   = \"200\"\n    response_parameters = {\n    \"method.response.header.Access-Control-Allow-Origin\" = true,\n    \"method.response.header.Access-Control-Allow-Methods\" = true,\n    \"method.response.header.Access-Control-Allow-Headers\" = true\n  }\n    depends_on = [\"aws_api_gateway_method.app_api_gateway_method\"]\n}\n\nresource \"aws_api_gateway_integration\" \"app_api_gateway_integration\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\n  resource_id = \"${aws_api_gateway_method.app_api_gateway_method.resource_id}\"\n  http_method = \"${aws_api_gateway_method.app_api_gateway_method.http_method}\"\n  integration_http_method = \"POST\"\n  type                    = \"AWS_PROXY\"\n  uri                     = \"${aws_lambda_function.app_lambda.invoke_arn}\"\n  depends_on    = [\n    \"aws_api_gateway_method.app_api_gateway_method\",\n    \"aws_lambda_function.app_lambda\"\n    ]\n}\n\nresource \"aws_api_gateway_integration_response\" \"app_api_gateway_integration_response\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\n  resource_id = \"${aws_api_gateway_resource.rest_api_resource.id}\"\n  http_method = \"${aws_api_gateway_method.app_api_gateway_method.http_method}\"\n  status_code = 200\n  response_parameters = {\n    \"method.response.header.Access-Control-Allow-Origin\" = \"'*'\",\n    \"method.response.header.Access-Control-Allow-Headers\" = \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'\",\n    \"method.response.header.Access-Control-Allow-Methods\" = \"'GET,OPTIONS,POST,PUT'\"\n  }\n  depends_on = [\n    \"aws_api_gateway_integration.app_api_gateway_integration\",\n    \"aws_api_gateway_method_response.app_cors_method_response_200\",\n  ]\n}\n\nresource \"aws_api_gateway_deployment\" \"app_api_gateway_deployment\" {\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\n  stage_name  = \"app_stage\"\n  depends_on = [\n    \"aws_api_gateway_integration_response.app_api_gateway_integration_response\",\n    \"aws_api_gateway_integration_response.opt\"\n    ]\n}\n</code></pre>\n\n<p>Any help would be appreceated.</p>\n", "OwnerUserId": "5907520", "LastEditorUserId": "1488055", "LastEditDate": "2021-09-12T17:57:36.490", "LastActivityDate": "2022-09-05T13:07:45.250", "Title": "How to enable CORS on AWS with terraform", "Tags": "<amazon-web-services><cors><terraform><aws-api-gateway>", "AnswerCount": "4", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "212886425", "PostHistoryTypeId": "2", "PostId": "59725707", "RevisionGUID": "746554e6-7ae3-487b-9cb1-5121ba738e8d", "CreationDate": "2020-01-13T23:36:47.053", "UserId": "5907520", "Text": "I am trying to enable CORS on my aws project which consists of `API Gateway` and `Lambda` function.\r\nI'm creating an API Gateway with `GET` and `OPTIONS` methods.\r\n`OPTIONS` is meant to be a mock endpoint for enabling CORS as per aws [documentation][1].\r\nThere is a lambda function (`aws_lambda_function.app_lambda`) which is invoked by `GET` method and in response headers has:\r\n```\r\n\"Access-Control-Allow-Origin\": \"*\",\r\n\"Access-Control-Allow-Headers\": \"Content-Type\",\r\n\"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET\"\r\n```\r\nBut still, I cannot pass CORS.\r\n```\r\nresource \"aws_api_gateway_rest_api\" \"rest_api\" {\r\n  name        = \"appAPIGateway\"\r\n  description = \"App App App\"\r\n}\r\n\r\nresource \"aws_api_gateway_resource\" \"rest_api_resource\" {\r\n  depends_on = [\"aws_api_gateway_rest_api.rest_api\"]\r\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n  parent_id = \"${aws_api_gateway_rest_api.rest_api.root_resource_id}\"\r\n  path_part = \"playground\"\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"opt\" {\r\n  rest_api_id   = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n  resource_id   = \"${aws_api_gateway_resource.rest_api_resource.id}\"\r\n  http_method   = \"OPTIONS\"\r\n  authorization = \"NONE\"\r\n  api_key_required = true\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"opt\" {\r\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n  resource_id = \"${aws_api_gateway_resource.rest_api_resource.id}\"\r\n  http_method = \"${aws_api_gateway_method.opt.http_method}\"\r\n  type = \"MOCK\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration_response\" \"opt\" {\r\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n  resource_id = \"${aws_api_gateway_resource.rest_api_resource.id}\"\r\n  http_method = \"${aws_api_gateway_method.opt.http_method}\"\r\n  status_code = 200\r\n  response_parameters = {\r\n    \"method.response.header.Access-Control-Allow-Origin\" = \"'*'\",\r\n    \"method.response.header.Access-Control-Allow-Headers\" = \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'\",\r\n    \"method.response.header.Access-Control-Allow-Methods\" = \"'GET,OPTIONS,POST,PUT'\"\r\n  }\r\n  depends_on = [\"aws_api_gateway_integration.opt\", \"aws_api_gateway_method_response.opt\"]\r\n}\r\n\r\nresource \"aws_api_gateway_method_response\" \"opt\" {\r\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n  resource_id = \"${aws_api_gateway_resource.rest_api_resource.id}\"\r\n  http_method = \"${aws_api_gateway_method.opt.http_method}\"\r\n  status_code = 200\r\n  response_parameters = {\r\n    \"method.response.header.Access-Control-Allow-Origin\" = true,\r\n    \"method.response.header.Access-Control-Allow-Methods\" = true,\r\n    \"method.response.header.Access-Control-Allow-Headers\" = true\r\n  }\r\n  response_models = {\r\n    \"application/json\" = \"Empty\"\r\n  }\r\n  depends_on = [\"aws_api_gateway_method.opt\"]\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"app_api_gateway_method\" {\r\n  rest_api_id      = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n  resource_id      = \"${aws_api_gateway_resource.rest_api_resource.id}\"\r\n  http_method      = \"GET\"\r\n  authorization    = \"NONE\"\r\n  api_key_required = true\r\n}\r\n\r\nresource \"aws_api_gateway_method_response\" \"app_cors_method_response_200\" {\r\n    rest_api_id   = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n    resource_id   = \"${aws_api_gateway_resource.rest_api_resource.id}\"\r\n    http_method   = \"${aws_api_gateway_method.app_api_gateway_method.http_method}\"\r\n    status_code   = \"200\"\r\n    response_parameters = {\r\n    \"method.response.header.Access-Control-Allow-Origin\" = true,\r\n    \"method.response.header.Access-Control-Allow-Methods\" = true,\r\n    \"method.response.header.Access-Control-Allow-Headers\" = true\r\n  }\r\n    depends_on = [\"aws_api_gateway_method.app_api_gateway_method\"]\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"app_api_gateway_integration\" {\r\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n  resource_id = \"${aws_api_gateway_method.app_api_gateway_method.resource_id}\"\r\n  http_method = \"${aws_api_gateway_method.app_api_gateway_method.http_method}\"\r\n  integration_http_method = \"POST\"\r\n  type                    = \"AWS_PROXY\"\r\n  uri                     = \"${aws_lambda_function.app_lambda.invoke_arn}\"\r\n  depends_on    = [\r\n    \"aws_api_gateway_method.app_api_gateway_method\",\r\n    \"aws_lambda_function.app_lambda\"\r\n    ]\r\n}\r\n\r\nresource \"aws_api_gateway_integration_response\" \"app_api_gateway_integration_response\" {\r\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n  resource_id = \"${aws_api_gateway_resource.rest_api_resource.id}\"\r\n  http_method = \"${aws_api_gateway_method.app_api_gateway_method.http_method}\"\r\n  status_code = 200\r\n  response_parameters = {\r\n    \"method.response.header.Access-Control-Allow-Origin\" = \"'*'\",\r\n    \"method.response.header.Access-Control-Allow-Headers\" = \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'\",\r\n    \"method.response.header.Access-Control-Allow-Methods\" = \"'GET,OPTIONS,POST,PUT'\"\r\n  }\r\n  depends_on = [\r\n    \"aws_api_gateway_integration.app_api_gateway_integration\",\r\n    \"aws_api_gateway_method_response.app_cors_method_response_200\",\r\n  ]\r\n}\r\n\r\nresource \"aws_api_gateway_deployment\" \"app_api_gateway_deployment\" {\r\n  rest_api_id = \"${aws_api_gateway_rest_api.rest_api.id}\"\r\n  stage_name  = \"app_stage\"\r\n  depends_on = [\r\n    \"aws_api_gateway_integration_response.app_api_gateway_integration_response\",\r\n    \"aws_api_gateway_integration_response.opt\"\r\n    ]\r\n}\r\n```\r\nAny help would be appreceated.\r\n\r\n  [1]: https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "212886426", "PostHistoryTypeId": "1", "PostId": "59725707", "RevisionGUID": "746554e6-7ae3-487b-9cb1-5121ba738e8d", "CreationDate": "2020-01-13T23:36:47.053", "UserId": "5907520", "Text": "How to enable CORS on AWS with terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "212886427", "PostHistoryTypeId": "3", "PostId": "59725707", "RevisionGUID": "746554e6-7ae3-487b-9cb1-5121ba738e8d", "CreationDate": "2020-01-13T23:36:47.053", "UserId": "5907520", "Text": "<amazon-web-services><cors>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "253598505", "PostHistoryTypeId": "6", "PostId": "59725707", "RevisionGUID": "3093e117-61ce-41c3-8c13-ec662cd41699", "CreationDate": "2021-09-12T17:57:36.490", "UserId": "1488055", "Comment": "missing tags", "Text": "<amazon-web-services><cors><terraform><aws-api-gateway>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "253598506", "PostHistoryTypeId": "24", "PostId": "59725707", "RevisionGUID": "3093e117-61ce-41c3-8c13-ec662cd41699", "CreationDate": "2021-09-12T17:57:36.490", "Comment": "Proposed by 1488055 approved by 3514300, 738287 edit id of 5237535", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "63718912", "PostTypeId": "2", "ParentId": "59725707", "CreationDate": "2020-09-03T07:35:24.707", "Score": "3", "Body": "<p>You can use the terraform module to enable cors:</p>\n<pre><code>module &quot;api-gateway-enable-cors&quot; {\nsource  = &quot;squidfunk/api-gateway-enable-cors/aws&quot;\nversion = &quot;0.3.3&quot;\napi_id          = &quot;&lt;your_api_id&gt;&quot;\napi_resource_id = &quot;&lt;your_api_resource_id&gt;&quot;\n}\n</code></pre>\n<p>Source : <a href=\"https://registry.terraform.io/modules/squidfunk/api-gateway-enable-cors/aws/0.3.1\" rel=\"nofollow noreferrer\">api-gateway-enable-cors</a></p>\n", "OwnerUserId": "2213646", "LastEditorUserId": "2213646", "LastEditDate": "2022-09-05T13:07:45.250", "LastActivityDate": "2022-09-05T13:07:45.250", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129905345", "PostId": "63718912", "Score": "0", "Text": "Use version 0.3.3 if on terraform >= 0.12 to avoid error in function call because of use of deprecated \"map\" funcion", "CreationDate": "2022-09-01T00:09:08.483", "UserId": "4893753", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "135290947", "PostId": "63718912", "Score": "0", "Text": "Outdated module, does not work on never terraform versions", "CreationDate": "2023-07-21T16:22:10.097", "UserId": "2029276", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "230069229", "PostHistoryTypeId": "2", "PostId": "63718912", "RevisionGUID": "c0a58b79-0c68-4db2-bf4c-ae092b9c9cc0", "CreationDate": "2020-09-03T07:35:24.707", "UserId": "2213646", "Text": "You can use the terraform module to enable cors: \r\n\r\n    module \"api-gateway-enable-cors\" {\r\n    source  = \"squidfunk/api-gateway-enable-cors/aws\"\r\n    version = \"0.3.1\"\r\n    api_id          = \"<your_api_id>\"\r\n    api_resource_id = \"<your_api_resource_id>\"\r\n    }\r\nSource : [api-gateway-enable-cors][1]\r\n\r\n\r\n  [1]: https://registry.terraform.io/modules/squidfunk/api-gateway-enable-cors/aws/0.3.1", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "277623978", "PostHistoryTypeId": "5", "PostId": "63718912", "RevisionGUID": "d2d9a1fc-c684-4068-a4ce-b2d4f84d44ba", "CreationDate": "2022-09-05T13:07:45.250", "UserId": "2213646", "Comment": "version = 0.3.3 instead of 0.3.1", "Text": "You can use the terraform module to enable cors: \r\n\r\n    module \"api-gateway-enable-cors\" {\r\n    source  = \"squidfunk/api-gateway-enable-cors/aws\"\r\n    version = \"0.3.3\"\r\n    api_id          = \"<your_api_id>\"\r\n    api_resource_id = \"<your_api_resource_id>\"\r\n    }\r\nSource : [api-gateway-enable-cors][1]\r\n\r\n\r\n\r\n  [1]: https://registry.terraform.io/modules/squidfunk/api-gateway-enable-cors/aws/0.3.1", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "69124448", "PostTypeId": "2", "ParentId": "59725707", "CreationDate": "2021-09-09T20:36:59.350", "Score": "8", "Body": "<p>For newer HTTP API (v2), you can use:</p>\n<pre><code>resource &quot;aws_apigatewayv2_api&quot; &quot;lambda&quot; {\n  name          = &quot;lambda_gw_api&quot;\n  protocol_type = &quot;HTTP&quot;\n  cors_configuration {\n    allow_origins = [&quot;https://www.mywebsite.fr&quot;]\n    allow_methods = [&quot;POST&quot;, &quot;GET&quot;, &quot;OPTIONS&quot;]\n    allow_headers = [&quot;content-type&quot;]\n    max_age = 300\n  }\n}\n</code></pre>\n<p>PS: you may also need to check your OPTIONS route has an &quot;integration&quot; and does not return 401.</p>\n", "OwnerUserId": "1488055", "LastEditorUserId": "1488055", "LastEditDate": "2021-09-13T10:08:38.303", "LastActivityDate": "2021-09-13T10:08:38.303", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129007256", "PostId": "69124448", "Score": "0", "Text": "What if there is a custom domain set up? Do I also need to add this domain to the allow_origins argument?", "CreationDate": "2022-07-19T20:27:08.820", "UserId": "5967025", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "What if there is a custom domain set up? ", "keywords": ["domain"]}, {"source": "Text", "text": "Do I also need to add this domain to the allow_origins argument?", "keywords": ["domain"]}]}], "history": [{"Id": "253461742", "PostHistoryTypeId": "2", "PostId": "69124448", "RevisionGUID": "d67fcb8b-eddf-40b2-b62c-4bcdf8d7bf16", "CreationDate": "2021-09-09T20:36:59.350", "UserId": "1488055", "Text": "For newer HTTP API (v2), you can use:\r\n\r\n```\r\nresource \"aws_apigatewayv2_api\" \"lambda\" {\r\n  name          = \"lambda_gw_api\"\r\n  protocol_type = \"HTTP\"\r\n  cors_configuration {\r\n    allow_origins = [\"https://www.mywebsite.fr\"]\r\n    allow_methods = [\"POST\", \"GET\"]\r\n    allow_headers = [\"content-type\"]\r\n    max_age = 300\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "253628090", "PostHistoryTypeId": "5", "PostId": "69124448", "RevisionGUID": "a3ce808f-f316-41a8-9967-1cb80e82e3fa", "CreationDate": "2021-09-13T10:08:38.303", "UserId": "1488055", "Comment": "add OPTIONS in example", "Text": "For newer HTTP API (v2), you can use:\r\n\r\n```\r\nresource \"aws_apigatewayv2_api\" \"lambda\" {\r\n  name          = \"lambda_gw_api\"\r\n  protocol_type = \"HTTP\"\r\n  cors_configuration {\r\n    allow_origins = [\"https://www.mywebsite.fr\"]\r\n    allow_methods = [\"POST\", \"GET\", \"OPTIONS\"]\r\n    allow_headers = [\"content-type\"]\r\n    max_age = 300\r\n  }\r\n}\r\n```\r\n\r\nPS: you may also need to check your OPTIONS route has an \"integration\" and does not return 401.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "70851588", "PostTypeId": "2", "ParentId": "59725707", "CreationDate": "2022-01-25T15:45:01.927", "Score": "-1", "Body": "<p>It is useful to check the API GW logs in Cloudwatch to see what is the status code. In my scenario, I had two routes configured with <code>aws_apigatewayv2_route</code>, one for POST and one for OPTIONS, for the same route key. The OPTIONS request was failing with statuscode <code>429</code> which is too many requests. This status code is usually returned by throttling settings when its over allowed limit.</p>\n<p>Turns out, since the OPTIONS request was not passing CORS, it was because I did not specify throttling in <code>default_route_settings</code> in terraform, so the default throttling for &quot;Default route throttling&quot; was defaulting to <code>0</code> for burst and rate. So my OPTIONS request was not passing CORS because it was getting hit by this throttling defaulting to zero. The hint in AWS console is clear:</p>\n<blockquote>\n<p>This throttling limit applies to each route in the stage except those\ndefined for specific routes.</p>\n</blockquote>\n<p>Moral of the story - on your OPTIONS requests, really pay attention to the status code returned by API GW, and check the Cloudwatch logs for API GW.\nSo: all worked, when I added this in terraform, under my <code>resource &quot;aws_apigatewayv2_stage&quot; &quot;lambda&quot;</code>:</p>\n<pre><code>   default_route_settings {\n      throttling_burst_limit  = 1000 \n      throttling_rate_limit   = 5000\n    }\n</code></pre>\n", "OwnerUserId": "150006", "LastEditorUserId": "150006", "LastEditDate": "2022-01-25T16:31:11.860", "LastActivityDate": "2022-01-25T16:31:11.860", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "262707622", "PostHistoryTypeId": "2", "PostId": "70851588", "RevisionGUID": "59f7bc1c-82ff-4a00-8be2-28b23da1cc6d", "CreationDate": "2022-01-25T15:45:01.927", "UserId": "150006", "Text": "It is useful to check the API GW logs in Cloudwatch to see what is the status code. In my scenario, it was statuscode `429` which is too many requests. This status code is usually returned by throttling settings when its over allowed limit. \r\n\r\nTurns out, since the OPTIONS request was not passing CORS, it was because I did not specify throttling in ```default_route_settings``` in terraform, so the default throttling for \"Default route throttling\" was defaulting to `0` for burst and rate. So my OPTIONS request was not passing CORS because it was getting hit by this throttling defaulting to zero requests allowed. The hint in the console is very clear: \r\n\r\n> This throttling limit applies to each route in the stage except those\r\n> defined for specific routes.\r\n\r\n \r\nMoral of the story - on your OPTIONS requests, really pay attention to the status code returned by API GW, and check the Cloudwatch logs for API GW. \r\nSo: all worked, when I added this in terraform, under my `resource \"aws_apigatewayv2_stage\" \"lambda\"`:\r\n\r\n \r\n\r\n       default_route_settings {\r\n          throttling_burst_limit  = 1000 \r\n          throttling_rate_limit   = 5000\r\n        }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Moral of the story - on your OPTIONS requests, really pay attention to the status code returned by API GW, and check the Cloudwatch logs for API GW. ", "keywords": ["pay"]}]}, {"Id": "262711094", "PostHistoryTypeId": "5", "PostId": "70851588", "RevisionGUID": "22e01ec7-9914-4a7a-b2e6-3a51586f208f", "CreationDate": "2022-01-25T16:31:11.860", "UserId": "150006", "Comment": "added 125 characters in body", "Text": "It is useful to check the API GW logs in Cloudwatch to see what is the status code. In my scenario, I had two routes configured with `aws_apigatewayv2_route`, one for POST and one for OPTIONS, for the same route key. The OPTIONS request was failing with statuscode `429` which is too many requests. This status code is usually returned by throttling settings when its over allowed limit. \r\n\r\nTurns out, since the OPTIONS request was not passing CORS, it was because I did not specify throttling in ```default_route_settings``` in terraform, so the default throttling for \"Default route throttling\" was defaulting to `0` for burst and rate. So my OPTIONS request was not passing CORS because it was getting hit by this throttling defaulting to zero. The hint in AWS console is clear: \r\n\r\n> This throttling limit applies to each route in the stage except those\r\n> defined for specific routes.\r\n\r\n \r\nMoral of the story - on your OPTIONS requests, really pay attention to the status code returned by API GW, and check the Cloudwatch logs for API GW. \r\nSo: all worked, when I added this in terraform, under my `resource \"aws_apigatewayv2_stage\" \"lambda\"`:\r\n\r\n \r\n\r\n       default_route_settings {\r\n          throttling_burst_limit  = 1000 \r\n          throttling_rate_limit   = 5000\r\n        }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Moral of the story - on your OPTIONS requests, really pay attention to the status code returned by API GW, and check the Cloudwatch logs for API GW. ", "keywords": ["pay"]}]}], "filtered-sentences": [{"source": "Body", "text": "Moral of the story - on your OPTIONS requests, really pay attention to the status code returned by API GW, and check the Cloudwatch logs for API GW. ", "keywords": ["pay"]}]}, {"Id": "59804125", "PostTypeId": "2", "ParentId": "59725707", "CreationDate": "2020-01-18T19:37:21.417", "Score": "2", "Body": "<p>Found out a simple solution. The problem was that on applying newer changes to existing API Gateway, was NOT re-deploying those gateways. So I had to redeploy them by myself manually and think of how to do that in terraform too.</p>\n", "OwnerUserId": "5907520", "LastActivityDate": "2020-01-18T19:37:21.417", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "133147291", "PostId": "59804125", "Score": "0", "Text": "You can do an auto deployment using: \nresource \"aws_api_gateway_deployment\" \"rest_api\" {\n  rest_api_id = aws_api_gateway_rest_api.rest_api.id\n\n  triggers = {\n    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.rest_api.body))\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}", "CreationDate": "2023-02-15T17:34:56.217", "UserId": "1342522", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "213216507", "PostHistoryTypeId": "2", "PostId": "59804125", "RevisionGUID": "5d112e7d-c9f6-4f9e-8abf-2a66fd660bd7", "CreationDate": "2020-01-18T19:37:21.417", "UserId": "5907520", "Text": "Found out a simple solution. The problem was that on applying newer changes to existing API Gateway, was NOT re-deploying those gateways. So I had to redeploy them by myself manually and think of how to do that in terraform too.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The problem was that on applying newer changes to existing API Gateway, was NOT re-deploying those gateways. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "The problem was that on applying newer changes to existing API Gateway, was NOT re-deploying those gateways. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": []}