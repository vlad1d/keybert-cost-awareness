{"Id": "71866512", "PostTypeId": "1", "AcceptedAnswerId": "71869763", "CreationDate": "2022-04-14T04:26:16.613", "Score": "1", "ViewCount": "329", "Body": "<p>I am using terraform to deploy Linux VMs from the azure marketplace.</p>\n<p>I have set a plan block in the linux module and declared the variables in my main.tf.</p>\n<p>When running terraform plan/apply it works and builds the VM</p>\n<p>I'm wondering how I would go about modifying my module and the main.tf to add the plan block as a conditional if statement.</p>\n<p>I would like to use this module to build both non-azure marketplace &amp; azure marketplace vms.</p>\n<p>I wouldn't want a separate modules to do this.</p>\n<pre><code>module &quot;vm-ansiblecontroller&quot; {\n  resource_group_name = module.rg-ansiblecontroller.resource_group_name\n  location            = local.location\n  linux_machine_name  = &quot;linux-test1&quot;\n  tags                = var.tags\n\n  nic_id = [module.vm-ansiblecontroller.nic_id]\n  subnet_id = module.subnet-networkcore.subnet_id\n\n  virtual_machine_size = &quot;Standard_D2&quot;\n\n  admin_username       = &quot;jpadmin&quot;\n  admin_ssh_public_key = file(&quot;~/.ssh/id_rsa.pub&quot;)\n\n  source_image_publisher = &quot;procomputers&quot;\n  source_image_offer     = &quot;rocky-lnx-8-latest&quot;\n  source_image_sku       = &quot;rocky-linux-8-latest&quot;\n  source_image_version   = &quot;8.5.20220222&quot;\n\n  plan_name = &quot;rocky-linux-8-latest&quot;\n  plan_product = &quot;rocky-lnx-8-latest&quot;\n  plan_publisher = &quot;procomputers&quot;\n  \n  operating_system_disk_cache = &quot;ReadWrite&quot;\n  operating_system_disk_type  = &quot;Standard_LRS&quot;\n\n  ip_configuration_name         = &quot;internal&quot;\n  private_ip_address_allocation = &quot;Dynamic&quot;\n\n  public_ip_allocation_method = &quot;Static&quot;\n  public_ip_sku               = &quot;Standard&quot;\n\n   depends_on = [\n    module.rg-networkcore,\n    module.vnet-networkcore,\n    module.subnet-networkcore\n  ]\n}\n\nmodule &quot;vm-jpdev&quot; {\n  resource_group_name = module.rg-jpdev-vm.resource_group_name\n  location            = local.location\n  linux_machine_name  = &quot;linux-test2&quot;\n  tags                = var.tags\n\n  nic_id = [module.vm-jpdev.nic_id]\n  subnet_id = module.subnet-networkcore.subnet_id\n\n  virtual_machine_size = &quot;Standard_D2&quot;\n\n  admin_username       = &quot;jpadmin&quot;\n  admin_ssh_public_key = file(&quot;~/.ssh/id_rsa.pub&quot;)\n\n  source_image_publisher = &quot;Canonical&quot;\n  source_image_offer     = &quot;UbuntuServer&quot;\n  source_image_sku       = &quot;16.04-LTS&quot;\n  source_image_version   = &quot;latest&quot;\n\n  operating_system_disk_cache = &quot;ReadWrite&quot;\n  operating_system_disk_type  = &quot;Standard_LRS&quot;\n\n  ip_configuration_name         = &quot;internal&quot;\n  private_ip_address_allocation = &quot;Dynamic&quot;\n\n  public_ip_allocation_method = &quot;Static&quot;\n  public_ip_sku               = &quot;Standard&quot;\n\n}\n</code></pre>\n<p>modules/virtualmachine/linux/variables.tf</p>\n<pre><code># VM Name\nvariable &quot;linux_machine_name&quot; {\n  description = &quot;Linux Virtual Machine Name - If left blank generated from metadata module&quot;\n  type        = string\n  default     = &quot;&quot;\n}\n\nvariable &quot;resource_group_name&quot; {\n  description = &quot;Resource group name&quot;\n  type        = string\n}\n\nvariable &quot;location&quot; {\n  description = &quot;Azure region&quot;\n  type        = string\n}\n\nvariable &quot;tags&quot; {\n  description = &quot;tags to be applied to resources&quot;\n  type        = map(string)\n}\n\n# VM Size\nvariable &quot;virtual_machine_size&quot; {\n  description = &quot;Instance size to be provisioned&quot;\n  type        = string\n}\n\nvariable &quot;admin_username&quot; {\n  description = &quot;names to be applied to resources&quot;\n  type        = string\n}\n\nvariable &quot;admin_ssh_public_key&quot; {\n  description = &quot;(Linux) Public SSH Key - Generated if left blank&quot;\n  type        = string\n  default     = &quot;&quot;\n  sensitive   = true\n}\n\n# Operating System\nvariable &quot;source_image_publisher&quot; {\n  description = &quot;Operating System Publisher&quot;\n  type        = string\n}\n\nvariable &quot;source_image_offer&quot; {\n  description = &quot;Operating System Name&quot;\n  type        = string\n}\n\nvariable &quot;source_image_sku&quot; {\n  description = &quot;Operating System SKU&quot;\n  type        = string\n}\n\nvariable &quot;source_image_version&quot; {\n  description = &quot;Operating System Version&quot;\n  type        = string\n  default     = &quot;latest&quot;\n}\n\n# Plan Block Variables\nvariable &quot;plan_name&quot; {\n  description = &quot;Plan Name&quot;\n  type        = string\n}\n\nvariable &quot;plan_product&quot; {\n  description = &quot;Plan Product&quot;\n  type        = string\n}\n\nvariable &quot;plan_publisher&quot; {\n  description = &quot;Plan Publisher&quot;\n  type        = string\n}\n\n# Operating System Disk\nvariable &quot;operating_system_disk_cache&quot; {\n  description = &quot;Type of caching to use on the OS disk - Options: None, ReadOnly or ReadWrite&quot;\n  type        = string\n  default     = &quot;ReadWrite&quot;\n}\n\nvariable &quot;operating_system_disk_type&quot; {\n  description = &quot;Type of storage account to use with the OS disk - Options: Standard_LRS, StandardSSD_LRS or Premium_LRS&quot;\n  type        = string\n  default     = &quot;StandardSSD_LRS&quot;\n}\n\nvariable &quot;ip_configuration_name&quot; {\n  description = &quot;ip configuration name&quot;\n  type        = string\n  default     = &quot;&quot;\n}\n\n# Networking\nvariable &quot;nic_id&quot; {\n  type        = list(string)\n  description = &quot;ID of the nic&quot;\n}\n\nvariable &quot;subnet_id&quot; {\n  type        = string\n  description = &quot;ID of the subnet&quot;\n}\n\nvariable &quot;private_ip_address_allocation&quot; {\n  type        = string\n  description = &quot;Private ip allocation method&quot;\n}\n\nvariable &quot;public_ip_allocation_method&quot; {\n  type        = string\n  description = &quot;Public ip allocation method&quot;\n}\n\nvariable &quot;public_ip_sku&quot; {\n  description = &quot;SKU to be used with this public IP - Basic or Standard&quot;\n  type        = string\n  default     = &quot;Standard&quot;\n}\n</code></pre>\n<p>modules/virtualmachine/variables.tf</p>\n<pre><code># Interface id\noutput &quot;nic_id&quot; {\n  description = &quot;ids of the vm nics provisoned.&quot;\n  value = azurerm_network_interface.nic-linux.id\n</code></pre>\n<p>}</p>\n", "OwnerUserId": "14147257", "LastEditorUserId": "14147257", "LastEditDate": "2022-04-14T10:14:19.943", "LastActivityDate": "2022-04-14T10:14:19.943", "Title": "Add the plan block as a conditional if statement", "Tags": "<azure><terraform>", "AnswerCount": "1", "CommentCount": "9", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "126995969", "PostId": "71866512", "Score": "0", "Text": "Conditional, but what would be the condition?", "CreationDate": "2022-04-14T04:38:05.220", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126996110", "PostId": "71866512", "Score": "0", "Text": "I'm not sure if this is possible solely in terraform but I'm thinking:                                                                     If VM is of Azure marketplace use the the plan block otherwise don't use it. I'm open to other suggestions though if there is a better way to do this or would I need to create another module for azure marketplace vms ?", "CreationDate": "2022-04-14T04:52:27.720", "UserId": "14147257", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126996144", "PostId": "71866512", "Score": "0", "Text": "But which variable determines that?", "CreationDate": "2022-04-14T04:56:20.660", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126996725", "PostId": "71866512", "Score": "0", "Text": "I am thinking of using a dynamic block to do this, will update code when I get a chance.", "CreationDate": "2022-04-14T05:51:48.240", "UserId": "14147257", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126996951", "PostId": "71866512", "Score": "0", "Text": "Yes, but need need some condition for the  dynamic block. What exactly be the condition? `var.is_marketpace == true`?", "CreationDate": "2022-04-14T06:07:55.397", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127001295", "PostId": "71866512", "Score": "1", "Text": "I've taken a look at all the Rocky Linux VMs in the Marketplace and all versions cost $ per hour.  So I was thinking of using a conditional against plan_product = \"rocky-lnx-8-latest\"        `var.plan_product == \"rocky-lnx-8-latest\" ? run the plan block : don't run the plan block and execute the rest of the code`", "CreationDate": "2022-04-14T09:54:31.857", "UserId": "14147257", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I've taken a look at all the Rocky Linux VMs in the Marketplace and all versions cost $ per hour. ", "keywords": ["cost"]}]}, {"Id": "127001322", "PostId": "71866512", "Score": "0", "Text": "I have modified my code above to include vm-ansiblecontroller (Rocky Linux) and also vm-devjp (Ubuntu which doesn't cost $ per hour and doesn't require the plan block)                                                                                                                                                                                                                   \nSorry that I wasn't to clear before, I'm still fairly new to Terraform :)", "CreationDate": "2022-04-14T09:55:42.857", "UserId": "14147257", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have modified my code above to include vm-ansiblecontroller (Rocky Linux) and also vm-devjp (Ubuntu which doesn't cost $ per hour and doesn't require the plan block) ", "keywords": ["cost"]}]}, {"Id": "127001755", "PostId": "71866512", "Score": "0", "Text": "They are still required arguments in vm-jpdev module block                                              `Error: Missing required argument\n\u2502\n\u2502   on compute_lin_vm.tf line 43, in module \"vm-jpdev\":\n\u2502   43: module \"vm-jpdev\" {\n\u2502\n\u2502 The argument \"plan_name\" is required, but no definition was found.`", "CreationDate": "2022-04-14T10:18:03.937", "UserId": "14147257", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127001801", "PostId": "71866512", "Score": "2", "Text": "This is new issue, not related to how to have \"the plan block as a conditional if statement\". Thus, new question should be asked.", "CreationDate": "2022-04-14T10:20:21.807", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "268132967", "PostHistoryTypeId": "2", "PostId": "71866512", "RevisionGUID": "7b44bb6e-d033-4ca2-b8f7-8f76322da0bb", "CreationDate": "2022-04-14T04:26:16.613", "UserId": "14147257", "Text": "I am using terraform to deploy Linux VMs from the azure marketplace.\r\n\r\nI have set a plan block in the linux module and declared the variables in my main.tf.\r\n\r\nWhen running terraform plan/apply it works and builds the VM\r\n\r\nI'm wondering how I would go about modifying my module and the main.tf to add the plan block as a conditional if statement.  \r\n\r\nI would like to use this module to build both non-azure marketplace & azure marketplace vms.\r\n\r\n I wouldn't want a separate modules to do this.\r\n\r\n    module \"vm-ansiblecontroller\" {\r\n      resource_group_name = module.rg-ansiblecontroller.resource_group_name\r\n      location            = local.location\r\n      linux_machine_name  = \"linux-test1\"\r\n      tags                = var.tags\r\n    \r\n      nic_id = [module.vm-ansiblecontroller.nic_id]\r\n      subnet_id = module.subnet-networkcore.subnet_id\r\n    \r\n      virtual_machine_size = \"Standard_D2\"\r\n    \r\n      admin_username       = \"jpadmin\"\r\n      admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\")\r\n    \r\n      source_image_publisher = \"procomputers\"\r\n      source_image_offer     = \"rocky-lnx-8-latest\"\r\n      source_image_sku       = \"rocky-linux-8-latest\"\r\n      source_image_version   = \"8.5.20220222\"\r\n    \r\n      plan_name = \"rocky-lnx-8-latest\"\r\n      plan_product = \"rocky-lnx-8-latest\"\r\n      plan_publisher = \"procomputers\"\r\n      \r\n      operating_system_disk_cache = \"ReadWrite\"\r\n      operating_system_disk_type  = \"Standard_LRS\"\r\n    \r\n      ip_configuration_name         = \"internal\"\r\n      private_ip_address_allocation = \"Dynamic\"\r\n    \r\n      public_ip_allocation_method = \"Static\"\r\n      public_ip_sku               = \"Standard\"\r\n    }\r\n\r\nmodules/virtualmachine/linux/main.tf\r\n\r\n    # Linux Virtual Machine\r\n    resource \"azurerm_linux_virtual_machine\" \"vm-linux\" {\r\n    \r\n      name                = var.linux_machine_name\r\n      location            = var.location\r\n      resource_group_name = var.resource_group_name\r\n      tags                = var.tags\r\n    \r\n      size                            = var.virtual_machine_size\r\n      admin_username                  = var.admin_username\r\n      disable_password_authentication = true\r\n      network_interface_ids = var.nic_id\r\n    \r\n      admin_ssh_key {\r\n        username   = var.admin_username\r\n        public_key = var.admin_ssh_public_key\r\n      }\r\n    \r\n      source_image_reference {\r\n    \r\n        publisher = var.source_image_publisher\r\n        offer     = var.source_image_offer\r\n        sku       = var.source_image_sku\r\n        version   = var.source_image_version\r\n      }\r\n    \r\n      plan {\r\n        name      = var.plan_name\r\n        product   = var.plan_product\r\n        publisher = var.plan_publisher\r\n      }\r\n      \r\n      os_disk {\r\n        caching              = var.operating_system_disk_cache\r\n        storage_account_type = var.operating_system_disk_type\r\n      }\r\n    }\r\n    \r\n    # Network Interfaces for Linux VM\r\n    \r\n    resource \"azurerm_network_interface\" \"nic-linux\" {\r\n      name                = var.linux_machine_name\r\n      location            = var.location\r\n      resource_group_name = var.resource_group_name\r\n      tags                = var.tags\r\n    \r\n      ip_configuration {\r\n        name = var.ip_configuration_name\r\n        subnet_id                     = var.subnet_id\r\n        private_ip_address_allocation = var.private_ip_address_allocation\r\n        public_ip_address_id          = azurerm_public_ip.pip-linux.id\r\n      }\r\n    }\r\n    resource \"azurerm_public_ip\" \"pip-linux\" {\r\n      name                = var.linux_machine_name\r\n      location            = var.location\r\n      resource_group_name = var.resource_group_name\r\n      tags                = var.tags\r\n    \r\n      allocation_method = var.public_ip_allocation_method\r\n      sku               = var.public_ip_sku\r\n    }\r\n\r\n\r\nmodules/virtualmachine/linux/variables.tf\r\n\r\n    # VM Name\r\n    variable \"linux_machine_name\" {\r\n      description = \"Linux Virtual Machine Name - If left blank generated from metadata module\"\r\n      type        = string\r\n      default     = \"\"\r\n    }\r\n    \r\n    variable \"resource_group_name\" {\r\n      description = \"Resource group name\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"location\" {\r\n      description = \"Azure region\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"tags\" {\r\n      description = \"tags to be applied to resources\"\r\n      type        = map(string)\r\n    }\r\n    \r\n    # VM Size\r\n    variable \"virtual_machine_size\" {\r\n      description = \"Instance size to be provisioned\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"admin_username\" {\r\n      description = \"names to be applied to resources\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"admin_ssh_public_key\" {\r\n      description = \"(Linux) Public SSH Key - Generated if left blank\"\r\n      type        = string\r\n      default     = \"\"\r\n      sensitive   = true\r\n    }\r\n    \r\n    # Operating System\r\n    variable \"source_image_publisher\" {\r\n      description = \"Operating System Publisher\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"source_image_offer\" {\r\n      description = \"Operating System Name\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"source_image_sku\" {\r\n      description = \"Operating System SKU\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"source_image_version\" {\r\n      description = \"Operating System Version\"\r\n      type        = string\r\n      default     = \"latest\"\r\n    }\r\n    \r\n    # Plan Block Variables\r\n    variable \"plan_name\" {\r\n      description = \"Plan Name\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"plan_product\" {\r\n      description = \"Plan Product\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"plan_publisher\" {\r\n      description = \"Plan Publisher\"\r\n      type        = string\r\n    }\r\n    \r\n    # Operating System Disk\r\n    variable \"operating_system_disk_cache\" {\r\n      description = \"Type of caching to use on the OS disk - Options: None, ReadOnly or ReadWrite\"\r\n      type        = string\r\n      default     = \"ReadWrite\"\r\n    }\r\n    \r\n    variable \"operating_system_disk_type\" {\r\n      description = \"Type of storage account to use with the OS disk - Options: Standard_LRS, StandardSSD_LRS or Premium_LRS\"\r\n      type        = string\r\n      default     = \"StandardSSD_LRS\"\r\n    }\r\n    \r\n    variable \"ip_configuration_name\" {\r\n      description = \"ip configuration name\"\r\n      type        = string\r\n      default     = \"\"\r\n    }\r\n    \r\n    # Networking\r\n    variable \"nic_id\" {\r\n      type        = list(string)\r\n      description = \"ID of the nic\"\r\n    }\r\n    \r\n    variable \"subnet_id\" {\r\n      type        = string\r\n      description = \"ID of the subnet\"\r\n    }\r\n    \r\n    variable \"private_ip_address_allocation\" {\r\n      type        = string\r\n      description = \"Private ip allocation method\"\r\n    }\r\n    \r\n    variable \"public_ip_allocation_method\" {\r\n      type        = string\r\n      description = \"Public ip allocation method\"\r\n    }\r\n    \r\n    variable \"public_ip_sku\" {\r\n      description = \"SKU to be used with this public IP - Basic or Standard\"\r\n      type        = string\r\n      default     = \"Standard\"\r\n    }\r\n\r\nmodules/virtualmachine/variables.tf\r\n\r\n    # Interface id\r\n    output \"nic_id\" {\r\n      description = \"ids of the vm nics provisoned.\"\r\n      value = azurerm_network_interface.nic-linux.id\r\n\r\n}\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I wouldn't want a separate modules to do this. module \"vm-ansiblecontroller\" { resource_group_name = module.rg-ansiblecontroller.resource_group_name location = local.location linux_machine_name = \"linux-test1\" tags = var.tags nic_id = [module.vm-ansiblecontroller.nic_id] subnet_id = module.subnet-networkcore.subnet_id virtual_machine_size = \"Standard_D2\" admin_username = \"jpadmin\" admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\") source_image_publisher = \"procomputers\" source_image_offer = \"rocky-lnx-8-latest\" source_image_sku = \"rocky-linux-8-latest\" source_image_version = \"8.5.20220222\" plan_name = \"rocky-lnx-8-latest\" plan_product = \"rocky-lnx-8-latest\" plan_publisher = \"procomputers\" operating_system_disk_cache = \"ReadWrite\" operating_system_disk_type = \"Standard_LRS\" ip_configuration_name = \"internal\" private_ip_address_allocation = \"Dynamic\" public_ip_allocation_method = \"Static\" public_ip_sku = \"Standard\" } modules/virtualmachine/linux/main.tf # Linux Virtual Machine resource \"azurerm_linux_virtual_machine\" \"vm-linux\" { name = var.linux_machine_name location = var.location resource_group_name = var.resource_group_name tags = var.tags size = var.virtual_machine_size admin_username = var.admin_username disable_password_authentication = true network_interface_ids = var.nic_id admin_ssh_key { username = var.admin_username public_key = var.admin_ssh_public_key } source_image_reference { publisher = var.source_image_publisher offer = var.source_image_offer sku = var.source_image_sku version = var.source_image_version } plan { name = var.plan_name product = var.plan_product publisher = var.plan_publisher } os_disk { caching = var.operating_system_disk_cache storage_account_type = var.operating_system_disk_type } } # Network Interfaces for Linux VM resource \"azurerm_network_interface\" \"nic-linux\" { name = var.linux_machine_name location = var.location resource_group_name = var.resource_group_name tags = var.tags ip_configuration { name = var.ip_configuration_name subnet_id = var.subnet_id private_ip_address_allocation = var.private_ip_address_allocation public_ip_address_id = azurerm_public_ip.pip-linux.id } } resource \"azurerm_public_ip\" \"pip-linux\" { name = var.linux_machine_name location = var.location resource_group_name = var.resource_group_name tags = var.tags allocation_method = var.public_ip_allocation_method sku = var.public_ip_sku } modules/virtualmachine/linux/variables.tf # VM Name variable \"linux_machine_name\" { description = \"Linux Virtual Machine Name - If left blank generated from metadata module\" type = string default = \"\" } variable \"resource_group_name\" { description = \"Resource group name\" type = string } variable \"location\" { description = \"Azure region\" type = string } variable \"tags\" { description = \"tags to be applied to resources\" type = map(string) } # VM Size variable \"virtual_machine_size\" { description = \"Instance size to be provisioned\" type = string } variable \"admin_username\" { description = \"names to be applied to resources\" type = string } variable \"admin_ssh_public_key\" { description = \"(Linux) Public SSH Key - Generated if left blank\" type = string default = \"\" sensitive = true } # Operating System variable \"source_image_publisher\" { description = \"Operating System Publisher\" type = string } variable \"source_image_offer\" { description = \"Operating System Name\" type = string } variable \"source_image_sku\" { description = \"Operating System SKU\" type = string } variable \"source_image_version\" { description = \"Operating System Version\" type = string default = \"latest\" } # Plan Block Variables variable \"plan_name\" { description = \"Plan Name\" type = string } variable \"plan_product\" { description = \"Plan Product\" type = string } variable \"plan_publisher\" { description = \"Plan Publisher\" type = string } # Operating System Disk variable \"operating_system_disk_cache\" { description = \"Type of caching to use on the OS disk - Options: None, ReadOnly or ReadWrite\" type = string default = \"ReadWrite\" } variable \"operating_system_disk_type\" { description = \"Type of storage account to use with the OS disk - Options: Standard_LRS, StandardSSD_LRS or Premium_LRS\" type = string default = \"StandardSSD_LRS\" } variable \"ip_configuration_name\" { description = \"ip configuration name\" type = string default = \"\" } # Networking variable \"nic_id\" { type = list(string) description = \"ID of the nic\" } variable \"subnet_id\" { type = string description = \"ID of the subnet\" } variable \"private_ip_address_allocation\" { type = string description = \"Private ip allocation method\" } variable \"public_ip_allocation_method\" { type = string description = \"Public ip allocation method\" } variable \"public_ip_sku\" { description = \"SKU to be used with this public IP - Basic or Standard\" type = string default = \"Standard\" } modules/virtualmachine/variables.tf # Interface id output \"nic_id\" { description = \"ids of the vm nics provisoned.\" value = azurerm_network_interface.nic-linux.id }", "keywords": ["networking", "instance", "storage", "test"]}]}, {"Id": "268132969", "PostHistoryTypeId": "1", "PostId": "71866512", "RevisionGUID": "7b44bb6e-d033-4ca2-b8f7-8f76322da0bb", "CreationDate": "2022-04-14T04:26:16.613", "UserId": "14147257", "Text": "Add the plan block as a conditional if statement", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "268132970", "PostHistoryTypeId": "3", "PostId": "71866512", "RevisionGUID": "7b44bb6e-d033-4ca2-b8f7-8f76322da0bb", "CreationDate": "2022-04-14T04:26:16.613", "UserId": "14147257", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "268148611", "PostHistoryTypeId": "5", "PostId": "71866512", "RevisionGUID": "58dbfea3-8d2a-4688-88b8-df563dc206fd", "CreationDate": "2022-04-14T09:44:06.283", "UserId": "14147257", "Comment": "added 1147 characters in body", "Text": "I am using terraform to deploy Linux VMs from the azure marketplace.\r\n\r\nI have set a plan block in the linux module and declared the variables in my main.tf.\r\n\r\nWhen running terraform plan/apply it works and builds the VM\r\n\r\nI'm wondering how I would go about modifying my module and the main.tf to add the plan block as a conditional if statement.  \r\n\r\nI would like to use this module to build both non-azure marketplace & azure marketplace vms.\r\n\r\n I wouldn't want a separate modules to do this.\r\n\r\n    module \"vm-ansiblecontroller\" {\r\n      resource_group_name = module.rg-ansiblecontroller.resource_group_name\r\n      location            = local.location\r\n      linux_machine_name  = \"linux-test1\"\r\n      tags                = var.tags\r\n    \r\n      nic_id = [module.vm-ansiblecontroller.nic_id]\r\n      subnet_id = module.subnet-networkcore.subnet_id\r\n    \r\n      virtual_machine_size = \"Standard_D2\"\r\n    \r\n      admin_username       = \"jpadmin\"\r\n      admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\")\r\n    \r\n      source_image_publisher = \"procomputers\"\r\n      source_image_offer     = \"rocky-lnx-8-latest\"\r\n      source_image_sku       = \"rocky-linux-8-latest\"\r\n      source_image_version   = \"8.5.20220222\"\r\n    \r\n      plan_name = \"rocky-linux-8-latest\"\r\n      plan_product = \"rocky-lnx-8-latest\"\r\n      plan_publisher = \"procomputers\"\r\n      \r\n      operating_system_disk_cache = \"ReadWrite\"\r\n      operating_system_disk_type  = \"Standard_LRS\"\r\n    \r\n      ip_configuration_name         = \"internal\"\r\n      private_ip_address_allocation = \"Dynamic\"\r\n    \r\n      public_ip_allocation_method = \"Static\"\r\n      public_ip_sku               = \"Standard\"\r\n    \r\n       depends_on = [\r\n        module.rg-networkcore,\r\n        module.vnet-networkcore,\r\n        module.subnet-networkcore\r\n      ]\r\n    }\r\n    \r\n    module \"vm-devjp\" {\r\n      resource_group_name = module.rg-ansiblecontroller.resource_group_name\r\n      location            = local.location\r\n      linux_machine_name  = \"linux-test2\"\r\n      tags                = var.tags\r\n    \r\n      nic_id = [module.vm-ansiblecontroller.nic_id]\r\n      subnet_id = module.subnet-networkcore.subnet_id\r\n    \r\n      virtual_machine_size = \"Standard_D2\"\r\n    \r\n      admin_username       = \"jpadmin\"\r\n      admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\")\r\n    \r\n      source_image_publisher = \"Canonical\"\r\n      source_image_offer     = \"UbuntuServer\"\r\n      source_image_sku       = \"16.04-LTS\"\r\n      source_image_version   = \"latest\"\r\n    \r\n      operating_system_disk_cache = \"ReadWrite\"\r\n      operating_system_disk_type  = \"Standard_LRS\"\r\n    \r\n      ip_configuration_name         = \"internal\"\r\n      private_ip_address_allocation = \"Dynamic\"\r\n    \r\n      public_ip_allocation_method = \"Static\"\r\n      public_ip_sku               = \"Standard\"\r\n    \r\n    }\r\n\r\nmodules/virtualmachine/linux/main.tf\r\n\r\n    # Linux Virtual Machine\r\n    resource \"azurerm_linux_virtual_machine\" \"vm-linux\" {\r\n    \r\n      name                = var.linux_machine_name\r\n      location            = var.location\r\n      resource_group_name = var.resource_group_name\r\n      tags                = var.tags\r\n    \r\n      size                            = var.virtual_machine_size\r\n      admin_username                  = var.admin_username\r\n      disable_password_authentication = true\r\n      network_interface_ids = var.nic_id\r\n    \r\n      admin_ssh_key {\r\n        username   = var.admin_username\r\n        public_key = var.admin_ssh_public_key\r\n      }\r\n    \r\n      source_image_reference {\r\n    \r\n        publisher = var.source_image_publisher\r\n        offer     = var.source_image_offer\r\n        sku       = var.source_image_sku\r\n        version   = var.source_image_version\r\n      }\r\n    \r\n      plan {\r\n        name      = var.plan_name\r\n        product   = var.plan_product\r\n        publisher = var.plan_publisher\r\n      }\r\n      \r\n      os_disk {\r\n        caching              = var.operating_system_disk_cache\r\n        storage_account_type = var.operating_system_disk_type\r\n      }\r\n    }\r\n    \r\n    # Network Interfaces for Linux VM\r\n    \r\n    resource \"azurerm_network_interface\" \"nic-linux\" {\r\n      name                = var.linux_machine_name\r\n      location            = var.location\r\n      resource_group_name = var.resource_group_name\r\n      tags                = var.tags\r\n    \r\n      ip_configuration {\r\n        name = var.ip_configuration_name\r\n        subnet_id                     = var.subnet_id\r\n        private_ip_address_allocation = var.private_ip_address_allocation\r\n        public_ip_address_id          = azurerm_public_ip.pip-linux.id\r\n      }\r\n    }\r\n    resource \"azurerm_public_ip\" \"pip-linux\" {\r\n      name                = var.linux_machine_name\r\n      location            = var.location\r\n      resource_group_name = var.resource_group_name\r\n      tags                = var.tags\r\n    \r\n      allocation_method = var.public_ip_allocation_method\r\n      sku               = var.public_ip_sku\r\n    }\r\n\r\n\r\nmodules/virtualmachine/linux/variables.tf\r\n\r\n    # VM Name\r\n    variable \"linux_machine_name\" {\r\n      description = \"Linux Virtual Machine Name - If left blank generated from metadata module\"\r\n      type        = string\r\n      default     = \"\"\r\n    }\r\n    \r\n    variable \"resource_group_name\" {\r\n      description = \"Resource group name\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"location\" {\r\n      description = \"Azure region\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"tags\" {\r\n      description = \"tags to be applied to resources\"\r\n      type        = map(string)\r\n    }\r\n    \r\n    # VM Size\r\n    variable \"virtual_machine_size\" {\r\n      description = \"Instance size to be provisioned\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"admin_username\" {\r\n      description = \"names to be applied to resources\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"admin_ssh_public_key\" {\r\n      description = \"(Linux) Public SSH Key - Generated if left blank\"\r\n      type        = string\r\n      default     = \"\"\r\n      sensitive   = true\r\n    }\r\n    \r\n    # Operating System\r\n    variable \"source_image_publisher\" {\r\n      description = \"Operating System Publisher\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"source_image_offer\" {\r\n      description = \"Operating System Name\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"source_image_sku\" {\r\n      description = \"Operating System SKU\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"source_image_version\" {\r\n      description = \"Operating System Version\"\r\n      type        = string\r\n      default     = \"latest\"\r\n    }\r\n    \r\n    # Plan Block Variables\r\n    variable \"plan_name\" {\r\n      description = \"Plan Name\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"plan_product\" {\r\n      description = \"Plan Product\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"plan_publisher\" {\r\n      description = \"Plan Publisher\"\r\n      type        = string\r\n    }\r\n    \r\n    # Operating System Disk\r\n    variable \"operating_system_disk_cache\" {\r\n      description = \"Type of caching to use on the OS disk - Options: None, ReadOnly or ReadWrite\"\r\n      type        = string\r\n      default     = \"ReadWrite\"\r\n    }\r\n    \r\n    variable \"operating_system_disk_type\" {\r\n      description = \"Type of storage account to use with the OS disk - Options: Standard_LRS, StandardSSD_LRS or Premium_LRS\"\r\n      type        = string\r\n      default     = \"StandardSSD_LRS\"\r\n    }\r\n    \r\n    variable \"ip_configuration_name\" {\r\n      description = \"ip configuration name\"\r\n      type        = string\r\n      default     = \"\"\r\n    }\r\n    \r\n    # Networking\r\n    variable \"nic_id\" {\r\n      type        = list(string)\r\n      description = \"ID of the nic\"\r\n    }\r\n    \r\n    variable \"subnet_id\" {\r\n      type        = string\r\n      description = \"ID of the subnet\"\r\n    }\r\n    \r\n    variable \"private_ip_address_allocation\" {\r\n      type        = string\r\n      description = \"Private ip allocation method\"\r\n    }\r\n    \r\n    variable \"public_ip_allocation_method\" {\r\n      type        = string\r\n      description = \"Public ip allocation method\"\r\n    }\r\n    \r\n    variable \"public_ip_sku\" {\r\n      description = \"SKU to be used with this public IP - Basic or Standard\"\r\n      type        = string\r\n      default     = \"Standard\"\r\n    }\r\n\r\nmodules/virtualmachine/variables.tf\r\n\r\n    # Interface id\r\n    output \"nic_id\" {\r\n      description = \"ids of the vm nics provisoned.\"\r\n      value = azurerm_network_interface.nic-linux.id\r\n\r\n}\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I wouldn't want a separate modules to do this. module \"vm-ansiblecontroller\" { resource_group_name = module.rg-ansiblecontroller.resource_group_name location = local.location linux_machine_name = \"linux-test1\" tags = var.tags nic_id = [module.vm-ansiblecontroller.nic_id] subnet_id = module.subnet-networkcore.subnet_id virtual_machine_size = \"Standard_D2\" admin_username = \"jpadmin\" admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\") source_image_publisher = \"procomputers\" source_image_offer = \"rocky-lnx-8-latest\" source_image_sku = \"rocky-linux-8-latest\" source_image_version = \"8.5.20220222\" plan_name = \"rocky-linux-8-latest\" plan_product = \"rocky-lnx-8-latest\" plan_publisher = \"procomputers\" operating_system_disk_cache = \"ReadWrite\" operating_system_disk_type = \"Standard_LRS\" ip_configuration_name = \"internal\" private_ip_address_allocation = \"Dynamic\" public_ip_allocation_method = \"Static\" public_ip_sku = \"Standard\" depends_on = [ module.rg-networkcore, module.vnet-networkcore, module.subnet-networkcore ] } module \"vm-devjp\" { resource_group_name = module.rg-ansiblecontroller.resource_group_name location = local.location linux_machine_name = \"linux-test2\" tags = var.tags nic_id = [module.vm-ansiblecontroller.nic_id] subnet_id = module.subnet-networkcore.subnet_id virtual_machine_size = \"Standard_D2\" admin_username = \"jpadmin\" admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\") source_image_publisher = \"Canonical\" source_image_offer = \"UbuntuServer\" source_image_sku = \"16.04-LTS\" source_image_version = \"latest\" operating_system_disk_cache = \"ReadWrite\" operating_system_disk_type = \"Standard_LRS\" ip_configuration_name = \"internal\" private_ip_address_allocation = \"Dynamic\" public_ip_allocation_method = \"Static\" public_ip_sku = \"Standard\" } modules/virtualmachine/linux/main.tf # Linux Virtual Machine resource \"azurerm_linux_virtual_machine\" \"vm-linux\" { name = var.linux_machine_name location = var.location resource_group_name = var.resource_group_name tags = var.tags size = var.virtual_machine_size admin_username = var.admin_username disable_password_authentication = true network_interface_ids = var.nic_id admin_ssh_key { username = var.admin_username public_key = var.admin_ssh_public_key } source_image_reference { publisher = var.source_image_publisher offer = var.source_image_offer sku = var.source_image_sku version = var.source_image_version } plan { name = var.plan_name product = var.plan_product publisher = var.plan_publisher } os_disk { caching = var.operating_system_disk_cache storage_account_type = var.operating_system_disk_type } } # Network Interfaces for Linux VM resource \"azurerm_network_interface\" \"nic-linux\" { name = var.linux_machine_name location = var.location resource_group_name = var.resource_group_name tags = var.tags ip_configuration { name = var.ip_configuration_name subnet_id = var.subnet_id private_ip_address_allocation = var.private_ip_address_allocation public_ip_address_id = azurerm_public_ip.pip-linux.id } } resource \"azurerm_public_ip\" \"pip-linux\" { name = var.linux_machine_name location = var.location resource_group_name = var.resource_group_name tags = var.tags allocation_method = var.public_ip_allocation_method sku = var.public_ip_sku } modules/virtualmachine/linux/variables.tf # VM Name variable \"linux_machine_name\" { description = \"Linux Virtual Machine Name - If left blank generated from metadata module\" type = string default = \"\" } variable \"resource_group_name\" { description = \"Resource group name\" type = string } variable \"location\" { description = \"Azure region\" type = string } variable \"tags\" { description = \"tags to be applied to resources\" type = map(string) } # VM Size variable \"virtual_machine_size\" { description = \"Instance size to be provisioned\" type = string } variable \"admin_username\" { description = \"names to be applied to resources\" type = string } variable \"admin_ssh_public_key\" { description = \"(Linux) Public SSH Key - Generated if left blank\" type = string default = \"\" sensitive = true } # Operating System variable \"source_image_publisher\" { description = \"Operating System Publisher\" type = string } variable \"source_image_offer\" { description = \"Operating System Name\" type = string } variable \"source_image_sku\" { description = \"Operating System SKU\" type = string } variable \"source_image_version\" { description = \"Operating System Version\" type = string default = \"latest\" } # Plan Block Variables variable \"plan_name\" { description = \"Plan Name\" type = string } variable \"plan_product\" { description = \"Plan Product\" type = string } variable \"plan_publisher\" { description = \"Plan Publisher\" type = string } # Operating System Disk variable \"operating_system_disk_cache\" { description = \"Type of caching to use on the OS disk - Options: None, ReadOnly or ReadWrite\" type = string default = \"ReadWrite\" } variable \"operating_system_disk_type\" { description = \"Type of storage account to use with the OS disk - Options: Standard_LRS, StandardSSD_LRS or Premium_LRS\" type = string default = \"StandardSSD_LRS\" } variable \"ip_configuration_name\" { description = \"ip configuration name\" type = string default = \"\" } # Networking variable \"nic_id\" { type = list(string) description = \"ID of the nic\" } variable \"subnet_id\" { type = string description = \"ID of the subnet\" } variable \"private_ip_address_allocation\" { type = string description = \"Private ip allocation method\" } variable \"public_ip_allocation_method\" { type = string description = \"Public ip allocation method\" } variable \"public_ip_sku\" { description = \"SKU to be used with this public IP - Basic or Standard\" type = string default = \"Standard\" } modules/virtualmachine/variables.tf # Interface id output \"nic_id\" { description = \"ids of the vm nics provisoned.\" value = azurerm_network_interface.nic-linux.id }", "keywords": ["networking", "instance", "storage", "test"]}]}, {"Id": "268149598", "PostHistoryTypeId": "6", "PostId": "71866512", "RevisionGUID": "82e11a3a-0cd0-4ae6-b84e-71e356860659", "CreationDate": "2022-04-14T09:59:02.637", "UserId": "248823", "Comment": "edited tags", "Text": "<azure><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "268150527", "PostHistoryTypeId": "5", "PostId": "71866512", "RevisionGUID": "a06545d0-38cd-4b3c-9d73-a29f0a7fba19", "CreationDate": "2022-04-14T10:14:19.943", "UserId": "14147257", "Comment": "deleted 2165 characters in body", "Text": "I am using terraform to deploy Linux VMs from the azure marketplace.\r\n\r\nI have set a plan block in the linux module and declared the variables in my main.tf.\r\n\r\nWhen running terraform plan/apply it works and builds the VM\r\n\r\nI'm wondering how I would go about modifying my module and the main.tf to add the plan block as a conditional if statement.  \r\n\r\nI would like to use this module to build both non-azure marketplace & azure marketplace vms.\r\n\r\n I wouldn't want a separate modules to do this.\r\n\r\n\r\n    module \"vm-ansiblecontroller\" {\r\n      resource_group_name = module.rg-ansiblecontroller.resource_group_name\r\n      location            = local.location\r\n      linux_machine_name  = \"linux-test1\"\r\n      tags                = var.tags\r\n    \r\n      nic_id = [module.vm-ansiblecontroller.nic_id]\r\n      subnet_id = module.subnet-networkcore.subnet_id\r\n    \r\n      virtual_machine_size = \"Standard_D2\"\r\n    \r\n      admin_username       = \"jpadmin\"\r\n      admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\")\r\n    \r\n      source_image_publisher = \"procomputers\"\r\n      source_image_offer     = \"rocky-lnx-8-latest\"\r\n      source_image_sku       = \"rocky-linux-8-latest\"\r\n      source_image_version   = \"8.5.20220222\"\r\n    \r\n      plan_name = \"rocky-linux-8-latest\"\r\n      plan_product = \"rocky-lnx-8-latest\"\r\n      plan_publisher = \"procomputers\"\r\n      \r\n      operating_system_disk_cache = \"ReadWrite\"\r\n      operating_system_disk_type  = \"Standard_LRS\"\r\n    \r\n      ip_configuration_name         = \"internal\"\r\n      private_ip_address_allocation = \"Dynamic\"\r\n    \r\n      public_ip_allocation_method = \"Static\"\r\n      public_ip_sku               = \"Standard\"\r\n    \r\n       depends_on = [\r\n        module.rg-networkcore,\r\n        module.vnet-networkcore,\r\n        module.subnet-networkcore\r\n      ]\r\n    }\r\n    \r\n    module \"vm-jpdev\" {\r\n      resource_group_name = module.rg-jpdev-vm.resource_group_name\r\n      location            = local.location\r\n      linux_machine_name  = \"linux-test2\"\r\n      tags                = var.tags\r\n    \r\n      nic_id = [module.vm-jpdev.nic_id]\r\n      subnet_id = module.subnet-networkcore.subnet_id\r\n    \r\n      virtual_machine_size = \"Standard_D2\"\r\n    \r\n      admin_username       = \"jpadmin\"\r\n      admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\")\r\n    \r\n      source_image_publisher = \"Canonical\"\r\n      source_image_offer     = \"UbuntuServer\"\r\n      source_image_sku       = \"16.04-LTS\"\r\n      source_image_version   = \"latest\"\r\n    \r\n      operating_system_disk_cache = \"ReadWrite\"\r\n      operating_system_disk_type  = \"Standard_LRS\"\r\n    \r\n      ip_configuration_name         = \"internal\"\r\n      private_ip_address_allocation = \"Dynamic\"\r\n    \r\n      public_ip_allocation_method = \"Static\"\r\n      public_ip_sku               = \"Standard\"\r\n    \r\n    }\r\n\r\nmodules/virtualmachine/linux/variables.tf\r\n\r\n    # VM Name\r\n    variable \"linux_machine_name\" {\r\n      description = \"Linux Virtual Machine Name - If left blank generated from metadata module\"\r\n      type        = string\r\n      default     = \"\"\r\n    }\r\n    \r\n    variable \"resource_group_name\" {\r\n      description = \"Resource group name\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"location\" {\r\n      description = \"Azure region\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"tags\" {\r\n      description = \"tags to be applied to resources\"\r\n      type        = map(string)\r\n    }\r\n    \r\n    # VM Size\r\n    variable \"virtual_machine_size\" {\r\n      description = \"Instance size to be provisioned\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"admin_username\" {\r\n      description = \"names to be applied to resources\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"admin_ssh_public_key\" {\r\n      description = \"(Linux) Public SSH Key - Generated if left blank\"\r\n      type        = string\r\n      default     = \"\"\r\n      sensitive   = true\r\n    }\r\n    \r\n    # Operating System\r\n    variable \"source_image_publisher\" {\r\n      description = \"Operating System Publisher\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"source_image_offer\" {\r\n      description = \"Operating System Name\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"source_image_sku\" {\r\n      description = \"Operating System SKU\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"source_image_version\" {\r\n      description = \"Operating System Version\"\r\n      type        = string\r\n      default     = \"latest\"\r\n    }\r\n    \r\n    # Plan Block Variables\r\n    variable \"plan_name\" {\r\n      description = \"Plan Name\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"plan_product\" {\r\n      description = \"Plan Product\"\r\n      type        = string\r\n    }\r\n    \r\n    variable \"plan_publisher\" {\r\n      description = \"Plan Publisher\"\r\n      type        = string\r\n    }\r\n    \r\n    # Operating System Disk\r\n    variable \"operating_system_disk_cache\" {\r\n      description = \"Type of caching to use on the OS disk - Options: None, ReadOnly or ReadWrite\"\r\n      type        = string\r\n      default     = \"ReadWrite\"\r\n    }\r\n    \r\n    variable \"operating_system_disk_type\" {\r\n      description = \"Type of storage account to use with the OS disk - Options: Standard_LRS, StandardSSD_LRS or Premium_LRS\"\r\n      type        = string\r\n      default     = \"StandardSSD_LRS\"\r\n    }\r\n    \r\n    variable \"ip_configuration_name\" {\r\n      description = \"ip configuration name\"\r\n      type        = string\r\n      default     = \"\"\r\n    }\r\n    \r\n    # Networking\r\n    variable \"nic_id\" {\r\n      type        = list(string)\r\n      description = \"ID of the nic\"\r\n    }\r\n    \r\n    variable \"subnet_id\" {\r\n      type        = string\r\n      description = \"ID of the subnet\"\r\n    }\r\n    \r\n    variable \"private_ip_address_allocation\" {\r\n      type        = string\r\n      description = \"Private ip allocation method\"\r\n    }\r\n    \r\n    variable \"public_ip_allocation_method\" {\r\n      type        = string\r\n      description = \"Public ip allocation method\"\r\n    }\r\n    \r\n    variable \"public_ip_sku\" {\r\n      description = \"SKU to be used with this public IP - Basic or Standard\"\r\n      type        = string\r\n      default     = \"Standard\"\r\n    }\r\n\r\nmodules/virtualmachine/variables.tf\r\n\r\n    # Interface id\r\n    output \"nic_id\" {\r\n      description = \"ids of the vm nics provisoned.\"\r\n      value = azurerm_network_interface.nic-linux.id\r\n\r\n}\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I wouldn't want a separate modules to do this. module \"vm-ansiblecontroller\" { resource_group_name = module.rg-ansiblecontroller.resource_group_name location = local.location linux_machine_name = \"linux-test1\" tags = var.tags nic_id = [module.vm-ansiblecontroller.nic_id] subnet_id = module.subnet-networkcore.subnet_id virtual_machine_size = \"Standard_D2\" admin_username = \"jpadmin\" admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\") source_image_publisher = \"procomputers\" source_image_offer = \"rocky-lnx-8-latest\" source_image_sku = \"rocky-linux-8-latest\" source_image_version = \"8.5.20220222\" plan_name = \"rocky-linux-8-latest\" plan_product = \"rocky-lnx-8-latest\" plan_publisher = \"procomputers\" operating_system_disk_cache = \"ReadWrite\" operating_system_disk_type = \"Standard_LRS\" ip_configuration_name = \"internal\" private_ip_address_allocation = \"Dynamic\" public_ip_allocation_method = \"Static\" public_ip_sku = \"Standard\" depends_on = [ module.rg-networkcore, module.vnet-networkcore, module.subnet-networkcore ] } module \"vm-jpdev\" { resource_group_name = module.rg-jpdev-vm.resource_group_name location = local.location linux_machine_name = \"linux-test2\" tags = var.tags nic_id = [module.vm-jpdev.nic_id] subnet_id = module.subnet-networkcore.subnet_id virtual_machine_size = \"Standard_D2\" admin_username = \"jpadmin\" admin_ssh_public_key = file(\"~/.ssh/id_rsa.pub\") source_image_publisher = \"Canonical\" source_image_offer = \"UbuntuServer\" source_image_sku = \"16.04-LTS\" source_image_version = \"latest\" operating_system_disk_cache = \"ReadWrite\" operating_system_disk_type = \"Standard_LRS\" ip_configuration_name = \"internal\" private_ip_address_allocation = \"Dynamic\" public_ip_allocation_method = \"Static\" public_ip_sku = \"Standard\" } modules/virtualmachine/linux/variables.tf # VM Name variable \"linux_machine_name\" { description = \"Linux Virtual Machine Name - If left blank generated from metadata module\" type = string default = \"\" } variable \"resource_group_name\" { description = \"Resource group name\" type = string } variable \"location\" { description = \"Azure region\" type = string } variable \"tags\" { description = \"tags to be applied to resources\" type = map(string) } # VM Size variable \"virtual_machine_size\" { description = \"Instance size to be provisioned\" type = string } variable \"admin_username\" { description = \"names to be applied to resources\" type = string } variable \"admin_ssh_public_key\" { description = \"(Linux) Public SSH Key - Generated if left blank\" type = string default = \"\" sensitive = true } # Operating System variable \"source_image_publisher\" { description = \"Operating System Publisher\" type = string } variable \"source_image_offer\" { description = \"Operating System Name\" type = string } variable \"source_image_sku\" { description = \"Operating System SKU\" type = string } variable \"source_image_version\" { description = \"Operating System Version\" type = string default = \"latest\" } # Plan Block Variables variable \"plan_name\" { description = \"Plan Name\" type = string } variable \"plan_product\" { description = \"Plan Product\" type = string } variable \"plan_publisher\" { description = \"Plan Publisher\" type = string } # Operating System Disk variable \"operating_system_disk_cache\" { description = \"Type of caching to use on the OS disk - Options: None, ReadOnly or ReadWrite\" type = string default = \"ReadWrite\" } variable \"operating_system_disk_type\" { description = \"Type of storage account to use with the OS disk - Options: Standard_LRS, StandardSSD_LRS or Premium_LRS\" type = string default = \"StandardSSD_LRS\" } variable \"ip_configuration_name\" { description = \"ip configuration name\" type = string default = \"\" } # Networking variable \"nic_id\" { type = list(string) description = \"ID of the nic\" } variable \"subnet_id\" { type = string description = \"ID of the subnet\" } variable \"private_ip_address_allocation\" { type = string description = \"Private ip allocation method\" } variable \"public_ip_allocation_method\" { type = string description = \"Public ip allocation method\" } variable \"public_ip_sku\" { description = \"SKU to be used with this public IP - Basic or Standard\" type = string default = \"Standard\" } modules/virtualmachine/variables.tf # Interface id output \"nic_id\" { description = \"ids of the vm nics provisoned.\" value = azurerm_network_interface.nic-linux.id }", "keywords": ["networking", "instance", "storage", "test"]}]}], "answers": [{"Id": "71869763", "PostTypeId": "2", "ParentId": "71866512", "CreationDate": "2022-04-14T09:58:52.233", "Score": "1", "Body": "<p>You can use <a href=\"https://www.terraform.io/language/expressions/dynamic-blocks\" rel=\"nofollow noreferrer\">dynamic blocks</a> for that:</p>\n<pre><code>resource &quot;azurerm_linux_virtual_machine&quot; &quot;vm-linux&quot; {\n\n  #....\n\n  dynamic &quot;plan&quot; {\n    for_each    =  var.plan_product == &quot;rocky-lnx-8-latest&quot; ? [1] : []\n    content {\n      name      = var.plan_name\n      product   = var.plan_product\n      publisher = var.plan_publisher\n    }\n }\n  \n  # ... \n}\n</code></pre>\n", "OwnerUserId": "248823", "LastActivityDate": "2022-04-14T09:58:52.233", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "268149585", "PostHistoryTypeId": "2", "PostId": "71869763", "RevisionGUID": "f6fa8b1d-c46a-4af2-8d7d-8c2f3d4bcf63", "CreationDate": "2022-04-14T09:58:52.233", "UserId": "248823", "Text": "You can use [dynamic blocks][1] for that:\r\n\r\n\r\n```\r\nresource \"azurerm_linux_virtual_machine\" \"vm-linux\" {\r\n\r\n  #....\r\n\r\n  dynamic \"plan\" {\r\n    for_each    =  var.plan_product == \"rocky-lnx-8-latest\" ? [1] : []\r\n    content {\r\n      name      = var.plan_name\r\n      product   = var.plan_product\r\n      publisher = var.plan_publisher\r\n    }\r\n }\r\n  \r\n  # ... \r\n}\r\n````\r\n\r\n\r\n  [1]: https://www.terraform.io/language/expressions/dynamic-blocks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}