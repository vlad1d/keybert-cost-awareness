{"Id": "53440481", "PostTypeId": "1", "AcceptedAnswerId": "55028033", "CreationDate": "2018-11-23T03:55:00.380", "Score": "3", "ViewCount": "4075", "Body": "<p>I'm trying to provision a windows VM on Azure with Terraform and bootstrap it in the same time. The way I can think of is terraform provisioner. For testing purpose, I wrote the provisioner like this:</p>\n\n<pre><code>provisioner \"remote-exec\" {\n    inline = [\n      \"md c:/terraform\",\n    ]\n    connection {\n      type     = \"winrm\"\n      host   = \"${azurerm_network_interface.vmstamp.private_ip_address}\"\n      user     = \"${var.admin_username}\"\n      password = \"${var.admin_password}\"\n      https    = false\n      insecure = true\n      timeout = \"1m\"\n    }\n}\n</code></pre>\n\n<p>The template successfully provisioned the VM, but yield an error when trying to connect the VM with WinRM. </p>\n\n<pre><code>azurerm_virtual_machine.vmstamp: Still creating... (5m50s elapsed)\nazurerm_virtual_machine.vmstamp (remote-exec): Connecting to remote host via WinRM...\nazurerm_virtual_machine.vmstamp (remote-exec):   Host: 10.237.249.146\nazurerm_virtual_machine.vmstamp (remote-exec):   Port: 5985\nazurerm_virtual_machine.vmstamp (remote-exec):   User: azadmin\nazurerm_virtual_machine.vmstamp (remote-exec):   Password: true\nazurerm_virtual_machine.vmstamp (remote-exec):   HTTPS: true\nazurerm_virtual_machine.vmstamp (remote-exec):   Insecure: true\nazurerm_virtual_machine.vmstamp (remote-exec):   NTLM: false\nazurerm_virtual_machine.vmstamp (remote-exec):   CACert: false\nazurerm_virtual_machine.vmstamp: Still creating... (6m0s elapsed)\n\nError: Error applying plan:\n\n1 error(s) occurred:\n\n* azurerm_virtual_machine.vmstamp: timeout - last error: unknown error Post https://10.237.249.146:5985/wsman: dial tcp 10.237.249.146:5985: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\n</code></pre>\n\n<p>Several things I have tried:</p>\n\n<p>1) Was thinking about firewall issue. But packer can launch connect to the new built windows VM on the same laptop with below code:</p>\n\n<pre><code>\"communicator\": \"winrm\",\n\"winrm_use_ssl\": \"true\",\n\"winrm_insecure\": \"true\",\n\"winrm_timeout\": \"3m\",\n\"winrm_username\": \"packer\",\n</code></pre>\n\n<p>2) Tried <code>https=true</code> and <code>https=false</code>, both failed.</p>\n\n<p>3) Tried <code>use_ntlm=true</code> and <code>use_ntlm=false</code>, both failed.</p>\n\n<p>4) Tried <code>port=5985</code> and <code>port=5986</code>, both failed. 5986 is actually not listening in a new windows VM from market image.</p>\n\n<p>what's the correct configuration for terraform provisioner?</p>\n", "OwnerUserId": "10693732", "LastEditorUserId": "9331166", "LastEditDate": "2019-02-23T11:58:26.957", "LastActivityDate": "2019-03-06T16:37:35.720", "Title": "Terraform provisioner cannot winrm to new built Windows VM on Azure", "Tags": "<azure><terraform><azure-virtual-machine><winrm>", "AnswerCount": "3", "CommentCount": "13", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "93755617", "PostId": "53440481", "Score": "0", "Text": "Port 5985,5986 is not open inside Windows firewall.", "CreationDate": "2018-11-23T06:02:28.063", "UserId": "6997262", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93761371", "PostId": "53440481", "Score": "1", "Text": "Do you enable the winrm and allow the port 5985 and 5986 of the windows VM when you create it through Terraform?", "CreationDate": "2018-11-23T09:48:45.600", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93769421", "PostId": "53440481", "Score": "0", "Text": "I did verify that part. Actually 5986 is not opened, while 5986 is opened. @CharlesXu", "CreationDate": "2018-11-23T14:18:26.323", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93769452", "PostId": "53440481", "Score": "0", "Text": "When you say firewall is not opened, how can I access the Windows with packer using winrm?@ShuiShengbao", "CreationDate": "2018-11-23T14:19:33.633", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93771651", "PostId": "53440481", "Score": "0", "Text": "If you're trying to bootstrap the VM after provisioning it using Terraform, consider using an Azure Custom Script Extension: https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/custom-script-windows", "CreationDate": "2018-11-23T15:42:03.460", "UserId": "389946", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93779348", "PostId": "53440481", "Score": "0", "Text": "Yes, I can do it. But that is the way I don't wan to use for some governance consideration. Terraform provides this feature for years. I don't wan to give up so early. @KJH", "CreationDate": "2018-11-23T22:07:54.677", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Terraform provides this feature for years. ", "keywords": ["feature"]}]}, {"Id": "93781752", "PostId": "53440481", "Score": "0", "Text": "@DongkaiYu - you can use the Terraform resource `azurerm_virtual_machine_extension` to specify whatever CSE script you want to upload and run on the VM. That way it's all still in TF per your requirement.", "CreationDate": "2018-11-24T02:21:32.150", "UserId": "389946", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93781910", "PostId": "53440481", "Score": "0", "Text": "@DongkaiYu It just opens one port. So You can open the other port in the terraform and you also should make sure the WINRM enabled.", "CreationDate": "2018-11-24T02:41:36.700", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93793301", "PostId": "53440481", "Score": "0", "Text": "@KJH , as I said before. I don't want to give up so early. May take azure vm extension as the last choice.", "CreationDate": "2018-11-24T18:00:54.220", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93793344", "PostId": "53440481", "Score": "0", "Text": "@CharlesXu if Packer can do the same thing without enabling an extra port, why Terraform can't. Indeed, they are both HashiCorp products, right?", "CreationDate": "2018-11-24T18:03:36.420", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93793482", "PostId": "53440481", "Score": "0", "Text": "@CharlesXu if I can enable the other port in terraform when provisioning the VM, I will be able to run a powershell command as well. That's all I need right now. All my question is about how to run a command in the new built VM.", "CreationDate": "2018-11-24T18:12:05.783", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93818411", "PostId": "53440481", "Score": "0", "Text": "Do you allow the port 5985 both in the windows firewall and the NGS rules? If not, each one of them would also block your connection. Take a check.", "CreationDate": "2018-11-26T02:22:23.717", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93851626", "PostId": "53440481", "Score": "0", "Text": "@CharlesXu for windows firewall, I couldn't login the new built VM with terraform, so noway to enable or disable firewall. For NSG, they are in the same subnet, no NSG necessary", "CreationDate": "2018-11-26T23:42:53.123", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "186397896", "PostHistoryTypeId": "2", "PostId": "53440481", "RevisionGUID": "6a20d0ef-a812-4b6e-a25d-b55cd9f381aa", "CreationDate": "2018-11-23T03:55:00.380", "UserId": "10693732", "Text": "I'm trying to provision a windows VM on Azure with Terraform and bootstrap it in the same time. The way I can think of is terraform provisioner. For testing purpose, I wrote the provisioner like this:\r\n\r\n      provisioner \"remote-exec\" {\r\n    inline = [\r\n      \"md c:/terraform\",\r\n    ]\r\n    connection {\r\n      type     = \"winrm\"\r\n      host  = \"${azurerm_network_interface.vmstamp.private_ip_address}\"\r\n      user     = \"${var.admin_username}\"\r\n      password = \"${var.admin_password}\"\r\n      https    = false\r\n      insecure = true\r\n      timeout = \"1m\"\r\n   }\r\n\r\n  }\r\n\r\n\r\nThe template successfully provisioned the VM, but yield error when trying to connect the VM with WinRM. \r\n\r\n    azurerm_virtual_machine.vmstamp: Still creating... (5m50s elapsed)\r\n    azurerm_virtual_machine.vmstamp (remote-exec): Connecting to remote host via WinRM...\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Host: 10.237.249.146\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Port: 5985\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   User: azadmin\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Password: true\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   HTTPS: true\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Insecure: true\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   NTLM: false\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   CACert: false\r\n    azurerm_virtual_machine.vmstamp: Still creating... (6m0s elapsed)\r\n     \r\n    Error: Error applying plan:\r\n     \r\n    1 error(s) occurred:\r\n     \r\n    * azurerm_virtual_machine.vmstamp: timeout - last error: unknown error Post https://10.237.249.146:5985/wsman: dial tcp 10.237.249.146:5985: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\r\n\r\nSeveral things I have tried.\r\n\r\n1. Was thinking about firewall issue. But packer can launch connect to the new built windows VM on the same laptop with below code:\r\n\r\n      \"communicator\": \"winrm\",\r\n      \"winrm_use_ssl\": \"true\",\r\n      \"winrm_insecure\": \"true\",\r\n      \"winrm_timeout\": \"3m\",\r\n      \"winrm_username\": \"packer\",\r\n\r\n2. Tried https=true and https=false, both failed.\r\n3. Tried use_ntlm=true and use_ntlm=false, both failed.\r\n4. Tried port=5985 and port=5986, both failed. 5986 is actually not listening in a new windows VM from market image.\r\n\r\nwhat's the correct configuration for terraform provisioner?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For testing purpose, I wrote the provisioner like this: provisioner \"remote-exec\" { inline = [ \"md c:/terraform\", ] connection { type = \"winrm\" host = \"${azurerm_network_interface.vmstamp.private_ip_address}\" user = \"${var.admin_username}\" password = \"${var.admin_password}\" https = false insecure = true timeout = \"1m\" } } ", "keywords": ["test"]}]}, {"Id": "186397897", "PostHistoryTypeId": "1", "PostId": "53440481", "RevisionGUID": "6a20d0ef-a812-4b6e-a25d-b55cd9f381aa", "CreationDate": "2018-11-23T03:55:00.380", "UserId": "10693732", "Text": "Terraform provisioner cannot winrm to new built Windows VM on Azure", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "186397898", "PostHistoryTypeId": "3", "PostId": "53440481", "RevisionGUID": "6a20d0ef-a812-4b6e-a25d-b55cd9f381aa", "CreationDate": "2018-11-23T03:55:00.380", "UserId": "10693732", "Text": "<azure><terraform><winrm>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "186545205", "PostHistoryTypeId": "5", "PostId": "53440481", "RevisionGUID": "ebb40da2-5a79-48f0-b12c-7591737d125c", "CreationDate": "2018-11-26T03:04:33.243", "UserId": "9773937", "Comment": "added 60 characters in body", "Text": "I'm trying to provision a windows VM on Azure with Terraform and bootstrap it in the same time. The way I can think of is terraform provisioner. For testing purpose, I wrote the provisioner like this:\r\n\r\n          provisioner \"remote-exec\" {\r\n        inline = [\r\n          \"md c:/terraform\",\r\n        ]\r\n        connection {\r\n          type     = \"winrm\"\r\n          host  = \"${azurerm_network_interface.vmstamp.private_ip_address}\"\r\n          user     = \"${var.admin_username}\"\r\n          password = \"${var.admin_password}\"\r\n          https    = false\r\n          insecure = true\r\n          timeout = \"1m\"\r\n       }\r\n    \r\n      }\r\n\r\n\r\nThe template successfully provisioned the VM, but yield error when trying to connect the VM with WinRM. \r\n\r\n    azurerm_virtual_machine.vmstamp: Still creating... (5m50s elapsed)\r\n    azurerm_virtual_machine.vmstamp (remote-exec): Connecting to remote host via WinRM...\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Host: 10.237.249.146\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Port: 5985\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   User: azadmin\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Password: true\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   HTTPS: true\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Insecure: true\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   NTLM: false\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   CACert: false\r\n    azurerm_virtual_machine.vmstamp: Still creating... (6m0s elapsed)\r\n     \r\n    Error: Error applying plan:\r\n     \r\n    1 error(s) occurred:\r\n     \r\n    * azurerm_virtual_machine.vmstamp: timeout - last error: unknown error Post https://10.237.249.146:5985/wsman: dial tcp 10.237.249.146:5985: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\r\n\r\nSeveral things I have tried.\r\n\r\n1. Was thinking about firewall issue. But packer can launch connect to the new built windows VM on the same laptop with below code:\r\n\r\n      \"communicator\": \"winrm\",\r\n      \"winrm_use_ssl\": \"true\",\r\n      \"winrm_insecure\": \"true\",\r\n      \"winrm_timeout\": \"3m\",\r\n      \"winrm_username\": \"packer\",\r\n\r\n2. Tried https=true and https=false, both failed.\r\n3. Tried use_ntlm=true and use_ntlm=false, both failed.\r\n4. Tried port=5985 and port=5986, both failed. 5986 is actually not listening in a new windows VM from market image.\r\n\r\nwhat's the correct configuration for terraform provisioner?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For testing purpose, I wrote the provisioner like this: provisioner \"remote-exec\" { inline = [ \"md c:/terraform\", ] connection { type = \"winrm\" host = \"${azurerm_network_interface.vmstamp.private_ip_address}\" user = \"${var.admin_username}\" password = \"${var.admin_password}\" https = false insecure = true timeout = \"1m\" } } ", "keywords": ["test"]}]}, {"Id": "192269849", "PostHistoryTypeId": "6", "PostId": "53440481", "RevisionGUID": "33247013-f9b9-4e22-aa56-453673ef08b6", "CreationDate": "2019-02-23T11:58:26.957", "UserId": "9663070", "Comment": "This question is related to azure virtual machine", "Text": "<azure><terraform><azure-virtual-machine><winrm>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "192269850", "PostHistoryTypeId": "24", "PostId": "53440481", "RevisionGUID": "33247013-f9b9-4e22-aa56-453673ef08b6", "CreationDate": "2019-02-23T11:58:26.957", "Comment": "Proposed by 9663070 approved by -1 edit id of 4157633", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "192269851", "PostHistoryTypeId": "5", "PostId": "53440481", "RevisionGUID": "f74b4c24-4e0b-4f5b-9c16-08e62e9b329c", "CreationDate": "2019-02-23T11:58:26.957", "UserId": "9331166", "Comment": "deleted 2 characters in body", "Text": "I'm trying to provision a windows VM on Azure with Terraform and bootstrap it in the same time. The way I can think of is terraform provisioner. For testing purpose, I wrote the provisioner like this:\r\n\r\n    provisioner \"remote-exec\" {\r\n        inline = [\r\n          \"md c:/terraform\",\r\n        ]\r\n        connection {\r\n          type     = \"winrm\"\r\n          host  = \"${azurerm_network_interface.vmstamp.private_ip_address}\"\r\n          user     = \"${var.admin_username}\"\r\n          password = \"${var.admin_password}\"\r\n          https    = false\r\n          insecure = true\r\n          timeout = \"1m\"\r\n        }\r\n    }\r\n\r\n\r\nThe template successfully provisioned the VM, but yield an error when trying to connect the VM with WinRM. \r\n\r\n    azurerm_virtual_machine.vmstamp: Still creating... (5m50s elapsed)\r\n    azurerm_virtual_machine.vmstamp (remote-exec): Connecting to remote host via WinRM...\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Host: 10.237.249.146\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Port: 5985\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   User: azadmin\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Password: true\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   HTTPS: true\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   Insecure: true\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   NTLM: false\r\n    azurerm_virtual_machine.vmstamp (remote-exec):   CACert: false\r\n    azurerm_virtual_machine.vmstamp: Still creating... (6m0s elapsed)\r\n     \r\n    Error: Error applying plan:\r\n     \r\n    1 error(s) occurred:\r\n     \r\n    * azurerm_virtual_machine.vmstamp: timeout - last error: unknown error Post https://10.237.249.146:5985/wsman: dial tcp 10.237.249.146:5985: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\r\n\r\nSeveral things I have tried:\r\n\r\n1) Was thinking about firewall issue. But packer can launch connect to the new built windows VM on the same laptop with below code:\r\n\r\n    \"communicator\": \"winrm\",\r\n    \"winrm_use_ssl\": \"true\",\r\n    \"winrm_insecure\": \"true\",\r\n    \"winrm_timeout\": \"3m\",\r\n    \"winrm_username\": \"packer\",\r\n\r\n2) Tried `https=true` and `https=false`, both failed.\r\n\r\n3) Tried `use_ntlm=true` and `use_ntlm=false`, both failed.\r\n\r\n4) Tried `port=5985` and `port=5986`, both failed. 5986 is actually not listening in a new windows VM from market image.\r\n\r\nwhat's the correct configuration for terraform provisioner?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For testing purpose, I wrote the provisioner like this: provisioner \"remote-exec\" { inline = [ \"md c:/terraform\", ] connection { type = \"winrm\" host = \"${azurerm_network_interface.vmstamp.private_ip_address}\" user = \"${var.admin_username}\" password = \"${var.admin_password}\" https = false insecure = true timeout = \"1m\" } } ", "keywords": ["test"]}]}], "answers": [{"Id": "55028033", "PostTypeId": "2", "ParentId": "53440481", "CreationDate": "2019-03-06T16:37:35.720", "Score": "1", "Body": "<p>I later figured out that winrm we need add a certificate to enable winrm. And to add the certificate, we need create a key store first and storage account as well. Packer does those steps for us, while terraform doesn't. So, we have to build those steps in terraform template to enable certificate and then enable winrm.\nThe initiative was to bootstrap a windows vm without having to create additional resources like storage account or key store, because I need clean them up after provisioning which will complicate the template. If I have to create additional resource anyway, I would prefer using Azure VM extensions, because it doesn't need winrm port 5985 to be enabled on the NSGs, which is another big governance issue. </p>\n", "OwnerUserId": "10693732", "LastActivityDate": "2019-03-06T16:37:35.720", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "193046396", "PostHistoryTypeId": "2", "PostId": "55028033", "RevisionGUID": "c4b686c3-e376-4f84-b8e2-a0f74243827e", "CreationDate": "2019-03-06T16:37:35.720", "UserId": "10693732", "Text": "I later figured out that winrm we need add a certificate to enable winrm. And to add the certificate, we need create a key store first and storage account as well. Packer does those steps for us, while terraform doesn't. So, we have to build those steps in terraform template to enable certificate and then enable winrm.\r\nThe initiative was to bootstrap a windows vm without having to create additional resources like storage account or key store, because I need clean them up after provisioning which will complicate the template. If I have to create additional resource anyway, I would prefer using Azure VM extensions, because it doesn't need winrm port 5985 to be enabled on the NSGs, which is another big governance issue. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "And to add the certificate, we need create a key store first and storage account as well. ", "keywords": ["storage"]}, {"source": "Text", "text": "The initiative was to bootstrap a windows vm without having to create additional resources like storage account or key store, because I need clean them up after provisioning which will complicate the template. ", "keywords": ["storage"]}]}], "filtered-sentences": [{"source": "Body", "text": "And to add the certificate, we need create a key store first and storage account as well. ", "keywords": ["storage"]}, {"source": "Body", "text": "The initiative was to bootstrap a windows vm without having to create additional resources like storage account or key store, because I need clean them up after provisioning which will complicate the template. ", "keywords": ["storage"]}]}, {"Id": "53476984", "PostTypeId": "2", "ParentId": "53440481", "CreationDate": "2018-11-26T08:13:56.780", "Score": "0", "Body": "<p>With your issue, I made the test. You can see the result for the windows image through Packer:</p>\n\n<p><a href=\"https://i.stack.imgur.com/qk0Ah.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/qk0Ah.png\" alt=\"enter image description here\"></a></p>\n\n<p>You can see that there is also a timeout for the winrm. And another test for Terraform I also got a timeout for the winrm. So I would suggest you can enable the winrm with a vm extension, make sure the port 5985 opened and then use the provisioner to do what you want.</p>\n\n<p><strong>Update</strong></p>\n\n<p>Maybe there is something missed so I did not succeed like you. But there is a process should pay attention to that Packer set the certificate's URL. The document <a href=\"https://learn.microsoft.com/en-us/azure/virtual-machines/windows/winrm\" rel=\"nofollow noreferrer\">here</a> also shows that how to enable winrm with the certificate's URL if you want to use it. So I think Packer just do it himself, but Terraform does not do it for you. </p>\n", "OwnerUserId": "9773937", "LastEditorUserId": "9773937", "LastEditDate": "2018-11-27T01:46:36.210", "LastActivityDate": "2018-11-27T01:46:36.210", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "93854412", "PostId": "53476984", "Score": "0", "Text": "if I have to setup certificate manually, I will have to install powershell or azure cli, and I need clean the key vault after VM provisioning. This eliminate the benefit I can get from terraform. Is there any alternative I can go without manually setup certificate?", "CreationDate": "2018-11-27T03:20:39.110", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93856267", "PostId": "53476984", "Score": "0", "Text": "Why don't you use the extension in Terraform when you do not want to set certificate manually?", "CreationDate": "2018-11-27T05:34:39.117", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93876966", "PostId": "53476984", "Score": "0", "Text": "I don't want to use extension, because: 1. I need to delete the extension after provisioning, this is an extra workload. 2. it is an Azure specific technology, and my company prefer cloud agnostic technologies. With assumption like that, Azure extensions is the last choice. If we conclude that we have to configure certificate manually or through Powershell/Azure cli, I will proceed with Azure extension. \nso, can we conclude that certificate must be configured for terrform to access Win VM via winrm?", "CreationDate": "2018-11-27T16:13:02.850", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93891899", "PostId": "53476984", "Score": "0", "Text": "First, there is something you have misunderstood. The Azure VM extension is not a software that you would install in the VM. It's an interactive way to run the custom script in the vm. In addition, no matter you would set the certificate or not, you should enable the winrm in the vm first. And as far as I know, you should set the certificate.", "CreationDate": "2018-11-28T02:18:58.390", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93918951", "PostId": "53476984", "Score": "0", "Text": "Well, I know Azure VM extension is not a software to install. And I've used Azure vm extension in Azure template. But the request was to take Azure VM extension as the last choice.", "CreationDate": "2018-11-28T17:29:47.057", "UserId": "10693732", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "186556654", "PostHistoryTypeId": "2", "PostId": "53476984", "RevisionGUID": "9f9f0356-ac10-4484-a76d-b85f2ca6bbac", "CreationDate": "2018-11-26T08:13:56.780", "UserId": "9773937", "Text": "With your issue, I made the test. You can see the result for the windows image through Packer:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nYou can see that there is also a timeout for the winrm. And another test for Terraform I also got a timeout for the winrm. So I would suggest you can enable the winrm with a vm extension, make sure the port 5985 opened and then use the provisioner to do what you want.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/qk0Ah.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "With your issue, I made the test. ", "keywords": ["test"]}, {"source": "Text", "text": "And another test for Terraform I also got a timeout for the winrm. ", "keywords": ["test"]}]}, {"Id": "186617127", "PostHistoryTypeId": "5", "PostId": "53476984", "RevisionGUID": "dff17da2-d7a7-4df3-91ec-8ce11dd080fe", "CreationDate": "2018-11-27T01:46:36.210", "UserId": "9773937", "Comment": "added 430 characters in body", "Text": "With your issue, I made the test. You can see the result for the windows image through Packer:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nYou can see that there is also a timeout for the winrm. And another test for Terraform I also got a timeout for the winrm. So I would suggest you can enable the winrm with a vm extension, make sure the port 5985 opened and then use the provisioner to do what you want.\r\n\r\n**Update**\r\n\r\nMaybe there is something missed so I did not succeed like you. But there is a process should pay attention to that Packer set the certificate's URL. The document [here][2] also shows that how to enable winrm with the certificate's URL if you want to use it. So I think Packer just do it himself, but Terraform does not do it for you. \r\n\r\n\r\n  [1]: https://i.stack.imgur.com/qk0Ah.png\r\n  [2]: https://learn.microsoft.com/en-us/azure/virtual-machines/windows/winrm", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "With your issue, I made the test. ", "keywords": ["test"]}, {"source": "Text", "text": "And another test for Terraform I also got a timeout for the winrm. ", "keywords": ["test"]}, {"source": "Text", "text": "But there is a process should pay attention to that Packer set the certificate's URL. ", "keywords": ["pay"]}]}], "filtered-sentences": [{"source": "Body", "text": "With your issue, I made the test. ", "keywords": ["test"]}, {"source": "Body", "text": "And another test for Terraform I also got a timeout for the winrm. ", "keywords": ["test"]}, {"source": "Body", "text": "But there is a process should pay attention to that Packer set the certificate's URL. ", "keywords": ["pay"]}]}, {"Id": "53490826", "PostTypeId": "2", "ParentId": "53440481", "CreationDate": "2018-11-26T23:53:13.897", "Score": "0", "Body": "<p>@Charles Xu, \nComment can not put too many charactors, I paste the output and code here. \nThe packer script output:</p>\n\n<pre><code>azadmin@AZLAPSLOG1001:~/packer/winrmopen$ /usr/local/packer/packer build --var-file=variables.json Windows2016.json\nazure-arm output will be in this color.\n\n==&gt; azure-arm: Running builder ...\n    azure-arm: Creating Azure Resource Manager (ARM) client ...\n    azure-arm: You have provided Object_ID which is no longer needed, azure packer builder determines this dynamically from the authentication token\n==&gt; azure-arm: Using existing resource group ...\n==&gt; azure-arm:  -&gt; ResourceGroupName : '###Resource Group Replacement####'\n==&gt; azure-arm:  -&gt; Location          : 'canadacentral'\n==&gt; azure-arm: Validating deployment template ...\n==&gt; azure-arm:  -&gt; ResourceGroupName : '###Resource Group Replacement####'\n==&gt; azure-arm:  -&gt; DeploymentName    : 'pkrdp5u8k15bqf0'\n==&gt; azure-arm: Deploying deployment template ...\n==&gt; azure-arm:  -&gt; ResourceGroupName : '###Resource Group Replacement####'\n==&gt; azure-arm:  -&gt; DeploymentName    : 'kvpkrdp5u8k15bqf0'\n==&gt; azure-arm: Getting the certificate's URL ...\n==&gt; azure-arm:  -&gt; Key Vault Name        : 'pkrkv5u8k15bqf0'\n==&gt; azure-arm:  -&gt; Key Vault Secret Name : 'packerKeyVaultSecret'\n==&gt; azure-arm:  -&gt; Certificate URL       : 'https://pkrkv5u8k15bqf0.vault.azure.net/secrets/packerKeyVaultSecret/d1a2c8fe28c34b73b65bb53b7a9ea34f'\n==&gt; azure-arm: Setting the certificate's URL ...\n==&gt; azure-arm: Validating deployment template ...\n==&gt; azure-arm:  -&gt; ResourceGroupName : '###Resource Group Replacement####'\n==&gt; azure-arm:  -&gt; DeploymentName    : 'pkrdp5u8k15bqf0'\n==&gt; azure-arm: Deploying deployment template ...\n==&gt; azure-arm:  -&gt; ResourceGroupName : '###Resource Group Replacement####'\n==&gt; azure-arm:  -&gt; DeploymentName    : 'pkrdp5u8k15bqf0'\n==&gt; azure-arm: Getting the VM's IP address ...\n==&gt; azure-arm:  -&gt; ResourceGroupName   : '###Resource Group Replacement####'\n==&gt; azure-arm:  -&gt; PublicIPAddressName : 'pkrip5u8k15bqf0'\n==&gt; azure-arm:  -&gt; NicName             : 'pkrni5u8k15bqf0'\n==&gt; azure-arm:  -&gt; Network Connection  : 'PrivateEndpoint'\n==&gt; azure-arm:  -&gt; IP Address          : '10.236.8.92'\n==&gt; azure-arm: Waiting for WinRM to become available...\n    azure-arm: #&lt; CLIXML\n    azure-arm: WinRM connected.\n    azure-arm: &lt;Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\"&gt;&lt;Obj S=\"progress\" RefId=\"0\"&gt;&lt;TN RefId=\"0\"&gt;&lt;T&gt;System.Management.Automation.PSCustomObject&lt;/T&gt;&lt;T&gt;System.Object&lt;/T&gt;&lt;/TN&gt;&lt;MS&gt;&lt;I64 N=\"SourceId\"&gt;1&lt;/I64&gt;&lt;PR N=\"Record\"&gt;&lt;AV&gt;Preparing modules for first use.&lt;/AV&gt;&lt;AI&gt;0&lt;/AI&gt;&lt;Nil /&gt;&lt;PI&gt;-1&lt;/PI&gt;&lt;PC&gt;-1&lt;/PC&gt;&lt;T&gt;Completed&lt;/T&gt;&lt;SR&gt;-1&lt;/SR&gt;&lt;SD&gt; &lt;/SD&gt;&lt;/PR&gt;&lt;/MS&gt;&lt;/Obj&gt;&lt;Obj S=\"progress\" RefId=\"1\"&gt;&lt;TNRef RefId=\"0\" /&gt;&lt;MS&gt;&lt;I64 N=\"SourceId\"&gt;1&lt;/I64&gt;&lt;PR N=\"Record\"&gt;&lt;AV&gt;Preparing modules for first use.&lt;/AV&gt;&lt;AI&gt;0&lt;/AI&gt;&lt;Nil /&gt;&lt;PI&gt;-1&lt;/PI&gt;&lt;PC&gt;-1&lt;/PC&gt;&lt;T&gt;Completed&lt;/T&gt;&lt;SR&gt;-1&lt;/SR&gt;&lt;SD&gt; &lt;/SD&gt;&lt;/PR&gt;&lt;/MS&gt;&lt;/Obj&gt;&lt;/Objs&gt;\n==&gt; azure-arm: Connected to WinRM!\n==&gt; azure-arm: Provisioning with Powershell...\n</code></pre>\n\n<p>You can see very clear that it successfully connected to the new built VM via winrm. \nBelow are the script I used for packer:\nVariables</p>\n\n<pre><code>{\n  \"tenant_id\": \"###Tenant ID Replacement ###\",\n  \"subscription_id\": \"###Subscription ID Replacement\",\n  \"region_name\": \"canadacentral\",\n  \"virtual_network_rg\": \"###VNET ResourceGroupName replacement ####\",\n  \"virtual_network_name\": \"###VNET Name Replacement ####\",\n  \"virtual_network_subnet_name\": \"Presentation\",\n  \"build_resource_group_name\": \"###Resource Group Replacement####\",\n  \"image_resource_group_Name\": \"###Resource Group Replacement####\",\n  \"chef_server\": \"https://chefserver01....\",\n  \"object_id\": \"f3b76eb8-87e6-42d7-9d12-dafa5b124d90\",\n  \"chef_org_url\": \"https://artifactory....\",\n  \"chef_org_name\": \"org name replacement\",\n  \"chef_client_binary\": \"https://artifactory.......\",\n  \"chef_first_boot\": \"https://artifactory.......\",\n  \"chef_client_config\": \"https://artifactory.......\",\n  \"wsus_server\": \"http://WSUS....\",\n  \"wsus_script\": \"https://artifactory......\",\n  \"wsus_task\": \"https://artifactory.....\",\n  \"chef_client_bootstrap\": \"https://artifactory.....\",\n  \"chef_checkin_task\": \"https://artifactory......\",\n  \"chef_checkin_xml\": \"https://artifactory......\",\n  \"image_build_number\": \"1811261812\",\n  \"client_id\": \"###Client ID replacement\",\n  \"client_secret\": \"###Client Secret replacement\"\n}\n</code></pre>\n\n<p>windows.json</p>\n\n<pre><code>{\n  \"variables\": {\n    \"client_secret\": \"{{user `client_secret`}}\"\n  },  \n  \"builders\": [{\n  \"type\": \"azure-arm\",\n  \"client_id\": \"{{user `client_id`}}\",\n  \"client_secret\": \"{{user `client_secret`}}\",\n  \"tenant_id\": \"{{user `tenant_id`}}\",\n  \"subscription_id\": \"{{user `subscription_id`}}\",\n  \"object_id\": \"{{user `object_id`}}\",\n  \"build_resource_group_name\": \"{{user `build_resource_group_name`}}\",\n\n  \"managed_image_resource_group_name\": \"{{user `image_resource_group_Name`}}\",\n  \"managed_image_name\": \"Windows2016-dev-{{user `image_build_number`}}\",\n\n  \"os_type\": \"Windows\",\n  \"image_publisher\": \"MicrosoftWindowsServer\",\n  \"image_offer\": \"WindowsServer\",\n  \"image_sku\": \"2016-Datacenter\",\n  \"image_version\":\"latest\",\n  \"os_disk_size_gb\":\"128\", \n  \"vm_size\": \"Standard_E4S_v3\",\n  \"virtual_network_resource_group_name\":\"{{user `virtual_network_rg`}}\",\n  \"virtual_network_name\":\"{{user `virtual_network_name`}}\",\n  \"virtual_network_subnet_name\":\"{{user `virtual_network_subnet_name`}}\",\n\n\n\n  \"communicator\": \"winrm\",\n  \"winrm_use_ssl\": \"true\",\n  \"winrm_insecure\": \"true\",\n  \"winrm_timeout\": \"3m\",\n  \"winrm_username\": \"packer\",\n\n  \"azure_tags\": {\n      \"dept\": \"Platform Engineering\",\n      \"task\": \"Daily Image Build\",\n      \"CostCenter\": \"3357\",\n      \"UseCase\": \"Standard Image Builds - GSPE\",\n      \"ReleaseDate\": \"{{isotime `2006-01-02`}}\"\n  }\n  }],\n  \"provisioners\": [ \n    {\n    \"type\": \"powershell\",\n    \"environment_vars\": [\n      \"chef_org_url={{user `chef_org_url`}}\",\n      \"chef_org_name={{user `chef_org_name`}}\",\n      \"chef_client_binary={{user `chef_client_binary`}}\",\n      \"chef_client_config={{user `chef_client_config`}}\",\n      \"chef_first_boot={{user `chef_first_boot`}}\",\n      \"chef_client_bootstrap={{user `chef_client_bootstrap`}}\",\n      \"wsus_server={{user `wsus_server`}}\",\n      \"wsus_script={{user `wsus_script`}}\",\n      \"wsus_task={{user `wsus_task`}}\",\n      \"chef_setrunonce={{user `chef_setrunonce`}}\",\n      \"chef_server={{user `chef_server`}}\",\n      \"chef_checkin_task={{user `chef_checkin_task`}}\",\n      \"chef_checkin_xml={{user `chef_checkin_xml`}}\"\n\n    ],  \n    \"inline\": [\n      \"$chef_org_client=$ENV:chef_org_name + '-validator'\",\n      \"$chef_org_validator_filename=$chef_org_client + '.pem'\",\n      \"$chef_org_validator_local='c:\\\\chef\\\\' + $chef_org_validator_filename\",\n      \"$chef_org_validator_url=$ENV:chef_org_url + $chef_org_validator_filename\",\n\n\n      \"Write-Host Setting TLS 1.2\",\n      \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\",\n\n      \"Write-Host Download Chef Client, Org Validator and First Boot\",\n      \"Write-Host Full ORG Validator PEM FILE - $chef_org_validator_url\",\n      \"Write-Host Chef Org Name - $env:chef_org_name\",\n      \"Write-Host WSUS Server Name - $env:wsus_server\",\n      \"Write-Host Chef Server - $env:chef_server\",\n      \"md $env:windir\\\\Temp\\\\packer-chef-client -Force\",\n      \"md $env:SystemDrive\\\\chef\\\\ -Force\",\n      \"iwr -Uri $chef_org_validator_url -Outfile $chef_org_validator_local\",\n      \"iwr -Uri $ENV:chef_client_binary -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\chef.msi\",\n      \"iwr -Uri $ENV:chef_client_config -Outfile $env:SystemDrive\\\\chef\\\\client.rb\",\n      \"iwr -Uri $ENV:chef_first_boot -Outfile $env:SystemDrive\\\\chef\\\\first-boot.json\",\n      \"iwr -Uri $ENV:chef_client_bootstrap -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\chef_client_bootstrap.ps1\",\n      \"iwr -Uri $ENV:chef_checkin_task -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\chef_checkin_task.ps1\",\n      \"iwr -Uri $ENV:chef_checkin_xml -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\ChefRunOnce.xml\",\n      \"iwr -Uri $ENV:wsus_script -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\WSUSUpdate.ps1\",\n      \"iwr -Uri $ENV:wsus_task -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\DownloadStageChef-modded.ps1\",\n\n      \"Write-Host Install Chef Client\",\n      \"Start-Process 'msiexec' -ArgumentList '/qb /i C:\\\\Windows\\\\Temp\\\\packer-chef-client\\\\chef.msi' -NoNewWindow -Wait\",\n\n      \"Write-Host Set Regional WSUS Server\",\n      \"reg add 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate' /v WUServer /t REG_SZ /d $ENV:wsus_server /f\",\n      \"reg add 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate' /v WUStatusServer /t REG_SZ /d $ENV:wsus_server /f\",\n\n      \"Write-Host Run WSUS Update\",\n      \"C:\\\\Windows\\\\Temp\\\\packer-chef-client\\\\DownloadStageChef-modded.ps1\",\n\n      \"Write-Host Chef RunOnce Task\",\n      \"C:\\\\Windows\\\\Temp\\\\packer-chef-client\\\\chef_checkin_task.ps1 -chef_org_name $env:chef_org_name -chef_server $env:chef_server\"\n    ]\n  },\n  {\n    \"type\": \"powershell\",\n    \"inline\": [\n      \"if( Test-Path $Env:SystemRoot\\\\windows\\\\system32\\\\Sysprep\\\\unattend.xml ){ rm $Env:SystemRoot\\\\windows\\\\system32\\\\Sysprep\\\\unattend.xml -Force}\",\n      \"&amp; $env:SystemRoot\\\\System32\\\\Sysprep\\\\Sysprep.exe /oobe /generalize /quiet /quit\",\n      \"while($true) { $imageState = Get-ItemProperty HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Setup\\\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }\"\n    ]\n  }\n]\n}\n</code></pre>\n", "OwnerUserId": "10693732", "LastActivityDate": "2018-11-26T23:53:13.897", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "93853261", "PostId": "53490826", "Score": "0", "Text": "I update my answer. Although the test fails, the process shows why Packer could connect the vm through winrm.", "CreationDate": "2018-11-27T01:49:15.533", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Although the test fails, the process shows why Packer could connect the vm through winrm.", "keywords": ["test"]}]}], "history": [{"Id": "186613884", "PostHistoryTypeId": "2", "PostId": "53490826", "RevisionGUID": "b5f7fb27-ceb3-4d03-b675-08211bae3aa7", "CreationDate": "2018-11-26T23:53:13.897", "UserId": "10693732", "Text": "@Charles Xu, \r\nComment can not put too many charactors, I paste the output and code here. \r\nThe packer script output:\r\n\r\n\r\n\r\n    azadmin@AZLAPSLOG1001:~/packer/winrmopen$ /usr/local/packer/packer build --var-file=variables.json Windows2016.json\r\n    azure-arm output will be in this color.\r\n    \r\n    ==> azure-arm: Running builder ...\r\n        azure-arm: Creating Azure Resource Manager (ARM) client ...\r\n        azure-arm: You have provided Object_ID which is no longer needed, azure packer builder determines this dynamically from the authentication token\r\n    ==> azure-arm: Using existing resource group ...\r\n    ==> azure-arm:  -> ResourceGroupName : '###Resource Group Replacement####'\r\n    ==> azure-arm:  -> Location          : 'canadacentral'\r\n    ==> azure-arm: Validating deployment template ...\r\n    ==> azure-arm:  -> ResourceGroupName : '###Resource Group Replacement####'\r\n    ==> azure-arm:  -> DeploymentName    : 'pkrdp5u8k15bqf0'\r\n    ==> azure-arm: Deploying deployment template ...\r\n    ==> azure-arm:  -> ResourceGroupName : '###Resource Group Replacement####'\r\n    ==> azure-arm:  -> DeploymentName    : 'kvpkrdp5u8k15bqf0'\r\n    ==> azure-arm: Getting the certificate's URL ...\r\n    ==> azure-arm:  -> Key Vault Name        : 'pkrkv5u8k15bqf0'\r\n    ==> azure-arm:  -> Key Vault Secret Name : 'packerKeyVaultSecret'\r\n    ==> azure-arm:  -> Certificate URL       : 'https://pkrkv5u8k15bqf0.vault.azure.net/secrets/packerKeyVaultSecret/d1a2c8fe28c34b73b65bb53b7a9ea34f'\r\n    ==> azure-arm: Setting the certificate's URL ...\r\n    ==> azure-arm: Validating deployment template ...\r\n    ==> azure-arm:  -> ResourceGroupName : '###Resource Group Replacement####'\r\n    ==> azure-arm:  -> DeploymentName    : 'pkrdp5u8k15bqf0'\r\n    ==> azure-arm: Deploying deployment template ...\r\n    ==> azure-arm:  -> ResourceGroupName : '###Resource Group Replacement####'\r\n    ==> azure-arm:  -> DeploymentName    : 'pkrdp5u8k15bqf0'\r\n    ==> azure-arm: Getting the VM's IP address ...\r\n    ==> azure-arm:  -> ResourceGroupName   : '###Resource Group Replacement####'\r\n    ==> azure-arm:  -> PublicIPAddressName : 'pkrip5u8k15bqf0'\r\n    ==> azure-arm:  -> NicName             : 'pkrni5u8k15bqf0'\r\n    ==> azure-arm:  -> Network Connection  : 'PrivateEndpoint'\r\n    ==> azure-arm:  -> IP Address          : '10.236.8.92'\r\n    ==> azure-arm: Waiting for WinRM to become available...\r\n        azure-arm: #< CLIXML\r\n        azure-arm: WinRM connected.\r\n        azure-arm: <Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\"><Obj S=\"progress\" RefId=\"0\"><TN RefId=\"0\"><T>System.Management.Automation.PSCustomObject</T><T>System.Object</T></TN><MS><I64 N=\"SourceId\">1</I64><PR N=\"Record\"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><Obj S=\"progress\" RefId=\"1\"><TNRef RefId=\"0\" /><MS><I64 N=\"SourceId\">1</I64><PR N=\"Record\"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj></Objs>\r\n    ==> azure-arm: Connected to WinRM!\r\n    ==> azure-arm: Provisioning with Powershell...\r\n\r\n\r\nYou can see very clear that it successfully connected to the new built VM via winrm. \r\nBelow are the script I used for packer:\r\nVariables\r\n\r\n\r\n    {\r\n      \"tenant_id\": \"###Tenant ID Replacement ###\",\r\n      \"subscription_id\": \"###Subscription ID Replacement\",\r\n      \"region_name\": \"canadacentral\",\r\n      \"virtual_network_rg\": \"###VNET ResourceGroupName replacement ####\",\r\n      \"virtual_network_name\": \"###VNET Name Replacement ####\",\r\n      \"virtual_network_subnet_name\": \"Presentation\",\r\n      \"build_resource_group_name\": \"###Resource Group Replacement####\",\r\n      \"image_resource_group_Name\": \"###Resource Group Replacement####\",\r\n      \"chef_server\": \"https://chefserver01....\",\r\n      \"object_id\": \"f3b76eb8-87e6-42d7-9d12-dafa5b124d90\",\r\n      \"chef_org_url\": \"https://artifactory....\",\r\n      \"chef_org_name\": \"org name replacement\",\r\n      \"chef_client_binary\": \"https://artifactory.......\",\r\n      \"chef_first_boot\": \"https://artifactory.......\",\r\n      \"chef_client_config\": \"https://artifactory.......\",\r\n      \"wsus_server\": \"http://WSUS....\",\r\n      \"wsus_script\": \"https://artifactory......\",\r\n      \"wsus_task\": \"https://artifactory.....\",\r\n      \"chef_client_bootstrap\": \"https://artifactory.....\",\r\n      \"chef_checkin_task\": \"https://artifactory......\",\r\n      \"chef_checkin_xml\": \"https://artifactory......\",\r\n      \"image_build_number\": \"1811261812\",\r\n      \"client_id\": \"###Client ID replacement\",\r\n      \"client_secret\": \"###Client Secret replacement\"\r\n    }\r\n\r\nwindows.json\r\n\r\n    {\r\n      \"variables\": {\r\n        \"client_secret\": \"{{user `client_secret`}}\"\r\n      },  \r\n      \"builders\": [{\r\n      \"type\": \"azure-arm\",\r\n      \"client_id\": \"{{user `client_id`}}\",\r\n      \"client_secret\": \"{{user `client_secret`}}\",\r\n      \"tenant_id\": \"{{user `tenant_id`}}\",\r\n      \"subscription_id\": \"{{user `subscription_id`}}\",\r\n      \"object_id\": \"{{user `object_id`}}\",\r\n      \"build_resource_group_name\": \"{{user `build_resource_group_name`}}\",\r\n    \r\n      \"managed_image_resource_group_name\": \"{{user `image_resource_group_Name`}}\",\r\n      \"managed_image_name\": \"Windows2016-dev-{{user `image_build_number`}}\",\r\n    \r\n      \"os_type\": \"Windows\",\r\n      \"image_publisher\": \"MicrosoftWindowsServer\",\r\n      \"image_offer\": \"WindowsServer\",\r\n      \"image_sku\": \"2016-Datacenter\",\r\n      \"image_version\":\"latest\",\r\n      \"os_disk_size_gb\":\"128\", \r\n      \"vm_size\": \"Standard_E4S_v3\",\r\n      \"virtual_network_resource_group_name\":\"{{user `virtual_network_rg`}}\",\r\n      \"virtual_network_name\":\"{{user `virtual_network_name`}}\",\r\n      \"virtual_network_subnet_name\":\"{{user `virtual_network_subnet_name`}}\",\r\n    \r\n    \r\n    \r\n      \"communicator\": \"winrm\",\r\n      \"winrm_use_ssl\": \"true\",\r\n      \"winrm_insecure\": \"true\",\r\n      \"winrm_timeout\": \"3m\",\r\n      \"winrm_username\": \"packer\",\r\n    \r\n      \"azure_tags\": {\r\n          \"dept\": \"Platform Engineering\",\r\n          \"task\": \"Daily Image Build\",\r\n          \"CostCenter\": \"3357\",\r\n          \"UseCase\": \"Standard Image Builds - GSPE\",\r\n          \"ReleaseDate\": \"{{isotime `2006-01-02`}}\"\r\n      }\r\n      }],\r\n      \"provisioners\": [ \r\n        {\r\n        \"type\": \"powershell\",\r\n        \"environment_vars\": [\r\n          \"chef_org_url={{user `chef_org_url`}}\",\r\n          \"chef_org_name={{user `chef_org_name`}}\",\r\n          \"chef_client_binary={{user `chef_client_binary`}}\",\r\n          \"chef_client_config={{user `chef_client_config`}}\",\r\n          \"chef_first_boot={{user `chef_first_boot`}}\",\r\n          \"chef_client_bootstrap={{user `chef_client_bootstrap`}}\",\r\n          \"wsus_server={{user `wsus_server`}}\",\r\n          \"wsus_script={{user `wsus_script`}}\",\r\n          \"wsus_task={{user `wsus_task`}}\",\r\n          \"chef_setrunonce={{user `chef_setrunonce`}}\",\r\n          \"chef_server={{user `chef_server`}}\",\r\n          \"chef_checkin_task={{user `chef_checkin_task`}}\",\r\n          \"chef_checkin_xml={{user `chef_checkin_xml`}}\"\r\n    \r\n        ],  \r\n        \"inline\": [\r\n          \"$chef_org_client=$ENV:chef_org_name + '-validator'\",\r\n          \"$chef_org_validator_filename=$chef_org_client + '.pem'\",\r\n          \"$chef_org_validator_local='c:\\\\chef\\\\' + $chef_org_validator_filename\",\r\n          \"$chef_org_validator_url=$ENV:chef_org_url + $chef_org_validator_filename\",\r\n    \r\n    \r\n          \"Write-Host Setting TLS 1.2\",\r\n          \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\",\r\n          \r\n          \"Write-Host Download Chef Client, Org Validator and First Boot\",\r\n          \"Write-Host Full ORG Validator PEM FILE - $chef_org_validator_url\",\r\n          \"Write-Host Chef Org Name - $env:chef_org_name\",\r\n          \"Write-Host WSUS Server Name - $env:wsus_server\",\r\n          \"Write-Host Chef Server - $env:chef_server\",\r\n          \"md $env:windir\\\\Temp\\\\packer-chef-client -Force\",\r\n          \"md $env:SystemDrive\\\\chef\\\\ -Force\",\r\n          \"iwr -Uri $chef_org_validator_url -Outfile $chef_org_validator_local\",\r\n          \"iwr -Uri $ENV:chef_client_binary -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\chef.msi\",\r\n          \"iwr -Uri $ENV:chef_client_config -Outfile $env:SystemDrive\\\\chef\\\\client.rb\",\r\n          \"iwr -Uri $ENV:chef_first_boot -Outfile $env:SystemDrive\\\\chef\\\\first-boot.json\",\r\n          \"iwr -Uri $ENV:chef_client_bootstrap -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\chef_client_bootstrap.ps1\",\r\n          \"iwr -Uri $ENV:chef_checkin_task -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\chef_checkin_task.ps1\",\r\n          \"iwr -Uri $ENV:chef_checkin_xml -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\ChefRunOnce.xml\",\r\n          \"iwr -Uri $ENV:wsus_script -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\WSUSUpdate.ps1\",\r\n          \"iwr -Uri $ENV:wsus_task -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\DownloadStageChef-modded.ps1\",\r\n          \r\n          \"Write-Host Install Chef Client\",\r\n          \"Start-Process 'msiexec' -ArgumentList '/qb /i C:\\\\Windows\\\\Temp\\\\packer-chef-client\\\\chef.msi' -NoNewWindow -Wait\",\r\n                \r\n          \"Write-Host Set Regional WSUS Server\",\r\n          \"reg add 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate' /v WUServer /t REG_SZ /d $ENV:wsus_server /f\",\r\n          \"reg add 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate' /v WUStatusServer /t REG_SZ /d $ENV:wsus_server /f\",\r\n        \r\n          \"Write-Host Run WSUS Update\",\r\n          \"C:\\\\Windows\\\\Temp\\\\packer-chef-client\\\\DownloadStageChef-modded.ps1\",\r\n    \r\n          \"Write-Host Chef RunOnce Task\",\r\n          \"C:\\\\Windows\\\\Temp\\\\packer-chef-client\\\\chef_checkin_task.ps1 -chef_org_name $env:chef_org_name -chef_server $env:chef_server\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"powershell\",\r\n        \"inline\": [\r\n          \"if( Test-Path $Env:SystemRoot\\\\windows\\\\system32\\\\Sysprep\\\\unattend.xml ){ rm $Env:SystemRoot\\\\windows\\\\system32\\\\Sysprep\\\\unattend.xml -Force}\",\r\n          \"& $env:SystemRoot\\\\System32\\\\Sysprep\\\\Sysprep.exe /oobe /generalize /quiet /quit\",\r\n          \"while($true) { $imageState = Get-ItemProperty HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Setup\\\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }\"\r\n        ]\r\n      }\r\n    ]\r\n    }\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Below are the script I used for packer: Variables { \"tenant_id\": \"###Tenant ID Replacement ###\", \"subscription_id\": \"###Subscription ID Replacement\", \"region_name\": \"canadacentral\", \"virtual_network_rg\": \"###VNET ResourceGroupName replacement ####\", \"virtual_network_name\": \"###VNET Name Replacement ####\", \"virtual_network_subnet_name\": \"Presentation\", \"build_resource_group_name\": \"###Resource Group Replacement####\", \"image_resource_group_Name\": \"###Resource Group Replacement####\", \"chef_server\": \"https://chefserver01....\", \"object_id\": \"f3b76eb8-87e6-42d7-9d12-dafa5b124d90\", \"chef_org_url\": \"https://artifactory....\", \"chef_org_name\": \"org name replacement\", \"chef_client_binary\": \"https://artifactory.......\", \"chef_first_boot\": \"https://artifactory.......\", \"chef_client_config\": \"https://artifactory.......\", \"wsus_server\": \"http://WSUS....\", \"wsus_script\": \"https://artifactory......\", \"wsus_task\": \"https://artifactory.....\", \"chef_client_bootstrap\": \"https://artifactory.....\", \"chef_checkin_task\": \"https://artifactory......\", \"chef_checkin_xml\": \"https://artifactory......\", \"image_build_number\": \"1811261812\", \"client_id\": \"###Client ID replacement\", \"client_secret\": \"###Client Secret replacement\" } windows.json { \"variables\": { \"client_secret\": \"{{user `client_secret`}}\" }, \"builders\": [{ \"type\": \"azure-arm\", \"client_id\": \"{{user `client_id`}}\", \"client_secret\": \"{{user `client_secret`}}\", \"tenant_id\": \"{{user `tenant_id`}}\", \"subscription_id\": \"{{user `subscription_id`}}\", \"object_id\": \"{{user `object_id`}}\", \"build_resource_group_name\": \"{{user `build_resource_group_name`}}\", \"managed_image_resource_group_name\": \"{{user `image_resource_group_Name`}}\", \"managed_image_name\": \"Windows2016-dev-{{user `image_build_number`}}\", \"os_type\": \"Windows\", \"image_publisher\": \"MicrosoftWindowsServer\", \"image_offer\": \"WindowsServer\", \"image_sku\": \"2016-Datacenter\", \"image_version\":\"latest\", \"os_disk_size_gb\":\"128\", \"vm_size\": \"Standard_E4S_v3\", \"virtual_network_resource_group_name\":\"{{user `virtual_network_rg`}}\", \"virtual_network_name\":\"{{user `virtual_network_name`}}\", \"virtual_network_subnet_name\":\"{{user `virtual_network_subnet_name`}}\", \"communicator\": \"winrm\", \"winrm_use_ssl\": \"true\", \"winrm_insecure\": \"true\", \"winrm_timeout\": \"3m\", \"winrm_username\": \"packer\", \"azure_tags\": { \"dept\": \"Platform Engineering\", \"task\": \"Daily Image Build\", \"CostCenter\": \"3357\", \"UseCase\": \"Standard Image Builds - GSPE\", \"ReleaseDate\": \"{{isotime `2006-01-02`}}\" } }], \"provisioners\": [ { \"type\": \"powershell\", \"environment_vars\": [ \"chef_org_url={{user `chef_org_url`}}\", \"chef_org_name={{user `chef_org_name`}}\", \"chef_client_binary={{user `chef_client_binary`}}\", \"chef_client_config={{user `chef_client_config`}}\", \"chef_first_boot={{user `chef_first_boot`}}\", \"chef_client_bootstrap={{user `chef_client_bootstrap`}}\", \"wsus_server={{user `wsus_server`}}\", \"wsus_script={{user `wsus_script`}}\", \"wsus_task={{user `wsus_task`}}\", \"chef_setrunonce={{user `chef_setrunonce`}}\", \"chef_server={{user `chef_server`}}\", \"chef_checkin_task={{user `chef_checkin_task`}}\", \"chef_checkin_xml={{user `chef_checkin_xml`}}\" ], \"inline\": [ \"$chef_org_client=$ENV:chef_org_name + '-validator'\", \"$chef_org_validator_filename=$chef_org_client + '.pem'\", \"$chef_org_validator_local='c:\\\\chef\\\\' + $chef_org_validator_filename\", \"$chef_org_validator_url=$ENV:chef_org_url + $chef_org_validator_filename\", \"Write-Host Setting TLS 1.2\", \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\", \"Write-Host Download Chef Client, Org Validator and First Boot\", \"Write-Host Full ORG Validator PEM FILE - $chef_org_validator_url\", \"Write-Host Chef Org Name - $env:chef_org_name\", \"Write-Host WSUS Server Name - $env:wsus_server\", \"Write-Host Chef Server - $env:chef_server\", \"md $env:windir\\\\Temp\\\\packer-chef-client -Force\", \"md $env:SystemDrive\\\\chef\\\\ -Force\", \"iwr -Uri $chef_org_validator_url -Outfile $chef_org_validator_local\", \"iwr -Uri $ENV:chef_client_binary -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\chef.msi\", \"iwr -Uri $ENV:chef_client_config -Outfile $env:SystemDrive\\\\chef\\\\client.rb\", \"iwr -Uri $ENV:chef_first_boot -Outfile $env:SystemDrive\\\\chef\\\\first-boot.json\", \"iwr -Uri $ENV:chef_client_bootstrap -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\chef_client_bootstrap.ps1\", \"iwr -Uri $ENV:chef_checkin_task -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\chef_checkin_task.ps1\", \"iwr -Uri $ENV:chef_checkin_xml -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\ChefRunOnce.xml\", \"iwr -Uri $ENV:wsus_script -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\WSUSUpdate.ps1\", \"iwr -Uri $ENV:wsus_task -Outfile $env:windir\\\\Temp\\\\packer-chef-client\\\\DownloadStageChef-modded.ps1\", \"Write-Host Install Chef Client\", \"Start-Process 'msiexec' -ArgumentList '/qb /i C:\\\\Windows\\\\Temp\\\\packer-chef-client\\\\chef.msi' -NoNewWindow -Wait\", \"Write-Host Set Regional WSUS Server\", \"reg add 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate' /v WUServer /t REG_SZ /d $ENV:wsus_server /f\", \"reg add 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate' /v WUStatusServer /t REG_SZ /d $ENV:wsus_server /f\", \"Write-Host Run WSUS Update\", \"C:\\\\Windows\\\\Temp\\\\packer-chef-client\\\\DownloadStageChef-modded.ps1\", \"Write-Host Chef RunOnce Task\", \"C:\\\\Windows\\\\Temp\\\\packer-chef-client\\\\chef_checkin_task.ps1 -chef_org_name $env:chef_org_name -chef_server $env:chef_server\" ] }, { \"type\": \"powershell\", \"inline\": [ \"if( Test-Path $Env:SystemRoot\\\\windows\\\\system32\\\\Sysprep\\\\unattend.xml ){ rm $Env:SystemRoot\\\\windows\\\\system32\\\\Sysprep\\\\unattend.xml -Force}\", \"& $env:SystemRoot\\\\System32\\\\Sysprep\\\\Sysprep.exe /oobe /generalize /quiet /quit\", \"while($true) { $imageState = Get-ItemProperty HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Setup\\\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10 } else { break } }\" ] } ] }", "keywords": ["test"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "For testing purpose, I wrote the provisioner like this: The template successfully provisioned the VM, but yield an error when trying to connect the VM with WinRM. ", "keywords": ["test"]}]}