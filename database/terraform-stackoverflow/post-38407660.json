{"Id": "38407660", "PostTypeId": "1", "AcceptedAnswerId": "38428834", "CreationDate": "2016-07-16T04:16:05.760", "Score": "39", "ViewCount": "29248", "Body": "<p>I need to ship my cloudwatch logs to a log analysis service.</p>\n\n<p>I've followed along with these articles <a href=\"https://jambr.co.uk/2016/05/17/aws-lambda-logs-into-sumologic/\" rel=\"noreferrer\">here</a> and <a href=\"https://github.com/SumoLogic/sumologic-aws-lambda/tree/master/cloudwatchlogs\" rel=\"noreferrer\">here</a> and got it working by hand, no worries.  </p>\n\n<p>Now I'm trying to automate all this with Terraform (roles/policies, security groups, cloudwatch log group, lambda, and triggering the lambda from the log group).</p>\n\n<p>But I can't figure out how to use TF to configure AWS to trigger the lambda from the cloudwatch logs.</p>\n\n<p>I can link the two TF resources together by hand by doing the following (in the Lambda web console UI):</p>\n\n<ul>\n<li>go into the lambda function's \"Triggers\" section</li>\n<li>click \"Add Trigger\"</li>\n<li>select \"cloudwatch logs\" from the list of trigger types</li>\n<li>select the log group I want to trigger the lambda</li>\n<li>enter a filter name</li>\n<li>leave the filter pattern empty (implying trigger on all log streams)</li>\n<li>make sure \"enable trigger\" is selected</li>\n<li>click the submit button</li>\n</ul>\n\n<p>Once that's done, the lambda shows up on the cloudwatch logs console in the subscriptions column - displays as \"Lambda (cloudwatch-sumologic-lambda)\".</p>\n\n<p>I tried to create the subscription with the following TF resource:</p>\n\n<pre class=\"lang-hcl prettyprint-override\"><code>resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatch-sumologic-lambda-subscription\" {\n  name            = \"cloudwatch-sumologic-lambda-subscription\"\n  role_arn        = \"${aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn}\"\n  log_group_name  = \"${aws_cloudwatch_log_group.jordi-waf-int-app-loggroup.name}\"\n  filter_pattern  = \"logtype test\"\n  destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\n}\n</code></pre>\n\n<p>But it fails with: </p>\n\n<blockquote>\n  <p>aws_cloudwatch_log_subscription_filter.cloudwatch-sumologic-lambda-subscription: InvalidParameterException: destinationArn for vendor lambda cannot be used with roleArn</p>\n</blockquote>\n\n<p>I found <a href=\"https://stackoverflow.com/questions/35895315/use-terraform-to-set-up-a-lambda-function-triggered-by-a-scheduled-event-source\">this answer</a> about setting up a similar thing for a scheduled event, but that doesn't seem to be equivalent to what the console actions I described above do (the console UI method doesn't create an event/rule that I can see).</p>\n\n<p>Can someone give me a pointer on what I'm doing wrong please?</p>\n", "OwnerUserId": "924597", "LastEditorUserId": "1092815", "LastEditDate": "2019-02-27T14:08:49.570", "LastActivityDate": "2020-08-12T20:49:35.447", "Title": "Terraform: configuring cloudwatch log subscription delivery to lambda?", "Tags": "<amazon-web-services><terraform><sumologic>", "AnswerCount": "2", "CommentCount": "2", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "64259633", "PostId": "38407660", "Score": "0", "Text": "It's hard to see exactly but it looks like AWS is saying that the role you have given the PutSubscriptionFilter doesn't have access to Lambda. Can you also post the definition of the `aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn` resource?", "CreationDate": "2016-07-17T22:23:48.587", "UserId": "2291321", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "116358040", "PostId": "38407660", "Score": "0", "Text": "Just make sure your `destination_arn` of `aws_cloudwatch_log_subscription_filter` resource  does not include anything like \":*\" in end. I messed up and spent whole day solving the issue.", "CreationDate": "2021-01-20T13:53:38.547", "UserId": "4693458", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "1224884457", "CreationDate": "2016-07-16T04:16:05.760", "PostId": "38407660", "RelatedPostId": "35895315", "LinkTypeId": "1"}], "history": [{"Id": "122759944", "PostHistoryTypeId": "2", "PostId": "38407660", "RevisionGUID": "b91c0240-5f85-498c-80fc-ea49c1dbdb6f", "CreationDate": "2016-07-16T04:16:05.760", "UserId": "924597", "Text": "I need to ship my cloudwatch logs to a log analysis service.\r\n\r\nI'm followed along with these articles [here][1] and [here][2] and got it working by hand, no worries.  \r\n\r\nNow I'm trying to automate all this with Terraform (roles/policies, security groups, cloudwatch log group, lambda, and triggering the lambda from the log group).\r\n\r\nBut I can't figure out how to use TF to configure AWS to trigger the lambda from the cloudwatch logs.\r\n\r\nI can link the two TF resources together by hand by doing the following (in the Lambda web console UI):\r\n\r\n- go into the lambda function's \"Triggers\" section\r\n- click \"Add Trigger\"\r\n- select \"cloudwatch logs\" from the list of trigger types\r\n- select the log group I want to trigger the lambda\r\n- enter a filter name\r\n- leave the filter pattern empty (implying trigger on all log streams)\r\n- make sure \"enable trigger\" is selected\r\n- click the submit button\r\n\r\nOnce that's done, the lambda shows up on the cloudwatch logs console in the subscriptions column - displays as \"Lambda (cloudwatch-sumologic-lambda)\".\r\n\r\nI tried to create the subscription with the following TF resource:\r\n\r\n    resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatch-sumologic-lambda-subscription\" {\r\n      name = \"cloudwatch-sumologic-lambda-subscription\"\r\n      role_arn = \"${aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn}\"\r\n      log_group_name = \"${aws_cloudwatch_log_group.jordi-waf-int-app-loggroup.name}\"\r\n      filter_pattern = \"logtype test\"\r\n      destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n    }\r\n\r\nBut it fails with: \r\n\r\n    * aws_cloudwatch_log_subscription_filter.cloudwatch-sumologic-lambda-subscription: InvalidParameterException: destinationArn for vendor lambda cannot be used with roleArn\r\n\r\nI found [this answer][3] about setting up a similar thing for a scheduled event, but that doesn't seem to be equivalent to what the console actions I described above do (the console UI method doesn't create an event/rule that I can see).\r\n\r\n\r\nCan someone give me a pointer on what I'm doing wrong please?\r\n\r\n\r\n[1]: https://jambr.co.uk/2016/05/17/aws-lambda-logs-into-sumologic/  \r\n[2]: https://github.com/SumoLogic/sumologic-aws-lambda/tree/master/cloudwatchlogs\r\n[3]: http://stackoverflow.com/questions/35895315/use-terraform-to-set-up-a-lambda-function-triggered-by-a-scheduled-event-source\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I tried to create the subscription with the following TF resource: resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatch-sumologic-lambda-subscription\" { name = \"cloudwatch-sumologic-lambda-subscription\" role_arn = \"${aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn}\" log_group_name = \"${aws_cloudwatch_log_group.jordi-waf-int-app-loggroup.name}\" filter_pattern = \"logtype test\" destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" } But it fails with: * aws_cloudwatch_log_subscription_filter.cloudwatch-sumologic-lambda-subscription: InvalidParameterException: destinationArn for vendor lambda cannot be used with roleArn I found [this answer][3] about setting up a similar thing for a scheduled event, but that doesn't seem to be equivalent to what the console actions I described above do (the console UI method doesn't create an event/rule that I can see). ", "keywords": ["test"]}]}, {"Id": "122759945", "PostHistoryTypeId": "1", "PostId": "38407660", "RevisionGUID": "b91c0240-5f85-498c-80fc-ea49c1dbdb6f", "CreationDate": "2016-07-16T04:16:05.760", "UserId": "924597", "Text": "Terraform: configuring cloudwatch log subscription delivery to lambda?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "122759946", "PostHistoryTypeId": "3", "PostId": "38407660", "RevisionGUID": "b91c0240-5f85-498c-80fc-ea49c1dbdb6f", "CreationDate": "2016-07-16T04:16:05.760", "UserId": "924597", "Text": "<amazon-web-services><terraform>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "122806447", "PostHistoryTypeId": "5", "PostId": "38407660", "RevisionGUID": "262b8e36-4778-433c-ac62-d26497793e55", "CreationDate": "2016-07-17T01:39:21.803", "UserId": "924597", "Comment": "added 1 character in body", "Text": "I need to ship my cloudwatch logs to a log analysis service.\r\n\r\nI've followed along with these articles [here][1] and [here][2] and got it working by hand, no worries.  \r\n\r\nNow I'm trying to automate all this with Terraform (roles/policies, security groups, cloudwatch log group, lambda, and triggering the lambda from the log group).\r\n\r\nBut I can't figure out how to use TF to configure AWS to trigger the lambda from the cloudwatch logs.\r\n\r\nI can link the two TF resources together by hand by doing the following (in the Lambda web console UI):\r\n\r\n- go into the lambda function's \"Triggers\" section\r\n- click \"Add Trigger\"\r\n- select \"cloudwatch logs\" from the list of trigger types\r\n- select the log group I want to trigger the lambda\r\n- enter a filter name\r\n- leave the filter pattern empty (implying trigger on all log streams)\r\n- make sure \"enable trigger\" is selected\r\n- click the submit button\r\n\r\nOnce that's done, the lambda shows up on the cloudwatch logs console in the subscriptions column - displays as \"Lambda (cloudwatch-sumologic-lambda)\".\r\n\r\nI tried to create the subscription with the following TF resource:\r\n\r\n    resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatch-sumologic-lambda-subscription\" {\r\n      name = \"cloudwatch-sumologic-lambda-subscription\"\r\n      role_arn = \"${aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn}\"\r\n      log_group_name = \"${aws_cloudwatch_log_group.jordi-waf-int-app-loggroup.name}\"\r\n      filter_pattern = \"logtype test\"\r\n      destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n    }\r\n\r\nBut it fails with: \r\n\r\n    * aws_cloudwatch_log_subscription_filter.cloudwatch-sumologic-lambda-subscription: InvalidParameterException: destinationArn for vendor lambda cannot be used with roleArn\r\n\r\nI found [this answer][3] about setting up a similar thing for a scheduled event, but that doesn't seem to be equivalent to what the console actions I described above do (the console UI method doesn't create an event/rule that I can see).\r\n\r\n\r\nCan someone give me a pointer on what I'm doing wrong please?\r\n\r\n\r\n[1]: https://jambr.co.uk/2016/05/17/aws-lambda-logs-into-sumologic/  \r\n[2]: https://github.com/SumoLogic/sumologic-aws-lambda/tree/master/cloudwatchlogs\r\n[3]: http://stackoverflow.com/questions/35895315/use-terraform-to-set-up-a-lambda-function-triggered-by-a-scheduled-event-source\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I tried to create the subscription with the following TF resource: resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatch-sumologic-lambda-subscription\" { name = \"cloudwatch-sumologic-lambda-subscription\" role_arn = \"${aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn}\" log_group_name = \"${aws_cloudwatch_log_group.jordi-waf-int-app-loggroup.name}\" filter_pattern = \"logtype test\" destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" } But it fails with: * aws_cloudwatch_log_subscription_filter.cloudwatch-sumologic-lambda-subscription: InvalidParameterException: destinationArn for vendor lambda cannot be used with roleArn I found [this answer][3] about setting up a similar thing for a scheduled event, but that doesn't seem to be equivalent to what the console actions I described above do (the console UI method doesn't create an event/rule that I can see). ", "keywords": ["test"]}]}, {"Id": "122928227", "PostHistoryTypeId": "6", "PostId": "38407660", "RevisionGUID": "4aa0f068-4f09-41df-ad36-3b7fdec08b17", "CreationDate": "2016-07-19T00:01:16.583", "UserId": "924597", "Comment": "edited tags", "Text": "<amazon-web-services><terraform><sumologic>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "146431154", "PostHistoryTypeId": "5", "PostId": "38407660", "RevisionGUID": "b02b98bd-9d95-4921-acd5-11ed4c5506cf", "CreationDate": "2017-05-23T11:47:01.183", "UserDisplayName": "URL Rewriter Bot", "Comment": "replaced http://stackoverflow.com/ with https://stackoverflow.com/", "Text": "I need to ship my cloudwatch logs to a log analysis service.\r\n\r\nI've followed along with these articles [here][1] and [here][2] and got it working by hand, no worries.  \r\n\r\nNow I'm trying to automate all this with Terraform (roles/policies, security groups, cloudwatch log group, lambda, and triggering the lambda from the log group).\r\n\r\nBut I can't figure out how to use TF to configure AWS to trigger the lambda from the cloudwatch logs.\r\n\r\nI can link the two TF resources together by hand by doing the following (in the Lambda web console UI):\r\n\r\n- go into the lambda function's \"Triggers\" section\r\n- click \"Add Trigger\"\r\n- select \"cloudwatch logs\" from the list of trigger types\r\n- select the log group I want to trigger the lambda\r\n- enter a filter name\r\n- leave the filter pattern empty (implying trigger on all log streams)\r\n- make sure \"enable trigger\" is selected\r\n- click the submit button\r\n\r\nOnce that's done, the lambda shows up on the cloudwatch logs console in the subscriptions column - displays as \"Lambda (cloudwatch-sumologic-lambda)\".\r\n\r\nI tried to create the subscription with the following TF resource:\r\n\r\n    resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatch-sumologic-lambda-subscription\" {\r\n      name = \"cloudwatch-sumologic-lambda-subscription\"\r\n      role_arn = \"${aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn}\"\r\n      log_group_name = \"${aws_cloudwatch_log_group.jordi-waf-int-app-loggroup.name}\"\r\n      filter_pattern = \"logtype test\"\r\n      destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n    }\r\n\r\nBut it fails with: \r\n\r\n    * aws_cloudwatch_log_subscription_filter.cloudwatch-sumologic-lambda-subscription: InvalidParameterException: destinationArn for vendor lambda cannot be used with roleArn\r\n\r\nI found [this answer][3] about setting up a similar thing for a scheduled event, but that doesn't seem to be equivalent to what the console actions I described above do (the console UI method doesn't create an event/rule that I can see).\r\n\r\n\r\nCan someone give me a pointer on what I'm doing wrong please?\r\n\r\n\r\n[1]: https://jambr.co.uk/2016/05/17/aws-lambda-logs-into-sumologic/  \r\n[2]: https://github.com/SumoLogic/sumologic-aws-lambda/tree/master/cloudwatchlogs\r\n[3]: https://stackoverflow.com/questions/35895315/use-terraform-to-set-up-a-lambda-function-triggered-by-a-scheduled-event-source\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I tried to create the subscription with the following TF resource: resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatch-sumologic-lambda-subscription\" { name = \"cloudwatch-sumologic-lambda-subscription\" role_arn = \"${aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn}\" log_group_name = \"${aws_cloudwatch_log_group.jordi-waf-int-app-loggroup.name}\" filter_pattern = \"logtype test\" destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" } But it fails with: * aws_cloudwatch_log_subscription_filter.cloudwatch-sumologic-lambda-subscription: InvalidParameterException: destinationArn for vendor lambda cannot be used with roleArn I found [this answer][3] about setting up a similar thing for a scheduled event, but that doesn't seem to be equivalent to what the console actions I described above do (the console UI method doesn't create an event/rule that I can see). ", "keywords": ["test"]}]}, {"Id": "192542397", "PostHistoryTypeId": "5", "PostId": "38407660", "RevisionGUID": "24306457-4db5-45b0-a52f-3222765acfd9", "CreationDate": "2019-02-27T14:08:49.570", "UserId": "1092815", "Comment": "syntax highlighting", "Text": "I need to ship my cloudwatch logs to a log analysis service.\r\n\r\nI've followed along with these articles [here][1] and [here][2] and got it working by hand, no worries.  \r\n\r\nNow I'm trying to automate all this with Terraform (roles/policies, security groups, cloudwatch log group, lambda, and triggering the lambda from the log group).\r\n\r\nBut I can't figure out how to use TF to configure AWS to trigger the lambda from the cloudwatch logs.\r\n\r\nI can link the two TF resources together by hand by doing the following (in the Lambda web console UI):\r\n\r\n- go into the lambda function's \"Triggers\" section\r\n- click \"Add Trigger\"\r\n- select \"cloudwatch logs\" from the list of trigger types\r\n- select the log group I want to trigger the lambda\r\n- enter a filter name\r\n- leave the filter pattern empty (implying trigger on all log streams)\r\n- make sure \"enable trigger\" is selected\r\n- click the submit button\r\n\r\nOnce that's done, the lambda shows up on the cloudwatch logs console in the subscriptions column - displays as \"Lambda (cloudwatch-sumologic-lambda)\".\r\n\r\nI tried to create the subscription with the following TF resource:\r\n\r\n<!-- language: lang-hcl -->\r\n\r\n    resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatch-sumologic-lambda-subscription\" {\r\n      name            = \"cloudwatch-sumologic-lambda-subscription\"\r\n      role_arn        = \"${aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn}\"\r\n      log_group_name  = \"${aws_cloudwatch_log_group.jordi-waf-int-app-loggroup.name}\"\r\n      filter_pattern  = \"logtype test\"\r\n      destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n    }\r\n\r\nBut it fails with: \r\n\r\n> aws_cloudwatch_log_subscription_filter.cloudwatch-sumologic-lambda-subscription: InvalidParameterException: destinationArn for vendor lambda cannot be used with roleArn\r\n\r\nI found [this answer][3] about setting up a similar thing for a scheduled event, but that doesn't seem to be equivalent to what the console actions I described above do (the console UI method doesn't create an event/rule that I can see).\r\n\r\n\r\nCan someone give me a pointer on what I'm doing wrong please?\r\n\r\n\r\n[1]: https://jambr.co.uk/2016/05/17/aws-lambda-logs-into-sumologic/  \r\n[2]: https://github.com/SumoLogic/sumologic-aws-lambda/tree/master/cloudwatchlogs\r\n[3]: https://stackoverflow.com/questions/35895315/use-terraform-to-set-up-a-lambda-function-triggered-by-a-scheduled-event-source\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I tried to create the subscription with the following TF resource: resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatch-sumologic-lambda-subscription\" { name = \"cloudwatch-sumologic-lambda-subscription\" role_arn = \"${aws_iam_role.jordi-waf-cloudwatch-lambda-role.arn}\" log_group_name = \"${aws_cloudwatch_log_group.jordi-waf-int-app-loggroup.name}\" filter_pattern = \"logtype test\" destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" } But it fails with: > aws_cloudwatch_log_subscription_filter.cloudwatch-sumologic-lambda-subscription: InvalidParameterException: destinationArn for vendor lambda cannot be used with roleArn I found [this answer][3] about setting up a similar thing for a scheduled event, but that doesn't seem to be equivalent to what the console actions I described above do (the console UI method doesn't create an event/rule that I can see). ", "keywords": ["test"]}]}], "answers": [{"Id": "63384539", "PostTypeId": "2", "ParentId": "38407660", "CreationDate": "2020-08-12T20:49:35.447", "Score": "9", "Body": "<p>Working with Terraform <code>v0.12.29</code> and AWS provider <code>v3.1.0</code> I encountered a strange issue which cost me a few hours of debugging.</p>\n<p>In order to save others some valuable time I'll share it as a complementary to the accepted answer.</p>\n<p><strong>The value of the cloudwatch log group arn</strong>:</p>\n<pre><code>${aws_cloudwatch_log_group.test-app-loggroup.arn}\n</code></pre>\n<p><strong>Isn't being interpolated correctly</strong> <strong>- there is a missing &quot;<code>:*</code>&quot; at the end of the output.</strong></p>\n<p>This leads to the error below:</p>\n<blockquote>\n<p>Error creating {the-calling-service}: InvalidCloudWatchLogsLogGroupArnException:\nCheck the log group ARN: {the-calling-service} can't validate it.</p>\n</blockquote>\n<p>Adding a <code>:*</code> postfix solved the issue:</p>\n<pre><code>source_arn = &quot;${aws_cloudwatch_log_group.test-app-loggroup.arn}:*&quot; #&lt;----Notice the :* postfix\n</code></pre>\n", "OwnerUserId": "1103953", "LastActivityDate": "2020-08-12T20:49:35.447", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "112082658", "PostId": "63384539", "Score": "0", "Text": "I no longer ship my logs out (now using log insights). I went back into my git history and looked at the source_arn for my lambda permission from when I deleted it.  It was only arn (no \":*\"), though it wasn't using string interpolation (because of a previous upgrade to TF 0.12.x).", "CreationDate": "2020-08-12T23:17:55.167", "UserId": "924597", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112087369", "PostId": "63384539", "Score": "0", "Text": "Can you compare it (TF arn) with the value of the arn that you see in the AWS console?", "CreationDate": "2020-08-13T05:39:16.800", "UserId": "1103953", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "116761242", "PostId": "63384539", "Score": "0", "Text": "Thank you! I just discovered this problem myself and went looking for confirmation.", "CreationDate": "2021-02-04T05:20:57.803", "UserId": "4589181", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "228654746", "PostHistoryTypeId": "2", "PostId": "63384539", "RevisionGUID": "16d63068-1b28-493b-9d87-2679ea121cf2", "CreationDate": "2020-08-12T20:49:35.447", "UserId": "1103953", "Text": "Working with Terraform `v0.12.29` and AWS provider `v3.1.0` I encountered a strange issue which cost me a few hours of debugging.\r\n\r\nIn order to save others some valuable time I'll share it as a complementary to the accepted answer.\r\n\r\n**The value of the cloudwatch log group arn**:\r\n\r\n    ${aws_cloudwatch_log_group.test-app-loggroup.arn}\r\n\r\n\r\n**Isn't being interpolated correctly** **- there is a missing \"`:*`\" at the end of the output.**\r\n\r\nThis leads to the error below:\r\n\r\n> Error creating {the-calling-service}: InvalidCloudWatchLogsLogGroupArnException:\r\n> Check the log group ARN: {the-calling-service} can't validate it.\r\n\r\n\r\nAdding a `:*` postfix solved the issue:   \r\n\r\n    source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}:*\" #<----Notice the :* postfix\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Working with Terraform `v0.12.29` and AWS provider `v3.1.0` I encountered a strange issue which cost me a few hours of debugging. ", "keywords": ["cost", "provider"]}, {"source": "Text", "text": "**The value of the cloudwatch log group arn**: ${aws_cloudwatch_log_group.test-app-loggroup.arn} **Isn't being interpolated correctly** **- there is a missing \"`:*`\" at the end of the output.** This leads to the error below: > Error creating {the-calling-service}: InvalidCloudWatchLogsLogGroupArnException: > Check the log group ARN: {the-calling-service} can't validate it. ", "keywords": ["test"]}, {"source": "Text", "text": "Adding a `:*` postfix solved the issue: source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}:*\" #<----Notice the :* postfix", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "Working with Terraform v0.12.29 and AWS provider v3.1.0 I encountered a strange issue which cost me a few hours of debugging. ", "keywords": ["cost", "provider"]}]}, {"Id": "38428834", "PostTypeId": "2", "ParentId": "38407660", "CreationDate": "2016-07-18T04:57:22.710", "Score": "60", "Body": "<p>I had the <code>aws_cloudwatch_log_subscription_filter</code> resource defined incorrectly - you should not provide the <code>role_arn</code> argument in this situation.</p>\n\n<p>You also need to add an <code>aws_lambda_permission</code> resource (with a <code>depends_on</code> relationship defined on the filter or TF may do it in the wrong order).</p>\n\n<p>Note that the AWS lambda console UI adds the lambda permission for you invisibly, so beware that the <code>aws_cloudwatch_log_subscription_filter</code> will work without the permission resource if you happen to have done the same action before in the console UI.</p>\n\n<p>The necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual <code>cloudwatch-&gt;lambda</code> trigger):</p>\n\n<pre class=\"lang-hcl prettyprint-override\"><code>// intended for application logs (access logs, modsec, etc.)\nresource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" {\n  name              = \"test-app\"\n  retention_in_days = 90\n}\n\nresource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" {\n  name = \"cloudwatch-sumologic-lambda-sg\"\n\n  tags {\n    Name = \"cloudwatch-sumologic-lambda-sg\"\n  }\n\n  description = \"Security group for lambda to move logs from CWL to SumoLogic\"\n  vpc_id      = \"${aws_vpc.dev-vpc.id}\"\n}\n\nresource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" {\n  type              = \"egress\"\n  from_port         = 443\n  to_port           = 443\n  protocol          = \"tcp\"\n  security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"\n  cidr_blocks       = [\"0.0.0.0/0\"]\n}\n\nresource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" {\n  name = \"test-cloudwatch-lambda-role\"\n\n  assume_role_policy = &lt;&lt;EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" {\n  name = \"test-cloudwatch-lambda-policy\"\n  role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\"\n\n  policy = &lt;&lt;EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:CreateNetworkInterface\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeNetworkInterfaces\",\n        \"ec2:DeleteNetworkInterface\"\n      ],\n      \"Resource\": \"arn:aws:ec2:ap-southeast-2:${var.dev_vpc_account_id}:network-interface/*\"\n    },\n\n    {\n      \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"logs:CreateLogGroup\",\n      \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:*\"\n    },\n    {\n      \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": [\n    \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:log-group:/aws/lambda/*\"\n      ]\n    },\n\n    {\n      \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n         \"ec2:DescribeImages\"\n      ],\n      \"Resource\": \"*\"\n    }\n\n\n  ]\n}\nEOF\n}\n\nresource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" {\n  function_name    = \"cloudwatch-sumologic-lambda\"\n  filename         = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"\n  source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\"\n  handler          = \"cloudwatchSumologic.handler\"\n\n  role        = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\"\n  memory_size = \"128\"\n  runtime     = \"nodejs4.3\"\n\n  // set low because I'm concerned about cost-blowout in the case of mis-configuration\n  timeout = \"15\"\n\n  vpc_config = {\n    subnet_ids         = [\"${aws_subnet.dev-private-subnet.id}\"]\n    security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"]\n  }\n}\n\nresource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" {\n  statement_id  = \"test-app-allow-cloudwatch\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\n  principal     = \"logs.ap-southeast-2.amazonaws.com\"\n  source_arn    = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\"\n}\n\nresource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" {\n  depends_on      = [\"aws_lambda_permission.test-app-allow-cloudwatch\"]\n  name            = \"cloudwatch-sumologic-lambda-subscription\"\n  log_group_name  = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\"\n  filter_pattern  = \"\"\n  destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\n}\n</code></pre>\n\n<p><strong>EDIT</strong>: Please note that the above TF code was written years ago, using version <code>0.11.x</code> - it should still work but there may be better ways of doing things.  Specifically, don't use an inline policy like this unless needed, use an <a href=\"https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html\" rel=\"noreferrer\">aws_iam_policy_document</a> instead - they're just way easier to maintain over time.</p>\n", "OwnerUserId": "924597", "LastEditorUserId": "924597", "LastEditDate": "2019-09-02T04:36:10.713", "LastActivityDate": "2019-09-02T04:36:10.713", "CommentCount": "6", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "86475230", "PostId": "38428834", "Score": "0", "Text": "I think there is no need to create \"aws_cloudwatch_log_group\" as it is already created by lambda function while pushing the logs.\nIf you want to push for some specific scenario then maybe its fine.", "CreationDate": "2018-04-09T10:34:10.920", "UserId": "3331076", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "86500687", "PostId": "38428834", "Score": "8", "Text": "@JayeshDhandha  It's always better to create resources (log groups, permissions, etc.) from TF rather than let the AWS backend create them for you.  This way you have a handle to them when you want to configure them properly (in the case of log_group, for example when you want to control the contention).  Additionally, by creating them yourself, you know exactly how the thing is configured (auto-created AWS resources are undocumented and subject to change).", "CreationDate": "2018-04-09T23:13:03.287", "UserId": "924597", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Additionally, by creating them yourself, you know exactly how the thing is configured (auto-created AWS resources are undocumented and subject to change).", "keywords": ["change"]}]}, {"Id": "105155358", "PostId": "38428834", "Score": "0", "Text": "Nice solution, thanks for sharing, but i have to add \"*\" at the end of the log group arn : ${aws_cloudwatch_log_group.test-app-loggroup.arn}:*", "CreationDate": "2019-12-26T15:44:06.893", "UserId": "1297406", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Nice solution, thanks for sharing, but i have to add \"*\" at the end of the log group arn : ${aws_cloudwatch_log_group.test-app-loggroup.arn}:*", "keywords": ["test"]}]}, {"Id": "108993003", "PostId": "38428834", "Score": "0", "Text": "I wish this example would have been on this page: \nhttps://www.terraform.io/docs/providers/aws/r/cloudwatch_log_subscription_filter.html", "CreationDate": "2020-05-05T15:19:12.380", "UserId": "1343364", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "117531636", "PostId": "38428834", "Score": "4", "Text": "I had to set `source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}:*\" ` as suggested by RtmY below. I was using terraform 0.14.6", "CreationDate": "2021-03-04T21:00:03.320", "UserId": "1895825", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I had to set `source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}:*\" ` ", "keywords": ["test"]}]}, {"Id": "118720543", "PostId": "38428834", "Score": "0", "Text": "@GopiPalamalai  , same here, without it , i got the error `Could not execute the lambda function. Make sure you have given CloudWatch Logs permission to execute your function`", "CreationDate": "2021-04-19T15:43:51.817", "UserId": "1185460", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "122853992", "PostHistoryTypeId": "2", "PostId": "38428834", "RevisionGUID": "70122df0-dd1d-4ef4-a8fb-c46fcb9cce73", "CreationDate": "2016-07-18T04:57:22.710", "UserId": "924597", "Text": "I had the \"aws_cloudwatch_log_subscription_filter\" resource defined incorrectly - you should not provide the \"role_arn\" argument in this situation.\r\n\r\nYou also need to add an aws_lambda_permission resource (with a \"depends_on\" relationship defined on the filter or TF may do it in the wrong order).\r\n\r\nNote that the AWS lambda console UI adds the lambda permission for you invisibly, so beware that the \"aws_cloudwatch_log_subscription_filter\" will work without the permission resource if you happen to have done the same action before in the console UI.\r\n\r\nThe necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual cloudwatch->lambda trigger):\r\n\r\n // intended for application logs (access logs, modsec, etc.)\r\n resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" {\r\n   name = \"test-app\"\r\n   retention_in_days = 90\r\n }\r\n\r\n\r\n resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" {\r\n   name = \"cloudwatch-sumologic-lambda-sg\"\r\n   tags {\r\n     Name = \"cloudwatch-sumologic-lambda-sg\"\r\n   }\r\n   description = \"Security group for lambda to move logs from CWL to SumoLogic\"\r\n   vpc_id = \"${aws_vpc.dev-vpc.id}\"\r\n }\r\n\r\n resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" {\r\n   type = \"egress\"\r\n   from_port = 443\r\n   to_port = 443\r\n   protocol = \"tcp\"\r\n   security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"\r\n   cidr_blocks = [\"0.0.0.0/0\"]\r\n }\r\n\r\n resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" {\r\n   name = \"test-cloudwatch-lambda-role\"\r\n   assume_role_policy = <<EOF\r\n {\r\n   \"Version\": \"2012-10-17\",\r\n   \"Statement\": [\r\n     {\r\n       \"Action\": \"sts:AssumeRole\",\r\n       \"Principal\": {\r\n      \"Service\": \"lambda.amazonaws.com\"\r\n       },\r\n       \"Effect\": \"Allow\"\r\n     }\r\n   ]\r\n }\r\n EOF\r\n }\r\n\r\n resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" {\r\n   name = \"test-cloudwatch-lambda-policy\"\r\n   role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\"\r\n   policy = <<EOF\r\n {\r\n   \"Version\": \"2012-10-17\",\r\n   \"Statement\": [\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": [\r\n      \"ec2:CreateNetworkInterface\"\r\n       ],\r\n       \"Resource\": \"*\"\r\n     },\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": [\r\n      \"ec2:DescribeNetworkInterfaces\",\r\n      \"ec2:DeleteNetworkInterface\"\r\n       ],\r\n       \"Resource\": \"arn:aws:ec2:ap-southeast-2:944902440256:network-interface/*\"\r\n     },\r\n\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": \"logs:CreateLogGroup\",\r\n       \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.flux_dev_vpc_account_id}:*\"\r\n     },\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": [\r\n      \"logs:CreateLogStream\",\r\n      \"logs:PutLogEvents\"\r\n       ],\r\n       \"Resource\": [\r\n  \"arn:aws:logs:ap-southeast-2:${var.flux_dev_vpc_account_id}:log-group:/aws/lambda/*\"\r\n       ]\r\n     },\r\n\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": [\r\n       \"ec2:DescribeImages\"\r\n       ],\r\n       \"Resource\": \"*\"\r\n     }\r\n\r\n\r\n   ]\r\n }\r\n EOF\r\n }\r\n\r\n resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" {\r\n   function_name = \"cloudwatch-sumologic-lambda\"\r\n   filename = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"\r\n   source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\"\r\n   handler = \"cloudwatchSumologic.handler\"\r\n\r\n   role = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\"\r\n   memory_size = \"128\"\r\n   runtime = \"nodejs4.3\"\r\n   // set low because I'm concerned about cost-blowout in the case of mis-configuration\r\n   timeout = \"15\"\r\n   vpc_config = {\r\n     subnet_ids = [\"${aws_subnet.dev-private-subnet.id}\"]\r\n     security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"]\r\n   }\r\n }\r\n\r\n resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" {\r\n   statement_id = \"test-app-allow-cloudwatch\"\r\n   action = \"lambda:InvokeFunction\"\r\n   function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n   principal = \"logs.ap-southeast-2.amazonaws.com\"\r\n   source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\"\r\n }\r\n\r\n resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" {\r\n   depends_on = [\"aws_lambda_permission.test-app-allow-cloudwatch\"]\r\n   name = \"cloudwatch-sumologic-lambda-subscription\"\r\n   log_group_name = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\"\r\n   filter_pattern = \"\"\r\n   destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n }\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual cloudwatch->lambda trigger): // intended for application logs (access logs, modsec, etc.) resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" { name = \"test-app\" retention_in_days = 90 } resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" { name = \"cloudwatch-sumologic-lambda-sg\" tags { Name = \"cloudwatch-sumologic-lambda-sg\" } description = \"Security group for lambda to move logs from CWL to SumoLogic\" vpc_id = \"${aws_vpc.dev-vpc.id}\" } resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" { type = \"egress\" from_port = 443 to_port = 443 protocol = \"tcp\" security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\" cidr_blocks = [\"0.0.0.0/0\"] } resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" { name = \"test-cloudwatch-lambda-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"lambda.amazonaws.com\" }, \"Effect\": \"Allow\" } ] } EOF } resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" { name = \"test-cloudwatch-lambda-policy\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\" policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:CreateNetworkInterface\" ], \"Resource\": \"*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeNetworkInterfaces\", \"ec2:DeleteNetworkInterface\" ], \"Resource\": \"arn:aws:ec2:ap-southeast-2:944902440256:network-interface/*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\", \"Effect\": \"Allow\", \"Action\": \"logs:CreateLogGroup\", \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.flux_dev_vpc_account_id}:*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"logs:CreateLogStream\", \"logs:PutLogEvents\" ], \"Resource\": [ \"arn:aws:logs:ap-southeast-2:${var.flux_dev_vpc_account_id}:log-group:/aws/lambda/*\" ] }, { \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeImages\" ], \"Resource\": \"*\" } ] } EOF } resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" { function_name = \"cloudwatch-sumologic-lambda\" filename = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\" source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\" handler = \"cloudwatchSumologic.handler\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\" memory_size = \"128\" runtime = \"nodejs4.3\" // set low because I'm concerned about cost-blowout in the case of mis-configuration timeout = \"15\" vpc_config = { subnet_ids = [\"${aws_subnet.dev-private-subnet.id}\"] security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"] } } resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" { statement_id = \"test-app-allow-cloudwatch\" action = \"lambda:InvokeFunction\" function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" principal = \"logs.ap-southeast-2.amazonaws.com\" source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\" } resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" { depends_on = [\"aws_lambda_permission.test-app-allow-cloudwatch\"] name = \"cloudwatch-sumologic-lambda-subscription\" log_group_name = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\" filter_pattern = \"\" destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn", "keywords": ["cost", "policy", "test"]}]}, {"Id": "137032524", "PostHistoryTypeId": "5", "PostId": "38428834", "RevisionGUID": "380a3e8a-20ef-4b83-b037-5c9732a658fc", "CreationDate": "2017-01-28T04:09:46.323", "UserId": "924597", "Comment": "deleted 10 characters in body", "Text": "I had the \"aws_cloudwatch_log_subscription_filter\" resource defined incorrectly - you should not provide the \"role_arn\" argument in this situation.\r\n\r\nYou also need to add an aws_lambda_permission resource (with a \"depends_on\" relationship defined on the filter or TF may do it in the wrong order).\r\n\r\nNote that the AWS lambda console UI adds the lambda permission for you invisibly, so beware that the \"aws_cloudwatch_log_subscription_filter\" will work without the permission resource if you happen to have done the same action before in the console UI.\r\n\r\nThe necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual cloudwatch->lambda trigger):\r\n\r\n // intended for application logs (access logs, modsec, etc.)\r\n resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" {\r\n   name = \"test-app\"\r\n   retention_in_days = 90\r\n }\r\n\r\n\r\n resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" {\r\n   name = \"cloudwatch-sumologic-lambda-sg\"\r\n   tags {\r\n     Name = \"cloudwatch-sumologic-lambda-sg\"\r\n   }\r\n   description = \"Security group for lambda to move logs from CWL to SumoLogic\"\r\n   vpc_id = \"${aws_vpc.dev-vpc.id}\"\r\n }\r\n\r\n resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" {\r\n   type = \"egress\"\r\n   from_port = 443\r\n   to_port = 443\r\n   protocol = \"tcp\"\r\n   security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"\r\n   cidr_blocks = [\"0.0.0.0/0\"]\r\n }\r\n\r\n resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" {\r\n   name = \"test-cloudwatch-lambda-role\"\r\n   assume_role_policy = <<EOF\r\n {\r\n   \"Version\": \"2012-10-17\",\r\n   \"Statement\": [\r\n     {\r\n       \"Action\": \"sts:AssumeRole\",\r\n       \"Principal\": {\r\n      \"Service\": \"lambda.amazonaws.com\"\r\n       },\r\n       \"Effect\": \"Allow\"\r\n     }\r\n   ]\r\n }\r\n EOF\r\n }\r\n\r\n resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" {\r\n   name = \"test-cloudwatch-lambda-policy\"\r\n   role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\"\r\n   policy = <<EOF\r\n {\r\n   \"Version\": \"2012-10-17\",\r\n   \"Statement\": [\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": [\r\n      \"ec2:CreateNetworkInterface\"\r\n       ],\r\n       \"Resource\": \"*\"\r\n     },\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": [\r\n      \"ec2:DescribeNetworkInterfaces\",\r\n      \"ec2:DeleteNetworkInterface\"\r\n       ],\r\n       \"Resource\": \"arn:aws:ec2:ap-southeast-2:${var.dev_vpc_account_id}:network-interface/*\"\r\n     },\r\n\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": \"logs:CreateLogGroup\",\r\n       \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:*\"\r\n     },\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": [\r\n      \"logs:CreateLogStream\",\r\n      \"logs:PutLogEvents\"\r\n       ],\r\n       \"Resource\": [\r\n  \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:log-group:/aws/lambda/*\"\r\n       ]\r\n     },\r\n\r\n     {\r\n       \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\",\r\n       \"Effect\": \"Allow\",\r\n       \"Action\": [\r\n       \"ec2:DescribeImages\"\r\n       ],\r\n       \"Resource\": \"*\"\r\n     }\r\n\r\n\r\n   ]\r\n }\r\n EOF\r\n }\r\n\r\n resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" {\r\n   function_name = \"cloudwatch-sumologic-lambda\"\r\n   filename = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"\r\n   source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\"\r\n   handler = \"cloudwatchSumologic.handler\"\r\n\r\n   role = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\"\r\n   memory_size = \"128\"\r\n   runtime = \"nodejs4.3\"\r\n   // set low because I'm concerned about cost-blowout in the case of mis-configuration\r\n   timeout = \"15\"\r\n   vpc_config = {\r\n     subnet_ids = [\"${aws_subnet.dev-private-subnet.id}\"]\r\n     security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"]\r\n   }\r\n }\r\n\r\n resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" {\r\n   statement_id = \"test-app-allow-cloudwatch\"\r\n   action = \"lambda:InvokeFunction\"\r\n   function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n   principal = \"logs.ap-southeast-2.amazonaws.com\"\r\n   source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\"\r\n }\r\n\r\n resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" {\r\n   depends_on = [\"aws_lambda_permission.test-app-allow-cloudwatch\"]\r\n   name = \"cloudwatch-sumologic-lambda-subscription\"\r\n   log_group_name = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\"\r\n   filter_pattern = \"\"\r\n   destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n }\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual cloudwatch->lambda trigger): // intended for application logs (access logs, modsec, etc.) resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" { name = \"test-app\" retention_in_days = 90 } resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" { name = \"cloudwatch-sumologic-lambda-sg\" tags { Name = \"cloudwatch-sumologic-lambda-sg\" } description = \"Security group for lambda to move logs from CWL to SumoLogic\" vpc_id = \"${aws_vpc.dev-vpc.id}\" } resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" { type = \"egress\" from_port = 443 to_port = 443 protocol = \"tcp\" security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\" cidr_blocks = [\"0.0.0.0/0\"] } resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" { name = \"test-cloudwatch-lambda-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"lambda.amazonaws.com\" }, \"Effect\": \"Allow\" } ] } EOF } resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" { name = \"test-cloudwatch-lambda-policy\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\" policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:CreateNetworkInterface\" ], \"Resource\": \"*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeNetworkInterfaces\", \"ec2:DeleteNetworkInterface\" ], \"Resource\": \"arn:aws:ec2:ap-southeast-2:${var.dev_vpc_account_id}:network-interface/*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\", \"Effect\": \"Allow\", \"Action\": \"logs:CreateLogGroup\", \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"logs:CreateLogStream\", \"logs:PutLogEvents\" ], \"Resource\": [ \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:log-group:/aws/lambda/*\" ] }, { \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeImages\" ], \"Resource\": \"*\" } ] } EOF } resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" { function_name = \"cloudwatch-sumologic-lambda\" filename = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\" source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\" handler = \"cloudwatchSumologic.handler\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\" memory_size = \"128\" runtime = \"nodejs4.3\" // set low because I'm concerned about cost-blowout in the case of mis-configuration timeout = \"15\" vpc_config = { subnet_ids = [\"${aws_subnet.dev-private-subnet.id}\"] security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"] } } resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" { statement_id = \"test-app-allow-cloudwatch\" action = \"lambda:InvokeFunction\" function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" principal = \"logs.ap-southeast-2.amazonaws.com\" source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\" } resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" { depends_on = [\"aws_lambda_permission.test-app-allow-cloudwatch\"] name = \"cloudwatch-sumologic-lambda-subscription\" log_group_name = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\" filter_pattern = \"\" destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn", "keywords": ["cost", "policy", "test"]}]}, {"Id": "192542456", "PostHistoryTypeId": "5", "PostId": "38428834", "RevisionGUID": "7609b0b2-cf06-4029-9445-bc72f484202b", "CreationDate": "2019-02-27T14:09:28.050", "UserId": "1092815", "Comment": "syntax highlighting + terraform fmt", "Text": "I had the `aws_cloudwatch_log_subscription_filter` resource defined incorrectly - you should not provide the `role_arn` argument in this situation.\r\n\r\nYou also need to add an `aws_lambda_permission` resource (with a `depends_on` relationship defined on the filter or TF may do it in the wrong order).\r\n\r\nNote that the AWS lambda console UI adds the lambda permission for you invisibly, so beware that the `aws_cloudwatch_log_subscription_filter` will work without the permission resource if you happen to have done the same action before in the console UI.\r\n\r\nThe necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual `cloudwatch->lambda` trigger):\r\n\r\n<!-- language: lang-hcl -->\r\n\r\n    // intended for application logs (access logs, modsec, etc.)\r\n    resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" {\r\n      name              = \"test-app\"\r\n      retention_in_days = 90\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" {\r\n      name = \"cloudwatch-sumologic-lambda-sg\"\r\n    \r\n      tags {\r\n        Name = \"cloudwatch-sumologic-lambda-sg\"\r\n      }\r\n    \r\n      description = \"Security group for lambda to move logs from CWL to SumoLogic\"\r\n      vpc_id      = \"${aws_vpc.dev-vpc.id}\"\r\n    }\r\n    \r\n    resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" {\r\n      type              = \"egress\"\r\n      from_port         = 443\r\n      to_port           = 443\r\n      protocol          = \"tcp\"\r\n      security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"\r\n      cidr_blocks       = [\"0.0.0.0/0\"]\r\n    }\r\n    \r\n    resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" {\r\n      name = \"test-cloudwatch-lambda-role\"\r\n    \r\n      assume_role_policy = <<EOF\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n        {\r\n          \"Action\": \"sts:AssumeRole\",\r\n          \"Principal\": {\r\n            \"Service\": \"lambda.amazonaws.com\"\r\n          },\r\n          \"Effect\": \"Allow\"\r\n        }\r\n      ]\r\n    }\r\n    EOF\r\n    }\r\n    \r\n    resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" {\r\n      name = \"test-cloudwatch-lambda-policy\"\r\n      role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\"\r\n    \r\n      policy = <<EOF\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n            \"ec2:CreateNetworkInterface\"\r\n          ],\r\n          \"Resource\": \"*\"\r\n        },\r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n            \"ec2:DescribeNetworkInterfaces\",\r\n            \"ec2:DeleteNetworkInterface\"\r\n          ],\r\n          \"Resource\": \"arn:aws:ec2:ap-southeast-2:${var.dev_vpc_account_id}:network-interface/*\"\r\n        },\r\n    \r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": \"logs:CreateLogGroup\",\r\n          \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:*\"\r\n        },\r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n            \"logs:CreateLogStream\",\r\n            \"logs:PutLogEvents\"\r\n          ],\r\n          \"Resource\": [\r\n        \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:log-group:/aws/lambda/*\"\r\n          ]\r\n        },\r\n    \r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n             \"ec2:DescribeImages\"\r\n          ],\r\n          \"Resource\": \"*\"\r\n        }\r\n    \r\n    \r\n      ]\r\n    }\r\n    EOF\r\n    }\r\n    \r\n    resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" {\r\n      function_name    = \"cloudwatch-sumologic-lambda\"\r\n      filename         = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"\r\n      source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\"\r\n      handler          = \"cloudwatchSumologic.handler\"\r\n    \r\n      role        = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\"\r\n      memory_size = \"128\"\r\n      runtime     = \"nodejs4.3\"\r\n    \r\n      // set low because I'm concerned about cost-blowout in the case of mis-configuration\r\n      timeout = \"15\"\r\n    \r\n      vpc_config = {\r\n        subnet_ids         = [\"${aws_subnet.dev-private-subnet.id}\"]\r\n        security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"]\r\n      }\r\n    }\r\n    \r\n    resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" {\r\n      statement_id  = \"test-app-allow-cloudwatch\"\r\n      action        = \"lambda:InvokeFunction\"\r\n      function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n      principal     = \"logs.ap-southeast-2.amazonaws.com\"\r\n      source_arn    = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\"\r\n    }\r\n    \r\n    resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" {\r\n      depends_on      = [\"aws_lambda_permission.test-app-allow-cloudwatch\"]\r\n      name            = \"cloudwatch-sumologic-lambda-subscription\"\r\n      log_group_name  = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\"\r\n      filter_pattern  = \"\"\r\n      destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual `cloudwatch->lambda` trigger): // intended for application logs (access logs, modsec, etc.) resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" { name = \"test-app\" retention_in_days = 90 } resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" { name = \"cloudwatch-sumologic-lambda-sg\" tags { Name = \"cloudwatch-sumologic-lambda-sg\" } description = \"Security group for lambda to move logs from CWL to SumoLogic\" vpc_id = \"${aws_vpc.dev-vpc.id}\" } resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" { type = \"egress\" from_port = 443 to_port = 443 protocol = \"tcp\" security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\" cidr_blocks = [\"0.0.0.0/0\"] } resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" { name = \"test-cloudwatch-lambda-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"lambda.amazonaws.com\" }, \"Effect\": \"Allow\" } ] } EOF } resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" { name = \"test-cloudwatch-lambda-policy\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\" policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:CreateNetworkInterface\" ], \"Resource\": \"*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeNetworkInterfaces\", \"ec2:DeleteNetworkInterface\" ], \"Resource\": \"arn:aws:ec2:ap-southeast-2:${var.dev_vpc_account_id}:network-interface/*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\", \"Effect\": \"Allow\", \"Action\": \"logs:CreateLogGroup\", \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"logs:CreateLogStream\", \"logs:PutLogEvents\" ], \"Resource\": [ \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:log-group:/aws/lambda/*\" ] }, { \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeImages\" ], \"Resource\": \"*\" } ] } EOF } resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" { function_name = \"cloudwatch-sumologic-lambda\" filename = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\" source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\" handler = \"cloudwatchSumologic.handler\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\" memory_size = \"128\" runtime = \"nodejs4.3\" // set low because I'm concerned about cost-blowout in the case of mis-configuration timeout = \"15\" vpc_config = { subnet_ids = [\"${aws_subnet.dev-private-subnet.id}\"] security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"] } } resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" { statement_id = \"test-app-allow-cloudwatch\" action = \"lambda:InvokeFunction\" function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" principal = \"logs.ap-southeast-2.amazonaws.com\" source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\" } resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" { depends_on = [\"aws_lambda_permission.test-app-allow-cloudwatch\"] name = \"cloudwatch-sumologic-lambda-subscription\" log_group_name = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\" filter_pattern = \"\" destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn", "keywords": ["cost", "policy", "test"]}]}, {"Id": "200011213", "PostHistoryTypeId": "5", "PostId": "38428834", "RevisionGUID": "ff21af71-1a7e-4487-88da-841b9bce1f1c", "CreationDate": "2019-06-20T00:26:55.013", "UserId": "924597", "Comment": "added 305 characters in body", "Text": "I had the `aws_cloudwatch_log_subscription_filter` resource defined incorrectly - you should not provide the `role_arn` argument in this situation.\r\n\r\nYou also need to add an `aws_lambda_permission` resource (with a `depends_on` relationship defined on the filter or TF may do it in the wrong order).\r\n\r\nNote that the AWS lambda console UI adds the lambda permission for you invisibly, so beware that the `aws_cloudwatch_log_subscription_filter` will work without the permission resource if you happen to have done the same action before in the console UI.\r\n\r\nThe necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual `cloudwatch->lambda` trigger):\r\n\r\n<!-- language: lang-hcl -->\r\n\r\n    // intended for application logs (access logs, modsec, etc.)\r\n    resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" {\r\n      name              = \"test-app\"\r\n      retention_in_days = 90\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" {\r\n      name = \"cloudwatch-sumologic-lambda-sg\"\r\n    \r\n      tags {\r\n        Name = \"cloudwatch-sumologic-lambda-sg\"\r\n      }\r\n    \r\n      description = \"Security group for lambda to move logs from CWL to SumoLogic\"\r\n      vpc_id      = \"${aws_vpc.dev-vpc.id}\"\r\n    }\r\n    \r\n    resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" {\r\n      type              = \"egress\"\r\n      from_port         = 443\r\n      to_port           = 443\r\n      protocol          = \"tcp\"\r\n      security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"\r\n      cidr_blocks       = [\"0.0.0.0/0\"]\r\n    }\r\n    \r\n    resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" {\r\n      name = \"test-cloudwatch-lambda-role\"\r\n    \r\n      assume_role_policy = <<EOF\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n        {\r\n          \"Action\": \"sts:AssumeRole\",\r\n          \"Principal\": {\r\n            \"Service\": \"lambda.amazonaws.com\"\r\n          },\r\n          \"Effect\": \"Allow\"\r\n        }\r\n      ]\r\n    }\r\n    EOF\r\n    }\r\n    \r\n    resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" {\r\n      name = \"test-cloudwatch-lambda-policy\"\r\n      role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\"\r\n    \r\n      policy = <<EOF\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n            \"ec2:CreateNetworkInterface\"\r\n          ],\r\n          \"Resource\": \"*\"\r\n        },\r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n            \"ec2:DescribeNetworkInterfaces\",\r\n            \"ec2:DeleteNetworkInterface\"\r\n          ],\r\n          \"Resource\": \"arn:aws:ec2:ap-southeast-2:${var.dev_vpc_account_id}:network-interface/*\"\r\n        },\r\n    \r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": \"logs:CreateLogGroup\",\r\n          \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:*\"\r\n        },\r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n            \"logs:CreateLogStream\",\r\n            \"logs:PutLogEvents\"\r\n          ],\r\n          \"Resource\": [\r\n        \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:log-group:/aws/lambda/*\"\r\n          ]\r\n        },\r\n    \r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n             \"ec2:DescribeImages\"\r\n          ],\r\n          \"Resource\": \"*\"\r\n        }\r\n    \r\n    \r\n      ]\r\n    }\r\n    EOF\r\n    }\r\n    \r\n    resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" {\r\n      function_name    = \"cloudwatch-sumologic-lambda\"\r\n      filename         = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"\r\n      source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\"\r\n      handler          = \"cloudwatchSumologic.handler\"\r\n    \r\n      role        = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\"\r\n      memory_size = \"128\"\r\n      runtime     = \"nodejs4.3\"\r\n    \r\n      // set low because I'm concerned about cost-blowout in the case of mis-configuration\r\n      timeout = \"15\"\r\n    \r\n      vpc_config = {\r\n        subnet_ids         = [\"${aws_subnet.dev-private-subnet.id}\"]\r\n        security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"]\r\n      }\r\n    }\r\n    \r\n    resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" {\r\n      statement_id  = \"test-app-allow-cloudwatch\"\r\n      action        = \"lambda:InvokeFunction\"\r\n      function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n      principal     = \"logs.ap-southeast-2.amazonaws.com\"\r\n      source_arn    = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\"\r\n    }\r\n    \r\n    resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" {\r\n      depends_on      = [\"aws_lambda_permission.test-app-allow-cloudwatch\"]\r\n      name            = \"cloudwatch-sumologic-lambda-subscription\"\r\n      log_group_name  = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\"\r\n      filter_pattern  = \"\"\r\n      destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n    }\r\n\r\n**EDIT**: Please note that the above TF code was written years ago, it should still work but there may be better ways of doing things.  Specifically, don't use an inline policy like this unless needed, use an [aws_iam_policy_document][1] instead - they're just way easier to maintain over time.\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual `cloudwatch->lambda` trigger): // intended for application logs (access logs, modsec, etc.) resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" { name = \"test-app\" retention_in_days = 90 } resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" { name = \"cloudwatch-sumologic-lambda-sg\" tags { Name = \"cloudwatch-sumologic-lambda-sg\" } description = \"Security group for lambda to move logs from CWL to SumoLogic\" vpc_id = \"${aws_vpc.dev-vpc.id}\" } resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" { type = \"egress\" from_port = 443 to_port = 443 protocol = \"tcp\" security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\" cidr_blocks = [\"0.0.0.0/0\"] } resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" { name = \"test-cloudwatch-lambda-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"lambda.amazonaws.com\" }, \"Effect\": \"Allow\" } ] } EOF } resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" { name = \"test-cloudwatch-lambda-policy\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\" policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:CreateNetworkInterface\" ], \"Resource\": \"*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeNetworkInterfaces\", \"ec2:DeleteNetworkInterface\" ], \"Resource\": \"arn:aws:ec2:ap-southeast-2:${var.dev_vpc_account_id}:network-interface/*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\", \"Effect\": \"Allow\", \"Action\": \"logs:CreateLogGroup\", \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"logs:CreateLogStream\", \"logs:PutLogEvents\" ], \"Resource\": [ \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:log-group:/aws/lambda/*\" ] }, { \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeImages\" ], \"Resource\": \"*\" } ] } EOF } resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" { function_name = \"cloudwatch-sumologic-lambda\" filename = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\" source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\" handler = \"cloudwatchSumologic.handler\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\" memory_size = \"128\" runtime = \"nodejs4.3\" // set low because I'm concerned about cost-blowout in the case of mis-configuration timeout = \"15\" vpc_config = { subnet_ids = [\"${aws_subnet.dev-private-subnet.id}\"] security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"] } } resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" { statement_id = \"test-app-allow-cloudwatch\" action = \"lambda:InvokeFunction\" function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" principal = \"logs.ap-southeast-2.amazonaws.com\" source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\" } resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" { depends_on = [\"aws_lambda_permission.test-app-allow-cloudwatch\"] name = \"cloudwatch-sumologic-lambda-subscription\" log_group_name = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\" filter_pattern = \"\" destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" } **EDIT**: Please note that the above TF code was written years ago, it should still work but there may be better ways of doing things. ", "keywords": ["cost", "policy", "test"]}, {"source": "Text", "text": "Specifically, don't use an inline policy like this unless needed, use an [aws_iam_policy_document][1] instead - they're just way easier to maintain over time. [1]: https://www", "keywords": ["policy"]}]}, {"Id": "204577417", "PostHistoryTypeId": "5", "PostId": "38428834", "RevisionGUID": "675dc0bd-5cd1-4628-b785-467973d89e32", "CreationDate": "2019-09-02T04:36:10.713", "UserId": "924597", "Comment": "added 25 characters in body", "Text": "I had the `aws_cloudwatch_log_subscription_filter` resource defined incorrectly - you should not provide the `role_arn` argument in this situation.\r\n\r\nYou also need to add an `aws_lambda_permission` resource (with a `depends_on` relationship defined on the filter or TF may do it in the wrong order).\r\n\r\nNote that the AWS lambda console UI adds the lambda permission for you invisibly, so beware that the `aws_cloudwatch_log_subscription_filter` will work without the permission resource if you happen to have done the same action before in the console UI.\r\n\r\nThe necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual `cloudwatch->lambda` trigger):\r\n\r\n<!-- language: lang-hcl -->\r\n\r\n    // intended for application logs (access logs, modsec, etc.)\r\n    resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" {\r\n      name              = \"test-app\"\r\n      retention_in_days = 90\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" {\r\n      name = \"cloudwatch-sumologic-lambda-sg\"\r\n    \r\n      tags {\r\n        Name = \"cloudwatch-sumologic-lambda-sg\"\r\n      }\r\n    \r\n      description = \"Security group for lambda to move logs from CWL to SumoLogic\"\r\n      vpc_id      = \"${aws_vpc.dev-vpc.id}\"\r\n    }\r\n    \r\n    resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" {\r\n      type              = \"egress\"\r\n      from_port         = 443\r\n      to_port           = 443\r\n      protocol          = \"tcp\"\r\n      security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"\r\n      cidr_blocks       = [\"0.0.0.0/0\"]\r\n    }\r\n    \r\n    resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" {\r\n      name = \"test-cloudwatch-lambda-role\"\r\n    \r\n      assume_role_policy = <<EOF\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n        {\r\n          \"Action\": \"sts:AssumeRole\",\r\n          \"Principal\": {\r\n            \"Service\": \"lambda.amazonaws.com\"\r\n          },\r\n          \"Effect\": \"Allow\"\r\n        }\r\n      ]\r\n    }\r\n    EOF\r\n    }\r\n    \r\n    resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" {\r\n      name = \"test-cloudwatch-lambda-policy\"\r\n      role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\"\r\n    \r\n      policy = <<EOF\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n            \"ec2:CreateNetworkInterface\"\r\n          ],\r\n          \"Resource\": \"*\"\r\n        },\r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n            \"ec2:DescribeNetworkInterfaces\",\r\n            \"ec2:DeleteNetworkInterface\"\r\n          ],\r\n          \"Resource\": \"arn:aws:ec2:ap-southeast-2:${var.dev_vpc_account_id}:network-interface/*\"\r\n        },\r\n    \r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": \"logs:CreateLogGroup\",\r\n          \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:*\"\r\n        },\r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n            \"logs:CreateLogStream\",\r\n            \"logs:PutLogEvents\"\r\n          ],\r\n          \"Resource\": [\r\n        \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:log-group:/aws/lambda/*\"\r\n          ]\r\n        },\r\n    \r\n        {\r\n          \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\",\r\n          \"Effect\": \"Allow\",\r\n          \"Action\": [\r\n             \"ec2:DescribeImages\"\r\n          ],\r\n          \"Resource\": \"*\"\r\n        }\r\n    \r\n    \r\n      ]\r\n    }\r\n    EOF\r\n    }\r\n    \r\n    resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" {\r\n      function_name    = \"cloudwatch-sumologic-lambda\"\r\n      filename         = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"\r\n      source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\"\r\n      handler          = \"cloudwatchSumologic.handler\"\r\n    \r\n      role        = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\"\r\n      memory_size = \"128\"\r\n      runtime     = \"nodejs4.3\"\r\n    \r\n      // set low because I'm concerned about cost-blowout in the case of mis-configuration\r\n      timeout = \"15\"\r\n    \r\n      vpc_config = {\r\n        subnet_ids         = [\"${aws_subnet.dev-private-subnet.id}\"]\r\n        security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"]\r\n      }\r\n    }\r\n    \r\n    resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" {\r\n      statement_id  = \"test-app-allow-cloudwatch\"\r\n      action        = \"lambda:InvokeFunction\"\r\n      function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n      principal     = \"logs.ap-southeast-2.amazonaws.com\"\r\n      source_arn    = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\"\r\n    }\r\n    \r\n    resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" {\r\n      depends_on      = [\"aws_lambda_permission.test-app-allow-cloudwatch\"]\r\n      name            = \"cloudwatch-sumologic-lambda-subscription\"\r\n      log_group_name  = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\"\r\n      filter_pattern  = \"\"\r\n      destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\"\r\n    }\r\n\r\n**EDIT**: Please note that the above TF code was written years ago, using version `0.11.x` - it should still work but there may be better ways of doing things.  Specifically, don't use an inline policy like this unless needed, use an [aws_iam_policy_document][1] instead - they're just way easier to maintain over time.\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The necessary TF config looks like this (the last two resources are the relevant ones for configuring the actual `cloudwatch->lambda` trigger): // intended for application logs (access logs, modsec, etc.) resource \"aws_cloudwatch_log_group\" \"test-app-loggroup\" { name = \"test-app\" retention_in_days = 90 } resource \"aws_security_group\" \"cloudwatch-sumologic-lambda-sg\" { name = \"cloudwatch-sumologic-lambda-sg\" tags { Name = \"cloudwatch-sumologic-lambda-sg\" } description = \"Security group for lambda to move logs from CWL to SumoLogic\" vpc_id = \"${aws_vpc.dev-vpc.id}\" } resource \"aws_security_group_rule\" \"https-egress-cloudwatch-sumologic-to-internet\" { type = \"egress\" from_port = 443 to_port = 443 protocol = \"tcp\" security_group_id = \"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\" cidr_blocks = [\"0.0.0.0/0\"] } resource \"aws_iam_role\" \"test-cloudwatch-lambda-role\" { name = \"test-cloudwatch-lambda-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"lambda.amazonaws.com\" }, \"Effect\": \"Allow\" } ] } EOF } resource \"aws_iam_role_policy\" \"test-cloudwatch-lambda-policy\" { name = \"test-cloudwatch-lambda-policy\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.id}\" policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole1\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:CreateNetworkInterface\" ], \"Resource\": \"*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaVPCAccessExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeNetworkInterfaces\", \"ec2:DeleteNetworkInterface\" ], \"Resource\": \"arn:aws:ec2:ap-southeast-2:${var.dev_vpc_account_id}:network-interface/*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole1\", \"Effect\": \"Allow\", \"Action\": \"logs:CreateLogGroup\", \"Resource\": \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:*\" }, { \"Sid\": \"CopiedFromTemplateAWSLambdaBasicExecutionRole2\", \"Effect\": \"Allow\", \"Action\": [ \"logs:CreateLogStream\", \"logs:PutLogEvents\" ], \"Resource\": [ \"arn:aws:logs:ap-southeast-2:${var.dev_vpc_account_id}:log-group:/aws/lambda/*\" ] }, { \"Sid\": \"CopiedFromTemplateAWSLambdaAMIExecutionRole\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeImages\" ], \"Resource\": \"*\" } ] } EOF } resource \"aws_lambda_function\" \"cloudwatch-sumologic-lambda\" { function_name = \"cloudwatch-sumologic-lambda\" filename = \"${var.lambda_dir}/cloudwatchSumologicLambda.zip\" source_code_hash = \"${base64sha256(file(\"${var.lambda_dir}/cloudwatchSumologicLambda.zip\"))}\" handler = \"cloudwatchSumologic.handler\" role = \"${aws_iam_role.test-cloudwatch-lambda-role.arn}\" memory_size = \"128\" runtime = \"nodejs4.3\" // set low because I'm concerned about cost-blowout in the case of mis-configuration timeout = \"15\" vpc_config = { subnet_ids = [\"${aws_subnet.dev-private-subnet.id}\"] security_group_ids = [\"${aws_security_group.cloudwatch-sumologic-lambda-sg.id}\"] } } resource \"aws_lambda_permission\" \"test-app-allow-cloudwatch\" { statement_id = \"test-app-allow-cloudwatch\" action = \"lambda:InvokeFunction\" function_name = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" principal = \"logs.ap-southeast-2.amazonaws.com\" source_arn = \"${aws_cloudwatch_log_group.test-app-loggroup.arn}\" } resource \"aws_cloudwatch_log_subscription_filter\" \"test-app-cloudwatch-sumologic-lambda-subscription\" { depends_on = [\"aws_lambda_permission.test-app-allow-cloudwatch\"] name = \"cloudwatch-sumologic-lambda-subscription\" log_group_name = \"${aws_cloudwatch_log_group.test-app-loggroup.name}\" filter_pattern = \"\" destination_arn = \"${aws_lambda_function.cloudwatch-sumologic-lambda.arn}\" } **EDIT**: Please note that the above TF code was written years ago, using version `0.11.x` - it should still work but there may be better ways of doing things. ", "keywords": ["cost", "policy", "test"]}, {"source": "Text", "text": "Specifically, don't use an inline policy like this unless needed, use an [aws_iam_policy_document][1] instead - they're just way easier to maintain over time. [1]: https://www", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "Specifically, don't use an inline policy like this unless needed, use an aws_iam_policy_document instead - they're just way easier to maintain over time.", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": []}