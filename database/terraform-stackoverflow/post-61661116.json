{"Id": "61661116", "PostTypeId": "1", "AcceptedAnswerId": "61665712", "CreationDate": "2020-05-07T15:05:03.497", "Score": "17", "ViewCount": "14099", "Body": "<p>I want to assign multiple IAM roles to a single service account through terraform. I prepared a TF file to do that, but it has an error. With a single role it can be successfully assigned but with multiple IAM roles, it gave an error.</p>\n<pre><code>data &quot;google_iam_policy&quot; &quot;auth1&quot; {\n  binding {\n    role = &quot;roles/cloudsql.admin&quot;\n    members = [\n      &quot;serviceAccount:${google_service_account.service_account_1.email}&quot;,\n    ]    \n    role = &quot;roles/secretmanager.secretAccessor&quot;\n    members = [\n      &quot;serviceAccount:${google_service_account.service_account_1.email}&quot;,\n    ]      \n    role = &quot;roles/datastore.owner&quot;\n    members = [\n      &quot;serviceAccount:${google_service_account.service_account_1.email}&quot;,\n    ]  \n    role = &quot;roles/storage.admin&quot;\n    members = [\n      &quot;serviceAccount:${google_service_account.service_account_1.email}&quot;,\n    ]      \n  }\n}\n</code></pre>\n<p>How can I assign multiple roles against a single service account?</p>\n", "OwnerUserId": "11701287", "LastEditorUserId": "2023941", "LastEditDate": "2022-05-03T10:44:34.197", "LastActivityDate": "2023-05-08T20:49:14.197", "Title": "Want to assign multiple Google cloud IAM roles to a service account via terraform", "Tags": "<google-cloud-platform><terraform><google-iam><terraform-provider-gcp>", "AnswerCount": "3", "CommentCount": "2", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "109072210", "PostId": "61661116", "Score": "0", "Text": "Hey, your question is not quite clear.... What if you tell us what is the error message that you're getting?", "CreationDate": "2020-05-07T16:12:57.500", "UserId": "11825905", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "128889337", "PostId": "61661116", "Score": "0", "Text": "Neither answer is the **best** answer. They are both good answers. The best answer depends on details that are not present in the question. Such as does the member already exist in the IAM policy? Are you adding or replacing IAM Roles? There are four Terraform resources that modify a project's IAM Policy. There is a reason for that and the correct selection requires careful consideration.", "CreationDate": "2022-07-14T00:28:38.567", "UserId": "8016720", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Such as does the member already exist in the IAM policy? ", "keywords": ["policy"]}, {"source": "Text", "text": "There are four Terraform resources that modify a project's IAM Policy. ", "keywords": ["policy"]}]}], "history": [{"Id": "221063720", "PostHistoryTypeId": "2", "PostId": "61661116", "RevisionGUID": "54f2aaaf-eaf4-492f-9b4b-e0124c4dba5e", "CreationDate": "2020-05-07T15:05:03.497", "UserId": "11701287", "Text": "Want to assign multiple IAM roles to a single service account thru terraform. Prepared a tf file to doing that, but find some error, if I go with single role, then it can successfully assigned but when I try for multiple IAM roles, it's gave some error. \r\n\r\n```\r\ndata \"google_iam_policy\" \"auth1\" {\r\n  binding {\r\n    role = \"roles/cloudsql.admin\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]    \r\n    role = \"roles/secretmanager.secretAccessor\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]      \r\n    role = \"roles/datastore.owner\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]  \r\n    role = \"roles/storage.admin\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]      \r\n  }\r\n}\r\n```\r\nCan you help me out, how to assign multiple roles against a single service account.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "``` data \"google_iam_policy\" \"auth1\" { binding { role = \"roles/cloudsql.admin\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] role = \"roles/secretmanager.secretAccessor\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] role = \"roles/datastore.owner\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] role = \"roles/storage.admin\" members = [ \"serviceAccount:${google_service_account.service_account_1.email", "keywords": ["storage"]}]}, {"Id": "221063721", "PostHistoryTypeId": "1", "PostId": "61661116", "RevisionGUID": "54f2aaaf-eaf4-492f-9b4b-e0124c4dba5e", "CreationDate": "2020-05-07T15:05:03.497", "UserId": "11701287", "Text": "Want to assign multiple Google cloud IAM roles against a service account via terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "221063722", "PostHistoryTypeId": "3", "PostId": "61661116", "RevisionGUID": "54f2aaaf-eaf4-492f-9b4b-e0124c4dba5e", "CreationDate": "2020-05-07T15:05:03.497", "UserId": "11701287", "Text": "<google-cloud-platform><terraform><google-iam><terraform-provider-gcp>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "269381738", "PostHistoryTypeId": "5", "PostId": "61661116", "RevisionGUID": "fdd727eb-d3ce-4d00-b4c2-03446304b3b9", "CreationDate": "2022-05-03T10:44:34.197", "UserId": "2023941", "Comment": "just simplified the grammar without changing the semantics", "Text": "I want to assign multiple IAM roles to a single service account through terraform. I prepared a TF file to do that, but it has an error. With a single role it can be successfully assigned but with multiple IAM roles, it gave an error. \r\n```\r\ndata \"google_iam_policy\" \"auth1\" {\r\n  binding {\r\n    role = \"roles/cloudsql.admin\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]    \r\n    role = \"roles/secretmanager.secretAccessor\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]      \r\n    role = \"roles/datastore.owner\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]  \r\n    role = \"roles/storage.admin\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]      \r\n  }\r\n}\r\n```\r\nHow can I assign multiple roles against a single service account?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "``` data \"google_iam_policy\" \"auth1\" { binding { role = \"roles/cloudsql.admin\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] role = \"roles/secretmanager.secretAccessor\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] role = \"roles/datastore.owner\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] role = \"roles/storage.admin\" members = [ \"serviceAccount:${google_service_account.service_account_1.email", "keywords": ["storage"]}, {"source": "Comment", "text": "just simplified the grammar without changing the semantics", "keywords": ["change"]}]}, {"Id": "269381739", "PostHistoryTypeId": "4", "PostId": "61661116", "RevisionGUID": "fdd727eb-d3ce-4d00-b4c2-03446304b3b9", "CreationDate": "2022-05-03T10:44:34.197", "UserId": "2023941", "Comment": "just simplified the grammar without changing the semantics", "Text": "Want to assign multiple Google cloud IAM roles to a service account via terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Comment", "text": "just simplified the grammar without changing the semantics", "keywords": ["change"]}]}], "answers": [{"Id": "71521532", "PostTypeId": "2", "ParentId": "61661116", "CreationDate": "2022-03-18T01:29:13.367", "Score": "55", "Body": "<p>I did something like this</p>\n<pre class=\"lang-hcl prettyprint-override\"><code>resource &quot;google_project_iam_member&quot; &quot;member-role&quot; {\n  for_each = toset([\n    &quot;roles/cloudsql.admin&quot;,\n    &quot;roles/secretmanager.secretAccessor&quot;,\n    &quot;roles/datastore.owner&quot;,\n    &quot;roles/storage.admin&quot;,\n  ])\n  role = each.key\n  member = &quot;serviceAccount:${google_service_account.service_account_1.email}&quot;\n  project = my_project_id\n}\n</code></pre>\n<h2>Authoritative vs non-Authoritative</h2>\n<p>Pay attention to which of the resources you are using.</p>\n<ul>\n<li><p><code>google_project_iam_policy</code> - This is <strong>Authoritative</strong> - it will replace other policies in your Terraform code. Only use once per workspace directory.</p>\n</li>\n<li><p><code>google_project_iam_binding</code> - This is <strong>Authoritative</strong> -\nit will override other bindings to the role elsewhere in your Terraform code. Only use once per workspace directory.</p>\n</li>\n<li><p><code>google_project_iam_member</code> - This is <strong>non-Authoritative</strong> - This you can use many times in the same workspace directory - if using it multiple times better organizes your code.</p>\n</li>\n</ul>\n<p>Read here: <a href=\"https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_iam\" rel=\"noreferrer\">https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_iam</a></p>\n", "OwnerUserId": "2023941", "LastEditorUserId": "1206051", "LastEditDate": "2023-05-08T20:49:14.197", "LastActivityDate": "2023-05-08T20:49:14.197", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "127389321", "PostId": "71521532", "Score": "0", "Text": "Yours is the answer that should be accepted.", "CreationDate": "2022-05-03T09:38:03.440", "UserId": "4375983", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "128870944", "PostId": "71521532", "Score": "0", "Text": "Yes, in fact, it can go all the way up if more people vote for this rather than the accepted answer. Thanks @intotecho", "CreationDate": "2022-07-13T08:53:55.400", "UserId": "9548311", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "133970471", "PostId": "71521532", "Score": "0", "Text": "This worked for me , in my case it is regular user account so I changed it to `member=\"user:emailid\"`", "CreationDate": "2023-04-07T08:38:53.620", "UserId": "3983098", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This worked for me , in my case it is regular user account so I changed it to `member=\"user:emailid\"`", "keywords": ["change"]}]}, {"Id": "134388407", "PostId": "71521532", "Score": "0", "Text": "You can lock yourself out of a resource with the Authoritive `google_project_iam_policy` and `google_project_iam_binding` as they ensure no other permissions are granted. `google_project_iam_member` only adds the roles to the resource.", "CreationDate": "2023-05-09T04:40:14.700", "UserId": "2023941", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "266263634", "PostHistoryTypeId": "2", "PostId": "71521532", "RevisionGUID": "6133a6f0-1f8f-4aa6-807f-7bfc3a865bba", "CreationDate": "2022-03-18T01:29:13.367", "UserId": "2023941", "Text": "I did something like this\r\n```lang-hcl\r\nresource \"google_project_iam_member\" \"member-role\" {\r\n  for_each = toset([\r\n    \"roles/cloudsql.admin\",\r\n    \"roles/secretmanager.secretAccessor\",\r\n    \"roles/datastore.owner\",\r\n    \"roles/storage.admin\",\r\n  ])\r\n  role = each.key\r\n  member = \"serviceAccount:${google_service_account.service_account_1.email}\"\r\n  project = my_project_id\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I did something like this ```lang-hcl resource \"google_project_iam_member\" \"member-role\" { for_each = toset([ \"roles/cloudsql.admin\", \"roles/secretmanager.secretAccessor\", \"roles/datastore.owner\", \"roles/storage.admin\", ]) role = each.key member = \"serviceAccount:${google_service_account.service_account_1.email}\" project = my_project_id } ```", "keywords": ["storage"]}]}, {"Id": "292515890", "PostHistoryTypeId": "5", "PostId": "71521532", "RevisionGUID": "9782d146-9650-4c7d-962b-47f0e202a4ba", "CreationDate": "2023-05-08T20:49:14.197", "UserId": "1206051", "Comment": "added 742 characters in body", "Text": "I did something like this\r\n```lang-hcl\r\nresource \"google_project_iam_member\" \"member-role\" {\r\n  for_each = toset([\r\n    \"roles/cloudsql.admin\",\r\n    \"roles/secretmanager.secretAccessor\",\r\n    \"roles/datastore.owner\",\r\n    \"roles/storage.admin\",\r\n  ])\r\n  role = each.key\r\n  member = \"serviceAccount:${google_service_account.service_account_1.email}\"\r\n  project = my_project_id\r\n}\r\n```\r\n\r\n## Authoritative vs non-Authoritative\r\n\r\nPay attention to which of the resources you are using.\r\n\r\n\r\n- `google_project_iam_policy` - This is **Authoritative** - it will replace other policies in your Terraform code. Only use once per workspace directory.\r\n\r\n- `google_project_iam_binding` - This is **Authoritative** - \r\n  it will override other bindings to the role elsewhere in your Terraform code. Only use once per workspace directory.\r\n\r\n- `google_project_iam_member` - This is **non-Authoritative** - This you can use many times in the same workspace directory - if using it multiple times better organizes your code.\r\n\r\nRead here: https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_iam\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I did something like this ```lang-hcl resource \"google_project_iam_member\" \"member-role\" { for_each = toset([ \"roles/cloudsql.admin\", \"roles/secretmanager.secretAccessor\", \"roles/datastore.owner\", \"roles/storage.admin\", ]) role = each.key member = \"serviceAccount:${google_service_account.service_account_1.email}\" project = my_project_id } ``` ## Authoritative vs non-Authoritative Pay attention to which of the resources you are using. - `google_project_iam_policy` - This is **Authoritative** - it will replace other policies in your Terraform code. ", "keywords": ["pay", "storage"]}]}], "filtered-sentences": [{"source": "Body", "text": "I did something like this Authoritative vs non-Authoritative Pay attention to which of the resources you are using. google_project_iam_policy - This is Authoritative - it will replace other policies in your Terraform code. ", "keywords": ["pay"]}]}, {"Id": "72268347", "PostTypeId": "2", "ParentId": "61661116", "CreationDate": "2022-05-17T04:49:03.723", "Score": "1", "Body": "<p>I can't comment or upvote yet so here's <em>another</em> answer, but @intotecho is right.</p>\n<p>I'd say <em>do not</em> create a policy with Terraform unless you really know what you're doing! In GCP, there's only one policy allowed per project. If you apply that policy, <em>only</em> the service accounts will have access, no humans. :) Even though we don't want humans to do human things, it's helpful to at least have view access to the GCP project you own.</p>\n<p>Especccciallyy if you use the model that there are multiple Terraform workspaces performing iam operations on the project. If you use policies it will be similar to how wine is made, it will be a stomping party! The most recently applied policy will win (<em>if</em> the service account TF is using is included in that policy, otherwise it will lock itself out!)</p>\n<p>It's possible humans get an inherited viewer role from a folder or the org itself, but assigning multiple roles using the <code>google_project_iam_member</code> is a much much better way and how 95% of the permissions are done with TF in GCP.</p>\n", "OwnerUserId": "7247532", "LastActivityDate": "2022-05-17T04:49:03.723", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129871628", "PostId": "72268347", "Score": "0", "Text": "Sometimes you want your policy to stomp on any changes made by others. If so, use `google_iam_policy`,  But normally you want to add roles, even if other humans come before or after to add more roles - in that case, use `google_project_iam_member`.", "CreationDate": "2022-08-30T14:45:07.917", "UserId": "2023941", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Sometimes you want your policy to stomp on any changes made by others. ", "keywords": ["policy", "change"]}]}], "history": [{"Id": "270305428", "PostHistoryTypeId": "2", "PostId": "72268347", "RevisionGUID": "e5ffc584-148b-4ee3-8dbc-e24a27780394", "CreationDate": "2022-05-17T04:49:03.723", "UserId": "7247532", "Text": "I can't comment or upvote yet so here's _another_ answer, but @intotecho is right.\r\n\r\nI'd say _do not_ create a policy with Terraform unless you really know what you're doing! In GCP, there's only one policy allowed per project. If you apply that policy, _only_ the service accounts will have access, no humans. :) Even though we don't want humans to do human things, it's helpful to at least have view access to the GCP project you own. \r\n\r\nEspecccciallyy if you use the model that there are multiple Terraform workspaces performing iam operations on the project. If you use policies it will be similar to how wine is made, it will be a stomping party! The most recently applied policy will win (_if_ the service account TF is using is included in that policy, otherwise it will lock itself out!)\r\n\r\nIt's possible humans get an inherited viewer role from a folder or the org itself, but assigning multiple roles using the `google_project_iam_member` is a much much better way and how 95% of the permissions are done with TF in GCP. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'd say _do not_ create a policy with Terraform unless you really know what you're doing! ", "keywords": ["policy"]}, {"source": "Text", "text": "In GCP, there's only one policy allowed per project. ", "keywords": ["policy"]}, {"source": "Text", "text": "If you apply that policy, _only_ the service accounts will have access, no humans. :) ", "keywords": ["policy"]}, {"source": "Text", "text": "The most recently applied policy will win (_if_ the service account TF is using is included in that policy, otherwise it will lock itself out!) ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "I'd say do not create a policy with Terraform unless you really know what you're doing! ", "keywords": ["policy"]}, {"source": "Body", "text": "In GCP, there's only one policy allowed per project. ", "keywords": ["policy"]}, {"source": "Body", "text": "If you apply that policy, only the service accounts will have access, no humans. :) ", "keywords": ["policy"]}, {"source": "Body", "text": "The most recently applied policy will win (if the service account TF is using is included in that policy, otherwise it will lock itself out!) ", "keywords": ["policy"]}]}, {"Id": "61665712", "PostTypeId": "2", "ParentId": "61661116", "CreationDate": "2020-05-07T19:01:27.453", "Score": "10", "Body": "<p>According with the <a href=\"https://www.terraform.io/docs/providers/google/d/google_iam_policy.html\" rel=\"noreferrer\">documentation</a></p>\n\n<blockquote>\n  <p>Each document configuration must have one or more binding blocks, which each accept the following arguments: ....</p>\n</blockquote>\n\n<p>You have to repeat the binding, like this</p>\n\n<pre><code>data \"google_iam_policy\" \"auth1\" {\n  binding {\n    role = \"roles/cloudsql.admin\"\n    members = [\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\n    ]\n  }\n  binding {\n    role = \"roles/secretmanager.secretAccessor\"\n    members = [\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\n    ]\n  }\n  binding {\n    role = \"roles/datastore.owner\"\n    members = [\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\n    ]\n  }\n  binding {\n    role = \"roles/storage.admin\"\n    members = [\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\n    ]\n  }\n}\n</code></pre>\n\n<p>It's the same thing with you use the gcloud command, you can add only 1 role at the time on a list of email.</p>\n", "OwnerUserId": "11372593", "LastActivityDate": "2020-05-07T19:01:27.453", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "109079523", "PostId": "61665712", "Score": "0", "Text": "Thanks for your answer. It's working now. But I am facing another error while assigning this _service account_ to _cloudrun_ service thru terraform. It says not supported for the resource -- `googleapi: Error 400: Role roles/datastore.owner is not supported for this resource.on helloworld-cloudrun.tf line 60, in resource \"google_cloud_run_service_iam_policy\" \"auth1\":\n  60: resource \"google_cloud_run_service_iam_policy\" \"auth1\" {` .", "CreationDate": "2020-05-07T19:58:37.043", "UserId": "11701287", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "109079552", "PostId": "61665712", "Score": "0", "Text": "My cloud run code -- `resource \"google_cloud_run_service_iam_policy\" \"auth1\" {\n  location    = google_cloud_run_service.helloworld.location\n  project     = google_cloud_run_service.helloworld.project\n  service     = google_cloud_run_service.helloworld.name\n  policy_data = data.google_iam_policy.auth1.policy_data\n}`", "CreationDate": "2020-05-07T19:59:39.963", "UserId": "11701287", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "109080136", "PostId": "61665712", "Score": "0", "Text": "The IAM role are strange at the beginning. Think like this: `I want to grant a role on member on a service/project/organisation`. What you try to perform is `I want grant the role datastore.owner on member .... on Cloud Run service`. There is no relation between Cloud Run and Datastore. `You want to grant the role datastore.owner on member .... on the project ...`. On cloud run, you can grant only a limited number of role, `I want to grant the role run.invoker on member ... for cloud run service`. Here that make sense.", "CreationDate": "2020-05-07T20:21:04.940", "UserId": "11372593", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "109080166", "PostId": "61665712", "Score": "0", "Text": "I don't know if I'm clear... So use this resource `resource \"google_project_iam_binding\" ....`", "CreationDate": "2020-05-07T20:22:00.797", "UserId": "11372593", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "128870966", "PostId": "61665712", "Score": "0", "Text": "Intotecho answer is better and should be promoted here.", "CreationDate": "2022-07-13T08:55:30.407", "UserId": "9548311", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "221082346", "PostHistoryTypeId": "2", "PostId": "61665712", "RevisionGUID": "b4f35acc-afb0-49e1-b145-5907e4fb91a9", "CreationDate": "2020-05-07T19:01:27.453", "UserId": "11372593", "Text": "According with the [documentation](https://www.terraform.io/docs/providers/google/d/google_iam_policy.html)\r\n\r\n>Each document configuration must have one or more binding blocks, which each accept the following arguments: ....\r\n\r\nYou have to repeat the binding, like this\r\n\r\n```\r\ndata \"google_iam_policy\" \"auth1\" {\r\n  binding {\r\n    role = \"roles/cloudsql.admin\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]\r\n  }\r\n  binding {\r\n    role = \"roles/secretmanager.secretAccessor\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]\r\n  }\r\n  binding {\r\n    role = \"roles/datastore.owner\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]\r\n  }\r\n  binding {\r\n    role = \"roles/storage.admin\"\r\n    members = [\r\n      \"serviceAccount:${google_service_account.service_account_1.email}\",\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nIt's the same thing with you use the gcloud command, you can add only 1 role at the time on a list of email.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You have to repeat the binding, like this ``` data \"google_iam_policy\" \"auth1\" { binding { role = \"roles/cloudsql.admin\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] } binding { role = \"roles/secretmanager.secretAccessor\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] } binding { role = \"roles/datastore.owner\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] } binding { role = \"roles/storage.admin\" members = [ \"serviceAccount:${google_service_account.service_account_1.email}\", ] } } ``` ", "keywords": ["storage"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}