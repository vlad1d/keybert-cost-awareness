{"Id": "71498535", "PostTypeId": "1", "CreationDate": "2022-03-16T14:08:55.010", "Score": "0", "ViewCount": "724", "Body": "<p><strong>Updated with a more illustrative example.</strong></p>\n<p>My end goal is to have Terraform create instances of a resource generated with the <code>for_each</code> meta argument in a <em>specific sequence</em>. HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the <code>depends_on</code> argument or refer from one resource (instance) to another. However, the <code>depends_on</code> argument does not take values that are &quot;calculated&quot;, so I don't know how to use it in modules.</p>\n<p>For this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in an instance it creates &quot;calculated&quot; based on the values of the same argument from another instance.</p>\n<p>Below you can find a more practical example based on using one of the providers, but the question is more general and pertains to Terraform as such.</p>\n<p>Let's take a test module that instantiates the <code>cloudflare_page_rule</code> resource:</p>\n<pre><code># Module is placed to module\\main.tf\n\nterraform {\n  experiments = [module_variable_optional_attrs]\n}\n\nterraform {\n  required_providers {\n    cloudflare = {\n      source  = &quot;cloudflare/cloudflare&quot;\n      version = &quot;&gt;= 3.10.0&quot;\n    }\n  }\n}\n\nvariable &quot;zone&quot; {\n  type        = string\n  description = &quot;The DNS zone name which will be added, e.g. example.com.&quot;\n}\n\nvariable &quot;page_rules&quot; {\n  type = list(object({\n    page_rule_name = string\n    target         = string\n    actions = object({\n      forwarding_url = optional(object({\n        url         = string\n        status_code = number\n      }))\n    })\n    priority   = optional(number)\n    status     = optional(string)\n    depends_on = optional(string)\n  }))\n  description = &quot;Zone's page rules.&quot;\n  default     = []\n}\n\n//noinspection HILUnresolvedReference\nlocals {\n  page_rule_dependencies = { for p in var.page_rules : p.page_rule_name =&gt; p.depends_on if p.depends_on != null }\n}\n\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone\nresource &quot;cloudflare_zone&quot; &quot;this&quot; {\n  zone = var.zone\n}\n\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule\n//noinspection HILUnresolvedReference\nresource &quot;cloudflare_page_rule&quot; &quot;this&quot; {\n  for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name =&gt; p } : {}\n\n  zone_id = cloudflare_zone.this.id\n\n  target = each.value.target\n  actions {\n    //noinspection HILUnresolvedReference\n    forwarding_url {\n      status_code = each.value.actions.forwarding_url.status_code\n      url         = each.value.actions.forwarding_url.url\n    }\n  }\n  priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority\n  status = each.value.status\n}\n\noutput &quot;page_rule_dependencies&quot; {\n  value = local.page_rule_dependencies\n}\n</code></pre>\n<p>And a configuration that is used to create resources:</p>\n<pre><code>terraform {\n  required_version = &quot;&gt;= 0.15.0&quot;\n\n  required_providers {\n    cloudflare = {\n      source  = &quot;cloudflare/cloudflare&quot;\n      version = &quot;&gt;= 3.10.1&quot;\n    }\n  }\n}\n\nvariable &quot;cloudflare_api_token&quot; {\n  type      = string\n  sensitive = true\n}\n\nprovider &quot;cloudflare&quot; {\n  api_token = var.cloudflare_api_token\n}\n\nmodule &quot;acme_com&quot; {\n  source = &quot;./module&quot;\n  zone   = &quot;acme.com&quot;\n  page_rules = [\n    {\n      page_rule_name = &quot;page_rule_1&quot;\n      target         = &quot;acme.com/url1&quot;\n      actions = {\n        forwarding_url = {\n          status_code = 301\n          url         = &quot;https://www.example.com/url1&quot;\n        }\n      }\n      priority = 1\n    },\n    {\n      page_rule_name = &quot;page_rule_2&quot;\n      target         = &quot;acme.com/url2&quot;\n      actions = {\n        forwarding_url = {\n          status_code = 301\n          url         = &quot;https://www.example.com/url2&quot;\n        }\n      }\n      priority   = 2\n      depends_on = &quot;page_rule_1&quot;\n    },\n    {\n      page_rule_name = &quot;page_rule_3&quot;\n      target         = &quot;acme.com/url3&quot;\n      actions = {\n        forwarding_url = {\n          status_code = 301\n          url         = &quot;https://www.example.com/url3&quot;\n        }\n      }\n      priority   = 3\n      depends_on = &quot;page_rule_2&quot;\n    }\n  ]\n}\n\noutput &quot;page_rule_dependencies&quot; {\n  value = module.acme_com.page_rule_dependencies\n}\n</code></pre>\n<p>In this particular example, I've added the <code>depends_on</code> argument to the <code>page_rules</code> variable (don't confuse this argument with the <code>depends_on</code> <em>meta argument</em>). For the value of the <code>depends_on</code> argument, I specified the name of a <code>page_fule</code> on which another <code>page_fule</code> depends.</p>\n<p>Next, I created a local variable <code>page_rule_dependencies</code>, the value of which, after calculations, is the following (you can check this yourself by replacing the <code>priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority</code> construct with <code>priority = each.value.priority</code> and executing <code>terraform apply</code>):</p>\n<pre><code>page_rule_dependencies = {\n  &quot;page_rule_2&quot; = &quot;page_rule_1&quot;\n  &quot;page_rule_3&quot; = &quot;page_rule_2&quot;\n}\n</code></pre>\n<p>Further, in the <code>priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority</code> construct, I refer to the values \u200b\u200bof the local variable, thereby forming a &quot;reference&quot; to the <code>page_fule</code> instance, on which the current instance depends:</p>\n<ol>\n<li>When creating <code>page_rule_1</code>, the value of its argument <code>priority</code> = <code>1</code>.</li>\n<li>When creating <code>page_rule_2</code>, the value of its argument <code>priority</code> = <code>cloudflare_page_rule.this[&quot;page_rule_1&quot;].priority + 1</code>.</li>\n<li>When creating <code>page_rule_3</code>, the value of its argument <code>priority</code> = <code>cloudflare_page_rule.this[&quot;page_rule_2&quot;].priority + 1</code>.</li>\n</ol>\n<p>However, I get an <code>Error: Cycle: module.acme_com.cloudflare_page_rule.this[&quot;page_rule_3&quot;], module.acme_com.cloudflare_page_rule.this[&quot;page_rule_2&quot;], module.acme_com.cloudflare_page_rule.this[&quot;page_rule_1&quot;]</code> error.</p>\n<p>Either I'm doing something wrong, or it's some kind of Terraform limitation/bug. Is there a way to get rid of this error?</p>\n<p>P.S. Resulting graph after <code>terraform graph -draw-cycles | dot -Tsvg &gt; graph.svg</code> or <code>terraform graph -draw-cycles -type=plan | dot -Tsvg &gt; graph-plan.svg</code> (the same result):</p>\n<p><a href=\"https://i.stack.imgur.com/eXGad.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/eXGad.png\" alt=\"enter image description here\" /></a></p>\n<p>P.P.S. I use Terraform v1.1.7.</p>\n", "OwnerUserId": "10203419", "LastEditorUserId": "10203419", "LastEditDate": "2022-03-28T11:47:37.887", "LastActivityDate": "2022-03-28T11:47:37.887", "Title": "How to reference instance argument value created with for_each meta-argument in another instance in the same map", "Tags": "<terraform><terraform0.12+><hcl>", "AnswerCount": "0", "CommentCount": "8", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "126380318", "PostId": "71498535", "Score": "0", "Text": "This is a cyclic dependency error, meaning that you are referencing resources between each other and Terraform is unsure in which order to create them. Try this and see where the cycle comes from: https://www.terraform.io/cli/commands/graph#draw-cycles.", "CreationDate": "2022-03-16T20:10:52.720", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126391583", "PostId": "71498535", "Score": "0", "Text": "@MarkoE, thanks, but I can't find any useful info in the resulting graph. I've attached the graph to the initial post.", "CreationDate": "2022-03-17T10:05:11.513", "UserId": "10203419", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126392506", "PostId": "71498535", "Score": "0", "Text": "You need this command: `terraform graph -draw-cycles`. If the error happens during apply, then you need to add `-type=apply` as well.", "CreationDate": "2022-03-17T10:48:14.513", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126392540", "PostId": "71498535", "Score": "0", "Text": "The easy way to know this is if you take a look at `priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority`. You cannot reference the resource itself in the resource block where you are creating it. That will create cyclic dependency error.", "CreationDate": "2022-03-17T10:49:46.027", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126393835", "PostId": "71498535", "Score": "0", "Text": "@MarkoE, I can't see any difference, I've updated info in the initial post.", "CreationDate": "2022-03-17T11:58:05.860", "UserId": "10203419", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126393855", "PostId": "71498535", "Score": "0", "Text": "But I don't reference the resource itself in the resource block.", "CreationDate": "2022-03-17T11:59:02.713", "UserId": "10203419", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126394198", "PostId": "71498535", "Score": "0", "Text": "How are you not referencing the same resource? Inside of the `cloudflare_page_rule` resource block, for priority you are referencing that same resource (which still isn't created) with `cloudflare_page_rule.this[element...`?", "CreationDate": "2022-03-17T12:15:52.753", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126394528", "PostId": "71498535", "Score": "0", "Text": "If I reference the resource itself, I get an error: \"Error: Self-referential block\". And, for example, why doesn't this work: `priority = each.value.priority > 1 ? cloudflare_page_rule.this[\"page_rule_1\"].priority + each.value.priority : each.value.priority`? in this case for `page_rule_1` which has `priority` equal `1` should be  `each.value.priority` applied, but in this case I get the error: \"Error: Self-referential block\".  Doesn't Terraform allow the resource itself to be referenced in expressions for that resource at all, even if the expression doesn't apply to it?", "CreationDate": "2022-03-17T12:31:01.013", "UserId": "10203419", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "266149058", "PostHistoryTypeId": "2", "PostId": "71498535", "RevisionGUID": "1ea69ac9-d75e-43d0-8935-50f5e64f13eb", "CreationDate": "2022-03-16T14:08:55.010", "UserId": "10203419", "Text": "My end goal is to have Terraform create instances of a resource generated with the `for_each` meta argument in a *specific sequence*. HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. However, the `depends_on` argument does not take values that need to be \"calculated\".\r\n\r\nFor this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance.\r\n\r\nBelow you can find a more practical example based on using one of the providers, but the question is more general and pertains to Terraform as such.\r\n\r\nLet's take a test module that instantiates the `cloudflare_page_rule` resource:\r\n\r\n```hcl\r\n# Module is placed to module\\main.tf\r\n\r\nterraform {\r\n  experiments = [module_variable_optional_attrs]\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.0\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"zone\" {\r\n  type        = string\r\n  description = \"The DNS zone name which will be added, e.g. example.com.\"\r\n}\r\n\r\nvariable \"page_rules\" {\r\n  type = list(object({\r\n    page_rule_name = string\r\n    target         = string\r\n    actions = object({\r\n      forwarding_url = optional(object({\r\n        url         = string\r\n        status_code = number\r\n      }))\r\n    })\r\n    priority = optional(number)\r\n    status   = optional(string)\r\n  }))\r\n  description = \"Zone's page rules.\"\r\n  default     = []\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone\r\nresource \"cloudflare_zone\" \"this\" {\r\n  zone = var.zone\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule\r\nresource \"cloudflare_page_rule\" \"this\" {\r\n  for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {}\r\n\r\n  zone_id = cloudflare_zone.this.id\r\n\r\n  target = each.value.target\r\n  actions {\r\n    forwarding_url {\r\n      status_code = each.value.actions.forwarding_url.status_code\r\n      url         = each.value.actions.forwarding_url.url\r\n    }\r\n  }\r\n  priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))] + 1 : each.value.priority\r\n  status   = each.value.status\r\n}\r\n\r\n```\r\n\r\nAnd a configuration that is used to create resources:\r\n\r\n```hcl\r\nterraform {\r\n  required_version = \">= 0.15.0\"\r\n\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.1\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"cloudflare_api_token\" {\r\n  type      = string\r\n  sensitive = true\r\n}\r\n\r\nprovider \"cloudflare\" {\r\n  api_token = var.cloudflare_api_token\r\n}\r\n\r\nmodule \"acme_com\" {\r\n  source = \"./module\"\r\n  zone   = \"acme.com\"\r\n  page_rules = [\r\n    {\r\n      page_rule_name = \"page_rule_1\"\r\n      target         = \"acme.com/url1\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url1\"\r\n        }\r\n      }\r\n      priority = 1\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_2\"\r\n      target         = \"acme.com/url2\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url2\"\r\n        }\r\n      }\r\n      priority = 2\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_3\"\r\n      target         = \"acme.com/url3\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url3\"\r\n        }\r\n      }\r\n      priority = 3\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIn this particular example, I'm trying to create instances of the `cloudflare_page_rule` resource in the order that corresponds to the *value of their `priority` argument*. To achieve that I'm trying to use the following expression in the `priority` argument:\r\n\r\n```hcl\r\neach.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))] + 1 : each.value.priority\r\n```\r\n\r\nMy idea is that for a `page_rule` with a `priority` value of `1`, leave the `priority` value as is, without referring to other instances. And for each `page_rule` with a `priority` greater than `1`, find an instance with a lower priority and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. It should look something like this:\r\n\r\n - For `page_rule_1`: `priority = 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_1\"].priority + 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_2\"].priority + 1`.\r\n\r\nTo find a `page_rule_name` of an instance with a lower priority, I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. In doing so, I'm assuming that both the list of `page_rule_name` and the list of the `priority` values, are in the same order, which I'm not sure about.\r\n\r\nAs a result of `terraform plan` execution I get an error:\r\n\r\n`Error: Cycle: module.acme_com.cloudflare_page_rule.this[\"page_rule_3\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_2\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_1\"]`\r\n\r\nAt the same time, I can't find the reason for such an error.\r\n\r\nHow to fix it? Or maybe there is an easier or more efficient way to achieve the end goal?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "For this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Let's take a test module that instantiates the `cloudflare_page_rule` resource: ```hcl # Module is placed to module\\main.tf terraform { experiments = [module_variable_optional_attrs] } terraform { required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.0\" } } } variable \"zone\" { type = string description = \"The DNS zone name which will be added, e.g. example.com.\" } variable \"page_rules\" { type = list(object({ page_rule_name = string target = string actions = object({ forwarding_url = optional(object({ url = string status_code = number })) }) priority = optional(number) status = optional(string) })) description = \"Zone's page rules.\" default = [] } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone resource \"cloudflare_zone\" \"this\" { zone = var.zone } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule resource \"cloudflare_page_rule\" \"this\" { for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {} zone_id = cloudflare_zone.this.id target = each.value.target actions { forwarding_url { status_code = each.value.actions.forwarding_url.status_code url = each.value.actions.forwarding_url.url } } priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))] + 1 : each.value.priority status = each.value.status } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "And a configuration that is used to create resources: ```hcl terraform { required_version = \">= 0.15.0\" required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.1\" } } } variable \"cloudflare_api_token\" { type = string sensitive = true } provider \"cloudflare\" { api_token = var.cloudflare_api_token } module \"acme_com\" { source = \"./module\" zone = \"acme.com\" page_rules = [ { page_rule_name = \"page_rule_1\" target = \"acme.com/url1\" actions = { forwarding_url = { status_code = 301 url = \"https://www", "keywords": ["provider"]}, {"source": "Text", "text": "And for each `page_rule` with a `priority` greater than `1`, find an instance with a lower priority and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. ", "keywords": ["instance"]}, {"source": "Text", "text": "To find a `page_rule_name` of an instance with a lower priority, I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. ", "keywords": ["instance"]}, {"source": "Text", "text": "Or maybe there is an easier or more efficient way to achieve the end goal?", "keywords": ["efficient"]}]}, {"Id": "266149060", "PostHistoryTypeId": "1", "PostId": "71498535", "RevisionGUID": "1ea69ac9-d75e-43d0-8935-50f5e64f13eb", "CreationDate": "2022-03-16T14:08:55.010", "UserId": "10203419", "Text": "How to reference instance argument value created with for_each meta-argument in another instance in the same map", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "How to reference instance argument value created with for_each meta-argument in another instance in the same map", "keywords": ["instance"]}]}, {"Id": "266149061", "PostHistoryTypeId": "3", "PostId": "71498535", "RevisionGUID": "1ea69ac9-d75e-43d0-8935-50f5e64f13eb", "CreationDate": "2022-03-16T14:08:55.010", "UserId": "10203419", "Text": "<terraform><terraform0.12+><hcl>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "266151369", "PostHistoryTypeId": "5", "PostId": "71498535", "RevisionGUID": "3385cbf7-a531-4774-b258-ea6037cd6ca7", "CreationDate": "2022-03-16T14:37:16.050", "UserId": "10203419", "Comment": "added 18 characters in body", "Text": "My end goal is to have Terraform create instances of a resource generated with the `for_each` meta argument in a *specific sequence*. HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. However, the `depends_on` argument does not take values that need to be \"calculated\".\r\n\r\nFor this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance.\r\n\r\nBelow you can find a more practical example based on using one of the providers, but the question is more general and pertains to Terraform as such.\r\n\r\nLet's take a test module that instantiates the `cloudflare_page_rule` resource:\r\n\r\n```hcl\r\n# Module is placed to module\\main.tf\r\n\r\nterraform {\r\n  experiments = [module_variable_optional_attrs]\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.0\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"zone\" {\r\n  type        = string\r\n  description = \"The DNS zone name which will be added, e.g. example.com.\"\r\n}\r\n\r\nvariable \"page_rules\" {\r\n  type = list(object({\r\n    page_rule_name = string\r\n    target         = string\r\n    actions = object({\r\n      forwarding_url = optional(object({\r\n        url         = string\r\n        status_code = number\r\n      }))\r\n    })\r\n    priority = optional(number)\r\n    status   = optional(string)\r\n  }))\r\n  description = \"Zone's page rules.\"\r\n  default     = []\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone\r\nresource \"cloudflare_zone\" \"this\" {\r\n  zone = var.zone\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule\r\nresource \"cloudflare_page_rule\" \"this\" {\r\n  for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {}\r\n\r\n  zone_id = cloudflare_zone.this.id\r\n\r\n  target = each.value.target\r\n  actions {\r\n    forwarding_url {\r\n      status_code = each.value.actions.forwarding_url.status_code\r\n      url         = each.value.actions.forwarding_url.url\r\n    }\r\n  }\r\n  priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority\r\n  status   = each.value.status\r\n}\r\n\r\n```\r\n\r\nAnd a configuration that is used to create resources:\r\n\r\n```hcl\r\nterraform {\r\n  required_version = \">= 0.15.0\"\r\n\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.1\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"cloudflare_api_token\" {\r\n  type      = string\r\n  sensitive = true\r\n}\r\n\r\nprovider \"cloudflare\" {\r\n  api_token = var.cloudflare_api_token\r\n}\r\n\r\nmodule \"acme_com\" {\r\n  source = \"./module\"\r\n  zone   = \"acme.com\"\r\n  page_rules = [\r\n    {\r\n      page_rule_name = \"page_rule_1\"\r\n      target         = \"acme.com/url1\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url1\"\r\n        }\r\n      }\r\n      priority = 1\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_2\"\r\n      target         = \"acme.com/url2\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url2\"\r\n        }\r\n      }\r\n      priority = 2\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_3\"\r\n      target         = \"acme.com/url3\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url3\"\r\n        }\r\n      }\r\n      priority = 3\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIn this particular example, I'm trying to create instances of the `cloudflare_page_rule` resource in the order that corresponds to the *value of their `priority` argument*. To achieve that I'm trying to use the following expression in the `priority` argument:\r\n\r\n```hcl\r\neach.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority\r\n```\r\n\r\nMy idea is that for a `page_rule` with a `priority` value of `1`, leave the `priority` value as is, without referring to other instances. And for each `page_rule` with a `priority` greater than `1`, find an instance with a lower priority and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. It should look something like this:\r\n\r\n - For `page_rule_1`: `priority = 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_1\"].priority + 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_2\"].priority + 1`.\r\n\r\nTo find a `page_rule_name` of an instance with a lower priority, I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. In doing so, I'm assuming that both the list of `page_rule_name` and the list of the `priority` values, are in the same order, which I'm not sure about.\r\n\r\nAs a result of `terraform plan` execution I get an error:\r\n\r\n`Error: Cycle: module.acme_com.cloudflare_page_rule.this[\"page_rule_3\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_2\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_1\"]`\r\n\r\nAt the same time, I can't find the reason for such an error.\r\n\r\nHow to fix it? Or maybe there is an easier or more efficient way to achieve the end goal?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "For this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Let's take a test module that instantiates the `cloudflare_page_rule` resource: ```hcl # Module is placed to module\\main.tf terraform { experiments = [module_variable_optional_attrs] } terraform { required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.0\" } } } variable \"zone\" { type = string description = \"The DNS zone name which will be added, e.g. example.com.\" } variable \"page_rules\" { type = list(object({ page_rule_name = string target = string actions = object({ forwarding_url = optional(object({ url = string status_code = number })) }) priority = optional(number) status = optional(string) })) description = \"Zone's page rules.\" default = [] } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone resource \"cloudflare_zone\" \"this\" { zone = var.zone } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule resource \"cloudflare_page_rule\" \"this\" { for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {} zone_id = cloudflare_zone.this.id target = each.value.target actions { forwarding_url { status_code = each.value.actions.forwarding_url.status_code url = each.value.actions.forwarding_url.url } } priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority status = each.value.status } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "And a configuration that is used to create resources: ```hcl terraform { required_version = \">= 0.15.0\" required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.1\" } } } variable \"cloudflare_api_token\" { type = string sensitive = true } provider \"cloudflare\" { api_token = var.cloudflare_api_token } module \"acme_com\" { source = \"./module\" zone = \"acme.com\" page_rules = [ { page_rule_name = \"page_rule_1\" target = \"acme.com/url1\" actions = { forwarding_url = { status_code = 301 url = \"https://www", "keywords": ["provider"]}, {"source": "Text", "text": "And for each `page_rule` with a `priority` greater than `1`, find an instance with a lower priority and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. ", "keywords": ["instance"]}, {"source": "Text", "text": "To find a `page_rule_name` of an instance with a lower priority, I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. ", "keywords": ["instance"]}, {"source": "Text", "text": "Or maybe there is an easier or more efficient way to achieve the end goal?", "keywords": ["efficient"]}]}, {"Id": "266157831", "PostHistoryTypeId": "5", "PostId": "71498535", "RevisionGUID": "f8fe33e3-d6a2-445c-9cf4-bc418e7f2bda", "CreationDate": "2022-03-16T15:54:11.807", "UserId": "10203419", "Comment": "added 23 characters in body", "Text": "My end goal is to have Terraform create instances of a resource generated with the `for_each` meta argument in a *specific sequence*. HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. However, the `depends_on` argument does not take values that are \"calculated\".\r\n\r\nFor this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance.\r\n\r\nBelow you can find a more practical example based on using one of the providers, but the question is more general and pertains to Terraform as such.\r\n\r\nLet's take a test module that instantiates the `cloudflare_page_rule` resource:\r\n\r\n```hcl\r\n# Module is placed to module\\main.tf\r\n\r\nterraform {\r\n  experiments = [module_variable_optional_attrs]\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.0\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"zone\" {\r\n  type        = string\r\n  description = \"The DNS zone name which will be added, e.g. example.com.\"\r\n}\r\n\r\nvariable \"page_rules\" {\r\n  type = list(object({\r\n    page_rule_name = string\r\n    target         = string\r\n    actions = object({\r\n      forwarding_url = optional(object({\r\n        url         = string\r\n        status_code = number\r\n      }))\r\n    })\r\n    priority = optional(number)\r\n    status   = optional(string)\r\n  }))\r\n  description = \"Zone's page rules.\"\r\n  default     = []\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone\r\nresource \"cloudflare_zone\" \"this\" {\r\n  zone = var.zone\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule\r\nresource \"cloudflare_page_rule\" \"this\" {\r\n  for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {}\r\n\r\n  zone_id = cloudflare_zone.this.id\r\n\r\n  target = each.value.target\r\n  actions {\r\n    forwarding_url {\r\n      status_code = each.value.actions.forwarding_url.status_code\r\n      url         = each.value.actions.forwarding_url.url\r\n    }\r\n  }\r\n  priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority\r\n  status   = each.value.status\r\n}\r\n\r\n```\r\n\r\nAnd a configuration that is used to create resources:\r\n\r\n```hcl\r\nterraform {\r\n  required_version = \">= 0.15.0\"\r\n\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.1\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"cloudflare_api_token\" {\r\n  type      = string\r\n  sensitive = true\r\n}\r\n\r\nprovider \"cloudflare\" {\r\n  api_token = var.cloudflare_api_token\r\n}\r\n\r\nmodule \"acme_com\" {\r\n  source = \"./module\"\r\n  zone   = \"acme.com\"\r\n  page_rules = [\r\n    {\r\n      page_rule_name = \"page_rule_1\"\r\n      target         = \"acme.com/url1\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url1\"\r\n        }\r\n      }\r\n      priority = 1\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_2\"\r\n      target         = \"acme.com/url2\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url2\"\r\n        }\r\n      }\r\n      priority = 2\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_3\"\r\n      target         = \"acme.com/url3\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url3\"\r\n        }\r\n      }\r\n      priority = 3\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIn this particular example, I'm trying to create instances of the `cloudflare_page_rule` resource in the order that corresponds to the *value of their `priority` argument*. To achieve that I'm trying to use the following expression in the `priority` argument:\r\n\r\n```hcl\r\neach.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority\r\n```\r\n\r\nMy idea is that for a `page_rule` with a `priority` value of `1`, leave the `priority` value as is, without referring to other instances. And for each `page_rule` with a `priority` greater than `1`, find an instance with a higher priority (lower value) and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. It should look something like this:\r\n\r\n - For `page_rule_1`: `priority = 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_1\"].priority + 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_2\"].priority + 1`.\r\n\r\nTo find a `page_rule_name` of an instance with a higher priority (lower value), I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. In doing so, I'm assuming that both the list of `page_rule_name` and the list of the `priority` values, are in the same order, which I'm not sure about.\r\n\r\nAs a result of `terraform plan` execution I get an error:\r\n\r\n`Error: Cycle: module.acme_com.cloudflare_page_rule.this[\"page_rule_3\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_2\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_1\"]`\r\n\r\nAt the same time, I can't find the reason for such an error.\r\n\r\nHow to fix it? Or maybe there is an easier or more efficient way to achieve the end goal?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "For this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Let's take a test module that instantiates the `cloudflare_page_rule` resource: ```hcl # Module is placed to module\\main.tf terraform { experiments = [module_variable_optional_attrs] } terraform { required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.0\" } } } variable \"zone\" { type = string description = \"The DNS zone name which will be added, e.g. example.com.\" } variable \"page_rules\" { type = list(object({ page_rule_name = string target = string actions = object({ forwarding_url = optional(object({ url = string status_code = number })) }) priority = optional(number) status = optional(string) })) description = \"Zone's page rules.\" default = [] } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone resource \"cloudflare_zone\" \"this\" { zone = var.zone } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule resource \"cloudflare_page_rule\" \"this\" { for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {} zone_id = cloudflare_zone.this.id target = each.value.target actions { forwarding_url { status_code = each.value.actions.forwarding_url.status_code url = each.value.actions.forwarding_url.url } } priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority status = each.value.status } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "And a configuration that is used to create resources: ```hcl terraform { required_version = \">= 0.15.0\" required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.1\" } } } variable \"cloudflare_api_token\" { type = string sensitive = true } provider \"cloudflare\" { api_token = var.cloudflare_api_token } module \"acme_com\" { source = \"./module\" zone = \"acme.com\" page_rules = [ { page_rule_name = \"page_rule_1\" target = \"acme.com/url1\" actions = { forwarding_url = { status_code = 301 url = \"https://www", "keywords": ["provider"]}, {"source": "Text", "text": "And for each `page_rule` with a `priority` greater than `1`, find an instance with a higher priority (lower value) and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. ", "keywords": ["instance"]}, {"source": "Text", "text": "To find a `page_rule_name` of an instance with a higher priority (lower value), I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. ", "keywords": ["instance"]}, {"source": "Text", "text": "Or maybe there is an easier or more efficient way to achieve the end goal?", "keywords": ["efficient"]}]}, {"Id": "266211242", "PostHistoryTypeId": "5", "PostId": "71498535", "RevisionGUID": "7f344dde-db68-44a9-b3d1-be893882df06", "CreationDate": "2022-03-17T10:09:05.993", "UserId": "10203419", "Comment": "added 164 characters in body", "Text": "My end goal is to have Terraform create instances of a resource generated with the `for_each` meta argument in a *specific sequence*. HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. However, the `depends_on` argument does not take values that are \"calculated\".\r\n\r\nFor this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance.\r\n\r\nBelow you can find a more practical example based on using one of the providers, but the question is more general and pertains to Terraform as such.\r\n\r\nLet's take a test module that instantiates the `cloudflare_page_rule` resource:\r\n\r\n```hcl\r\n# Module is placed to module\\main.tf\r\n\r\nterraform {\r\n  experiments = [module_variable_optional_attrs]\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.0\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"zone\" {\r\n  type        = string\r\n  description = \"The DNS zone name which will be added, e.g. example.com.\"\r\n}\r\n\r\nvariable \"page_rules\" {\r\n  type = list(object({\r\n    page_rule_name = string\r\n    target         = string\r\n    actions = object({\r\n      forwarding_url = optional(object({\r\n        url         = string\r\n        status_code = number\r\n      }))\r\n    })\r\n    priority = optional(number)\r\n    status   = optional(string)\r\n  }))\r\n  description = \"Zone's page rules.\"\r\n  default     = []\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone\r\nresource \"cloudflare_zone\" \"this\" {\r\n  zone = var.zone\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule\r\nresource \"cloudflare_page_rule\" \"this\" {\r\n  for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {}\r\n\r\n  zone_id = cloudflare_zone.this.id\r\n\r\n  target = each.value.target\r\n  actions {\r\n    forwarding_url {\r\n      status_code = each.value.actions.forwarding_url.status_code\r\n      url         = each.value.actions.forwarding_url.url\r\n    }\r\n  }\r\n  priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority\r\n  status   = each.value.status\r\n}\r\n\r\n```\r\n\r\nAnd a configuration that is used to create resources:\r\n\r\n```hcl\r\nterraform {\r\n  required_version = \">= 0.15.0\"\r\n\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.1\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"cloudflare_api_token\" {\r\n  type      = string\r\n  sensitive = true\r\n}\r\n\r\nprovider \"cloudflare\" {\r\n  api_token = var.cloudflare_api_token\r\n}\r\n\r\nmodule \"acme_com\" {\r\n  source = \"./module\"\r\n  zone   = \"acme.com\"\r\n  page_rules = [\r\n    {\r\n      page_rule_name = \"page_rule_1\"\r\n      target         = \"acme.com/url1\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url1\"\r\n        }\r\n      }\r\n      priority = 1\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_2\"\r\n      target         = \"acme.com/url2\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url2\"\r\n        }\r\n      }\r\n      priority = 2\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_3\"\r\n      target         = \"acme.com/url3\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url3\"\r\n        }\r\n      }\r\n      priority = 3\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIn this particular example, I'm trying to create instances of the `cloudflare_page_rule` resource in the order that corresponds to the *value of their `priority` argument*. To achieve that I'm trying to use the following expression in the `priority` argument:\r\n\r\n```hcl\r\neach.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority\r\n```\r\n\r\nMy idea is that for a `page_rule` with a `priority` value of `1`, leave the `priority` value as is, without referring to other instances. And for each `page_rule` with a `priority` greater than `1`, find an instance with a higher priority (lower value) and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. It should look something like this:\r\n\r\n - For `page_rule_1`: `priority = 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_1\"].priority + 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_2\"].priority + 1`.\r\n\r\nTo find a `page_rule_name` of an instance with a higher priority (lower value), I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. In doing so, I'm assuming that both the list of `page_rule_name` and the list of the `priority` values, are in the same order, which I'm not sure about.\r\n\r\nAs a result of `terraform plan` execution I get an error:\r\n\r\n`Error: Cycle: module.acme_com.cloudflare_page_rule.this[\"page_rule_3\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_2\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_1\"]`\r\n\r\nAt the same time, I can't find the reason for such an error.\r\n\r\nHow to fix it? Or maybe there is an easier or more efficient way to achieve the end goal?\r\n\r\nP.S. Resulting graph after `terraform graph | dot -Tsvg > graph.svg`:\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/V4uH3.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "For this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Let's take a test module that instantiates the `cloudflare_page_rule` resource: ```hcl # Module is placed to module\\main.tf terraform { experiments = [module_variable_optional_attrs] } terraform { required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.0\" } } } variable \"zone\" { type = string description = \"The DNS zone name which will be added, e.g. example.com.\" } variable \"page_rules\" { type = list(object({ page_rule_name = string target = string actions = object({ forwarding_url = optional(object({ url = string status_code = number })) }) priority = optional(number) status = optional(string) })) description = \"Zone's page rules.\" default = [] } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone resource \"cloudflare_zone\" \"this\" { zone = var.zone } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule resource \"cloudflare_page_rule\" \"this\" { for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {} zone_id = cloudflare_zone.this.id target = each.value.target actions { forwarding_url { status_code = each.value.actions.forwarding_url.status_code url = each.value.actions.forwarding_url.url } } priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority status = each.value.status } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "And a configuration that is used to create resources: ```hcl terraform { required_version = \">= 0.15.0\" required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.1\" } } } variable \"cloudflare_api_token\" { type = string sensitive = true } provider \"cloudflare\" { api_token = var.cloudflare_api_token } module \"acme_com\" { source = \"./module\" zone = \"acme.com\" page_rules = [ { page_rule_name = \"page_rule_1\" target = \"acme.com/url1\" actions = { forwarding_url = { status_code = 301 url = \"https://www", "keywords": ["provider"]}, {"source": "Text", "text": "And for each `page_rule` with a `priority` greater than `1`, find an instance with a higher priority (lower value) and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. ", "keywords": ["instance"]}, {"source": "Text", "text": "To find a `page_rule_name` of an instance with a higher priority (lower value), I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. ", "keywords": ["instance"]}, {"source": "Text", "text": "Or maybe there is an easier or more efficient way to achieve the end goal? ", "keywords": ["efficient"]}]}, {"Id": "266218405", "PostHistoryTypeId": "5", "PostId": "71498535", "RevisionGUID": "ffe34834-f41f-4c6e-8364-fe6fb032c71c", "CreationDate": "2022-03-17T11:57:07.530", "UserId": "10203419", "Comment": "added 89 characters in body", "Text": "My end goal is to have Terraform create instances of a resource generated with the `for_each` meta argument in a *specific sequence*. HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. However, the `depends_on` argument does not take values that are \"calculated\".\r\n\r\nFor this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance.\r\n\r\nBelow you can find a more practical example based on using one of the providers, but the question is more general and pertains to Terraform as such.\r\n\r\nLet's take a test module that instantiates the `cloudflare_page_rule` resource:\r\n\r\n```hcl\r\n# Module is placed to module\\main.tf\r\n\r\nterraform {\r\n  experiments = [module_variable_optional_attrs]\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.0\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"zone\" {\r\n  type        = string\r\n  description = \"The DNS zone name which will be added, e.g. example.com.\"\r\n}\r\n\r\nvariable \"page_rules\" {\r\n  type = list(object({\r\n    page_rule_name = string\r\n    target         = string\r\n    actions = object({\r\n      forwarding_url = optional(object({\r\n        url         = string\r\n        status_code = number\r\n      }))\r\n    })\r\n    priority = optional(number)\r\n    status   = optional(string)\r\n  }))\r\n  description = \"Zone's page rules.\"\r\n  default     = []\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone\r\nresource \"cloudflare_zone\" \"this\" {\r\n  zone = var.zone\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule\r\nresource \"cloudflare_page_rule\" \"this\" {\r\n  for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {}\r\n\r\n  zone_id = cloudflare_zone.this.id\r\n\r\n  target = each.value.target\r\n  actions {\r\n    forwarding_url {\r\n      status_code = each.value.actions.forwarding_url.status_code\r\n      url         = each.value.actions.forwarding_url.url\r\n    }\r\n  }\r\n  priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority\r\n  status   = each.value.status\r\n}\r\n\r\n```\r\n\r\nAnd a configuration that is used to create resources:\r\n\r\n```hcl\r\nterraform {\r\n  required_version = \">= 0.15.0\"\r\n\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.1\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"cloudflare_api_token\" {\r\n  type      = string\r\n  sensitive = true\r\n}\r\n\r\nprovider \"cloudflare\" {\r\n  api_token = var.cloudflare_api_token\r\n}\r\n\r\nmodule \"acme_com\" {\r\n  source = \"./module\"\r\n  zone   = \"acme.com\"\r\n  page_rules = [\r\n    {\r\n      page_rule_name = \"page_rule_1\"\r\n      target         = \"acme.com/url1\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url1\"\r\n        }\r\n      }\r\n      priority = 1\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_2\"\r\n      target         = \"acme.com/url2\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url2\"\r\n        }\r\n      }\r\n      priority = 2\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_3\"\r\n      target         = \"acme.com/url3\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url3\"\r\n        }\r\n      }\r\n      priority = 3\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIn this particular example, I'm trying to create instances of the `cloudflare_page_rule` resource in the order that corresponds to the *value of their `priority` argument*. To achieve that I'm trying to use the following expression in the `priority` argument:\r\n\r\n```hcl\r\neach.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority\r\n```\r\n\r\nMy idea is that for a `page_rule` with a `priority` value of `1`, leave the `priority` value as is, without referring to other instances. And for each `page_rule` with a `priority` greater than `1`, find an instance with a higher priority (lower value) and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. It should look something like this:\r\n\r\n - For `page_rule_1`: `priority = 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_1\"].priority + 1`.\r\n - For `page_rule_2`: `priority = cloudflare_page_rule.this[\"page_rule_2\"].priority + 1`.\r\n\r\nTo find a `page_rule_name` of an instance with a higher priority (lower value), I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. In doing so, I'm assuming that both the list of `page_rule_name` and the list of the `priority` values, are in the same order, which I'm not sure about.\r\n\r\nAs a result of `terraform plan` execution I get an error:\r\n\r\n`Error: Cycle: module.acme_com.cloudflare_page_rule.this[\"page_rule_3\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_2\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_1\"]`\r\n\r\nAt the same time, I can't find the reason for such an error.\r\n\r\nHow to fix it? Or maybe there is an easier or more efficient way to achieve the end goal?\r\n\r\nP.S. Resulting graph after `terraform graph -draw-cycles | dot -Tsvg > graph.svg` or `terraform graph -draw-cycles -type=plan | dot -Tsvg > graph-plan.svg` (the same result):\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/sDRtP.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "For this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Let's take a test module that instantiates the `cloudflare_page_rule` resource: ```hcl # Module is placed to module\\main.tf terraform { experiments = [module_variable_optional_attrs] } terraform { required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.0\" } } } variable \"zone\" { type = string description = \"The DNS zone name which will be added, e.g. example.com.\" } variable \"page_rules\" { type = list(object({ page_rule_name = string target = string actions = object({ forwarding_url = optional(object({ url = string status_code = number })) }) priority = optional(number) status = optional(string) })) description = \"Zone's page rules.\" default = [] } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone resource \"cloudflare_zone\" \"this\" { zone = var.zone } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule resource \"cloudflare_page_rule\" \"this\" { for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {} zone_id = cloudflare_zone.this.id target = each.value.target actions { forwarding_url { status_code = each.value.actions.forwarding_url.status_code url = each.value.actions.forwarding_url.url } } priority = each.value.priority > 1 ? cloudflare_page_rule.this[element(var.page_rules[*].page_rule_name, index(var.page_rules[*].priority, each.value.priority - 1))].priority + 1 : each.value.priority status = each.value.status } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "And a configuration that is used to create resources: ```hcl terraform { required_version = \">= 0.15.0\" required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.1\" } } } variable \"cloudflare_api_token\" { type = string sensitive = true } provider \"cloudflare\" { api_token = var.cloudflare_api_token } module \"acme_com\" { source = \"./module\" zone = \"acme.com\" page_rules = [ { page_rule_name = \"page_rule_1\" target = \"acme.com/url1\" actions = { forwarding_url = { status_code = 301 url = \"https://www", "keywords": ["provider"]}, {"source": "Text", "text": "And for each `page_rule` with a `priority` greater than `1`, find an instance with a higher priority (lower value) and replace the value of the `priority` argument with a calculated value based on the value of the instance argument to which the \"reference\" is set. ", "keywords": ["instance"]}, {"source": "Text", "text": "To find a `page_rule_name` of an instance with a higher priority (lower value), I use the `element` function, where as the value of the `list` argument I pass a list of `page_rule_name` values of all future instances, and as the value of the `index` argument, I pass the index of the element in the priority list, which has a value less by 1. ", "keywords": ["instance"]}, {"source": "Text", "text": "Or maybe there is an easier or more efficient way to achieve the end goal? ", "keywords": ["efficient"]}]}, {"Id": "266773819", "PostHistoryTypeId": "5", "PostId": "71498535", "RevisionGUID": "6b5cd9ec-ed15-43da-9fc8-8110a16a36d0", "CreationDate": "2022-03-25T11:26:49.577", "UserId": "10203419", "Comment": "Updated with a more illustrative example", "Text": "**Updated with a more illustrative example.**\r\n\r\nMy end goal is to have Terraform create instances of a resource generated with the `for_each` meta argument in a *specific sequence*. HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. However, the `depends_on` argument does not take values that are \"calculated\", so I don't know how to use it in modules.\r\n\r\nFor this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in the instances it creates \"calculated\" based on the values of the same argument from another example.\r\n\r\nBelow you can find a more practical example based on using one of the providers, but the question is more general and pertains to Terraform as such.\r\n\r\nLet's take a test module that instantiates the `cloudflare_page_rule` resource:\r\n\r\n```hcl\r\n# Module is placed to module\\main.tf\r\n\r\nterraform {\r\n  experiments = [module_variable_optional_attrs]\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.0\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"zone\" {\r\n  type        = string\r\n  description = \"The DNS zone name which will be added, e.g. example.com.\"\r\n}\r\n\r\nvariable \"page_rules\" {\r\n  type = list(object({\r\n    page_rule_name = string\r\n    target         = string\r\n    actions = object({\r\n      forwarding_url = optional(object({\r\n        url         = string\r\n        status_code = number\r\n      }))\r\n    })\r\n    priority   = optional(number)\r\n    status     = optional(string)\r\n    depends_on = optional(string)\r\n  }))\r\n  description = \"Zone's page rules.\"\r\n  default     = []\r\n}\r\n\r\n//noinspection HILUnresolvedReference\r\nlocals {\r\n  page_rule_dependencies = { for p in var.page_rules : p.page_rule_name => p.depends_on if p.depends_on != null }\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone\r\nresource \"cloudflare_zone\" \"this\" {\r\n  zone = var.zone\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule\r\n//noinspection HILUnresolvedReference\r\nresource \"cloudflare_page_rule\" \"this\" {\r\n  for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {}\r\n\r\n  zone_id = cloudflare_zone.this.id\r\n\r\n  target = each.value.target\r\n  actions {\r\n    //noinspection HILUnresolvedReference\r\n    forwarding_url {\r\n      status_code = each.value.actions.forwarding_url.status_code\r\n      url         = each.value.actions.forwarding_url.url\r\n    }\r\n  }\r\n  priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority\r\n  status = each.value.status\r\n}\r\n\r\noutput \"page_rule_dependencies\" {\r\n  value = local.page_rule_dependencies\r\n}\r\n```\r\n\r\nAnd a configuration that is used to create resources:\r\n\r\n```hcl\r\nterraform {\r\n  required_version = \">= 0.15.0\"\r\n\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.1\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"cloudflare_api_token\" {\r\n  type      = string\r\n  sensitive = true\r\n}\r\n\r\nprovider \"cloudflare\" {\r\n  api_token = var.cloudflare_api_token\r\n}\r\n\r\nmodule \"acme_com\" {\r\n  source = \"./module\"\r\n  zone   = \"acme.com\"\r\n  page_rules = [\r\n    {\r\n      page_rule_name = \"page_rule_1\"\r\n      target         = \"acme.com/url1\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url1\"\r\n        }\r\n      }\r\n      priority = 1\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_2\"\r\n      target         = \"acme.com/url2\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url2\"\r\n        }\r\n      }\r\n      priority   = 2\r\n      depends_on = \"page_rule_1\"\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_3\"\r\n      target         = \"acme.com/url3\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url3\"\r\n        }\r\n      }\r\n      priority   = 3\r\n      depends_on = \"page_rule_2\"\r\n    }\r\n  ]\r\n}\r\n\r\noutput \"page_rule_dependencies\" {\r\n  value = module.acme_com.page_rule_dependencies\r\n}\r\n```\r\n\r\nIn this particular example, I've added the `depends_on` argument to the `page_rules` variable (don't confuse this argument with the `depends_on` *meta argument*). For the value of the `depends_on` argument, I specified the name of a `page_fule` on which another `page_fule` depends.\r\n\r\nNext, I created a local variable `page_rule_dependencies`, the value of which, after calculations, is the following (you can check this yourself by replacing the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct with `priority = each.value.priority` and executing `terraform apply`):\r\n\r\n```hcl\r\npage_rule_dependencies = {\r\n  \"page_rule_2\" = \"page_rule_1\"\r\n  \"page_rule_3\" = \"page_rule_2\"\r\n}\r\n```\r\n\r\nFurther, in the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct, I refer to the values \u200b\u200bof the local variable, thereby forming a \"reference\" to the `page_fule` instance, on which the current instance depends:\r\n\r\n1. When creating `page_rule_1`, the value of its argument `priority` = `1`.\r\n2. When creating `page_rule_2`, the value of its argument `priority` = `cloudflare_page_rule.this[\"page_rule_1\"].priority + 1`.\r\n3. When creating `page_rule_3`, the value of its argument `priority` = `cloudflare_page_rule.this[\"page_rule_2\"].priority + 1`.\r\n\r\nHowever, I get an `Error: Cycle: module.acme_com.cloudflare_page_rule.this[\"page_rule_3\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_2\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_1\"]` error.\r\n\r\nEither I'm doing something wrong, or it's some kind of Terraform limitation/bug. Is there a way to get rid of this error?\r\n\r\nP.S. Resulting graph after `terraform graph -draw-cycles | dot -Tsvg > graph.svg` or `terraform graph -draw-cycles -type=plan | dot -Tsvg > graph-plan.svg` (the same result):\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/eXGad.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "Let's take a test module that instantiates the `cloudflare_page_rule` resource: ```hcl # Module is placed to module\\main.tf terraform { experiments = [module_variable_optional_attrs] } terraform { required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.0\" } } } variable \"zone\" { type = string description = \"The DNS zone name which will be added, e.g. example.com.\" } variable \"page_rules\" { type = list(object({ page_rule_name = string target = string actions = object({ forwarding_url = optional(object({ url = string status_code = number })) }) priority = optional(number) status = optional(string) depends_on = optional(string) })) description = \"Zone's page rules.\" default = [] } //noinspection HILUnresolvedReference locals { page_rule_dependencies = { for p in var.page_rules : p.page_rule_name => p.depends_on if p.depends_on != null } } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone resource \"cloudflare_zone\" \"this\" { zone = var.zone } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule //noinspection HILUnresolvedReference resource \"cloudflare_page_rule\" \"this\" { for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {} zone_id = cloudflare_zone.this.id target = each.value.target actions { //noinspection HILUnresolvedReference forwarding_url { status_code = each.value.actions.forwarding_url.status_code url = each.value.actions.forwarding_url.url } } priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority status = each.value.status } output \"page_rule_dependencies\" { value = local.page_rule_dependencies } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "And a configuration that is used to create resources: ```hcl terraform { required_version = \">= 0.15.0\" required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.1\" } } } variable \"cloudflare_api_token\" { type = string sensitive = true } provider \"cloudflare\" { api_token = var.cloudflare_api_token } module \"acme_com\" { source = \"./module\" zone = \"acme.com\" page_rules = [ { page_rule_name = \"page_rule_1\" target = \"acme.com/url1\" actions = { forwarding_url = { status_code = 301 url = \"https://www", "keywords": ["provider"]}, {"source": "Text", "text": "Next, I created a local variable `page_rule_dependencies`, the value of which, after calculations, is the following (you can check this yourself by replacing the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct with `priority = each.value.priority` and executing `terraform apply`): ```hcl page_rule_dependencies = { \"page_rule_2\" = \"page_rule_1\" \"page_rule_3\" = \"page_rule_2\" } ``` Further, in the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct, I refer to the values \u200b\u200bof the local variable, thereby forming a \"reference\" to the `page_fule` instance, on which the current instance depends: 1. ", "keywords": ["instance"]}]}, {"Id": "266948767", "PostHistoryTypeId": "5", "PostId": "71498535", "RevisionGUID": "851bb40e-a8e5-425d-a504-5fa1feee08ed", "CreationDate": "2022-03-28T11:42:32.317", "UserId": "10203419", "Comment": "deleted 1 character in body", "Text": "**Updated with a more illustrative example.**\r\n\r\nMy end goal is to have Terraform create instances of a resource generated with the `for_each` meta argument in a *specific sequence*. HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. However, the `depends_on` argument does not take values that are \"calculated\", so I don't know how to use it in modules.\r\n\r\nFor this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in an instance it creates \"calculated\" based on the values of the same argument from another instance.\r\n\r\nBelow you can find a more practical example based on using one of the providers, but the question is more general and pertains to Terraform as such.\r\n\r\nLet's take a test module that instantiates the `cloudflare_page_rule` resource:\r\n\r\n```hcl\r\n# Module is placed to module\\main.tf\r\n\r\nterraform {\r\n  experiments = [module_variable_optional_attrs]\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.0\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"zone\" {\r\n  type        = string\r\n  description = \"The DNS zone name which will be added, e.g. example.com.\"\r\n}\r\n\r\nvariable \"page_rules\" {\r\n  type = list(object({\r\n    page_rule_name = string\r\n    target         = string\r\n    actions = object({\r\n      forwarding_url = optional(object({\r\n        url         = string\r\n        status_code = number\r\n      }))\r\n    })\r\n    priority   = optional(number)\r\n    status     = optional(string)\r\n    depends_on = optional(string)\r\n  }))\r\n  description = \"Zone's page rules.\"\r\n  default     = []\r\n}\r\n\r\n//noinspection HILUnresolvedReference\r\nlocals {\r\n  page_rule_dependencies = { for p in var.page_rules : p.page_rule_name => p.depends_on if p.depends_on != null }\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone\r\nresource \"cloudflare_zone\" \"this\" {\r\n  zone = var.zone\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule\r\n//noinspection HILUnresolvedReference\r\nresource \"cloudflare_page_rule\" \"this\" {\r\n  for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {}\r\n\r\n  zone_id = cloudflare_zone.this.id\r\n\r\n  target = each.value.target\r\n  actions {\r\n    //noinspection HILUnresolvedReference\r\n    forwarding_url {\r\n      status_code = each.value.actions.forwarding_url.status_code\r\n      url         = each.value.actions.forwarding_url.url\r\n    }\r\n  }\r\n  priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority\r\n  status = each.value.status\r\n}\r\n\r\noutput \"page_rule_dependencies\" {\r\n  value = local.page_rule_dependencies\r\n}\r\n```\r\n\r\nAnd a configuration that is used to create resources:\r\n\r\n```hcl\r\nterraform {\r\n  required_version = \">= 0.15.0\"\r\n\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.1\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"cloudflare_api_token\" {\r\n  type      = string\r\n  sensitive = true\r\n}\r\n\r\nprovider \"cloudflare\" {\r\n  api_token = var.cloudflare_api_token\r\n}\r\n\r\nmodule \"acme_com\" {\r\n  source = \"./module\"\r\n  zone   = \"acme.com\"\r\n  page_rules = [\r\n    {\r\n      page_rule_name = \"page_rule_1\"\r\n      target         = \"acme.com/url1\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url1\"\r\n        }\r\n      }\r\n      priority = 1\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_2\"\r\n      target         = \"acme.com/url2\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url2\"\r\n        }\r\n      }\r\n      priority   = 2\r\n      depends_on = \"page_rule_1\"\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_3\"\r\n      target         = \"acme.com/url3\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url3\"\r\n        }\r\n      }\r\n      priority   = 3\r\n      depends_on = \"page_rule_2\"\r\n    }\r\n  ]\r\n}\r\n\r\noutput \"page_rule_dependencies\" {\r\n  value = module.acme_com.page_rule_dependencies\r\n}\r\n```\r\n\r\nIn this particular example, I've added the `depends_on` argument to the `page_rules` variable (don't confuse this argument with the `depends_on` *meta argument*). For the value of the `depends_on` argument, I specified the name of a `page_fule` on which another `page_fule` depends.\r\n\r\nNext, I created a local variable `page_rule_dependencies`, the value of which, after calculations, is the following (you can check this yourself by replacing the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct with `priority = each.value.priority` and executing `terraform apply`):\r\n\r\n```hcl\r\npage_rule_dependencies = {\r\n  \"page_rule_2\" = \"page_rule_1\"\r\n  \"page_rule_3\" = \"page_rule_2\"\r\n}\r\n```\r\n\r\nFurther, in the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct, I refer to the values \u200b\u200bof the local variable, thereby forming a \"reference\" to the `page_fule` instance, on which the current instance depends:\r\n\r\n1. When creating `page_rule_1`, the value of its argument `priority` = `1`.\r\n2. When creating `page_rule_2`, the value of its argument `priority` = `cloudflare_page_rule.this[\"page_rule_1\"].priority + 1`.\r\n3. When creating `page_rule_3`, the value of its argument `priority` = `cloudflare_page_rule.this[\"page_rule_2\"].priority + 1`.\r\n\r\nHowever, I get an `Error: Cycle: module.acme_com.cloudflare_page_rule.this[\"page_rule_3\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_2\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_1\"]` error.\r\n\r\nEither I'm doing something wrong, or it's some kind of Terraform limitation/bug. Is there a way to get rid of this error?\r\n\r\nP.S. Resulting graph after `terraform graph -draw-cycles | dot -Tsvg > graph.svg` or `terraform graph -draw-cycles -type=plan | dot -Tsvg > graph-plan.svg` (the same result):\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/eXGad.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "For this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in an instance it creates \"calculated\" based on the values of the same argument from another instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Let's take a test module that instantiates the `cloudflare_page_rule` resource: ```hcl # Module is placed to module\\main.tf terraform { experiments = [module_variable_optional_attrs] } terraform { required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.0\" } } } variable \"zone\" { type = string description = \"The DNS zone name which will be added, e.g. example.com.\" } variable \"page_rules\" { type = list(object({ page_rule_name = string target = string actions = object({ forwarding_url = optional(object({ url = string status_code = number })) }) priority = optional(number) status = optional(string) depends_on = optional(string) })) description = \"Zone's page rules.\" default = [] } //noinspection HILUnresolvedReference locals { page_rule_dependencies = { for p in var.page_rules : p.page_rule_name => p.depends_on if p.depends_on != null } } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone resource \"cloudflare_zone\" \"this\" { zone = var.zone } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule //noinspection HILUnresolvedReference resource \"cloudflare_page_rule\" \"this\" { for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {} zone_id = cloudflare_zone.this.id target = each.value.target actions { //noinspection HILUnresolvedReference forwarding_url { status_code = each.value.actions.forwarding_url.status_code url = each.value.actions.forwarding_url.url } } priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority status = each.value.status } output \"page_rule_dependencies\" { value = local.page_rule_dependencies } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "And a configuration that is used to create resources: ```hcl terraform { required_version = \">= 0.15.0\" required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.1\" } } } variable \"cloudflare_api_token\" { type = string sensitive = true } provider \"cloudflare\" { api_token = var.cloudflare_api_token } module \"acme_com\" { source = \"./module\" zone = \"acme.com\" page_rules = [ { page_rule_name = \"page_rule_1\" target = \"acme.com/url1\" actions = { forwarding_url = { status_code = 301 url = \"https://www", "keywords": ["provider"]}, {"source": "Text", "text": "Next, I created a local variable `page_rule_dependencies`, the value of which, after calculations, is the following (you can check this yourself by replacing the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct with `priority = each.value.priority` and executing `terraform apply`): ```hcl page_rule_dependencies = { \"page_rule_2\" = \"page_rule_1\" \"page_rule_3\" = \"page_rule_2\" } ``` Further, in the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct, I refer to the values \u200b\u200bof the local variable, thereby forming a \"reference\" to the `page_fule` instance, on which the current instance depends: 1. ", "keywords": ["instance"]}]}, {"Id": "266949100", "PostHistoryTypeId": "5", "PostId": "71498535", "RevisionGUID": "f466af65-1d64-4e40-b6c1-898f41929858", "CreationDate": "2022-03-28T11:47:37.887", "UserId": "10203419", "Comment": "deleted 1 character in body", "Text": "**Updated with a more illustrative example.**\r\n\r\nMy end goal is to have Terraform create instances of a resource generated with the `for_each` meta argument in a *specific sequence*. HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. However, the `depends_on` argument does not take values that are \"calculated\", so I don't know how to use it in modules.\r\n\r\nFor this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in an instance it creates \"calculated\" based on the values of the same argument from another instance.\r\n\r\nBelow you can find a more practical example based on using one of the providers, but the question is more general and pertains to Terraform as such.\r\n\r\nLet's take a test module that instantiates the `cloudflare_page_rule` resource:\r\n\r\n```hcl\r\n# Module is placed to module\\main.tf\r\n\r\nterraform {\r\n  experiments = [module_variable_optional_attrs]\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.0\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"zone\" {\r\n  type        = string\r\n  description = \"The DNS zone name which will be added, e.g. example.com.\"\r\n}\r\n\r\nvariable \"page_rules\" {\r\n  type = list(object({\r\n    page_rule_name = string\r\n    target         = string\r\n    actions = object({\r\n      forwarding_url = optional(object({\r\n        url         = string\r\n        status_code = number\r\n      }))\r\n    })\r\n    priority   = optional(number)\r\n    status     = optional(string)\r\n    depends_on = optional(string)\r\n  }))\r\n  description = \"Zone's page rules.\"\r\n  default     = []\r\n}\r\n\r\n//noinspection HILUnresolvedReference\r\nlocals {\r\n  page_rule_dependencies = { for p in var.page_rules : p.page_rule_name => p.depends_on if p.depends_on != null }\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone\r\nresource \"cloudflare_zone\" \"this\" {\r\n  zone = var.zone\r\n}\r\n\r\n# https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule\r\n//noinspection HILUnresolvedReference\r\nresource \"cloudflare_page_rule\" \"this\" {\r\n  for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {}\r\n\r\n  zone_id = cloudflare_zone.this.id\r\n\r\n  target = each.value.target\r\n  actions {\r\n    //noinspection HILUnresolvedReference\r\n    forwarding_url {\r\n      status_code = each.value.actions.forwarding_url.status_code\r\n      url         = each.value.actions.forwarding_url.url\r\n    }\r\n  }\r\n  priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority\r\n  status = each.value.status\r\n}\r\n\r\noutput \"page_rule_dependencies\" {\r\n  value = local.page_rule_dependencies\r\n}\r\n```\r\n\r\nAnd a configuration that is used to create resources:\r\n\r\n```hcl\r\nterraform {\r\n  required_version = \">= 0.15.0\"\r\n\r\n  required_providers {\r\n    cloudflare = {\r\n      source  = \"cloudflare/cloudflare\"\r\n      version = \">= 3.10.1\"\r\n    }\r\n  }\r\n}\r\n\r\nvariable \"cloudflare_api_token\" {\r\n  type      = string\r\n  sensitive = true\r\n}\r\n\r\nprovider \"cloudflare\" {\r\n  api_token = var.cloudflare_api_token\r\n}\r\n\r\nmodule \"acme_com\" {\r\n  source = \"./module\"\r\n  zone   = \"acme.com\"\r\n  page_rules = [\r\n    {\r\n      page_rule_name = \"page_rule_1\"\r\n      target         = \"acme.com/url1\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url1\"\r\n        }\r\n      }\r\n      priority = 1\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_2\"\r\n      target         = \"acme.com/url2\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url2\"\r\n        }\r\n      }\r\n      priority   = 2\r\n      depends_on = \"page_rule_1\"\r\n    },\r\n    {\r\n      page_rule_name = \"page_rule_3\"\r\n      target         = \"acme.com/url3\"\r\n      actions = {\r\n        forwarding_url = {\r\n          status_code = 301\r\n          url         = \"https://www.example.com/url3\"\r\n        }\r\n      }\r\n      priority   = 3\r\n      depends_on = \"page_rule_2\"\r\n    }\r\n  ]\r\n}\r\n\r\noutput \"page_rule_dependencies\" {\r\n  value = module.acme_com.page_rule_dependencies\r\n}\r\n```\r\n\r\nIn this particular example, I've added the `depends_on` argument to the `page_rules` variable (don't confuse this argument with the `depends_on` *meta argument*). For the value of the `depends_on` argument, I specified the name of a `page_fule` on which another `page_fule` depends.\r\n\r\nNext, I created a local variable `page_rule_dependencies`, the value of which, after calculations, is the following (you can check this yourself by replacing the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct with `priority = each.value.priority` and executing `terraform apply`):\r\n\r\n```hcl\r\npage_rule_dependencies = {\r\n  \"page_rule_2\" = \"page_rule_1\"\r\n  \"page_rule_3\" = \"page_rule_2\"\r\n}\r\n```\r\n\r\nFurther, in the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct, I refer to the values \u200b\u200bof the local variable, thereby forming a \"reference\" to the `page_fule` instance, on which the current instance depends:\r\n\r\n1. When creating `page_rule_1`, the value of its argument `priority` = `1`.\r\n2. When creating `page_rule_2`, the value of its argument `priority` = `cloudflare_page_rule.this[\"page_rule_1\"].priority + 1`.\r\n3. When creating `page_rule_3`, the value of its argument `priority` = `cloudflare_page_rule.this[\"page_rule_2\"].priority + 1`.\r\n\r\nHowever, I get an `Error: Cycle: module.acme_com.cloudflare_page_rule.this[\"page_rule_3\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_2\"], module.acme_com.cloudflare_page_rule.this[\"page_rule_1\"]` error.\r\n\r\nEither I'm doing something wrong, or it's some kind of Terraform limitation/bug. Is there a way to get rid of this error?\r\n\r\nP.S. Resulting graph after `terraform graph -draw-cycles | dot -Tsvg > graph.svg` or `terraform graph -draw-cycles -type=plan | dot -Tsvg > graph-plan.svg` (the same result):\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/eXGad.png\r\n\r\nP.P.S. I use Terraform v1.1.7.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the `depends_on` argument or refer from one resource (instance) to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "For this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in an instance it creates \"calculated\" based on the values of the same argument from another instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Let's take a test module that instantiates the `cloudflare_page_rule` resource: ```hcl # Module is placed to module\\main.tf terraform { experiments = [module_variable_optional_attrs] } terraform { required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.0\" } } } variable \"zone\" { type = string description = \"The DNS zone name which will be added, e.g. example.com.\" } variable \"page_rules\" { type = list(object({ page_rule_name = string target = string actions = object({ forwarding_url = optional(object({ url = string status_code = number })) }) priority = optional(number) status = optional(string) depends_on = optional(string) })) description = \"Zone's page rules.\" default = [] } //noinspection HILUnresolvedReference locals { page_rule_dependencies = { for p in var.page_rules : p.page_rule_name => p.depends_on if p.depends_on != null } } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/zone resource \"cloudflare_zone\" \"this\" { zone = var.zone } # https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs/resources/page_rule //noinspection HILUnresolvedReference resource \"cloudflare_page_rule\" \"this\" { for_each = var.page_rules != null ? { for p in var.page_rules : p.page_rule_name => p } : {} zone_id = cloudflare_zone.this.id target = each.value.target actions { //noinspection HILUnresolvedReference forwarding_url { status_code = each.value.actions.forwarding_url.status_code url = each.value.actions.forwarding_url.url } } priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority status = each.value.status } output \"page_rule_dependencies\" { value = local.page_rule_dependencies } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "And a configuration that is used to create resources: ```hcl terraform { required_version = \">= 0.15.0\" required_providers { cloudflare = { source = \"cloudflare/cloudflare\" version = \">= 3.10.1\" } } } variable \"cloudflare_api_token\" { type = string sensitive = true } provider \"cloudflare\" { api_token = var.cloudflare_api_token } module \"acme_com\" { source = \"./module\" zone = \"acme.com\" page_rules = [ { page_rule_name = \"page_rule_1\" target = \"acme.com/url1\" actions = { forwarding_url = { status_code = 301 url = \"https://www", "keywords": ["provider"]}, {"source": "Text", "text": "Next, I created a local variable `page_rule_dependencies`, the value of which, after calculations, is the following (you can check this yourself by replacing the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct with `priority = each.value.priority` and executing `terraform apply`): ```hcl page_rule_dependencies = { \"page_rule_2\" = \"page_rule_1\" \"page_rule_3\" = \"page_rule_2\" } ``` Further, in the `priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority` construct, I refer to the values \u200b\u200bof the local variable, thereby forming a \"reference\" to the `page_fule` instance, on which the current instance depends: 1. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "How to reference instance argument value created with for_each meta-argument in another instance in the same map", "keywords": ["instance"]}, {"source": "Body", "text": "HCL is known to be a declarative language and when Terraform applies a configuration it can create resources randomly unless you use the depends_on argument or refer from one resource (instance) to another. ", "keywords": ["instance"]}, {"source": "Body", "text": "For this reason, in order to force Terraform to create instances of a resource in a specific sequence, I decided to try to make the value of a certain argument in an instance it creates \"calculated\" based on the values of the same argument from another instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "Let's take a test module that instantiates the cloudflare_page_rule resource: And a configuration that is used to create resources: In this particular example, I've added the depends_on argument to the page_rules variable (don't confuse this argument with the depends_on meta argument). ", "keywords": ["test"]}, {"source": "Body", "text": "Next, I created a local variable page_rule_dependencies, the value of which, after calculations, is the following (you can check this yourself by replacing the priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority construct with priority = each.value.priority and executing terraform apply): Further, in the priority = each.value.depends_on != null ? cloudflare_page_rule.this[local.page_rule_dependencies[each.key]].priority + 1 : each.value.priority construct, I refer to the values \u200b\u200bof the local variable, thereby forming a \"reference\" to the page_fule instance, on which the current instance depends: When creating page_rule_1, the value of its argument priority = 1. ", "keywords": ["instance"]}]}