{"Id": "67351770", "PostTypeId": "1", "AcceptedAnswerId": "68049561", "CreationDate": "2021-05-01T23:38:38.747", "Score": "0", "ViewCount": "773", "Body": "<p>I am trying to update an IAM Role and it's attached policy with Terraform through GitLab-CI. My terraform code looks like below:-</p>\n<pre><code>data &quot;aws_iam_policy_document&quot; &quot;billing-roles&quot; {\n  statement {\n      effect = &quot;Allow&quot;\n      principals {\n          type = &quot;Federated&quot;\n          identifiers = [&quot;${var.samlprovider_arn}&quot;]\n      }\n      actions = [&quot;sts:AssumeRoleWithSAML&quot;]\n      condition {\n        test = &quot;StringEquals&quot;\n        variable =&quot;SAML:aud&quot;\n        values = [&quot;https://signin.aws.amazon.com/saml&quot;]\n       }\n    }\n}\n\nresource &quot;aws_iam_role&quot; &quot;billing_role&quot; {\n  name               = &quot;billing-role&quot;\n  permissions_boundary = &quot;${var.permissions_boundary_arn}&quot;\n  assume_role_policy = &quot;${data.aws_iam_policy_document.billing-roles.json}&quot;\n  tags =  {\n      Applicatio_ID = &quot;${var.app_id}&quot;\n      Environment = &quot;${var.environment}&quot;\n      Name = &quot;billing-role&quot;\n      Owner = &quot;Terraform&quot;\n  }\n}\n\n\nresource &quot;aws_iam_policy&quot; &quot;billing_policy&quot; {\n  name  = &quot;billing-policy&quot;\n  policy= &quot;${file(&quot;${path.module}/policies/billing-role-policy.json&quot;)}&quot;\n}\n\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;billing_attachment&quot; {\n  role  = aws_iam_role.billing_role.name\n  policy_arn = aws_iam_policy.billing_policy.arn\n}\n</code></pre>\n<p>I am running various phases of terraform(INIT, PLAN, APPLY) through GitLab-CI. This works the first time but fails with EntityAlreadyExists error.\nThe .gitlab-ci.yml looks like this:-</p>\n<pre><code>include:\n  - project: 'infrastructure/infrastructure-code-cicd-files'\n    ref: master\n    file: '.for_terraform_iam.yml'\n\nstages:\n  - init\n  - plan\n  - apply\n\ntf_init:\n  extends: .tf_init\n  tags:\n    - integration\n  stage: init\n  variables:\n    ACCOUNT: &quot;ACCOUNT_ID&quot;\n    ASSUME_ROLE: &quot;arn:aws:iam::ACCOUNT_ID:role/devops-cross-account&quot;\n    backend_bucket_name: &quot;iam-role-backend-${ACCOUNT}&quot;\n    tfstate_file: &quot;iam-role/terraform.tfstate&quot;\n\ntf_plan:\n  extends: .tf_plan\n  variables:\n    ASSUME_ROLE: &quot;arn:aws:iam::ACCOUNT_ID:role/devops-cross-account&quot;\n  tags:\n    - integration\n  stage: plan\n\n\ntf_apply:\n  extends: .tf_apply\n  variables:\n    ASSUME_ROLE: &quot;arn:aws:iam::ACCOUNT_ID:role/devops-cross-account&quot;\n  tags:\n    - integration\n  stage: apply\n</code></pre>\n<p>This gitlab-ci configuration includes a utility file which has all the terraform logic for Init, Plan and Apply.</p>\n<p>I am running the setup on Terraform 0.12.13.\nTerraform import though successful in importing the resources does not help here as terraform complains about &quot;EntityAlreadyExists&quot;\nTerraform taint does not work dues to a bug in the terraform version that I am using here.</p>\n<p>I want a workflow where IAM Role once created, its attached inline policy can be updated by an Ops Engineer and an approver will approve the merge request and that way the IAM role will have added services as desired by the Ops engineer.</p>\n<p>Is there a way we can update the IAM policy here. I understand that updating an IAM role would require detaching the policies first and then attach the new policies to it.</p>\n<p>Please help</p>\n", "OwnerUserId": "4093755", "LastActivityDate": "2021-06-19T18:07:28.140", "Title": "update aws_iam_policy with terraform in GitLab-CI fails with EntityAlreadyExists error", "Tags": "<amazon-web-services><terraform><gitlab-ci><terraform-provider-aws><terraform0.12+>", "AnswerCount": "1", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "119048513", "PostId": "67351770", "Score": "0", "Text": "Why do you want to keep re-creating role `billing-role` all the time?", "CreationDate": "2021-05-02T01:36:02.203", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Why do you want to keep re-creating role `billing-role` all the time?", "keywords": ["bill"]}]}, {"Id": "119050753", "PostId": "67351770", "Score": "0", "Text": "The billing_role was an example. There are other roles which needs to be updated for instance, we've given a role a policy that allow \"ec2:createinstances\" but in future we want to update this role with a policy that allows \"ec2:deleteinstances\" as well. would this be possible.", "CreationDate": "2021-05-02T07:01:25.510", "UserId": "4093755", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The billing_role was an example. ", "keywords": ["bill"]}, {"source": "Text", "text": "There are other roles which needs to be updated for instance, we've given a role a policy that allow \"ec2:createinstances\" but in future we want to update this role with a policy that allows \"ec2:deleteinstances\" as well. would this be possible.", "keywords": ["instance", "policy"]}]}, {"Id": "119051176", "PostId": "67351770", "Score": "0", "Text": "Where do you keep your TF state file? I guess its remote one?", "CreationDate": "2021-05-02T07:40:22.760", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119057413", "PostId": "67351770", "Score": "0", "Text": "yes it's kept in s3 backend. Thanks", "CreationDate": "2021-05-02T14:53:48.840", "UserId": "4093755", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "245797106", "PostHistoryTypeId": "2", "PostId": "67351770", "RevisionGUID": "1d46ad24-621e-40b9-a095-8ac97f03e45f", "CreationDate": "2021-05-01T23:38:38.747", "UserId": "4093755", "Text": "I am trying to update an IAM Role and it's attached policy with Terraform through GitLab-CI. My terraform code looks like below:-\r\n\r\n```\r\ndata \"aws_iam_policy_document\" \"billing-roles\" {\r\n  statement {\r\n      effect = \"Allow\"\r\n      principals {\r\n          type = \"Federated\"\r\n          identifiers = [\"${var.samlprovider_arn}\"]\r\n      }\r\n      actions = [\"sts:AssumeRoleWithSAML\"]\r\n      condition {\r\n        test = \"StringEquals\"\r\n        variable =\"SAML:aud\"\r\n        values = [\"https://signin.aws.amazon.com/saml\"]\r\n       }\r\n    }\r\n}\r\n\r\nresource \"aws_iam_role\" \"billing_role\" {\r\n  name               = \"billing-role\"\r\n  permissions_boundary = \"${var.permissions_boundary_arn}\"\r\n  assume_role_policy = \"${data.aws_iam_policy_document.billing-roles.json}\"\r\n  tags =  {\r\n      Applicatio_ID = \"${var.app_id}\"\r\n      Environment = \"${var.environment}\"\r\n      Name = \"billing-role\"\r\n      Owner = \"Terraform\"\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_iam_policy\" \"billing_policy\" {\r\n  name  = \"billing-policy\"\r\n  policy= \"${file(\"${path.module}/policies/billing-role-policy.json\")}\"\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"billing_attachment\" {\r\n  role  = aws_iam_role.billing_role.name\r\n  policy_arn = aws_iam_policy.billing_policy.arn\r\n}\r\n```\r\nI am running various phases of terraform(INIT, PLAN, APPLY) through GitLab-CI. This works the first time but fails with EntityAlreadyExists error.\r\nThe .gitlab-ci.yml looks like this:-\r\n```\r\ninclude:\r\n  - project: 'infrastructure/infrastructure-code-cicd-files'\r\n    ref: master\r\n    file: '.for_terraform_iam.yml'\r\n\r\nstages:\r\n  - init\r\n  - plan\r\n  - apply\r\n\r\ntf_init:\r\n  extends: .tf_init\r\n  tags:\r\n    - integration\r\n  stage: init\r\n  variables:\r\n    ACCOUNT: \"ACCOUNT_ID\"\r\n    ASSUME_ROLE: \"arn:aws:iam::ACCOUNT_ID:role/devops-cross-account\"\r\n    backend_bucket_name: \"iam-role-backend-${ACCOUNT}\"\r\n    tfstate_file: \"iam-role/terraform.tfstate\"\r\n\r\ntf_plan:\r\n  extends: .tf_plan\r\n  variables:\r\n    ASSUME_ROLE: \"arn:aws:iam::ACCOUNT_ID:role/devops-cross-account\"\r\n  tags:\r\n    - integration\r\n  stage: plan\r\n\r\n\r\ntf_apply:\r\n  extends: .tf_apply\r\n  variables:\r\n    ASSUME_ROLE: \"arn:aws:iam::ACCOUNT_ID:role/devops-cross-account\"\r\n  tags:\r\n    - integration\r\n  stage: apply\r\n```\r\nThis gitlab-ci configuration includes a utility file which has all the terraform logic for Init, Plan and Apply.\r\n\r\nI am running the setup on Terraform 0.12.13.\r\nTerraform import though successful in importing the resources does not help here as terraform complains about \"EntityAlreadyExists\"\r\nTerraform taint does not work dues to a bug in the terraform version that I am using here.\r\n\r\nI want a workflow where IAM Role once created, its attached inline policy can be updated by an Ops Engineer and an approver will approve the merge request and that way the IAM role will have added services as desired by the Ops engineer.\r\n\r\nIs there a way we can update the IAM policy here. I understand that updating an IAM role would require detaching the policies first and then attach the new policies to it.\r\n\r\nPlease help\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am trying to update an IAM Role and it's attached policy with Terraform through GitLab-CI. ", "keywords": ["policy"]}, {"source": "Text", "text": "My terraform code looks like below:- ``` data \"aws_iam_policy_document\" \"billing-roles\" { statement { effect = \"Allow\" principals { type = \"Federated\" identifiers = [\"${var.samlprovider_arn}\"] } actions = [\"sts:AssumeRoleWithSAML\"] condition { test = \"StringEquals\" variable =\"SAML:aud\" values = [\"https://signin.aws.amazon.com/saml\"] } } } resource \"aws_iam_role\" \"billing_role\" { name = \"billing-role\" permissions_boundary = \"${var.permissions_boundary_arn}\" assume_role_policy = \"${data.aws_iam_policy_document.billing-roles.json}\" tags = { Applicatio_ID = \"${var.app_id}\" Environment = \"${var.environment}\" Name = \"billing-role\" Owner = \"Terraform\" } } resource \"aws_iam_policy\" \"billing_policy\" { name = \"billing-policy\" policy= \"${file(\"${path.module}/policies/billing-role-policy.json\")}\" } resource \"aws_iam_role_policy_attachment\" \"billing_attachment\" { role = aws_iam_role.billing_role.name policy_arn = aws_iam_policy.billing_policy.arn } ``` ", "keywords": ["bill", "policy", "test"]}, {"source": "Text", "text": "I want a workflow where IAM Role once created, its attached inline policy can be updated by an Ops Engineer and an approver will approve the merge request and that way the IAM role will have added services as desired by the Ops engineer. ", "keywords": ["policy"]}, {"source": "Text", "text": "Is there a way we can update the IAM policy here. ", "keywords": ["policy"]}]}, {"Id": "245797107", "PostHistoryTypeId": "1", "PostId": "67351770", "RevisionGUID": "1d46ad24-621e-40b9-a095-8ac97f03e45f", "CreationDate": "2021-05-01T23:38:38.747", "UserId": "4093755", "Text": "update aws_iam_policy with terraform in GitLab-CI fails with EntityAlreadyExists error", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "245797108", "PostHistoryTypeId": "3", "PostId": "67351770", "RevisionGUID": "1d46ad24-621e-40b9-a095-8ac97f03e45f", "CreationDate": "2021-05-01T23:38:38.747", "UserId": "4093755", "Text": "<amazon-web-services><terraform><gitlab-ci><terraform-provider-aws><terraform0.12+>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "68049561", "PostTypeId": "2", "ParentId": "67351770", "CreationDate": "2021-06-19T18:07:28.140", "Score": "0", "Body": "<p>The issue was with passing terraform.tfstate file into plan stage which I had missed. We run an &quot;aws s3 cp s3://backend-bucket/keys .&quot; to get the statefile and this has solved the problem.</p>\n", "OwnerUserId": "4093755", "LastActivityDate": "2021-06-19T18:07:28.140", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "248790077", "PostHistoryTypeId": "2", "PostId": "68049561", "RevisionGUID": "725f50f4-52f8-42c4-9596-6077911972c2", "CreationDate": "2021-06-19T18:07:28.140", "UserId": "4093755", "Text": "The issue was with passing terraform.tfstate file into plan stage which I had missed. We run an \"aws s3 cp s3://backend-bucket/keys .\" to get the statefile and this has solved the problem.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I am trying to update an IAM Role and it's attached policy with Terraform through GitLab-CI. ", "keywords": ["policy"]}, {"source": "Body", "text": "I want a workflow where IAM Role once created, its attached inline policy can be updated by an Ops Engineer and an approver will approve the merge request and that way the IAM role will have added services as desired by the Ops engineer. ", "keywords": ["policy"]}, {"source": "Body", "text": "Is there a way we can update the IAM policy here. ", "keywords": ["policy"]}]}