{"Id": "35305245", "PostTypeId": "1", "AcceptedAnswerId": "35305319", "CreationDate": "2016-02-10T01:16:59.473", "Score": "3", "ViewCount": "3142", "Body": "<p>Is it possible to programmatically get/deploy and start an EC2 instance? Essentially pick your instance type, AMI and start it up? </p>\n\n<p>I see the <code>StartInstance</code> method but this only applies to instances already create and stopped in your account.</p>\n\n<p><a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_StartInstances.html\" rel=\"nofollow\">http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_StartInstances.html</a></p>\n\n<p>Essentially, what is going on is that I have an automated service that needs multiple EC2 instances for computation. I need to programmatically create a new instance, pick the instance type, pick the AMI, start it up and run some deployment scripts to get things rolling.</p>\n\n<p>I would think there is a way to do this with the AWS SDK but I'm just not seeing it.</p>\n\n<p>On a related note, also need to be able to programmatically destroy a shutdown instance.</p>\n", "OwnerUserId": "172350", "LastEditorUserId": "498256", "LastEditDate": "2017-10-19T09:08:13.103", "LastActivityDate": "2017-10-19T09:10:03.500", "Title": "Programmatically create and deploy On-Demand EC2", "Tags": "<amazon-web-services><amazon-ec2><aws-cloudformation><terraform>", "AnswerCount": "3", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "110470663", "PostHistoryTypeId": "2", "PostId": "35305245", "RevisionGUID": "fba7b692-dc91-4d61-9799-28e171430ca8", "CreationDate": "2016-02-10T01:16:59.473", "UserId": "172350", "Text": "Is it possible to programmatically get/deploy and start an EC2 instance? Essentially pick your instance type, AMI and start it up? \r\n\r\nI see the `StartInstance` method but this only applies to instances already create and stopped in your account.\r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_StartInstances.html\r\n\r\nEssentially, what is going on is that I have an automated service that needs multiple EC2 instances for computation. I need to programmatically create a new instance, pick the instance type, pick the AMI, start it up and run some deployment scripts to get things rolling.\r\n\r\nI would think there is a way to do this with the AWS SDK but I'm just not seeing it.\r\n\r\nOn a related note, also need to be able to programmatically destroy a shutdown instance.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Is it possible to programmatically get/deploy and start an EC2 instance? ", "keywords": ["instance"]}, {"source": "Text", "text": "Essentially pick your instance type, AMI and start it up? ", "keywords": ["instance"]}, {"source": "Text", "text": "I need to programmatically create a new instance, pick the instance type, pick the AMI, start it up and run some deployment scripts to get things rolling. ", "keywords": ["instance"]}, {"source": "Text", "text": "On a related note, also need to be able to programmatically destroy a shutdown instance.", "keywords": ["instance"]}]}, {"Id": "110470664", "PostHistoryTypeId": "1", "PostId": "35305245", "RevisionGUID": "fba7b692-dc91-4d61-9799-28e171430ca8", "CreationDate": "2016-02-10T01:16:59.473", "UserId": "172350", "Text": "Programmatically create and deploy On-Demand EC2", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "110470665", "PostHistoryTypeId": "3", "PostId": "35305245", "RevisionGUID": "fba7b692-dc91-4d61-9799-28e171430ca8", "CreationDate": "2016-02-10T01:16:59.473", "UserId": "172350", "Text": "<amazon-web-services><amazon-ec2>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "158670258", "PostHistoryTypeId": "6", "PostId": "35305245", "RevisionGUID": "b7c3b8bd-acdc-4a8e-95ae-9d71d63b3af9", "CreationDate": "2017-10-19T09:08:13.103", "UserId": "498256", "Comment": "edited tags", "Text": "<amazon-web-services><amazon-ec2><aws-cloudformation><terraform>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "35305528", "PostTypeId": "2", "ParentId": "35305245", "CreationDate": "2016-02-10T01:48:39.727", "Score": "3", "Body": "<p>You can write SDK scripts to do the job (create, change and destroy ec2 instances), depend on which language you mastered, such as javascript, java, ruby, python, etc. </p>\n\n<p>But there are easier way to follow up, we call it <a href=\"https://en.wikipedia.org/wiki/Infrastructure_as_Code\" rel=\"nofollow noreferrer\">infrastructure as code</a>, try aws <code>cloudformation</code> or Hashicopy's <code>terraform</code></p>\n\n<p>With their templates, you can deploy the whole infrastructure (include ec2, rds, vpc, security groups, subnet, etc) as minutes job.</p>\n\n<p>refer: </p>\n\n<p><a href=\"https://aws.amazon.com/cloudformation/aws-cloudformation-templates/\" rel=\"nofollow noreferrer\">AWS CloudFormation templates</a></p>\n\n<p><a href=\"https://www.terraform.io/docs/providers/aws/index.html\" rel=\"nofollow noreferrer\">Terraform AWS PROVIDER</a></p>\n", "OwnerUserId": "498256", "LastEditorUserId": "498256", "LastEditDate": "2017-10-19T09:10:03.500", "LastActivityDate": "2017-10-19T09:10:03.500", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "58353183", "PostId": "35305528", "Score": "0", "Text": "+1 for the CloudFormation service. I never knew that existed. I will need to see if it fits our needs or not, as all we really need to do is boot up an particular AMI and run some scripts. Thanks!", "CreationDate": "2016-02-10T17:42:31.403", "UserId": "172350", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "80141970", "PostId": "35305528", "Score": "0", "Text": "@JakeWilson What did you end up doing? How did it work out?", "CreationDate": "2017-10-05T20:43:59.027", "UserId": "122630", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "110471760", "PostHistoryTypeId": "2", "PostId": "35305528", "RevisionGUID": "46425cb4-0fa4-4faa-b707-422b20657b60", "CreationDate": "2016-02-10T01:48:39.727", "UserId": "498256", "Text": "You can write SDK scripts to do the job (create, change and destroy ec2 instances), depend on which language you mastered, such as java, ruby, python, etc. \r\n\r\nBut there are easier way to follow up, try aws `cloudformation` or Hashicopy's `terraform`\r\n\r\nWith their templates, you can deploy the whole infrastructure (include ec2, rds, vpc, security groups, subnet, etc) as minutes job.\r\n\r\nrefer: \r\n\r\n[AWS CloudFormation templates][1]\r\n\r\n[Terraform AWS PROVIDER][2]\r\n\r\n\r\n  [1]: https://aws.amazon.com/cloudformation/aws-cloudformation-templates/\r\n  [2]: https://www.terraform.io/docs/providers/aws/index.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You can write SDK scripts to do the job (create, change and destroy ec2 instances), depend on which language you mastered, such as java, ruby, python, etc. ", "keywords": ["change"]}, {"source": "Text", "text": "With their templates, you can deploy the whole infrastructure (include ec2, rds, vpc, security groups, subnet, etc) as minutes job. refer: [AWS CloudFormation templates][1] [Terraform AWS PROVIDER][2] [1]: https://aws.amazon.com/cloudformation/aws-cloudformation-templates/ [2]: https://www.terraform.io/docs/providers/aws/index.html", "keywords": ["provider"]}]}, {"Id": "110554432", "PostHistoryTypeId": "5", "PostId": "35305528", "RevisionGUID": "1de7695d-a482-4a1e-a91d-f79087dc9500", "CreationDate": "2016-02-10T22:04:55.443", "UserId": "498256", "Comment": "added 9 characters in body", "Text": "You can write SDK scripts to do the job (create, change and destroy ec2 instances), depend on which language you mastered, such as aws cli, java, ruby, python, etc. \r\n\r\nBut there are easier way to follow up, try aws `cloudformation` or Hashicopy's `terraform`\r\n\r\nWith their templates, you can deploy the whole infrastructure (include ec2, rds, vpc, security groups, subnet, etc) as minutes job.\r\n\r\nrefer: \r\n\r\n[AWS CloudFormation templates][1]\r\n\r\n[Terraform AWS PROVIDER][2]\r\n\r\n\r\n  [1]: https://aws.amazon.com/cloudformation/aws-cloudformation-templates/\r\n  [2]: https://www.terraform.io/docs/providers/aws/index.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You can write SDK scripts to do the job (create, change and destroy ec2 instances), depend on which language you mastered, such as aws cli, java, ruby, python, etc. ", "keywords": ["change"]}, {"source": "Text", "text": "refer: [AWS CloudFormation templates][1] [Terraform AWS PROVIDER][2] [1]: https://aws.amazon.com/cloudformation/aws-cloudformation-templates/ [2]: https://www.terraform.io/docs/providers/aws/index.html", "keywords": ["provider"]}]}, {"Id": "158670438", "PostHistoryTypeId": "5", "PostId": "35305528", "RevisionGUID": "5ba0da60-d91c-4e41-b2f8-0abc62866c60", "CreationDate": "2017-10-19T09:10:03.500", "UserId": "498256", "Comment": "added 104 characters in body", "Text": "You can write SDK scripts to do the job (create, change and destroy ec2 instances), depend on which language you mastered, such as javascript, java, ruby, python, etc. \r\n\r\nBut there are easier way to follow up, we call it [infrastructure as code][1], try aws `cloudformation` or Hashicopy's `terraform`\r\n\r\nWith their templates, you can deploy the whole infrastructure (include ec2, rds, vpc, security groups, subnet, etc) as minutes job.\r\n\r\nrefer: \r\n\r\n[AWS CloudFormation templates][2]\r\n\r\n[Terraform AWS PROVIDER][3]\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Infrastructure_as_Code\r\n  [2]: https://aws.amazon.com/cloudformation/aws-cloudformation-templates/\r\n  [3]: https://www.terraform.io/docs/providers/aws/index.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You can write SDK scripts to do the job (create, change and destroy ec2 instances), depend on which language you mastered, such as javascript, java, ruby, python, etc. ", "keywords": ["change"]}, {"source": "Text", "text": "With their templates, you can deploy the whole infrastructure (include ec2, rds, vpc, security groups, subnet, etc) as minutes job. refer: [AWS CloudFormation templates][2] [Terraform AWS PROVIDER][3] [1]: https://en.wikipedia.org/wiki/Infrastructure_as_Code [2]: https://aws.amazon.com/cloudformation/aws-cloudformation-templates/ [3]: https://www.terraform.io/docs/providers/aws/index.html", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can write SDK scripts to do the job (create, change and destroy ec2 instances), depend on which language you mastered, such as javascript, java, ruby, python, etc. ", "keywords": ["change"]}, {"source": "Body", "text": "refer: AWS CloudFormation templates Terraform AWS PROVIDER", "keywords": ["provider"]}]}, {"Id": "35359555", "PostTypeId": "2", "ParentId": "35305245", "CreationDate": "2016-02-12T09:56:52.597", "Score": "1", "Body": "<p>you can try this..</p>\n\n<pre><code>   AmazonEC2Client amazonEc2client = GetAmazonClient(ConfigurationManager.AppSettings[\"AwsRegionEndPint\"]);\n     var launchRequest = new RunInstancesRequest()\n                    {\n                        ImageId = YOUR IMAGE ID,\n                        InstanceType = YOUR INSTANCE TYPE,\n                        MinCount = 1,\n                        MaxCount = 1,\n                        KeyName = your keyPairName,\n                        SecurityGroupIds =your  groups,\n                        SubnetId = your subnet Id,\n\n                    };\n                    RunInstancesResponse runInstancesResponse = amazonEc2client.RunInstances(launchRequest);\n</code></pre>\n\n<p>//code For assign Tag name</p>\n\n<pre><code>var InstanceId = runInstancesResponse.Reservation.Instances[0].InstanceId;\n                var trequest = new CreateTagsRequest();\n                trequest.Resources=new List&lt;string&gt;(){InstanceId};\n                List&lt;Tag&gt; tags=new List&lt;Tag&gt;();\n                Tag tag=new Tag(\"Name\",\"TestCodeFinal\");\n                tags.Add(tag);\n                trequest.Tags = tags;\n                amazonEc2client.CreateTags(trequest);\n                Reservation reservation = runInstancesResponse.Reservation;\n</code></pre>\n", "OwnerUserId": "3592685", "LastActivityDate": "2016-02-12T09:56:52.597", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "110681096", "PostHistoryTypeId": "2", "PostId": "35359555", "RevisionGUID": "57fdfaf3-8909-49c7-8d07-edcc55538ab0", "CreationDate": "2016-02-12T09:56:52.597", "UserId": "3592685", "Text": "you can try this..\r\n\r\n \r\n\r\n       AmazonEC2Client amazonEc2client = GetAmazonClient(ConfigurationManager.AppSettings[\"AwsRegionEndPint\"]);\r\n         var launchRequest = new RunInstancesRequest()\r\n                        {\r\n                            ImageId = YOUR IMAGE ID,\r\n                            InstanceType = YOUR INSTANCE TYPE,\r\n                            MinCount = 1,\r\n                            MaxCount = 1,\r\n                            KeyName = your keyPairName,\r\n                            SecurityGroupIds =your  groups,\r\n                            SubnetId = your subnet Id,\r\n                            \r\n                        };\r\n                        RunInstancesResponse runInstancesResponse = amazonEc2client.RunInstances(launchRequest);\r\n\r\n\r\n//code For assign Tag name\r\n\r\n                \r\n\r\n    var InstanceId = runInstancesResponse.Reservation.Instances[0].InstanceId;\r\n                    var trequest = new CreateTagsRequest();\r\n                    trequest.Resources=new List<string>(){InstanceId};\r\n                    List<Tag> tags=new List<Tag>();\r\n                    Tag tag=new Tag(\"Name\",\"TestCodeFinal\");\r\n                    tags.Add(tag);\r\n                    trequest.Tags = tags;\r\n                    amazonEc2client.CreateTags(trequest);\r\n                    Reservation reservation = runInstancesResponse.Reservation;", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "you can try this.. AmazonEC2Client amazonEc2client = GetAmazonClient(ConfigurationManager.AppSettings[\"AwsRegionEndPint\"]); var launchRequest = new RunInstancesRequest() { ImageId = YOUR IMAGE ID, InstanceType = YOUR INSTANCE TYPE, MinCount = 1, MaxCount = 1, KeyName = your keyPairName, SecurityGroupIds =your groups, SubnetId = your subnet Id, }; RunInstancesResponse runInstancesResponse = amazonEc2client.RunInstances(launchRequest); //code For assign Tag name var InstanceId = runInstancesResponse.Reservation.Instances[0].InstanceId; var trequest = new CreateTagsRequest(); trequest.Resources=new List(){InstanceId}; List tags=new List(); Tag tag=new Tag(\"Name\",\"TestCodeFinal\"); tags.Add(tag); trequest.Tags = tags; amazonEc2client.CreateTags(trequest); Reservation reservation = runInstancesResponse.Reservation;", "keywords": ["instance", "test"]}]}], "filtered-sentences": []}, {"Id": "35305319", "PostTypeId": "2", "ParentId": "35305245", "CreationDate": "2016-02-10T01:25:54.373", "Score": "7", "Body": "<p>Yes, it's possible.</p>\n\n<p>You use the <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html\" rel=\"noreferrer\">RunInstances</a> API method.</p>\n\n<blockquote>\n  <p>Launches the specified number of instances using an AMI for which you have permissions.</p>\n</blockquote>\n\n<p>To completely get rid of an instance, use <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html\" rel=\"noreferrer\">TerminateInstance</a>.</p>\n\n<blockquote>\n  <p>Shuts down one or more instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds.</p>\n</blockquote>\n\n<p>The language is a bit confusing because it says \"Shuts down one or more instances\", but in fact it totally removes them.</p>\n", "OwnerUserId": "141172", "LastEditorUserId": "141172", "LastEditDate": "2016-02-10T01:27:31.813", "LastActivityDate": "2016-02-10T01:27:31.813", "CommentCount": "3", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "58320944", "PostId": "35305319", "Score": "0", "Text": "Thanks, how is this different than `RequestSpotInstances` ?", "CreationDate": "2016-02-10T01:26:51.487", "UserId": "172350", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "58320991", "PostId": "35305319", "Score": "0", "Text": "RequestSpotInstance allows you to place a bid for an available instance at the current spot market price. This will succeed if your bid is at least equal to the market price. Such instances can be shut down without notice if the current market price later exceeds what you are willing to pay. The spot market is often used for CPU (or GPU) intensive tasks where many instances are needed as cheap as possible, work is divided between all available instances, and the architecture can withstand some instances just going away.", "CreationDate": "2016-02-10T01:29:19.207", "UserId": "141172", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "RequestSpotInstance allows you to place a bid for an available instance at the current spot market price. ", "keywords": ["instance"]}, {"source": "Text", "text": "Such instances can be shut down without notice if the current market price later exceeds what you are willing to pay. ", "keywords": ["pay"]}, {"source": "Text", "text": "The spot market is often used for CPU (or GPU) intensive tasks where many instances are needed as cheap as possible, work is divided between all available instances, and the architecture can withstand some instances just going away.", "keywords": ["cheap", "cpu"]}]}, {"Id": "58353010", "PostId": "35305319", "Score": "0", "Text": "Okay, so `RunInstances` is intended to fire up On-Demand instances at the current AWS price per hour? If so, that is what I am looking for, thank you.", "CreationDate": "2016-02-10T17:38:32.470", "UserId": "172350", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "110470955", "PostHistoryTypeId": "2", "PostId": "35305319", "RevisionGUID": "e7d33fba-c9b6-4d11-8d86-dfebd55ff127", "CreationDate": "2016-02-10T01:25:54.373", "UserId": "141172", "Text": "Yes, it's possible.\r\n\r\nYou use the [RunInstances][1] API method.\r\n\r\n> Launches the specified number of instances using an AMI for which you have permissions.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "110471022", "PostHistoryTypeId": "5", "PostId": "35305319", "RevisionGUID": "6eb96450-269d-406b-863f-964b16e22de6", "CreationDate": "2016-02-10T01:27:31.813", "UserId": "141172", "Comment": "added 417 characters in body", "Text": "Yes, it's possible.\r\n\r\nYou use the [RunInstances][1] API method.\r\n\r\n> Launches the specified number of instances using an AMI for which you have permissions.\r\n\r\nTo completely get rid of an instance, use [TerminateInstance][2].\r\n\r\n> Shuts down one or more instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds.\r\n\r\nThe language is a bit confusing because it says \"Shuts down one or more instances\", but in fact it totally removes them.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html\r\n  [2]: http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "To completely get rid of an instance, use [TerminateInstance][2]. ", "keywords": ["instance"]}, {"source": "Text", "text": "This operation is idempotent; if you terminate an instance more than once, each call succeeds. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "To completely get rid of an instance, use TerminateInstance. ", "keywords": ["instance"]}, {"source": "Body", "text": "This operation is idempotent; if you terminate an instance more than once, each call succeeds. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Is it possible to programmatically get/deploy and start an EC2 instance? ", "keywords": ["instance"]}, {"source": "Body", "text": "Essentially pick your instance type, AMI and start it up? ", "keywords": ["instance"]}, {"source": "Body", "text": "I need to programmatically create a new instance, pick the instance type, pick the AMI, start it up and run some deployment scripts to get things rolling. ", "keywords": ["instance"]}, {"source": "Body", "text": "On a related note, also need to be able to programmatically destroy a shutdown instance.", "keywords": ["instance"]}]}