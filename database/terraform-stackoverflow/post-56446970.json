{"Id": "56446970", "PostTypeId": "1", "CreationDate": "2019-06-04T15:28:27.750", "Score": "1", "ViewCount": "551", "Body": "<p>I have a resource \"aws_instance\" which includes a provisioner \"file\". This all works as expected when the EC2 instance is not present at first.</p>\n\n<p>How can I re-run the provisioner if the file is deleted from the VM?</p>\n\n<pre><code>resource \"aws_instance\" \"example\" {\n   ami           = \"ami-0b0a60c0a2bd40612\"\n   instance_type = \"t2.micro\"\n   key_name = \"secret\"\n   security_groups = [\"terraform-basic-ssh-http\"]\n\nprovisioner \"file\" {\n  source = \"install-nginx.sh\"\n  destination = \"/tmp/install-nginx.sh\"\n\n  connection {\n   type     = \"ssh\"\n   user     = \"ubuntu\"\n   private_key = \"${file(\"/local/path/to/my/key.pem\")}\"\n  }\n}\n\nprovisioner \"remote-exec\" {\n  inline = [\n    \"chmod +x /tmp/install-nginx.sh\",\n    \"/tmp/install-nginx.sh\"\n  ]\n\n  connection {\n    type     = \"ssh\"\n    user     = \"ubuntu\"\n    private_key = \"${file(\"/local/path/to/mykey.pem\")}\"\n  }\n\n}\n\n\n}\n</code></pre>\n", "OwnerUserId": "3231690", "LastActivityDate": "2019-06-04T20:38:36.607", "Title": "How to re-run terraform resource file provisioner", "Tags": "<terraform>", "AnswerCount": "1", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "99487626", "PostId": "56446970", "Score": "0", "Text": "You should be using Packer for this instead.", "CreationDate": "2019-06-04T15:34:00.373", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "99487696", "PostId": "56446970", "Score": "0", "Text": "wouldn't Packer be a bit heavy handed? That would mean killing the VM and starting a new one from the packer AMI? I can see Ansible working in this situation, but doesn't Terraform have something similar?", "CreationDate": "2019-06-04T15:36:00.580", "UserId": "3231690", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "99489562", "PostId": "56446970", "Score": "1", "Text": "Packer is the easiest and most efficient path forward for this type of problem and is generally considered best practices. All you have to do is create an AMI with NGINX installed via Packer and you have reduced your N number problem down to 1.", "CreationDate": "2019-06-04T16:40:11.130", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Packer is the easiest and most efficient path forward for this type of problem and is generally considered best practices. ", "keywords": ["efficient"]}]}], "history": [{"Id": "199042689", "PostHistoryTypeId": "2", "PostId": "56446970", "RevisionGUID": "b6e1ac87-9d2d-4142-bd44-4324bf806cf9", "CreationDate": "2019-06-04T15:28:27.750", "UserId": "3231690", "Text": "I have a resource \"aws_instance\" which includes a provisioner \"file\". This all works as expected when the EC2 instance is not present at first.\r\n\r\nHow can I re-run the provisioner if the file is deleted from the VM?\r\n\r\n    resource \"aws_instance\" \"example\" {\r\n       ami           = \"ami-0b0a60c0a2bd40612\"\r\n       instance_type = \"t2.micro\"\r\n       key_name = \"secret\"\r\n       security_groups = [\"terraform-basic-ssh-http\"]\r\n\r\n    provisioner \"file\" {\r\n      source = \"install-nginx.sh\"\r\n      destination = \"/tmp/install-nginx.sh\"\r\n\r\n      connection {\r\n       type     = \"ssh\"\r\n       user     = \"ubuntu\"\r\n       private_key = \"${file(\"/local/path/to/my/key.pem\")}\"\r\n      }\r\n    }\r\n\r\n    provisioner \"remote-exec\" {\r\n      inline = [\r\n        \"chmod +x /tmp/install-nginx.sh\",\r\n        \"/tmp/install-nginx.sh\"\r\n      ]\r\n\r\n      connection {\r\n        type     = \"ssh\"\r\n        user     = \"ubuntu\"\r\n        private_key = \"${file(\"/local/path/to/mykey.pem\")}\"\r\n      }\r\n \r\n    }\r\n\r\n \r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This all works as expected when the EC2 instance is not present at first. ", "keywords": ["instance"]}]}, {"Id": "199042690", "PostHistoryTypeId": "1", "PostId": "56446970", "RevisionGUID": "b6e1ac87-9d2d-4142-bd44-4324bf806cf9", "CreationDate": "2019-06-04T15:28:27.750", "UserId": "3231690", "Text": "How to re-run terraform resource file provisioner", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "199042691", "PostHistoryTypeId": "3", "PostId": "56446970", "RevisionGUID": "b6e1ac87-9d2d-4142-bd44-4324bf806cf9", "CreationDate": "2019-06-04T15:28:27.750", "UserId": "3231690", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "56451030", "PostTypeId": "2", "ParentId": "56446970", "CreationDate": "2019-06-04T20:38:36.607", "Score": "1", "Body": "<p>You can also use the <code>terraform taint</code> command for that: <code>terraform taint provisioner.file</code></p>\n\n<p>If your resource is in a module, taint the provisioner with <code>terraform taint -module=[MODULE_NAME] provisioner.file</code></p>\n\n<p>This will let Terraform \"recreate\" the provisioner.</p>\n", "OwnerUserId": "10975889", "LastActivityDate": "2019-06-04T20:38:36.607", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "199059096", "PostHistoryTypeId": "2", "PostId": "56451030", "RevisionGUID": "636b84ce-36ec-48d4-978f-20d09c69063e", "CreationDate": "2019-06-04T20:38:36.607", "UserId": "10975889", "Text": "You can also use the `terraform taint` command for that: `terraform taint provisioner.file`\r\n\r\nIf your resource is in a module, taint the provisioner with `terraform taint -module=[MODULE_NAME] provisioner.file`\r\n\r\nThis will let Terraform \"recreate\" the provisioner.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "This all works as expected when the EC2 instance is not present at first. ", "keywords": ["instance"]}]}