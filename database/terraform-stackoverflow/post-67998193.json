{"Id": "67998193", "PostTypeId": "1", "CreationDate": "2021-06-16T07:27:50.043", "Score": "1", "ViewCount": "324", "Body": "<p>I am saving terraform state to s3 bucket by this doc: <a href=\"https://www.terraform.io/docs/language/settings/backends/s3.html\" rel=\"nofollow noreferrer\">https://www.terraform.io/docs/language/settings/backends/s3.html</a></p>\n<p>But it mentioned that I can't use variables <code>A backend block cannot refer to named values (like input variables, locals, or data source attributes).</code></p>\n<pre><code>terraform {\n  backend &quot;s3&quot; {\n    bucket = &quot;mybucket&quot;\n    key    = &quot;path/to/my/key&quot;\n    region = &quot;us-east-1&quot;\n  }\n}\n</code></pre>\n<p>The problem is that I need to run <code>terraform</code> in different AWS account and regions. My s3 bucket name includes accountId and region. How can I make it work without manually update the configuration file?</p>\n", "OwnerUserId": "5421539", "LastActivityDate": "2021-06-16T18:32:36.383", "Title": "How can I pass different s3 bucket for terraform backend?", "Tags": "<amazon-web-services><amazon-s3><terraform>", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "120185976", "PostId": "67998193", "Score": "2", "Text": "You need to create some kind of wrapper script that configures terraform to use different backends: https://www.terraform.io/docs/language/settings/backends/configuration.html#partial-configuration - alternatively [terragrunt](https://terragrunt.gruntwork.io/) should be able to do these kind of things.", "CreationDate": "2021-06-16T07:32:36.667", "UserId": "2442804", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "248569025", "PostHistoryTypeId": "2", "PostId": "67998193", "RevisionGUID": "9a2e31bf-94a4-4d30-8279-d7777113ecb6", "CreationDate": "2021-06-16T07:27:50.043", "UserId": "5421539", "Text": "I am saving terraform state to s3 bucket by this doc: https://www.terraform.io/docs/language/settings/backends/s3.html\r\n\r\nBut it mentioned that I can't use variables `A backend block cannot refer to named values (like input variables, locals, or data source attributes).`\r\n\r\n```\r\nterraform {\r\n  backend \"s3\" {\r\n    bucket = \"mybucket\"\r\n    key    = \"path/to/my/key\"\r\n    region = \"us-east-1\"\r\n  }\r\n}\r\n```\r\n\r\nThe problem is that I need to run `terraform` in different AWS account and regions. My s3 bucket name includes accountId and region. How can I make it work without manually update the configuration file?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "248569026", "PostHistoryTypeId": "1", "PostId": "67998193", "RevisionGUID": "9a2e31bf-94a4-4d30-8279-d7777113ecb6", "CreationDate": "2021-06-16T07:27:50.043", "UserId": "5421539", "Text": "How can I pass different s3 bucket for terraform backend?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "248569027", "PostHistoryTypeId": "3", "PostId": "67998193", "RevisionGUID": "9a2e31bf-94a4-4d30-8279-d7777113ecb6", "CreationDate": "2021-06-16T07:27:50.043", "UserId": "5421539", "Text": "<amazon-web-services><amazon-s3><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "68008259", "PostTypeId": "2", "ParentId": "67998193", "CreationDate": "2021-06-16T18:32:36.383", "Score": "0", "Body": "<p>I think of using Ansible for this scenario. This may not be the most efficient way to do it or the correct use of Ansible but you can make use of Jinja2 templating. So you can create a Jinja2 template file like below.</p>\n<p>terraform.tf.j2</p>\n<pre><code> terraform {\n  backend &quot;s3&quot; {\n    bucket = &quot;{{ aws-account-name/id }}-{{ aws-region }}-terraform&quot;\n    key    = &quot;path/to/my/key&quot;\n    region = &quot;us-east-1&quot;\n  }\n}\n</code></pre>\n<p>Then when you create the infrastucture, you can feed necessary values to <code>terraform.tf.j2</code> file and create <code>terraform.tf</code> file dynamically.</p>\n", "OwnerUserId": "6518026", "LastActivityDate": "2021-06-16T18:32:36.383", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "248610633", "PostHistoryTypeId": "2", "PostId": "68008259", "RevisionGUID": "09ffa988-5392-4bbd-ae72-35f54fbc76d7", "CreationDate": "2021-06-16T18:32:36.383", "UserId": "6518026", "Text": "I think of using Ansible for this scenario. This may not be the most efficient way to do it or the correct use of Ansible but you can make use of Jinja2 templating. So you can create a Jinja2 template file like below.\r\n\r\nterraform.tf.j2\r\n\r\n     terraform {\r\n      backend \"s3\" {\r\n        bucket = \"{{ aws-account-name/id }}-{{ aws-region }}-terraform\"\r\n        key    = \"path/to/my/key\"\r\n        region = \"us-east-1\"\r\n      }\r\n    }\r\n    \r\nThen when you create the infrastucture, you can feed necessary values to `terraform.tf.j2` file and create `terraform.tf` file dynamically. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This may not be the most efficient way to do it or the correct use of Ansible but you can make use of Jinja2 templating. ", "keywords": ["efficient"]}]}], "filtered-sentences": [{"source": "Body", "text": "This may not be the most efficient way to do it or the correct use of Ansible but you can make use of Jinja2 templating. ", "keywords": ["efficient"]}]}], "contains-topic": false, "filtered-sentences": []}