{"Id": "71041444", "PostTypeId": "1", "CreationDate": "2022-02-08T22:04:28.183", "Score": "1", "ViewCount": "1390", "Body": "<p>I am creating a TF configuration to setup DynamoDB with GSI. I am using .tfvars file to ingest my variables. I have added 3 keys in attributes (Partition and Sort) and GSI keys. when I run terraform apply -var-file = input.tfvars , it create DynamoDB just fine, I am able to see the table and GSI I have created. However when I try to destroy it, it gives me below error,</p>\n<p><strong>Error: 1 error occurred:\n\u2502       * all attributes must be indexed. Unused attributes: [&quot;title&quot; &quot;age&quot;]</strong></p>\n<p>Interestingly, if <strong>I provide values directly in main.tf file not reading from .tfvars file</strong>, it works fine and able destroy properly.</p>\n<p>I have defined below variables ,</p>\n<pre><code>variable &quot;attributes&quot; {\n  type            = list(map(string))\n  description     = &quot;(Required) Provide attributes for the table&quot;\n  default         = []\n}\n\nvariable &quot;global_secondary_indexes&quot; {\n  type            = any\n  description     = &quot; (Optional) Provide Global secondary indexes for a table&quot;\n  default         = []\n}\n</code></pre>\n<p>and passing values in my .tfvars file as below, id (hash key), title (sort key), age (sort key for GSI)</p>\n<pre><code>attributes = [\n  {\n    name = &quot;id&quot;\n    type = &quot;N&quot;\n  },\n  {\n    name = &quot;title&quot;\n    type = &quot;S&quot;\n  },\n  {\n    name = &quot;age&quot;\n    type = &quot;N&quot;\n  }\n]\nglobal_secondary_indexes = [\n  {\n    name               = &quot;TitleIndex&quot;\n    hash_key           = &quot;title&quot;\n    range_key          = &quot;age&quot;\n    projection_type    = &quot;INCLUDE&quot;\n    read_capacity      = 5\n    write_capacity     = 5\n    non_key_attributes = [&quot;id&quot;]\n  }\n]\n</code></pre>\n<p>Reading values like below in main.tf</p>\n<pre><code>  attributes = var.attributes\n  \n  global_secondary_indexes = var.global_secondary_indexes\n</code></pre>\n<p>dynamoDB Module</p>\n<pre><code>resource &quot;aws_dynamodb_table&quot; &quot;this&quot; {\n  count = var.create_table &amp;&amp; !var.autoscaling_enabled ? 1 : 0\n\n  name             = var.name\n  billing_mode     = var.billing_mode\n  hash_key         = var.hash_key\n  range_key        = var.range_key\n  read_capacity    = var.read_capacity\n  write_capacity   = var.write_capacity\n  stream_enabled   = var.stream_enabled\n  stream_view_type = var.stream_view_type\n\n  ttl {\n    enabled        = var.ttl_enabled\n    attribute_name = var.ttl_attribute_name\n  }\n\n  point_in_time_recovery {\n    enabled = var.point_in_time_recovery_enabled\n  }\n\n  dynamic &quot;attribute&quot; {\n    for_each = var.attributes\n\n    content {\n      name = attribute.value.name\n      type = attribute.value.type\n    }\n  }\n\n  dynamic &quot;global_secondary_index&quot; {\n    for_each = var.global_secondary_indexes\n\n    content {\n      name               = global_secondary_index.value.name\n      hash_key           = global_secondary_index.value.hash_key\n      projection_type    = global_secondary_index.value.projection_type\n      range_key          = lookup(global_secondary_index.value, &quot;range_key&quot;, null)\n      read_capacity      = lookup(global_secondary_index.value, &quot;read_capacity&quot;, null)\n      write_capacity     = lookup(global_secondary_index.value, &quot;write_capacity&quot;, null)\n      non_key_attributes = lookup(global_secondary_index.value, &quot;non_key_attributes&quot;, null)\n    }\n  }\n}\n</code></pre>\n<p>I am not sure why directly passing values to module is different than passing through a tfvars files.</p>\n<p>Thanks</p>\n", "OwnerUserId": "11659925", "LastEditorUserId": "11659925", "LastEditDate": "2022-02-09T04:42:29.517", "LastActivityDate": "2022-02-09T04:42:29.517", "Title": "Terraform + DynamoDB - \"All attributes must be indexed\" error on terraform destroy", "Tags": "<terraform><amazon-dynamodb>", "AnswerCount": "0", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "125585263", "PostId": "71041444", "Score": "1", "Text": "What is the code that generates the error?", "CreationDate": "2022-02-08T22:18:16.127", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "125589289", "PostId": "71041444", "Score": "0", "Text": "Hi , I have updated dynamoDB module above.", "CreationDate": "2022-02-09T04:42:55.250", "UserId": "11659925", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "125589325", "PostId": "71041444", "Score": "1", "Text": "What are var.hash_key and var.range_key?", "CreationDate": "2022-02-09T04:47:35.127", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "125589699", "PostId": "71041444", "Score": "0", "Text": "These are below, hash_key                          = \"id\"\nrange_key                         = \"title\"", "CreationDate": "2022-02-09T05:30:40.617", "UserId": "11659925", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "263710287", "PostHistoryTypeId": "2", "PostId": "71041444", "RevisionGUID": "3da7ced4-dbdb-4627-a779-0a7789c6c6cb", "CreationDate": "2022-02-08T22:04:28.183", "UserId": "11659925", "Text": "I am creating a TF configuration to setup DynamoDB with GSI. I am using .tfvars file to ingest my variables. I have added 3 keys in attributes (Partition and Sort) and GSI keys. when I run terraform apply -var-file = input.tfvars , it create DynamoDB just fine, I am able to see the table and GSI I have created. However when I try to destroy it, it gives me below error, \r\n\r\n**Error: 1 error occurred:\r\n\u2502       * all attributes must be indexed. Unused attributes: [\"title\" \"age\"]**\r\n\r\n\r\nInterestingly, if **I provide values directly in main.tf file not reading from .tfvars file**, it works fine and able destroy properly.\r\n\r\nI have defined below variables , \r\n\r\n    variable \"attributes\" {\r\n      type            = list(map(string))\r\n      description     = \"(Required) Provide attributes for the table\"\r\n      default         = []\r\n    }\r\n    \r\n    variable \"global_secondary_indexes\" {\r\n      type            = any\r\n      description     = \" (Optional) Provide Global secondary indexes for a table\"\r\n      default         = []\r\n    }\r\n\r\nand passing values in my .tfvars file as below, id (hash key), title (sort key), age (sort key for GSI)\r\n\r\n    attributes = [\r\n      {\r\n        name = \"id\"\r\n        type = \"N\"\r\n      },\r\n      {\r\n        name = \"title\"\r\n        type = \"S\"\r\n      },\r\n      {\r\n        name = \"age\"\r\n        type = \"N\"\r\n      }\r\n    ]\r\n    global_secondary_indexes = [\r\n      {\r\n        name               = \"TitleIndex\"\r\n        hash_key           = \"title\"\r\n        range_key          = \"age\"\r\n        projection_type    = \"INCLUDE\"\r\n        read_capacity      = 5\r\n        write_capacity     = 5\r\n        non_key_attributes = [\"id\"]\r\n      }\r\n    ]\r\n\r\n\r\nReading values like below in main.tf\r\n\r\n      attributes = var.attributes\r\n      \r\n      global_secondary_indexes = var.global_secondary_indexes\r\n\r\nI am not sure why directly passing values to module is different than passing through a tfvars files.\r\n\r\nThanks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "263710289", "PostHistoryTypeId": "1", "PostId": "71041444", "RevisionGUID": "3da7ced4-dbdb-4627-a779-0a7789c6c6cb", "CreationDate": "2022-02-08T22:04:28.183", "UserId": "11659925", "Text": "Terraform + DynamoDB - All attributes must be indexed on terraform destroy", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "263710290", "PostHistoryTypeId": "3", "PostId": "71041444", "RevisionGUID": "3da7ced4-dbdb-4627-a779-0a7789c6c6cb", "CreationDate": "2022-02-08T22:04:28.183", "UserId": "11659925", "Text": "<terraform><amazon-dynamodb>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "263710848", "PostHistoryTypeId": "4", "PostId": "71041444", "RevisionGUID": "2a95635a-563e-4a39-b3ce-d966cc2fe021", "CreationDate": "2022-02-08T22:15:52.810", "UserId": "11659925", "Comment": "edited title", "Text": "Terraform + DynamoDB - \"All attributes must be indexed\" error on terraform destroy", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "263724047", "PostHistoryTypeId": "5", "PostId": "71041444", "RevisionGUID": "c644e31f-22c0-485e-8eaa-c50490ed3fa2", "CreationDate": "2022-02-09T04:42:29.517", "UserId": "11659925", "Comment": "added 1625 characters in body", "Text": "I am creating a TF configuration to setup DynamoDB with GSI. I am using .tfvars file to ingest my variables. I have added 3 keys in attributes (Partition and Sort) and GSI keys. when I run terraform apply -var-file = input.tfvars , it create DynamoDB just fine, I am able to see the table and GSI I have created. However when I try to destroy it, it gives me below error, \r\n\r\n**Error: 1 error occurred:\r\n\u2502       * all attributes must be indexed. Unused attributes: [\"title\" \"age\"]**\r\n\r\n\r\nInterestingly, if **I provide values directly in main.tf file not reading from .tfvars file**, it works fine and able destroy properly.\r\n\r\nI have defined below variables , \r\n\r\n    variable \"attributes\" {\r\n      type            = list(map(string))\r\n      description     = \"(Required) Provide attributes for the table\"\r\n      default         = []\r\n    }\r\n    \r\n    variable \"global_secondary_indexes\" {\r\n      type            = any\r\n      description     = \" (Optional) Provide Global secondary indexes for a table\"\r\n      default         = []\r\n    }\r\n\r\nand passing values in my .tfvars file as below, id (hash key), title (sort key), age (sort key for GSI)\r\n\r\n    attributes = [\r\n      {\r\n        name = \"id\"\r\n        type = \"N\"\r\n      },\r\n      {\r\n        name = \"title\"\r\n        type = \"S\"\r\n      },\r\n      {\r\n        name = \"age\"\r\n        type = \"N\"\r\n      }\r\n    ]\r\n    global_secondary_indexes = [\r\n      {\r\n        name               = \"TitleIndex\"\r\n        hash_key           = \"title\"\r\n        range_key          = \"age\"\r\n        projection_type    = \"INCLUDE\"\r\n        read_capacity      = 5\r\n        write_capacity     = 5\r\n        non_key_attributes = [\"id\"]\r\n      }\r\n    ]\r\n\r\n\r\nReading values like below in main.tf\r\n\r\n      attributes = var.attributes\r\n      \r\n      global_secondary_indexes = var.global_secondary_indexes\r\n\r\n\r\ndynamoDB Module \r\n\r\n    resource \"aws_dynamodb_table\" \"this\" {\r\n      count = var.create_table && !var.autoscaling_enabled ? 1 : 0\r\n    \r\n      name             = var.name\r\n      billing_mode     = var.billing_mode\r\n      hash_key         = var.hash_key\r\n      range_key        = var.range_key\r\n      read_capacity    = var.read_capacity\r\n      write_capacity   = var.write_capacity\r\n      stream_enabled   = var.stream_enabled\r\n      stream_view_type = var.stream_view_type\r\n    \r\n      ttl {\r\n        enabled        = var.ttl_enabled\r\n        attribute_name = var.ttl_attribute_name\r\n      }\r\n    \r\n      point_in_time_recovery {\r\n        enabled = var.point_in_time_recovery_enabled\r\n      }\r\n    \r\n      dynamic \"attribute\" {\r\n        for_each = var.attributes\r\n    \r\n        content {\r\n          name = attribute.value.name\r\n          type = attribute.value.type\r\n        }\r\n      }\r\n    \r\n      dynamic \"global_secondary_index\" {\r\n        for_each = var.global_secondary_indexes\r\n    \r\n        content {\r\n          name               = global_secondary_index.value.name\r\n          hash_key           = global_secondary_index.value.hash_key\r\n          projection_type    = global_secondary_index.value.projection_type\r\n          range_key          = lookup(global_secondary_index.value, \"range_key\", null)\r\n          read_capacity      = lookup(global_secondary_index.value, \"read_capacity\", null)\r\n          write_capacity     = lookup(global_secondary_index.value, \"write_capacity\", null)\r\n          non_key_attributes = lookup(global_secondary_index.value, \"non_key_attributes\", null)\r\n        }\r\n      }\r\n    }\r\n\r\nI am not sure why directly passing values to module is different than passing through a tfvars files.\r\n\r\nThanks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have defined below variables , variable \"attributes\" { type = list(map(string)) description = \"(Required) Provide attributes for the table\" default = [] } variable \"global_secondary_indexes\" { type = any description = \" (Optional) Provide Global secondary indexes for a table\" default = [] } and passing values in my .tfvars file as below, id (hash key), title (sort key), age (sort key for GSI) attributes = [ { name = \"id\" type = \"N\" }, { name = \"title\" type = \"S\" }, { name = \"age\" type = \"N\" } ] global_secondary_indexes = [ { name = \"TitleIndex\" hash_key = \"title\" range_key = \"age\" projection_type = \"INCLUDE\" read_capacity = 5 write_capacity = 5 non_key_attributes = [\"id\"] } ] Reading values like below in main.tf attributes = var.attributes global_secondary_indexes = var.global_secondary_indexes dynamoDB Module resource \"aws_dynamodb_table\" \"this\" { count = var.create_table && !var.autoscaling_enabled ? 1 : 0 name = var.name billing_mode = var.billing_mode hash_key = var.hash_key range_key = var.range_key read_capacity = var.read_capacity write_capacity = var.write_capacity stream_enabled = var.stream_enabled stream_view_type = var.stream_view_type ttl { enabled = var.ttl_enabled attribute_name = var.ttl_attribute_name } point_in_time_recovery { enabled = var.point_in_time_recovery_enabled } dynamic \"attribute\" { for_each = var.attributes content { name = attribute.value.name type = attribute.value.type } } dynamic \"global_secondary_index\" { for_each = var.global_secondary_indexes content { name = global_secondary_index.value.name hash_key = global_secondary_index.value.hash_key projection_type = global_secondary_index.value.projection_type range_key = lookup(global_secondary_index.value, \"range_key\", null) read_capacity = lookup(global_secondary_index.value, \"read_capacity\", null) write_capacity = lookup(global_secondary_index.value, \"write_capacity\", null) non_key_attributes = lookup(global_secondary_index.value, \"non_key_attributes\", null) } } } I am not sure why directly passing values to module is different than passing through a tfvars files", "keywords": ["bill"]}]}], "contains-topic": false, "filtered-sentences": []}