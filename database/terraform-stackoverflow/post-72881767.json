{"Id": "72881767", "PostTypeId": "1", "CreationDate": "2022-07-06T10:17:53.490", "Score": "0", "ViewCount": "849", "Body": "<p>We have previously been using Terraform Enterprise to store our state files. Terraform Enterprise enables versioning of state files as described <a href=\"https://www.terraform.io/cloud-docs/workspaces/state#state-versions\" rel=\"nofollow noreferrer\">here</a>.</p>\n<p>We are currently migrating to Azure and looked into using Azure storage to store Terraform state files instead. We would like to recreate the state versioning feature. In Azure we can enable <a href=\"https://learn.microsoft.com/en-us/azure/storage/blobs/versioning-overview#how-blob-versioning-works\" rel=\"nofollow noreferrer\">blob versioning</a> for a historic representation of changes to the storage blob. The problem is that applying new changes with Terraform results in multiple versions created.</p>\n<p><a href=\"https://i.stack.imgur.com/LWdef.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/LWdef.png\" alt=\"Terraform State versioning\" /></a></p>\n<p>This can be costly if changes are applied in the hundreds each day. Is there any way to reduce the number of versions created? How come Terraform creates multiple blob versions for each apply?</p>\n", "OwnerUserId": "10489594", "LastEditorUserId": "10489594", "LastEditDate": "2022-07-06T10:23:33.180", "LastActivityDate": "2023-04-05T14:26:39.983", "Title": "Versioning Terraform state in Azure storage account", "Tags": "<azure><terraform><azure-blob-storage><azure-storage><terraform-enterprise>", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "273661676", "PostHistoryTypeId": "2", "PostId": "72881767", "RevisionGUID": "0e3db250-f675-432e-acbc-885136d69bd9", "CreationDate": "2022-07-06T10:17:53.490", "UserId": "10489594", "Text": "We have previously been using Terraform Enterprise to store our state files. Terraform Enterprise enables versioning of state files as described [here](https://www.terraform.io/cloud-docs/workspaces/state#state-versions).\r\n\r\nWe are currently migrating to Azure and looked into using Azure storage to store Terraform state files instead. We would like to recreate the state versioning feature. In Azure we can enable blob versioning for a historic representation of changes to the storage blob. The problem is that applying new changes with Terraform results in multiple versions created. \r\n\r\n[![Terraform State versioning][1]][1]\r\n\r\nThis can be costly if changes are applied in the hundreds each day. Is there any way to reduce the number of versions created? How come Terraform creates multiple blob versions for each apply?\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/LWdef.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We are currently migrating to Azure and looked into using Azure storage to store Terraform state files instead. ", "keywords": ["storage"]}, {"source": "Text", "text": "We would like to recreate the state versioning feature. ", "keywords": ["feature"]}, {"source": "Text", "text": "In Azure we can enable blob versioning for a historic representation of changes to the storage blob. ", "keywords": ["storage", "change"]}, {"source": "Text", "text": "The problem is that applying new changes with Terraform results in multiple versions created. ", "keywords": ["change"]}, {"source": "Text", "text": "This can be costly if changes are applied in the hundreds each day. ", "keywords": ["change"]}]}, {"Id": "273661678", "PostHistoryTypeId": "1", "PostId": "72881767", "RevisionGUID": "0e3db250-f675-432e-acbc-885136d69bd9", "CreationDate": "2022-07-06T10:17:53.490", "UserId": "10489594", "Text": "Versioning Terraform state in Azure storage account", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Azure storage account", "keywords": ["storage"]}]}, {"Id": "273661679", "PostHistoryTypeId": "3", "PostId": "72881767", "RevisionGUID": "0e3db250-f675-432e-acbc-885136d69bd9", "CreationDate": "2022-07-06T10:17:53.490", "UserId": "10489594", "Text": "<azure><terraform><azure-blob-storage><azure-storage><terraform-enterprise>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "273662103", "PostHistoryTypeId": "5", "PostId": "72881767", "RevisionGUID": "f41f5fd5-fcfe-4711-880d-6aaa97cc6335", "CreationDate": "2022-07-06T10:23:33.180", "UserId": "10489594", "Comment": "added 102 characters in body", "Text": "We have previously been using Terraform Enterprise to store our state files. Terraform Enterprise enables versioning of state files as described [here](https://www.terraform.io/cloud-docs/workspaces/state#state-versions).\r\n\r\nWe are currently migrating to Azure and looked into using Azure storage to store Terraform state files instead. We would like to recreate the state versioning feature. In Azure we can enable [blob versioning](https://learn.microsoft.com/en-us/azure/storage/blobs/versioning-overview#how-blob-versioning-works) for a historic representation of changes to the storage blob. The problem is that applying new changes with Terraform results in multiple versions created. \r\n\r\n[![Terraform State versioning][1]][1]\r\n\r\nThis can be costly if changes are applied in the hundreds each day. Is there any way to reduce the number of versions created? How come Terraform creates multiple blob versions for each apply?\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/LWdef.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We are currently migrating to Azure and looked into using Azure storage to store Terraform state files instead. ", "keywords": ["storage"]}, {"source": "Text", "text": "We would like to recreate the state versioning feature. ", "keywords": ["feature"]}, {"source": "Text", "text": "In Azure we can enable [blob versioning](https://learn.microsoft.com/en-us/azure/storage/blobs/versioning-overview#how-blob-versioning-works) for a historic representation of changes to the storage blob. ", "keywords": ["storage", "change"]}, {"source": "Text", "text": "The problem is that applying new changes with Terraform results in multiple versions created. ", "keywords": ["change"]}, {"source": "Text", "text": "This can be costly if changes are applied in the hundreds each day. ", "keywords": ["change"]}]}], "answers": [{"Id": "72881923", "PostTypeId": "2", "ParentId": "72881767", "CreationDate": "2022-07-06T10:29:01.297", "Score": "0", "Body": "<p>A possible solution would be to create a <a href=\"https://learn.microsoft.com/en-us/azure/storage/blobs/snapshots-overview\" rel=\"nofollow noreferrer\">blob snapshot</a> for each change that is applied through Terraform. There is no need for blob versioning as a historic representation is given through available snapshots.</p>\n", "OwnerUserId": "10489594", "LastActivityDate": "2022-07-06T10:29:01.297", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "273662488", "PostHistoryTypeId": "2", "PostId": "72881923", "RevisionGUID": "5ab51ca6-8d2d-4591-8161-7b097eb01abb", "CreationDate": "2022-07-06T10:29:01.297", "UserId": "10489594", "Text": "A possible solution would be to create a [blob snapshot](https://learn.microsoft.com/en-us/azure/storage/blobs/snapshots-overview) for each change that is applied through Terraform. There is no need for blob versioning as a historic representation is given through available snapshots.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "A possible solution would be to create a [blob snapshot](https://learn.microsoft.com/en-us/azure/storage/blobs/snapshots-overview) for each change that is applied through Terraform. ", "keywords": ["storage", "change"]}]}], "filtered-sentences": [{"source": "Body", "text": "A possible solution would be to create a blob snapshot for each change that is applied through Terraform. ", "keywords": ["change"]}]}, {"Id": "75940659", "PostTypeId": "2", "ParentId": "72881767", "CreationDate": "2023-04-05T14:26:39.983", "Score": "1", "Body": "<p>Azure by itself discusses the challenge you are addressing and recommends using &quot;data lifecycle&quot; for reducing the storage costs.</p>\n<hr />\n<blockquote>\n<p>After you enable blob versioning for a storage account, every write operation to a blob in that account results in the creation of a new version. For this reason, enabling blob versioning may result in additional costs. To minimize costs, use a lifecycle management policy to automatically delete old versions. For more information about lifecycle management, see <a href=\"https://learn.microsoft.com/en-us/azure/storage/blobs/lifecycle-management-overview\" rel=\"nofollow noreferrer\">Optimize costs by automating Azure Blob Storage access tiers</a>.</p>\n</blockquote>\n<p>From <a href=\"https://learn.microsoft.com/en-us/azure/storage/blobs/versioning-overview#pricing-and-billing\" rel=\"nofollow noreferrer\">https://learn.microsoft.com/en-us/azure/storage/blobs/versioning-overview#pricing-and-billing</a></p>\n", "OwnerUserId": "1645517", "LastActivityDate": "2023-04-05T14:26:39.983", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "290922471", "PostHistoryTypeId": "2", "PostId": "75940659", "RevisionGUID": "baf1141e-01db-4a92-bc41-d221016c37a6", "CreationDate": "2023-04-05T14:26:39.983", "UserId": "1645517", "Text": "Azure by itself discusses the challenge you are addressing and recommends using \"data lifecycle\" for reducing the storage costs.\r\n___\r\n\r\n> After you enable blob versioning for a storage account, every write operation to a blob in that account results in the creation of a new version. For this reason, enabling blob versioning may result in additional costs. To minimize costs, use a lifecycle management policy to automatically delete old versions. For more information about lifecycle management, see [Optimize costs by automating Azure Blob Storage access tiers](https://learn.microsoft.com/en-us/azure/storage/blobs/lifecycle-management-overview).\r\n\r\nFrom https://learn.microsoft.com/en-us/azure/storage/blobs/versioning-overview#pricing-and-billing\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Azure by itself discusses the challenge you are addressing and recommends using \"data lifecycle\" for reducing the storage costs. ___ > After you enable blob versioning for a storage account, every write operation to a blob in that account results in the creation of a new version. ", "keywords": ["storage"]}, {"source": "Text", "text": "To minimize costs, use a lifecycle management policy to automatically delete old versions. ", "keywords": ["policy"]}, {"source": "Text", "text": "For more information about lifecycle management, see [Optimize costs by automating Azure Blob Storage access tiers](https://learn.microsoft.com/en-us/azure/storage/blobs/lifecycle-management-overview). ", "keywords": ["storage"]}, {"source": "Text", "text": "From https://learn.microsoft.com/en-us/azure/storage/blobs/versioning-overview#pricing-and-billing", "keywords": ["bill", "storage"]}]}], "filtered-sentences": [{"source": "Body", "text": "Azure by itself discusses the challenge you are addressing and recommends using \"data lifecycle\" for reducing the storage costs. ", "keywords": ["storage"]}, {"source": "Body", "text": "After you enable blob versioning for a storage account, every write operation to a blob in that account results in the creation of a new version. ", "keywords": ["storage"]}, {"source": "Body", "text": "To minimize costs, use a lifecycle management policy to automatically delete old versions. ", "keywords": ["policy"]}, {"source": "Body", "text": "For more information about lifecycle management, see Optimize costs by automating Azure Blob Storage access tiers. ", "keywords": ["storage"]}, {"source": "Body", "text": "From https://learn.microsoft.com/en-us/azure/storage/blobs/versioning-overview#pricing-and-billing", "keywords": ["bill", "storage"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Azure storage account", "keywords": ["storage"]}, {"source": "Body", "text": "We are currently migrating to Azure and looked into using Azure storage to store Terraform state files instead. ", "keywords": ["storage"]}, {"source": "Body", "text": "We would like to recreate the state versioning feature. ", "keywords": ["feature"]}, {"source": "Body", "text": "In Azure we can enable blob versioning for a historic representation of changes to the storage blob. ", "keywords": ["storage", "change"]}, {"source": "Body", "text": "The problem is that applying new changes with Terraform results in multiple versions created. ", "keywords": ["change"]}, {"source": "Body", "text": "This can be costly if changes are applied in the hundreds each day. ", "keywords": ["change"]}]}