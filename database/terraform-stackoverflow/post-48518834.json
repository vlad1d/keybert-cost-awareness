{"Id": "48518834", "PostTypeId": "1", "CreationDate": "2018-01-30T10:12:14.557", "Score": "1", "ViewCount": "300", "Body": "<p>I am trying to put up a VPC architecture for different environments (dev/test/pre-prod/prod) and I am facing an issue with respect to restriction of Elastic IP limits. It would be great to know if the architecture is going in the correct direction in the first place. So let me explain you the details here:</p>\n\n<ol>\n<li>1 VPC for all environments with 1 Internet Gateway</li>\n<li>VPC in one region</li>\n<li>3 Availability Zones with 1 private subnet and 1 utility subnet for each (total of 6 subnets)</li>\n<li>3 NAT Gateways - one for each utility subnet with 3 Elastic IPs assigned to their network interfaces</li>\n<li>EC2 Instances (master and node) in each private subnet</li>\n<li>Virtual private gateway to connect to corporate network</li>\n</ol>\n\n<p>I am using Terraform to automate this whole infrastructure as code (this doesn't matter too much here). When I run the Terraform script for one environment (let's say dev), the whole infrastructure detailed above is created fine and works good. But now when I run the script for another environment (say test), I run out of Elastic IPs (because there is a limit of 5 EIPs per region).</p>\n\n<p>What's the best way to re-architect this so I can create infrastructure for different environments while not hitting these EIP limits? </p>\n\n<p>Thanks much for your help. Please let me know if more details needed.</p>\n\n<p>Regards,\nAbdul</p>\n", "OwnerUserId": "1097562", "LastEditorUserId": "1097562", "LastEditDate": "2018-01-30T10:29:42.103", "LastActivityDate": "2018-01-30T15:27:58.850", "Title": "AWS VPC - Elastic IPs for different environments", "Tags": "<amazon-web-services><amazon-ec2><terraform><amazon-vpc><eip>", "AnswerCount": "2", "CommentCount": "10", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "84032549", "PostId": "48518834", "Score": "1", "Text": "If you really need EIP's for all of your instances then you can request a limit increase from AWS support. https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html", "CreationDate": "2018-01-30T10:21:25.000", "UserId": "3290629", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "84032867", "PostId": "48518834", "Score": "0", "Text": "Thanks Briansbum. Currently, the Elastic IPs are assigned to the network interfaces in the public subnet. So my question is: Am I doing the right thing of assigning 3 Elastic IPs for each environment I am creating? Is there a better way around it?", "CreationDate": "2018-01-30T10:29:14.163", "UserId": "1097562", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "84032966", "PostId": "48518834", "Score": "1", "Text": "If you don't _need_ HA on the NAT gateways you could get away with a single NAT gateway per VPC. This will be fine until the AZ containing your NAT gateway fails at which point the other AZs now have no way to egress to the internet (or whatever route traverses the NAT gateway). NAT gateways are highly available in the AZ itself so you only need to worry about the AZ failure case which should be rare enough to not really worry about it outside of production. But ultimately you just need to ask AWS to increase your EIP limit for your account+region.", "CreationDate": "2018-01-30T10:31:24.590", "UserId": "2291321", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "If you don't _need_ HA on the NAT gateways you could get away with a single NAT gateway per VPC. ", "keywords": ["nat"]}, {"source": "Text", "text": "This will be fine until the AZ containing your NAT gateway fails at which point the other AZs now have no way to egress to the internet (or whatever route traverses the NAT gateway). ", "keywords": ["nat"]}, {"source": "Text", "text": "NAT gateways are highly available in the AZ itself so you only need to worry about the AZ failure case which should be rare enough to not really worry about it outside of production. ", "keywords": ["nat"]}]}, {"Id": "84033265", "PostId": "48518834", "Score": "0", "Text": "Thanks @ydaetskcoR. So I can create a NAT Gateway in AZ1 in its public subnet and then allow instances from private subnets of all AZs to talk to the public subnet in AZ1? Is that feasible? This should work for other environments like dev/test/pre-prod/staging but I believe I would still run into the EIP limit issue (3 for prod, 1 for each environment)? I can request for limit increase if that's the way to go but trying to understand if it's the right solution because this is a very common deployment scenario?", "CreationDate": "2018-01-30T10:38:13.093", "UserId": "1097562", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "So I can create a NAT Gateway in AZ1 in its public subnet and then allow instances from private subnets of all AZs to talk to the public subnet in AZ1? ", "keywords": ["nat"]}, {"source": "Text", "text": "This should work for other environments like dev/test/pre-prod/staging but I believe I would still run into the EIP limit issue (3 for prod, 1 for each environment)? ", "keywords": ["test"]}]}, {"Id": "84033351", "PostId": "48518834", "Score": "0", "Text": "Yeah basically that. And you just want to have the 0.0.0.0/0 route for all the private subnets go to the single NAT gateway in the VPC", "CreationDate": "2018-01-30T10:40:15.917", "UserId": "2291321", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "And you just want to have the 0.0.0.0/0 route for all the private subnets go to the single NAT gateway in the VPC", "keywords": ["nat"]}]}, {"Id": "84033393", "PostId": "48518834", "Score": "0", "Text": "Thanks @ydaetskcoR", "CreationDate": "2018-01-30T10:41:05.573", "UserId": "1097562", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "84033642", "PostId": "48518834", "Score": "0", "Text": "@ydaetskcoR. Thinking about it, if that NAT gateway goes down, all the instances will be affected and will become a single point of failure? Hmm any other alternatives? Thanks for your help.", "CreationDate": "2018-01-30T10:47:18.333", "UserId": "1097562", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Thinking about it, if that NAT gateway goes down, all the instances will be affected and will become a single point of failure? ", "keywords": ["nat"]}]}, {"Id": "84033805", "PostId": "48518834", "Score": "2", "Text": "It's if the AZ goes down. The NAT gateways are HA inside their AZ (see https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-comparison.html) but yeah if the AZ containing your NAT gateway fails then the other AZs that shouldn't be impacted are now impacted by the NAT gateway being missing. For me this is fine outside of production but it's a decision you have to make rather than anyone outside can tell you.", "CreationDate": "2018-01-30T10:51:11.847", "UserId": "2291321", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The NAT gateways are HA inside their AZ (see https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-comparison.html) but yeah if the AZ containing your NAT gateway fails then the other AZs that shouldn't be impacted are now impacted by the NAT gateway being missing. ", "keywords": ["nat"]}]}, {"Id": "84035548", "PostId": "48518834", "Score": "0", "Text": "Completely unrelated to EIPs: you really should consider one VPC per environment. There are a couple of benefits to this, but the biggest one is that you can't accidentally configure your dev/test servers to connect to your prod database.", "CreationDate": "2018-01-30T11:38:39.620", "UserId": "42126", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "There are a couple of benefits to this, but the biggest one is that you can't accidentally configure your dev/test servers to connect to your prod database.", "keywords": ["test"]}]}, {"Id": "84035686", "PostId": "48518834", "Score": "0", "Text": "@kdgregory: I was thinking about it. But there are also two things to consider when we go for that solution:\n1. Data transfer costs between VPCs from private subnet instances to NAT gateway\n2. Billing complexities even though it's consolidated", "CreationDate": "2018-01-30T11:42:31.207", "UserId": "1097562", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Data transfer costs between VPCs from private subnet instances to NAT gateway 2. ", "keywords": ["nat"]}]}], "history": [{"Id": "165756988", "PostHistoryTypeId": "2", "PostId": "48518834", "RevisionGUID": "30e1d81f-0670-488a-ae70-72e88713df3d", "CreationDate": "2018-01-30T10:12:14.557", "UserId": "1097562", "Text": "I am trying to put up a VPC architecture for different environments (dev/test/pre-prod/prod) and I am facing an issue with respect to restriction of Elastic IP limits. It would be great to know if the architecture is going in the correct direction in the first place. So let me explain you the details here:\r\n\r\n1. 1 VPC for all environments with 1 Internet Gateway\r\n2. VPC in one region\r\n3. 3 Availability Zones with 1 private subnet and 1 utility subnet for each (total of 6 subnets)\r\n4. 3 NAT Gateways - one for each utility subnet with 3 Elastic IPs\r\n5. EC2 Instances (master and node) in each private subnet\r\n6. Virtual private gateway to connect to corporate network\r\n\r\nI am using Terraform to automate this whole infrastructure as code (this doesn't matter too much here). When I run the Terraform script for one environment (let's say dev), the whole infrastructure detailed above is created fine and works good. But now when I run the script for another environment (say test), I run out of Elastic IPs (because there is a limit of 5 EIPs per region).\r\n\r\nWhat's the best way to re-architect this so I can create infrastructure for different environments while not hitting these EIP limits? \r\n\r\nThanks much for your help. Please let me know if more details needed.\r\n\r\nRegards,\r\nAbdul", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I am trying to put up a VPC architecture for different environments (dev/test/pre-prod/prod) and I am facing an issue with respect to restriction of Elastic IP limits. ", "keywords": ["test"]}, {"source": "Text", "text": "3 NAT Gateways - one for each utility subnet with 3 Elastic IPs 5. EC2 Instances (master and node) in each private subnet 6. Virtual private gateway to connect to corporate network I am using Terraform to automate this whole infrastructure as code (this doesn't matter too much here). ", "keywords": ["nat"]}, {"source": "Text", "text": "But now when I run the script for another environment (say test), I run out of Elastic IPs (because there is a limit of 5 EIPs per region). ", "keywords": ["test"]}]}, {"Id": "165756989", "PostHistoryTypeId": "1", "PostId": "48518834", "RevisionGUID": "30e1d81f-0670-488a-ae70-72e88713df3d", "CreationDate": "2018-01-30T10:12:14.557", "UserId": "1097562", "Text": "AWS VPC - Elastic IPs for different environments", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "165756990", "PostHistoryTypeId": "3", "PostId": "48518834", "RevisionGUID": "30e1d81f-0670-488a-ae70-72e88713df3d", "CreationDate": "2018-01-30T10:12:14.557", "UserId": "1097562", "Text": "<amazon-web-services><amazon-ec2><terraform><amazon-vpc><eip>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "165758521", "PostHistoryTypeId": "5", "PostId": "48518834", "RevisionGUID": "ea62a024-b5de-4625-82e8-9890736d3ad8", "CreationDate": "2018-01-30T10:29:42.103", "UserId": "1097562", "Comment": "added 37 characters in body", "Text": "I am trying to put up a VPC architecture for different environments (dev/test/pre-prod/prod) and I am facing an issue with respect to restriction of Elastic IP limits. It would be great to know if the architecture is going in the correct direction in the first place. So let me explain you the details here:\r\n\r\n1. 1 VPC for all environments with 1 Internet Gateway\r\n2. VPC in one region\r\n3. 3 Availability Zones with 1 private subnet and 1 utility subnet for each (total of 6 subnets)\r\n4. 3 NAT Gateways - one for each utility subnet with 3 Elastic IPs assigned to their network interfaces\r\n5. EC2 Instances (master and node) in each private subnet\r\n6. Virtual private gateway to connect to corporate network\r\n\r\nI am using Terraform to automate this whole infrastructure as code (this doesn't matter too much here). When I run the Terraform script for one environment (let's say dev), the whole infrastructure detailed above is created fine and works good. But now when I run the script for another environment (say test), I run out of Elastic IPs (because there is a limit of 5 EIPs per region).\r\n\r\nWhat's the best way to re-architect this so I can create infrastructure for different environments while not hitting these EIP limits? \r\n\r\nThanks much for your help. Please let me know if more details needed.\r\n\r\nRegards,\r\nAbdul", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I am trying to put up a VPC architecture for different environments (dev/test/pre-prod/prod) and I am facing an issue with respect to restriction of Elastic IP limits. ", "keywords": ["test"]}, {"source": "Text", "text": "3 NAT Gateways - one for each utility subnet with 3 Elastic IPs assigned to their network interfaces 5. EC2 Instances (master and node) in each private subnet 6. Virtual private gateway to connect to corporate network I am using Terraform to automate this whole infrastructure as code (this doesn't matter too much here). ", "keywords": ["nat"]}, {"source": "Text", "text": "But now when I run the script for another environment (say test), I run out of Elastic IPs (because there is a limit of 5 EIPs per region). ", "keywords": ["test"]}]}], "answers": [{"Id": "48524026", "PostTypeId": "2", "ParentId": "48518834", "CreationDate": "2018-01-30T14:40:59.437", "Score": "2", "Body": "<p>As mentioned in the comments the EIP limit is simply you running into the AWS service limit for EIPs so you should talk to AWS about raising it. Running separate workloads in separate AWS accounts as suggested by <a href=\"https://stackoverflow.com/a/48520703/2291321\">Rodrigo M</a> is another way to get around service limits but is also good idea for many other reasons as listed in his answer.</p>\n\n<p>As also discussed you might want to consider only running a single NAT gateway in non production VPCs as this will reduce your costs (as well as reduce the EIPs you need).</p>\n\n<p>NAT gateways are <a href=\"https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-comparison.html\" rel=\"nofollow noreferrer\">highly available <em>inside</em> the availability zone</a> they are placed in but obviously not across the region. This means that if you have a single AZ failure on the AZ that happens to contain your NAT gateway then your other AZs will then lose connectivity through the NAT gateway, spreading the failure beyond the logically separated AZs. If you were to have a NAT gateway for every AZ then when an AZ fails it will only impact that single AZ (which is obviously completely down then).</p>\n\n<p>For myself that lesser HA is fine for non production environments and saves $65 a month per non production VPC. However in production environments I'm happy to eat that small extra cost to reduce the damage caused by an AZ failure along with all the other work I do to avoid single points of failure.</p>\n", "OwnerUserId": "2291321", "LastActivityDate": "2018-01-30T14:40:59.437", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "84044962", "PostId": "48524026", "Score": "0", "Text": "Good points. As I suggested in my answer, with proper tooling and environment separation, certain resources can be constrained or omitted in certain environments. Lower levels of HA in a non-production environment is certainly a good way to reduce costs.", "CreationDate": "2018-01-30T15:32:58.460", "UserId": "5451492", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "84045421", "PostId": "48524026", "Score": "1", "Text": "Yeah, definitely, splitting environments across AWS accounts is definitely worth doing for a myriad of reasons but raising your (soft) service limits is probably the least of these ;)", "CreationDate": "2018-01-30T15:43:29.060", "UserId": "2291321", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "165778079", "PostHistoryTypeId": "2", "PostId": "48524026", "RevisionGUID": "ec503aec-8991-4a26-9ac3-cf365e2dc525", "CreationDate": "2018-01-30T14:40:59.437", "UserId": "2291321", "Text": "As mentioned in the comments the EIP limit is simply you running into the AWS service limit for EIPs so you should talk to AWS about raising it. Running separate workloads in separate AWS accounts as suggested by [Rodrigo M](https://stackoverflow.com/a/48520703/2291321) is another way to get around service limits but is also good idea for many other reasons as listed in his answer.\r\n\r\nAs also discussed you might want to consider only running a single NAT gateway in non production VPCs as this will reduce your costs (as well as reduce the EIPs you need).\r\n\r\nNAT gateways are [highly available _inside_ the availability zone](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-comparison.html) they are placed in but obviously not across the region. This means that if you have a single AZ failure on the AZ that happens to contain your NAT gateway then your other AZs will then lose connectivity through the NAT gateway, spreading the failure beyond the logically separated AZs. If you were to have a NAT gateway for every AZ then when an AZ fails it will only impact that single AZ (which is obviously completely down then).\r\n\r\nFor myself that lesser HA is fine for non production environments and saves $65 a month per non production VPC. However in production environments I'm happy to eat that small extra cost to reduce the damage caused by an AZ failure along with all the other work I do to avoid single points of failure.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "As also discussed you might want to consider only running a single NAT gateway in non production VPCs as this will reduce your costs (as well as reduce the EIPs you need). ", "keywords": ["nat"]}, {"source": "Text", "text": "NAT gateways are [highly available _inside_ the availability zone](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-comparison.html) they are placed in but obviously not across the region. ", "keywords": ["nat"]}, {"source": "Text", "text": "This means that if you have a single AZ failure on the AZ that happens to contain your NAT gateway then your other AZs will then lose connectivity through the NAT gateway, spreading the failure beyond the logically separated AZs. ", "keywords": ["nat"]}, {"source": "Text", "text": "If you were to have a NAT gateway for every AZ then when an AZ fails it will only impact that single AZ (which is obviously completely down then). ", "keywords": ["nat"]}, {"source": "Text", "text": "However in production environments I'm happy to eat that small extra cost to reduce the damage caused by an AZ failure along with all the other work I do to avoid single points of failure.", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "As also discussed you might want to consider only running a single NAT gateway in non production VPCs as this will reduce your costs (as well as reduce the EIPs you need). ", "keywords": ["nat"]}, {"source": "Body", "text": "NAT gateways are highly available inside the availability zone they are placed in but obviously not across the region. ", "keywords": ["nat"]}, {"source": "Body", "text": "This means that if you have a single AZ failure on the AZ that happens to contain your NAT gateway then your other AZs will then lose connectivity through the NAT gateway, spreading the failure beyond the logically separated AZs. ", "keywords": ["nat"]}, {"source": "Body", "text": "If you were to have a NAT gateway for every AZ then when an AZ fails it will only impact that single AZ (which is obviously completely down then). ", "keywords": ["nat"]}, {"source": "Body", "text": "However in production environments I'm happy to eat that small extra cost to reduce the damage caused by an AZ failure along with all the other work I do to avoid single points of failure.", "keywords": ["cost"]}]}, {"Id": "48520703", "PostTypeId": "2", "ParentId": "48518834", "CreationDate": "2018-01-30T11:46:35.043", "Score": "3", "Body": "<p>I would suggest that each environment be managed in its own AWS Account, rather than mingling all the environments in one account. The additional separation is quite easy when you have automated the infrastructure, and it provides you with an additional level of security and isolation between environments. A hack in one environment would not affect the other environment.</p>\n\n<p>We keep 3 environments this way. Production, development, and a failsafe environment. The fail safe account contains production backups in a different region. </p>\n\n<p>There are multiple benefits to separating environments by accounts. For example:</p>\n\n<ul>\n<li>you do not need to give everyone production access, </li>\n<li>you can specify some resources only be created in certain environments, </li>\n<li>\"Code Space\" type events (!) See <a href=\"https://arstechnica.com/information-technology/2014/06/aws-console-breach-leads-to-demise-of-service-with-proven-backup-plan/\" rel=\"nofollow noreferrer\">https://arstechnica.com/information-technology/2014/06/aws-console-breach-leads-to-demise-of-service-with-proven-backup-plan/</a></li>\n</ul>\n", "OwnerUserId": "5451492", "LastEditorUserId": "5451492", "LastEditDate": "2018-01-30T15:27:58.850", "LastActivityDate": "2018-01-30T15:27:58.850", "CommentCount": "3", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "84036132", "PostId": "48520703", "Score": "0", "Text": "Thanks @Rodrigo M. Glad to hear that you have such a system in place. Will definitely take this into consideration.", "CreationDate": "2018-01-30T11:53:51.640", "UserId": "1097562", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "84036495", "PostId": "48520703", "Score": "0", "Text": "You bet. I wish I had done this sooner in my environments. There are multiple benefits eg you do not need to give everyone production access, and you can specify some resources only be created in certain environments. Plus Code Spaces https://arstechnica.com/information-technology/2014/06/aws-console-breach-leads-to-demise-of-service-with-proven-backup-plan/", "CreationDate": "2018-01-30T12:02:28.720", "UserId": "5451492", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "84036796", "PostId": "48520703", "Score": "0", "Text": "That CodeSpaces tale is quite frightening but a good share here. Cheers..", "CreationDate": "2018-01-30T12:10:51.917", "UserId": "1097562", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "165764598", "PostHistoryTypeId": "2", "PostId": "48520703", "RevisionGUID": "3de07f4e-f9b7-4133-b1bf-71221f1320ba", "CreationDate": "2018-01-30T11:46:35.043", "UserId": "5451492", "Text": "I would suggest that each environment be managed in its own AWS Account, rather than mingling all the environments in one account. The additional separation is quite easy when you have automated the infrastructure, and it provides you with an additional level of security and isolation between environments. A hack in one environment would not affect the other environment.\r\n\r\nWe keep 3 environments this way. Production, development, and a failsafe environment. The fail safe account contains production backups in a different region. \r\n\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "165782056", "PostHistoryTypeId": "5", "PostId": "48520703", "RevisionGUID": "a5ceb71d-cfee-491a-aed8-a1ef36e7d8d3", "CreationDate": "2018-01-30T15:27:58.850", "UserId": "5451492", "Comment": "added 383 characters in body", "Text": "I would suggest that each environment be managed in its own AWS Account, rather than mingling all the environments in one account. The additional separation is quite easy when you have automated the infrastructure, and it provides you with an additional level of security and isolation between environments. A hack in one environment would not affect the other environment.\r\n\r\nWe keep 3 environments this way. Production, development, and a failsafe environment. The fail safe account contains production backups in a different region. \r\n\r\nThere are multiple benefits to separating environments by accounts. For example:\r\n\r\n - you do not need to give everyone production access, \r\n - you can specify some resources only be created in certain environments, \r\n - \"Code Space\" type events (!) See https://arstechnica.com/information-technology/2014/06/aws-console-breach-leads-to-demise-of-service-with-proven-backup-plan/\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I am trying to put up a VPC architecture for different environments (dev/test/pre-prod/prod) and I am facing an issue with respect to restriction of Elastic IP limits. ", "keywords": ["test"]}, {"source": "Body", "text": "3 NAT Gateways - one for each utility subnet with 3 Elastic IPs assigned to their network interfaces EC2 Instances (master and node) in each private subnet Virtual private gateway to connect to corporate network I am using Terraform to automate this whole infrastructure as code (this doesn't matter too much here). ", "keywords": ["nat"]}, {"source": "Body", "text": "But now when I run the script for another environment (say test), I run out of Elastic IPs (because there is a limit of 5 EIPs per region). ", "keywords": ["test"]}]}