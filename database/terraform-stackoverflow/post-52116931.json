{"Id": "52116931", "PostTypeId": "1", "AcceptedAnswerId": "53230884", "CreationDate": "2018-08-31T13:50:08.743", "Score": "0", "ViewCount": "563", "Body": "<p>Terraform allows provisionning aws infrastructures with custom ansible scripts.</p>\n\n<p>Since the function <a href=\"https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html\" rel=\"nofollow noreferrer\">ami_from_instance</a> from terraform, \nallow convert an Instance into an AMI, and <a href=\"https://www.terraform.io/docs/providers/aws/r/instance.html\" rel=\"nofollow noreferrer\">aws_instance</a> the opposit.\nI am quite new to that tools and I might not understand their subtilities but why should the common pattern of using Packer to generate the ami instanciated by Terraform be used ?</p>\n", "OwnerUserId": "1767316", "LastEditorUserId": "1767316", "LastEditDate": "2019-01-16T09:41:59.883", "LastActivityDate": "2019-01-16T09:41:59.883", "Title": "On AWS, why should Packer be required to generate AMIs, since ami_from_instance exist in terraform", "Tags": "<amazon-web-services><terraform><packer>", "AnswerCount": "2", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "91186944", "PostId": "52116931", "Score": "0", "Text": "I'm not sure this is going to get a good answer because it's probably subjective but  Packer is specifically targeted at creating images and handles the lifecycle of the thing it's creating the image of in a nicer fashion than Terraform's `aws_ami_from_instance` resource. To do the same as Packer with Terraform you'd need to define an instance resource, then the ami_from_instance resource and then somehow destroy the instance afterwards because Terraform will start it back up. Running a Terraform destroy against both the instance and ami_from_instance will deregister the AMI.", "CreationDate": "2018-08-31T14:52:46.790", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To do the same as Packer with Terraform you'd need to define an instance resource, then the ami_from_instance resource and then somehow destroy the instance afterwards because Terraform will start it back up. ", "keywords": ["instance"]}, {"source": "Text", "text": "Running a Terraform destroy against both the instance and ami_from_instance will deregister the AMI.", "keywords": ["instance"]}]}, {"Id": "91187705", "PostId": "52116931", "Score": "0", "Text": "@ydaetskcoR it is probably a good answer in that it starts to describe a detailed way to avoid packer", "CreationDate": "2018-08-31T15:14:19.973", "UserId": "1767316", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "91188787", "PostId": "52116931", "Score": "0", "Text": "Why do you want to avoid Packer though? Despite it being technically possible to do it with Terraform I don't think it's a good approach and I don't know of anyone that promotes doing so.", "CreationDate": "2018-08-31T15:50:40.853", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "91214916", "PostId": "52116931", "Score": "0", "Text": "@ydaetskcoR Because learning a single tool should cost less, and because I find efficient Terraform's write-plan-create steps and its restart habilities at dev time.", "CreationDate": "2018-09-01T21:13:43.097", "UserId": "1767316", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Because learning a single tool should cost less, and because I find efficient Terraform's write-plan-create steps and its restart habilities at dev time.", "keywords": ["cost", "efficient"]}]}], "history": [{"Id": "180871002", "PostHistoryTypeId": "2", "PostId": "52116931", "RevisionGUID": "7a8da2a7-4226-47fd-a5fd-54b6a980269e", "CreationDate": "2018-08-31T13:50:08.743", "UserId": "1767316", "Text": "Terraform allows provisionning aws infrastructures with custom ansible software isntallation ?\r\n\r\nSince the function [ami_from_instance][1] from terraform, \r\nallow convert an Instance into an AMI, and [aws_instance][2] the opposit.\r\nWhy should Packer still be required to generate Instance processed by Packer ?\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html\r\n  [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Since the function [ami_from_instance][1] from terraform, allow convert an Instance into an AMI, and [aws_instance][2] the opposit. ", "keywords": ["instance"]}, {"source": "Text", "text": "Why should Packer still be required to generate Instance processed by Packer ? [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "keywords": ["instance"]}]}, {"Id": "180871003", "PostHistoryTypeId": "1", "PostId": "52116931", "RevisionGUID": "7a8da2a7-4226-47fd-a5fd-54b6a980269e", "CreationDate": "2018-08-31T13:50:08.743", "UserId": "1767316", "Text": "On AWS, since ami_from_instance exist in terraform, why should Packer be required to generate AMIs?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "180871004", "PostHistoryTypeId": "3", "PostId": "52116931", "RevisionGUID": "7a8da2a7-4226-47fd-a5fd-54b6a980269e", "CreationDate": "2018-08-31T13:50:08.743", "UserId": "1767316", "Text": "<amazon-web-services><terraform><packer>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "180871381", "PostHistoryTypeId": "5", "PostId": "52116931", "RevisionGUID": "4fa6cd88-da4a-47f5-a087-76201f06786b", "CreationDate": "2018-08-31T13:55:20.997", "UserId": "1767316", "Comment": "precision", "Text": "Terraform allows provisionning aws infrastructures with custom ansible software isntallation ?\r\n\r\nSince the function [ami_from_instance][1] from terraform, \r\nallow convert an Instance into an AMI, and [aws_instance][2] the opposit.\r\nWhy should the common pattern of using Packer to generate the Instance processed by Terraform ?\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html\r\n  [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Since the function [ami_from_instance][1] from terraform, allow convert an Instance into an AMI, and [aws_instance][2] the opposit. ", "keywords": ["instance"]}, {"source": "Text", "text": "Why should the common pattern of using Packer to generate the Instance processed by Terraform ? [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "keywords": ["instance"]}]}, {"Id": "180876958", "PostHistoryTypeId": "5", "PostId": "52116931", "RevisionGUID": "0f1d87f3-e101-46bd-a5ec-51a445843668", "CreationDate": "2018-08-31T15:13:14.500", "UserId": "1767316", "Comment": "full sentence", "Text": "Terraform allows provisionning aws infrastructures with custom ansible software isntallation ?\r\n\r\nSince the function [ami_from_instance][1] from terraform, \r\nallow convert an Instance into an AMI, and [aws_instance][2] the opposit.\r\nWhy should the common pattern of using Packer to generate the Instance processed by Terraform be used?\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html\r\n  [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Since the function [ami_from_instance][1] from terraform, allow convert an Instance into an AMI, and [aws_instance][2] the opposit. ", "keywords": ["instance"]}, {"source": "Text", "text": "Why should the common pattern of using Packer to generate the Instance processed by Terraform be used? [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "keywords": ["instance"]}]}, {"Id": "180943931", "PostHistoryTypeId": "5", "PostId": "52116931", "RevisionGUID": "4b489a15-0dc1-464d-a89f-ebbded74c610", "CreationDate": "2018-09-01T21:07:07.390", "UserId": "1767316", "Comment": "fixed first sentence", "Text": "Terraform allows provisionning aws infrastructures with custom ansible scripts.\r\n\r\nSince the function [ami_from_instance][1] from terraform, \r\nallow convert an Instance into an AMI, and [aws_instance][2] the opposit.\r\nWhy should the common pattern of using Packer to generate the ami instanciated by Terraform be used?\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html\r\n  [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Since the function [ami_from_instance][1] from terraform, allow convert an Instance into an AMI, and [aws_instance][2] the opposit. ", "keywords": ["instance"]}, {"source": "Text", "text": "Why should the common pattern of using Packer to generate the ami instanciated by Terraform be used? [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "keywords": ["instance"]}]}, {"Id": "180944219", "PostHistoryTypeId": "5", "PostId": "52116931", "RevisionGUID": "48a7ca2e-fcf9-49b9-b5e4-fdb330264cf6", "CreationDate": "2018-09-01T21:16:08.010", "UserId": "1767316", "Comment": "additional info", "Text": "Terraform allows provisionning aws infrastructures with custom ansible scripts.\r\n\r\nSince the function [ami_from_instance][1] from terraform, \r\nallow convert an Instance into an AMI, and [aws_instance][2] the opposit.\r\nI am quite new to that tools and I might not understand their subtilities but why should the common pattern of using Packer to generate the ami instanciated by Terraform be used ?\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html\r\n  [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Since the function [ami_from_instance][1] from terraform, allow convert an Instance into an AMI, and [aws_instance][2] the opposit. ", "keywords": ["instance"]}, {"source": "Text", "text": "I am quite new to that tools and I might not understand their subtilities but why should the common pattern of using Packer to generate the ami instanciated by Terraform be used ? [1]: https://www.terraform.io/docs/providers/aws/r/ami_from_instance.html [2]: https://www.terraform.io/docs/providers/aws/r/instance.html", "keywords": ["instance"]}]}, {"Id": "189651536", "PostHistoryTypeId": "4", "PostId": "52116931", "RevisionGUID": "169ce646-acb6-42cc-8a55-c4470bffdc94", "CreationDate": "2019-01-16T09:41:59.883", "UserId": "1767316", "Comment": "edited title", "Text": "On AWS, why should Packer be required to generate AMIs, since ami_from_instance exist in terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "53230884", "PostTypeId": "2", "ParentId": "52116931", "CreationDate": "2018-11-09T17:47:00.630", "Score": "0", "Body": "<p>I am not going to repeat what \"ydaetskcoR\" had already mentioned. Grt points. Another usecase that Packer really does is sharing the AMI With multiple accounts. In our setup, we create AMI in one account and shared it other accounts to be used. Packer is specifically build to create AMI's and so has many features than the simple Terraform's ami_from_instance. My 2 cents</p>\n", "OwnerUserId": "545164", "LastActivityDate": "2018-11-09T17:47:00.630", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "185506992", "PostHistoryTypeId": "2", "PostId": "53230884", "RevisionGUID": "b656fe26-cf3f-417b-9890-4dfb38b90552", "CreationDate": "2018-11-09T17:47:00.630", "UserId": "545164", "Text": "I am not going to repeat what \"ydaetskcoR\" had already mentioned. Grt points. Another usecase that Packer really does is sharing the AMI With multiple accounts. In our setup, we create AMI in one account and shared it other accounts to be used. Packer is specifically build to create AMI's and so has many features than the simple Terraform's ami_from_instance. My 2 cents", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "52126872", "PostTypeId": "2", "ParentId": "52116931", "CreationDate": "2018-09-01T09:39:45.423", "Score": "0", "Body": "<p>Because Packer creates an AMI with <em>Configuration as Code</em>, you will have a reproducible recipe for how you AMI's are created.</p>\n\n<p>If you would use Terraforms <code>ami_from_instance</code> you instead creates clones of an non-reproducible source, thus creating snowflake servers (all are slightly different).</p>\n\n<p>Also on important feature of a public cloud is autoscaling and for that you want to start off with AMI's that includes as much as possible so the startup time is small. This makes a pre-baked AMI better than a generic with a initialisation script that installs and configure all adaptations to you production environment.</p>\n", "OwnerUserId": "226174", "LastActivityDate": "2018-09-01T09:39:45.423", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "91239802", "PostId": "52126872", "Score": "0", "Text": "This isn't strictly true. You could use Terraform to spin up an instance just as Packer does and then use a remote provisioner to configure it as Packer does. You'd then need something that would tear down the instance without deregistering the AMI (a `terraform destroy` will deregister the AMI) but it is workable. Just strictly worse at it than Packer for little gain (avoiding writing a short Packer JSON config).", "CreationDate": "2018-09-03T07:31:57.277", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You could use Terraform to spin up an instance just as Packer does and then use a remote provisioner to configure it as Packer does. ", "keywords": ["instance"]}, {"source": "Text", "text": "You'd then need something that would tear down the instance without deregistering the AMI (a `terraform destroy` will deregister the AMI) but it is workable. ", "keywords": ["instance"]}]}, {"Id": "91240515", "PostId": "52126872", "Score": "0", "Text": "Sure, but it's like using a chainsaw to hit nails. It kind of works, but most likely you will cut your self.", "CreationDate": "2018-09-03T07:56:40.157", "UserId": "226174", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "91240826", "PostId": "52126872", "Score": "0", "Text": "Yep, I agree it's not a good tool for it but I don't think your answer as is really explains why because it is technically possible to achieve the same thing. In general I think it's more of an opinion based question where some opinions are wrong ;)", "CreationDate": "2018-09-03T08:06:26.860", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "93513998", "PostId": "52126872", "Score": "0", "Text": "@RickardvonEssen yes it is using chainsaw to hit nails, but since you need to master you shainsaw anyway, it migth be better to do all with your running schainsaw, since the Packer \"hammer\" still need some investment to be mastered (learning to use it and to debug it still has a cost)", "CreationDate": "2018-11-15T10:07:26.063", "UserId": "1767316", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "@RickardvonEssen yes it is using chainsaw to hit nails, but since you need to master you shainsaw anyway, it migth be better to do all with your running schainsaw, since the Packer \"hammer\" still need some investment to be mastered (learning to use it and to debug it still has a cost)", "keywords": ["cost"]}]}], "history": [{"Id": "180921488", "PostHistoryTypeId": "2", "PostId": "52126872", "RevisionGUID": "805bf14a-e41e-42df-b80d-e5b8fb90c8b7", "CreationDate": "2018-09-01T09:39:45.423", "UserId": "226174", "Text": "Because Packer creates an AMI with _Configuration as Code_, you will have a reproducible recipe for how you AMI's are created.\r\n\r\nIf you would use Terraforms `ami_from_instance` you instead creates clones of an non-reproducible source, thus creating snowflake servers (all are slightly different).\r\n\r\nAlso on important feature of a public cloud is autoscaling and for that you want to start off with AMI's that includes as much as possible so the startup time is small. This makes a pre-baked AMI better than a generic with a initialisation script that installs and configure all adaptations to you production environment.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Also on important feature of a public cloud is autoscaling and for that you want to start off with AMI's that includes as much as possible so the startup time is small. ", "keywords": ["feature"]}]}], "filtered-sentences": [{"source": "Body", "text": "Also on important feature of a public cloud is autoscaling and for that you want to start off with AMI's that includes as much as possible so the startup time is small. ", "keywords": ["feature"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Since the function ami_from_instance from terraform, allow convert an Instance into an AMI, and aws_instance the opposit. ", "keywords": ["instance"]}]}