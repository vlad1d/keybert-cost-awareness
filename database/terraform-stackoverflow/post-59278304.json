{"Id": "59278304", "PostTypeId": "1", "AcceptedAnswerId": "59287383", "CreationDate": "2019-12-11T02:59:51.097", "Score": "0", "ViewCount": "396", "Body": "<p>I am following <a href=\"https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca\" rel=\"nofollow noreferrer\">this</a> excellent guide to terraform. I am currently on the 3rd post exploring the state. Specifically at the <a href=\"https://blog.gruntwork.io/how-to-manage-terraform-state-28f5697e68fa\" rel=\"nofollow noreferrer\">point</a> where terraform workspaces are demonstrated. \nSo, I have the following <code>main.tf</code>:</p>\n\n<pre><code>provider \"aws\" {\n  region = \"us-east-2\"\n}\n\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket = \"mark-kharitonov-terraform-up-and-running-state\"\n\n  # Enable versioning so we can see the full revision history of our\n  # state files\n  versioning {\n    enabled = true\n  }\n\n  # Enable server-side encryption by default\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = \"AES256\"\n      }\n    }\n  }\n}\n\nresource \"aws_dynamodb_table\" \"terraform_locks\" {\n  name         = \"terraform-up-and-running-locks\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n}\n\nterraform {\n  backend \"s3\" {\n    # Replace this with your bucket name!\n    bucket = \"mark-kharitonov-terraform-up-and-running-state\"\n    key    = \"workspaces-example/terraform.tfstate\"\n    region = \"us-east-2\"\n    # Replace this with your DynamoDB table name!\n    dynamodb_table = \"terraform-up-and-running-locks\"\n    encrypt        = true\n  }\n}\n\noutput \"s3_bucket_arn\" {\n  value       = aws_s3_bucket.terraform_state.arn\n  description = \"The ARN of the S3 bucket\"\n}\n\noutput \"dynamodb_table_name\" {\n  value       = aws_dynamodb_table.terraform_locks.name\n  description = \"The name of the DynamoDB table\"\n}\n\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n}\n</code></pre>\n\n<p>And it is all great:</p>\n\n<pre><code>C:\\work\\terraform [master \u2261]&gt; terraform workspace show\ndefault\nC:\\work\\terraform [master \u2261]&gt; terraform apply\nAcquiring state lock. This may take a few moments...\naws_dynamodb_table.terraform_locks: Refreshing state... [id=terraform-up-and-running-locks]\naws_instance.example: Refreshing state... [id=i-01120238707b3ba8e]\naws_s3_bucket.terraform_state: Refreshing state... [id=mark-kharitonov-terraform-up-and-running-state]\n\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\nReleasing state lock. This may take a few moments...\n\nOutputs:\n\ndynamodb_table_name = terraform-up-and-running-locks\ns3_bucket_arn = arn:aws:s3:::mark-kharitonov-terraform-up-and-running-state\nC:\\work\\terraform [master \u2261]&gt;\n</code></pre>\n\n<p>Now I am trying to follow the guide - create a new workspace and apply the code there:</p>\n\n<pre><code>C:\\work\\terraform [master \u2261]&gt; terraform workspace new example1\nCreated and switched to workspace \"example1\"!\n\nYou're now on a new, empty workspace. Workspaces isolate their state,\nso if you run \"terraform plan\" Terraform will not see any existing state\nfor this configuration.\nC:\\work\\terraform [master \u2261]&gt; terraform plan\nAcquiring state lock. This may take a few moments...\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # aws_dynamodb_table.terraform_locks will be created\n  + resource \"aws_dynamodb_table\" \"terraform_locks\" {\n...\n      + name             = \"terraform-up-and-running-locks\"\n...\n    }\n\n  # aws_instance.example will be created\n  + resource \"aws_instance\" \"example\" {\n      + ami                          = \"ami-0c55b159cbfafe1f0\"\n...\n    }\n\n  # aws_s3_bucket.terraform_state will be created\n  + resource \"aws_s3_bucket\" \"terraform_state\" {\n...\n      + bucket                      = \"mark-kharitonov-terraform-up-and-running-state\"\n...\n    }\n\nPlan: 3 to add, 0 to change, 0 to destroy.\n\n------------------------------------------------------------------------\n\nNote: You didn't specify an \"-out\" parameter to save this plan, so Terraform\ncan't guarantee that exactly these actions will be performed if\n\"terraform apply\" is subsequently run.\n\nReleasing state lock. This may take a few moments...\nC:\\work\\terraform [master \u2261]&gt;\n</code></pre>\n\n<p>And here the problems start. In the guide, the <code>terraform plan</code> command reports that only one resource is going to be created - an EC2 instance. This implies that terraform is going to reuse the same S3 bucket for the backend and the same DynamoDB table for the lock. But in my case, terraform informs me that it would want to create all the 3 resources, including the S3 bucket. Which would definitely fail (already tried).</p>\n\n<p>So, what am I doing wrong? What is missing?</p>\n", "OwnerUserId": "80002", "LastActivityDate": "2019-12-11T14:35:26.370", "Title": "Terraform attempts to create the S3 backend again when switching to a new workspace", "Tags": "<terraform>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "210967045", "PostHistoryTypeId": "2", "PostId": "59278304", "RevisionGUID": "5a2e42c7-d798-4444-bb0e-8af9fdb8646e", "CreationDate": "2019-12-11T02:59:51.097", "UserId": "80002", "Text": "I am following [this][1] excellent guide to terraform. I am currently on the 3rd post exploring the state. Specifically at the [point][2] where terraform workspaces are demonstrated. \r\nSo, I have the following `main.tf`:\r\n```\r\nprovider \"aws\" {\r\n  region = \"us-east-2\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"terraform_state\" {\r\n  bucket = \"mark-kharitonov-terraform-up-and-running-state\"\r\n\r\n  # Enable versioning so we can see the full revision history of our\r\n  # state files\r\n  versioning {\r\n    enabled = true\r\n  }\r\n\r\n  # Enable server-side encryption by default\r\n  server_side_encryption_configuration {\r\n    rule {\r\n      apply_server_side_encryption_by_default {\r\n        sse_algorithm = \"AES256\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_dynamodb_table\" \"terraform_locks\" {\r\n  name         = \"terraform-up-and-running-locks\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key     = \"LockID\"\r\n\r\n  attribute {\r\n    name = \"LockID\"\r\n    type = \"S\"\r\n  }\r\n}\r\n\r\nterraform {\r\n  backend \"s3\" {\r\n    # Replace this with your bucket name!\r\n    bucket = \"mark-kharitonov-terraform-up-and-running-state\"\r\n    key    = \"workspaces-example/terraform.tfstate\"\r\n    region = \"us-east-2\"\r\n    # Replace this with your DynamoDB table name!\r\n    dynamodb_table = \"terraform-up-and-running-locks\"\r\n    encrypt        = true\r\n  }\r\n}\r\n\r\noutput \"s3_bucket_arn\" {\r\n  value       = aws_s3_bucket.terraform_state.arn\r\n  description = \"The ARN of the S3 bucket\"\r\n}\r\n\r\noutput \"dynamodb_table_name\" {\r\n  value       = aws_dynamodb_table.terraform_locks.name\r\n  description = \"The name of the DynamoDB table\"\r\n}\r\n\r\nresource \"aws_instance\" \"example\" {\r\n  ami           = \"ami-0c55b159cbfafe1f0\"\r\n  instance_type = \"t2.micro\"\r\n}\r\n```\r\nAnd it is all great:\r\n```\r\nC:\\work\\terraform [master \u2261]> terraform workspace show\r\ndefault\r\nC:\\work\\terraform [master \u2261]> terraform apply\r\nAcquiring state lock. This may take a few moments...\r\naws_dynamodb_table.terraform_locks: Refreshing state... [id=terraform-up-and-running-locks]\r\naws_instance.example: Refreshing state... [id=i-01120238707b3ba8e]\r\naws_s3_bucket.terraform_state: Refreshing state... [id=mark-kharitonov-terraform-up-and-running-state]\r\n\r\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\r\nReleasing state lock. This may take a few moments...\r\n\r\nOutputs:\r\n\r\ndynamodb_table_name = terraform-up-and-running-locks\r\ns3_bucket_arn = arn:aws:s3:::mark-kharitonov-terraform-up-and-running-state\r\nC:\\work\\terraform [master \u2261]>\r\n```\r\nNow I am trying to follow the guide - create a new workspace and apply the code there:\r\n```\r\nC:\\work\\terraform [master \u2261]> terraform workspace new example1\r\nCreated and switched to workspace \"example1\"!\r\n\r\nYou're now on a new, empty workspace. Workspaces isolate their state,\r\nso if you run \"terraform plan\" Terraform will not see any existing state\r\nfor this configuration.\r\nC:\\work\\terraform [master \u2261]> terraform plan\r\nAcquiring state lock. This may take a few moments...\r\nRefreshing Terraform state in-memory prior to plan...\r\nThe refreshed state will be used to calculate this plan, but will not be\r\npersisted to local or remote state storage.\r\n\r\n\r\n------------------------------------------------------------------------\r\n\r\nAn execution plan has been generated and is shown below.\r\nResource actions are indicated with the following symbols:\r\n  + create\r\n\r\nTerraform will perform the following actions:\r\n\r\n  # aws_dynamodb_table.terraform_locks will be created\r\n  + resource \"aws_dynamodb_table\" \"terraform_locks\" {\r\n...\r\n      + name             = \"terraform-up-and-running-locks\"\r\n...\r\n    }\r\n\r\n  # aws_instance.example will be created\r\n  + resource \"aws_instance\" \"example\" {\r\n      + ami                          = \"ami-0c55b159cbfafe1f0\"\r\n...\r\n    }\r\n\r\n  # aws_s3_bucket.terraform_state will be created\r\n  + resource \"aws_s3_bucket\" \"terraform_state\" {\r\n...\r\n      + bucket                      = \"mark-kharitonov-terraform-up-and-running-state\"\r\n...\r\n    }\r\n\r\nPlan: 3 to add, 0 to change, 0 to destroy.\r\n\r\n------------------------------------------------------------------------\r\n\r\nNote: You didn't specify an \"-out\" parameter to save this plan, so Terraform\r\ncan't guarantee that exactly these actions will be performed if\r\n\"terraform apply\" is subsequently run.\r\n\r\nReleasing state lock. This may take a few moments...\r\nC:\\work\\terraform [master \u2261]>\r\n```\r\nAnd here the problems start. In the guide, the `terraform plan` command reports that only one resource is going to be created - an EC2 instance. This implies that terraform is going to reuse the same S3 bucket for the backend and the same DynamoDB table for the lock. But in my case, terraform informs me that it would want to create all the 3 resources, including the S3 bucket. Which would definitely fail (already tried).\r\n\r\nSo, what am I doing wrong? What is missing?\r\n\r\n  [1]: https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca\r\n  [2]: https://blog.gruntwork.io/how-to-manage-terraform-state-28f5697e68fa", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "So, I have the following `main.tf`: ``` provider \"aws\" { region = \"us-east-2\" } resource \"aws_s3_bucket\" \"terraform_state\" { bucket = \"mark-kharitonov-terraform-up-and-running-state\" # Enable versioning so we can see the full revision history of our # state files versioning { enabled = true } # Enable server-side encryption by default server_side_encryption_configuration { rule { apply_server_side_encryption_by_default { sse_algorithm = \"AES256\" } } } } resource \"aws_dynamodb_table\" \"terraform_locks\" { name = \"terraform-up-and-running-locks\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"LockID\" attribute { name = \"LockID\" type = \"S\" } } terraform { backend \"s3\" { # Replace this with your bucket name! bucket = \"mark-kharitonov-terraform-up-and-running-state\" key = \"workspaces-example/terraform.tfstate\" region = \"us-east-2\" # Replace this with your DynamoDB table name! dynamodb_table = \"terraform-up-and-running-locks\" encrypt = true } } output \"s3_bucket_arn\" { value = aws_s3_bucket.terraform_state.arn description = \"The ARN of the S3 bucket\" } output \"dynamodb_table_name\" { value = aws_dynamodb_table.terraform_locks.name description = \"The name of the DynamoDB table\" } resource \"aws_instance\" \"example\" { ami = \"ami-0c55b159cbfafe1f0\" instance_type = \"t2.micro\" } ``` And it is all great: ``` C:\\work\\terraform [master \u2261]> terraform workspace show default C:\\work\\terraform [master \u2261]> terraform apply Acquiring state lock. This may take a few moments... aws_dynamodb_table.terraform_locks: Refreshing state... [id=terraform-up-and-running-locks] aws_instance.example: Refreshing state... [id=i-01120238707b3ba8e] aws_s3_bucket.terraform_state: Refreshing state... [id=mark-kharitonov-terraform-up-and-running-state] Apply complete! Resources: 0 added, 0 changed, 0 destroyed. Releasing state lock. This may take a few moments... Outputs: dynamodb_table_name = terraform-up-and-running-locks s3_bucket_arn = arn:aws:s3:::mark-kharitonov-terraform-up-and-running-state C:\\work\\terraform [master \u2261]> ``` Now I am trying to follow the guide - create a new workspace and apply the code there: ``` C:\\work\\terraform [master \u2261]> terraform workspace new example1 Created and switched to workspace \"example1\"! ", "keywords": ["bill", "provider", "change"]}, {"source": "Text", "text": "The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ ", "keywords": ["storage"]}, {"source": "Text", "text": "Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # aws_dynamodb_table.terraform_locks will be created + resource \"aws_dynamodb_table\" \"terraform_locks\" { ... + name = \"terraform-up-and-running-locks\" ... } # aws_instance.example will be created + resource \"aws_instance\" \"example\" { + ami = \"ami-0c55b159cbfafe1f0\" ... } # aws_s3_bucket.terraform_state will be created + resource \"aws_s3_bucket\" \"terraform_state\" { ... + bucket = \"mark-kharitonov-terraform-up-and-running-state\" ... } Plan: 3 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Note: You didn't specify an \"-out\" parameter to save this plan, so Terraform can't guarantee that exactly these actions will be performed if \"terraform apply\" is subsequently run. ", "keywords": ["change"]}, {"source": "Text", "text": "In the guide, the `terraform plan` command reports that only one resource is going to be created - an EC2 instance. ", "keywords": ["instance"]}]}, {"Id": "210967046", "PostHistoryTypeId": "1", "PostId": "59278304", "RevisionGUID": "5a2e42c7-d798-4444-bb0e-8af9fdb8646e", "CreationDate": "2019-12-11T02:59:51.097", "UserId": "80002", "Text": "Terraform attempts to create the S3 backend again when switching to a new workspace", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "210967047", "PostHistoryTypeId": "3", "PostId": "59278304", "RevisionGUID": "5a2e42c7-d798-4444-bb0e-8af9fdb8646e", "CreationDate": "2019-12-11T02:59:51.097", "UserId": "80002", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "59287383", "PostTypeId": "2", "ParentId": "59278304", "CreationDate": "2019-12-11T13:57:12.257", "Score": "1", "Body": "<p>Creating a new <a href=\"https://www.terraform.io/docs/state/workspaces.html\" rel=\"nofollow noreferrer\">workspace</a> is effectively starting from scratch. The guide steps are a bit confusing in this regard but they are creating two plans to achieve the final result. The first creates the state S3 Bucket and the locking DynamoDB table and the second plan contains just the instance they are creating but uses the <code>terraform</code> code block to tell that plan where to store its state.</p>\n\n<p>In your example you are both setting your state location and creating it in the same plan. This means when you create a new workspace its going to attempt to create that state location a second time because this workspace does not know about the other workspace's state.</p>\n\n<p>In the end its important to know that using workspaces creates unique state files per workspace by <a href=\"https://www.terraform.io/docs/state/workspaces.html#workspace-internals\" rel=\"nofollow noreferrer\">appending the workspace name to the remote state path</a>. For example if your state location is <code>mark-kharitonov-terraform-up-and-running-state</code> with a path of <code>workspaces-example</code> then you might see the following:</p>\n\n<ul>\n<li>Default state: <code>mark-kharitonov-terraform-up-and-running-state/workspaces-example/default/terraform.tfstate</code></li>\n<li>Other state: <code>mark-kharitonov-terraform-up-and-running-state/workspaces-example/other/terraform.tfstate</code></li>\n</ul>\n\n<p>EDIT:</p>\n\n<p>To be clear on how to get the guide results. You need to create two separate plans in separate folders (all plans in your working directory will run at the same time). So create a hierarchy like:</p>\n\n<ul>\n<li>plans >\n\n<ul>\n<li>state >\n\n<ul>\n<li>main.tf</li>\n</ul></li>\n<li>instance >\n\n<ul>\n<li>main.tf</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Inside your <code>plans/state/main.tf</code> file put your state location content:</p>\n\n<pre><code>provider \"aws\" {\n  region = \"us-east-2\"\n}\n\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket = \"mark-kharitonov-terraform-up-and-running-state\"\n\n  # Enable versioning so we can see the full revision history of our\n  # state files\n  versioning {\n    enabled = true\n  }\n\n  # Enable server-side encryption by default\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = \"AES256\"\n      }\n    }\n  }\n}\n\nresource \"aws_dynamodb_table\" \"terraform_locks\" {\n  name         = \"terraform-up-and-running-locks\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n}\n\noutput \"s3_bucket_arn\" {\n  value       = aws_s3_bucket.terraform_state.arn\n  description = \"The ARN of the S3 bucket\"\n}\n</code></pre>\n\n<p>Then in your <code>plans/instance/main.tf</code> file you can reference the created state location with the <code>terraform</code> block and should only need the following content:</p>\n\n<pre><code>terraform {\n  backend \"s3\" {\n    # Replace this with your bucket name!\n    bucket = \"mark-kharitonov-terraform-up-and-running-state\"\n    key    = \"workspaces-example/terraform.tfstate\"\n    region = \"us-east-2\"\n    # Replace this with your DynamoDB table name!\n    dynamodb_table = \"terraform-up-and-running-locks\"\n    encrypt        = true\n  }\n}\n\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n}\n</code></pre>\n", "OwnerUserId": "9797143", "LastEditorUserId": "9797143", "LastEditDate": "2019-12-11T14:35:26.370", "LastActivityDate": "2019-12-11T14:35:26.370", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "104780309", "PostId": "59287383", "Score": "0", "Text": "The guide explains that a unique state file is created - the path is automatically altered by terraform to incorporate the workspace name. This part is clear. What is not clear is how to reconcile the guide with what happens. What do I have to do to make it work? Does it mean I need to split main.tf into two files? How do I make the second file reuse the same S3 bucket. I am sorry, but I am nowhere nearer the resolution after reading your answer than I was before.", "CreationDate": "2019-12-11T14:07:30.850", "UserId": "80002", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "104781370", "PostId": "59287383", "Score": "0", "Text": "Yes you need to split the plan files. Hence why I said \"The guide steps are a bit confusing in this regard but they are creating two plans to achieve the final result.\" in my opening statement. I edited my answer to provide an example. Its important to note when you split them they cant be in the same working directory since `terraform apply` and `plan` will read all the `.tf` files.", "CreationDate": "2019-12-11T14:38:13.217", "UserId": "9797143", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "104789703", "PostId": "59287383", "Score": "0", "Text": "It works - thank you. A question remains is how to destroy the backend state files if I want a complete cleanup. They are created with `terraform apply`, but are not deleted with `terraform destroy`. What is the proper practice? Or shall I ask it as a separate question on SO?", "CreationDate": "2019-12-11T19:08:50.090", "UserId": "80002", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "104816349", "PostId": "59287383", "Score": "0", "Text": "Good question. They dont particularly harm anything and I dont think there is any automatic deletion mechanism. Perhaps another question.", "CreationDate": "2019-12-12T14:45:02.930", "UserId": "9797143", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "211004429", "PostHistoryTypeId": "2", "PostId": "59287383", "RevisionGUID": "493e1021-5926-4c40-8c7e-53b4024fe2ea", "CreationDate": "2019-12-11T13:57:12.257", "UserId": "9797143", "Text": "Creating a new [workspace][1] is effectively starting from scratch. The guide steps are a bit confusing in this regard but they are creating two plans to achieve the final result. The first creates the state S3 Bucket and the locking DynamoDB table and the second plan contains just the instance they are creating but uses the `terraform` code block to tell that plan where to store its state.\r\n\r\nIn your example you are both setting your state location and creating it in the same plan. This means when you create a new workspace its going to attempt to create that state location a second time because this workspace does not know about the other workspace's state.\r\n\r\nIn the end its important to know that using workspaces creates unique state files per workspace by [appending the workspace name to the remote state path][2]. For example if your state location is `mark-kharitonov-terraform-up-and-running-state` with a path of `workspaces-example` then you might see the following:\r\n\r\n - Default state: `mark-kharitonov-terraform-up-and-running-state/workspaces-example/default/terraform.tfstate`\r\n - Other state: `mark-kharitonov-terraform-up-and-running-state/workspaces-example/other/terraform.tfstate`\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/state/workspaces.html\r\n  [2]: https://www.terraform.io/docs/state/workspaces.html#workspace-internals", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The first creates the state S3 Bucket and the locking DynamoDB table and the second plan contains just the instance they are creating but uses the `terraform` code block to tell that plan where to store its state. ", "keywords": ["instance"]}]}, {"Id": "211007424", "PostHistoryTypeId": "5", "PostId": "59287383", "RevisionGUID": "c198e12f-2bbf-4c61-90ed-2372518c7d78", "CreationDate": "2019-12-11T14:35:26.370", "UserId": "9797143", "Comment": "Include clearer details", "Text": "Creating a new [workspace][1] is effectively starting from scratch. The guide steps are a bit confusing in this regard but they are creating two plans to achieve the final result. The first creates the state S3 Bucket and the locking DynamoDB table and the second plan contains just the instance they are creating but uses the `terraform` code block to tell that plan where to store its state.\r\n\r\nIn your example you are both setting your state location and creating it in the same plan. This means when you create a new workspace its going to attempt to create that state location a second time because this workspace does not know about the other workspace's state.\r\n\r\nIn the end its important to know that using workspaces creates unique state files per workspace by [appending the workspace name to the remote state path][2]. For example if your state location is `mark-kharitonov-terraform-up-and-running-state` with a path of `workspaces-example` then you might see the following:\r\n\r\n - Default state: `mark-kharitonov-terraform-up-and-running-state/workspaces-example/default/terraform.tfstate`\r\n - Other state: `mark-kharitonov-terraform-up-and-running-state/workspaces-example/other/terraform.tfstate`\r\n\r\nEDIT:\r\n\r\nTo be clear on how to get the guide results. You need to create two separate plans in separate folders (all plans in your working directory will run at the same time). So create a hierarchy like:\r\n\r\n - plans >\r\n   - state >\r\n     - main.tf\r\n   - instance >\r\n     - main.tf\r\n\r\nInside your `plans/state/main.tf` file put your state location content:\r\n```\r\nprovider \"aws\" {\r\n  region = \"us-east-2\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"terraform_state\" {\r\n  bucket = \"mark-kharitonov-terraform-up-and-running-state\"\r\n\r\n  # Enable versioning so we can see the full revision history of our\r\n  # state files\r\n  versioning {\r\n    enabled = true\r\n  }\r\n\r\n  # Enable server-side encryption by default\r\n  server_side_encryption_configuration {\r\n    rule {\r\n      apply_server_side_encryption_by_default {\r\n        sse_algorithm = \"AES256\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_dynamodb_table\" \"terraform_locks\" {\r\n  name         = \"terraform-up-and-running-locks\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key     = \"LockID\"\r\n\r\n  attribute {\r\n    name = \"LockID\"\r\n    type = \"S\"\r\n  }\r\n}\r\n\r\noutput \"s3_bucket_arn\" {\r\n  value       = aws_s3_bucket.terraform_state.arn\r\n  description = \"The ARN of the S3 bucket\"\r\n}\r\n```\r\n\r\nThen in your `plans/instance/main.tf` file you can reference the created state location with the `terraform` block and should only need the following content:\r\n```\r\nterraform {\r\n  backend \"s3\" {\r\n    # Replace this with your bucket name!\r\n    bucket = \"mark-kharitonov-terraform-up-and-running-state\"\r\n    key    = \"workspaces-example/terraform.tfstate\"\r\n    region = \"us-east-2\"\r\n    # Replace this with your DynamoDB table name!\r\n    dynamodb_table = \"terraform-up-and-running-locks\"\r\n    encrypt        = true\r\n  }\r\n}\r\n\r\nresource \"aws_instance\" \"example\" {\r\n  ami           = \"ami-0c55b159cbfafe1f0\"\r\n  instance_type = \"t2.micro\"\r\n}\r\n```\r\n\r\n  [1]: https://www.terraform.io/docs/state/workspaces.html\r\n  [2]: https://www.terraform.io/docs/state/workspaces.html#workspace-internals", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The first creates the state S3 Bucket and the locking DynamoDB table and the second plan contains just the instance they are creating but uses the `terraform` code block to tell that plan where to store its state. ", "keywords": ["instance"]}, {"source": "Text", "text": "So create a hierarchy like: - plans > - state > - main.tf - instance > - main.tf Inside your `plans/state/main.tf` file put your state location content: ``` provider \"aws\" { region = \"us-east-2\" } resource \"aws_s3_bucket\" \"terraform_state\" { bucket = \"mark-kharitonov-terraform-up-and-running-state\" # Enable versioning so we can see the full revision history of our # state files versioning { enabled = true } # Enable server-side encryption by default server_side_encryption_configuration { rule { apply_server_side_encryption_by_default { sse_algorithm = \"AES256\" } } } } resource \"aws_dynamodb_table\" \"terraform_locks\" { name = \"terraform-up-and-running-locks\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"LockID\" attribute { name = \"LockID\" type = \"S\" } } output \"s3_bucket_arn\" { value = aws_s3_bucket.terraform_state.arn description = \"The ARN of the S3 bucket\" } ``` Then in your `plans/instance/main.tf` file you can reference the created state location with the `terraform` block and should only need the following content: ``` terraform { backend \"s3\" { # Replace this with your bucket name! bucket = \"mark-kharitonov-terraform-up-and-running-state\" key = \"workspaces-example/terraform.tfstate\" region = \"us-east-2\" # Replace this with your DynamoDB table name! dynamodb_table = \"terraform-up-and-running-locks\" encrypt = true } } resource \"aws_instance\" \"example\" { ami = \"ami-0c55b159cbfafe1f0\" instance_type = \"t2.micro\" } ``` [1]: https://www.terraform.io/docs/state/workspaces.html [2]: https://www.terraform.io/docs/state/workspaces.html#workspace-internals", "keywords": ["bill", "instance", "provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "The first creates the state S3 Bucket and the locking DynamoDB table and the second plan contains just the instance they are creating but uses the terraform code block to tell that plan where to store its state. ", "keywords": ["instance"]}, {"source": "Body", "text": "So create a hierarchy like: plans > state > main.tf instance > main.tf Inside your plans/state/main.tf file put your state location content: Then in your plans/instance/main.tf file you can reference the created state location with the terraform block and should only need the following content:", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "In the guide, the terraform plan command reports that only one resource is going to be created - an EC2 instance. ", "keywords": ["instance"]}]}