{"Id": "59991011", "PostTypeId": "1", "CreationDate": "2020-01-30T17:04:33.750", "Score": "0", "ViewCount": "298", "Body": "<p><strong>Problem Statement:</strong></p>\n\n<p>I want to create and manage assume IAM Assume roles for multiple AWS accounts using Terraform.</p>\n\n<p><strong>Goal to achieve</strong></p>\n\n<ul>\n<li>Creation of IAM Assume Roles in all the AWS accounts using Terraform module</li>\n</ul>\n\n<p><strong>Background</strong></p>\n\n<p>The IAM roles will exist in each account, and every account will have a different number of Assume roles given it is going to use by different teams with different size. Access to the account will be granted via a Jump AWS account from where a user will authenticate and then use Assume Role URL to switch accounts.</p>\n\n<p><strong>For, eg.</strong></p>\n\n<pre><code>Account A  has two IAM roles: admin_role and developer_role\nAccount B has three IAM roles: admin_role, poweruser_role and developer_role\nAccount C is a jump account, and it also has admin_role, poweruser_role and developer_role  IAM role\n\nUser A log into Account C(with poweruser_role attached to them user) then assumes to Account B(this account has a trust relationship with Account C) using the same poweruser_role.\n</code></pre>\n\n<p>What would a proper Terraform IAM solution for this Multi Account Infrastructure setup?</p>\n\n<p><a href=\"https://medium.com/slalom-build/aws-multi-account-architecture-with-terraform-yeoman-and-jenkins-7fd42ddcdda8\" rel=\"nofollow noreferrer\">This solution</a> states how to have unique IAM roles for all the accounts but does not show how to handle when AWS roles are different for each account.</p>\n\n<p>Thanks in advance.</p>\n", "OwnerUserId": "3051726", "LastActivityDate": "2020-01-31T22:00:29.887", "Title": "Manage IAM Assume Role creation using Terraform", "Tags": "<amazon-web-services><terraform><terraform-provider-aws>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "213994742", "PostHistoryTypeId": "2", "PostId": "59991011", "RevisionGUID": "be814e85-92de-4be9-9074-5ee2a4a5c368", "CreationDate": "2020-01-30T17:04:33.750", "UserId": "3051726", "Text": "**Problem Statement:**\r\n\r\nI want to create and manage assume IAM Assume roles for multiple AWS accounts using Terraform.\r\n\r\n**Goal to achieve**\r\n\r\n - Creation of IAM Assume Roles in all the AWS accounts using Terraform module\r\n\r\n**Background**\r\n\r\nThe IAM roles will exist in each account, and every account will have a different number of Assume roles given it is going to use by different teams with different size. Access to the account will be granted via a Jump AWS account from where a user will authenticate and then use Assume Role URL to switch accounts.\r\n\r\n**For, eg.**\r\n\r\n    Account A  has two IAM roles: admin_role and developer_role\r\n    Account B has three IAM roles: admin_role, poweruser_role and developer_role\r\n    Account C is a jump account, and it also has admin_role, poweruser_role and developer_role  IAM role\r\n    \r\n    User A log into Account C(with poweruser_role attached to them user) then assumes to Account B(this account has a trust relationship with Account C) using the same poweruser_role.\r\n\r\nWhat would a proper Terraform IAM solution for this Multi Account Infrastructure setup?\r\n\r\n[This solution][1] states how to have unique IAM roles for all the accounts but does not show how to handle when AWS roles are different for each account.\r\n\r\n\r\n  [1]: https://medium.com/slalom-build/aws-multi-account-architecture-with-terraform-yeoman-and-jenkins-7fd42ddcdda8\r\n\r\nThanks in advance.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "213994743", "PostHistoryTypeId": "1", "PostId": "59991011", "RevisionGUID": "be814e85-92de-4be9-9074-5ee2a4a5c368", "CreationDate": "2020-01-30T17:04:33.750", "UserId": "3051726", "Text": "Manage IAM Assume Role creation using Terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "213994744", "PostHistoryTypeId": "3", "PostId": "59991011", "RevisionGUID": "be814e85-92de-4be9-9074-5ee2a4a5c368", "CreationDate": "2020-01-30T17:04:33.750", "UserId": "3051726", "Text": "<amazon-web-services><terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "60011816", "PostTypeId": "2", "ParentId": "59991011", "CreationDate": "2020-01-31T22:00:29.887", "Score": "0", "Body": "<p>Usually, it is a good practice to create an AWS organization.\nThe organisation contains:\n - infosec account (in which you create the users),\n - master billing account (for aggregate billing)\n - Then, you create one account per environment (e.g., staging,\n   production ,dev) and establish trust relationships between them.\nBy doing this, you achieve maximum flexibility. In fact, you can create different groups for different accounts and assign individual users one or more group. </p>\n\n<p>Example:</p>\n\n<ul>\n<li>CTO is part of master billing group, staging admin and production admin</li>\n<li>Internal developer is part of staging and production admin</li>\n<li>External consultant is part of staging admin</li>\n</ul>\n\n<p>Some reference: \n<a href=\"https://www.liatrio.com/blog/secure-aws-account-structure-with-terraform-and-terragrunt\" rel=\"nofollow noreferrer\">https://www.liatrio.com/blog/secure-aws-account-structure-with-terraform-and-terragrunt</a>\nCorresponding github project:\n<a href=\"https://github.com/liatrio/aws-accounts-terraform\" rel=\"nofollow noreferrer\">https://github.com/liatrio/aws-accounts-terraform</a></p>\n", "OwnerUserId": "4948552", "LastActivityDate": "2020-01-31T22:00:29.887", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "214081254", "PostHistoryTypeId": "2", "PostId": "60011816", "RevisionGUID": "a5152075-b8be-4c28-aa22-f82967d7053e", "CreationDate": "2020-01-31T22:00:29.887", "UserId": "4948552", "Text": "Usually, it is a good practice to create an AWS organization.\r\nThe organisation contains:\r\n - infosec account (in which you create the users),\r\n - master billing account (for aggregate billing)\r\n - Then, you create one account per environment (e.g., staging,\r\n   production ,dev) and establish trust relationships between them.\r\nBy doing this, you achieve maximum flexibility. In fact, you can create different groups for different accounts and assign individual users one or more group. \r\n\r\nExample:\r\n \r\n* CTO is part of master billing group, staging admin and production admin\r\n* Internal developer is part of staging and production admin\r\n* External consultant is part of staging admin\r\n\r\nSome reference: \r\nhttps://www.liatrio.com/blog/secure-aws-account-structure-with-terraform-and-terragrunt\r\nCorresponding github project:\r\nhttps://github.com/liatrio/aws-accounts-terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The organisation contains: - infosec account (in which you create the users), - master billing account (for aggregate billing) - Then, you create one account per environment (e.g., staging, production ,dev) and establish trust relationships between them. ", "keywords": ["bill"]}, {"source": "Text", "text": "Example: * CTO is part of master billing group, staging admin and production admin * Internal developer is part of staging and production admin * External consultant is part of staging admin ", "keywords": ["bill"]}]}], "filtered-sentences": [{"source": "Body", "text": "The organisation contains: - infosec account (in which you create the users), - master billing account (for aggregate billing) - Then, you create one account per environment (e.g., staging, production ,dev) and establish trust relationships between them. ", "keywords": ["bill"]}, {"source": "Body", "text": "Example: CTO is part of master billing group, staging admin and production admin ", "keywords": ["bill"]}]}], "contains-topic": true, "filtered-sentences": []}