{"Id": "64648763", "PostTypeId": "1", "CreationDate": "2020-11-02T15:46:46.703", "Score": "0", "ViewCount": "77", "Body": "<p>Within my Terraform files or tooling I'm trying to control whether specific VMs (modules) get enabled or not with terraform apply plan.  Is there a way to do this with Terraform init or apply parameters?  Or do I just need to create a Python master script that writes terraform *.tf files to enable or disable specific VMs?  Here is an example, in my <strong>main.tf</strong> file I have several different VMs.  I would like to have terraform invoke at command line to specify which VMs get enabled or not.  Reason for this is I have a free community Cyber Range terraform project and the cost incurred could be large.  I'd like to have the options for user flexibility and more automated for a user invoking which modules get enabled (rather than commenting out a Terraform file manually).  Trying to make it more automated to dynamically enable specific VMs/Modules.  This could more easily just be done with a Python CLI tool that gives a user a menu of which ones to enable and then controls Terraform.  But would be cool to know if Terraform can do this natively with features.</p>\n<pre><code>##########################################################\n## Create Primary DC VM &amp; AD Forest\n##########################################################\nmodule &quot;dc1-vm&quot; {\n  source                        = &quot;../modules/dc1-vm&quot;\n  resource_group_name           = module.network.out_resource_group_name\n  location                      = var.location\n  prefix                        = var.prefix\n  subnet_id                     = module.network.dc_subnet_subnet_id\n  active_directory_domain       = &quot;${var.prefix}.local&quot;\n  active_directory_netbios_name = var.prefix\n  dc1private_ip_address         = var.dc1private_ip_address\n  #network_security_group_id     = &quot;${azurerm_network_security_group.vm_security_group.id}&quot;\n  admin_username = var.admin_username\n  admin_password = var.admin_password\n}\n\n##########################################################\n## Create Secondary Domain Controller VM &amp; Join domain\n##########################################################\n/*module &quot;dc2-vm&quot; {\n  source                        =  &quot;../modules/dc2-vm&quot;\n  resource_group_name           = &quot;${module.dc1-vm.out_resource_group_name}&quot;\n  location                      = &quot;${var.location}&quot;\n  dcavailability_set_id         = &quot;${module.dc1-vm.out_dcavailabilityset}&quot;\n  prefix                        = &quot;${var.prefix}&quot;\n  subnet_id                     = &quot;${module.network.dc_subnet_subnet_id}&quot;\n  active_directory_domain       = &quot;${var.prefix}.local&quot;\n  active_directory_username     = &quot;${var.admin_username}&quot;\n  active_directory_password     = &quot;${var.admin_password}&quot;\n  active_directory_netbios_name = &quot;${var.prefix}&quot;\n  dc2private_ip_address         = &quot;${var.dc2private_ip_address}&quot;\n  admin_username                = &quot;${var.admin_username}&quot;\n  admin_password                = &quot;${var.admin_password}&quot;\n  domainadmin_username          = &quot;${var.domainadmin_username}&quot;\n}*/\n\n##########################################################\n## Create the AriaCloud Adversary 1 \n##########################################################\nmodule &quot;adversary1-vm&quot; {\n  source              = &quot;../modules/adversary1-vm&quot;\n  resource_group_name = module.network.out_resource_group_name\n  location            = var.location\n  prefix              = var.prefix\n  subnet_id           = module.network.user2_subnet_subnet_id\n}\n\n### Create Windows 10 Pro VM-1\nmodule &quot;win10-vm-1&quot; {\n  source                    = &quot;../modules/win10-vm-1&quot;\n  resource_group_name       = module.dc1-vm.out_resource_group_name\n  location                  = var.location\n  prefix                    = var.prefix\n  endpoint1_machine_name    = var.endpoint1_machine_name\n  endpoint1_username        = var.endpoint1_username\n  subnet_id                 = module.network.user1_subnet_subnet_id\n  active_directory_domain   = &quot;${var.prefix}.local&quot;\n  active_directory_username = var.admin_username\n  active_directory_password = var.admin_password\n  admin_username            = var.admin_username\n  admin_password            = var.admin_password\n  vmcount                   = var.vmcount\n}\n\n\nmodule &quot;win10-vm-2&quot; {\n  source                    = &quot;../modules/win10-vm-2&quot;\n  resource_group_name       = module.dc1-vm.out_resource_group_name\n  location                  = var.location\n  prefix                    = var.prefix\n  endpoint2_machine_name    = var.endpoint2_machine_name\n  endpoint2_username        = var.endpoint2_username\n  subnet_id                 = module.network.user1_subnet_subnet_id\n  active_directory_domain   = &quot;${var.prefix}.local&quot;\n  active_directory_username = var.admin_username\n  active_directory_password = var.admin_password\n  admin_username            = var.admin_username\n  admin_password            = var.admin_password\n  vmcount                   = var.vmcount\n}\n</code></pre>\n", "OwnerUserId": "13688841", "LastActivityDate": "2020-11-03T01:34:25.480", "Title": "Terraform enable specific VMs via command line", "Tags": "<terraform>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "234098124", "PostHistoryTypeId": "2", "PostId": "64648763", "RevisionGUID": "93e52dcd-9e7a-413c-8426-b598e7d5ac7d", "CreationDate": "2020-11-02T15:46:46.703", "UserId": "13688841", "Text": "Within my Terraform files or tooling I'm trying to control whether specific VMs (modules) get enabled or not with terraform apply plan.  Is there a way to do this with Terraform init or apply parameters?  Or do I just need to create a Python master script that writes terraform *.tf files to enable or disable specific VMs?  Here is an example, in my **main.tf** file I have several different VMs.  I would like to have terraform invoke at command line to specify which VMs get enabled or not.  Reason for this is I have a free community Cyber Range terraform project and the cost incurred could be large.  I'd like to have the options for user flexibility and more automated for a user invoking which modules get enabled (rather than commenting out a Terraform file manually).  Trying to make it more automated to dynamically enable specific VMs/Modules.  This could more easily just be done with a Python CLI tool that gives a user a menu of which ones to enable and then controls Terraform.  But would be cool to know if Terraform can do this natively with features.\r\n```\r\n##########################################################\r\n## Create Primary DC VM & AD Forest\r\n##########################################################\r\nmodule \"dc1-vm\" {\r\n  source                        = \"../modules/dc1-vm\"\r\n  resource_group_name           = module.network.out_resource_group_name\r\n  location                      = var.location\r\n  prefix                        = var.prefix\r\n  subnet_id                     = module.network.dc_subnet_subnet_id\r\n  active_directory_domain       = \"${var.prefix}.local\"\r\n  active_directory_netbios_name = var.prefix\r\n  dc1private_ip_address         = var.dc1private_ip_address\r\n  #network_security_group_id     = \"${azurerm_network_security_group.vm_security_group.id}\"\r\n  admin_username = var.admin_username\r\n  admin_password = var.admin_password\r\n}\r\n\r\n##########################################################\r\n## Create Secondary Domain Controller VM & Join domain\r\n##########################################################\r\n/*module \"dc2-vm\" {\r\n  source                        =  \"../modules/dc2-vm\"\r\n  resource_group_name           = \"${module.dc1-vm.out_resource_group_name}\"\r\n  location                      = \"${var.location}\"\r\n  dcavailability_set_id         = \"${module.dc1-vm.out_dcavailabilityset}\"\r\n  prefix                        = \"${var.prefix}\"\r\n  subnet_id                     = \"${module.network.dc_subnet_subnet_id}\"\r\n  active_directory_domain       = \"${var.prefix}.local\"\r\n  active_directory_username     = \"${var.admin_username}\"\r\n  active_directory_password     = \"${var.admin_password}\"\r\n  active_directory_netbios_name = \"${var.prefix}\"\r\n  dc2private_ip_address         = \"${var.dc2private_ip_address}\"\r\n  admin_username                = \"${var.admin_username}\"\r\n  admin_password                = \"${var.admin_password}\"\r\n  domainadmin_username          = \"${var.domainadmin_username}\"\r\n}*/\r\n\r\n##########################################################\r\n## Create the AriaCloud Adversary 1 \r\n##########################################################\r\nmodule \"adversary1-vm\" {\r\n  source              = \"../modules/adversary1-vm\"\r\n  resource_group_name = module.network.out_resource_group_name\r\n  location            = var.location\r\n  prefix              = var.prefix\r\n  subnet_id           = module.network.user2_subnet_subnet_id\r\n}\r\n\r\n### Create Windows 10 Pro VM-1\r\nmodule \"win10-vm-1\" {\r\n  source                    = \"../modules/win10-vm-1\"\r\n  resource_group_name       = module.dc1-vm.out_resource_group_name\r\n  location                  = var.location\r\n  prefix                    = var.prefix\r\n  endpoint1_machine_name    = var.endpoint1_machine_name\r\n  endpoint1_username        = var.endpoint1_username\r\n  subnet_id                 = module.network.user1_subnet_subnet_id\r\n  active_directory_domain   = \"${var.prefix}.local\"\r\n  active_directory_username = var.admin_username\r\n  active_directory_password = var.admin_password\r\n  admin_username            = var.admin_username\r\n  admin_password            = var.admin_password\r\n  vmcount                   = var.vmcount\r\n}\r\n\r\n\r\nmodule \"win10-vm-2\" {\r\n  source                    = \"../modules/win10-vm-2\"\r\n  resource_group_name       = module.dc1-vm.out_resource_group_name\r\n  location                  = var.location\r\n  prefix                    = var.prefix\r\n  endpoint2_machine_name    = var.endpoint2_machine_name\r\n  endpoint2_username        = var.endpoint2_username\r\n  subnet_id                 = module.network.user1_subnet_subnet_id\r\n  active_directory_domain   = \"${var.prefix}.local\"\r\n  active_directory_username = var.admin_username\r\n  active_directory_password = var.admin_password\r\n  admin_username            = var.admin_username\r\n  admin_password            = var.admin_password\r\n  vmcount                   = var.vmcount\r\n}\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Reason for this is I have a free community Cyber Range terraform project and the cost incurred could be large. ", "keywords": ["cost"]}, {"source": "Text", "text": "``` ########################################################## ## Create Primary DC VM & AD Forest ########################################################## module \"dc1-vm\" { source = \"../modules/dc1-vm\" resource_group_name = module.network.out_resource_group_name location = var.location prefix = var.prefix subnet_id = module.network.dc_subnet_subnet_id active_directory_domain = \"${var.prefix}.local\" active_directory_netbios_name = var.prefix dc1private_ip_address = var.dc1private_ip_address #network_security_group_id = \"${azurerm_network_security_group.vm_security_group.id}\" admin_username = var.admin_username admin_password = var.admin_password } ########################################################## ## Create Secondary Domain Controller VM & Join domain ########################################################## /*module \"dc2-vm\" { source = \"../modules/dc2-vm\" resource_group_name = \"${module.dc1-vm.out_resource_group_name}\" location = \"${var.location}\" dcavailability_set_id = \"${module.dc1-vm.out_dcavailabilityset}\" prefix = \"${var.prefix}\" subnet_id = \"${module.network.dc_subnet_subnet_id}\" active_directory_domain = \"${var.prefix}.local\" active_directory_username = \"${var.admin_username}\" active_directory_password = \"${var.admin_password}\" active_directory_netbios_name = \"${var.prefix}\" dc2private_ip_address = \"${var.dc2private_ip_address}\" admin_username = \"${var.admin_username}\" admin_password = \"${var.admin_password}\" domainadmin_username = \"${var.domainadmin_username}\" }*/ ########################################################## ## Create the AriaCloud Adversary 1 ########################################################## module \"adversary1-vm\" { source = \"../modules/adversary1-vm\" resource_group_name = module.network.out_resource_group_name location = var.location prefix = var.prefix subnet_id = module.network.user2_subnet_subnet_id } ### Create Windows 10 Pro VM-1 module \"win10-vm-1\" { source = \"../modules/win10-vm-1\" resource_group_name = module.dc1-vm.out_resource_group_name location = var.location prefix = var.prefix endpoint1_machine_name = var.endpoint1_machine_name endpoint1_username = var.endpoint1_username subnet_id = module.network.user1_subnet_subnet_id active_directory_domain = \"${var.prefix}.local\" active_directory_username = var.admin_username active_directory_password = var.admin_password admin_username = var.admin_username admin_password = var.admin_password vmcount = var.vmcount } module \"win10-vm-2\" { source = \"../modules/win10-vm-2\" resource_group_name = module.dc1-vm.out_resource_group_name location = var.location prefix = var.prefix endpoint2_machine_name = var.endpoint2_machine_name endpoint2_username = var.endpoint2_username subnet_id = module.network.user1_subnet_subnet_id active_directory_domain = \"${var.prefix}.local\" active_directory_username = var.admin_username active_directory_password = var.admin_password admin_username = var.admin_username admin_password = var.admin_password vmcount = var.vmcount } ```", "keywords": ["domain"]}]}, {"Id": "234098125", "PostHistoryTypeId": "1", "PostId": "64648763", "RevisionGUID": "93e52dcd-9e7a-413c-8426-b598e7d5ac7d", "CreationDate": "2020-11-02T15:46:46.703", "UserId": "13688841", "Text": "Terraform enable specific VMs via command line", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "234098126", "PostHistoryTypeId": "3", "PostId": "64648763", "RevisionGUID": "93e52dcd-9e7a-413c-8426-b598e7d5ac7d", "CreationDate": "2020-11-02T15:46:46.703", "UserId": "13688841", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "64655611", "PostTypeId": "2", "ParentId": "64648763", "CreationDate": "2020-11-03T01:34:25.480", "Score": "0", "Body": "<p>I found the Resource Targeting feature in Terraform which looks like it fits the requirement:\n<a href=\"https://www.hashicorp.com/blog/resource-targeting-in-terraform\" rel=\"nofollow noreferrer\">https://www.hashicorp.com/blog/resource-targeting-in-terraform</a></p>\n", "OwnerUserId": "13688841", "LastActivityDate": "2020-11-03T01:34:25.480", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "234127144", "PostHistoryTypeId": "2", "PostId": "64655611", "RevisionGUID": "0b57d9e8-7906-457a-8bd6-fdb2f506ed99", "CreationDate": "2020-11-03T01:34:25.480", "UserId": "13688841", "Text": "I found the Resource Targeting feature in Terraform which looks like it fits the requirement:\r\nhttps://www.hashicorp.com/blog/resource-targeting-in-terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I found the Resource Targeting feature in Terraform which looks like it fits the requirement: https://www.hashicorp.com/blog/resource-targeting-in-terraform", "keywords": ["feature"]}]}], "filtered-sentences": [{"source": "Body", "text": "I found the Resource Targeting feature in Terraform which looks like it fits the requirement: https://www.hashicorp.com/blog/resource-targeting-in-terraform", "keywords": ["feature"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Reason for this is I have a free community Cyber Range terraform project and the cost incurred could be large. ", "keywords": ["cost"]}]}