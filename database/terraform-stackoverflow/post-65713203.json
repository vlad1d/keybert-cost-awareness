{"Id": "65713203", "PostTypeId": "1", "AcceptedAnswerId": "65714147", "CreationDate": "2021-01-14T03:52:34.130", "Score": "-2", "ViewCount": "204", "Body": "<p>Had a question regarding infrastructure as code on AWS.</p>\n<p>Wondering how to do this (the process of deploying) and also why is this an efficient method for architecture? Also, are there other methods that should be looked at over this?</p>\n<p>I am looking to deploy this for a startup I am working for and need assistance in getting this going. Any help is appreciated.</p>\n<p>Thank you.</p>\n", "OwnerUserId": "12482779", "LastActivityDate": "2021-01-14T06:03:58.673", "Title": "How to deploy Infrastructure as Code on AWS", "Tags": "<amazon-web-services><terraform><aws-cloudformation><infrastructure-as-code>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "238712951", "PostHistoryTypeId": "2", "PostId": "65713203", "RevisionGUID": "50591e0f-403d-4a76-a5df-13cfcbdf87a6", "CreationDate": "2021-01-14T03:52:34.130", "UserId": "12482779", "Text": "Had a question regarding infrastructure as code on AWS. \r\n\r\nWondering how to do this (the process of deploying) and also why is this an efficient method for architecture? Also, are there other methods that should be looked at over this?\r\n\r\nI am looking to deploy this for a startup I am working for and need assistance in getting this going. Any help is appreciated. \r\n\r\nThank you. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Wondering how to do this (the process of deploying) and also why is this an efficient method for architecture? ", "keywords": ["efficient"]}]}, {"Id": "238712952", "PostHistoryTypeId": "1", "PostId": "65713203", "RevisionGUID": "50591e0f-403d-4a76-a5df-13cfcbdf87a6", "CreationDate": "2021-01-14T03:52:34.130", "UserId": "12482779", "Text": "How to deploy Infrastructure as Code on AWS", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "238712953", "PostHistoryTypeId": "3", "PostId": "65713203", "RevisionGUID": "50591e0f-403d-4a76-a5df-13cfcbdf87a6", "CreationDate": "2021-01-14T03:52:34.130", "UserId": "12482779", "Text": "<amazon-web-services><terraform><aws-cloudformation><infrastructure-as-code>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "65714147", "PostTypeId": "2", "ParentId": "65713203", "CreationDate": "2021-01-14T06:03:58.673", "Score": "0", "Body": "<p>From <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html\" rel=\"nofollow noreferrer\">What is AWS CloudFormation?</a>:</p>\n<blockquote>\n<p>AWS CloudFormation is a service that helps you model and set up your Amazon Web Services resources so that you can spend less time managing those resources and more time focusing on your applications that run in AWS. You create a <strong>template</strong> that describes all the AWS resources that you want (like Amazon EC2 instances or Amazon RDS DB instances), and AWS CloudFormation takes care of <strong>provisioning and configuring</strong> those resources for you. You don't need to individually create and configure AWS resources and figure out what's dependent on what; AWS CloudFormation handles all of that.</p>\n</blockquote>\n<p>So, instead of manually creating each bit of architecture (network, instances, queues, storage, etc), you can define them in a template and CloudFormation will deploy them. It is smart enough to mostly know the correct order of creation (eg creating the network before creating an Amazon EC2 instance <em>within</em> the network) and it can also remove resources when the 'stack' is no longer required.</p>\n<p>Other benefits:</p>\n<ul>\n<li>The template effectively <strong>documents</strong> the infrastructure</li>\n<li>Infrastructure can be checked into a <strong>source code repository</strong>, and versioned</li>\n<li>Infrastructure can be <strong>repeatedly and consistently deployed</strong> (eg Test environment matches Production environment)</li>\n<li>Changes can be made to the template and CloudFormation can update the 'stack' by just deploying the changes</li>\n</ul>\n<p>There are tools (eg <a href=\"https://former2.com/\" rel=\"nofollow noreferrer\">https://former2.com/</a>) that can generate the template from existing infrastructure, or just create it from code snippets taken from the documentation.</p>\n<p>Here's an overview: <a href=\"https://www.youtube.com/watch?v=1h-GPXQrLZw\" rel=\"nofollow noreferrer\">Simplify Your Infrastructure Management Using AWS CloudFormation - YouTube</a></p>\n<p>There are also tools like <a href=\"https://www.terraform.io/\" rel=\"nofollow noreferrer\">Terraform</a> that can deploy across multiple cloud services.</p>\n", "OwnerUserId": "174777", "LastActivityDate": "2021-01-14T06:03:58.673", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "238716769", "PostHistoryTypeId": "2", "PostId": "65714147", "RevisionGUID": "c36d7b2c-f52c-4d14-bfaf-7b6c7dbc53af", "CreationDate": "2021-01-14T06:03:58.673", "UserId": "174777", "Text": "From [What is AWS CloudFormation?](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html):\r\n\r\n>AWS CloudFormation is a service that helps you model and set up your Amazon Web Services resources so that you can spend less time managing those resources and more time focusing on your applications that run in AWS. You create a **template** that describes all the AWS resources that you want (like Amazon EC2 instances or Amazon RDS DB instances), and AWS CloudFormation takes care of **provisioning and configuring** those resources for you. You don't need to individually create and configure AWS resources and figure out what's dependent on what; AWS CloudFormation handles all of that.\r\n\r\nSo, instead of manually creating each bit of architecture (network, instances, queues, storage, etc), you can define them in a template and CloudFormation will deploy them. It is smart enough to mostly know the correct order of creation (eg creating the network before creating an Amazon EC2 instance _within_ the network) and it can also remove resources when the 'stack' is no longer required.\r\n\r\nOther benefits:\r\n- The template effectively **documents** the infrastructure\r\n- Infrastructure can be checked into a **source code repository**, and versioned\r\n- Infrastructure can be **repeatedly and consistently deployed** (eg Test environment matches Production environment)\r\n- Changes can be made to the template and CloudFormation can update the 'stack' by just deploying the changes\r\n\r\nThere are tools (eg https://former2.com/) that can generate the template from existing infrastructure, or just create it from code snippets taken from the documentation.\r\n\r\nHere's an overview: [Simplify Your Infrastructure Management Using AWS CloudFormation - YouTube](https://www.youtube.com/watch?v=1h-GPXQrLZw)\r\n\r\nThere are also tools like [Terraform](https://www.terraform.io/) that can deploy across multiple cloud services.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "So, instead of manually creating each bit of architecture (network, instances, queues, storage, etc), you can define them in a template and CloudFormation will deploy them. ", "keywords": ["storage"]}, {"source": "Text", "text": "It is smart enough to mostly know the correct order of creation (eg creating the network before creating an Amazon EC2 instance _within_ the network) and it can also remove resources when the 'stack' is no longer required. ", "keywords": ["instance"]}, {"source": "Text", "text": "Other benefits: - The template effectively **documents** the infrastructure - Infrastructure can be checked into a **source code repository**, and versioned - Infrastructure can be **repeatedly and consistently deployed** (eg Test environment matches Production environment) - Changes can be made to the template and CloudFormation can update the 'stack' by just deploying the changes ", "keywords": ["change", "test"]}]}], "filtered-sentences": [{"source": "Body", "text": "So, instead of manually creating each bit of architecture (network, instances, queues, storage, etc), you can define them in a template and CloudFormation will deploy them. ", "keywords": ["storage"]}, {"source": "Body", "text": "It is smart enough to mostly know the correct order of creation (eg creating the network before creating an Amazon EC2 instance within the network) and it can also remove resources when the 'stack' is no longer required. ", "keywords": ["instance"]}, {"source": "Body", "text": "Other benefits: The template effectively documents the infrastructure Infrastructure can be checked into a source code repository, and versioned Infrastructure can be repeatedly and consistently deployed (eg Test environment matches Production environment) Changes can be made to the template and CloudFormation can update the 'stack' by just deploying the changes ", "keywords": ["change", "test"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Wondering how to do this (the process of deploying) and also why is this an efficient method for architecture? ", "keywords": ["efficient"]}]}