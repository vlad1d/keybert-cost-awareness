{"Id": "70657780", "PostTypeId": "1", "AcceptedAnswerId": "70658040", "CreationDate": "2022-01-10T19:14:00.327", "Score": "3", "ViewCount": "3383", "Body": "<p>In <a href=\"https://aws.amazon.com/blogs/database/best-practices-for-converting-a-single-az-amazon-rds-instance-to-a-multi-az-instance/\" rel=\"nofollow noreferrer\">this</a> AWS Database Blog, they assert that</p>\n<blockquote>\n<p>You can set up Amazon RDS in a Single-AZ database (DB) instance or a\nMulti-AZ DB instance for high availability requirements</p>\n</blockquote>\n<p>and that you can</p>\n<blockquote>\n<p>...modify existing Single-AZ instances to become Multi-AZ deployments.</p>\n</blockquote>\n<p>Furthermore,</p>\n<blockquote>\n<p>...you can create a Multi-AZ read replica, synchronize it with your\nSingle-AZ DB instance, and then promote it as your primary DB instance\nto minimize latencies during conversion.</p>\n</blockquote>\n<p>Additionally, in v1.32 of the official <a href=\"https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0\" rel=\"nofollow noreferrer\">AWS VPC Module</a> there are multiple references to the usage of <a href=\"https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0#nat-gateway-scenarios\" rel=\"nofollow noreferrer\">single_nat_gateway</a>, particularly</p>\n<blockquote>\n<p>If single_nat_gateway = true, then all private subnets will route\ntheir Internet traffic through this single NAT gateway.</p>\n</blockquote>\n<p>and in the official RDS module, <code>multi_az</code> is shown as defaulting to <code>false</code> (<a href=\"https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/latest#input_multi_az\" rel=\"nofollow noreferrer\">link</a>).</p>\n<p>Despite this, I am getting the following error</p>\n<pre><code>\u2577\n\u2502 Error: DBSubnetGroupDoesNotCoverEnoughAZs: The DB subnet group doesn't meet Availability Zone (AZ) coverage requirement. Current AZ coverage: us-west-2a. Add subnets to cover at least 2 AZs.\n\u2502   status code: 400, request id: *****\n\u2502 \n\u2502   with module.rds.module.db_subnet_group.aws_db_subnet_group.this[0],\n\u2502   on .terraform/modules/rds/modules/db_subnet_group/main.tf line 8, in resource &quot;aws_db_subnet_group&quot; &quot;this&quot;:\n\u2502    8: resource &quot;aws_db_subnet_group&quot; &quot;this&quot; {\n</code></pre>\n<p>when attempting to <code>terraform apply</code> this <code>main.tf</code> configuration:</p>\n<pre><code>module &quot;rds&quot; {\n  source                                = &quot;terraform-aws-modules/rds/aws&quot;\n  version                               = &quot;~&gt; 3.4.0&quot;\n  identifier                            = &quot;${var.env}-${var.user}-${local.db_name}&quot;\n  engine                                = var.postgres.engine\n  engine_version                        = var.postgres.engine_version\n  family                                = var.postgres.family\n  major_engine_version                  = var.postgres.major_engine_version\n  instance_class                        = var.postgres.instance_class\n  allocated_storage                     = var.postgres.allocated_storage\n  max_allocated_storage                 = var.postgres.max_allocated_storage\n  storage_encrypted                     = var.postgres.storage_encrypted\n  password                              = random_password.password.result\n  port                                  = var.postgres.port\n  multi_az                              = false\n  subnet_ids                            = [data.aws_subnet.priv1.id]\n  vpc_security_group_ids                = [module.db_security_group.security_group_id]\n  maintenance_window                    = var.postgres.maintenance_window\n  backup_window                         = var.postgres.backup_window\n  enabled_cloudwatch_logs_exports       = var.postgres.enabled_cloudwatch_logs_exports\n  backup_retention_period               = var.postgres.backup_retention_period\n  skip_final_snapshot                   = var.postgres.skip_final_snapshot\n  deletion_protection                   = var.postgres.deletion_protection\n  performance_insights_enabled          = var.postgres.performance_insights_enabled\n  performance_insights_retention_period = var.postgres.performance_insights_retention_period\n  create_monitoring_role                = var.postgres.create_monitoring_role\n  monitoring_role_name                  = &quot;${var.env}-${var.user}-${var.postgres.monitoring_role_name}&quot;\n  monitoring_interval                   = var.postgres.monitoring_interval\n  snapshot_identifier                   = var.postgres.snapshot_identifier\n  iam_database_authentication_enabled   = var.postgres.iam_auth\n  apply_immediately                     = true\n  tags = {\n    Name        = &quot;${var.env}-${var.user}-rds&quot;\n    Terraform   = &quot;true&quot;\n    Environment = var.env\n    Created     = timestamp()\n  }\n}\n</code></pre>\n<p>with this <code>postgres</code> variable defined in my <code>terraform.tfvars</code>:</p>\n<pre><code>postgres = {\n  db_name = &quot;postgres-db&quot;\n  # All available versions: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts\n  engine                                = &quot;postgres&quot;\n  engine_version                        = &quot;11.12&quot;\n  family                                = &quot;postgres11&quot; # DB parameter group\n  major_engine_version                  = &quot;11&quot;         # DB option group\n  instance_class                        = &quot;db.t2.micro&quot;\n  allocated_storage                     = 100\n  max_allocated_storage                 = 200\n  storage_encrypted                     = false\n  port                                  = 5432\n  multi_az                              = false\n  maintenance_window                    = &quot;Mon:00:00-Mon:03:00&quot;\n  backup_window                         = &quot;03:00-06:00&quot;\n  enabled_cloudwatch_logs_exports       = [&quot;postgresql&quot;, &quot;upgrade&quot;]\n  backup_retention_period               = 0\n  skip_final_snapshot                   = true\n  deletion_protection                   = false\n  performance_insights_enabled          = false\n  performance_insights_retention_period = 7\n  create_monitoring_role                = true\n  monitoring_role_name                  = &quot;monitoring_role&quot;\n  monitoring_interval                   = 60\n  snapshot_identifier                   = &quot;arn:aws:rds:us-west-2:999999999999:snapshot:rds-ss&quot;\n  iam_auth                              = true\n}\n</code></pre>\n<p>Similar questions on SO seem to all have answers with the theme that you <em>must</em> provide multiple availability zones, which implies at least two subnets, which - if you are creating them manually as private subnets - would then each need their own NAT gateway.  That seems unnecessarily expensive and constraining, especially for development and test environments.</p>\n<p>How can I deploy a single-az RDS Postgres instance with these components?</p>\n", "OwnerUserId": "2780360", "LastEditorUserId": "2780360", "LastEditDate": "2022-01-10T19:20:40.600", "LastActivityDate": "2022-01-10T19:38:36.410", "Title": "How to make a single-AZ (non-HA) RDS instance with terraform?", "Tags": "<amazon-web-services><terraform><amazon-rds><terraform-provider-aws><high-availability>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "261666204", "PostHistoryTypeId": "2", "PostId": "70657780", "RevisionGUID": "eaa55aa0-dcae-4ccb-b318-db8cb013896b", "CreationDate": "2022-01-10T19:14:00.327", "UserId": "2780360", "Text": "In [this][1] AWS Database Blog, they assert that \r\n\r\n> You can set up Amazon RDS in a Single-AZ database (DB) instance or a\r\n> Multi-AZ DB instance for high availability requirements\r\n\r\nand that you can \r\n\r\n> ...modify existing Single-AZ instances to become Multi-AZ deployments.\r\n\r\n Furthermore, \r\n\r\n> ...you can create a Multi-AZ read replica, synchronize it with your\r\n> Single-AZ DB instance, and then promote it as your primary DB instance\r\n> to minimize latencies during conversion.\r\n\r\nAdditionally, in v1.32 of the official [AWS VPC Module][2] there are multiple references to the usage of [single_nat_gateway][3], particularly \r\n\r\n> If single_nat_gateway = true, then all private subnets will route\r\n> their Internet traffic through this single NAT gateway.\r\n\r\nand in the official RDS module, `multi_az` is shown as defaulting to `false` ([link][4]).\r\n\r\nDespite this, I am getting the following error\r\n\r\n    \u2577\r\n    \u2502 Error: DBSubnetGroupDoesNotCoverEnoughAZs: The DB subnet group doesn't meet Availability Zone (AZ) coverage requirement. Current AZ coverage: us-west-2a. Add subnets to cover at least 2 AZs.\r\n    \u2502  status code: 400, request id: *****\r\n    \u2502 \r\n    \u2502   with module.rds.module.db_subnet_group.aws_db_subnet_group.this[0],\r\n    \u2502   on .terraform/modules/rds/modules/db_subnet_group/main.tf line 8, in resource \"aws_db_subnet_group\" \"this\":\r\n    \u2502    8: resource \"aws_db_subnet_group\" \"this\" {\r\n\r\nwhen attempting to `terraform apply` this `main.tf` configuration: \r\n\r\n    module \"rds\" {\r\n      source                                = \"terraform-aws-modules/rds/aws\"\r\n      version                               = \"~> 3.4.0\"\r\n      identifier                            = \"${var.env}-${var.user}-${local.db_name}\"\r\n      engine                                = var.postgres.engine\r\n      engine_version                        = var.postgres.engine_version\r\n      family                                = var.postgres.family\r\n      major_engine_version                  = var.postgres.major_engine_version\r\n      instance_class                        = var.postgres.instance_class\r\n      allocated_storage                     = var.postgres.allocated_storage\r\n      max_allocated_storage                 = var.postgres.max_allocated_storage\r\n      storage_encrypted                     = var.postgres.storage_encrypted\r\n      password                              = random_password.password.result\r\n      port                                  = var.postgres.port\r\n      multi_az                              = false\r\n      subnet_ids                            = [data.aws_subnet.priv1.id]\r\n      vpc_security_group_ids                = [module.db_security_group.security_group_id]\r\n      maintenance_window                    = var.postgres.maintenance_window\r\n      backup_window                         = var.postgres.backup_window\r\n      enabled_cloudwatch_logs_exports       = var.postgres.enabled_cloudwatch_logs_exports\r\n      backup_retention_period               = var.postgres.backup_retention_period\r\n      skip_final_snapshot                   = var.postgres.skip_final_snapshot\r\n      deletion_protection                   = var.postgres.deletion_protection\r\n      performance_insights_enabled          = var.postgres.performance_insights_enabled\r\n      performance_insights_retention_period = var.postgres.performance_insights_retention_period\r\n      create_monitoring_role                = var.postgres.create_monitoring_role\r\n      monitoring_role_name                  = \"${var.env}-${var.user}-${var.postgres.monitoring_role_name}\"\r\n      monitoring_interval                   = var.postgres.monitoring_interval\r\n      snapshot_identifier                   = var.postgres.snapshot_identifier\r\n      iam_database_authentication_enabled   = var.postgres.iam_auth\r\n      apply_immediately                     = true\r\n      tags = {\r\n        Name        = \"${var.env}-${var.user}-rds\"\r\n        Terraform   = \"true\"\r\n        Environment = var.env\r\n        Created     = timestamp()\r\n      }\r\n    }\r\n\r\nwith this `postgres` variable defined in my `terraform.tfvars`:\r\n\r\n    postgres = {\r\n      db_name = \"postgres-db\"\r\n      # All available versions: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts\r\n      engine               = \"postgres\"\r\n      engine_version       = \"11.12\"\r\n      family               = \"postgres11\" # DB parameter group\r\n      major_engine_version = \"11\"         # DB option group\r\n      instance_class       = \"db.t2.micro\"\r\n    \r\n      allocated_storage     = 100\r\n      max_allocated_storage = 200\r\n      storage_encrypted     = false\r\n      port                                  = 5432\r\n      multi_az                              = false\r\n      maintenance_window                    = \"Mon:00:00-Mon:03:00\"\r\n      backup_window                         = \"03:00-06:00\"\r\n      enabled_cloudwatch_logs_exports       = [\"postgresql\", \"upgrade\"]\r\n      backup_retention_period               = 0\r\n      skip_final_snapshot                   = true\r\n      deletion_protection                   = false\r\n      performance_insights_enabled          = false\r\n      performance_insights_retention_period = 7\r\n      create_monitoring_role                = true\r\n      monitoring_role_name                  = \"monitoring_role\"\r\n      monitoring_interval                   = 60\r\n      snapshot_identifier                   = \"arn:aws:rds:us-west-2:999999999999:snapshot:rds-ss\"\r\n      iam_auth                              = true\r\n    }\r\n\r\nSimilar questions on SO seem to all have answers with the theme that you *must* provide multiple availability zones, which implies at least two subnets, which - if you are creating them manually as private subnets - would then each need their own NAT gateway.  That seems unnecessarily expensive and constraining, especially for development and test environments.  \r\n\r\nHow can I deploy a single-az RDS Postgres instance with these components?\r\n\r\n\r\n  [1]: https://aws.amazon.com/blogs/database/best-practices-for-converting-a-single-az-amazon-rds-instance-to-a-multi-az-instance/\r\n  [2]: https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0\r\n  [3]: https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0#nat-gateway-scenarios\r\n  [4]: https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/latest#input_multi_az", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "In [this][1] AWS Database Blog, they assert that > You can set up Amazon RDS in a Single-AZ database (DB) instance or a > Multi-AZ DB instance for high availability requirements and that you can > ...modify existing Single-AZ instances to become Multi-AZ deployments. ", "keywords": ["instance"]}, {"source": "Text", "text": "Furthermore, > ...you can create a Multi-AZ read replica, synchronize it with your > Single-AZ DB instance, and then promote it as your primary DB instance > to minimize latencies during conversion. ", "keywords": ["instance"]}, {"source": "Text", "text": "Additionally, in v1.32 of the official [AWS VPC Module][2] there are multiple references to the usage of [single_nat_gateway][3], particularly > If single_nat_gateway = true, then all private subnets will route > their Internet traffic through this single NAT gateway. ", "keywords": ["nat"]}, {"source": "Text", "text": "Add subnets to cover at least 2 AZs. \u2502 status code: 400, request id: ***** \u2502 \u2502 with module.rds.module.db_subnet_group.aws_db_subnet_group.this[0], \u2502 on .terraform/modules/rds/modules/db_subnet_group/main.tf line 8, in resource \"aws_db_subnet_group\" \"this\": \u2502 8: resource \"aws_db_subnet_group\" \"this\" { when attempting to `terraform apply` this `main.tf` configuration: module \"rds\" { source = \"terraform-aws-modules/rds/aws\" version = \"~> 3.4.0\" identifier = \"${var.env}-${var.user}-${local.db_name}\" engine = var.postgres.engine engine_version = var.postgres.engine_version family = var.postgres.family major_engine_version = var.postgres.major_engine_version instance_class = var.postgres.instance_class allocated_storage = var.postgres.allocated_storage max_allocated_storage = var.postgres.max_allocated_storage storage_encrypted = var.postgres.storage_encrypted password = random_password.password.result port = var.postgres.port multi_az = false subnet_ids = [data.aws_subnet.priv1.id] vpc_security_group_ids = [module.db_security_group.security_group_id] maintenance_window = var.postgres.maintenance_window backup_window = var.postgres.backup_window enabled_cloudwatch_logs_exports = var.postgres.enabled_cloudwatch_logs_exports backup_retention_period = var.postgres.backup_retention_period skip_final_snapshot = var.postgres.skip_final_snapshot deletion_protection = var.postgres.deletion_protection performance_insights_enabled = var.postgres.performance_insights_enabled performance_insights_retention_period = var.postgres.performance_insights_retention_period create_monitoring_role = var.postgres.create_monitoring_role monitoring_role_name = \"${var.env}-${var.user}-${var.postgres.monitoring_role_name}\" monitoring_interval = var.postgres.monitoring_interval snapshot_identifier = var.postgres.snapshot_identifier iam_database_authentication_enabled = var.postgres.iam_auth apply_immediately = true tags = { Name = \"${var.env}-${var.user}-rds\" Terraform = \"true\" Environment = var.env Created = timestamp() } } with this `postgres` variable defined in my `terraform.tfvars`: postgres = { db_name = \"postgres-db\" # All available versions: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts engine = \"postgres\" engine_version = \"11.12\" family = \"postgres11\" # DB parameter group major_engine_version = \"11\" # DB option group instance_class = \"db.t2.micro\" allocated_storage = 100 max_allocated_storage = 200 storage_encrypted = false port = 5432 multi_az = false maintenance_window = \"Mon:00:00-Mon:03:00\" backup_window = \"03:00-06:00\" enabled_cloudwatch_logs_exports = [\"postgresql\", \"upgrade\"] backup_retention_period = 0 skip_final_snapshot = true deletion_protection = false performance_insights_enabled = false performance_insights_retention_period = 7 create_monitoring_role = true monitoring_role_name = \"monitoring_role\" monitoring_interval = 60 snapshot_identifier = \"arn:aws:rds:us-west-2:999999999999:snapshot:rds-ss\" iam_auth = true } Similar questions on SO seem to all have answers with the theme that you *must* provide multiple availability zones, which implies at least two subnets, which - if you are creating them manually as private subnets - would then each need their own NAT gateway. ", "keywords": ["nat"]}, {"source": "Text", "text": "That seems unnecessarily expensive and constraining, especially for development and test environments. ", "keywords": ["expense", "test"]}, {"source": "Text", "text": "How can I deploy a single-az RDS Postgres instance with these components? [1]: https://aws.amazon.com/blogs/database/best-practices-for-converting-a-single-az-amazon-rds-instance-to-a-multi-az-instance/ [2]: https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0 [3]: https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0#nat-gateway-scenarios [4]: https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/latest#input_multi_az", "keywords": ["nat", "instance"]}]}, {"Id": "261666206", "PostHistoryTypeId": "1", "PostId": "70657780", "RevisionGUID": "eaa55aa0-dcae-4ccb-b318-db8cb013896b", "CreationDate": "2022-01-10T19:14:00.327", "UserId": "2780360", "Text": "How to make a single-AZ (non-HA) RDS instance with terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "How to make a single-AZ (non-HA) RDS instance with terraform?", "keywords": ["instance"]}]}, {"Id": "261666207", "PostHistoryTypeId": "3", "PostId": "70657780", "RevisionGUID": "eaa55aa0-dcae-4ccb-b318-db8cb013896b", "CreationDate": "2022-01-10T19:14:00.327", "UserId": "2780360", "Text": "<amazon-web-services><terraform><amazon-rds><terraform-provider-aws><high-availability>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261666562", "PostHistoryTypeId": "5", "PostId": "70657780", "RevisionGUID": "36b0eca1-4aaf-4255-bf67-279fd331284e", "CreationDate": "2022-01-10T19:20:40.600", "UserId": "2780360", "Comment": "added 127 characters in body", "Text": "In [this][1] AWS Database Blog, they assert that \r\n\r\n> You can set up Amazon RDS in a Single-AZ database (DB) instance or a\r\n> Multi-AZ DB instance for high availability requirements\r\n\r\nand that you can \r\n\r\n> ...modify existing Single-AZ instances to become Multi-AZ deployments.\r\n\r\n Furthermore, \r\n\r\n> ...you can create a Multi-AZ read replica, synchronize it with your\r\n> Single-AZ DB instance, and then promote it as your primary DB instance\r\n> to minimize latencies during conversion.\r\n\r\nAdditionally, in v1.32 of the official [AWS VPC Module][2] there are multiple references to the usage of [single_nat_gateway][3], particularly \r\n\r\n> If single_nat_gateway = true, then all private subnets will route\r\n> their Internet traffic through this single NAT gateway.\r\n\r\nand in the official RDS module, `multi_az` is shown as defaulting to `false` ([link][4]).\r\n\r\nDespite this, I am getting the following error\r\n\r\n    \u2577\r\n    \u2502 Error: DBSubnetGroupDoesNotCoverEnoughAZs: The DB subnet group doesn't meet Availability Zone (AZ) coverage requirement. Current AZ coverage: us-west-2a. Add subnets to cover at least 2 AZs.\r\n    \u2502  status code: 400, request id: *****\r\n    \u2502 \r\n    \u2502   with module.rds.module.db_subnet_group.aws_db_subnet_group.this[0],\r\n    \u2502   on .terraform/modules/rds/modules/db_subnet_group/main.tf line 8, in resource \"aws_db_subnet_group\" \"this\":\r\n    \u2502    8: resource \"aws_db_subnet_group\" \"this\" {\r\n\r\nwhen attempting to `terraform apply` this `main.tf` configuration: \r\n\r\n    module \"rds\" {\r\n      source                                = \"terraform-aws-modules/rds/aws\"\r\n      version                               = \"~> 3.4.0\"\r\n      identifier                            = \"${var.env}-${var.user}-${local.db_name}\"\r\n      engine                                = var.postgres.engine\r\n      engine_version                        = var.postgres.engine_version\r\n      family                                = var.postgres.family\r\n      major_engine_version                  = var.postgres.major_engine_version\r\n      instance_class                        = var.postgres.instance_class\r\n      allocated_storage                     = var.postgres.allocated_storage\r\n      max_allocated_storage                 = var.postgres.max_allocated_storage\r\n      storage_encrypted                     = var.postgres.storage_encrypted\r\n      password                              = random_password.password.result\r\n      port                                  = var.postgres.port\r\n      multi_az                              = false\r\n      subnet_ids                            = [data.aws_subnet.priv1.id]\r\n      vpc_security_group_ids                = [module.db_security_group.security_group_id]\r\n      maintenance_window                    = var.postgres.maintenance_window\r\n      backup_window                         = var.postgres.backup_window\r\n      enabled_cloudwatch_logs_exports       = var.postgres.enabled_cloudwatch_logs_exports\r\n      backup_retention_period               = var.postgres.backup_retention_period\r\n      skip_final_snapshot                   = var.postgres.skip_final_snapshot\r\n      deletion_protection                   = var.postgres.deletion_protection\r\n      performance_insights_enabled          = var.postgres.performance_insights_enabled\r\n      performance_insights_retention_period = var.postgres.performance_insights_retention_period\r\n      create_monitoring_role                = var.postgres.create_monitoring_role\r\n      monitoring_role_name                  = \"${var.env}-${var.user}-${var.postgres.monitoring_role_name}\"\r\n      monitoring_interval                   = var.postgres.monitoring_interval\r\n      snapshot_identifier                   = var.postgres.snapshot_identifier\r\n      iam_database_authentication_enabled   = var.postgres.iam_auth\r\n      apply_immediately                     = true\r\n      tags = {\r\n        Name        = \"${var.env}-${var.user}-rds\"\r\n        Terraform   = \"true\"\r\n        Environment = var.env\r\n        Created     = timestamp()\r\n      }\r\n    }\r\n\r\nwith this `postgres` variable defined in my `terraform.tfvars`:\r\n\r\n    postgres = {\r\n      db_name = \"postgres-db\"\r\n      # All available versions: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts\r\n      engine                                = \"postgres\"\r\n      engine_version                        = \"11.12\"\r\n      family                                = \"postgres11\" # DB parameter group\r\n      major_engine_version                  = \"11\"         # DB option group\r\n      instance_class                        = \"db.t2.micro\"\r\n      allocated_storage                     = 100\r\n      max_allocated_storage                 = 200\r\n      storage_encrypted                     = false\r\n      port                                  = 5432\r\n      multi_az                              = false\r\n      maintenance_window                    = \"Mon:00:00-Mon:03:00\"\r\n      backup_window                         = \"03:00-06:00\"\r\n      enabled_cloudwatch_logs_exports       = [\"postgresql\", \"upgrade\"]\r\n      backup_retention_period               = 0\r\n      skip_final_snapshot                   = true\r\n      deletion_protection                   = false\r\n      performance_insights_enabled          = false\r\n      performance_insights_retention_period = 7\r\n      create_monitoring_role                = true\r\n      monitoring_role_name                  = \"monitoring_role\"\r\n      monitoring_interval                   = 60\r\n      snapshot_identifier                   = \"arn:aws:rds:us-west-2:999999999999:snapshot:rds-ss\"\r\n      iam_auth                              = true\r\n    }\r\n\r\nSimilar questions on SO seem to all have answers with the theme that you *must* provide multiple availability zones, which implies at least two subnets, which - if you are creating them manually as private subnets - would then each need their own NAT gateway.  That seems unnecessarily expensive and constraining, especially for development and test environments.  \r\n\r\nHow can I deploy a single-az RDS Postgres instance with these components?\r\n\r\n\r\n  [1]: https://aws.amazon.com/blogs/database/best-practices-for-converting-a-single-az-amazon-rds-instance-to-a-multi-az-instance/\r\n  [2]: https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0\r\n  [3]: https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0#nat-gateway-scenarios\r\n  [4]: https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/latest#input_multi_az", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "In [this][1] AWS Database Blog, they assert that > You can set up Amazon RDS in a Single-AZ database (DB) instance or a > Multi-AZ DB instance for high availability requirements and that you can > ...modify existing Single-AZ instances to become Multi-AZ deployments. ", "keywords": ["instance"]}, {"source": "Text", "text": "Furthermore, > ...you can create a Multi-AZ read replica, synchronize it with your > Single-AZ DB instance, and then promote it as your primary DB instance > to minimize latencies during conversion. ", "keywords": ["instance"]}, {"source": "Text", "text": "Additionally, in v1.32 of the official [AWS VPC Module][2] there are multiple references to the usage of [single_nat_gateway][3], particularly > If single_nat_gateway = true, then all private subnets will route > their Internet traffic through this single NAT gateway. ", "keywords": ["nat"]}, {"source": "Text", "text": "Add subnets to cover at least 2 AZs. \u2502 status code: 400, request id: ***** \u2502 \u2502 with module.rds.module.db_subnet_group.aws_db_subnet_group.this[0], \u2502 on .terraform/modules/rds/modules/db_subnet_group/main.tf line 8, in resource \"aws_db_subnet_group\" \"this\": \u2502 8: resource \"aws_db_subnet_group\" \"this\" { when attempting to `terraform apply` this `main.tf` configuration: module \"rds\" { source = \"terraform-aws-modules/rds/aws\" version = \"~> 3.4.0\" identifier = \"${var.env}-${var.user}-${local.db_name}\" engine = var.postgres.engine engine_version = var.postgres.engine_version family = var.postgres.family major_engine_version = var.postgres.major_engine_version instance_class = var.postgres.instance_class allocated_storage = var.postgres.allocated_storage max_allocated_storage = var.postgres.max_allocated_storage storage_encrypted = var.postgres.storage_encrypted password = random_password.password.result port = var.postgres.port multi_az = false subnet_ids = [data.aws_subnet.priv1.id] vpc_security_group_ids = [module.db_security_group.security_group_id] maintenance_window = var.postgres.maintenance_window backup_window = var.postgres.backup_window enabled_cloudwatch_logs_exports = var.postgres.enabled_cloudwatch_logs_exports backup_retention_period = var.postgres.backup_retention_period skip_final_snapshot = var.postgres.skip_final_snapshot deletion_protection = var.postgres.deletion_protection performance_insights_enabled = var.postgres.performance_insights_enabled performance_insights_retention_period = var.postgres.performance_insights_retention_period create_monitoring_role = var.postgres.create_monitoring_role monitoring_role_name = \"${var.env}-${var.user}-${var.postgres.monitoring_role_name}\" monitoring_interval = var.postgres.monitoring_interval snapshot_identifier = var.postgres.snapshot_identifier iam_database_authentication_enabled = var.postgres.iam_auth apply_immediately = true tags = { Name = \"${var.env}-${var.user}-rds\" Terraform = \"true\" Environment = var.env Created = timestamp() } } with this `postgres` variable defined in my `terraform.tfvars`: postgres = { db_name = \"postgres-db\" # All available versions: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts engine = \"postgres\" engine_version = \"11.12\" family = \"postgres11\" # DB parameter group major_engine_version = \"11\" # DB option group instance_class = \"db.t2.micro\" allocated_storage = 100 max_allocated_storage = 200 storage_encrypted = false port = 5432 multi_az = false maintenance_window = \"Mon:00:00-Mon:03:00\" backup_window = \"03:00-06:00\" enabled_cloudwatch_logs_exports = [\"postgresql\", \"upgrade\"] backup_retention_period = 0 skip_final_snapshot = true deletion_protection = false performance_insights_enabled = false performance_insights_retention_period = 7 create_monitoring_role = true monitoring_role_name = \"monitoring_role\" monitoring_interval = 60 snapshot_identifier = \"arn:aws:rds:us-west-2:999999999999:snapshot:rds-ss\" iam_auth = true } Similar questions on SO seem to all have answers with the theme that you *must* provide multiple availability zones, which implies at least two subnets, which - if you are creating them manually as private subnets - would then each need their own NAT gateway. ", "keywords": ["nat"]}, {"source": "Text", "text": "That seems unnecessarily expensive and constraining, especially for development and test environments. ", "keywords": ["expense", "test"]}, {"source": "Text", "text": "How can I deploy a single-az RDS Postgres instance with these components? [1]: https://aws.amazon.com/blogs/database/best-practices-for-converting-a-single-az-amazon-rds-instance-to-a-multi-az-instance/ [2]: https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0 [3]: https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.32.0#nat-gateway-scenarios [4]: https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/latest#input_multi_az", "keywords": ["nat", "instance"]}]}], "answers": [{"Id": "70658040", "PostTypeId": "2", "ParentId": "70657780", "CreationDate": "2022-01-10T19:38:36.410", "Score": "3", "Body": "<p>A DB subnet group has to have multiple subnets. That's a requirement of RDS that you can't bypass. Even if you are only deploying a single instance, if that entire availability zone were to go down, Amazon RDS would automatically spin up a new instance in one of the other availability zones you have specified. That's one of the managed database services that you get automatically with Amazon RDS.</p>\n<p>So even if you are deploying a single-az instance, you have to specify multiple availability zones in the DB subnet group.</p>\n", "OwnerUserId": "13070", "LastActivityDate": "2022-01-10T19:38:36.410", "CommentCount": "6", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "124908847", "PostId": "70658040", "Score": "0", "Text": "comment 1 for more context: in my config, I specify no db subnet groups, only a sg for the two EC2 instances I have in my public subnet, and `db_security_group` with `ingress`/`egress_with_source_security_group_id`s set to that sg.  I am making my 2 private subnets manually, each in their own az, and my deployment works if I give them both to the rds's `subnet_ids` parameter as a list.", "CreationDate": "2022-01-10T19:55:01.387", "UserId": "2780360", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124908880", "PostId": "70658040", "Score": "0", "Text": "comment 2: what's your thought on providing the public nat (which needs an eip) - do I really have do provide one nat for each private subnet, even if `multi_az = false`?", "CreationDate": "2022-01-10T19:56:17.707", "UserId": "2780360", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "comment 2: what's your thought on providing the public nat (which needs an eip) - do I really have do provide one nat for each private subnet, even if `multi_az = false`?", "keywords": ["nat"]}]}, {"Id": "124909095", "PostId": "70658040", "Score": "0", "Text": "Comment 1: Yes that's the same thing I'm talking about. You have to provide at least two subnets for your database, even if you will only ever have one instance running. Comment 2: You don't need a NAT at all for RDS. If you have other services inside the private subnet you may need a NAT, but that's an entirely separate subject.", "CreationDate": "2022-01-10T20:07:55.527", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You have to provide at least two subnets for your database, even if you will only ever have one instance running. ", "keywords": ["instance"]}, {"source": "Text", "text": "Comment 2: You don't need a NAT at all for RDS. ", "keywords": ["nat"]}, {"source": "Text", "text": "If you have other services inside the private subnet you may need a NAT, but that's an entirely separate subject.", "keywords": ["nat"]}]}, {"Id": "124909306", "PostId": "70658040", "Score": "1", "Text": "i want the RDS to be private as it contains PII, though. as well, I have lambdas that are reading and writing to the RDS in question, which iirc do have the private subnet requirement and also need to communicate with the external web, so if i have to have two AZs via two subnets, I think I'll need two nats (and therefore two eips) no?", "CreationDate": "2022-01-10T20:19:19.093", "UserId": "2780360", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124909350", "PostId": "70658040", "Score": "1", "Text": "RDS doesn't need to connect to the external web, so it can be in a private subnet without a NAT Gateway route. If you decide to create a NAT, you can have one NAT per VPC, or one per AZ, it depends on if you want failover in case of a regional AWS outage.", "CreationDate": "2022-01-10T20:22:08.683", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "RDS doesn't need to connect to the external web, so it can be in a private subnet without a NAT Gateway route. ", "keywords": ["nat"]}, {"source": "Text", "text": "If you decide to create a NAT, you can have one NAT per VPC, or one per AZ, it depends on if you want failover in case of a regional AWS outage.", "keywords": ["nat"]}]}, {"Id": "125225878", "PostId": "70658040", "Score": "0", "Text": "I'm not sure when this became a requirement. I currently have a running RDS replica which is single AZ, and in it's subnet group there is only subnets from a single AZ. I have created it with terraform a while ago, but now I can't update it, as I get the same error as OP.", "CreationDate": "2022-01-24T14:39:19.027", "UserId": "2711787", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "261667536", "PostHistoryTypeId": "2", "PostId": "70658040", "RevisionGUID": "41754b01-e90d-44e4-8f70-df305299c238", "CreationDate": "2022-01-10T19:38:36.410", "UserId": "13070", "Text": "A DB subnet group has to have multiple subnets. That's a requirement of RDS that you can't bypass. Even if you are only deploying a single instance, if that entire availability zone were to go down, Amazon RDS would automatically spin up a new instance in one of the other availability zones you have specified. That's one of the managed database services that you get automatically with Amazon RDS. \r\n\r\nSo even if you are deploying a single-az instance, you have to specify multiple availability zones in the DB subnet group.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Even if you are only deploying a single instance, if that entire availability zone were to go down, Amazon RDS would automatically spin up a new instance in one of the other availability zones you have specified. ", "keywords": ["instance"]}, {"source": "Text", "text": "So even if you are deploying a single-az instance, you have to specify multiple availability zones in the DB subnet group.", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Even if you are only deploying a single instance, if that entire availability zone were to go down, Amazon RDS would automatically spin up a new instance in one of the other availability zones you have specified. ", "keywords": ["instance"]}, {"source": "Body", "text": "So even if you are deploying a single-az instance, you have to specify multiple availability zones in the DB subnet group.", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "How to make a single-AZ (non-HA) RDS instance with terraform?", "keywords": ["instance"]}, {"source": "Body", "text": "In this AWS Database Blog, they assert that You can set up Amazon RDS in a Single-AZ database (DB) instance or a Multi-AZ DB instance for high availability requirements and that you can ...modify existing Single-AZ instances to become Multi-AZ deployments. ", "keywords": ["instance"]}, {"source": "Body", "text": "Furthermore, ...you can create a Multi-AZ read replica, synchronize it with your Single-AZ DB instance, and then promote it as your primary DB instance to minimize latencies during conversion. ", "keywords": ["instance"]}, {"source": "Body", "text": "Additionally, in v1.32 of the official AWS VPC Module there are multiple references to the usage of single_nat_gateway, particularly If single_nat_gateway = true, then all private subnets will route their Internet traffic through this single NAT gateway. ", "keywords": ["nat"]}, {"source": "Body", "text": "Despite this, I am getting the following error when attempting to terraform apply this main.tf configuration: with this postgres variable defined in my terraform.tfvars: Similar questions on SO seem to all have answers with the theme that you must provide multiple availability zones, which implies at least two subnets, which - if you are creating them manually as private subnets - would then each need their own NAT gateway. ", "keywords": ["nat"]}, {"source": "Body", "text": "That seems unnecessarily expensive and constraining, especially for development and test environments. ", "keywords": ["expense", "test"]}, {"source": "Body", "text": "How can I deploy a single-az RDS Postgres instance with these components?", "keywords": ["instance"]}]}