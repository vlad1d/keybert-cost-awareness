{"Id": "67860854", "PostTypeId": "1", "AcceptedAnswerId": "67862339", "CreationDate": "2021-06-06T15:34:28.127", "Score": "2", "ViewCount": "3285", "Body": "<p>I have the terraform file <code>main.tf</code> that used to create AWS resources:</p>\n<pre><code>provider &quot;aws&quot; {\n    region = &quot;us-east-2&quot;\n}\n\nresource &quot;aws_instance&quot; &quot;example&quot; {\n\n    ami = &quot;ami-0c55b159cbfafe1f0&quot;\n    instance_type = &quot;t2.micro&quot;\n    vpc_security_group_ids = [\n        aws_security_group.instance.id]\n\n    user_data = &lt;&lt;-EOF\n              #!/bin/bash\n              echo &quot;Hello, World&quot; &gt; index.html\n              nohup busybox httpd -f -p &quot;${var.server_port}&quot; &amp;\n              EOF\n\n    tags = {\n        Name = &quot;terraform-example&quot;\n    }\n}\n\nresource &quot;aws_security_group&quot; &quot;instance&quot; {\n\n    name = &quot;terraform-example-instance&quot;\n\n    ingress {\n\n        from_port = var.server_port\n        to_port = var.server_port\n        protocol = &quot;tcp&quot;\n        cidr_blocks = [\n            &quot;0.0.0.0/0&quot;]\n    }\n}\n\nresource &quot;aws_security_group&quot; &quot;elb&quot; {\n    name = &quot;terraform-example-elb&quot;\n    # Allow all outbound\n    egress {\n        from_port = 0\n        to_port = 0\n        protocol = &quot;-1&quot;\n        cidr_blocks = [\n            &quot;0.0.0.0/0&quot;]\n    }\n    # Inbound HTTP from anywhere\n    ingress {\n        from_port = 80\n        to_port = 80\n        protocol = &quot;tcp&quot;\n        cidr_blocks = [\n            &quot;0.0.0.0/0&quot;]\n    }\n}\n\nvariable &quot;server_port&quot; {\n\n    description = &quot;The port the server will use for HTTP requests&quot;\n    type = number\n    default = 8080\n}\n\n\nvariable &quot;elb_port&quot; {\n\n    description = &quot;The port the server will use for HTTP requests&quot;\n\n    type = number\n    default = 80\n}\n\n\nresource &quot;aws_launch_configuration&quot; &quot;example&quot; {\n\n    image_id = &quot;ami-0c55b159cbfafe1f0&quot;\n    instance_type = &quot;t2.micro&quot;\n    security_groups = [\n        aws_security_group.instance.id]\n\n    user_data = &lt;&lt;-EOF\n              #!/bin/bash\n              echo &quot;Hello, World&quot; &gt; index.html\n              nohup busybox httpd -f -p &quot;${var.server_port}&quot; &amp;\n              EOF\n    lifecycle {\n        create_before_destroy = true\n    }\n}\n\n\nresource &quot;aws_elb&quot; &quot;example&quot; {\n\n    name = &quot;terraform-asg-example&quot;\n    security_groups = [\n        aws_security_group.elb.id]\n\n    availability_zones = data.aws_availability_zones.all.names\n\n    health_check {\n        target = &quot;HTTP:${var.server_port}/&quot;\n        interval = 30\n        timeout = 3\n        healthy_threshold = 2\n        unhealthy_threshold = 2\n    }\n\n    # This adds a listener for incoming HTTP requests.\n    listener {\n        lb_port = var.elb_port\n        lb_protocol = &quot;http&quot;\n        instance_port = var.server_port\n        instance_protocol = &quot;http&quot;\n    }\n}\n\n\nresource &quot;aws_autoscaling_group&quot; &quot;example&quot; {\n\n    launch_configuration = aws_launch_configuration.example.id\n    availability_zones = data.aws_availability_zones.all.names\n\n    min_size = 2\n    max_size = 10\n\n    load_balancers = [\n        aws_elb.example.name]\n    health_check_type = &quot;ELB&quot;\n\n    tag {\n        key = &quot;Name&quot;\n        value = &quot;terraform-asg-example&quot;\n        propagate_at_launch = true\n    }\n}\n\ndata &quot;aws_availability_zones&quot; &quot;all&quot; {}\n\n\noutput &quot;public_ip&quot; {\n\n    value = aws_instance.example.public_ip\n    description = &quot;The public IP of the web server&quot;\n}\n</code></pre>\n<p>I successfully created the resources and then, destroyed them afterward. Now, I would like to create an AWS S3 remote backend for the project and appended the extra resources in the same file -</p>\n<pre><code>resource &quot;aws_s3_bucket&quot; &quot;terraform_state&quot; {\n\n    bucket = &quot;terraform-up-and-running-state12345&quot;\n    # Enable versioning so we can see the full revision history of our\n    # state files\n    versioning {\n        enabled = true\n    }\n    # Enable server-side encryption by default\n    server_side_encryption_configuration {\n        rule {\n            apply_server_side_encryption_by_default {\n                sse_algorithm = &quot;AES256&quot;\n            }\n        }\n    }\n}\n\n\nresource &quot;aws_dynamodb_table&quot; &quot;terraform_locks&quot; {\n\n    name = &quot;terraform-up-and-running-locks&quot;\n    billing_mode = &quot;PAY_PER_REQUEST&quot;\n    hash_key = &quot;LockID&quot;\n\n    attribute {\n        name = &quot;LockID&quot;\n        type = &quot;S&quot;\n    }\n}\n\n\n\noutput &quot;s3_bucket_arn&quot; {\n\n    value = aws_s3_bucket.terraform_state.arn\n    description = &quot;The ARN of the S3 bucket&quot;\n}\n\noutput &quot;dynamodb_table_name&quot; {\n\n    value = aws_dynamodb_table.terraform_locks.name\n    description = &quot;The name of the DynamoDB table&quot;\n}\n</code></pre>\n<p>Then, I created a new file named <code>backend.tf</code> and add the code there:</p>\n<pre><code>terraform {\n\n    \n    backend &quot;s3&quot; {\n\n        # Replace this with your bucket name!\n        bucket = &quot;terraform-up-and-running-state12345&quot;\n        key = &quot;global/s3/terraform.tfstate&quot;\n        region = &quot;us-east-2&quot;\n\n\n        # Replace this with your DynamoDB table name!\n        dynamodb_table = &quot;terraform-up-and-running-locks&quot;\n        encrypt = true\n    }\n}\n</code></pre>\n<p>When I run the <code>$ terraform init</code>, I get the error below:</p>\n<pre><code>Initializing the backend...\nBackend configuration changed!\n\nTerraform has detected that the configuration specified for the backend\nhas changed. Terraform will now check for existing state in the backends.\n\n\n\u2577\n\u2502 Error: Error loading state:\n\u2502     BucketRegionError: incorrect region, the bucket is not in 'us-east-2' region at endpoint ''\n\u2502   status code: 301, request id: , host id: \n\u2502 \n\u2502 Terraform failed to load the default state from the &quot;s3&quot; backend.\n\u2502 State migration cannot occur unless the state can be loaded. Backend\n\u2502 modification and state migration has been aborted. The state in both the\n\u2502 source and the destination remain unmodified. Please resolve the\n\u2502 above error and try again.\n</code></pre>\n<p>I created the S3 bucket from the terminal:</p>\n<pre><code>$ aws s3api create-bucket --bucket terraform-up-and-running-state12345 --region us-east-2 --create-bucket-configuration LocationConstraint=us-east-2\n</code></pre>\n<p>Then, I tried again and receive the same error again. However, the bucket is already there:</p>\n<p><a href=\"https://i.stack.imgur.com/ggfjI.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/ggfjI.png\" alt=\"enter image description here\" /></a></p>\n<p>I can't also run the destroy command as well:</p>\n<pre><code>$ terraform destroy               \n\nAcquiring state lock. This may take a few moments...\n\u2577\n\u2502 Error: Error acquiring the state lock\n\u2502 \n\u2502 Error message: 2 errors occurred:\n\u2502   * ResourceNotFoundException: Requested resource not found\n\u2502   * ResourceNotFoundException: Requested resource not found\n\u2502 \n\u2502 \n\u2502 \n\u2502 Terraform acquires a state lock to protect the state from being written\n\u2502 by multiple users at the same time. Please resolve the issue above and try\n\u2502 again. For most commands, you can disable locking with the &quot;-lock=false&quot;\n\u2502 flag, but this is not recommended.\n</code></pre>\n<p>Can someone explain to me why is that and how to solve it?</p>\n", "OwnerUserId": "2746110", "LastEditorUserId": "2746110", "LastEditDate": "2021-06-06T15:59:04.420", "LastActivityDate": "2021-06-06T18:19:15.710", "Title": "Terraform Error refreshing state: BucketRegionError: incorrect region", "Tags": "<amazon-web-services><amazon-s3><amazon-ec2><terraform><devops>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "247980120", "PostHistoryTypeId": "2", "PostId": "67860854", "RevisionGUID": "ee797851-fe42-4ee7-8e7f-25b1c303628a", "CreationDate": "2021-06-06T15:34:28.127", "UserId": "2746110", "Text": "I have the terraform file `main.tf` that used to create AWS resources:\r\n\r\n    provider \"aws\" {\r\n        region = \"us-east-2\"\r\n    }\r\n    \r\n    resource \"aws_instance\" \"example\" {\r\n    \r\n        ami = \"ami-0c55b159cbfafe1f0\"\r\n        instance_type = \"t2.micro\"\r\n        vpc_security_group_ids = [\r\n            aws_security_group.instance.id]\r\n    \r\n        user_data = <<-EOF\r\n                  #!/bin/bash\r\n                  echo \"Hello, World\" > index.html\r\n                  nohup busybox httpd -f -p \"${var.server_port}\" &\r\n                  EOF\r\n    \r\n        tags = {\r\n            Name = \"terraform-example\"\r\n        }\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"instance\" {\r\n    \r\n        name = \"terraform-example-instance\"\r\n    \r\n        ingress {\r\n    \r\n            from_port = var.server_port\r\n            to_port = var.server_port\r\n            protocol = \"tcp\"\r\n            cidr_blocks = [\r\n                \"0.0.0.0/0\"]\r\n        }\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"elb\" {\r\n        name = \"terraform-example-elb\"\r\n        # Allow all outbound\r\n        egress {\r\n            from_port = 0\r\n            to_port = 0\r\n            protocol = \"-1\"\r\n            cidr_blocks = [\r\n                \"0.0.0.0/0\"]\r\n        }\r\n        # Inbound HTTP from anywhere\r\n        ingress {\r\n            from_port = 80\r\n            to_port = 80\r\n            protocol = \"tcp\"\r\n            cidr_blocks = [\r\n                \"0.0.0.0/0\"]\r\n        }\r\n    }\r\n    \r\n    variable \"server_port\" {\r\n    \r\n        description = \"The port the server will use for HTTP requests\"\r\n        type = number\r\n        default = 8080\r\n    }\r\n    \r\n    \r\n    variable \"elb_port\" {\r\n    \r\n        description = \"The port the server will use for HTTP requests\"\r\n    \r\n        type = number\r\n        default = 80\r\n    }\r\n    \r\n    \r\n    resource \"aws_launch_configuration\" \"example\" {\r\n    \r\n        image_id = \"ami-0c55b159cbfafe1f0\"\r\n        instance_type = \"t2.micro\"\r\n        security_groups = [\r\n            aws_security_group.instance.id]\r\n    \r\n        user_data = <<-EOF\r\n                  #!/bin/bash\r\n                  echo \"Hello, World\" > index.html\r\n                  nohup busybox httpd -f -p \"${var.server_port}\" &\r\n                  EOF\r\n        lifecycle {\r\n            create_before_destroy = true\r\n        }\r\n    }\r\n    \r\n    \r\n    resource \"aws_elb\" \"example\" {\r\n    \r\n        name = \"terraform-asg-example\"\r\n        security_groups = [\r\n            aws_security_group.elb.id]\r\n    \r\n        availability_zones = data.aws_availability_zones.all.names\r\n    \r\n        health_check {\r\n            target = \"HTTP:${var.server_port}/\"\r\n            interval = 30\r\n            timeout = 3\r\n            healthy_threshold = 2\r\n            unhealthy_threshold = 2\r\n        }\r\n    \r\n        # This adds a listener for incoming HTTP requests.\r\n        listener {\r\n            lb_port = var.elb_port\r\n            lb_protocol = \"http\"\r\n            instance_port = var.server_port\r\n            instance_protocol = \"http\"\r\n        }\r\n    }\r\n    \r\n    \r\n    resource \"aws_autoscaling_group\" \"example\" {\r\n    \r\n        launch_configuration = aws_launch_configuration.example.id\r\n        availability_zones = data.aws_availability_zones.all.names\r\n    \r\n        min_size = 2\r\n        max_size = 10\r\n    \r\n        load_balancers = [\r\n            aws_elb.example.name]\r\n        health_check_type = \"ELB\"\r\n    \r\n        tag {\r\n            key = \"Name\"\r\n            value = \"terraform-asg-example\"\r\n            propagate_at_launch = true\r\n        }\r\n    }\r\n    \r\n    data \"aws_availability_zones\" \"all\" {}\r\n    \r\n    \r\n    output \"public_ip\" {\r\n    \r\n        value = aws_instance.example.public_ip\r\n        description = \"The public IP of the web server\"\r\n    }\r\n\r\n\r\nI successfully created the resources and then, destroyed them afterward. Now, I would like to create an AWS S3 remote backend for the project and appended the extra resources in the same file - \r\n\r\n\r\n    resource \"aws_s3_bucket\" \"terraform_state\" {\r\n    \r\n        bucket = \"terraform-up-and-running-state12345\"\r\n        # Enable versioning so we can see the full revision history of our\r\n        # state files\r\n        versioning {\r\n            enabled = true\r\n        }\r\n        # Enable server-side encryption by default\r\n        server_side_encryption_configuration {\r\n            rule {\r\n                apply_server_side_encryption_by_default {\r\n                    sse_algorithm = \"AES256\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    resource \"aws_dynamodb_table\" \"terraform_locks\" {\r\n    \r\n        name = \"terraform-up-and-running-locks\"\r\n        billing_mode = \"PAY_PER_REQUEST\"\r\n        hash_key = \"LockID\"\r\n    \r\n        attribute {\r\n            name = \"LockID\"\r\n            type = \"S\"\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    output \"s3_bucket_arn\" {\r\n    \r\n        value = aws_s3_bucket.terraform_state.arn\r\n        description = \"The ARN of the S3 bucket\"\r\n    }\r\n    \r\n    output \"dynamodb_table_name\" {\r\n    \r\n        value = aws_dynamodb_table.terraform_locks.name\r\n        description = \"The name of the DynamoDB table\"\r\n    }\r\n\r\n\r\nThen, I created a new file named `backend.tf` and add the code there:\r\n\r\n\r\n    terraform {\r\n    \r\n        \r\n        backend \"s3\" {\r\n    \r\n            # Replace this with your bucket name!\r\n            bucket = \"terraform-up-and-running-state12345\"\r\n            key = \"global/s3/terraform.tfstate\"\r\n            region = \"us-east-2\"\r\n    \r\n    \r\n            # Replace this with your DynamoDB table name!\r\n            dynamodb_table = \"terraform-up-and-running-locks\"\r\n            encrypt = true\r\n        }\r\n    }\r\n\r\n\r\nWhen I run the `$ terraform init`, I get the error below:\r\n\r\n    Initializing the backend...\r\n    Backend configuration changed!\r\n    \r\n    Terraform has detected that the configuration specified for the backend\r\n    has changed. Terraform will now check for existing state in the backends.\r\n    \r\n    \r\n    \u2577\r\n    \u2502 Error: Error loading state:\r\n    \u2502     BucketRegionError: incorrect region, the bucket is not in 'us-east-2' region at endpoint ''\r\n    \u2502  status code: 301, request id: , host id: \r\n    \u2502 \r\n    \u2502 Terraform failed to load the default state from the \"s3\" backend.\r\n    \u2502 State migration cannot occur unless the state can be loaded. Backend\r\n    \u2502 modification and state migration has been aborted. The state in both the\r\n    \u2502 source and the destination remain unmodified. Please resolve the\r\n    \u2502 above error and try again.\r\n\r\n\r\nI created the S3 bucket from the terminal:\r\n\r\n    $ aws s3api create-bucket --bucket terraform-up-and-running-state12345 --region us-east-2 --create-bucket-configuration LocationConstraint=us-east-2\r\n\r\n\r\nThen, I tried again and receive the same error again.\r\n\r\nCan someone explain to me why is that and how to solve it?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have the terraform file `main.tf` that used to create AWS resources: provider \"aws\" { region = \"us-east-2\" } resource \"aws_instance\" \"example\" { ami = \"ami-0c55b159cbfafe1f0\" instance_type = \"t2.micro\" vpc_security_group_ids = [ aws_security_group.instance.id] user_data = <<-EOF #!/bin/bash echo \"Hello, World\" > index.html nohup busybox httpd -f -p \"${var.server_port}\" & EOF tags = { Name = \"terraform-example\" } } resource \"aws_security_group\" \"instance\" { name = \"terraform-example-instance\" ingress { from_port = var.server_port to_port = var.server_port protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\"] } } resource \"aws_security_group\" \"elb\" { name = \"terraform-example-elb\" # Allow all outbound egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\"] } # Inbound HTTP from anywhere ingress { from_port = 80 to_port = 80 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\"] } } variable \"server_port\" { description = \"The port the server will use for HTTP requests\" type = number default = 8080 } variable \"elb_port\" { description = \"The port the server will use for HTTP requests\" type = number default = 80 } resource \"aws_launch_configuration\" \"example\" { image_id = \"ami-0c55b159cbfafe1f0\" instance_type = \"t2.micro\" security_groups = [ aws_security_group.instance.id] user_data = <<-EOF #!/bin/bash echo \"Hello, World\" > index.html nohup busybox httpd -f -p \"${var.server_port}\" & EOF lifecycle { create_before_destroy = true } } resource \"aws_elb\" \"example\" { name = \"terraform-asg-example\" security_groups = [ aws_security_group.elb.id] availability_zones = data.aws_availability_zones.all.names health_check { target = \"HTTP:${var.server_port}/\" interval = 30 timeout = 3 healthy_threshold = 2 unhealthy_threshold = 2 } # This adds a listener for incoming HTTP requests. listener { lb_port = var.elb_port lb_protocol = \"http\" instance_port = var.server_port instance_protocol = \"http\" } } resource \"aws_autoscaling_group\" \"example\" { launch_configuration = aws_launch_configuration.example.id availability_zones = data.aws_availability_zones.all.names min_size = 2 max_size = 10 load_balancers = [ aws_elb.example.name] health_check_type = \"ELB\" tag { key = \"Name\" value = \"terraform-asg-example\" propagate_at_launch = true } } data \"aws_availability_zones\" \"all\" {} output \"public_ip\" { value = aws_instance.example.public_ip description = \"The public IP of the web server\" } I successfully created the resources and then, destroyed them afterward. ", "keywords": ["instance", "provider"]}, {"source": "Text", "text": "Now, I would like to create an AWS S3 remote backend for the project and appended the extra resources in the same file - resource \"aws_s3_bucket\" \"terraform_state\" { bucket = \"terraform-up-and-running-state12345\" # Enable versioning so we can see the full revision history of our # state files versioning { enabled = true } # Enable server-side encryption by default server_side_encryption_configuration { rule { apply_server_side_encryption_by_default { sse_algorithm = \"AES256\" } } } } resource \"aws_dynamodb_table\" \"terraform_locks\" { name = \"terraform-up-and-running-locks\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"LockID\" attribute { name = \"LockID\" type = \"S\" } } output \"s3_bucket_arn\" { value = aws_s3_bucket.terraform_state.arn description = \"The ARN of the S3 bucket\" } output \"dynamodb_table_name\" { value = aws_dynamodb_table.terraform_locks.name description = \"The name of the DynamoDB table\" } Then, I created a new file named `backend.tf` and add the code there: terraform { backend \"s3\" { # Replace this with your bucket name! bucket = \"terraform-up-and-running-state12345\" key = \"global/s3/terraform.tfstate\" region = \"us-east-2\" # Replace this with your DynamoDB table name! dynamodb_table = \"terraform-up-and-running-locks\" encrypt = true } } When I run the `$ terraform init`, I get the error below: Initializing the backend... ", "keywords": ["bill"]}, {"source": "Text", "text": "Backend configuration changed! ", "keywords": ["change"]}, {"source": "Text", "text": "Terraform has detected that the configuration specified for the backend has changed. ", "keywords": ["change"]}]}, {"Id": "247980121", "PostHistoryTypeId": "1", "PostId": "67860854", "RevisionGUID": "ee797851-fe42-4ee7-8e7f-25b1c303628a", "CreationDate": "2021-06-06T15:34:28.127", "UserId": "2746110", "Text": "Terraform Error refreshing state: BucketRegionError: incorrect region", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "247980122", "PostHistoryTypeId": "3", "PostId": "67860854", "RevisionGUID": "ee797851-fe42-4ee7-8e7f-25b1c303628a", "CreationDate": "2021-06-06T15:34:28.127", "UserId": "2746110", "Text": "<amazon-web-services><amazon-s3><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "247980154", "PostHistoryTypeId": "12", "PostId": "67860854", "RevisionGUID": "6c61a11f-07a6-457f-8a17-c7e5de2d2460", "CreationDate": "2021-06-06T15:35:47.227", "UserId": "2746110", "Comment": "via Vote", "Text": "{\"Voters\":[{\"Id\":2746110,\"DisplayName\":\"Arefe\"}]}", "filtered-sentences": []}, {"Id": "247980290", "PostHistoryTypeId": "13", "PostId": "67860854", "RevisionGUID": "19b6ff6c-10f5-4ff3-aa4f-d1b82f4e3106", "CreationDate": "2021-06-06T15:38:47.910", "UserId": "2746110", "Text": "{\"Voters\":[{\"Id\":2746110,\"DisplayName\":\"Arefe\"}]}", "filtered-sentences": []}, {"Id": "247980411", "PostHistoryTypeId": "5", "PostId": "67860854", "RevisionGUID": "949664f1-db2a-4a51-b83f-f54b80d8b36b", "CreationDate": "2021-06-06T15:41:39.150", "UserId": "2746110", "Comment": "added 129 characters in body", "Text": "I have the terraform file `main.tf` that used to create AWS resources:\r\n\r\n    provider \"aws\" {\r\n        region = \"us-east-2\"\r\n    }\r\n    \r\n    resource \"aws_instance\" \"example\" {\r\n    \r\n        ami = \"ami-0c55b159cbfafe1f0\"\r\n        instance_type = \"t2.micro\"\r\n        vpc_security_group_ids = [\r\n            aws_security_group.instance.id]\r\n    \r\n        user_data = <<-EOF\r\n                  #!/bin/bash\r\n                  echo \"Hello, World\" > index.html\r\n                  nohup busybox httpd -f -p \"${var.server_port}\" &\r\n                  EOF\r\n    \r\n        tags = {\r\n            Name = \"terraform-example\"\r\n        }\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"instance\" {\r\n    \r\n        name = \"terraform-example-instance\"\r\n    \r\n        ingress {\r\n    \r\n            from_port = var.server_port\r\n            to_port = var.server_port\r\n            protocol = \"tcp\"\r\n            cidr_blocks = [\r\n                \"0.0.0.0/0\"]\r\n        }\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"elb\" {\r\n        name = \"terraform-example-elb\"\r\n        # Allow all outbound\r\n        egress {\r\n            from_port = 0\r\n            to_port = 0\r\n            protocol = \"-1\"\r\n            cidr_blocks = [\r\n                \"0.0.0.0/0\"]\r\n        }\r\n        # Inbound HTTP from anywhere\r\n        ingress {\r\n            from_port = 80\r\n            to_port = 80\r\n            protocol = \"tcp\"\r\n            cidr_blocks = [\r\n                \"0.0.0.0/0\"]\r\n        }\r\n    }\r\n    \r\n    variable \"server_port\" {\r\n    \r\n        description = \"The port the server will use for HTTP requests\"\r\n        type = number\r\n        default = 8080\r\n    }\r\n    \r\n    \r\n    variable \"elb_port\" {\r\n    \r\n        description = \"The port the server will use for HTTP requests\"\r\n    \r\n        type = number\r\n        default = 80\r\n    }\r\n    \r\n    \r\n    resource \"aws_launch_configuration\" \"example\" {\r\n    \r\n        image_id = \"ami-0c55b159cbfafe1f0\"\r\n        instance_type = \"t2.micro\"\r\n        security_groups = [\r\n            aws_security_group.instance.id]\r\n    \r\n        user_data = <<-EOF\r\n                  #!/bin/bash\r\n                  echo \"Hello, World\" > index.html\r\n                  nohup busybox httpd -f -p \"${var.server_port}\" &\r\n                  EOF\r\n        lifecycle {\r\n            create_before_destroy = true\r\n        }\r\n    }\r\n    \r\n    \r\n    resource \"aws_elb\" \"example\" {\r\n    \r\n        name = \"terraform-asg-example\"\r\n        security_groups = [\r\n            aws_security_group.elb.id]\r\n    \r\n        availability_zones = data.aws_availability_zones.all.names\r\n    \r\n        health_check {\r\n            target = \"HTTP:${var.server_port}/\"\r\n            interval = 30\r\n            timeout = 3\r\n            healthy_threshold = 2\r\n            unhealthy_threshold = 2\r\n        }\r\n    \r\n        # This adds a listener for incoming HTTP requests.\r\n        listener {\r\n            lb_port = var.elb_port\r\n            lb_protocol = \"http\"\r\n            instance_port = var.server_port\r\n            instance_protocol = \"http\"\r\n        }\r\n    }\r\n    \r\n    \r\n    resource \"aws_autoscaling_group\" \"example\" {\r\n    \r\n        launch_configuration = aws_launch_configuration.example.id\r\n        availability_zones = data.aws_availability_zones.all.names\r\n    \r\n        min_size = 2\r\n        max_size = 10\r\n    \r\n        load_balancers = [\r\n            aws_elb.example.name]\r\n        health_check_type = \"ELB\"\r\n    \r\n        tag {\r\n            key = \"Name\"\r\n            value = \"terraform-asg-example\"\r\n            propagate_at_launch = true\r\n        }\r\n    }\r\n    \r\n    data \"aws_availability_zones\" \"all\" {}\r\n    \r\n    \r\n    output \"public_ip\" {\r\n    \r\n        value = aws_instance.example.public_ip\r\n        description = \"The public IP of the web server\"\r\n    }\r\n\r\n\r\nI successfully created the resources and then, destroyed them afterward. Now, I would like to create an AWS S3 remote backend for the project and appended the extra resources in the same file - \r\n\r\n\r\n    resource \"aws_s3_bucket\" \"terraform_state\" {\r\n    \r\n        bucket = \"terraform-up-and-running-state12345\"\r\n        # Enable versioning so we can see the full revision history of our\r\n        # state files\r\n        versioning {\r\n            enabled = true\r\n        }\r\n        # Enable server-side encryption by default\r\n        server_side_encryption_configuration {\r\n            rule {\r\n                apply_server_side_encryption_by_default {\r\n                    sse_algorithm = \"AES256\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    resource \"aws_dynamodb_table\" \"terraform_locks\" {\r\n    \r\n        name = \"terraform-up-and-running-locks\"\r\n        billing_mode = \"PAY_PER_REQUEST\"\r\n        hash_key = \"LockID\"\r\n    \r\n        attribute {\r\n            name = \"LockID\"\r\n            type = \"S\"\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    output \"s3_bucket_arn\" {\r\n    \r\n        value = aws_s3_bucket.terraform_state.arn\r\n        description = \"The ARN of the S3 bucket\"\r\n    }\r\n    \r\n    output \"dynamodb_table_name\" {\r\n    \r\n        value = aws_dynamodb_table.terraform_locks.name\r\n        description = \"The name of the DynamoDB table\"\r\n    }\r\n\r\n\r\nThen, I created a new file named `backend.tf` and add the code there:\r\n\r\n\r\n    terraform {\r\n    \r\n        \r\n        backend \"s3\" {\r\n    \r\n            # Replace this with your bucket name!\r\n            bucket = \"terraform-up-and-running-state12345\"\r\n            key = \"global/s3/terraform.tfstate\"\r\n            region = \"us-east-2\"\r\n    \r\n    \r\n            # Replace this with your DynamoDB table name!\r\n            dynamodb_table = \"terraform-up-and-running-locks\"\r\n            encrypt = true\r\n        }\r\n    }\r\n\r\n\r\nWhen I run the `$ terraform init`, I get the error below:\r\n\r\n    Initializing the backend...\r\n    Backend configuration changed!\r\n    \r\n    Terraform has detected that the configuration specified for the backend\r\n    has changed. Terraform will now check for existing state in the backends.\r\n    \r\n    \r\n    \u2577\r\n    \u2502 Error: Error loading state:\r\n    \u2502     BucketRegionError: incorrect region, the bucket is not in 'us-east-2' region at endpoint ''\r\n    \u2502  status code: 301, request id: , host id: \r\n    \u2502 \r\n    \u2502 Terraform failed to load the default state from the \"s3\" backend.\r\n    \u2502 State migration cannot occur unless the state can be loaded. Backend\r\n    \u2502 modification and state migration has been aborted. The state in both the\r\n    \u2502 source and the destination remain unmodified. Please resolve the\r\n    \u2502 above error and try again.\r\n\r\n\r\nI created the S3 bucket from the terminal:\r\n\r\n    $ aws s3api create-bucket --bucket terraform-up-and-running-state12345 --region us-east-2 --create-bucket-configuration LocationConstraint=us-east-2\r\n\r\n\r\nThen, I tried again and receive the same error again. However, the bucket is already there:\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n\r\nI can't also run the destroy command as well:\r\n\r\n\r\n    $ terraform destroy               \r\n    \r\n    Acquiring state lock. This may take a few moments...\r\n    \u2577\r\n    \u2502 Error: Error acquiring the state lock\r\n    \u2502 \r\n    \u2502 Error message: 2 errors occurred:\r\n    \u2502  * ResourceNotFoundException: Requested resource not found\r\n    \u2502  * ResourceNotFoundException: Requested resource not found\r\n    \u2502 \r\n    \u2502 \r\n    \u2502 \r\n    \u2502 Terraform acquires a state lock to protect the state from being written\r\n    \u2502 by multiple users at the same time. Please resolve the issue above and try\r\n    \u2502 again. For most commands, you can disable locking with the \"-lock=false\"\r\n    \u2502 flag, but this is not recommended.\r\n\r\nCan someone explain to me why is that and how to solve it?\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/ggfjI.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have the terraform file `main.tf` that used to create AWS resources: provider \"aws\" { region = \"us-east-2\" } resource \"aws_instance\" \"example\" { ami = \"ami-0c55b159cbfafe1f0\" instance_type = \"t2.micro\" vpc_security_group_ids = [ aws_security_group.instance.id] user_data = <<-EOF #!/bin/bash echo \"Hello, World\" > index.html nohup busybox httpd -f -p \"${var.server_port}\" & EOF tags = { Name = \"terraform-example\" } } resource \"aws_security_group\" \"instance\" { name = \"terraform-example-instance\" ingress { from_port = var.server_port to_port = var.server_port protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\"] } } resource \"aws_security_group\" \"elb\" { name = \"terraform-example-elb\" # Allow all outbound egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\"] } # Inbound HTTP from anywhere ingress { from_port = 80 to_port = 80 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\"] } } variable \"server_port\" { description = \"The port the server will use for HTTP requests\" type = number default = 8080 } variable \"elb_port\" { description = \"The port the server will use for HTTP requests\" type = number default = 80 } resource \"aws_launch_configuration\" \"example\" { image_id = \"ami-0c55b159cbfafe1f0\" instance_type = \"t2.micro\" security_groups = [ aws_security_group.instance.id] user_data = <<-EOF #!/bin/bash echo \"Hello, World\" > index.html nohup busybox httpd -f -p \"${var.server_port}\" & EOF lifecycle { create_before_destroy = true } } resource \"aws_elb\" \"example\" { name = \"terraform-asg-example\" security_groups = [ aws_security_group.elb.id] availability_zones = data.aws_availability_zones.all.names health_check { target = \"HTTP:${var.server_port}/\" interval = 30 timeout = 3 healthy_threshold = 2 unhealthy_threshold = 2 } # This adds a listener for incoming HTTP requests. listener { lb_port = var.elb_port lb_protocol = \"http\" instance_port = var.server_port instance_protocol = \"http\" } } resource \"aws_autoscaling_group\" \"example\" { launch_configuration = aws_launch_configuration.example.id availability_zones = data.aws_availability_zones.all.names min_size = 2 max_size = 10 load_balancers = [ aws_elb.example.name] health_check_type = \"ELB\" tag { key = \"Name\" value = \"terraform-asg-example\" propagate_at_launch = true } } data \"aws_availability_zones\" \"all\" {} output \"public_ip\" { value = aws_instance.example.public_ip description = \"The public IP of the web server\" } I successfully created the resources and then, destroyed them afterward. ", "keywords": ["instance", "provider"]}, {"source": "Text", "text": "Now, I would like to create an AWS S3 remote backend for the project and appended the extra resources in the same file - resource \"aws_s3_bucket\" \"terraform_state\" { bucket = \"terraform-up-and-running-state12345\" # Enable versioning so we can see the full revision history of our # state files versioning { enabled = true } # Enable server-side encryption by default server_side_encryption_configuration { rule { apply_server_side_encryption_by_default { sse_algorithm = \"AES256\" } } } } resource \"aws_dynamodb_table\" \"terraform_locks\" { name = \"terraform-up-and-running-locks\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"LockID\" attribute { name = \"LockID\" type = \"S\" } } output \"s3_bucket_arn\" { value = aws_s3_bucket.terraform_state.arn description = \"The ARN of the S3 bucket\" } output \"dynamodb_table_name\" { value = aws_dynamodb_table.terraform_locks.name description = \"The name of the DynamoDB table\" } Then, I created a new file named `backend.tf` and add the code there: terraform { backend \"s3\" { # Replace this with your bucket name! bucket = \"terraform-up-and-running-state12345\" key = \"global/s3/terraform.tfstate\" region = \"us-east-2\" # Replace this with your DynamoDB table name! dynamodb_table = \"terraform-up-and-running-locks\" encrypt = true } } When I run the `$ terraform init`, I get the error below: Initializing the backend... ", "keywords": ["bill"]}, {"source": "Text", "text": "Backend configuration changed! ", "keywords": ["change"]}, {"source": "Text", "text": "Terraform has detected that the configuration specified for the backend has changed. ", "keywords": ["change"]}]}, {"Id": "247981059", "PostHistoryTypeId": "6", "PostId": "67860854", "RevisionGUID": "7067ae99-4d2e-452a-ad64-29d00c63d244", "CreationDate": "2021-06-06T15:59:04.420", "UserId": "2746110", "Comment": "edited tags", "Text": "<amazon-web-services><amazon-s3><amazon-ec2><terraform><devops>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "67862339", "PostTypeId": "2", "ParentId": "67860854", "CreationDate": "2021-06-06T18:19:15.710", "Score": "2", "Body": "<p>Remove the .terraform folder and try  <code>terraform init</code>\nagain</p>\n<p>OR</p>\n<p>error is because there's no S3 bucket created to sync with.</p>\n<ul>\n<li>remove json object of s3 in  .terraform/terraform.tfstate</li>\n<li>remove the object generating remote backend run</li>\n<li>terraform init</li>\n</ul>\n", "OwnerUserId": "9145524", "LastActivityDate": "2021-06-06T18:19:15.710", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "119953231", "PostId": "67862339", "Score": "0", "Text": "I run the command `rm .terraform/*` and it works fine afterward. Earlier, I assumed this, but the folder is not shown when I write the `ls`. Do you know why?", "CreationDate": "2021-06-07T01:31:41.220", "UserId": "2746110", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119966365", "PostId": "67862339", "Score": "0", "Text": ".terraform is hidden folder, you need to run command  ls -lah to see the folder", "CreationDate": "2021-06-07T13:11:52.650", "UserId": "9145524", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "247986191", "PostHistoryTypeId": "2", "PostId": "67862339", "RevisionGUID": "7f89188b-f8fd-4d30-83ad-5002ce4a4efa", "CreationDate": "2021-06-06T18:19:15.710", "UserId": "9145524", "Text": "Remove the .terraform folder and try  `terraform init`\r\nagain \r\n\r\nOR\r\n\r\nerror is because there's no S3 bucket created to sync with.\r\n\r\n - remove json object of s3 in  .terraform/terraform.tfstate \r\n - remove the object generating remote backend run\r\n - terraform init\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}