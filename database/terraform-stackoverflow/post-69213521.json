{"Id": "69213521", "PostTypeId": "1", "CreationDate": "2021-09-16T18:31:18.440", "Score": "2", "ViewCount": "2240", "Body": "<p>I am trying to get started with Terraform and am using GitLab CI/CD to interact with it. My Runner is unable to assume the IAM Role which has elevated privileges to create AWS resources. My Google-fu on this has failed me.</p>\n<p>The error received is:</p>\n<blockquote>\n<p>Error: error configuring Terraform AWS Provider: IAM Role\n(my:arn) cannot be assumed. There are a number of possible causes of this - the most common are:</p>\n<ul>\n<li>The credentials used in order to assume the role are invalid</li>\n<li>The credentials do not have appropriate permission to assume the role</li>\n<li>The role ARN is not valid</li>\n</ul>\n</blockquote>\n<p>I have created an access/secret key in IAM and have attempted supplying these as GitLab CI/CD Variables, environment variables that I directly <code>export</code> in my <code>before_script</code>, and even the not-recommended hardcoding them into the <code>provider</code> stanza. No matter what, I still get this same error.</p>\n<p>What is extra strange is that AWS shows that the key is being used. The &quot;Last Used&quot; column will always reflect a timestamp of the last attempt at running the pipeline. For better or worse, the key is part of my root AWS account - this is a sandbox project and I don't have any IAM Users, so, it's not clear to me how Terraform is unable to use these credentials to assume a Role when, according to AWS, it's able to access my account with them, and my account has root privileges.</p>\n<p>Here is my <code>provider.tf</code>:</p>\n<pre><code>terraform {\n    required_version = &quot;&gt;= 0.14&quot;\n    backend &quot;s3&quot; { }\n}\n\nprovider &quot;aws&quot; {\n    region = &quot;us-east-1&quot;\n    access_key = &quot;redacted&quot;\n    secret_key = &quot;redacted&quot;\n    assume_role {\n        role_arn = &quot;arn:aws:iam::redacted:role/gitlab-runner-role&quot;\n    }\n}\n</code></pre>\n<p>Here is the relevant section of my <code>.gitlab-ci.yml</code> for this stage:</p>\n<pre><code>.terraform_init: &amp;terraform_init |-\n  terraform init -backend-config=&quot;bucket=my-terraform-state&quot; -backend-config=&quot;region=us-east-1&quot; -backend-config=&quot;key=terraform.tfstate&quot;\n\ntf-plan:\n  image: \n    name: hashicorp/terraform\n    entrypoint: [&quot;&quot;]\n  stage: plan\n  before_script:\n    - *terraform_init\n  script:\n    - terraform plan -out=tfplan.plan\n    - terraform show --json tfplan.plan | convert_report &gt; tfplan.json\n  needs:\n    - job: tf-val\n  tags:\n    - my-runner\n</code></pre>\n<p>My <code>main.tf</code> only contains a basic <code>aws_instance</code> stanza and my <code>terraform validate</code> stage (omitted above) says it's in ship-shape. These are the only 3 files in my repo.</p>\n<p>My <code>gitlab-runner-role</code> only contains one Policy, <code>gitlab-runner-policy</code>, whose JSON is:</p>\n<pre><code>{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Sid&quot;: &quot;VisualEditor0&quot;,\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Action&quot;: [\n                &quot;s3:PutObject&quot;,\n                &quot;s3:GetObject&quot;,\n                &quot;s3:ListBucket&quot;\n            ],\n            &quot;Resource&quot;: [\n                &quot;arn:aws:s3:::*/*&quot;,\n                &quot;arn:aws:s3:::my-terraform-state&quot;\n            ]\n        }\n    ]\n}\n</code></pre>\n<p>TIA for any advisement... really banging my head up against the wall on this one.</p>\n", "OwnerUserId": "3934948", "LastActivityDate": "2021-09-16T19:14:12.553", "Title": "Terraform unable to assume IAM Role", "Tags": "<amazon-web-services><gitlab><terraform><gitlab-ci><gitlab-ci-runner>", "AnswerCount": "1", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "122332583", "PostId": "69213521", "Score": "0", "Text": "Does this actually have anything to do with terraform? Have you tried assuming the rule using e.g. the aws cli? If that also doesn't work, it isn't a terraform issue. To assume a role you need to create an appropriate trust policy for that role - have you done so?", "CreationDate": "2021-09-16T18:59:37.217", "UserId": "2407038", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To assume a role you need to create an appropriate trust policy for that role - have you done so?", "keywords": ["policy"]}]}, {"Id": "122332614", "PostId": "69213521", "Score": "0", "Text": "Where have you defined the trust policy which allows that user to assume that role?", "CreationDate": "2021-09-16T19:01:02.190", "UserId": "1032785", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Where have you defined the trust policy which allows that user to assume that role?", "keywords": ["policy"]}]}, {"Id": "122332711", "PostId": "69213521", "Score": "0", "Text": "@jordanm The trusted entity for the role is just set to ec2.amazonaws.com, but I also tried specifying the role itself (because this role is also the instance profile for the GitLab Runner). The keys were provisioned under my root AWS account so I would assume they'd have access to all Roles in my account - there's no separate IAM Users in this account.", "CreationDate": "2021-09-16T19:05:35.610", "UserId": "3934948", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The trusted entity for the role is just set to ec2.amazonaws.com, but I also tried specifying the role itself (because this role is also the instance profile for the GitLab Runner). ", "keywords": ["instance"]}]}, {"Id": "122332887", "PostId": "69213521", "Score": "0", "Text": "You should *never* create access keys for the root account or use it for anything outside of billing. That trust policy is one you would use for an ec2 instance profile, not for assuming a role from a user. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_permissions-to-switch.html", "CreationDate": "2021-09-16T19:14:37.787", "UserId": "1032785", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You should *never* create access keys for the root account or use it for anything outside of billing. ", "keywords": ["bill"]}, {"source": "Text", "text": "That trust policy is one you would use for an ec2 instance profile, not for assuming a role from a user. ", "keywords": ["instance", "policy"]}]}], "history": [{"Id": "253887011", "PostHistoryTypeId": "2", "PostId": "69213521", "RevisionGUID": "0aefd5fe-f3fc-4459-a4cb-bd9bd572d8b8", "CreationDate": "2021-09-16T18:31:18.440", "UserId": "3934948", "Text": "I am trying to get started with Terraform and am using GitLab CI/CD to interact with it. My Runner is unable to assume the IAM Role which has elevated privileges to create AWS resources. My Google-fu on this has failed me.\r\n\r\nThe error received is:\r\n\r\n> Error: error configuring Terraform AWS Provider: IAM Role\r\n> (my:arn) cannot be assumed. There are a number of possible causes of this - the most common are:\r\n>  * The credentials used in order to assume the role are invalid\r\n>  * The credentials do not have appropriate permission to assume the role\r\n>  * The role ARN is not valid\r\n\r\nI have created an access/secret key in IAM and have attempted supplying these as GitLab CI/CD Variables, environment variables that I directly `export` in my `before_script`, and even the not-recommended hardcoding them into the `provider` stanza. No matter what, I still get this same error.\r\n\r\nWhat is extra strange is that AWS shows that the key is being used. The \"Last Used\" column will always reflect a timestamp of the last attempt at running the pipeline. For better or worse, the key is part of my root AWS account - this is a sandbox project and I don't have any IAM Users, so, it's not clear to me how Terraform is unable to use these credentials to assume a Role when, according to AWS, it's able to access my account with them, and my account has root privileges.\r\n\r\nHere is my `provider.tf`:\r\n\r\n```\r\nterraform {\r\n    required_version = \">= 0.14\"\r\n    backend \"s3\" { }\r\n}\r\n\r\nprovider \"aws\" {\r\n    region = \"us-east-1\"\r\n    access_key = \"redacted\"\r\n    secret_key = \"redacted\"\r\n    assume_role {\r\n        role_arn = \"arn:aws:iam::redacted:role/gitlab-runner-role\"\r\n    }\r\n}\r\n```\r\n\r\nHere is the relevant section of my `.gitlab-ci.yml` for this stage:\r\n\r\n```\r\n.terraform_init: &terraform_init |-\r\n  terraform init -backend-config=\"bucket=my-terraform-state\" -backend-config=\"region=us-east-1\" -backend-config=\"key=terraform.tfstate\"\r\n\r\ntf-plan:\r\n  image: \r\n    name: hashicorp/terraform\r\n    entrypoint: [\"\"]\r\n  stage: plan\r\n  before_script:\r\n    - *terraform_init\r\n  script:\r\n    - terraform plan -out=tfplan.plan\r\n    - terraform show --json tfplan.plan | convert_report > tfplan.json\r\n  needs:\r\n    - job: tf-val\r\n  tags:\r\n    - my-runner\r\n```\r\n\r\nMy `main.tf` only contains a basic `aws_instance` stanza and my `terraform validate` stage (omitted above) says it's in ship-shape. These are the only 3 files in my repo.\r\n\r\nMy `gitlab-runner-role` only contains one Policy, `gitlab-runner-policy`, whose JSON is:\r\n\r\n```\r\n{\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n        {\r\n            \"Sid\": \"VisualEditor0\",\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"s3:PutObject\",\r\n                \"s3:GetObject\",\r\n                \"s3:ListBucket\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:s3:::*/*\",\r\n                \"arn:aws:s3:::my-terraform-state\"\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nTIA for any advisement... really banging my head up against the wall on this one.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The error received is: > Error: error configuring Terraform AWS Provider: IAM Role > (my:arn) cannot be assumed. ", "keywords": ["provider"]}, {"source": "Text", "text": "* The role ARN is not valid I have created an access/secret key in IAM and have attempted supplying these as GitLab CI/CD Variables, environment variables that I directly `export` in my `before_script`, and even the not-recommended hardcoding them into the `provider` stanza. ", "keywords": ["provider"]}, {"source": "Text", "text": "Here is my `provider.tf`: ``` terraform { required_version = \">= 0.14\" backend \"s3\" { } } provider \"aws\" { region = \"us-east-1\" access_key = \"redacted\" secret_key = \"redacted\" assume_role { role_arn = \"arn:aws:iam::redacted:role/gitlab-runner-role\" } } ``` Here is the relevant section of my `.gitlab-ci.yml` for this stage: ``` .terraform_init: &terraform_init |- terraform init -backend-config=\"bucket=my-terraform-state\" -backend-config=\"region=us-east-1\" -backend-config=\"key=terraform.tfstate\" tf-plan: image: name: hashicorp/terraform entrypoint: [\"\"] stage: plan before_script: - *terraform_init script: - terraform plan -out=tfplan.plan - terraform show --json tfplan.plan | convert_report > tfplan.json needs: - job: tf-val tags: - my-runner ``` ", "keywords": ["provider"]}, {"source": "Text", "text": "My `gitlab-runner-role` only contains one Policy, `gitlab-runner-policy`, whose JSON is: ``` { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"s3:PutObject\", \"s3:GetObject\", \"s3:ListBucket\" ], \"Resource\": [ \"arn:aws:s3:::*/*\", \"arn:aws:s3:::my-terraform-state\" ] } ] } ``` TIA for any advisement..", "keywords": ["policy"]}]}, {"Id": "253887013", "PostHistoryTypeId": "1", "PostId": "69213521", "RevisionGUID": "0aefd5fe-f3fc-4459-a4cb-bd9bd572d8b8", "CreationDate": "2021-09-16T18:31:18.440", "UserId": "3934948", "Text": "Terraform unable to assume IAM Role", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "253887014", "PostHistoryTypeId": "3", "PostId": "69213521", "RevisionGUID": "0aefd5fe-f3fc-4459-a4cb-bd9bd572d8b8", "CreationDate": "2021-09-16T18:31:18.440", "UserId": "3934948", "Text": "<amazon-web-services><gitlab><terraform><gitlab-ci><gitlab-ci-runner>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "69213957", "PostTypeId": "2", "ParentId": "69213521", "CreationDate": "2021-09-16T19:14:12.553", "Score": "1", "Body": "<p>Turns out that assume_role is only needed for cross-account work. I was doing all of the work within my own account, so removing this allowed Terraform to just use the keys to do the work without needing a different IAM Role (or it's able to do what it needs to via the Role that is attached to the Runner as an instance profile). It's not clear to me why specifying assume_role <em>anyway</em> would result in an error, since the access should be there, but removing it has fixed this issue.</p>\n", "OwnerUserId": "3934948", "LastActivityDate": "2021-09-16T19:14:12.553", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "253889279", "PostHistoryTypeId": "2", "PostId": "69213957", "RevisionGUID": "43956057-b8cc-4e67-93f5-22da14e71407", "CreationDate": "2021-09-16T19:14:12.553", "UserId": "3934948", "Text": "Turns out that assume_role is only needed for cross-account work. I was doing all of the work within my own account, so removing this allowed Terraform to just use the keys to do the work without needing a different IAM Role (or it's able to do what it needs to via the Role that is attached to the Runner as an instance profile). It's not clear to me why specifying assume_role *anyway* would result in an error, since the access should be there, but removing it has fixed this issue.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I was doing all of the work within my own account, so removing this allowed Terraform to just use the keys to do the work without needing a different IAM Role (or it's able to do what it needs to via the Role that is attached to the Runner as an instance profile). ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "I was doing all of the work within my own account, so removing this allowed Terraform to just use the keys to do the work without needing a different IAM Role (or it's able to do what it needs to via the Role that is attached to the Runner as an instance profile). ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "The error received is: Error: error configuring Terraform AWS Provider: IAM Role (my:arn) cannot be assumed. ", "keywords": ["provider"]}, {"source": "Body", "text": "The role ARN is not valid I have created an access/secret key in IAM and have attempted supplying these as GitLab CI/CD Variables, environment variables that I directly export in my before_script, and even the not-recommended hardcoding them into the provider stanza. ", "keywords": ["provider"]}, {"source": "Body", "text": "Here is my provider.tf: Here is the relevant section of my .gitlab-ci.yml for this stage: My main.tf only contains a basic aws_instance stanza and my terraform validate stage (omitted above) says it's in ship-shape. ", "keywords": ["provider"]}, {"source": "Body", "text": "My gitlab-runner-role only contains one Policy, gitlab-runner-policy, whose JSON is: TIA for any advisement... really banging my head up against the wall on this one.", "keywords": ["policy"]}]}