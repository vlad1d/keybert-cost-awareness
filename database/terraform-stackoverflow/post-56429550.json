{"Id": "56429550", "PostTypeId": "1", "CreationDate": "2019-06-03T14:35:53.293", "Score": "1", "ViewCount": "2593", "Body": "<p>the aws_volume_attachment resource in terraform requires the instance_id ... my problem is the instance i want to mount the volume to is part of an ECS cluster and i cannot seem to find any clever examples on passing the instance ID of an instance in the ECS cluster to aws_volume_attachment so i can mount an existing EBS volume.</p>\n\n<p>using the ARN does not work. </p>\n\n<pre><code>resource \"aws_volume_attachment\" \"ebs_att\" {\n  device_name = \"/dev/sdp\"\n  volume_id   = \"${aws_ebs_volume.example.id}\"\n  instance_id = \"${aws_instance.web.id}\"\n}\n</code></pre>\n\n<p><strong>EDIT</strong>\ni basically boostrapped a script for the instances and my terraform looked like this: </p>\n\n<pre><code>data \"template_file\" \"fleet-boothook\" {\n  template = \"${file(\"${path.module}/boothook.tpl\")}\"\n\n  vars {\n    ecs_cluster_name = \"${aws_ecs_cluster.this.name}\"\n    ebs_volume_id    = \"${var.singleton_cluster_ebs_volume}\"\n  }\n}\n</code></pre>\n", "OwnerUserId": "11594328", "LastEditorUserId": "11594328", "LastEditDate": "2019-07-16T14:40:03.163", "LastActivityDate": "2022-11-12T23:10:02.017", "Title": "trying to attach/mount an EBS volume to ECS instance using terraform", "Tags": "<terraform><terraform-provider-aws>", "AnswerCount": "2", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "99453600", "PostId": "56429550", "Score": "1", "Text": "How are you creating the instances in the ECS cluster?", "CreationDate": "2019-06-03T14:40:17.453", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "How are you creating the instances in the ECS cluster?", "keywords": ["cluster"]}]}, {"Id": "99453890", "PostId": "56429550", "Score": "0", "Text": "i have a separate ecs-cluster module written. are you asking what my aws_launch_configuration looks like?", "CreationDate": "2019-06-03T14:48:03.703", "UserId": "11594328", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "i have a separate ecs-cluster module written. ", "keywords": ["cluster"]}]}], "history": [{"Id": "198971013", "PostHistoryTypeId": "2", "PostId": "56429550", "RevisionGUID": "f39eeeaf-7719-41f8-963e-855211a59db3", "CreationDate": "2019-06-03T14:35:53.293", "UserId": "11594328", "Text": "the aws_volume_attachment resource in terraform requires the instance_id ... my problem is the instance i want to mount the volume to is part of an ECS cluster and i cannot seem to find any clever examples on passing the instance ID of an instance in the ECS cluster to aws_volume_attachment.\r\n\r\nusing the ARN does not work. \r\n\r\n```\r\nresource \"aws_volume_attachment\" \"ebs_att\" {\r\n  device_name = \"/dev/sdp\"\r\n  volume_id   = \"${aws_ebs_volume.example.id}\"\r\n  instance_id = \"${aws_instance.web.id}\"\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "my problem is the instance i want to mount the volume to is part of an ECS cluster and i cannot seem to find any clever examples on passing the instance ID of an instance in the ECS cluster to aws_volume_attachment. using the ARN does not work. ", "keywords": ["instance", "cluster"]}]}, {"Id": "198971014", "PostHistoryTypeId": "1", "PostId": "56429550", "RevisionGUID": "f39eeeaf-7719-41f8-963e-855211a59db3", "CreationDate": "2019-06-03T14:35:53.293", "UserId": "11594328", "Text": "trying to attach a volume to ECS instance using terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "trying to attach a volume to ECS instance using terraform", "keywords": ["instance"]}]}, {"Id": "198971015", "PostHistoryTypeId": "3", "PostId": "56429550", "RevisionGUID": "f39eeeaf-7719-41f8-963e-855211a59db3", "CreationDate": "2019-06-03T14:35:53.293", "UserId": "11594328", "Text": "<terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "198971826", "PostHistoryTypeId": "5", "PostId": "56429550", "RevisionGUID": "0fef4c55-7f96-4b5b-826a-cce1eb062bbf", "CreationDate": "2019-06-03T14:46:32.453", "UserId": "11594328", "Comment": "added 38 characters in body; edited title", "Text": "the aws_volume_attachment resource in terraform requires the instance_id ... my problem is the instance i want to mount the volume to is part of an ECS cluster and i cannot seem to find any clever examples on passing the instance ID of an instance in the ECS cluster to aws_volume_attachment so i can mount an existing EBS volume.\r\n\r\nusing the ARN does not work. \r\n\r\n```\r\nresource \"aws_volume_attachment\" \"ebs_att\" {\r\n  device_name = \"/dev/sdp\"\r\n  volume_id   = \"${aws_ebs_volume.example.id}\"\r\n  instance_id = \"${aws_instance.web.id}\"\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "my problem is the instance i want to mount the volume to is part of an ECS cluster and i cannot seem to find any clever examples on passing the instance ID of an instance in the ECS cluster to aws_volume_attachment so i can mount an existing EBS volume. ", "keywords": ["instance", "cluster"]}]}, {"Id": "198971827", "PostHistoryTypeId": "4", "PostId": "56429550", "RevisionGUID": "0fef4c55-7f96-4b5b-826a-cce1eb062bbf", "CreationDate": "2019-06-03T14:46:32.453", "UserId": "11594328", "Comment": "added 38 characters in body; edited title", "Text": "trying to attach/mount an EBS volume to ECS instance using terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "trying to attach/mount an EBS volume to ECS instance using terraform", "keywords": ["instance"]}]}, {"Id": "201646898", "PostHistoryTypeId": "5", "PostId": "56429550", "RevisionGUID": "b85a9566-19a4-49f1-b45f-4891a0755ca7", "CreationDate": "2019-07-16T14:40:03.163", "UserId": "11594328", "Comment": "added 370 characters in body", "Text": "the aws_volume_attachment resource in terraform requires the instance_id ... my problem is the instance i want to mount the volume to is part of an ECS cluster and i cannot seem to find any clever examples on passing the instance ID of an instance in the ECS cluster to aws_volume_attachment so i can mount an existing EBS volume.\r\n\r\nusing the ARN does not work. \r\n\r\n```\r\nresource \"aws_volume_attachment\" \"ebs_att\" {\r\n  device_name = \"/dev/sdp\"\r\n  volume_id   = \"${aws_ebs_volume.example.id}\"\r\n  instance_id = \"${aws_instance.web.id}\"\r\n}\r\n```\r\n\r\n**EDIT**\r\ni basically boostrapped a script for the instances and my terraform looked like this: \r\n \r\n\r\n    data \"template_file\" \"fleet-boothook\" {\r\n      template = \"${file(\"${path.module}/boothook.tpl\")}\"\r\n    \r\n      vars {\r\n        ecs_cluster_name = \"${aws_ecs_cluster.this.name}\"\r\n        ebs_volume_id    = \"${var.singleton_cluster_ebs_volume}\"\r\n      }\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "the aws_volume_attachment resource in terraform requires the instance_id ... my problem is the instance i want to mount the volume to is part of an ECS cluster and i cannot seem to find any clever examples on passing the instance ID of an instance in the ECS cluster to aws_volume_attachment so i can mount an existing EBS volume. using the ARN does not work. ", "keywords": ["instance", "cluster"]}]}], "answers": [{"Id": "74417264", "PostTypeId": "2", "ParentId": "56429550", "CreationDate": "2022-11-12T23:10:02.017", "Score": "0", "Body": "<p>Note that AWS now supports multi-attach for <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html\" rel=\"nofollow noreferrer\">EBS volumes</a> - it appears this is officially <a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/ebs-access-volumes-using-multi-attach/\" rel=\"nofollow noreferrer\">not officially</a> supported for multiple EC2 instances though. Note it is only supported for the (more expensive) io1 and io2 disk types.</p>\n<p>The EFS solution quoted above is the AWS equivalent of a NFS managed storage solution. The great thing is that EFS is a completely managed storage solution where mb/s can be specified to specify throughput needs. I would be curious to learn if anyone is running high-traffic databases directly on this though.</p>\n", "OwnerUserId": "3694437", "LastActivityDate": "2022-11-12T23:10:02.017", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "282094991", "PostHistoryTypeId": "2", "PostId": "74417264", "RevisionGUID": "2d53aabb-cf64-4c23-8c0d-00a7ddfb35d1", "CreationDate": "2022-11-12T23:10:02.017", "UserId": "3694437", "Text": "Note that AWS now supports multi-attach for [EBS volumes][1] - it appears this is officially [not officially][2] supported for multiple EC2 instances though. Note it is only supported for the (more expensive) io1 and io2 disk types.\r\n\r\nThe EFS solution quoted above is the AWS equivalent of a NFS managed storage solution. The great thing is that EFS is a completely managed storage solution where mb/s can be specified to specify throughput needs. I would be curious to learn if anyone is running high-traffic databases directly on this though.\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html\r\n  [2]: https://aws.amazon.com/premiumsupport/knowledge-center/ebs-access-volumes-using-multi-attach/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Note it is only supported for the (more expensive) io1 and io2 disk types. ", "keywords": ["expense"]}, {"source": "Text", "text": "The EFS solution quoted above is the AWS equivalent of a NFS managed storage solution. ", "keywords": ["storage"]}, {"source": "Text", "text": "The great thing is that EFS is a completely managed storage solution where mb/s can be specified to specify throughput needs. ", "keywords": ["storage"]}]}], "filtered-sentences": [{"source": "Body", "text": "Note it is only supported for the (more expensive) io1 and io2 disk types. ", "keywords": ["expense"]}, {"source": "Body", "text": "The EFS solution quoted above is the AWS equivalent of a NFS managed storage solution. ", "keywords": ["storage"]}, {"source": "Body", "text": "The great thing is that EFS is a completely managed storage solution where mb/s can be specified to specify throughput needs. ", "keywords": ["storage"]}]}, {"Id": "56969500", "PostTypeId": "2", "ParentId": "56429550", "CreationDate": "2019-07-10T11:13:48.087", "Score": "0", "Body": "<p>I am also going through this problem, and the conclusion I am coming to accept is that there isn't an easy way to do this. This conclusion is backed by <a href=\"https://github.com/aws/containers-roadmap/issues/64\" rel=\"nofollow noreferrer\">this issue</a> and <a href=\"https://github.com/aws/containers-roadmap/issues/53\" rel=\"nofollow noreferrer\">this other one</a>. I have seen third party solutions <a href=\"https://spotinst.com/blog/ecs-persistent-storage-docker-plugins/\" rel=\"nofollow noreferrer\">like this one</a> but I am not comfortable resorting to third party apps within my infrastructure.</p>\n\n<p>In contrast there is <a href=\"https://github.com/zacharysells/tf-ecs\" rel=\"nofollow noreferrer\">this repo</a> which claims to have achieved a way to provide nodes with EFS. I know it is not EBS, but it could provide a way to share data between containers and a master EC2 instance, regardless of which specific instance the containers are running in. </p>\n\n<p>Maybe you could find a way to attach existing EC2 instances to you cluster so you have more control in provisioning them. This is what I am probably going to try, but I realise it defeats half the purpose of using ecs, which is abstracting the way you launch containers without caring about the underlying host infrastructure. </p>\n\n<hr>\n\n<p><strong>Edit</strong>:</p>\n\n<p>I managed to create an ECS cluster in which all instances have an EFS partition mounted.</p>\n\n<ul>\n<li><p>Create the EFS volume in the same availability region as you are creating your cluster [1]. Be sure to create it in a private subnet.</p></li>\n<li><p>Modify your launch configuration <code>UserData</code> [2] script to install <code>amazon-efs-utils</code> [3]. If you are using ecs optimized amazon linux images, just add the following to your script:</p></li>\n</ul>\n\n<pre><code>  sudo yum install -y amazon-efs-utils\n</code></pre>\n\n<ul>\n<li>Add a step to create a mount point and mount the previously created EFS volume in <code>UserData</code> bash script:</li>\n</ul>\n\n<pre><code>  mkdir -p /mnt/efs\n  mount -t efs fs-12345678:/ /mnt/efs\n</code></pre>\n\n<p>Change <code>fs-12345678</code> to the id of your EFS volume.</p>\n\n<p>I guess you could expose an EBS volume using something like samba, but EFS does not need a dedicated EC2 instance to be served, it receives a dns and can be mounted directly.</p>\n\n<p>[1] <a href=\"https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-mounting.html#mount-fails-dns-name\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-mounting.html#mount-fails-dns-name</a></p>\n\n<p>[2] <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts</a></p>\n\n<p>[3] <a href=\"https://docs.aws.amazon.com/efs/latest/ug/using-amazon-efs-utils.html\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/efs/latest/ug/using-amazon-efs-utils.html</a></p>\n", "OwnerUserId": "3476100", "LastEditorUserId": "3476100", "LastEditDate": "2019-07-10T23:08:59.883", "LastActivityDate": "2019-07-10T23:08:59.883", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "100644364", "PostId": "56969500", "Score": "1", "Text": "interesting! i am buried right now but will come back and digest this. i would say i agree with your first paragraph though.", "CreationDate": "2019-07-16T14:19:00.160", "UserId": "11594328", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "100681207", "PostId": "56969500", "Score": "0", "Text": "reason why EBS is harder to work with is that it represents a physical device in the EC2 instance, while EFS represents a mountable network entity. I believe with EBS you are only able to create a device from a snapshot in the launch configuration, not a shared device across multiple instances", "CreationDate": "2019-07-17T15:09:29.030", "UserId": "3476100", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "reason why EBS is harder to work with is that it represents a physical device in the EC2 instance, while EFS represents a mountable network entity. ", "keywords": ["instance"]}]}], "history": [{"Id": "201257992", "PostHistoryTypeId": "2", "PostId": "56969500", "RevisionGUID": "5018bcef-427d-48e7-96c7-b1703455b816", "CreationDate": "2019-07-10T11:13:48.087", "UserId": "3476100", "Text": "I am also going through this problem, and the conclusion I am coming to accept is that there isn't an easy way to do this. This conclusion is backed by [this issue](https://github.com/aws/containers-roadmap/issues/64) and [this other one](https://github.com/aws/containers-roadmap/issues/53). I have seen third party solutions [like this one](https://spotinst.com/blog/ecs-persistent-storage-docker-plugins/) but I am not comfortable resorting to third party apps within my infrastructure.\r\n\r\nIn contrast there is [this repo](https://github.com/zacharysells/tf-ecs) which claims to have achieved a way to provide nodes with EFS. I know it is not EBS, but it could provide a way to share data between containers and a master EC2 instance, regardless of which specific instance the containers are running in. \r\n\r\nMaybe you could find a way to attach existing EC2 instances to you cluster so you have more control in provisioning them. This is what I am probably going to try, but I realise it defeats half the purpose of using ecs, which is abstracting the way you launch containers without caring about the underlying host infrastructure. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have seen third party solutions [like this one](https://spotinst.com/blog/ecs-persistent-storage-docker-plugins/) but I am not comfortable resorting to third party apps within my infrastructure. ", "keywords": ["storage"]}, {"source": "Text", "text": "I know it is not EBS, but it could provide a way to share data between containers and a master EC2 instance, regardless of which specific instance the containers are running in. ", "keywords": ["instance"]}, {"source": "Text", "text": "Maybe you could find a way to attach existing EC2 instances to you cluster so you have more control in provisioning them. ", "keywords": ["cluster"]}]}, {"Id": "201300481", "PostHistoryTypeId": "5", "PostId": "56969500", "RevisionGUID": "9c012215-8b30-47c0-8eee-b88e9e07df35", "CreationDate": "2019-07-10T23:03:30.670", "UserId": "3476100", "Comment": "added 1088 characters in body", "Text": "I am also going through this problem, and the conclusion I am coming to accept is that there isn't an easy way to do this. This conclusion is backed by [this issue](https://github.com/aws/containers-roadmap/issues/64) and [this other one](https://github.com/aws/containers-roadmap/issues/53). I have seen third party solutions [like this one](https://spotinst.com/blog/ecs-persistent-storage-docker-plugins/) but I am not comfortable resorting to third party apps within my infrastructure.\r\n\r\nIn contrast there is [this repo](https://github.com/zacharysells/tf-ecs) which claims to have achieved a way to provide nodes with EFS. I know it is not EBS, but it could provide a way to share data between containers and a master EC2 instance, regardless of which specific instance the containers are running in. \r\n\r\nMaybe you could find a way to attach existing EC2 instances to you cluster so you have more control in provisioning them. This is what I am probably going to try, but I realise it defeats half the purpose of using ecs, which is abstracting the way you launch containers without caring about the underlying host infrastructure. \r\n\r\n\r\n----------\r\n**Edit**:\r\n\r\nI managed to create an ECS cluster in which all instances have an EFS partition mounted.\r\n\r\n* Create the EFS volume in the same availability region as you are creating your cluster [1]. Be sure to create it in a private subnet.\r\n\r\n* Modify your launch configuration `UserData` [2] script to install `amazon-efs-utils`. If you are using ecs optimized amazon linux images, just add the following to your script: [3]\r\n```\r\n  sudo yum install -y amazon-efs-utils\r\n```\r\n\r\n* Add a step to create a mount point and mount the previously created EFS volume in `UserData` bash script:\r\n\r\n```\r\n  mkdir -p /mnt/efs\r\n  mount -t efs fs-12345678:/ /mnt/efs\r\n```\r\n\r\nChange `fs-12345678` to the id of your EFS volume.\r\n\r\nI guess you could expose an EBS volume using something like samba, but EFS does not need a dedicated EC2 instance to be served, it receives a dns and can be mounted directly.\r\n\r\n[1] https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-mounting.html#mount-fails-dns-name\r\n\r\n[2] https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts\r\n\r\n[3] https://docs.aws.amazon.com/efs/latest/ug/using-amazon-efs-utils.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have seen third party solutions [like this one](https://spotinst.com/blog/ecs-persistent-storage-docker-plugins/) but I am not comfortable resorting to third party apps within my infrastructure. ", "keywords": ["storage"]}, {"source": "Text", "text": "I know it is not EBS, but it could provide a way to share data between containers and a master EC2 instance, regardless of which specific instance the containers are running in. ", "keywords": ["instance"]}, {"source": "Text", "text": "Maybe you could find a way to attach existing EC2 instances to you cluster so you have more control in provisioning them. ", "keywords": ["cluster"]}, {"source": "Text", "text": "---------- **Edit**: I managed to create an ECS cluster in which all instances have an EFS partition mounted. ", "keywords": ["cluster"]}, {"source": "Text", "text": "* Create the EFS volume in the same availability region as you are creating your cluster [1]. ", "keywords": ["cluster"]}, {"source": "Text", "text": "If you are using ecs optimized amazon linux images, just add the following to your script: [3] ``` sudo yum install -y amazon-efs-utils ``` * Add a step to create a mount point and mount the previously created EFS volume in `UserData` bash script: ``` mkdir -p /mnt/efs mount -t efs fs-12345678:/ /mnt/efs ``` Change `fs-12345678` to the id of your EFS volume. ", "keywords": ["change"]}, {"source": "Text", "text": "I guess you could expose an EBS volume using something like samba, but EFS does not need a dedicated EC2 instance to be served, it receives a dns and can be mounted directly. [1] https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-mounting.html#mount-fails-dns-name [2] https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts [3] https://docs.aws.amazon.com/efs/latest/ug/using-amazon-efs-utils.html", "keywords": ["instance"]}]}, {"Id": "201300603", "PostHistoryTypeId": "5", "PostId": "56969500", "RevisionGUID": "5c498eab-66bb-4fab-9bd4-fbae5cb7d0d3", "CreationDate": "2019-07-10T23:08:59.883", "UserId": "3476100", "Comment": "edited body", "Text": "I am also going through this problem, and the conclusion I am coming to accept is that there isn't an easy way to do this. This conclusion is backed by [this issue](https://github.com/aws/containers-roadmap/issues/64) and [this other one](https://github.com/aws/containers-roadmap/issues/53). I have seen third party solutions [like this one](https://spotinst.com/blog/ecs-persistent-storage-docker-plugins/) but I am not comfortable resorting to third party apps within my infrastructure.\r\n\r\nIn contrast there is [this repo](https://github.com/zacharysells/tf-ecs) which claims to have achieved a way to provide nodes with EFS. I know it is not EBS, but it could provide a way to share data between containers and a master EC2 instance, regardless of which specific instance the containers are running in. \r\n\r\nMaybe you could find a way to attach existing EC2 instances to you cluster so you have more control in provisioning them. This is what I am probably going to try, but I realise it defeats half the purpose of using ecs, which is abstracting the way you launch containers without caring about the underlying host infrastructure. \r\n\r\n\r\n----------\r\n**Edit**:\r\n\r\nI managed to create an ECS cluster in which all instances have an EFS partition mounted.\r\n\r\n* Create the EFS volume in the same availability region as you are creating your cluster [1]. Be sure to create it in a private subnet.\r\n\r\n* Modify your launch configuration `UserData` [2] script to install `amazon-efs-utils` [3]. If you are using ecs optimized amazon linux images, just add the following to your script:\r\n```\r\n  sudo yum install -y amazon-efs-utils\r\n```\r\n\r\n* Add a step to create a mount point and mount the previously created EFS volume in `UserData` bash script:\r\n\r\n```\r\n  mkdir -p /mnt/efs\r\n  mount -t efs fs-12345678:/ /mnt/efs\r\n```\r\n\r\nChange `fs-12345678` to the id of your EFS volume.\r\n\r\nI guess you could expose an EBS volume using something like samba, but EFS does not need a dedicated EC2 instance to be served, it receives a dns and can be mounted directly.\r\n\r\n[1] https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-mounting.html#mount-fails-dns-name\r\n\r\n[2] https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts\r\n\r\n[3] https://docs.aws.amazon.com/efs/latest/ug/using-amazon-efs-utils.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have seen third party solutions [like this one](https://spotinst.com/blog/ecs-persistent-storage-docker-plugins/) but I am not comfortable resorting to third party apps within my infrastructure. ", "keywords": ["storage"]}, {"source": "Text", "text": "I know it is not EBS, but it could provide a way to share data between containers and a master EC2 instance, regardless of which specific instance the containers are running in. ", "keywords": ["instance"]}, {"source": "Text", "text": "Maybe you could find a way to attach existing EC2 instances to you cluster so you have more control in provisioning them. ", "keywords": ["cluster"]}, {"source": "Text", "text": "---------- **Edit**: I managed to create an ECS cluster in which all instances have an EFS partition mounted. ", "keywords": ["cluster"]}, {"source": "Text", "text": "* Create the EFS volume in the same availability region as you are creating your cluster [1]. ", "keywords": ["cluster"]}, {"source": "Text", "text": "If you are using ecs optimized amazon linux images, just add the following to your script: ``` sudo yum install -y amazon-efs-utils ``` * Add a step to create a mount point and mount the previously created EFS volume in `UserData` bash script: ``` mkdir -p /mnt/efs mount -t efs fs-12345678:/ /mnt/efs ``` Change `fs-12345678` to the id of your EFS volume. ", "keywords": ["change"]}, {"source": "Text", "text": "I guess you could expose an EBS volume using something like samba, but EFS does not need a dedicated EC2 instance to be served, it receives a dns and can be mounted directly. [1] https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-mounting.html#mount-fails-dns-name [2] https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts [3] https://docs.aws.amazon.com/efs/latest/ug/using-amazon-efs-utils.html", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "I know it is not EBS, but it could provide a way to share data between containers and a master EC2 instance, regardless of which specific instance the containers are running in. ", "keywords": ["instance"]}, {"source": "Body", "text": "Maybe you could find a way to attach existing EC2 instances to you cluster so you have more control in provisioning them. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Edit: I managed to create an ECS cluster in which all instances have an EFS partition mounted. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Create the EFS volume in the same availability region as you are creating your cluster [1]. ", "keywords": ["cluster"]}, {"source": "Body", "text": "If you are using ecs optimized amazon linux images, just add the following to your script: Add a step to create a mount point and mount the previously created EFS volume in UserData bash script: Change fs-12345678 to the id of your EFS volume. ", "keywords": ["change"]}, {"source": "Body", "text": "I guess you could expose an EBS volume using something like samba, but EFS does not need a dedicated EC2 instance to be served, it receives a dns and can be mounted directly. [1] https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-mounting.html#mount-fails-dns-name [2] https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts [3] https://docs.aws.amazon.com/efs/latest/ug/using-amazon-efs-utils.html", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "trying to attach/mount an EBS volume to ECS instance using terraform", "keywords": ["instance"]}, {"source": "Body", "text": "my problem is the instance i want to mount the volume to is part of an ECS cluster and i cannot seem to find any clever examples on passing the instance ID of an instance in the ECS cluster to aws_volume_attachment so i can mount an existing EBS volume. ", "keywords": ["instance", "cluster"]}]}