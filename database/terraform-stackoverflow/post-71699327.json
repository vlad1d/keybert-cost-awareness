{"Id": "71699327", "PostTypeId": "1", "AcceptedAnswerId": "71704130", "CreationDate": "2022-03-31T21:25:52.327", "Score": "8", "ViewCount": "3494", "Body": "<p>I come from a background in Kubernetes and I'm trying to learn AWS/ECS. In Kubernetes, you can use <code>ConfigMap</code> resources to mount simple one-off config files onto containers quickly and easily without having to go through all the trouble of setting up volumes. This also makes it very easy to configure services from Terraform, which is what I'm trying to do.</p>\n<p>Do AWS ECS Services have a feature like the Kubernetes Config Maps? I just need the dead-simplest way to insert arbitrary text files into my services on startup, which can be updated with Terraform quickly. I want to avoid having to rebuild the whole image every time this file changes.</p>\n<p>Is this possible or do I need to create volumes for this? If so, what's the best type of volume configuration for this purpose? I can store and update the files in S3 easily, and these are just simple config files that only need read access, so would this be an acceptable case to just mount the S3 bucket?</p>\n", "OwnerUserId": "3330979", "LastEditorUserId": "3330979", "LastEditDate": "2022-03-31T23:09:50.950", "LastActivityDate": "2023-02-12T02:49:49.540", "Title": "Mount a single config file onto an ECS service", "Tags": "<amazon-web-services><terraform><amazon-ecs>", "AnswerCount": "2", "CommentCount": "3", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "126717808", "PostId": "71699327", "Score": "1", "Text": "Why not use AWS AKS if you want Kubernetes behaviour? ECS is not Kubernetes.", "CreationDate": "2022-04-01T04:27:51.927", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126728784", "PostId": "71699327", "Score": "1", "Text": "@Marcin Because the overhead cost of $75/month for EKS is more than the cost of the computing power we'd be putting in it.", "CreationDate": "2022-04-01T14:08:43.260", "UserId": "3330979", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Because the overhead cost of $75/month for EKS is more than the cost of the computing power we'd be putting in it.", "keywords": ["cost"]}]}, {"Id": "129005265", "PostId": "71699327", "Score": "1", "Text": "Had the same issue coming from Kubernetes and ConfigMaps, one would have thought the engineers at AWS would have done something equivalent by now...", "CreationDate": "2022-07-19T18:43:51.110", "UserId": "2188893", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "267228620", "PostHistoryTypeId": "2", "PostId": "71699327", "RevisionGUID": "eb297d93-0b46-477c-829e-05943e351eae", "CreationDate": "2022-03-31T21:25:52.327", "UserId": "3330979", "Text": "I come from a background in Kubernetes and I'm trying to learn AWS/ECS. In Kubernetes, you can use `ConfigMap` resources to mount simple one-off config files onto containers quickly and easily without having to go through all the trouble of setting up volumes. This also makes it very easy to configure services from Terraform, which is what I'm trying to do.\r\n\r\nDo AWS ECS Services have a feature like the Kubernetes Config Maps? I just need the dead-simplest way to insert arbitrary text files into my services on startup. Is this possible or do I need to create volumes for this? If so, what's the best type of volume for this purpose?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Do AWS ECS Services have a feature like the Kubernetes Config Maps? ", "keywords": ["feature"]}]}, {"Id": "267228622", "PostHistoryTypeId": "1", "PostId": "71699327", "RevisionGUID": "eb297d93-0b46-477c-829e-05943e351eae", "CreationDate": "2022-03-31T21:25:52.327", "UserId": "3330979", "Text": "Mount a single config file onto an ECS service", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "267228623", "PostHistoryTypeId": "3", "PostId": "71699327", "RevisionGUID": "eb297d93-0b46-477c-829e-05943e351eae", "CreationDate": "2022-03-31T21:25:52.327", "UserId": "3330979", "Text": "<amazon-web-services><amazon-ecs>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "267231526", "PostHistoryTypeId": "5", "PostId": "71699327", "RevisionGUID": "c2eb4e7a-5aa9-4921-9206-88c7333bfa2f", "CreationDate": "2022-03-31T22:39:29.393", "UserId": "3330979", "Comment": "added 45 characters in body", "Text": "I come from a background in Kubernetes and I'm trying to learn AWS/ECS. In Kubernetes, you can use `ConfigMap` resources to mount simple one-off config files onto containers quickly and easily without having to go through all the trouble of setting up volumes. This also makes it very easy to configure services from Terraform, which is what I'm trying to do.\r\n\r\nDo AWS ECS Services have a feature like the Kubernetes Config Maps? I just need the dead-simplest way to insert arbitrary text files into my services on startup, which can be updated with Terraform somehow. Is this possible or do I need to create volumes for this? If so, what's the best type of volume for this purpose?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Do AWS ECS Services have a feature like the Kubernetes Config Maps? ", "keywords": ["feature"]}]}, {"Id": "267232187", "PostHistoryTypeId": "5", "PostId": "71699327", "RevisionGUID": "a8e983bf-23b4-4e02-990b-b9ffd8e047d6", "CreationDate": "2022-03-31T22:55:21.700", "UserId": "3330979", "Comment": "added 14 characters in body", "Text": "I come from a background in Kubernetes and I'm trying to learn AWS/ECS. In Kubernetes, you can use `ConfigMap` resources to mount simple one-off config files onto containers quickly and easily without having to go through all the trouble of setting up volumes. This also makes it very easy to configure services from Terraform, which is what I'm trying to do.\r\n\r\nDo AWS ECS Services have a feature like the Kubernetes Config Maps? I just need the dead-simplest way to insert arbitrary text files into my services on startup, which can be updated with Terraform quickly. I want to avoid having to rebuild the whole image every time this file changes.\r\n\r\nIs this possible or do I need to create volumes for this? If so, what's the best type of volume configuration for this purpose?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Do AWS ECS Services have a feature like the Kubernetes Config Maps? ", "keywords": ["feature"]}, {"source": "Text", "text": "I want to avoid having to rebuild the whole image every time this file changes. ", "keywords": ["change"]}]}, {"Id": "267232294", "PostHistoryTypeId": "6", "PostId": "71699327", "RevisionGUID": "a8e983bf-23b4-4e02-990b-b9ffd8e047d6", "CreationDate": "2022-03-31T22:55:21.700", "UserId": "3330979", "Comment": "added 14 characters in body", "Text": "<amazon-web-services><terraform><amazon-ecs>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "267232686", "PostHistoryTypeId": "5", "PostId": "71699327", "RevisionGUID": "30c40a94-7072-49ea-afb0-365095a3719d", "CreationDate": "2022-03-31T23:09:50.950", "UserId": "3330979", "Comment": "added 178 characters in body", "Text": "I come from a background in Kubernetes and I'm trying to learn AWS/ECS. In Kubernetes, you can use `ConfigMap` resources to mount simple one-off config files onto containers quickly and easily without having to go through all the trouble of setting up volumes. This also makes it very easy to configure services from Terraform, which is what I'm trying to do.\r\n\r\nDo AWS ECS Services have a feature like the Kubernetes Config Maps? I just need the dead-simplest way to insert arbitrary text files into my services on startup, which can be updated with Terraform quickly. I want to avoid having to rebuild the whole image every time this file changes.\r\n\r\nIs this possible or do I need to create volumes for this? If so, what's the best type of volume configuration for this purpose? I can store and update the files in S3 easily, and these are just simple config files that only need read access, so would this be an acceptable case to just mount the S3 bucket?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Do AWS ECS Services have a feature like the Kubernetes Config Maps? ", "keywords": ["feature"]}, {"source": "Text", "text": "I want to avoid having to rebuild the whole image every time this file changes. ", "keywords": ["change"]}]}], "answers": [{"Id": "75424634", "PostTypeId": "2", "ParentId": "71699327", "CreationDate": "2023-02-12T02:49:49.540", "Score": "-2", "Body": "<p>Disclaimer - I am the author of this project.</p>\n<p><a href=\"https://github.com/mcasperson/UltimateDockerLauncher\" rel=\"nofollow noreferrer\">Ultimate Docker Launcher</a> is an open source app that will do what you are looking for. It will create or edit files at container launch based on env vars, so you don't need to recompile your app with each file change, or use an external file system like EFS.</p>\n", "OwnerUserId": "157605", "LastActivityDate": "2023-02-12T02:49:49.540", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "287911846", "PostHistoryTypeId": "2", "PostId": "75424634", "RevisionGUID": "dfcaa7ed-28b3-4c7e-a50b-851a3c04368d", "CreationDate": "2023-02-12T02:49:49.540", "UserId": "157605", "Text": "Disclaimer - I am the author of this project.\r\n\r\n[Ultimate Docker Launcher](https://github.com/mcasperson/UltimateDockerLauncher) is an open source app that will do what you are looking for. It will create or edit files at container launch based on env vars, so you don't need to recompile your app with each file change, or use an external file system like EFS.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It will create or edit files at container launch based on env vars, so you don't need to recompile your app with each file change, or use an external file system like EFS.", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "It will create or edit files at container launch based on env vars, so you don't need to recompile your app with each file change, or use an external file system like EFS.", "keywords": ["change"]}]}, {"Id": "71704130", "PostTypeId": "2", "ParentId": "71699327", "CreationDate": "2022-04-01T08:42:09.847", "Score": "1", "Body": "<p>The solution depends on architecture and details. Here is some possible solutions that I can see:</p>\n<ol>\n<li>If possible to set parameters as environment variables, I recommend to store it values inside AWS <code>Systems Manager</code> or <code>Secrets Manager</code> services and <a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/ecs-data-security-container-task/\" rel=\"nofollow noreferrer\">pass to containers</a> (In other way you may generate config file inside container reading these ENVs and print values to file by using custom <code>Entrypoint</code>)</li>\n<li>If you need to upload file inside docker container here is two possible simple solutions:\n<ul>\n<li>Create a fixed <code>base_image</code> and every time rebuild only last layer of it.  In Dockerfile terms it will be look like:\n<pre><code>FROM base_image\nCOPY config_file /app/config_file\n</code></pre>\n</li>\n<li>Store config file at S3 bucket and copy it on container start by changing <code>Entrypoint</code>. For example if current <code>Entryrpoint</code> is <code>/usr/bin/apache</code>:\n<pre><code>FROM some_image\nRUN echo 'aws s3 cp s3://mybucket/config_file /app/ &amp;&amp; /usr/bin/apache' &gt; /Entrypoint.sh\nENTRYPOINT ['sh', '/Entrypoint.sh']\n</code></pre>\n\uff0aHowever you need to install aws cli inside container in this case.</li>\n</ul>\n</li>\n</ol>\n", "OwnerUserId": "13946204", "LastActivityDate": "2022-04-01T08:42:09.847", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "126728687", "PostId": "71704130", "Score": "0", "Text": "Alright thanks, I was hoping I wouldn't have to do something like that but it sounds like the best way right now. The main reason is that I wanted to be able to just use public registry images without needing to manage my own.", "CreationDate": "2022-04-01T14:05:14.017", "UserId": "3330979", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126731269", "PostId": "71704130", "Score": "1", "Text": "`The main reason is that I wanted to be able to just use public registry images without needing to manage my own` \u2192 AWS ECR is a pretty simple and convenient service optimised to use with ECS. Also own repository allows you to freeze specific versions of images as long as you need. Public images everytime updated and deploy scripts suddenly stopping to work. It is little bit unstable in my opinion", "CreationDate": "2022-04-01T15:51:23.153", "UserId": "13946204", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "267254163", "PostHistoryTypeId": "2", "PostId": "71704130", "RevisionGUID": "bad62870-e436-40b8-8c2b-8b7e3aa09c39", "CreationDate": "2022-04-01T08:42:09.847", "UserId": "13946204", "Text": "The solution depends on architecture and details. Here is some possible solutions that I can see:\r\n\r\n1. If possible to set parameters as environment variables, I recommend to store it values inside AWS `Systems Manager` or `Secrets Manager` services and [pass to containers][1] (In other way you may generate config file inside container reading these ENVs and print values to file by using custom `Entrypoint`)\r\n2. If you need to upload file inside docker container here is two possible simple solutions:\r\n    - Create a fixed `base_image` and every time rebuild only last layer of it.  In Dockerfile terms it will be look like:\r\n        ```dockerfile\r\n        FROM base_image\r\n        COPY config_file /app/config_file\r\n        ```\r\n    - Store config file at S3 bucket and copy it on container start by changing `Entrypoint`. For example if current `Entryrpoint` is `/usr/bin/apache`:\r\n        ```dockerfile\r\n        FROM some_image\r\n        RUN echo 'aws s3 cp s3://mybucket/config_file /app/ && /usr/bin/apache' > /Entrypoint.sh\r\n        ENTRYPOINT ['sh', '/Entrypoint.sh']\r\n        ```\r\n        \uff0aHowever you need to install aws cli inside container in this case.\r\n\r\n  [1]: https://aws.amazon.com/premiumsupport/knowledge-center/ecs-data-security-container-task/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "In Dockerfile terms it will be look like: ```dockerfile FROM base_image COPY config_file /app/config_file ``` - Store config file at S3 bucket and copy it on container start by changing `Entrypoint`. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "In Dockerfile terms it will be look like: Store config file at S3 bucket and copy it on container start by changing Entrypoint. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Do AWS ECS Services have a feature like the Kubernetes Config Maps? ", "keywords": ["feature"]}, {"source": "Body", "text": "I want to avoid having to rebuild the whole image every time this file changes. ", "keywords": ["change"]}]}