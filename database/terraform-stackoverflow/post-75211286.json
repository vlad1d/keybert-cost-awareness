{"Id": "75211286", "PostTypeId": "1", "AcceptedAnswerId": "75216514", "CreationDate": "2023-01-23T15:00:46.573", "Score": "0", "ViewCount": "210", "Body": "<p>I have a Terraform module calling a submodule, which also calls another submodule. The final module uses a ternary condition as part of some logic to determine whether a dynamic block should be omitted in a resource definition.</p>\n<p>I'm going to only include the pertinent code here, else it would get unnecessarily complicated.</p>\n<p>The first module call:</p>\n<pre><code>module &quot;foobar&quot; {\n  source = &quot;./modules/foobar&quot;\n  ...\n  vpc_cidr = &quot;10.0.0.0/16&quot;\n  # or vpc_cidr = null, or omitted altogether as the default value is null\n  ...\n}\n</code></pre>\n<p>The second module (in &quot;./modules/foobar&quot;):</p>\n<pre><code>module &quot;second_level&quot; {\n  source = &quot;./modules/second_level&quot;\n  ...\n  vpc_config = var.vpc_cidr == null ? {} : { &quot;some&quot; = &quot;things }\n  ...\n}\n</code></pre>\n<p>The third module (in &quot;./modules/second_level&quot;):</p>\n<pre><code>locals {\n  vpc_config = var.vpc_config == {} ? {} : { this = var.vpc_config } \n}\n\nresource &quot;aws_lambda_function&quot; &quot;this&quot; {\n  ...\n  dynamic &quot;vpc_config&quot; {\n    for_each = local.vpc_config\n\n    content {\n      &quot;some&quot; = vpc_config.value[&quot;some&quot;]\n    }\n  ...\n}\n</code></pre>\n<p>This is all horribly simplified, as I'm sure you're already aware, and you might have some questions about why I'm doing things like in the second level ternary operator. I can only say that there are &quot;reasons&quot;, but they'd detract from my question.</p>\n<p>When I run this, I expect the dynamic block to be filled when the value of <code>vpc_cidr</code> is not null. When I run it with a value in <code>vpc_cidr</code>, it works, and the dynamic block is added.</p>\n<p>If <code>vpc_cidr</code> is null however, I get an error like this:</p>\n<pre><code>\u2502   32:       security_group_ids = vpc_config.value[&quot;some&quot;]\n\u2502     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2502     \u2502 vpc_config.value is empty map of dynamic\n</code></pre>\n<p>The really odd this is that if I swap the ternary around so it's actually the reverse of what I want, like this: <code>vpc_config = var.vpc_config == {} ? { this = var.vpc_config } : {}</code> everything works as I want.</p>\n<h2>EDIT</h2>\n<p>Some more context after the correct answer, because what I'm asking for indeed looks strange.</p>\n<blockquote>\n<p>Wrapping this map into another single-element map with a hard-coded key if it's not empty</p>\n</blockquote>\n<p>I was originally doing this because I needed to iterate just once over the map in the <code>for_each</code> block (and it contains more than a single key), so I'm faking a single key by putting a dummy key in there to iterate over.</p>\n<p>As @martin-atkins points out in the answer though, <code>for_each</code> can iterate over any collection type. Therefore, I've simplified the locals assignment like this:</p>\n<pre><code>locals {\n  vpc_config = length(var.vpc_config) == 0 ? [] : [var.vpc_config]\n}\n</code></pre>\n<p>This means that I can run a more direct dynamic block, and do what I really want, which is iterate over a <em>list</em>:</p>\n<pre><code>  dynamic &quot;vpc_config&quot; {\n    for_each = local.vpc_config\n\n    content {\n      subnet_ids         = var.vpc_config[&quot;subnet_ids&quot;]\n      security_group_ids = var.vpc_config[&quot;security_group_ids&quot;]\n    }\n  }\n</code></pre>\n<p>It's still a little hacky because I'm converting a map to a list of maps, but it makes sense more sense further up the chain of modules.</p>\n", "OwnerUserId": "2212140", "LastEditorUserId": "2212140", "LastEditDate": "2023-01-24T08:40:03.360", "LastActivityDate": "2023-01-25T00:22:44.973", "Title": "Terraform Ternary Condition Working in Reverse", "Tags": "<terraform><hcl>", "AnswerCount": "2", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132718833", "PostId": "75211286", "Score": "0", "Text": "What's the reason for this condition? `var.vpc_config == {}`", "CreationDate": "2023-01-23T15:23:07.793", "UserId": "9439227", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "286678644", "PostHistoryTypeId": "2", "PostId": "75211286", "RevisionGUID": "e09de019-4ec4-49cd-a26a-46c3be8c892a", "CreationDate": "2023-01-23T15:00:46.573", "UserId": "2212140", "Text": "I have a Terraform module calling a submodule, which also calls another submodule. The final module uses a ternary condition as part of some logic to determine whether a dynamic block should be omitted in a resource definition.\r\n\r\nI'm going to only include the pertinent code here, else it would get unnecessarily complicated.\r\n\r\nThe first module call:\r\n\r\n```hcl\r\nmodule \"foobar\" {\r\n  source = \"./modules/foobar\"\r\n  ...\r\n  vpc_cidr = \"10.0.0.0/16\"\r\n  # or vpc_cidr = null, or omitted altogether as the default value is null\r\n  ...\r\n}\r\n```\r\n\r\nThe second module (in \"./modules/foobar\"):\r\n\r\n```hcl\r\nmodule \"second_level\" {\r\n  source = \"./modules/second_level\"\r\n  ...\r\n  vpc_config = var.vpc_cidr == null ? {} : { \"some\" = \"things }\r\n  ...\r\n}\r\n```\r\n\r\nThe third module (in \"./modules/second_level\"):\r\n\r\n```hcl\r\nlocals {\r\n  vpc_config = var.vpc_config == {} ? {} : { this = var.vpc_config } \r\n}\r\n\r\nresource \"aws_lambda_function\" \"this\" {\r\n  ...\r\n  dynamic \"vpc_config\" {\r\n    for_each = local.vpc_config\r\n\r\n    content {\r\n      \"some\" = vpc_config.value[\"some\"]\r\n    }\r\n  ...\r\n}\r\n```\r\n\r\nThis is all horribly simplified, as I'm sure you're already aware, and you might have some questions about why I'm doing things like in the second level ternary operator. I can only say that there are \"reasons\", but they'd detract from my question.\r\n\r\nWhen I run this, I expect the dynamic block to be filled when the value of `vpc_cidr` is not null. When I run it with a value in `vpc_cidr`, it works, and the dynamic block is added.\r\n\r\nIf `vpc_cidr` is null however, I get an error like this:\r\n\r\n```hcl\r\n\u2502   32:       security_group_ids = vpc_config.value[\"some\"]\r\n\u2502     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n\u2502     \u2502 vpc_config.value is empty map of dynamic\r\n```\r\n\r\nThe really odd this is that if I swap the ternary around so it's actually the reverse of what I want, like this: `vpc_config = var.vpc_config == {} ? { this = var.vpc_config } : {}` everything works as I want.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "286678646", "PostHistoryTypeId": "1", "PostId": "75211286", "RevisionGUID": "e09de019-4ec4-49cd-a26a-46c3be8c892a", "CreationDate": "2023-01-23T15:00:46.573", "UserId": "2212140", "Text": "Terraform Ternary Condition Working in Reverse", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "286678647", "PostHistoryTypeId": "3", "PostId": "75211286", "RevisionGUID": "e09de019-4ec4-49cd-a26a-46c3be8c892a", "CreationDate": "2023-01-23T15:00:46.573", "UserId": "2212140", "Text": "<terraform><hcl>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "286723203", "PostHistoryTypeId": "5", "PostId": "75211286", "RevisionGUID": "0c3d3a94-d347-4b5c-bc28-ce19f00aa475", "CreationDate": "2023-01-24T08:40:03.360", "UserId": "2212140", "Comment": "added 1168 characters in body", "Text": "I have a Terraform module calling a submodule, which also calls another submodule. The final module uses a ternary condition as part of some logic to determine whether a dynamic block should be omitted in a resource definition.\r\n\r\nI'm going to only include the pertinent code here, else it would get unnecessarily complicated.\r\n\r\nThe first module call:\r\n\r\n```hcl\r\nmodule \"foobar\" {\r\n  source = \"./modules/foobar\"\r\n  ...\r\n  vpc_cidr = \"10.0.0.0/16\"\r\n  # or vpc_cidr = null, or omitted altogether as the default value is null\r\n  ...\r\n}\r\n```\r\n\r\nThe second module (in \"./modules/foobar\"):\r\n\r\n```hcl\r\nmodule \"second_level\" {\r\n  source = \"./modules/second_level\"\r\n  ...\r\n  vpc_config = var.vpc_cidr == null ? {} : { \"some\" = \"things }\r\n  ...\r\n}\r\n```\r\n\r\nThe third module (in \"./modules/second_level\"):\r\n\r\n```hcl\r\nlocals {\r\n  vpc_config = var.vpc_config == {} ? {} : { this = var.vpc_config } \r\n}\r\n\r\nresource \"aws_lambda_function\" \"this\" {\r\n  ...\r\n  dynamic \"vpc_config\" {\r\n    for_each = local.vpc_config\r\n\r\n    content {\r\n      \"some\" = vpc_config.value[\"some\"]\r\n    }\r\n  ...\r\n}\r\n```\r\n\r\nThis is all horribly simplified, as I'm sure you're already aware, and you might have some questions about why I'm doing things like in the second level ternary operator. I can only say that there are \"reasons\", but they'd detract from my question.\r\n\r\nWhen I run this, I expect the dynamic block to be filled when the value of `vpc_cidr` is not null. When I run it with a value in `vpc_cidr`, it works, and the dynamic block is added.\r\n\r\nIf `vpc_cidr` is null however, I get an error like this:\r\n\r\n```hcl\r\n\u2502   32:       security_group_ids = vpc_config.value[\"some\"]\r\n\u2502     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n\u2502     \u2502 vpc_config.value is empty map of dynamic\r\n```\r\n\r\nThe really odd this is that if I swap the ternary around so it's actually the reverse of what I want, like this: `vpc_config = var.vpc_config == {} ? { this = var.vpc_config } : {}` everything works as I want.\r\n\r\n## EDIT\r\n\r\nSome more context after the correct answer, because what I'm asking for indeed looks strange.\r\n\r\n> Wrapping this map into another single-element map with a hard-coded key if it's not empty\r\n\r\nI was originally doing this because I needed to iterate just once over the map in the `for_each` block (and it contains more than a single key), so I'm faking a single key by putting a dummy key in there to iterate over.\r\n\r\nAs @martin-atkins points out in the answer though, `for_each` can iterate over any collection type. Therefore, I've simplified the locals assignment like this:\r\n\r\n```hcl\r\nlocals {\r\n  vpc_config = length(var.vpc_config) == 0 ? [] : [var.vpc_config]\r\n}\r\n```\r\n\r\nThis means that I can run a more direct dynamic block, and do what I really want, which is iterate over a _list_:\r\n\r\n```hcl\r\n  dynamic \"vpc_config\" {\r\n    for_each = local.vpc_config\r\n\r\n    content {\r\n      subnet_ids         = var.vpc_config[\"subnet_ids\"]\r\n      security_group_ids = var.vpc_config[\"security_group_ids\"]\r\n    }\r\n  }\r\n```\r\n\r\nIt's still a little hacky because I'm converting a map to a list of maps, but it makes sense more sense further up the chain of modules.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "75211557", "PostTypeId": "2", "ParentId": "75211286", "CreationDate": "2023-01-23T15:23:14.293", "Score": "1", "Body": "<p>All of your code is behaving as expected. The issue here is that the dynamic block iterator is likely not being lazily evaluated at compilation, but rather only at runtime. We can workaround this by providing a &quot;failover&quot; value to resolve against for the situation when <code>vpc_config.value</code> is empty, and therefore has no <code>some</code> key.</p>\n<pre><code>content {\n  &quot;some&quot; = try(vpc_config.value[&quot;some&quot;], null)\n}\n</code></pre>\n<p>Since we do not know the specifics, we have to assume it is safe to supply a <code>null</code> argument to the <code>some</code> parameter.</p>\n", "OwnerUserId": "5343387", "LastActivityDate": "2023-01-23T15:23:14.293", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132731569", "PostId": "75211557", "Score": "0", "Text": "This wasn't it, but was worth it just to learn of the `try` function! I need to keep up to date with new versions better ;) Thanks", "CreationDate": "2023-01-24T08:12:42.577", "UserId": "2212140", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "286680160", "PostHistoryTypeId": "2", "PostId": "75211557", "RevisionGUID": "a9a62512-8d8c-4169-88d0-70872b053c85", "CreationDate": "2023-01-23T15:23:14.293", "UserId": "5343387", "Text": "All of your code is behaving as expected. The issue here is that the dynamic block iterator is likely not being lazily evaluated at compilation, but rather only at runtime. We can workaround this by providing a \"failover\" value to resolve against for the situation when `vpc_config.value` is empty, and therefore has no `some` key.\r\n\r\n    content {\r\n      \"some\" = try(vpc_config.value[\"some\"], null)\r\n    }\r\n\r\nSince we do not know the specifics, we have to assume it is safe to supply a `null` argument to the `some` parameter.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "75216514", "PostTypeId": "2", "ParentId": "75211286", "CreationDate": "2023-01-24T00:53:50.480", "Score": "1", "Body": "<p>Using the <code>==</code> operator to compare complex types is very rarely what you want, because <code>==</code> means &quot;exactly the same type and value&quot;, and so unlike many other contexts is suddenly becomes very important to pay attention to the difference between object types and map types, map types of different element types, etc.</p>\n<p>The expression <code>{}</code> has type <code>object({})</code>, and so a value of that type can never compare equal to a <code>map(string)</code> value, even if that map is empty. Normally the distinction between object types and map types is ignorable because Terraform will automatically convert between them, but the <code>==</code> operator doesn't give Terraform any information about what types you mean and so no automatic conversions are possible and you must get the types of the operands right yourself.</p>\n<p>The easiest answer to avoid dealing with that is to skip using <code>==</code> at all and instead just use the length of the collection as the condition:</p>\n<pre><code>vpc_config = length(var.vpc_config) == 0 ? {} : { this = var.vpc_config } \n</code></pre>\n<hr />\n<p>Wrapping this map into another single-element map with a hard-coded key if it's not empty seems like an unusual thing to be doing, and so I wonder if this might be an <a href=\"https://xyproblem.info/\" rel=\"nofollow noreferrer\">XY Problem</a> and there might be a more straightforward way to achieve your goal here, but I've focused on directly answering your question as stated.</p>\n<p>You might find it interesting to know that the <code>for_each</code> argument in a <code>dynamic</code> block can accept <em>any</em> collection type, so (unlike for resource <code>for_each</code>, where the instance keys are significant for tracking) you shouldn't typically need to create synthetic extra maps to fake conditional blocks. A zero-or-one-element list would work just as well for generating zero or one blocks, for example.</p>\n", "OwnerUserId": "281848", "LastEditorUserId": "281848", "LastEditDate": "2023-01-25T00:22:44.973", "LastActivityDate": "2023-01-25T00:22:44.973", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132731619", "PostId": "75216514", "Score": "0", "Text": "Excellent, this was exactly it, thanks so much for the detailed explanation. I was on the right track when I tried to instead compare it to a `map()` at one point, but read that that function is depreciated. I'll try and add some context in an edit to the question, because I can see what you mean by it looking like an XY problem.", "CreationDate": "2023-01-24T08:15:18.673", "UserId": "2212140", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "286708272", "PostHistoryTypeId": "2", "PostId": "75216514", "RevisionGUID": "85098e5c-e777-4dd8-a825-219573b2ccee", "CreationDate": "2023-01-24T00:53:50.480", "UserId": "281848", "Text": "Using the `==` operator to complex types is very rarely what you want, because `==` means \"exactly the same type and value\", and so unlike many other contexts is suddenly becomes very important to pay attention to the difference between object types and map types, map types of different element types, etc.\r\n\r\nThe expression `{}` has type `object({})`, and so a value of that type can never compare equal to a `map(string)` value, even if that map is empty. Normally the distinction between object types and map types is ignorable because Terraform will automatically convert between them, but the `==` operator doesn't give Terraform any information about what types you mean and so no automatic conversions are possible and you must get the types of the operands right yourself.\r\n\r\nThe easiest answer to avoid dealing with that is to skip using `==` at all and instead just use the length of the collection as the condition:\r\n\r\n```\r\nvpc_config = length(var.vpc_config) == 0 ? {} : { this = var.vpc_config } \r\n```\r\n\r\n---\r\n\r\nWrapping this map into another single-element map with a hard-coded key if it's not empty seems like an unusual thing to be doing, and so I wonder if this might be an [XY Problem](https://xyproblem.info/) and there might be a more straightforward way to achieve your goal here, but I've focused on directly answering your question as stated.\r\n\r\nYou might find it interesting to know that the `for_each` argument in a `dynamic` block can accept _any_ collection type, so (unlike for resource `for_each`, where the instance keys are significant for tracking) you shouldn't typically need to create synthetic extra maps to fake conditional blocks. A zero-or-one-element list would work just as well for generating zero or one blocks, for example.\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Using the `==` operator to complex types is very rarely what you want, because `==` means \"exactly the same type and value\", and so unlike many other contexts is suddenly becomes very important to pay attention to the difference between object types and map types, map types of different element types, etc. ", "keywords": ["pay"]}, {"source": "Text", "text": "You might find it interesting to know that the `for_each` argument in a `dynamic` block can accept _any_ collection type, so (unlike for resource `for_each`, where the instance keys are significant for tracking) you shouldn't typically need to create synthetic extra maps to fake conditional blocks. ", "keywords": ["instance"]}]}, {"Id": "286776772", "PostHistoryTypeId": "5", "PostId": "75216514", "RevisionGUID": "0b2a2e7f-0c04-4488-9504-1b8781eef45f", "CreationDate": "2023-01-25T00:22:44.973", "UserId": "281848", "Comment": "added 8 characters in body", "Text": "Using the `==` operator to compare complex types is very rarely what you want, because `==` means \"exactly the same type and value\", and so unlike many other contexts is suddenly becomes very important to pay attention to the difference between object types and map types, map types of different element types, etc.\r\n\r\nThe expression `{}` has type `object({})`, and so a value of that type can never compare equal to a `map(string)` value, even if that map is empty. Normally the distinction between object types and map types is ignorable because Terraform will automatically convert between them, but the `==` operator doesn't give Terraform any information about what types you mean and so no automatic conversions are possible and you must get the types of the operands right yourself.\r\n\r\nThe easiest answer to avoid dealing with that is to skip using `==` at all and instead just use the length of the collection as the condition:\r\n\r\n```\r\nvpc_config = length(var.vpc_config) == 0 ? {} : { this = var.vpc_config } \r\n```\r\n\r\n---\r\n\r\nWrapping this map into another single-element map with a hard-coded key if it's not empty seems like an unusual thing to be doing, and so I wonder if this might be an [XY Problem](https://xyproblem.info/) and there might be a more straightforward way to achieve your goal here, but I've focused on directly answering your question as stated.\r\n\r\nYou might find it interesting to know that the `for_each` argument in a `dynamic` block can accept _any_ collection type, so (unlike for resource `for_each`, where the instance keys are significant for tracking) you shouldn't typically need to create synthetic extra maps to fake conditional blocks. A zero-or-one-element list would work just as well for generating zero or one blocks, for example.\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Using the `==` operator to compare complex types is very rarely what you want, because `==` means \"exactly the same type and value\", and so unlike many other contexts is suddenly becomes very important to pay attention to the difference between object types and map types, map types of different element types, etc. ", "keywords": ["pay"]}, {"source": "Text", "text": "You might find it interesting to know that the `for_each` argument in a `dynamic` block can accept _any_ collection type, so (unlike for resource `for_each`, where the instance keys are significant for tracking) you shouldn't typically need to create synthetic extra maps to fake conditional blocks. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Using the == operator to compare complex types is very rarely what you want, because == means \"exactly the same type and value\", and so unlike many other contexts is suddenly becomes very important to pay attention to the difference between object types and map types, map types of different element types, etc. ", "keywords": ["pay"]}, {"source": "Body", "text": "You might find it interesting to know that the for_each argument in a dynamic block can accept any collection type, so (unlike for resource for_each, where the instance keys are significant for tracking) you shouldn't typically need to create synthetic extra maps to fake conditional blocks. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": []}