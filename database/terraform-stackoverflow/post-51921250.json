{"Id": "51921250", "PostTypeId": "1", "CreationDate": "2018-08-19T19:43:49.647", "Score": "0", "ViewCount": "207", "Body": "<p>When I modify the subnet of my VPC, a whole new VPC is provisioned. The IGW is moved from the old VPC to the new one. Which would be fine if it wasn't prevented from moving because the Elastic IP is still attached to the instance.</p>\n\n<p>I tried many combinations with <code>depends_on</code>.</p>\n\n<p>If I manually disassociate the EIP, terraform IGW modification stops waiting for ever.</p>\n\n<pre><code>########################\n#      ELASTIC IP      #\n########################\nresource \"aws_eip\" \"ip\" {}\n\n# EIP association isolated for testing \"depends on\"\nresource \"aws_eip_association\" \"eip_assoc\" {\n  instance_id   = \"${aws_instance.vpn_server.id}\"\n  allocation_id = \"${aws_eip.ip.id}\"\n  depends_on = [\"aws_internet_gateway.gw\",\"aws_vpc.vpc\"]\n}\n\n########################\n#    VPC CREATION      #\n########################\nresource \"aws_vpc\" \"vpc\" {\n  cidr_block       = \"${var.cidr}\"\n  enable_dns_support = true\n  enable_dns_hostnames = true\n  assign_generated_ipv6_cidr_block = \"${var.ipv6}\"\n}\n\n########################\n#    IGW CREATION      #\n########################\nresource \"aws_internet_gateway\" \"gw\" {\n  vpc_id = \"${aws_vpc.vpc.id}\"\n}\n\n########################\n#      Instance        #\n########################\nresource \"aws_instance\" \"vpn_server\" {\n  ami           = \"${data.aws_ami.ami_amzn2.id}\"\n  instance_type = \"t2.micro\"\n  key_name = \"${aws_key_pair.key.key_name}\"\n  subnet_id = \"${aws_subnet.a.id}\"\n  associate_public_ip_address = true\n  ipv6_address_count = 1\n  vpc_security_group_ids = [\"${aws_default_security_group.sg.id}\"]\n  lifecycle { create_before_destroy = true }\n  depends_on = [\"aws_internet_gateway.gw\"]\n  user_data = \"${data.template_file.user_data.rendered}\"\n}\n\n########################\n#   Subnets Creation   #\n########################\ndata \"aws_availability_zones\" \"available\" {}\n\nresource \"aws_subnet\" \"a\" {\n    availability_zone = \"${data.aws_availability_zones.available.names[0]}\"\n    vpc_id = \"${aws_vpc.vpc.id}\"\n    cidr_block = \"${cidrsubnet(aws_vpc.vpc.cidr_block, 2, 0)}\"\n    map_public_ip_on_launch = true\n\n    # Bug Issue 688: https://github.com/terraform-providers/terraform-provider-aws/issues/688\n    # Soon set even if no IPv6 for VPC\n    # https://github.com/terraform-providers/terraform-provider-aws/pull/2103\n    ipv6_cidr_block = \"${var.ipv6 ? cidrsubnet(aws_vpc.vpc.ipv6_cidr_block, 8, 10) : \"\"}\"\n    assign_ipv6_address_on_creation = true\n}\n</code></pre>\n\n<p>Any idea what would be the correct way of disassociating the EIP before the IGW tries to move to the new VPC?</p>\n", "OwnerUserId": "750074", "LastEditorUserId": "750074", "LastEditDate": "2018-08-20T21:37:29.010", "LastActivityDate": "2018-08-20T21:37:29.010", "Title": "Disassociate EIP before detaching IGW", "Tags": "<amazon-web-services><amazon-ec2><terraform>", "AnswerCount": "0", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "90794564", "PostId": "51921250", "Score": "2", "Text": "Internet Gateways don't cost anything, so it's hard to see a reason to move an IGW from one VPC to another.", "CreationDate": "2018-08-19T22:59:03.943", "UserId": "1695906", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Internet Gateways don't cost anything, so it's hard to see a reason to move an IGW from one VPC to another.", "keywords": ["cost"]}]}, {"Id": "90820709", "PostId": "51921250", "Score": "0", "Text": "@chriscatfr When you modify the subnet are you changing \"${aws_subnet.a.id}\"?  If so, can you show that code?", "CreationDate": "2018-08-20T16:54:43.587", "UserId": "1723857", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "When you modify the subnet are you changing \"${aws_subnet.a.id}\"? ", "keywords": ["change"]}]}, {"Id": "90827701", "PostId": "51921250", "Score": "0", "Text": "@Michael-sqlbot, Terraform is the one wanting to move it from the old VPC. I simply wanted to change the VPC ip range and keep the same Elastic IP for my server.", "CreationDate": "2018-08-20T21:34:59.560", "UserId": "750074", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I simply wanted to change the VPC ip range and keep the same Elastic IP for my server.", "keywords": ["change"]}]}, {"Id": "90827766", "PostId": "51921250", "Score": "0", "Text": "@kenlukas, I edited the question to add the subnet", "CreationDate": "2018-08-20T21:38:08.817", "UserId": "750074", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "90992628", "PostId": "51921250", "Score": "0", "Text": "the only thing I change is the vpc cidr_block, which is also used by the subnet. This question is only about what happens when I try to change only this CIDR. Some dependencies are wrong: the IGW cannot be detached from the old VPC until I disassociate the EIP.", "CreationDate": "2018-08-25T20:47:48.433", "UserId": "750074", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "the only thing I change is the vpc cidr_block, which is also used by the subnet. ", "keywords": ["change"]}, {"source": "Text", "text": "This question is only about what happens when I try to change only this CIDR. ", "keywords": ["change"]}]}], "history": [{"Id": "180063384", "PostHistoryTypeId": "2", "PostId": "51921250", "RevisionGUID": "a9f605c6-aa08-4cc2-b90d-3e4e2830b1dd", "CreationDate": "2018-08-19T19:43:49.647", "UserId": "750074", "Text": "When I modify the subnet of my VPC, a whole new VPC is provisioned. The IGW is moved from the old the VPC to the new one. Which would be fine if it wasn't prevented by the Elastic IP still attached the the instance.\r\n\r\nI tried many combinations with `depends_on`.\r\n\r\nIf I manually disassociate the EIP, terraform IGW modification stops waiting for ever.\r\n\r\n    ########################\r\n    #      ELASTIC IP      #\r\n    ########################\r\n    resource \"aws_eip\" \"ip\" {}\r\n    \r\n    # EIP association isolated for testing \"depends on\"\r\n    resource \"aws_eip_association\" \"eip_assoc\" {\r\n      instance_id   = \"${aws_instance.vpn_server.id}\"\r\n      allocation_id = \"${aws_eip.ip.id}\"\r\n      depends_on = [\"aws_internet_gateway.gw\",\"aws_vpc.vpc\"]\r\n    }\r\n    \r\n    ########################\r\n    #    VPC CREATION      #\r\n    ########################\r\n    resource \"aws_vpc\" \"vpc\" {\r\n      cidr_block       = \"${var.cidr}\"\r\n      enable_dns_support = true\r\n      enable_dns_hostnames = true\r\n      assign_generated_ipv6_cidr_block = \"${var.ipv6}\"\r\n    }\r\n    \r\n    ########################\r\n    #    IGW CREATION      #\r\n    ########################\r\n    resource \"aws_internet_gateway\" \"gw\" {\r\n      vpc_id = \"${aws_vpc.vpc.id}\"\r\n    }\r\n\r\n    ########################\r\n    #      Instance        #\r\n    ########################\r\n    resource \"aws_instance\" \"vpn_server\" {\r\n      ami           = \"${data.aws_ami.ami_amzn2.id}\"\r\n      instance_type = \"t2.micro\"\r\n      key_name = \"${aws_key_pair.key.key_name}\"\r\n      subnet_id = \"${aws_subnet.a.id}\"\r\n      associate_public_ip_address = true\r\n      ipv6_address_count = 1\r\n      vpc_security_group_ids = [\"${aws_default_security_group.sg.id}\"]\r\n      lifecycle { create_before_destroy = true }\r\n      depends_on = [\"aws_internet_gateway.gw\"]\r\n      user_data = \"${data.template_file.user_data.rendered}\"\r\n    }\r\n\r\nAny idea what would be the correct way of disassociating the EIP before the IGW tries to move to the new VPC?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Which would be fine if it wasn't prevented by the Elastic IP still attached the the instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "If I manually disassociate the EIP, terraform IGW modification stops waiting for ever. ######################## # ELASTIC IP # ######################## resource \"aws_eip\" \"ip\" {} # EIP association isolated for testing \"depends on\" resource \"aws_eip_association\" \"eip_assoc\" { instance_id = \"${aws_instance.vpn_server.id}\" allocation_id = \"${aws_eip.ip.id}\" depends_on = [\"aws_internet_gateway.gw\",\"aws_vpc.vpc\"] } ######################## # VPC CREATION # ######################## resource \"aws_vpc\" \"vpc\" { cidr_block = \"${var.cidr}\" enable_dns_support = true enable_dns_hostnames = true assign_generated_ipv6_cidr_block = \"${var.ipv6}\" } ######################## # IGW CREATION # ######################## resource \"aws_internet_gateway\" \"gw\" { vpc_id = \"${aws_vpc.vpc.id}\" } ######################## # Instance # ######################## resource \"aws_instance\" \"vpn_server\" { ami = \"${data.aws_ami.ami_amzn2.id}\" instance_type = \"t2.micro\" key_name = \"${aws_key_pair.key.key_name}\" subnet_id = \"${aws_subnet.a.id}\" associate_public_ip_address = true ipv6_address_count = 1 vpc_security_group_ids = [\"${aws_default_security_group.sg.id}\"] lifecycle { create_before_destroy = true } depends_on = [\"aws_internet_gateway.gw\"] user_data = \"${data.template_file.user_data.rendered}\" ", "keywords": ["instance", "test"]}]}, {"Id": "180063385", "PostHistoryTypeId": "1", "PostId": "51921250", "RevisionGUID": "a9f605c6-aa08-4cc2-b90d-3e4e2830b1dd", "CreationDate": "2018-08-19T19:43:49.647", "UserId": "750074", "Text": "Disassociate EIP before detaching IGW", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "180063386", "PostHistoryTypeId": "3", "PostId": "51921250", "RevisionGUID": "a9f605c6-aa08-4cc2-b90d-3e4e2830b1dd", "CreationDate": "2018-08-19T19:43:49.647", "UserId": "750074", "Text": "<amazon-web-services><amazon-ec2><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "180077878", "PostHistoryTypeId": "5", "PostId": "51921250", "RevisionGUID": "8e71413d-caaa-4c45-955e-f1d0985743f2", "CreationDate": "2018-08-20T05:38:44.020", "UserId": "1723857", "Comment": "grammar edits", "Text": "When I modify the subnet of my VPC, a whole new VPC is provisioned. The IGW is moved from the old VPC to the new one. Which would be fine if it wasn't prevented from moving because the Elastic IP is still attached to the instance.\r\n\r\nI tried many combinations with `depends_on`.\r\n\r\nIf I manually disassociate the EIP, terraform IGW modification stops waiting for ever.\r\n\r\n    ########################\r\n    #      ELASTIC IP      #\r\n    ########################\r\n    resource \"aws_eip\" \"ip\" {}\r\n    \r\n    # EIP association isolated for testing \"depends on\"\r\n    resource \"aws_eip_association\" \"eip_assoc\" {\r\n      instance_id   = \"${aws_instance.vpn_server.id}\"\r\n      allocation_id = \"${aws_eip.ip.id}\"\r\n      depends_on = [\"aws_internet_gateway.gw\",\"aws_vpc.vpc\"]\r\n    }\r\n    \r\n    ########################\r\n    #    VPC CREATION      #\r\n    ########################\r\n    resource \"aws_vpc\" \"vpc\" {\r\n      cidr_block       = \"${var.cidr}\"\r\n      enable_dns_support = true\r\n      enable_dns_hostnames = true\r\n      assign_generated_ipv6_cidr_block = \"${var.ipv6}\"\r\n    }\r\n    \r\n    ########################\r\n    #    IGW CREATION      #\r\n    ########################\r\n    resource \"aws_internet_gateway\" \"gw\" {\r\n      vpc_id = \"${aws_vpc.vpc.id}\"\r\n    }\r\n\r\n    ########################\r\n    #      Instance        #\r\n    ########################\r\n    resource \"aws_instance\" \"vpn_server\" {\r\n      ami           = \"${data.aws_ami.ami_amzn2.id}\"\r\n      instance_type = \"t2.micro\"\r\n      key_name = \"${aws_key_pair.key.key_name}\"\r\n      subnet_id = \"${aws_subnet.a.id}\"\r\n      associate_public_ip_address = true\r\n      ipv6_address_count = 1\r\n      vpc_security_group_ids = [\"${aws_default_security_group.sg.id}\"]\r\n      lifecycle { create_before_destroy = true }\r\n      depends_on = [\"aws_internet_gateway.gw\"]\r\n      user_data = \"${data.template_file.user_data.rendered}\"\r\n    }\r\n\r\nAny idea what would be the correct way of disassociating the EIP before the IGW tries to move to the new VPC?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Which would be fine if it wasn't prevented from moving because the Elastic IP is still attached to the instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "If I manually disassociate the EIP, terraform IGW modification stops waiting for ever. ######################## # ELASTIC IP # ######################## resource \"aws_eip\" \"ip\" {} # EIP association isolated for testing \"depends on\" resource \"aws_eip_association\" \"eip_assoc\" { instance_id = \"${aws_instance.vpn_server.id}\" allocation_id = \"${aws_eip.ip.id}\" depends_on = [\"aws_internet_gateway.gw\",\"aws_vpc.vpc\"] } ######################## # VPC CREATION # ######################## resource \"aws_vpc\" \"vpc\" { cidr_block = \"${var.cidr}\" enable_dns_support = true enable_dns_hostnames = true assign_generated_ipv6_cidr_block = \"${var.ipv6}\" } ######################## # IGW CREATION # ######################## resource \"aws_internet_gateway\" \"gw\" { vpc_id = \"${aws_vpc.vpc.id}\" } ######################## # Instance # ######################## resource \"aws_instance\" \"vpn_server\" { ami = \"${data.aws_ami.ami_amzn2.id}\" instance_type = \"t2.micro\" key_name = \"${aws_key_pair.key.key_name}\" subnet_id = \"${aws_subnet.a.id}\" associate_public_ip_address = true ipv6_address_count = 1 vpc_security_group_ids = [\"${aws_default_security_group.sg.id}\"] lifecycle { create_before_destroy = true } depends_on = [\"aws_internet_gateway.gw\"] user_data = \"${data.template_file.user_data.rendered}\" ", "keywords": ["instance", "test"]}]}, {"Id": "180077879", "PostHistoryTypeId": "24", "PostId": "51921250", "RevisionGUID": "8e71413d-caaa-4c45-955e-f1d0985743f2", "CreationDate": "2018-08-20T05:38:44.020", "Comment": "Proposed by 1723857 approved by 1431720, 2995449 edit id of 3872542", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "180135694", "PostHistoryTypeId": "5", "PostId": "51921250", "RevisionGUID": "604f29b4-32bc-4c7c-a754-91325070307d", "CreationDate": "2018-08-20T21:37:29.010", "UserId": "750074", "Comment": "added subnet", "Text": "When I modify the subnet of my VPC, a whole new VPC is provisioned. The IGW is moved from the old VPC to the new one. Which would be fine if it wasn't prevented from moving because the Elastic IP is still attached to the instance.\r\n\r\nI tried many combinations with `depends_on`.\r\n\r\nIf I manually disassociate the EIP, terraform IGW modification stops waiting for ever.\r\n\r\n    ########################\r\n    #      ELASTIC IP      #\r\n    ########################\r\n    resource \"aws_eip\" \"ip\" {}\r\n    \r\n    # EIP association isolated for testing \"depends on\"\r\n    resource \"aws_eip_association\" \"eip_assoc\" {\r\n      instance_id   = \"${aws_instance.vpn_server.id}\"\r\n      allocation_id = \"${aws_eip.ip.id}\"\r\n      depends_on = [\"aws_internet_gateway.gw\",\"aws_vpc.vpc\"]\r\n    }\r\n    \r\n    ########################\r\n    #    VPC CREATION      #\r\n    ########################\r\n    resource \"aws_vpc\" \"vpc\" {\r\n      cidr_block       = \"${var.cidr}\"\r\n      enable_dns_support = true\r\n      enable_dns_hostnames = true\r\n      assign_generated_ipv6_cidr_block = \"${var.ipv6}\"\r\n    }\r\n    \r\n    ########################\r\n    #    IGW CREATION      #\r\n    ########################\r\n    resource \"aws_internet_gateway\" \"gw\" {\r\n      vpc_id = \"${aws_vpc.vpc.id}\"\r\n    }\r\n\r\n    ########################\r\n    #      Instance        #\r\n    ########################\r\n    resource \"aws_instance\" \"vpn_server\" {\r\n      ami           = \"${data.aws_ami.ami_amzn2.id}\"\r\n      instance_type = \"t2.micro\"\r\n      key_name = \"${aws_key_pair.key.key_name}\"\r\n      subnet_id = \"${aws_subnet.a.id}\"\r\n      associate_public_ip_address = true\r\n      ipv6_address_count = 1\r\n      vpc_security_group_ids = [\"${aws_default_security_group.sg.id}\"]\r\n      lifecycle { create_before_destroy = true }\r\n      depends_on = [\"aws_internet_gateway.gw\"]\r\n      user_data = \"${data.template_file.user_data.rendered}\"\r\n    }\r\n\r\n    ########################\r\n    #   Subnets Creation   #\r\n    ########################\r\n    data \"aws_availability_zones\" \"available\" {}\r\n    \r\n    resource \"aws_subnet\" \"a\" {\r\n        availability_zone = \"${data.aws_availability_zones.available.names[0]}\"\r\n        vpc_id = \"${aws_vpc.vpc.id}\"\r\n        cidr_block = \"${cidrsubnet(aws_vpc.vpc.cidr_block, 2, 0)}\"\r\n        map_public_ip_on_launch = true\r\n    \r\n        # Bug Issue 688: https://github.com/terraform-providers/terraform-provider-aws/issues/688\r\n        # Soon set even if no IPv6 for VPC\r\n        # https://github.com/terraform-providers/terraform-provider-aws/pull/2103\r\n        ipv6_cidr_block = \"${var.ipv6 ? cidrsubnet(aws_vpc.vpc.ipv6_cidr_block, 8, 10) : \"\"}\"\r\n        assign_ipv6_address_on_creation = true\r\n    }\r\n\r\nAny idea what would be the correct way of disassociating the EIP before the IGW tries to move to the new VPC?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Which would be fine if it wasn't prevented from moving because the Elastic IP is still attached to the instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "If I manually disassociate the EIP, terraform IGW modification stops waiting for ever. ######################## # ELASTIC IP # ######################## resource \"aws_eip\" \"ip\" {} # EIP association isolated for testing \"depends on\" resource \"aws_eip_association\" \"eip_assoc\" { instance_id = \"${aws_instance.vpn_server.id}\" allocation_id = \"${aws_eip.ip.id}\" depends_on = [\"aws_internet_gateway.gw\",\"aws_vpc.vpc\"] } ######################## # VPC CREATION # ######################## resource \"aws_vpc\" \"vpc\" { cidr_block = \"${var.cidr}\" enable_dns_support = true enable_dns_hostnames = true assign_generated_ipv6_cidr_block = \"${var.ipv6}\" } ######################## # IGW CREATION # ######################## resource \"aws_internet_gateway\" \"gw\" { vpc_id = \"${aws_vpc.vpc.id}\" } ######################## # Instance # ######################## resource \"aws_instance\" \"vpn_server\" { ami = \"${data.aws_ami.ami_amzn2.id}\" instance_type = \"t2.micro\" key_name = \"${aws_key_pair.key.key_name}\" subnet_id = \"${aws_subnet.a.id}\" associate_public_ip_address = true ipv6_address_count = 1 vpc_security_group_ids = [\"${aws_default_security_group.sg.id}\"] lifecycle { create_before_destroy = true } depends_on = [\"aws_internet_gateway.gw\"] user_data = \"${data.template_file.user_data.rendered}\" } ######################## # Subnets Creation # ######################## data \"aws_availability_zones\" \"available\" {} resource \"aws_subnet\" \"a\" { availability_zone = \"${data.aws_availability_zones.available.names[0]}\" vpc_id = \"${aws_vpc.vpc.id}\" cidr_block = \"${cidrsubnet(aws_vpc.vpc.cidr_block, 2, 0)}\" map_public_ip_on_launch = true # Bug Issue 688: https://github.com/terraform-providers/terraform-provider-aws/issues/688 # Soon set even if no IPv6 for VPC # https://github.com/terraform-providers/terraform-provider-aws/pull/2103 ipv6_cidr_block = \"${var.ipv6 ? cidrsubnet(aws_vpc.vpc.ipv6_cidr_block, 8, 10) : \"\"}\" assign_ipv6_address_on_creation = true } Any idea what would be the correct way of disassociating the EIP before the IGW tries to move to the new VPC?", "keywords": ["instance", "provider", "test"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Which would be fine if it wasn't prevented from moving because the Elastic IP is still attached to the instance. ", "keywords": ["instance"]}]}