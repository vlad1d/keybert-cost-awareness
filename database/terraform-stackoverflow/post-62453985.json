{"Id": "62453985", "PostTypeId": "1", "CreationDate": "2020-06-18T15:47:02.880", "Score": "13", "ViewCount": "8249", "Body": "<p><em>Example</em>: In Azure, I'm deploying multiple resource groups, managed disks, network interfaces, etc, all in the same region.</p>\n\n<p>I want to declare a \"region\" primitive (a \"constant\"), which all these resources will reference. \nWhich of those is following convention?</p>\n\n<p>a) variables.tf:</p>\n\n<pre><code>variable \"region\" {\n    type = string\n    default = \"a-place\"\n}\n</code></pre>\n\n<p>b) locals.tf</p>\n\n<pre><code>locals {\n    region = \"a-place\"\n}\n</code></pre>\n\n<p>Naturally, I would choose to declare it as a local. I would only use a variable if I expect a value to come (or be overridden) from environment variables, command line, or if I were creating a module.\nHowever, I haven't seen local being used for \"declaring constants\" in any examples, which makes me think that a convention exists to use locals with very limited scope (e.g. mainly for creating structures which can be of use with <code>count</code> and <code>for_each</code> constructions).</p>\n\n<p>Covering my back before someone flags this as opinion based: I'm asking what the convention is, not what your opinion is that the convention should be.</p>\n\n<p>Follow-up question:\nWould the answer be any different if this example covered IP addresses, resource name prefixes, etc. instead of region? <em>(does the convention only cover particular fields?)</em></p>\n", "OwnerUserId": "4366414", "LastEditorUserId": "2291321", "LastEditDate": "2020-06-18T16:10:31.860", "LastActivityDate": "2020-06-23T01:20:38.740", "Title": "Terraform convention: Should I declare a \"constant\" as a variable or local?", "Tags": "<terraform>", "AnswerCount": "1", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "110453132", "PostId": "62453985", "Score": "3", "Text": "I would use a local for any constants. Locals serve 2 purposes for me: when I need to interpolate variables into something else or when I want to use a constant. If you're looking for examples you might find that either people's code predates locals and was already using variables and hasn't yet been refactored or just that lots of example code isn't great quality (I know a lot of the stuff I write as answers here are quick examples and not necessarily what I would write for production code).", "CreationDate": "2020-06-18T16:08:17.397", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "110453184", "PostId": "62453985", "Score": "1", "Text": "Also remember that data sources can be more useful than locals too as they're more flexible but can also be more descriptive. For example if you always use a single region in AWS it can be tempting to create a `locals { region = \"eu-west-1\" }` for anywhere you want to reference the region something is in but the AWS region data source is generally a better idea here.", "CreationDate": "2020-06-18T16:10:01.000", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "110453439", "PostId": "62453985", "Score": "0", "Text": "Thanks for your answers. You make a very good point with examples preceding the introduction of locals. Would you also use locals when declaring IP addresses and address ranges? Let's say when creating multiple vnets, subnets and network security rules.", "CreationDate": "2020-06-18T16:18:47.843", "UserId": "4366414", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "110453804", "PostId": "62453985", "Score": "0", "Text": "The question relies on the structure of your Terraform code. For me (running in AWS) I have a VPC module that takes a VPC CIDR range and a name as variables and then handles everything from there (using the `cidrsubnet` function to automatically split out ranges for subnets from the VPC range) so putting them as locals doesn't make sense for me. Instead the name and CIDR range are in tfvars files for each VPC.", "CreationDate": "2020-06-18T16:30:12.960", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "224380540", "PostHistoryTypeId": "2", "PostId": "62453985", "RevisionGUID": "6c623776-d20d-4318-996c-133f30eb6005", "CreationDate": "2020-06-18T15:47:02.880", "UserId": "4366414", "Text": "*Example*: In Azure, I'm deploying multiple resource groups, managed disks, network interfaces, etc, all in the same region.\r\n\r\nI want to declare a \"region\" primitive (a \"constant\"), which all these resources will reference. \r\nWhich of those is following convention?\r\n\r\na) variables.tf:\r\n```\r\nvariable \"region\" {\r\n    type = string\r\n    default = \"a-place\"\r\n}\r\n```\r\n\r\nb) locals.tf\r\n```\r\nlocals {\r\n    region = \"a-place\"\r\n}\r\n```\r\n\r\nNaturally, I would choose to declare it as a local. I would only use a variable if I expect a value to come (or be overridden) from environment variables, command line, or if I were creating a module.\r\nHowever, I haven't seen local being used for \"declaring constants\" in any examples, which makes me think that a convention exists to use locals with very limited scope (e.g. mainly for creating structures which can be of use with `count` and `for_each` constructions).\r\n\r\nCovering my back before someone flags this as opinion based: I'm asking what the convention is, not what your opinion is that the convention should be.\r\n\r\nFollow-up question:\r\nWould the answer be any different if this example covered IP addresses, resource name prefixes, etc. instead of region? *(does the convention only cover particular fields?)*", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "224380541", "PostHistoryTypeId": "1", "PostId": "62453985", "RevisionGUID": "6c623776-d20d-4318-996c-133f30eb6005", "CreationDate": "2020-06-18T15:47:02.880", "UserId": "4366414", "Text": "Terraform convention: Should I declare a \"constant\" as a variable or local?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "224380542", "PostHistoryTypeId": "3", "PostId": "62453985", "RevisionGUID": "6c623776-d20d-4318-996c-133f30eb6005", "CreationDate": "2020-06-18T15:47:02.880", "UserId": "4366414", "Text": "<variables><terraform><local><azure-resource-manager><azure-rm>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "224382368", "PostHistoryTypeId": "6", "PostId": "62453985", "RevisionGUID": "b9aac53a-28ff-4742-86b8-f105de5ad58a", "CreationDate": "2020-06-18T16:10:31.860", "UserId": "2291321", "Comment": "edited tags", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "62525879", "PostTypeId": "2", "ParentId": "62453985", "CreationDate": "2020-06-23T01:20:38.740", "Score": "8", "Body": "<p>The general intent of local values is to represent expressions whose result you want to re-use in many locations in the module without duplication. That includes constant values, in situations where it's productive to factor them out e.g. because you expect them to change in future and want to change only in one place, or because the local value name is more meaningful than the value itself and thus improves readability of the parts of the configuration using it.</p>\n<p>Declaring a local value also has a potential cost, though: it forces anyone reading the rest of the module to look somewhere else to see the final value each time you refer to it. Often the benefits outweigh that cost, but not always.</p>\n<p>As you've noted, the intent of <em>input variables</em> is that they be settable by the caller of your module, so you should use input variables only if you expect the default value to be overridden sometimes.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2020-06-23T01:20:38.740", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "225020190", "PostHistoryTypeId": "2", "PostId": "62525879", "RevisionGUID": "dfb3a2da-b6b8-4a4d-9dfd-038483703661", "CreationDate": "2020-06-23T01:20:38.740", "UserId": "281848", "Text": "The general intent of local values is to represent expressions whose result you want to re-use in many locations in the module without duplication. That includes constant values, in situations where it's productive to factor them out e.g. because you expect them to change in future and want to change only in one place, or because the local value name is more meaningful than the value itself and thus improves readability of the parts of the configuration using it.\r\n\r\nDeclaring a local value also has a potential cost, though: it forces anyone reading the rest of the module to look somewhere else to see the final value each time you refer to it. Often the benefits outweigh that cost, but not always.\r\n\r\nAs you've noted, the intent of _input variables_ is that they be settable by the caller of your module, so you should use input variables only if you expect the default value to be overridden sometimes.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "That includes constant values, in situations where it's productive to factor them out e.g. because you expect them to change in future and want to change only in one place, or because the local value name is more meaningful than the value itself and thus improves readability of the parts of the configuration using it. ", "keywords": ["change"]}, {"source": "Text", "text": "Declaring a local value also has a potential cost, though: it forces anyone reading the rest of the module to look somewhere else to see the final value each time you refer to it. ", "keywords": ["cost"]}, {"source": "Text", "text": "Often the benefits outweigh that cost, but not always. ", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "That includes constant values, in situations where it's productive to factor them out e.g. because you expect them to change in future and want to change only in one place, or because the local value name is more meaningful than the value itself and thus improves readability of the parts of the configuration using it. ", "keywords": ["change"]}, {"source": "Body", "text": "Declaring a local value also has a potential cost, though: it forces anyone reading the rest of the module to look somewhere else to see the final value each time you refer to it. ", "keywords": ["cost"]}, {"source": "Body", "text": "Often the benefits outweigh that cost, but not always. ", "keywords": ["cost"]}]}], "contains-topic": true, "filtered-sentences": []}