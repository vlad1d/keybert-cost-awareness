{"Id": "66999238", "PostTypeId": "1", "CreationDate": "2021-04-08T07:31:55.160", "Score": "4", "ViewCount": "1748", "Body": "<p>When creating the autoscaling policy and cloudwatch alarm resource in Terraform v13, they are created fine. However, when load testing the endpoint, they successfully scale up instances, but fail to scale down when CPU utilization hits the necessary % for a period of time. The error looks like this:</p>\n<p><strong>&quot;historySummary&quot;: &quot;Failed to execute AutoScaling action: No step adjustment found for metric value [5.99763732496649, 2.7634547331059975] and breach delta -4.00236267503351&quot;</strong></p>\n<p>Listed below are the terraform resources:</p>\n<p>Autoscaling Policy -</p>\n<pre><code>resource &quot;aws_appautoscaling_policy&quot; &quot;frontend_down&quot; {\n  name               = &quot;${var.name}_frontend_scale_down&quot;\n  service_namespace  = &quot;ecs&quot;\n  resource_id        = &quot;service/${aws_ecs_cluster.main.name}/${aws_ecs_service.frontend.name}&quot;\n  scalable_dimension = &quot;ecs:service:DesiredCount&quot;\n\n  step_scaling_policy_configuration {\n    adjustment_type         = &quot;ChangeInCapacity&quot;\n    cooldown                = 30\n    metric_aggregation_type = &quot;Maximum&quot;\n\n    step_adjustment {\n      metric_interval_lower_bound = 0\n      scaling_adjustment          = -1\n    }\n  }\n\n  depends_on = [aws_appautoscaling_target.frontend_target]\n}\n</code></pre>\n<p>Cloudwatch Alarm -</p>\n<pre><code>resource &quot;aws_cloudwatch_metric_alarm&quot; &quot;frontend_service_cpu_low&quot; {\n  alarm_name          = &quot;${var.name}_cpu_utilization_low_fe&quot;\n  comparison_operator = &quot;LessThanOrEqualToThreshold&quot;\n  evaluation_periods  = &quot;2&quot;\n  metric_name         = &quot;CPUUtilization&quot;\n  namespace           = &quot;AWS/ECS&quot;\n  period              = &quot;60&quot;\n  statistic           = &quot;Average&quot;\n  threshold           = &quot;10&quot;\n\n  dimensions = {\n    ClusterName = var.ecs_cluster_name\n    ServiceName = var.ecs_service_name_frontend\n  }\n\n  alarm_actions = [var.autoscaling_down_arn_frontend]\n\n  tags = {\n    Name        = &quot;${var.name}-autoscaling&quot;\n    BillingCode = var.billing_code_tag\n    Environment = var.environment_tag\n  }\n}\n</code></pre>\n", "OwnerUserId": "11521143", "LastActivityDate": "2023-04-24T21:29:37.440", "Title": "AWS AutoScaling Down policy is failing after scaling up is successful: Failed to execute autoscaling action: No step adjustment found for metric value", "Tags": "<javascript><amazon-web-services><terraform><amazon-cloudwatch><autoscaling>", "AnswerCount": "2", "CommentCount": "1", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "118439838", "PostId": "66999238", "Score": "0", "Text": "figured out the reason, it was because on scaling down policy I was using 'metric_interval_lower_bound' instead of 'metric_interval_upper_bound'. When scaling down it provides a negative delta when comparing to the alarm threshold and cloudwatch metric and thus 0 becomes the upper bound. When scaling up, you use lower bound as it provides a positive delta.", "CreationDate": "2021-04-08T13:50:42.493", "UserId": "11521143", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "figured out the reason, it was because on scaling down policy I was using 'metric_interval_lower_bound' instead of 'metric_interval_upper_bound'. ", "keywords": ["policy"]}]}], "history": [{"Id": "244237700", "PostHistoryTypeId": "2", "PostId": "66999238", "RevisionGUID": "fd665c50-fd42-469f-99fc-3b63547ac84e", "CreationDate": "2021-04-08T07:31:55.160", "UserId": "11521143", "Text": "When creating the autoscaling policy and cloudwatch alarm resource in Terraform v13, they are created fine. However, when load testing the endpoint, they successfully scale up instances, but fail to scale down when CPU utilization hits the necessary % for a period of time. The error looks like this:\r\n\r\n**\"historySummary\": \"Failed to execute AutoScaling action: No step adjustment found for metric value [5.99763732496649, 2.7634547331059975] and breach delta -4.00236267503351\"**\r\n\r\nListed below are the terraform resources:\r\n\r\nAutoscaling Policy - \r\n\r\n```\r\nresource \"aws_appautoscaling_policy\" \"frontend_down\" {\r\n  name               = \"${var.name}_frontend_scale_down\"\r\n  service_namespace  = \"ecs\"\r\n  resource_id        = \"service/${aws_ecs_cluster.main.name}/${aws_ecs_service.frontend.name}\"\r\n  scalable_dimension = \"ecs:service:DesiredCount\"\r\n\r\n  step_scaling_policy_configuration {\r\n    adjustment_type         = \"ChangeInCapacity\"\r\n    cooldown                = 30\r\n    metric_aggregation_type = \"Maximum\"\r\n\r\n    step_adjustment {\r\n      metric_interval_lower_bound = 0\r\n      scaling_adjustment          = -1\r\n    }\r\n  }\r\n\r\n  depends_on = [aws_appautoscaling_target.frontend_target]\r\n}\r\n```\r\n\r\nCloudwatch Alarm -\r\n\r\n```\r\nresource \"aws_cloudwatch_metric_alarm\" \"frontend_service_cpu_low\" {\r\n  alarm_name          = \"${var.name}_cpu_utilization_low_fe\"\r\n  comparison_operator = \"LessThanOrEqualToThreshold\"\r\n  evaluation_periods  = \"2\"\r\n  metric_name         = \"CPUUtilization\"\r\n  namespace           = \"AWS/ECS\"\r\n  period              = \"60\"\r\n  statistic           = \"Average\"\r\n  threshold           = \"10\"\r\n\r\n  dimensions = {\r\n    ClusterName = var.ecs_cluster_name\r\n    ServiceName = var.ecs_service_name_frontend\r\n  }\r\n\r\n  alarm_actions = [var.autoscaling_down_arn_frontend]\r\n\r\n  tags = {\r\n    Name        = \"${var.name}-autoscaling\"\r\n    BillingCode = var.billing_code_tag\r\n    Environment = var.environment_tag\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "When creating the autoscaling policy and cloudwatch alarm resource in Terraform v13, they are created fine. ", "keywords": ["policy"]}, {"source": "Text", "text": "However, when load testing the endpoint, they successfully scale up instances, but fail to scale down when CPU utilization hits the necessary % for a period of time. ", "keywords": ["cpu", "test"]}, {"source": "Text", "text": "Listed below are the terraform resources: Autoscaling Policy - ``` resource \"aws_appautoscaling_policy\" \"frontend_down\" { name = \"${var.name}_frontend_scale_down\" service_namespace = \"ecs\" resource_id = \"service/${aws_ecs_cluster.main.name}/${aws_ecs_service.frontend.name}\" scalable_dimension = \"ecs:service:DesiredCount\" step_scaling_policy_configuration { adjustment_type = \"ChangeInCapacity\" cooldown = 30 metric_aggregation_type = \"Maximum\" step_adjustment { metric_interval_lower_bound = 0 scaling_adjustment = -1 } } depends_on = [aws_appautoscaling_target.frontend_target] } ``` Cloudwatch Alarm - ``` resource \"aws_cloudwatch_metric_alarm\" \"frontend_service_cpu_low\" { alarm_name = \"${var.name}_cpu_utilization_low_fe\" comparison_operator = \"LessThanOrEqualToThreshold\" evaluation_periods = \"2\" metric_name = \"CPUUtilization\" namespace = \"AWS/ECS\" period = \"60\" statistic = \"Average\" threshold = \"10\" dimensions = { ClusterName = var.ecs_cluster_name ServiceName = var.ecs_service_name_frontend } alarm_actions = [var.autoscaling_down_arn_frontend] tags = { Name = \"${var.name}-autoscaling\" BillingCode = var.billing_code_tag Environment = var.environment_tag } ", "keywords": ["bill", "policy", "change"]}]}, {"Id": "244237701", "PostHistoryTypeId": "1", "PostId": "66999238", "RevisionGUID": "fd665c50-fd42-469f-99fc-3b63547ac84e", "CreationDate": "2021-04-08T07:31:55.160", "UserId": "11521143", "Text": "AWS AutoScaling Down policy is failing after scaling up is successful: Failed to execute autoscaling action: No step adjustment found for metric value", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "AWS AutoScaling Down policy is failing after scaling up is successful: ", "keywords": ["policy"]}]}, {"Id": "244237702", "PostHistoryTypeId": "3", "PostId": "66999238", "RevisionGUID": "fd665c50-fd42-469f-99fc-3b63547ac84e", "CreationDate": "2021-04-08T07:31:55.160", "UserId": "11521143", "Text": "<javascript><amazon-web-services><terraform><amazon-cloudwatch><autoscaling>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "67054449", "PostTypeId": "2", "ParentId": "66999238", "CreationDate": "2021-04-12T07:48:35.767", "Score": "7", "Body": "<p>figured out the reason, it was because on scaling down policy I was using 'metric_interval_lower_bound' instead of 'metric_interval_upper_bound'. When scaling down it provides a negative delta when comparing to the alarm threshold and cloudwatch metric and thus 0 becomes the upper bound. When scaling up, you use lower bound as it provides a positive delta</p>\n", "OwnerUserId": "11521143", "LastActivityDate": "2021-04-12T07:48:35.767", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "244490281", "PostHistoryTypeId": "2", "PostId": "67054449", "RevisionGUID": "a390e8fb-0c8e-4485-b201-4ed541b594a4", "CreationDate": "2021-04-12T07:48:35.767", "UserId": "11521143", "Text": "figured out the reason, it was because on scaling down policy I was using 'metric_interval_lower_bound' instead of 'metric_interval_upper_bound'. When scaling down it provides a negative delta when comparing to the alarm threshold and cloudwatch metric and thus 0 becomes the upper bound. When scaling up, you use lower bound as it provides a positive delta", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "figured out the reason, it was because on scaling down policy I was using 'metric_interval_lower_bound' instead of 'metric_interval_upper_bound'. ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "figured out the reason, it was because on scaling down policy I was using 'metric_interval_lower_bound' instead of 'metric_interval_upper_bound'. ", "keywords": ["policy"]}]}, {"Id": "76096240", "PostTypeId": "2", "ParentId": "66999238", "CreationDate": "2023-04-24T21:28:23.210", "Score": "0", "Body": "<p>@narliecholler As you figured out, you need to check the values set for the auto scaling.</p>\n<p>For instance:</p>\n<pre><code>prod-cpu-ScaleUp: CPUUtilization &gt;= 50\nTake the action: Add 2 tasks when 65 &lt;= CPUUtilization\n</code></pre>\n<p>In above case, you will receive similar below error message because the scaling doesn't know how to handle the CPUUtilization actions between 50 and 65.</p>\n<p><em>&quot;No step adjustment found for metric value [52.01] and breach delta 2.01&quot;</em></p>\n", "OwnerUserId": "21729176", "LastEditorUserId": "21729176", "LastEditDate": "2023-04-24T21:29:37.440", "LastActivityDate": "2023-04-24T21:29:37.440", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "291860978", "PostHistoryTypeId": "2", "PostId": "76096240", "RevisionGUID": "fa4e4f05-fe7b-4f7f-b4be-73654eef9837", "CreationDate": "2023-04-24T21:28:23.210", "UserId": "21729176", "Text": "As you figured out, you need to check the values set for the auto scaling. \r\n\r\nFor instance:\r\n\r\n prod-cpu-ScaleUp: CPUUtilization >= 50\r\n Take the action: Add 2 tasks when 65 <= CPUUtilization\r\n\r\nIn above case, you will receive similar below error message because the scaling doesn't know how to handle the CPUUtilization actions between 50 and 65.\r\n  \"No step adjustment found for metric value [52.01] and breach delta 2.01\"", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For instance: prod-cpu-ScaleUp: CPUUtilization >= 50 Take the action: Add 2 tasks when 65 <= CPUUtilization ", "keywords": ["instance", "cpu"]}]}, {"Id": "291861010", "PostHistoryTypeId": "5", "PostId": "76096240", "RevisionGUID": "77e1e16b-c1e8-4934-a605-4853cb05ad37", "CreationDate": "2023-04-24T21:29:08.457", "UserId": "21729176", "Comment": "added 15 characters in body", "Text": "@narliecholler As you figured out, you need to check the values set for the auto scaling. \r\n\r\nFor instance:\r\n\r\n prod-cpu-ScaleUp: CPUUtilization >= 50\r\n Take the action: Add 2 tasks when 65 <= CPUUtilization\r\n\r\nIn above case, you will receive similar below error message because the scaling doesn't know how to handle the CPUUtilization actions between 50 and 65.\r\n  \"No step adjustment found for metric value [52.01] and breach delta 2.01\"", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For instance: prod-cpu-ScaleUp: CPUUtilization >= 50 Take the action: Add 2 tasks when 65 <= CPUUtilization ", "keywords": ["instance", "cpu"]}]}, {"Id": "291861023", "PostHistoryTypeId": "5", "PostId": "76096240", "RevisionGUID": "4bb06246-0d4e-40a6-9ff3-2fc080ea5702", "CreationDate": "2023-04-24T21:29:37.440", "UserId": "21729176", "Comment": "added 6 characters in body", "Text": "@narliecholler As you figured out, you need to check the values set for the auto scaling. \r\n\r\nFor instance:\r\n\r\n prod-cpu-ScaleUp: CPUUtilization >= 50\r\n Take the action: Add 2 tasks when 65 <= CPUUtilization\r\n\r\nIn above case, you will receive similar below error message because the scaling doesn't know how to handle the CPUUtilization actions between 50 and 65.\r\n  \r\n\r\n*\"No step adjustment found for metric value [52.01] and breach delta 2.01\"*", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For instance: prod-cpu-ScaleUp: CPUUtilization >= 50 Take the action: Add 2 tasks when 65 <= CPUUtilization ", "keywords": ["instance", "cpu"]}]}], "filtered-sentences": [{"source": "Body", "text": "For instance: In above case, you will receive similar below error message because the scaling doesn't know how to handle the CPUUtilization actions between 50 and 65. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "AWS AutoScaling Down policy is failing after scaling up is successful: ", "keywords": ["policy"]}, {"source": "Body", "text": "When creating the autoscaling policy and cloudwatch alarm resource in Terraform v13, they are created fine. ", "keywords": ["policy"]}, {"source": "Body", "text": "However, when load testing the endpoint, they successfully scale up instances, but fail to scale down when CPU utilization hits the necessary % for a period of time. ", "keywords": ["cpu", "test"]}, {"source": "Body", "text": "Listed below are the terraform resources: Autoscaling Policy - Cloudwatch Alarm -", "keywords": ["policy"]}]}