{"Id": "76411490", "PostTypeId": "1", "AcceptedAnswerId": "76411883", "CreationDate": "2023-06-06T04:40:25.187", "Score": "-1", "ViewCount": "128", "Body": "<p>(I replace sensitive information with XXXXXX, YYYYYY)</p>\n<h1>1. containerized app</h1>\n<p><strong>test.py</strong>:</p>\n<pre><code>import logging\nlogging.info(&quot;wow!!&quot;)\n</code></pre>\n<p><strong>Dockerfile</strong>:</p>\n<pre><code>FROM python:3.10-slim\nRUN apt-get update &amp;&amp; \\\n    apt-get -y install git &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\nCOPY test.py /tmp/test.py\nCMD [&quot;python&quot;, &quot;/tmp/test.py&quot;]\n</code></pre>\n<h1>2. Push image on ecr</h1>\n<pre><code>$ docker push XXXXXXX.dkr.ecr.us-east-1.amazonaws.com/chois-trader:trading-latest\n</code></pre>\n<h1>3. terraform</h1>\n<p><strong>ecs.tf</strong>:</p>\n<pre><code>resource &quot;aws_kms_key&quot; &quot;chois_trader&quot; {\n  deletion_window_in_days = 7\n}\n\nresource &quot;aws_cloudwatch_log_group&quot; &quot;chois_trader&quot; {\n  name = &quot;chois_trader&quot;\n}\n\n\n\nresource &quot;aws_iam_role&quot; &quot;chois_trader_task_execution_role&quot; {\n  name = &quot;chois-trader-task-execution-role&quot;\n\n  assume_role_policy = &lt;&lt;EOF\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Principal&quot;: {\n        &quot;Service&quot;: &quot;ecs-tasks.amazonaws.com&quot;\n      },\n      &quot;Action&quot;: [\n        &quot;sts:AssumeRole&quot;\n      ]\n    }\n  ]\n}\nEOF\n}\n\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;chois_trader_task_execution_role_policy_attachment&quot; {\n  role       = aws_iam_role.chois_trader_task_execution_role.name\n  policy_arn = &quot;arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy&quot;\n}\n\n\n\n\n\nresource &quot;aws_iam_role&quot; &quot;chois_trader_task_role&quot; {\n  name = &quot;chois-trader-task-role&quot;\n\n  assume_role_policy = jsonencode({\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n      {\n        &quot;Effect&quot;: &quot;Allow&quot;,\n        &quot;Principal&quot;: {\n          &quot;Service&quot;: &quot;ecs-tasks.amazonaws.com&quot;\n        },\n        &quot;Action&quot;: &quot;sts:AssumeRole&quot;\n      }\n    ]\n  })\n}\n\nresource &quot;aws_iam_policy&quot; &quot;chois_trader_log_policy&quot; {\n  name        = &quot;chois-trader-log-policy&quot;\n  description = &quot;chois trader log IAM policy&quot;\n  policy = jsonencode({\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n      {\n        &quot;Sid&quot;: &quot;1&quot;,\n        &quot;Effect&quot;: &quot;Allow&quot;,\n        &quot;Action&quot;: [\n          &quot;logs:CreateLogStream&quot;,\n          &quot;logs:CreateLogGroup&quot;,\n          &quot;logs:DescribeLogStreams&quot;,\n          &quot;logs:PutLogEvents&quot;\n        ],\n        &quot;Resource&quot;: &quot;arn:aws:logs:ap-northeast-2:YYYYYYYYY:log-group:chois_trader:*&quot;\n      }\n    ]\n  })\n}\n\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;example_attachment&quot; {\n  role       = aws_iam_role.chois_trader_task_role.name\n  policy_arn = aws_iam_policy.chois_trader_log_policy.arn\n}\n\n\n\n\nresource &quot;aws_ecs_cluster&quot; &quot;chois_trader&quot; {\n  name = &quot;chois_trader&quot;\n\n  configuration {\n    execute_command_configuration {\n      kms_key_id = aws_kms_key.chois_trader.arn\n      logging    = &quot;OVERRIDE&quot;\n\n      log_configuration {\n        cloud_watch_encryption_enabled = true\n        cloud_watch_log_group_name     = aws_cloudwatch_log_group.chois_trader.name\n      }\n    }\n  }\n}\n\n# Create a task definition with a container image\nresource &quot;aws_ecs_task_definition&quot; &quot;chois_trader_task&quot; {\n  family = &quot;chois-trader-task&quot;\n  requires_compatibilities = [&quot;FARGATE&quot;]\n  network_mode             = &quot;awsvpc&quot;\n  execution_role_arn       = aws_iam_role.chois_trader_task_execution_role.arn\n  task_role_arn = aws_iam_role.chois_trader_task_role.arn\n  cpu    = 256\n  memory = 512\n  container_definitions = jsonencode([\n    {\n      name  = &quot;chois-trader-task-container&quot;\n      image = &quot;XXXXXXXX.dkr.ecr.us-east-1.amazonaws.com/chois-trader:trading-latest&quot;\n      log_configuration = {\n        log_driver = &quot;awslogs&quot;\n        options = {\n          &quot;awslogs-group&quot;         = &quot;chois_trader&quot;\n          &quot;awslogs-region&quot;        = &quot;ap-northeast-2&quot;\n          &quot;awslogs-stream-prefix&quot; = &quot;ecs&quot;\n        }\n      }\n    }\n  ])\n  volume {\n    name      = &quot;service-storage&quot;\n  }\n}\n</code></pre>\n<h1>4. tf apply</h1>\n<pre><code>$ terraform apply\n</code></pre>\n<h1>4. Execute task (AWS console)</h1>\n<p><a href=\"https://i.stack.imgur.com/HBR0P.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/HBR0P.png\" alt=\"enter image description here\" /></a></p>\n<p><a href=\"https://i.stack.imgur.com/IhHRX.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/IhHRX.png\" alt=\"enter image description here\" /></a></p>\n<p><a href=\"https://i.stack.imgur.com/Vz9ez.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Vz9ez.png\" alt=\"enter image description here\" /></a></p>\n<p>After a few seconds, exit with status code 0!</p>\n<p><a href=\"https://i.stack.imgur.com/vQCxw.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/vQCxw.png\" alt=\"enter image description here\" /></a></p>\n<p>But log not appear at all..</p>\n<p><a href=\"https://i.stack.imgur.com/R4Ght.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/R4Ght.png\" alt=\"enter image description here\" /></a></p>\n<h1>5. Reference</h1>\n<ul>\n<li><a href=\"https://www.chakray.com/creating-fargate-ecs-task-aws-using-terraform/\" rel=\"nofollow noreferrer\">https://www.chakray.com/creating-fargate-ecs-task-aws-using-terraform/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/59684900/terraform-aws-cloudwatch-log-group-for-ecs-tasks-containers\">Terraform AWS CloudWatch log group for ECS tasks/containers</a></li>\n</ul>\n<p>Anything i missed?</p>\n", "OwnerUserId": "3595632", "LastActivityDate": "2023-06-06T11:25:54.403", "Title": "Why does AWS ECS FARGATE not generate log on cloud watch (terraform)?", "Tags": "<amazon-web-services><terraform><amazon-cloudwatch><terraform-provider-aws><aws-fargate>", "AnswerCount": "1", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "134739084", "PostId": "76411490", "Score": "0", "Text": "Looks like you have a typo in the region you  have specified ap-northeast-2 and looking at your ecr repo you are running it in us-east-1", "CreationDate": "2023-06-06T04:57:25.057", "UserId": "6512807", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "134739220", "PostId": "76411490", "Score": "0", "Text": "@VikramS No. that's not a typo. I intently use us-east repo for reducing cost. I don't think that ECR location is matter now cuz task pulled image and run successfully .", "CreationDate": "2023-06-06T05:27:36.940", "UserId": "3595632", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I intently use us-east repo for reducing cost. ", "keywords": ["cost"]}]}, {"Id": "134739927", "PostId": "76411490", "Score": "0", "Text": "below config has options = {\n          \"awslogs-group\"         = \"chois_trader\"\n          \"awslogs-region\"        = \"ap-northeast-2\"\n          \"awslogs-stream-prefix\" = \"ecs\"\n        }", "CreationDate": "2023-06-06T06:56:29.853", "UserId": "6512807", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "2049335879", "CreationDate": "2023-06-06T04:40:25.187", "PostId": "76411490", "RelatedPostId": "59684900", "LinkTypeId": "1"}], "history": [{"Id": "293784557", "PostHistoryTypeId": "2", "PostId": "76411490", "RevisionGUID": "2489f1e2-71b3-4c18-bc3b-0eec26a8f683", "CreationDate": "2023-06-06T04:40:25.187", "UserId": "3595632", "Text": "(I replace sensitive information with XXXXXX, YYYYYY)\r\n\r\n# 1. containerized app\r\n**test.py**:\r\n```\r\nimport logging\r\nlogging.info(\"wow!!\")\r\n```\r\n\r\n**Dockerfile**:\r\n```\r\nFROM python:3.10-slim\r\nRUN apt-get update && \\\r\n    apt-get -y install git && \\\r\n    rm -rf /var/lib/apt/lists/*\r\nCOPY test.py /tmp/test.py\r\nCMD [\"python\", \"/tmp/test.py\"]\r\n```\r\n\r\n\r\n# 2. Push image on ecr\r\n```\r\n$ docker push XXXXXXX.dkr.ecr.us-east-1.amazonaws.com/chois-trader:trading-latest\r\n```\r\n\r\n\r\n# 3. terraform \r\n**ecs.tf**:\r\n```\r\nresource \"aws_kms_key\" \"chois_trader\" {\r\n  deletion_window_in_days = 7\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"chois_trader\" {\r\n  name = \"chois_trader\"\r\n}\r\n\r\n\r\n\r\nresource \"aws_iam_role\" \"chois_trader_task_execution_role\" {\r\n  name = \"chois-trader-task-execution-role\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"Service\": \"ecs-tasks.amazonaws.com\"\r\n      },\r\n      \"Action\": [\r\n        \"sts:AssumeRole\"\r\n      ]\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"chois_trader_task_execution_role_policy_attachment\" {\r\n  role       = aws_iam_role.chois_trader_task_execution_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\"\r\n}\r\n\r\n\r\n\r\n\r\n\r\nresource \"aws_iam_role\" \"chois_trader_task_role\" {\r\n  name = \"chois-trader-task-role\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n      {\r\n        \"Effect\": \"Allow\",\r\n        \"Principal\": {\r\n          \"Service\": \"ecs-tasks.amazonaws.com\"\r\n        },\r\n        \"Action\": \"sts:AssumeRole\"\r\n      }\r\n    ]\r\n  })\r\n}\r\n\r\nresource \"aws_iam_policy\" \"chois_trader_log_policy\" {\r\n  name        = \"chois-trader-log-policy\"\r\n  description = \"chois trader log IAM policy\"\r\n  policy = jsonencode({\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n      {\r\n        \"Sid\": \"1\",\r\n        \"Effect\": \"Allow\",\r\n        \"Action\": [\r\n          \"logs:CreateLogStream\",\r\n          \"logs:CreateLogGroup\",\r\n          \"logs:DescribeLogStreams\",\r\n          \"logs:PutLogEvents\"\r\n        ],\r\n        \"Resource\": \"arn:aws:logs:ap-northeast-2:YYYYYYYYY:log-group:chois_trader:*\"\r\n      }\r\n    ]\r\n  })\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"example_attachment\" {\r\n  role       = aws_iam_role.chois_trader_task_role.name\r\n  policy_arn = aws_iam_policy.chois_trader_log_policy.arn\r\n}\r\n\r\n\r\n\r\n\r\nresource \"aws_ecs_cluster\" \"chois_trader\" {\r\n  name = \"chois_trader\"\r\n\r\n  configuration {\r\n    execute_command_configuration {\r\n      kms_key_id = aws_kms_key.chois_trader.arn\r\n      logging    = \"OVERRIDE\"\r\n\r\n      log_configuration {\r\n        cloud_watch_encryption_enabled = true\r\n        cloud_watch_log_group_name     = aws_cloudwatch_log_group.chois_trader.name\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n# Create a task definition with a container image\r\nresource \"aws_ecs_task_definition\" \"chois_trader_task\" {\r\n  family = \"chois-trader-task\"\r\n  requires_compatibilities = [\"FARGATE\"]\r\n  network_mode             = \"awsvpc\"\r\n  execution_role_arn       = aws_iam_role.chois_trader_task_execution_role.arn\r\n  task_role_arn = aws_iam_role.chois_trader_task_role.arn\r\n  cpu    = 256\r\n  memory = 512\r\n  container_definitions = jsonencode([\r\n    {\r\n      name  = \"chois-trader-task-container\"\r\n      image = \"XXXXXXXX.dkr.ecr.us-east-1.amazonaws.com/chois-trader:trading-latest\"\r\n      log_configuration = {\r\n        log_driver = \"awslogs\"\r\n        options = {\r\n          \"awslogs-group\"         = \"chois_trader\"\r\n          \"awslogs-region\"        = \"ap-northeast-2\"\r\n          \"awslogs-stream-prefix\" = \"ecs\"\r\n        }\r\n      }\r\n    }\r\n  ])\r\n  volume {\r\n    name      = \"service-storage\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n# 4. tf apply\r\n```\r\n$ terraform apply\r\n```\r\n\r\n\r\n\r\n# 4. Execute task (AWS console)\r\n\r\n[![enter image description here][1]][1]\r\n\r\n[![enter image description here][2]][2]\r\n\r\n[![enter image description here][3]][3]\r\n\r\nAfter a few seconds, exit with status code 0!\r\n\r\n[![enter image description here][4]][4]\r\n\r\nBut log not appear at all..\r\n\r\n[![enter image description here][5]][5]\r\n\r\n# 5. Reference\r\n- https://www.chakray.com/creating-fargate-ecs-task-aws-using-terraform/\r\n- https://stackoverflow.com/questions/59684900/terraform-aws-cloudwatch-log-group-for-ecs-tasks-containers\r\n\r\n\r\nAnything i missed?\r\n\r\n  [1]: https://i.stack.imgur.com/HBR0P.png\r\n  [2]: https://i.stack.imgur.com/IhHRX.png\r\n  [3]: https://i.stack.imgur.com/Vz9ez.png\r\n  [4]: https://i.stack.imgur.com/vQCxw.png\r\n  [5]: https://i.stack.imgur.com/R4Ght.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "(I replace sensitive information with XXXXXX, YYYYYY) # 1. containerized app **test.py**: ``` import logging logging.info(\"wow!!\") ``` **Dockerfile**: ``` FROM python:3.10-slim RUN apt-get update && \\ apt-get -y install git && \\ rm -rf /var/lib/apt/lists/* COPY test.py /tmp/test.py CMD [\"python\", \"/tmp/test.py\"] ``` # 2. Push image on ecr ``` $ docker push XXXXXXX.dkr.ecr.us-east-1.amazonaws.com/chois-trader:trading-latest ``` # 3. terraform **ecs.tf**: ``` resource \"aws_kms_key\" \"chois_trader\" { deletion_window_in_days = 7 } resource \"aws_cloudwatch_log_group\" \"chois_trader\" { name = \"chois_trader\" } resource \"aws_iam_role\" \"chois_trader_task_execution_role\" { name = \"chois-trader-task-execution-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"ecs-tasks.amazonaws.com\" }, \"Action\": [ \"sts:AssumeRole\" ] } ] } EOF } resource \"aws_iam_role_policy_attachment\" \"chois_trader_task_execution_role_policy_attachment\" { role = aws_iam_role.chois_trader_task_execution_role.name policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\" } resource \"aws_iam_role\" \"chois_trader_task_role\" { name = \"chois-trader-task-role\" assume_role_policy = jsonencode({ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"ecs-tasks.amazonaws.com\" }, \"Action\": \"sts:AssumeRole\" } ] }) } resource \"aws_iam_policy\" \"chois_trader_log_policy\" { name = \"chois-trader-log-policy\" description = \"chois trader log IAM policy\" policy = jsonencode({ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"1\", \"Effect\": \"Allow\", \"Action\": [ \"logs:CreateLogStream\", \"logs:CreateLogGroup\", \"logs:DescribeLogStreams\", \"logs:PutLogEvents\" ], \"Resource\": \"arn:aws:logs:ap-northeast-2:YYYYYYYYY:log-group:chois_trader:*\" } ] }) } resource \"aws_iam_role_policy_attachment\" \"example_attachment\" { role = aws_iam_role.chois_trader_task_role.name policy_arn = aws_iam_policy.chois_trader_log_policy.arn } resource \"aws_ecs_cluster\" \"chois_trader\" { name = \"chois_trader\" configuration { execute_command_configuration { kms_key_id = aws_kms_key.chois_trader.arn logging = \"OVERRIDE\" log_configuration { cloud_watch_encryption_enabled = true cloud_watch_log_group_name = aws_cloudwatch_log_group.chois_trader.name } } } } # Create a task definition with a container image resource \"aws_ecs_task_definition\" \"chois_trader_task\" { family = \"chois-trader-task\" requires_compatibilities = [\"FARGATE\"] network_mode = \"awsvpc\" execution_role_arn = aws_iam_role.chois_trader_task_execution_role.arn task_role_arn = aws_iam_role.chois_trader_task_role.arn cpu = 256 memory = 512 container_definitions = jsonencode([ { name = \"chois-trader-task-container\" image = \"XXXXXXXX.dkr.ecr.us-east-1.amazonaws.com/chois-trader:trading-latest\" log_configuration = { log_driver = \"awslogs\" options = { \"awslogs-group\" = \"chois_trader\" \"awslogs-region\" = \"ap-northeast-2\" \"awslogs-stream-prefix\" = \"ecs\" } } } ]) volume { name = \"service-storage\" } } ``` # 4. tf apply ``` $ terraform apply ``` # 4. Execute task (AWS console) [![enter image description here][1]][1] [![enter image description here][2]][2] [![enter image description here][3]][3] After a few seconds, exit with status code 0! [![enter image description here][4]][4] But log not appear at all.. [![enter image description here][5]][5] # 5. Reference - https://www.chakray.com/creating-fargate-ecs-task-aws-using-terraform/ - https://stackoverflow.com/questions/59684900/terraform-aws-cloudwatch-log-group-for-ecs-tasks-containers Anything i missed? [1]: https://i.stack.imgur.com/HBR0P.png [2]: https://i.stack.imgur.com/IhHRX.png [3]: https://i.stack.imgur.com/Vz9ez.png [4]: https://i.stack.imgur.com/vQCxw.png [5]: https://i.stack.imgur.com/R4Ght.png", "keywords": ["storage", "cpu", "policy", "test"]}]}, {"Id": "293784559", "PostHistoryTypeId": "1", "PostId": "76411490", "RevisionGUID": "2489f1e2-71b3-4c18-bc3b-0eec26a8f683", "CreationDate": "2023-06-06T04:40:25.187", "UserId": "3595632", "Text": "Why does AWS ECS FARGATE not generate log on cloud watch (terraform)?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "293784560", "PostHistoryTypeId": "3", "PostId": "76411490", "RevisionGUID": "2489f1e2-71b3-4c18-bc3b-0eec26a8f683", "CreationDate": "2023-06-06T04:40:25.187", "UserId": "3595632", "Text": "<amazon-web-services><terraform><amazon-cloudwatch><terraform-provider-aws><aws-fargate>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "76411883", "PostTypeId": "2", "ParentId": "76411490", "CreationDate": "2023-06-06T06:15:52.360", "Score": "2", "Body": "<p>Below is our ECS task definition template through which the logs are going through fine. I am guessing there may be issue due to usage of underscore_separated keys instead of camelCase.</p>\n<pre><code>&quot;logConfiguration&quot;: {\n    &quot;logDriver&quot;: &quot;awslogs&quot;,\n    &quot;options&quot;: {\n      &quot;awslogs-group&quot;: &quot;${cw_log_group_name}&quot;,\n      &quot;awslogs-region&quot;: &quot;${aws_region}&quot;,\n      &quot;awslogs-stream-prefix&quot;: &quot;${app_name}-${environment}-log-stream&quot;\n    }\n},\n</code></pre>\n", "OwnerUserId": "93794", "LastEditorUserId": "93794", "LastEditDate": "2023-06-06T11:25:54.403", "LastActivityDate": "2023-06-06T11:25:54.403", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "134739985", "PostId": "76411883", "Score": "0", "Text": "You saved my time.. Thanks!", "CreationDate": "2023-06-06T07:01:01.990", "UserId": "3595632", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "293786814", "PostHistoryTypeId": "2", "PostId": "76411883", "RevisionGUID": "89c08f27-095c-4477-b938-dc953622f21e", "CreationDate": "2023-06-06T06:15:52.360", "UserId": "93794", "Text": "Below is our ECS task definition template through which the logs are going through fine. I am guessing there may be issue due to usage of hyphen-separated keys instead of camelCase.\r\n\r\n    \"logConfiguration\": {\r\n        \"logDriver\": \"awslogs\",\r\n        \"options\": {\r\n          \"awslogs-group\": \"${cw_log_group_name}\",\r\n          \"awslogs-region\": \"${aws_region}\",\r\n          \"awslogs-stream-prefix\": \"${app_name}-${environment}-log-stream\"\r\n        }\r\n    },", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "293799196", "PostHistoryTypeId": "5", "PostId": "76411883", "RevisionGUID": "a41e97df-99bf-445e-b671-fe27a24f6de7", "CreationDate": "2023-06-06T11:25:54.403", "UserId": "93794", "Comment": "replaced hyphen-separated with underscore_separated. I meant underscore-separated ", "Text": "Below is our ECS task definition template through which the logs are going through fine. I am guessing there may be issue due to usage of underscore_separated keys instead of camelCase.\r\n\r\n    \"logConfiguration\": {\r\n        \"logDriver\": \"awslogs\",\r\n        \"options\": {\r\n          \"awslogs-group\": \"${cw_log_group_name}\",\r\n          \"awslogs-region\": \"${aws_region}\",\r\n          \"awslogs-stream-prefix\": \"${app_name}-${environment}-log-stream\"\r\n        }\r\n    },", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "(I replace sensitive information with XXXXXX, YYYYYY) 1. containerized app test.py: Dockerfile: 2. Push image on ecr 3. terraform ecs.tf: 4. tf apply 4. Execute task (AWS console) After a few seconds, exit with status code 0! But log not appear at all.. ", "keywords": ["test"]}]}