{"Id": "69088303", "PostTypeId": "1", "AcceptedAnswerId": "69089494", "CreationDate": "2021-09-07T12:31:09.313", "Score": "1", "ViewCount": "247", "Body": "<p>We are trying to assign groups to specific roles under projects in gcp. We have a defined map for gcp project related variables</p>\n<pre><code>project_details = {\n  &quot;test-project-1&quot; = {\n    project_id   = &quot;test-project-1&quot;\n    project_name = &quot;test-project-1&quot;\n  }\n   &quot;test-project-2&quot; = {\n    project_id   = &quot;test-project-2&quot;\n    project_name = &quot;test-project-2&quot;\n  }\n}\n</code></pre>\n<p>We have another map defined with roles and members , this is pretty static.</p>\n<pre><code>role_bind = {\n  &quot;billing_admin&quot; = {\n   name = &quot;roles/billing.admin&quot;\n   member = [&quot;group:gcp-******&quot;]\n  }\n   &quot;billing_viewer&quot; = {\n   name = &quot;roles/billing.viewer&quot;\n   member = [&quot;group:gcp-******&quot;]\n  }\n}\n</code></pre>\n<p>We would like to use google_project_iam_member resource to loop through the project id's using the mapped variable project_details</p>\n<p>like</p>\n<pre><code>    for_each = var.project_details \n\n    project = each.value.project_id\n</code></pre>\n<p>and then for each of the project id we would like to assign the roles using the other map variable role_bind.</p>\n<p>Can we achieve that by any means ( for_each within for_each ) ? Any help would be appreciated.</p>\n", "OwnerUserId": "11637914", "LastActivityDate": "2021-09-07T13:52:55.633", "Title": "Terraform Using two different map's for resource creation in gcp", "Tags": "<google-cloud-platform><terraform><terraform-provider-gcp>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "253309355", "PostHistoryTypeId": "2", "PostId": "69088303", "RevisionGUID": "7e86c205-a206-4cc5-9a3f-ee90df9af8ee", "CreationDate": "2021-09-07T12:31:09.313", "UserId": "11637914", "Text": "We are trying to assign groups to specific roles under projects in gcp. We have a defined map for gcp project related variables\r\n```\r\nproject_details = {\r\n  \"test-project-1\" = {\r\n    project_id   = \"test-project-1\"\r\n    project_name = \"test-project-1\"\r\n  }\r\n   \"test-project-2\" = {\r\n    project_id   = \"test-project-2\"\r\n    project_name = \"test-project-2\"\r\n  }\r\n}\r\n```\r\nWe have another map defined with roles and members , this is pretty static.\r\n```\r\nrole_bind = {\r\n  \"billing_admin\" = {\r\n   name = \"roles/billing.admin\"\r\n   member = [\"group:gcp-******\"]\r\n  }\r\n   \"billing_viewer\" = {\r\n   name = \"roles/billing.viewer\"\r\n   member = [\"group:gcp-******\"]\r\n  }\r\n}\r\n```\r\nWe would like to use google_project_iam_member resource to loop through the project id's using the mapped variable project_details \r\n\r\nlike \r\n```\r\n    for_each = var.project_details \r\n\r\n    project = each.value.project_id\r\n```\r\n\r\n\r\n\r\nand then for each of the project id we would like to assign the roles using the other map variable role_bind.\r\n\r\nCan we achieve that by any means ( for_each within for_each ) ? Any help would be appreciated.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We have a defined map for gcp project related variables ``` project_details = { \"test-project-1\" = { project_id = \"test-project-1\" project_name = \"test-project-1\" } \"test-project-2\" = { project_id = \"test-project-2\" project_name = \"test-project-2\" } } ``` We have another map defined with roles and members , this is pretty static. ", "keywords": ["test"]}, {"source": "Text", "text": "``` role_bind = { \"billing_admin\" = { name = \"roles/billing.admin\" member = [\"group:gcp-******\"] } \"billing_viewer\" = { name = \"roles/billing.viewer\" member = [\"group:gcp-******\"] } } ``` ", "keywords": ["bill"]}]}, {"Id": "253309356", "PostHistoryTypeId": "1", "PostId": "69088303", "RevisionGUID": "7e86c205-a206-4cc5-9a3f-ee90df9af8ee", "CreationDate": "2021-09-07T12:31:09.313", "UserId": "11637914", "Text": "Terraform Using two different map's for resource creation in gcp", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "253309357", "PostHistoryTypeId": "3", "PostId": "69088303", "RevisionGUID": "7e86c205-a206-4cc5-9a3f-ee90df9af8ee", "CreationDate": "2021-09-07T12:31:09.313", "UserId": "11637914", "Text": "<google-cloud-platform><terraform><terraform-provider-gcp>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "69089494", "PostTypeId": "2", "ParentId": "69088303", "CreationDate": "2021-09-07T13:52:55.633", "Score": "2", "Body": "<p>Terraform doesn't support nested for each or nested count. The two ways this usually gets done is by using a count of <code>len(var.role_bind) * len(varproject_details)</code> and finding the elements with modulo, or by using nested comprehensions. Nested comprehensions are more readable, so let's go with that:</p>\n<pre><code>locals {\n    project_role = flatten([for pi : project in var.project_details : \n        [ for ri : role in var.role_details {\n            rolename    = role.name\n            projectname = project.project_name\n            projectid   = project.project_id\n            member      = role.member\n        }]\n    ])\n}\n</code></pre>\n<p>Then you would use <code>local.project_role</code> with a count in your statements.</p>\n", "OwnerUserId": "32771", "LastActivityDate": "2021-09-07T13:52:55.633", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "122120057", "PostId": "69089494", "Score": "0", "Text": "@Ayan If it worked, than acceptance of the answer is a good practice.", "CreationDate": "2021-09-08T00:20:29.273", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "253314482", "PostHistoryTypeId": "2", "PostId": "69089494", "RevisionGUID": "b6b98a1a-da1d-4546-bac1-0788a331fd65", "CreationDate": "2021-09-07T13:52:55.633", "UserId": "32771", "Text": "Terraform doesn't support nested for each or nested count. The two ways this usually gets done is by using a count of `len(var.role_bind) * len(varproject_details)` and finding the elements with modulo, or by using nested comprehensions. Nested comprehensions are more readable, so let's go with that:\r\n\r\n    locals {\r\n        project_role = flatten([for pi : project in var.project_details : \r\n            [ for ri : role in var.role_details {\r\n                rolename    = role.name\r\n                projectname = project.project_name\r\n                projectid   = project.project_id\r\n                member      = role.member\r\n            }]\r\n        ])\r\n    }\r\n\r\nThen you would use `local.project_role` with a count in your statements.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}