{"Id": "73748842", "PostTypeId": "1", "CreationDate": "2022-09-16T18:16:39.553", "Score": "1", "ViewCount": "407", "Body": "<p>I have a private ECR repo in AWS <code>Acc #1</code>.</p>\n<p>Multiple Terraform projects deploy to major cloud providers. ( <code>AWS Acc #2</code>, GCP <code>Acc #1</code>, etc).</p>\n<p>How do I refer to the images stored in the private ECR repo when defining resources for other Terraform projects?</p>\n<p>A use case can be:-</p>\n<p>Suppose there is an Image <code>Image #1</code> in AWS <code>Acc #1</code>,\nNow I need to use it for a lambda function in AWS <code>Acc #2</code>\nSo I'll define the resource as</p>\n<pre><code>resource &quot;aws_lambda_function&quot; &quot;my_func&quot; {\n  function_name = &quot;my-func&quot;\n  role          = aws_iam_role.iam_for_lambda.arn\n  environment {\n    variables = {\n      UNIQUE_KEY = var.env_name\n    }\n  }\n\n  package_type = &quot;Image&quot;\n  image_uri = &quot;{ACC_ID}.dkr.ecr.{REGION}.amazonaws.com/{IMAGE_NAME}:{TAG}&quot;\n\n  memory_size = 4096\n  ephemeral_storage {\n    size = 4096\n  }\n  timeout = 900\n}\n</code></pre>\n<p>This does not work as the Image URI <code>{ACC_ID}.dkr.ecr.{REGION}.amazonaws.com/{IMAGE_NAME}:{TAG}</code> is not accessible.</p>\n<p>It works fine if Image is in AWS <code>Acc #1</code> and is being used in a lambda defined in AWS <code>Acc #2</code>.</p>\n", "OwnerUserId": "11148084", "LastEditorUserId": "2620025", "LastEditDate": "2022-09-16T19:37:42.930", "LastActivityDate": "2022-09-16T19:37:42.930", "Title": "How to access private ECR repository images through terraform?", "Tags": "<terraform><terraform-provider-aws>", "AnswerCount": "0", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "130229127", "PostId": "73748842", "Score": "1", "Text": "It looks like AWS supports cross account ECR (we also use this at work) https://aws.amazon.com/blogs/compute/introducing-cross-account-amazon-ecr-access-for-aws-lambda/ probably a permission error and not your Terraform", "CreationDate": "2022-09-16T19:49:20.227", "UserId": "10004072", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130229166", "PostId": "73748842", "Score": "0", "Text": "Hey @LeslieAlldridge, thanks for that. It will solve the problem for AWS. Any idea how to access those images in GCP resources or maybe inside a Helm Provider?", "CreationDate": "2022-09-16T19:51:51.420", "UserId": "11148084", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Any idea how to access those images in GCP resources or maybe inside a Helm Provider?", "keywords": ["provider"]}]}, {"Id": "130229311", "PostId": "73748842", "Score": "1", "Text": "I personally would push containers to google cloud as well, having them pushed to two registries is cheap and easy. Otherwise you'll need to authenticate manually using the CLI or share the image public. https://stackoverflow.com/questions/58789091/login-to-docker-aws-registry-from-gcp", "CreationDate": "2022-09-16T19:59:59.417", "UserId": "10004072", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I personally would push containers to google cloud as well, having them pushed to two registries is cheap and easy. ", "keywords": ["cheap"]}]}, {"Id": "130229368", "PostId": "73748842", "Score": "0", "Text": "I can't push the containers to the GCP Acc where the resources will spin up. I can however keep them in my GCP acc and probably find a GCP-GCP container soln like the AWS one that you suggested. But is this the best way to do it? Can't I create a PreSigned URL kind of thing for ECR repos?", "CreationDate": "2022-09-16T20:03:52.963", "UserId": "11148084", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130229717", "PostId": "73748842", "Score": "1", "Text": "Sorry I don't have a GCP account set up so maybe someone else might know of a better idea. After a quick Google I see this diagram https://www.doit.com/securely-access-aws-from-gke/ (the first infra diagram) and it looks like you can access AWS IAM roles using a service account. As long as that role has access to ECR it should be sweet?", "CreationDate": "2022-09-16T20:29:21.107", "UserId": "10004072", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "2002801002", "CreationDate": "2022-09-16T19:59:59.417", "PostId": "73748842", "RelatedPostId": "58789091", "LinkTypeId": "1"}], "history": [{"Id": "278373673", "PostHistoryTypeId": "2", "PostId": "73748842", "RevisionGUID": "f9b3c33a-4d5e-4e3a-b9da-e226be72fee6", "CreationDate": "2022-09-16T18:16:39.553", "UserId": "11148084", "Text": "I have a private ECR repo in AWS `Acc #1`.\r\n\r\nMultiple Terraform projects deploy to major cloud providers. ( `AWS Acc #2`, GCP `Acc #1`, etc).\r\n\r\nHow do I refer to the images stored in the private ECR repo when defining resources for other Terraform projects?\r\n\r\nA use case can be:-\r\n\r\nSuppose there is an Image `Image #1` in AWS `Acc #1`,\r\nNow I need to use it for a lambda function in AWS `Acc #2`\r\nSo I'll define the resource as \r\n```\r\nresource \"aws_lambda_function\" \"my_func\" {\r\n  function_name = \"my-func\"\r\n  role          = aws_iam_role.iam_for_lambda.arn\r\n  environment {\r\n    variables = {\r\n      UNIQUE_KEY = var.env_name\r\n    }\r\n  }\r\n\r\n  package_type = \"Image\"\r\n  image_uri = \"{ACC_ID}.dkr.ecr.{REGION}.amazonaws.com/{IMAGE_NAME}:{TAG}\"\r\n\r\n  memory_size = 4096\r\n  ephemeral_storage {\r\n    size = 4096\r\n  }\r\n  timeout = 900\r\n}\r\n```\r\n\r\nThis does not work as the Image URI `{ACC_ID}.dkr.ecr.{REGION}.amazonaws.com/{IMAGE_NAME}:{TAG}` is not accessible.\r\n\r\nIt works fine if Image is in AWS `Acc #1` and is being used in a lambda defined in AWS `Acc #2`.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "278373675", "PostHistoryTypeId": "1", "PostId": "73748842", "RevisionGUID": "f9b3c33a-4d5e-4e3a-b9da-e226be72fee6", "CreationDate": "2022-09-16T18:16:39.553", "UserId": "11148084", "Text": "How to access private ECR repository images through terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "278373676", "PostHistoryTypeId": "3", "PostId": "73748842", "RevisionGUID": "f9b3c33a-4d5e-4e3a-b9da-e226be72fee6", "CreationDate": "2022-09-16T18:16:39.553", "UserId": "11148084", "Text": "<terraform><terraform-provider-aws><terraform-provider-azure><terraform-provider-gcp>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "278377786", "PostHistoryTypeId": "6", "PostId": "73748842", "RevisionGUID": "800afa25-5418-4bbd-a11d-ecbbc6120ab4", "CreationDate": "2022-09-16T19:37:42.930", "UserId": "2620025", "Comment": "Not apply terraform-provider-azure or terraform-provider-gcp tags", "Text": "<terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Comment", "text": "Not apply terraform-provider-azure or terraform-provider-gcp tags", "keywords": ["provider"]}]}, {"Id": "278377787", "PostHistoryTypeId": "24", "PostId": "73748842", "RevisionGUID": "800afa25-5418-4bbd-a11d-ecbbc6120ab4", "CreationDate": "2022-09-16T19:37:42.930", "Comment": "Proposed by 2620025 approved by 11148084 edit id of 5417049", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}