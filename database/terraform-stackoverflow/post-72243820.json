{"Id": "72243820", "PostTypeId": "1", "AcceptedAnswerId": "72249439", "CreationDate": "2022-05-14T20:59:01.277", "Score": "0", "ViewCount": "282", "Body": "<p>Hi All I am planning to build a system for my team where we can start a AWS batch infra - run a task - once job done destroy the infra.</p>\n<p>I am thinking of : Make file steps:- 1. Terraform apply AWS batch infra, 2. Run the task, 3. Check on regular interval if the task is complete 4. If the task is complete destroy the infra.</p>\n<p>What is most efficient way for doing this. Given our team would need wide variety of task to run on the AWS batch, we want to automate where we can just make one command do this.</p>\n<p>Should we explore Airflow for this? Or is there better way to so this? Your thoughts would be highly appreciated. Thank you</p>\n", "OwnerUserId": "9873444", "LastActivityDate": "2022-05-15T14:56:43.520", "Title": "Best way to manage Terraform apply infra -AWS batch- run a script (could take 1hr to 1day) - destroy infra", "Tags": "<python><makefile><terraform><airflow><aws-batch>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "270172608", "PostHistoryTypeId": "2", "PostId": "72243820", "RevisionGUID": "90184add-5987-4f9d-a632-2ff49784b6a6", "CreationDate": "2022-05-14T20:59:01.277", "UserId": "9873444", "Text": "Hi All I am planning to build a system for my team where we can start a AWS batch infra - run a task - once job done destroy the infra. \r\n\r\nI am thinking of : Make file steps:- 1. Terraform apply AWS batch infra, 2. Run the task, 3. Check on regular interval if the task is complete 4. If the task is complete destroy the infra. \r\n\r\nWhat is most efficient way for doing this. Given our team would need wide variety of task to run on the AWS batch, we want to automate where we can just make one command do this. \r\n\r\nShould we explore Airflow for this? Or is there better way to so this? Your thoughts would be highly appreciated. Thank you\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "What is most efficient way for doing this. ", "keywords": ["efficient"]}]}, {"Id": "270172610", "PostHistoryTypeId": "1", "PostId": "72243820", "RevisionGUID": "90184add-5987-4f9d-a632-2ff49784b6a6", "CreationDate": "2022-05-14T20:59:01.277", "UserId": "9873444", "Text": "Best way to manage Terraform apply infra -AWS batch- run a script (could take 1hr to 1day) - destroy infra", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "270172611", "PostHistoryTypeId": "3", "PostId": "72243820", "RevisionGUID": "90184add-5987-4f9d-a632-2ff49784b6a6", "CreationDate": "2022-05-14T20:59:01.277", "UserId": "9873444", "Text": "<python><makefile><terraform><airflow><aws-batch>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "72249439", "PostTypeId": "2", "ParentId": "72243820", "CreationDate": "2022-05-15T14:56:43.520", "Score": "0", "Body": "<p>Many companies have chosen to build their own Terraform Automation &amp; Collaboration Software (TACOS) but it's a lot less work to use an existing service such as the open source <a href=\"https://www.runatlantis.io/\" rel=\"nofollow noreferrer\">atlantis</a> or an enterprise saas platform such as <a href=\"https://spacelift.io\" rel=\"nofollow noreferrer\">spacelift</a> or terraform cloud.</p>\n<p>However, if you were to create your own, you would need to confirm plans safely. The tools above can use rego from open policy agent to do so.</p>\n<p>From your workflow, it sounds like you simply need a tool to auto apply your changes. I have seen a cron job running in jenkins that can do the trick. You can also run a cron ecs or ecs fargate task on a scheduled interval. Airflow seems like overkill.</p>\n<p>If I were you, I'd strongly look at all the options and list the pros and cons of each before considering rolling your own. I'm interested to know if the above services have shortcomings that warrant your team to build a new service.</p>\n", "OwnerUserId": "2965993", "LastActivityDate": "2022-05-15T14:56:43.520", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "127646916", "PostId": "72249439", "Score": "0", "Text": "Thank you for the comment. Sorry I did not mean to imply I am planing to build the a whole new system ( not talented enough). What I need is existing solutions, I guess a cron job if required regularly or make file scripts when it requires sporadically. But For both cron and make, I need to constantly-regularly check if the batch job is finished.  I guess airflow can do that out-of-box with all the permission, hence thought of airflow. Can you correct me if I am wrong about this? thank you", "CreationDate": "2022-05-15T15:37:58.703", "UserId": "9873444", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127647575", "PostId": "72249439", "Score": "0", "Text": "You are building a new version of the tools I have described. A cron job to regular check is the same as \"drift detection\" in the TACOS world. It might be better to explain what problem requires you to run a terraform apply daily. Why is your terraform state drifting ?", "CreationDate": "2022-05-15T16:27:11.800", "UserId": "2965993", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127648921", "PostId": "72249439", "Score": "0", "Text": "So with terraform apply, any member of team can start a AWS batch infra with EC2 instance, then with a script they would be able to a compute heavy job parralley on the AWS batch, and once that compute heavy job is done, the script would be able to destroy the terraform infra. I do not expect the terraform states to change, I want a signal that my job at AWS is done, so that I can destroy my infra.", "CreationDate": "2022-05-15T18:02:14.007", "UserId": "9873444", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "So with terraform apply, any member of team can start a AWS batch infra with EC2 instance, then with a script they would be able to a compute heavy job parralley on the AWS batch, and once that compute heavy job is done, the script would be able to destroy the terraform infra. ", "keywords": ["instance"]}, {"source": "Text", "text": "I do not expect the terraform states to change, I want a signal that my job at AWS is done, so that I can destroy my infra.", "keywords": ["change"]}]}, {"Id": "127931516", "PostId": "72249439", "Score": "0", "Text": "Hmm. It sounds like you're using terraform as a scripting tool rather than as an infrastructure state management tool. Whenever I apply terraform, I want the resources to persist indefinitely. Is there a way to create the aws batch infrastructure, enable it when you need to use it and disable, instead of destroying, to prevent unneeded costs?", "CreationDate": "2022-05-28T17:36:42.210", "UserId": "2965993", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "270203242", "PostHistoryTypeId": "2", "PostId": "72249439", "RevisionGUID": "5f474cd2-335d-4413-9b6c-49773fb78c2d", "CreationDate": "2022-05-15T14:56:43.520", "UserId": "2965993", "Text": "Many companies have chosen to build their own Terraform Automation & Collaboration Software (TACOS) but it's a lot less work to use an existing service such as the open source [atlantis][1] or an enterprise saas platform such as [spacelift][2] or terraform cloud.\r\n\r\nHowever, if you were to create your own, you would need to confirm plans safely. The tools above can use rego from open policy agent to do so.\r\n\r\nFrom your workflow, it sounds like you simply need a tool to auto apply your changes. I have seen a cron job running in jenkins that can do the trick. You can also run a cron ecs or ecs fargate task on a scheduled interval. Airflow seems like overkill.\r\n\r\nIf I were you, I'd strongly look at all the options and list the pros and cons of each before considering rolling your own. I'm interested to know if the above services have shortcomings that warrant your team to build a new service.\r\n\r\n\r\n  [1]: https://www.runatlantis.io/\r\n  [2]: https://spacelift.io", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The tools above can use rego from open policy agent to do so. ", "keywords": ["policy"]}, {"source": "Text", "text": "From your workflow, it sounds like you simply need a tool to auto apply your changes. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "The tools above can use rego from open policy agent to do so. ", "keywords": ["policy"]}, {"source": "Body", "text": "From your workflow, it sounds like you simply need a tool to auto apply your changes. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "What is most efficient way for doing this. ", "keywords": ["efficient"]}]}