{"Id": "71639917", "PostTypeId": "1", "CreationDate": "2022-03-27T20:08:56.827", "Score": "1", "ViewCount": "4189", "Body": "<p>Context: I'm aware of the similar questions:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/63768921/the-for-each-value-depends-on-resource-attributes-that-cannot-be-determined-t\">The &quot;for_each&quot; value depends on resource attributes that cannot be determined (Terraform)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/70643719/for-each-value-depends-on-resource-attributes-that-cannot-be-determined-until-ap\">for_each value depends on resource attributes that cannot be determined until apply, so Terraform cannot predict how many instances will be created</a></li>\n</ul>\n<p>but I think mine is a bit different and it might be fixed by refactoring TF code since there's an additional input restriction.</p>\n<p>My original example is very long so I came up with a minimum viable example instead:</p>\n<p>I've got an input variable of type <code>map</code> that maps <em>all</em> possible numbers to names:</p>\n<pre><code># tfvars.terraform\nall_names_by_number = {\n  &quot;1&quot; = &quot;alex&quot;,\n  &quot;3&quot; = &quot;james&quot;,\n  &quot;5&quot; = &quot;ann&quot;,\n  &quot;8&quot; = &quot;paul&quot;,\n}\n</code></pre>\n<pre><code># main.tf\nlocals {\n  # active_names_by_number is a map as well\n  # but it's a subset of all_names_by_number\n  # all_names_by_number = {\n  # &quot;3&quot; = &quot;james&quot;,\n  # &quot;5&quot; = &quot;ann&quot;,\n  # }\n  active_names_by_number = people_resource.example.active_names_map\n}\n\n# Resource that depedns on active_names_by_number\nresource &quot;foo&quot; &quot;active_items&quot; {\n  for_each = local.active_names_by_number\n\n  name                = &quot;abc-${each.key}&quot;\n  location            = var.location\n\n  sub_id = data.zoo.sub[each.key].id\n\n  bar {\n    bar_name = each.value\n  }\n}\n</code></pre>\n<p>When I run the terraform configuration above via <code>terraform plan</code>, I get:</p>\n<pre><code>Error: Invalid for_each argument\n\n  on main.tf line 286, in resource &quot;foo&quot; &quot;active_items&quot;:\n 286:   for_each = for_each = local.active_names_by_number\n\nThe &quot;for_each&quot; value depends on resource attributes that cannot be determined\nuntil apply, so Terraform cannot predict how many instances will be created.\nTo work around this, use the -target argument to first apply only the\nresources that the for_each depends on.\n</code></pre>\n<p>which totally makes sense since <code>people_resource.example.active_names_map</code> is <em>&quot;initialized&quot;</em> in runtime from another resource (response)</p>\n<pre><code>locals {\n  active_names_by_number = people_resource.example.active_names_map\n}\n</code></pre>\n<p>but given the fact that <code>active_names_by_number</code> is a subset of <code>all_names_by_number</code> (input variable), how can I refactor the terraform configuration to show TF that <code>local.active_names_by_number</code> is bounded?</p>\n<p>My ideas so far:</p>\n<ol>\n<li>Use <code>count</code> instead of <code>for_each</code> as other answers suggest but I do need to use <code>each.value</code> in my example (and I can't use <code>all_names_by_number</code> to create extra resources.</li>\n<li>Get rid of <code>local.active_names_by_number</code> and use <code>var.all_names_by_number</code> instead -- the major downside is TF will create extra resources which is pretty expensive.</li>\n<li>Somehow write a nested <code>for</code> loop:</li>\n</ol>\n<pre><code># pseudocode\nfor name in var.all_names_by_number:\n   if name is in people_resource.example.active_names_map:\n      # create an instance of foo.active_item\n</code></pre>\n", "OwnerUserId": "17109505", "LastEditorUserId": "17109505", "LastEditDate": "2022-03-27T21:01:23.500", "LastActivityDate": "2022-09-26T05:43:38.343", "Title": "How can I fix for_each\" value depends on resource attributes that cannot be determined until apply", "Tags": "<terraform>", "AnswerCount": "1", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "126611817", "PostId": "71639917", "Score": "0", "Text": "Your question omits the condition based on which that subset is created. How do you decide which name is active? This is important, because you can't rely on `people_resource.example.active_names_map`, but you could create another variable which contains just the active names.", "CreationDate": "2022-03-27T20:24:36.137", "UserId": "7661119", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126611883", "PostId": "71639917", "Score": "0", "Text": "There's a service that performs _selection_ process during `create` operation (i.e., resource creation) which is why I can't pass it as an input variable.", "CreationDate": "2022-03-27T20:30:00.253", "UserId": "17109505", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126615043", "PostId": "71639917", "Score": "1", "Text": "You can't do much apart from re-architecting your TF code, so that you create the resources in two steps using `-target` option.", "CreationDate": "2022-03-28T02:33:44.223", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126629949", "PostId": "71639917", "Score": "0", "Text": "I also saw a suggestion about splitting it into 2 modules such that `active_names_by_number` will be the output for module #1 and input for module #2, does it sound reasonable? @Marcin", "CreationDate": "2022-03-28T16:21:12.700", "UserId": "17109505", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126637672", "PostId": "71639917", "Score": "0", "Text": "@AlexKuzminov Yes, its similar to using `-target`. You have to deploy your architecture in two steps.", "CreationDate": "2022-03-28T23:50:40.007", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "1967820548", "CreationDate": "2022-03-27T20:08:56.827", "PostId": "71639917", "RelatedPostId": "63768921", "LinkTypeId": "1"}, {"Id": "1967820549", "CreationDate": "2022-03-27T20:08:56.827", "PostId": "71639917", "RelatedPostId": "70643719", "LinkTypeId": "1"}], "history": [{"Id": "266911058", "PostHistoryTypeId": "2", "PostId": "71639917", "RevisionGUID": "ea70f8d0-c683-4a4f-9994-978bbea4ec90", "CreationDate": "2022-03-27T20:08:56.827", "UserId": "17109505", "Text": "Context: I'm aware of the similar questions:\r\n* https://stackoverflow.com/questions/63768921/the-for-each-value-depends-on-resource-attributes-that-cannot-be-determined-t\r\n* https://stackoverflow.com/questions/70643719/for-each-value-depends-on-resource-attributes-that-cannot-be-determined-until-ap\r\n\r\nbut I think mine is a bit different and it might be fixed by refactoring TF code since there's an additional input restriction.\r\n\r\nMy original example is very long so I came up with a minimum viable example instead:\r\n\r\nI've got an input variable of type `map` that maps *all* possible numbers to names:\r\n```\r\n# tfvars.terraform\r\nall_names_by_number = {\r\n  \"1\" = \"alex\",\r\n  \"3\" = \"james\",\r\n  \"5\" = \"ann\",\r\n  \"8\" = \"paul\",\r\n}\r\n```\r\n\r\n```\r\n# main.tf\r\nlocals {\r\n  # active_names_by_number is a map as well\r\n  # but it's a subset of all_names_by_number\r\n  # all_names_by_number = {\r\n  # \"3\" = \"james\",\r\n  # \"5\" = \"ann\",\r\n  # }\r\n  active_names_by_number = people_resource.example.active_names_map\r\n}\r\n\r\n# Resource that depedns on active_names_by_number\r\nresource \"foo\" \"active_items\" {\r\n  for_each = local.active_names_by_number\r\n\r\n  name                = \"abc-${each.key}\"\r\n  location            = var.location\r\n\r\n  sub_id = data.zoo.sub[each.key].id\r\n\r\n  bar {\r\n    bar_name = each.value\r\n  }\r\n}\r\n```\r\n\r\nWhen I run the terraform configuration above via `terraform plan`, I get:\r\n```\r\nError: Invalid for_each argument\r\n\r\n  on main.tf line 286, in resource \"foo\" \"active_items\":\r\n 286:   for_each = for_each = local.active_names_by_number\r\n\r\nThe \"for_each\" value depends on resource attributes that cannot be determined\r\nuntil apply, so Terraform cannot predict how many instances will be created.\r\nTo work around this, use the -target argument to first apply only the\r\nresources that the for_each depends on.\r\n```\r\n\r\nwhich totally makes sense since `people_resource.example.active_names_map` is *\"initialized\"* in runtime from another resource (response)\r\n```\r\nlocals {\r\n  active_names_by_number = people_resource.example.active_names_map\r\n}\r\n```\r\nbut given the fact that `active_names_by_number` is a subset of `all_names_by_number` (input variable), how can I refactor the terraform configuration to show TF that `local.active_names_by_number` is bounded? I was thinking about using `count` instead of `for_each` as other answers suggest but I do need to use `each.value` in my example (and I can't use `all_names_by_number` to create extra resources.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "266911060", "PostHistoryTypeId": "1", "PostId": "71639917", "RevisionGUID": "ea70f8d0-c683-4a4f-9994-978bbea4ec90", "CreationDate": "2022-03-27T20:08:56.827", "UserId": "17109505", "Text": "How can I for_each\" value depends on resource attributes that cannot be determined until apply", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "266911061", "PostHistoryTypeId": "3", "PostId": "71639917", "RevisionGUID": "ea70f8d0-c683-4a4f-9994-978bbea4ec90", "CreationDate": "2022-03-27T20:08:56.827", "UserId": "17109505", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "266911933", "PostHistoryTypeId": "5", "PostId": "71639917", "RevisionGUID": "97fd0a3f-4666-4429-9854-d070b68bc5ee", "CreationDate": "2022-03-27T20:32:12.843", "UserId": "17109505", "Comment": "added 380 characters in body", "Text": "Context: I'm aware of the similar questions:\r\n* https://stackoverflow.com/questions/63768921/the-for-each-value-depends-on-resource-attributes-that-cannot-be-determined-t\r\n* https://stackoverflow.com/questions/70643719/for-each-value-depends-on-resource-attributes-that-cannot-be-determined-until-ap\r\n\r\nbut I think mine is a bit different and it might be fixed by refactoring TF code since there's an additional input restriction.\r\n\r\nMy original example is very long so I came up with a minimum viable example instead:\r\n\r\nI've got an input variable of type `map` that maps *all* possible numbers to names:\r\n```\r\n# tfvars.terraform\r\nall_names_by_number = {\r\n  \"1\" = \"alex\",\r\n  \"3\" = \"james\",\r\n  \"5\" = \"ann\",\r\n  \"8\" = \"paul\",\r\n}\r\n```\r\n\r\n```\r\n# main.tf\r\nlocals {\r\n  # active_names_by_number is a map as well\r\n  # but it's a subset of all_names_by_number\r\n  # all_names_by_number = {\r\n  # \"3\" = \"james\",\r\n  # \"5\" = \"ann\",\r\n  # }\r\n  active_names_by_number = people_resource.example.active_names_map\r\n}\r\n\r\n# Resource that depedns on active_names_by_number\r\nresource \"foo\" \"active_items\" {\r\n  for_each = local.active_names_by_number\r\n\r\n  name                = \"abc-${each.key}\"\r\n  location            = var.location\r\n\r\n  sub_id = data.zoo.sub[each.key].id\r\n\r\n  bar {\r\n    bar_name = each.value\r\n  }\r\n}\r\n```\r\n\r\nWhen I run the terraform configuration above via `terraform plan`, I get:\r\n```\r\nError: Invalid for_each argument\r\n\r\n  on main.tf line 286, in resource \"foo\" \"active_items\":\r\n 286:   for_each = for_each = local.active_names_by_number\r\n\r\nThe \"for_each\" value depends on resource attributes that cannot be determined\r\nuntil apply, so Terraform cannot predict how many instances will be created.\r\nTo work around this, use the -target argument to first apply only the\r\nresources that the for_each depends on.\r\n```\r\n\r\nwhich totally makes sense since `people_resource.example.active_names_map` is *\"initialized\"* in runtime from another resource (response)\r\n```\r\nlocals {\r\n  active_names_by_number = people_resource.example.active_names_map\r\n}\r\n```\r\nbut given the fact that `active_names_by_number` is a subset of `all_names_by_number` (input variable), how can I refactor the terraform configuration to show TF that `local.active_names_by_number` is bounded?\r\n\r\nMy ideas so far:\r\n1. Use `count` instead of `for_each` as other answers suggest but I do need to use `each.value` in my example (and I can't use `all_names_by_number` to create extra resources.\r\n2. Get rid of `local.active_names_by_number` and use `var.all_names_by_number` instead -- the major downside is TF will create extra resources which is pretty expensive.\r\n3. Somehow write a nested `for` loop:\r\n```\r\n# pseudocode\r\nfor name in var.all_names_by_number:\r\n   if name is in people_resource.example.active_names_map:\r\n      # create an instance of foo.active_item\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "2. Get rid of `local.active_names_by_number` and use `var.all_names_by_number` instead -- the major downside is TF will create extra resources which is pretty expensive. ", "keywords": ["expense"]}, {"source": "Text", "text": "3. Somehow write a nested `for` loop: ``` # pseudocode for name in var.all_names_by_number: if name is in people_resource.example.active_names_map: # create an instance of foo.active_item ```", "keywords": ["instance"]}]}, {"Id": "266912996", "PostHistoryTypeId": "4", "PostId": "71639917", "RevisionGUID": "cc114148-e2e4-4b9e-b3b7-82c2400f5a14", "CreationDate": "2022-03-27T21:01:23.500", "UserId": "17109505", "Comment": "edited title", "Text": "How can I fix for_each\" value depends on resource attributes that cannot be determined until apply", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "73740813", "PostTypeId": "2", "ParentId": "71639917", "CreationDate": "2022-09-16T06:36:00.980", "Score": "0", "Body": "<p>I also faced the same issue, so I followed the method of splitting it into two modules which @Alex Kuzminov suggested. Thanks for that.</p>\n<p>So Instead of using <code>for_each</code>, use count and along with that use <code>try</code> block.</p>\n<pre><code>locals {\n  active_names_by_number = try(people_resource.example.active_names_map, tolist([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]))\n}\n</code></pre>\n<p>So initial exception will be resolved while terraform apply, then while actual resource running, it will replace with the actual content instead of a,b,c,d.</p>\n<p>I hope this helps. Thanks.</p>\n", "OwnerUserId": "20009826", "LastEditorUserId": "14393739", "LastEditDate": "2022-09-26T05:43:38.343", "LastActivityDate": "2022-09-26T05:43:38.343", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "278331176", "PostHistoryTypeId": "2", "PostId": "73740813", "RevisionGUID": "59bfc79d-a297-44fe-b0ab-99fa99c55525", "CreationDate": "2022-09-16T06:36:00.980", "UserId": "20009826", "Text": "I also faced the same issue, so I followed the method of splitting it into two modules which @Alex Kuzminov suggested. Thanks for that.\r\n\r\nSo Instead of using for_each, use count and along with that use try block. \r\n\r\n\r\nlocals {\r\n  active_names_by_number = try(people_resource.example.active_names_map, tolist([\"a\", \"b\", \"c\", \"d\"]))\r\n}\r\n\r\nSo initial exception with be resolved while terraform apply, then while actual resource running, it will replace with the actual content instead of a,b,c,d.\r\n\r\nhope it helps. thanks.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "278929705", "PostHistoryTypeId": "5", "PostId": "73740813", "RevisionGUID": "cb151876-d3a4-47fc-aa46-4e6c9c611cec", "CreationDate": "2022-09-26T05:43:38.343", "UserId": "16217248", "Comment": "Formatting", "Text": "I also faced the same issue, so I followed the method of splitting it into two modules which @Alex Kuzminov suggested. Thanks for that.\r\n\r\nSo Instead of using `for_each`, use count and along with that use `try` block. \r\n```\r\nlocals {\r\n  active_names_by_number = try(people_resource.example.active_names_map, tolist([\"a\", \"b\", \"c\", \"d\"]))\r\n}\r\n```\r\nSo initial exception with be resolved while terraform apply, then while actual resource running, it will replace with the actual content instead of a,b,c,d.\r\n\r\nI hope this helps. Thanks.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "278929706", "PostHistoryTypeId": "24", "PostId": "73740813", "RevisionGUID": "cb151876-d3a4-47fc-aa46-4e6c9c611cec", "CreationDate": "2022-09-26T05:43:38.343", "Comment": "Proposed by 16217248 approved by -1 edit id of 5421568", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "278929707", "PostHistoryTypeId": "5", "PostId": "73740813", "RevisionGUID": "98ed50d0-859d-4c0e-a7f9-d4836350abbd", "CreationDate": "2022-09-26T05:43:38.343", "UserId": "14393739", "Comment": "Formatting", "Text": "I also faced the same issue, so I followed the method of splitting it into two modules which @Alex Kuzminov suggested. Thanks for that.\r\n\r\nSo Instead of using `for_each`, use count and along with that use `try` block. \r\n```\r\nlocals {\r\n  active_names_by_number = try(people_resource.example.active_names_map, tolist([\"a\", \"b\", \"c\", \"d\"]))\r\n}\r\n```\r\nSo initial exception will be resolved while terraform apply, then while actual resource running, it will replace with the actual content instead of a,b,c,d.\r\n\r\nI hope this helps. Thanks.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Get rid of local.active_names_by_number and use var.all_names_by_number instead -- the major downside is TF will create extra resources which is pretty expensive. ", "keywords": ["expense"]}]}