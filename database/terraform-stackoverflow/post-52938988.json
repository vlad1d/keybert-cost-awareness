{"Id": "52938988", "PostTypeId": "1", "CreationDate": "2018-10-22T23:22:05.113", "Score": "0", "ViewCount": "1074", "Body": "<p>I'm exploring Terraform as a tool to manage reusable groups of AWS EC2 instances. I'm not very familiar with infrastructure tooling and looking for advice on what to do in this usecase. </p>\n\n<ol>\n<li><p>I want to repeatedly create multiple EC2 instances - say the first time I call <code>terraform apply</code> my infrastructure needs 3 instances. After a while I want to create 100 instances - maybe without destroying the 3 instances I created earlier. How do I do this in Terraform? Should I even be doing it?\nIf I should not use Terraform to repeat provisioning, what is a good tool that can do this?</p></li>\n<li><p>What are some tools that allow for remote execution of bash or Python scripts on the created Terraform infrastructure? I know Terraform has <code>remote-exec</code> but the commands I need to run on these instances take a long time to run (3-5 hours) and I'd rather not have resources in that state where they're still initializing because I can't monitor them. </p></li>\n</ol>\n", "OwnerUserId": "1219003", "LastActivityDate": "2018-10-28T20:13:00.613", "Title": "Repeat infrastructure creation with Terraform", "Tags": "<terraform><terraform-provider-aws>", "AnswerCount": "2", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "92787081", "PostId": "52938988", "Score": "0", "Text": "The long running tasks, are they to bootstrap the instance or are these long running jobs?", "CreationDate": "2018-10-22T23:34:03.083", "UserId": "1218285", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The long running tasks, are they to bootstrap the instance or are these long running jobs?", "keywords": ["instance"]}]}, {"Id": "92787572", "PostId": "52938988", "Score": "0", "Text": "They're to bootstrap the instance - need to download and install some software to crunch data.", "CreationDate": "2018-10-23T00:12:50.333", "UserId": "1219003", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "They're to bootstrap the instance - need to download and install some software to crunch data.", "keywords": ["instance"]}]}], "history": [{"Id": "184303859", "PostHistoryTypeId": "2", "PostId": "52938988", "RevisionGUID": "b2042128-3eae-4f2f-8f2c-24a726081b8e", "CreationDate": "2018-10-22T23:22:05.113", "UserId": "1219003", "Text": "I'm exploring Terraform as a tool to manage reusable groups of AWS EC2 instances. I'm not very familiar with infrastructure tooling and looking for advice on what to do in this usecase. \r\n\r\n1. I want to repeatedly create multiple EC2 instances - say the first time I call `terraform apply` my infrastructure needs 3 instances. After a while I want to create 100 instances - maybe without destroying the 3 instances I created earlier. How do I do this in Terraform? Should I even be doing it?\r\nIf I should not use Terraform to repeat provisioning, what is a good tool that can do this?\r\n\r\n2. What are some tools that allow for remote execution of bash or Python scripts on the created Terraform infrastructure? I know Terraform has `remote-exec` but the commands I need to run on these instances take a long time to run (3-5 hours) and I'd rather not have resources in that state where they're still initializing because I can't monitor them. \r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "184303860", "PostHistoryTypeId": "1", "PostId": "52938988", "RevisionGUID": "b2042128-3eae-4f2f-8f2c-24a726081b8e", "CreationDate": "2018-10-22T23:22:05.113", "UserId": "1219003", "Text": "Repeat infrastructure creation with Terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "184303861", "PostHistoryTypeId": "3", "PostId": "52938988", "RevisionGUID": "b2042128-3eae-4f2f-8f2c-24a726081b8e", "CreationDate": "2018-10-22T23:22:05.113", "UserId": "1219003", "Text": "<terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "52942968", "PostTypeId": "2", "ParentId": "52938988", "CreationDate": "2018-10-23T07:00:12.013", "Score": "0", "Body": "<p>This is very much use case of terraform and It would be good if you will do it via terraform. </p>\n\n<p>You can follow below code which you can use to spin up instance as many as you want, you have to apply again after you change <a href=\"https://www.terraform.io/docs/configuration/interpolation.html\" rel=\"nofollow noreferrer\">count</a> value. it won't affect any currently running instances and match your value. </p>\n\n<pre><code>resource \"aws_instance\" \"web\" {\n  ami           = \"${data.aws_ami.ubuntu.id}\"\n  instance_type = \"t2.micro\"\n  count = 3\n  availability_zone = \"${element(var.az, count.index)}\"\n\n  tags {\n    Name = \"${count.index}\"\n  }\n}\n</code></pre>\n\n<p>Also, If you wanted to execute some command at the time of instance boot up. You may use the user-data script to do that.</p>\n\n<pre><code>resource \"aws_instance\" \"...\" {\n  user_data = \"${file(\"../../tmp/aws/userdata.sh\")}\"\n  ...\n}\n</code></pre>\n\n<p>For repeatability, You can use terraform module. For example: If you wanted to use the code for multiple infra say dev, staging, production. In the case of modules, you don't have to write the same code, again and again, to spin up ec2 instance. You can pass the different variable for different infrastructure. </p>\n\n<p>Example: </p>\n\n<pre><code>module \"dev\" {\n  source = \"./modules/dev\"\n  count  = 2\n  region = \"us-east-1\"\n}\n\nmodule \"production\" {\n  source = \"./modules/production\"\n  count  = 5\n  region = \"us-east-1\"\n}\n</code></pre>\n\n<p>Ref: <a href=\"https://www.terraform.io/docs/modules/usage.html\" rel=\"nofollow noreferrer\">https://www.terraform.io/docs/modules/usage.html</a></p>\n\n<p>If you don't have to delete old instances and decrease the size of your number of running instances. That is not what terraform will take care off. \nYou have to mention that strategy while creating your auto-scaling policy. </p>\n\n<p>There are many termination policies listed below.</p>\n\n<p>Amazon EC2 Auto Scaling supports the following custom termination policies:</p>\n\n<pre><code>OldestInstance. Terminate the oldest instance in the group. This option is useful when you're upgrading the instances in the Auto Scaling group to a new EC2 instance type. You can gradually replace instances of the old type with instances of the new type.\n\nNewestInstance. Terminate the newest instance in the group. This policy is useful when you're testing a new launch configuration but don't want to keep it in production.\n\nOldestLaunchConfiguration. Terminate instances that have the oldest launch configuration. This policy is useful when you're updating a group and phasing out the instances from a previous configuration.\n\nClosestToNextInstanceHour. Terminate instances that are closest to the next billing hour. This policy helps you maximize the use of your instances and manage your Amazon EC2 usage costs.\n\nDefault. Terminate instances according to the default termination policy. This policy is useful when you have more than one scaling policy for the group.\n</code></pre>\n\n<p>You may refer below link for more information.</p>\n\n<blockquote>\n  <p>Ref:\n  <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html</a></p>\n</blockquote>\n", "OwnerUserId": "2779323", "LastEditorUserId": "2779323", "LastEditDate": "2018-10-28T20:13:00.613", "LastActivityDate": "2018-10-28T20:13:00.613", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "92819562", "PostId": "52942968", "Score": "0", "Text": "This does not answer my question about repeatably deploying infrastructure with a different count without destroying previous instances (unless explicitly called for).", "CreationDate": "2018-10-23T18:54:00.120", "UserId": "1219003", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "92964631", "PostId": "52942968", "Score": "0", "Text": "You have to use terraform modules if you want to achieve the same scenario for multiple infrastructures.", "CreationDate": "2018-10-28T13:39:42.673", "UserId": "2779323", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "184320314", "PostHistoryTypeId": "2", "PostId": "52942968", "RevisionGUID": "1cf90c0a-9d3b-40cc-bf1d-e67ac1ac3d7c", "CreationDate": "2018-10-23T07:00:12.013", "UserId": "2779323", "Text": "This is very much use case of terraform and It would be good if you will do it via terraform. \r\n\r\nYou can follow below code which you can use to spin up instance as many as you want, you have to apply again after you change [count][1] value. it won't affect any currently running instances and match your value. \r\n\r\n    resource \"aws_instance\" \"web\" {\r\n      ami           = \"${data.aws_ami.ubuntu.id}\"\r\n      instance_type = \"t2.micro\"\r\n      count = 3\r\n      availability_zone = \"${element(var.az, count.index)}\"\r\n    \r\n      tags {\r\n        Name = \"${count.index}\"\r\n      }\r\n    }\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/configuration/interpolation.html\r\n\r\nAlso, If you wanted to execute some command at the time of instance boot up. You may use the user-data script to do that.\r\n\r\n    resource \"aws_instance\" \"...\" {\r\n      user_data = \"${file(\"../../tmp/aws/userdata.sh\")}\"\r\n      ...\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can follow below code which you can use to spin up instance as many as you want, you have to apply again after you change [count][1] value. it won't affect any currently running instances and match your value. resource \"aws_instance\" \"web\" { ami = \"${data.aws_ami.ubuntu.id}\" instance_type = \"t2.micro\" count = 3 availability_zone = \"${element(var.az, count.index)}\" tags { Name = \"${count.index}\" } } [1]: https://www.terraform.io/docs/configuration/interpolation.html Also, If you wanted to execute some command at the time of instance boot up", "keywords": ["instance", "change"]}]}, {"Id": "184686680", "PostHistoryTypeId": "5", "PostId": "52942968", "RevisionGUID": "dcc28be6-865f-463a-9d76-aaef15d1d568", "CreationDate": "2018-10-28T13:44:25.107", "UserId": "2779323", "Comment": "Added more information about the terraform modules for the first part of the question.", "Text": "This is very much use case of terraform and It would be good if you will do it via terraform. \r\n\r\nYou can follow below code which you can use to spin up instance as many as you want, you have to apply again after you change [count][1] value. it won't affect any currently running instances and match your value. \r\n\r\n    resource \"aws_instance\" \"web\" {\r\n      ami           = \"${data.aws_ami.ubuntu.id}\"\r\n      instance_type = \"t2.micro\"\r\n      count = 3\r\n      availability_zone = \"${element(var.az, count.index)}\"\r\n    \r\n      tags {\r\n        Name = \"${count.index}\"\r\n      }\r\n    }\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/configuration/interpolation.html\r\n\r\nAlso, If you wanted to execute some command at the time of instance boot up. You may use the user-data script to do that.\r\n\r\n    resource \"aws_instance\" \"...\" {\r\n      user_data = \"${file(\"../../tmp/aws/userdata.sh\")}\"\r\n      ...\r\n    }\r\n\r\nFor repeatability, You can use terraform module. For example: If you wanted to use the code for multiple infra say dev, staging, production. In the case of modules, you don't have to write the same code, again and again, to spin up ec2 instance. You can pass the different variable for different infrastructure. \r\n\r\nExample: \r\n\r\n    module \"dev\" {\r\n      source = \"./modules/dev\"\r\n      count  = 2\r\n      region = \"us-east-1\"\r\n    }\r\n\r\n    module \"production\" {\r\n      source = \"./modules/production\"\r\n      count  = 5\r\n      region = \"us-east-1\"\r\n    }\r\n\r\nRef: https://www.terraform.io/docs/modules/usage.html\r\n\r\nIf you don't have to delete old instances and decrease the size of your number of running instances. That is not what terraform will take care off. \r\nYou have to mention that policy while creating your auto-scaling policy. \r\n\r\nThere are many termination policies listed below.\r\n\r\nAmazon EC2 Auto Scaling supports the following custom termination policies:\r\n\r\n    OldestInstance. Terminate the oldest instance in the group. This option is useful when you're upgrading the instances in the Auto Scaling group to a new EC2 instance type. You can gradually replace instances of the old type with instances of the new type.\r\n    \r\n    NewestInstance. Terminate the newest instance in the group. This policy is useful when you're testing a new launch configuration but don't want to keep it in production.\r\n    \r\n    OldestLaunchConfiguration. Terminate instances that have the oldest launch configuration. This policy is useful when you're updating a group and phasing out the instances from a previous configuration.\r\n    \r\n    ClosestToNextInstanceHour. Terminate instances that are closest to the next billing hour. This policy helps you maximize the use of your instances and manage your Amazon EC2 usage costs.\r\n    \r\n    Default. Terminate instances according to the default termination policy. This policy is useful when you have more than one scaling policy for the group.\r\n\r\nYou may refer below link for more information.\r\n\r\n> Ref:\r\n> https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can follow below code which you can use to spin up instance as many as you want, you have to apply again after you change [count][1] value. it won't affect any currently running instances and match your value. resource \"aws_instance\" \"web\" { ami = \"${data.aws_ami.ubuntu.id}\" instance_type = \"t2.micro\" count = 3 availability_zone = \"${element(var.az, count.index)}\" tags { Name = \"${count.index}\" } } [1]: https://www.terraform.io/docs/configuration/interpolation.html Also, If you wanted to execute some command at the time of instance boot up. ", "keywords": ["instance", "change"]}, {"source": "Text", "text": "In the case of modules, you don't have to write the same code, again and again, to spin up ec2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You have to mention that policy while creating your auto-scaling policy. ", "keywords": ["policy"]}, {"source": "Text", "text": "Terminate the oldest instance in the group. ", "keywords": ["instance"]}, {"source": "Text", "text": "This option is useful when you're upgrading the instances in the Auto Scaling group to a new EC2 instance type. ", "keywords": ["instance"]}, {"source": "Text", "text": "Terminate the newest instance in the group. ", "keywords": ["instance"]}, {"source": "Text", "text": "This policy is useful when you're testing a new launch configuration but don't want to keep it in production. ", "keywords": ["policy", "test"]}, {"source": "Text", "text": "This policy is useful when you're updating a group and phasing out the instances from a previous configuration. ", "keywords": ["policy"]}, {"source": "Text", "text": "Terminate instances that are closest to the next billing hour. ", "keywords": ["bill"]}, {"source": "Text", "text": "This policy helps you maximize the use of your instances and manage your Amazon EC2 usage costs. ", "keywords": ["policy"]}, {"source": "Text", "text": "Terminate instances according to the default termination policy. ", "keywords": ["policy"]}, {"source": "Text", "text": "This policy is useful when you have more than one scaling policy for the group. ", "keywords": ["policy"]}, {"source": "Text", "text": "> Ref: > https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html", "keywords": ["instance"]}]}, {"Id": "184701525", "PostHistoryTypeId": "5", "PostId": "52942968", "RevisionGUID": "0299c75e-9b3f-4c0f-ba99-4ec22e747330", "CreationDate": "2018-10-28T20:13:00.613", "UserId": "2779323", "Comment": "added 2 characters in body", "Text": "This is very much use case of terraform and It would be good if you will do it via terraform. \r\n\r\nYou can follow below code which you can use to spin up instance as many as you want, you have to apply again after you change [count][1] value. it won't affect any currently running instances and match your value. \r\n\r\n    resource \"aws_instance\" \"web\" {\r\n      ami           = \"${data.aws_ami.ubuntu.id}\"\r\n      instance_type = \"t2.micro\"\r\n      count = 3\r\n      availability_zone = \"${element(var.az, count.index)}\"\r\n    \r\n      tags {\r\n        Name = \"${count.index}\"\r\n      }\r\n    }\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/configuration/interpolation.html\r\n\r\nAlso, If you wanted to execute some command at the time of instance boot up. You may use the user-data script to do that.\r\n\r\n    resource \"aws_instance\" \"...\" {\r\n      user_data = \"${file(\"../../tmp/aws/userdata.sh\")}\"\r\n      ...\r\n    }\r\n\r\nFor repeatability, You can use terraform module. For example: If you wanted to use the code for multiple infra say dev, staging, production. In the case of modules, you don't have to write the same code, again and again, to spin up ec2 instance. You can pass the different variable for different infrastructure. \r\n\r\nExample: \r\n\r\n    module \"dev\" {\r\n      source = \"./modules/dev\"\r\n      count  = 2\r\n      region = \"us-east-1\"\r\n    }\r\n\r\n    module \"production\" {\r\n      source = \"./modules/production\"\r\n      count  = 5\r\n      region = \"us-east-1\"\r\n    }\r\n\r\nRef: https://www.terraform.io/docs/modules/usage.html\r\n\r\nIf you don't have to delete old instances and decrease the size of your number of running instances. That is not what terraform will take care off. \r\nYou have to mention that strategy while creating your auto-scaling policy. \r\n\r\nThere are many termination policies listed below.\r\n\r\nAmazon EC2 Auto Scaling supports the following custom termination policies:\r\n\r\n    OldestInstance. Terminate the oldest instance in the group. This option is useful when you're upgrading the instances in the Auto Scaling group to a new EC2 instance type. You can gradually replace instances of the old type with instances of the new type.\r\n    \r\n    NewestInstance. Terminate the newest instance in the group. This policy is useful when you're testing a new launch configuration but don't want to keep it in production.\r\n    \r\n    OldestLaunchConfiguration. Terminate instances that have the oldest launch configuration. This policy is useful when you're updating a group and phasing out the instances from a previous configuration.\r\n    \r\n    ClosestToNextInstanceHour. Terminate instances that are closest to the next billing hour. This policy helps you maximize the use of your instances and manage your Amazon EC2 usage costs.\r\n    \r\n    Default. Terminate instances according to the default termination policy. This policy is useful when you have more than one scaling policy for the group.\r\n\r\nYou may refer below link for more information.\r\n\r\n> Ref:\r\n> https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can follow below code which you can use to spin up instance as many as you want, you have to apply again after you change [count][1] value. it won't affect any currently running instances and match your value. resource \"aws_instance\" \"web\" { ami = \"${data.aws_ami.ubuntu.id}\" instance_type = \"t2.micro\" count = 3 availability_zone = \"${element(var.az, count.index)}\" tags { Name = \"${count.index}\" } } [1]: https://www.terraform.io/docs/configuration/interpolation.html Also, If you wanted to execute some command at the time of instance boot up. ", "keywords": ["instance", "change"]}, {"source": "Text", "text": "In the case of modules, you don't have to write the same code, again and again, to spin up ec2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You have to mention that strategy while creating your auto-scaling policy. ", "keywords": ["policy"]}, {"source": "Text", "text": "Terminate the oldest instance in the group. ", "keywords": ["instance"]}, {"source": "Text", "text": "This option is useful when you're upgrading the instances in the Auto Scaling group to a new EC2 instance type. ", "keywords": ["instance"]}, {"source": "Text", "text": "Terminate the newest instance in the group. ", "keywords": ["instance"]}, {"source": "Text", "text": "This policy is useful when you're testing a new launch configuration but don't want to keep it in production. ", "keywords": ["policy", "test"]}, {"source": "Text", "text": "This policy is useful when you're updating a group and phasing out the instances from a previous configuration. ", "keywords": ["policy"]}, {"source": "Text", "text": "Terminate instances that are closest to the next billing hour. ", "keywords": ["bill"]}, {"source": "Text", "text": "This policy helps you maximize the use of your instances and manage your Amazon EC2 usage costs. ", "keywords": ["policy"]}, {"source": "Text", "text": "Terminate instances according to the default termination policy. ", "keywords": ["policy"]}, {"source": "Text", "text": "This policy is useful when you have more than one scaling policy for the group. ", "keywords": ["policy"]}, {"source": "Text", "text": "> Ref: > https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can follow below code which you can use to spin up instance as many as you want, you have to apply again after you change count value. ", "keywords": ["instance", "change"]}, {"source": "Body", "text": "Also, If you wanted to execute some command at the time of instance boot up. ", "keywords": ["instance"]}, {"source": "Body", "text": "In the case of modules, you don't have to write the same code, again and again, to spin up ec2 instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "You have to mention that strategy while creating your auto-scaling policy. ", "keywords": ["policy"]}, {"source": "Body", "text": "Ref: https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html", "keywords": ["instance"]}]}, {"Id": "52940365", "PostTypeId": "2", "ParentId": "52938988", "CreationDate": "2018-10-23T02:36:11.163", "Score": "0", "Body": "<p>Custom AMI with pre-installed software will help you reduce boot-time. Hashicorp packer <a href=\"https://www.packer.io/intro/\" rel=\"nofollow noreferrer\">https://www.packer.io/intro/</a> is good tool to create AMI.</p>\n\n<ol>\n<li>Create one ec2-instance using terraform.</li>\n<li>Either user-data script or run remote-exec to run script which installs required packages/softwares.</li>\n<li>Create an AMI from the above ec2-instance. </li>\n<li>Launch as many ec2-instances as you need to using newly created AMI.  </li>\n</ol>\n\n<p>By Ansible also offers very good features to manage infrastructure as code.</p>\n", "OwnerUserId": "5009799", "LastActivityDate": "2018-10-23T02:36:11.163", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "92791301", "PostId": "52940365", "Score": "0", "Text": "This is what I'm doing right now (without Packer though, I already made the AMI). However - the setup step is different for each instance - it takes a certain set of variables and then downloads some data based on those. So that is one custom step that I can't put in the AMI. Besides that I bootstrap the instance with directory creation & configurations through remote-exec.", "CreationDate": "2018-10-23T04:57:49.803", "UserId": "1219003", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "However - the setup step is different for each instance - it takes a certain set of variables and then downloads some data based on those. ", "keywords": ["instance"]}, {"source": "Text", "text": "Besides that I bootstrap the instance with directory creation & configurations through remote-exec.", "keywords": ["instance"]}]}], "history": [{"Id": "184309616", "PostHistoryTypeId": "2", "PostId": "52940365", "RevisionGUID": "46a40fc9-6a5a-48eb-abec-4e4a1cd392da", "CreationDate": "2018-10-23T02:36:11.163", "UserId": "5009799", "Text": "Custom AMI with pre-installed software will help you reduce boot-time. Hashicorp packer https://www.packer.io/intro/ is good tool to create AMI.\r\n\r\n\r\n1. Create one ec2-instance using terraform.\r\n2. Either user-data script or run remote-exec to run script which installs required packages/softwares.\r\n3. Create an AMI from the above ec2-instance. \r\n4. Launch as many ec2-instances as you need to using newly created AMI.  \r\n\r\n\r\nBy Ansible also offers very good features to manage infrastructure as code.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "1. Create one ec2-instance using terraform. ", "keywords": ["instance"]}, {"source": "Text", "text": "3. Create an AMI from the above ec2-instance. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Create one ec2-instance using terraform. ", "keywords": ["instance"]}, {"source": "Body", "text": "Create an AMI from the above ec2-instance. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": []}