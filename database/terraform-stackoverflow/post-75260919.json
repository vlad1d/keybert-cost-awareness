{"Id": "75260919", "PostTypeId": "1", "AcceptedAnswerId": "75261418", "CreationDate": "2023-01-27T16:37:59.273", "Score": "1", "ViewCount": "141", "Body": "<p>I am fairly new to terraform. I am trying to understand what is the right way to spin up resources using terraform. I have come across two different ways to do it.</p>\n<ol>\n<li>Using terraform modules from terraform registry:</li>\n</ol>\n<pre><code>module &quot;vpc&quot; {\n  source  = &quot;terraform-google-modules/network/google&quot;\n  version = &quot;~&gt; 6.0&quot;\n\n  project_id                             = var.project_id\n  network_name                           = var.network_name\n  routing_mode                           = var.routing_mode\n  auto_create_subnetworks                = var.auto_create_subnetworks\n  delete_default_internet_gateway_routes = var.delete_default_internet_gateway_routes\n  mtu                                    = var.mtu\n\n  subnets        = var.subnets\n  firewall_rules = var.firewall_rules\n}\n</code></pre>\n<ol start=\"2\">\n<li>Using resources</li>\n</ol>\n<pre><code>resource &quot;google_compute_network&quot; &quot;network&quot; {\n  name                            = var.network_name\n  auto_create_subnetworks         = var.auto_create_subnetworks\n  routing_mode                    = var.routing_mode\n  project                         = var.project_id\n  delete_default_routes_on_create = var.delete_default_internet_gateway_routes\n  mtu                             = var.mtu\n}\n</code></pre>\n<p>Both these approaches work fine and they give me desired output but I would like to know which one should be used when? When should I use Terraform Module directly and when should I use resource?</p>\n", "OwnerUserId": "395255", "LastActivityDate": "2023-01-27T17:45:50.077", "Title": "When to use Terraform Modules from terraform registry and when to use resource", "Tags": "<terraform><terraform-provider-gcp>", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132805412", "PostId": "75260919", "Score": "0", "Text": "It depends. In some organizations it is not acceptable to use external modules. In some that is fine. Modules are usually a set of logically grouped infrastructure elements. If you have that kind of a requirement, you can write your own. If you don't have a lot of infrastructure, it might be even better to use resources than modules.", "CreationDate": "2023-01-27T16:48:20.290", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "286957913", "PostHistoryTypeId": "2", "PostId": "75260919", "RevisionGUID": "45ab1296-dca6-4af1-af21-8c9ae1828423", "CreationDate": "2023-01-27T16:37:59.273", "UserId": "395255", "Text": "I am fairly new to terraform. I am trying to understand what is the right way to spin up resources using terraform. I have come across two different ways to do it.\r\n\r\n1) Using terraform modules from terraform registry:\r\n\r\n```\r\nmodule \"vpc\" {\r\n  source  = \"terraform-google-modules/network/google\"\r\n  version = \"~> 6.0\"\r\n\r\n  project_id                             = var.project_id\r\n  network_name                           = var.network_name\r\n  routing_mode                           = var.routing_mode\r\n  auto_create_subnetworks                = var.auto_create_subnetworks\r\n  delete_default_internet_gateway_routes = var.delete_default_internet_gateway_routes\r\n  mtu                                    = var.mtu\r\n\r\n  subnets        = var.subnets\r\n  firewall_rules = var.firewall_rules\r\n}\r\n```\r\n2. Using resources\r\n\r\n```\r\nresource \"google_compute_network\" \"network\" {\r\n  name                            = var.network_name\r\n  auto_create_subnetworks         = var.auto_create_subnetworks\r\n  routing_mode                    = var.routing_mode\r\n  project                         = var.project_id\r\n  delete_default_routes_on_create = var.delete_default_internet_gateway_routes\r\n  mtu                             = var.mtu\r\n}\r\n```\r\nBoth these approaches work fine and they give me desired output but I would like to know which one should be used when? When should I use Terraform Module directly and when should I use resource?\r\n\r\n\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "286957915", "PostHistoryTypeId": "1", "PostId": "75260919", "RevisionGUID": "45ab1296-dca6-4af1-af21-8c9ae1828423", "CreationDate": "2023-01-27T16:37:59.273", "UserId": "395255", "Text": "When to use Terraform Modules from terraform registry and when to use resource", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "286957916", "PostHistoryTypeId": "3", "PostId": "75260919", "RevisionGUID": "45ab1296-dca6-4af1-af21-8c9ae1828423", "CreationDate": "2023-01-27T16:37:59.273", "UserId": "395255", "Text": "<terraform><terraform-provider-gcp>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "75261418", "PostTypeId": "2", "ParentId": "75260919", "CreationDate": "2023-01-27T17:26:09.600", "Score": "3", "Body": "<p>As you may read in the documentation, <a href=\"https://developer.hashicorp.com/terraform/language/modules\" rel=\"nofollow noreferrer\">modules</a> are a way of organising Terraform scripts, it makes them more reusable, sharable and publishable.</p>\n<p>In general, when working with Terraform you want to have an infrastructure that's portable and that can be transferred and deployed on multiple environments.</p>\n<p>It would have been harder to maintain a complex infrastructure where you only use resources that will be sitting in the same codebase.</p>\n<p><code>modules</code> allows you to group one, to multiple <code>resources</code>, so you can break your infrastructure code to reusable and configurable portions of code, where you can enforce certain defaults. These modules can be used in the main infrastructure codebase making it easily readable and maintainable since it abstracts the details of each part of the infrastructure.</p>\n<p>And with this abstraction, you can afford using different patterns to deploy your infrastructure on different environments (example: 'dev', 'staging', and 'prod') since you may only pass different (and less) values for your variables, or your can just duplicate your infrastructure folder (dev-infra) for example to create another (stg-infra), the cost of this code duplication is cheaper than duplicating many files in case of using only ressources.</p>\n<p>TLDR; as you shared in your example:</p>\n<pre><code>module &quot;vpc&quot; {\n  source  = &quot;terraform-google-modules/network/google&quot;\n  version = &quot;~&gt; 6.0&quot;\n\n  project_id                             = var.project_id\n  network_name                           = var.network_name\n  routing_mode                           = var.routing_mode\n  auto_create_subnetworks                = var.auto_create_subnetworks\n  delete_default_internet_gateway_routes = var.delete_default_internet_gateway_routes\n  mtu                                    = var.mtu\n\n  subnets        = var.subnets\n  firewall_rules = var.firewall_rules\n}\n</code></pre>\n<p>Does more than creating the VPC on GCP. As you can see in their <a href=\"https://github.com/terraform-google-modules/terraform-google-network\" rel=\"nofollow noreferrer\">source-code</a>, it is composed on <a href=\"https://github.com/terraform-google-modules/terraform-google-network/tree/master/modules\" rel=\"nofollow noreferrer\"><strong>many other modules</strong></a>, in which they use the <code>google_compute_network</code> resources along others to setup networks, firewall rules, subnets and more.</p>\n<p>You may have a very complex VPC network that can be done only by using the module that abstracts the usage of the resources. That same VPC setup might be re-used for other GCP projects for different environments. Or you can even build a module on top of this if you want to enforce some configurations, like you hardcode <code>auto_create_subnetworks = true</code>.</p>\n<p>In some organisations, it is recommended to use only the organisation's approved terraform module, where they apply certain patterns, and set some defaults/best-practices.</p>\n<p>See more:</p>\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/modules/module#what-are-modules-for\" rel=\"nofollow noreferrer\">https://developer.hashicorp.com/terraform/tutorials/modules/module#what-are-modules-for</a></li>\n<li><a href=\"https://www.terraform-best-practices.com/key-concepts#composition\" rel=\"nofollow noreferrer\">https://www.terraform-best-practices.com/key-concepts#composition</a></li>\n<li><a href=\"https://www.terraform-best-practices.com/examples/terraform\" rel=\"nofollow noreferrer\">https://www.terraform-best-practices.com/examples/terraform</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/language/modules\" rel=\"nofollow noreferrer\">https://developer.hashicorp.com/terraform/language/modules</a></li>\n</ul>\n<p>Hope this helps!</p>\n", "OwnerUserId": "5078746", "LastEditorUserId": "5078746", "LastEditDate": "2023-01-27T17:45:50.077", "LastActivityDate": "2023-01-27T17:45:50.077", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132806952", "PostId": "75261418", "Score": "1", "Text": "Ok. So what I understand from your post is that it is part of the best practice to use modules terraform registry as long as they fit the needs. If full control is required for the behavior of each of the resource or if the terraform registry module combines more resources than have no use in the implementation, create custom module.", "CreationDate": "2023-01-27T18:09:00.313", "UserId": "395255", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "132807248", "PostId": "75261418", "Score": "0", "Text": "yes, that's right!", "CreationDate": "2023-01-27T18:27:40.460", "UserId": "5078746", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "286960766", "PostHistoryTypeId": "2", "PostId": "75261418", "RevisionGUID": "493acf7b-2791-43a9-ba59-671878da69c2", "CreationDate": "2023-01-27T17:26:09.600", "UserId": "5078746", "Text": "As you may read in the documentation, [modules][1] are a way of organising Terraform scripts, it makes them more reusable, sharable and publishable.\r\n\r\nIn general, when working with Terraform you want to have an infrastructure that's portable and that can be transferred and deployed on multiple environments.\r\n\r\nIt would have been harder to maintain a complex infrastructure where you only use resources that will be sitting in the same codebase.\r\n\r\n`modules` allows you to group one, to multiple `resources`, so you can break your infrastructure code to reusable and configurable portions of code, where you can enforce certain defaults. These modules can be used in the main infrastructure codebase making it easily readable and maintainable since it abstracts the details of each part of the infrastructure.\r\n\r\nAnd with this abstraction, you can afford using different patterns to deploy your infrastructure on different environments (example: 'dev', 'staging', and 'prod') since you may only pass different (and less) values for your variables, or your can just duplicate your infrastructure folder (dev-infra) for example to create another (stg-infra), the cost of this code duplication is cheaper than duplicating many files in case of using only ressources.\r\n\r\n\r\nTLDR; as you shared in your example: \r\n\r\n    module \"vpc\" {\r\n      source  = \"terraform-google-modules/network/google\"\r\n      version = \"~> 6.0\"\r\n    \r\n      project_id                             = var.project_id\r\n      network_name                           = var.network_name\r\n      routing_mode                           = var.routing_mode\r\n      auto_create_subnetworks                = var.auto_create_subnetworks\r\n      delete_default_internet_gateway_routes = var.delete_default_internet_gateway_routes\r\n      mtu                                    = var.mtu\r\n    \r\n      subnets        = var.subnets\r\n      firewall_rules = var.firewall_rules\r\n    }\r\n\r\nDoes more than creating the VPC on GCP. As you can see in their [source-code][2], it is composed on [**many other modules**][3], in which they use the `google_compute_network` resources along others to setup networks, firewall rules, subnets and more.\r\n\r\nYou may have a very complex VPC network that can be done only by using the module that abstracts the usage of the resources. That same VPC setup might be re-used for other GCP projects for different environments. Or you can even build a module on top of this if you want to enforce some configurations, like you hardcode `auto_create_subnetworks = true`.\r\n\r\nIn some organisations, it is recommended to use only the organisation's approved terraform module, where they apply certain patterns, and set some defaults/best-practices.\r\n\r\nSee more:\r\n\r\n- https://developer.hashicorp.com/terraform/tutorials/modules/module#what-are-modules-for\r\n- https://www.terraform-best-practices.com/key-concepts#composition.\r\n- https://developer.hashicorp.com/terraform/language/modules\r\n\r\nHope this helps!\r\n\r\n\r\n\r\n  [1]: https://developer.hashicorp.com/terraform/language/modules\r\n  [2]: https://github.com/terraform-google-modules/terraform-google-network\r\n  [3]: https://github.com/terraform-google-modules/terraform-google-network/tree/master/modules", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "And with this abstraction, you can afford using different patterns to deploy your infrastructure on different environments (example: 'dev', 'staging', and 'prod') since you may only pass different (and less) values for your variables, or your can just duplicate your infrastructure folder (dev-infra) for example to create another (stg-infra), the cost of this code duplication is cheaper than duplicating many files in case of using only ressources. ", "keywords": ["cheap", "cost"]}]}, {"Id": "286961933", "PostHistoryTypeId": "5", "PostId": "75261418", "RevisionGUID": "3b29d9ad-de26-49df-b435-d0a6eca14104", "CreationDate": "2023-01-27T17:45:50.077", "UserId": "5078746", "Comment": "added 62 characters in body", "Text": "As you may read in the documentation, [modules][1] are a way of organising Terraform scripts, it makes them more reusable, sharable and publishable.\r\n\r\nIn general, when working with Terraform you want to have an infrastructure that's portable and that can be transferred and deployed on multiple environments.\r\n\r\nIt would have been harder to maintain a complex infrastructure where you only use resources that will be sitting in the same codebase.\r\n\r\n`modules` allows you to group one, to multiple `resources`, so you can break your infrastructure code to reusable and configurable portions of code, where you can enforce certain defaults. These modules can be used in the main infrastructure codebase making it easily readable and maintainable since it abstracts the details of each part of the infrastructure.\r\n\r\nAnd with this abstraction, you can afford using different patterns to deploy your infrastructure on different environments (example: 'dev', 'staging', and 'prod') since you may only pass different (and less) values for your variables, or your can just duplicate your infrastructure folder (dev-infra) for example to create another (stg-infra), the cost of this code duplication is cheaper than duplicating many files in case of using only ressources.\r\n\r\n\r\nTLDR; as you shared in your example: \r\n\r\n    module \"vpc\" {\r\n      source  = \"terraform-google-modules/network/google\"\r\n      version = \"~> 6.0\"\r\n    \r\n      project_id                             = var.project_id\r\n      network_name                           = var.network_name\r\n      routing_mode                           = var.routing_mode\r\n      auto_create_subnetworks                = var.auto_create_subnetworks\r\n      delete_default_internet_gateway_routes = var.delete_default_internet_gateway_routes\r\n      mtu                                    = var.mtu\r\n    \r\n      subnets        = var.subnets\r\n      firewall_rules = var.firewall_rules\r\n    }\r\n\r\nDoes more than creating the VPC on GCP. As you can see in their [source-code][2], it is composed on [**many other modules**][3], in which they use the `google_compute_network` resources along others to setup networks, firewall rules, subnets and more.\r\n\r\nYou may have a very complex VPC network that can be done only by using the module that abstracts the usage of the resources. That same VPC setup might be re-used for other GCP projects for different environments. Or you can even build a module on top of this if you want to enforce some configurations, like you hardcode `auto_create_subnetworks = true`.\r\n\r\nIn some organisations, it is recommended to use only the organisation's approved terraform module, where they apply certain patterns, and set some defaults/best-practices.\r\n\r\nSee more:\r\n\r\n- https://developer.hashicorp.com/terraform/tutorials/modules/module#what-are-modules-for\r\n- https://www.terraform-best-practices.com/key-concepts#composition\r\n- https://www.terraform-best-practices.com/examples/terraform\r\n- https://developer.hashicorp.com/terraform/language/modules\r\n\r\nHope this helps!\r\n\r\n\r\n\r\n  [1]: https://developer.hashicorp.com/terraform/language/modules\r\n  [2]: https://github.com/terraform-google-modules/terraform-google-network\r\n  [3]: https://github.com/terraform-google-modules/terraform-google-network/tree/master/modules", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "And with this abstraction, you can afford using different patterns to deploy your infrastructure on different environments (example: 'dev', 'staging', and 'prod') since you may only pass different (and less) values for your variables, or your can just duplicate your infrastructure folder (dev-infra) for example to create another (stg-infra), the cost of this code duplication is cheaper than duplicating many files in case of using only ressources. ", "keywords": ["cheap", "cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "And with this abstraction, you can afford using different patterns to deploy your infrastructure on different environments (example: 'dev', 'staging', and 'prod') since you may only pass different (and less) values for your variables, or your can just duplicate your infrastructure folder (dev-infra) for example to create another (stg-infra), the cost of this code duplication is cheaper than duplicating many files in case of using only ressources. ", "keywords": ["cheap", "cost"]}]}], "contains-topic": true, "filtered-sentences": []}