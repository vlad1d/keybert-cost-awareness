{"Id": "65292868", "PostTypeId": "1", "AcceptedAnswerId": "65359522", "CreationDate": "2020-12-14T16:41:17.193", "Score": "0", "ViewCount": "1010", "Body": "<p>Maybe related: <a href=\"https://stackoverflow.com/questions/65257838/azurerm-resource-group-template-deployment-ignoring-parameter-file\">azurerm_resource_group_template_deployment ignoring parameter file</a></p>\n<p>I would like to use the resource <code>azurerm_resource_group_template_deployment</code> from Terraform version 0.37. But there is the problem that Terraform wants to reapply the resource every month, so I thought I could tell to ignore changes to start date and end date, but this would (opposite to the deprecated resource <code>azurerm_template_deployment</code>) need a compute operation, namely <code>jsondecode</code>, which is not allowed. I.e. the following code would not work.</p>\n<pre class=\"lang-sh prettyprint-override\"><code>terraform {\n  required_version = &quot;~&gt; 0.13.0&quot;\n  required_providers {\n    azurerm = &quot;~&gt; 2.37.0&quot;\n  }\n}\n\nprovider azurerm {\n  features {}\n}\n\nlocals {\n  budget_start_date = formatdate(&quot;YYYY-MM-01&quot;, timestamp())\n  budget_end_date = formatdate(&quot;YYYY-MM-01&quot;, timeadd(timestamp(), &quot;17568h&quot;))\n  budget_params = jsonencode({\n    &quot;budgetName&quot; = &quot;budgettest&quot;,\n    &quot;amount&quot; = &quot;4000&quot;,\n    &quot;timeGrain&quot; = &quot;Annually&quot;,\n    &quot;startDate&quot; = local.budget_start_date,\n    &quot;endDate&quot; = local.budget_end_date,\n    &quot;firstThreshold&quot; = &quot;75&quot;,\n    &quot;secondThreshold&quot; = &quot;100&quot;,\n    &quot;thirdThreshold&quot; = &quot;50&quot;,\n    &quot;contactGroups&quot; = &quot;&quot;\n  }) \n  }\n\nresource &quot;azurerm_resource_group&quot; &quot;rg&quot; {\n  # A subscription cannot have more than 980 resource groups:\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\n  name = &quot;example-rg&quot;\n  location = &quot;westeurope&quot;\n}\n\nresource &quot;azurerm_resource_group_template_deployment&quot; &quot;dsw_budget&quot; {\n  name = &quot;test-budget-template&quot;\n  resource_group_name = azurerm_resource_group.rg[0].name\n  deployment_mode = &quot;Incremental&quot;\n\n  template_content = file(&quot;${path.module}/arm/budget_deploy.json&quot;)\n\n  parameters_content = local.budget_params\n  \n  lifecycle {\n    ignore_changes = [\n      jsondecode(parameters_content)[&quot;startDate&quot;],\n      jsondecode(parameters_content)[&quot;endDate&quot;]\n    ]\n  }\n\n}\n</code></pre>\n<p>For the sake of completeness, content of <code>budget_deploy.json</code>:</p>\n<pre class=\"lang-json prettyprint-override\"><code>{\n  &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&quot;,\n  &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,\n  &quot;parameters&quot;: {\n    &quot;budgetName&quot;: {\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;defaultValue&quot;: &quot;MyBudget&quot;\n    },\n    &quot;amount&quot;: {\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;defaultValue&quot;: &quot;1000&quot;\n    },\n    &quot;timeGrain&quot;: {\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;defaultValue&quot;: &quot;Monthly&quot;,\n      &quot;allowedValues&quot;: [\n        &quot;Monthly&quot;,\n        &quot;Quarterly&quot;,\n        &quot;Annually&quot;\n      ]\n    },\n    &quot;startDate&quot;: {\n      &quot;type&quot;: &quot;string&quot;\n    },\n    &quot;endDate&quot;: {\n      &quot;type&quot;: &quot;string&quot;\n    },\n    &quot;firstThreshold&quot;: {\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;defaultValue&quot;: &quot;90&quot;\n    },\n    &quot;secondThreshold&quot;: {\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;defaultValue&quot;: &quot;110&quot;\n    },\n    &quot;thirdThreshold&quot;: {\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;defaultValue&quot;: &quot;80&quot;\n    },\n    &quot;contactEmails&quot;: {\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;defaultValue&quot;: &quot;&quot;\n    },\n    &quot;contactGroups&quot;: {\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;defaultValue&quot;: &quot;&quot;\n    },\n    &quot;location&quot;: {\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;defaultValue&quot;: &quot;[resourceGroup().location]&quot;\n    }\n  },\n  &quot;variables&quot;: {\n    &quot;groups&quot;: &quot;[split(parameters('contactGroups'),',')]&quot;\n  },\n  &quot;resources&quot;: [\n    {\n      &quot;name&quot;: &quot;[parameters('budgetName')]&quot;,\n      &quot;type&quot;: &quot;Microsoft.Consumption/budgets&quot;,\n      &quot;location&quot;: &quot;[parameters('location')]&quot;,\n      &quot;apiVersion&quot;: &quot;2019-10-01&quot;,\n      &quot;properties&quot;: {\n        &quot;timePeriod&quot;: {\n          &quot;startDate&quot;: &quot;[parameters('startDate')]&quot;,\n          &quot;endDate&quot;: &quot;[parameters('endDate')]&quot;\n        },\n        &quot;timeGrain&quot;: &quot;[parameters('timeGrain')]&quot;,\n        &quot;amount&quot;: &quot;[parameters('amount')]&quot;,\n        &quot;category&quot;: &quot;Cost&quot;,\n        &quot;notifications&quot;: {\n          &quot;NotificationForExceededBudget1&quot;: {\n            &quot;enabled&quot;: true,\n            &quot;operator&quot;: &quot;GreaterThan&quot;,\n            &quot;threshold&quot;: &quot;[parameters('firstThreshold')]&quot;,\n            &quot;contactGroups&quot;: &quot;[variables('groups')]&quot;\n          },\n          &quot;NotificationForExceededBudget2&quot;: {\n            &quot;enabled&quot;: true,\n            &quot;operator&quot;: &quot;GreaterThan&quot;,\n            &quot;threshold&quot;: &quot;[parameters('secondThreshold')]&quot;,\n            &quot;contactGroups&quot;: &quot;[variables('groups')]&quot;\n          },\n          &quot;NotificationForExceededBudget3&quot;: {\n            &quot;enabled&quot;: true,\n            &quot;operator&quot;: &quot;GreaterThan&quot;,\n            &quot;threshold&quot;: &quot;[parameters('thirdThreshold')]&quot;,\n            &quot;contactGroups&quot;: &quot;[variables('groups')]&quot;\n          }\n        }\n      }\n    }\n  ]\n}\n</code></pre>\n<p>Is there any way that I can still achieve my goal? - thank you!</p>\n", "OwnerUserId": "9698518", "LastEditorUserId": "9698518", "LastEditDate": "2020-12-18T15:18:01.690", "LastActivityDate": "2020-12-24T14:12:02.080", "Title": "How can I use azurerm_resource_group_template_deployment for azure budget resource but ignore changes in start and end date?", "Tags": "<azure><terraform><terraform-provider-azure><azure-rm>", "AnswerCount": "2", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "links": [{"Id": "1788825456", "CreationDate": "2020-12-14T16:41:17.193", "PostId": "65292868", "RelatedPostId": "65257838", "LinkTypeId": "1"}], "history": [{"Id": "236893620", "PostHistoryTypeId": "2", "PostId": "65292868", "RevisionGUID": "2a6967e8-4dde-4d1b-8d1a-f34dfed5fdc8", "CreationDate": "2020-12-14T16:41:17.193", "UserId": "9698518", "Text": "Maybe related: https://stackoverflow.com/questions/65257838/azurerm-resource-group-template-deployment-ignoring-parameter-file\r\n\r\nI would like to use the resource `azurerm_resource_group_template_deployment` from Terraform version 0.37. But there is the problem that Terraform wants to reapply the resource every month, so I thought I could tell to ignore changes to start date and end date, but this would (opposite to the deprecated resource `azurerm_template_deployment`) need a compute operation, namely `jsondecode`, which is not allowed. I.e. the following code would not work.\r\n```bash\r\nterraform {\r\n  required_version = \"~> 0.13.0\"\r\n  required_providers {\r\n    azurerm = \"~> 2.37.0\"\r\n  }\r\n}\r\n\r\nprovider azurerm {\r\n  features {}\r\n}\r\n\r\nlocals {\r\n  budget_start_date = formatdate(\"YYYY-MM-01\", timestamp())\r\n  budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\"))\r\n  budget_params = jsonencode({\r\n    \"budgetName\" = \"budgettest\",\r\n    \"amount\" = \"4000\",\r\n    \"timeGrain\" = \"Annually\",\r\n    \"startDate\" = local.budget_start_date,\r\n    \"endDate\" = local.budget_end_date,\r\n    \"firstThreshold\" = \"75\",\r\n    \"secondThreshold\" = \"100\",\r\n    \"thirdThreshold\" = \"50\",\r\n    \"contactGroups\" = \"\"\r\n  }) \r\n  }\r\n\r\nresource \"azurerm_resource_group\" \"rg\" {\r\n  # A subscription cannot have more than 980 resource groups:\r\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\r\n  name = \"example-rg\"\r\n  location = \"westeurope\"\r\n}\r\n\r\nresource \"azurerm_template_deployment\" \"dsw_budget\" {\r\n  name = \"test-budget-template\"\r\n  resource_group_name = azurerm_resource_group.rg[0].name\r\n  deployment_mode = \"Incremental\"\r\n\r\n  template_content = file(\"${path.module}/arm/budget_deploy.json\")\r\n\r\n  parameters_content = local.budget_params\r\n  \r\n  lifecycle {\r\n    ignore_changes = [\r\n      jsondecode(local.parameters)[\"startDate\"],\r\n      jsondecode(local.parameters)[\"endDate\"]\r\n    ]\r\n  }\r\n\r\n}\r\n```\r\n\r\nFor the sake of completeness, content of `budget_deploy.json`:\r\n```json\r\n{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"budgetName\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"MyBudget\"\r\n    },\r\n    \"amount\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"1000\"\r\n    },\r\n    \"timeGrain\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"Monthly\",\r\n      \"allowedValues\": [\r\n        \"Monthly\",\r\n        \"Quarterly\",\r\n        \"Annually\"\r\n      ]\r\n    },\r\n    \"startDate\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"endDate\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"firstThreshold\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"90\"\r\n    },\r\n    \"secondThreshold\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"110\"\r\n    },\r\n    \"thirdThreshold\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"80\"\r\n    },\r\n    \"contactEmails\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"\"\r\n    },\r\n    \"contactGroups\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"\"\r\n    },\r\n    \"location\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"[resourceGroup().location]\"\r\n    }\r\n  },\r\n  \"variables\": {\r\n    \"groups\": \"[split(parameters('contactGroups'),',')]\"\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"name\": \"[parameters('budgetName')]\",\r\n      \"type\": \"Microsoft.Consumption/budgets\",\r\n      \"location\": \"[parameters('location')]\",\r\n      \"apiVersion\": \"2019-10-01\",\r\n      \"properties\": {\r\n        \"timePeriod\": {\r\n          \"startDate\": \"[parameters('startDate')]\",\r\n          \"endDate\": \"[parameters('endDate')]\"\r\n        },\r\n        \"timeGrain\": \"[parameters('timeGrain')]\",\r\n        \"amount\": \"[parameters('amount')]\",\r\n        \"category\": \"Cost\",\r\n        \"notifications\": {\r\n          \"NotificationForExceededBudget1\": {\r\n            \"enabled\": true,\r\n            \"operator\": \"GreaterThan\",\r\n            \"threshold\": \"[parameters('firstThreshold')]\",\r\n            \"contactGroups\": \"[variables('groups')]\"\r\n          },\r\n          \"NotificationForExceededBudget2\": {\r\n            \"enabled\": true,\r\n            \"operator\": \"GreaterThan\",\r\n            \"threshold\": \"[parameters('secondThreshold')]\",\r\n            \"contactGroups\": \"[variables('groups')]\"\r\n          },\r\n          \"NotificationForExceededBudget3\": {\r\n            \"enabled\": true,\r\n            \"operator\": \"GreaterThan\",\r\n            \"threshold\": \"[parameters('thirdThreshold')]\",\r\n            \"contactGroups\": \"[variables('groups')]\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIs there any way that I can still achieve my goal? - thank you!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "But there is the problem that Terraform wants to reapply the resource every month, so I thought I could tell to ignore changes to start date and end date, but this would (opposite to the deprecated resource `azurerm_template_deployment`) need a compute operation, namely `jsondecode`, which is not allowed. ", "keywords": ["change"]}, {"source": "Text", "text": "```bash terraform { required_version = \"~> 0.13.0\" required_providers { azurerm = \"~> 2.37.0\" } } provider azurerm { features {} } locals { budget_start_date = formatdate(\"YYYY-MM-01\", timestamp()) budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\")) budget_params = jsonencode({ \"budgetName\" = \"budgettest\", \"amount\" = \"4000\", \"timeGrain\" = \"Annually\", \"startDate\" = local.budget_start_date, \"endDate\" = local.budget_end_date, \"firstThreshold\" = \"75\", \"secondThreshold\" = \"100\", \"thirdThreshold\" = \"50\", \"contactGroups\" = \"\" }) } resource \"azurerm_resource_group\" \"rg\" { # A subscription cannot have more than 980 resource groups: # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits name = \"example-rg\" location = \"westeurope\" } resource \"azurerm_template_deployment\" \"dsw_budget\" { name = \"test-budget-template\" resource_group_name = azurerm_resource_group.rg[0].name deployment_mode = \"Incremental\" template_content = file(\"${path.module}/arm/budget_deploy.json\") parameters_content = local.budget_params lifecycle { ignore_changes = [ jsondecode(local.parameters)[\"startDate\"], jsondecode(local.parameters)[\"endDate\"] ] } } ``` For the sake of completeness, content of `budget_deploy.json`: ```json { \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\", \"contentVersion\": \"1.0.0.0\", \"parameters\": { \"budgetName\": { \"type\": \"string\", \"defaultValue\": \"MyBudget\" }, \"amount\": { \"type\": \"string\", \"defaultValue\": \"1000\" }, \"timeGrain\": { \"type\": \"string\", \"defaultValue\": \"Monthly\", \"allowedValues\": [ \"Monthly\", \"Quarterly\", \"Annually\" ] }, \"startDate\": { \"type\": \"string\" }, \"endDate\": { \"type\": \"string\" }, \"firstThreshold\": { \"type\": \"string\", \"defaultValue\": \"90\" }, \"secondThreshold\": { \"type\": \"string\", \"defaultValue\": \"110\" }, \"thirdThreshold\": { \"type\": \"string\", \"defaultValue\": \"80\" }, \"contactEmails\": { \"type\": \"string\", \"defaultValue\": \"\" ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "}, \"location\": { \"type\": \"string\", \"defaultValue\": \"[resourceGroup().location]\" } }, \"variables\": { \"groups\": \"[split(parameters('contactGroups'),',')]\" }, \"resources\": [ { \"name\": \"[parameters('budgetName')]\", \"type\": \"Microsoft.Consumption/budgets\", \"location\": \"[parameters('location')]\", \"apiVersion\": \"2019-10-01\", \"properties\": { \"timePeriod\": { \"startDate\": \"[parameters('startDate')]\", \"endDate\": \"[parameters('endDate')]\" }, \"timeGrain\": \"[parameters('timeGrain')]\", \"amount\": \"[parameters('amount')]\", \"category\": \"Cost\", \"notifications\": { \"NotificationForExceededBudget1\": { \"enabled\": true, \"operator\": \"GreaterThan\", \"threshold\": \"[parameters('firstThreshold')]\", \"contactGroups\": \"[variables('groups')]\" }, \"NotificationForExceededBudget2\": { \"enabled\": true, \"operator\": \"GreaterThan\", \"threshold\": \"[parameters('secondThreshold')]\", \"contactGroups\": \"[variables('groups')]\" ", "keywords": ["cost"]}]}, {"Id": "236893621", "PostHistoryTypeId": "1", "PostId": "65292868", "RevisionGUID": "2a6967e8-4dde-4d1b-8d1a-f34dfed5fdc8", "CreationDate": "2020-12-14T16:41:17.193", "UserId": "9698518", "Text": "How can I use azurerm_resource_group_template_deployment for azure budget resource but ignore changes in start and end date?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "How can I use azurerm_resource_group_template_deployment for azure budget resource but ignore changes in start and end date?", "keywords": ["change"]}]}, {"Id": "236893622", "PostHistoryTypeId": "3", "PostId": "65292868", "RevisionGUID": "2a6967e8-4dde-4d1b-8d1a-f34dfed5fdc8", "CreationDate": "2020-12-14T16:41:17.193", "UserId": "9698518", "Text": "<azure><terraform><terraform-provider-azure><azure-rm>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "237055726", "PostHistoryTypeId": "5", "PostId": "65292868", "RevisionGUID": "184c219b-f95a-448a-84f4-1ee103aecba1", "CreationDate": "2020-12-16T21:11:23.383", "UserId": "9698518", "Comment": "fix mistake in ignore_changes", "Text": "Maybe related: https://stackoverflow.com/questions/65257838/azurerm-resource-group-template-deployment-ignoring-parameter-file\r\n\r\nI would like to use the resource `azurerm_resource_group_template_deployment` from Terraform version 0.37. But there is the problem that Terraform wants to reapply the resource every month, so I thought I could tell to ignore changes to start date and end date, but this would (opposite to the deprecated resource `azurerm_template_deployment`) need a compute operation, namely `jsondecode`, which is not allowed. I.e. the following code would not work.\r\n```bash\r\nterraform {\r\n  required_version = \"~> 0.13.0\"\r\n  required_providers {\r\n    azurerm = \"~> 2.37.0\"\r\n  }\r\n}\r\n\r\nprovider azurerm {\r\n  features {}\r\n}\r\n\r\nlocals {\r\n  budget_start_date = formatdate(\"YYYY-MM-01\", timestamp())\r\n  budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\"))\r\n  budget_params = jsonencode({\r\n    \"budgetName\" = \"budgettest\",\r\n    \"amount\" = \"4000\",\r\n    \"timeGrain\" = \"Annually\",\r\n    \"startDate\" = local.budget_start_date,\r\n    \"endDate\" = local.budget_end_date,\r\n    \"firstThreshold\" = \"75\",\r\n    \"secondThreshold\" = \"100\",\r\n    \"thirdThreshold\" = \"50\",\r\n    \"contactGroups\" = \"\"\r\n  }) \r\n  }\r\n\r\nresource \"azurerm_resource_group\" \"rg\" {\r\n  # A subscription cannot have more than 980 resource groups:\r\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\r\n  name = \"example-rg\"\r\n  location = \"westeurope\"\r\n}\r\n\r\nresource \"azurerm_template_deployment\" \"dsw_budget\" {\r\n  name = \"test-budget-template\"\r\n  resource_group_name = azurerm_resource_group.rg[0].name\r\n  deployment_mode = \"Incremental\"\r\n\r\n  template_content = file(\"${path.module}/arm/budget_deploy.json\")\r\n\r\n  parameters_content = local.budget_params\r\n  \r\n  lifecycle {\r\n    ignore_changes = [\r\n      jsondecode(parameters_content)[\"startDate\"],\r\n      jsondecode(parameters_content)[\"endDate\"]\r\n    ]\r\n  }\r\n\r\n}\r\n```\r\n\r\nFor the sake of completeness, content of `budget_deploy.json`:\r\n```json\r\n{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"budgetName\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"MyBudget\"\r\n    },\r\n    \"amount\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"1000\"\r\n    },\r\n    \"timeGrain\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"Monthly\",\r\n      \"allowedValues\": [\r\n        \"Monthly\",\r\n        \"Quarterly\",\r\n        \"Annually\"\r\n      ]\r\n    },\r\n    \"startDate\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"endDate\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"firstThreshold\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"90\"\r\n    },\r\n    \"secondThreshold\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"110\"\r\n    },\r\n    \"thirdThreshold\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"80\"\r\n    },\r\n    \"contactEmails\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"\"\r\n    },\r\n    \"contactGroups\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"\"\r\n    },\r\n    \"location\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"[resourceGroup().location]\"\r\n    }\r\n  },\r\n  \"variables\": {\r\n    \"groups\": \"[split(parameters('contactGroups'),',')]\"\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"name\": \"[parameters('budgetName')]\",\r\n      \"type\": \"Microsoft.Consumption/budgets\",\r\n      \"location\": \"[parameters('location')]\",\r\n      \"apiVersion\": \"2019-10-01\",\r\n      \"properties\": {\r\n        \"timePeriod\": {\r\n          \"startDate\": \"[parameters('startDate')]\",\r\n          \"endDate\": \"[parameters('endDate')]\"\r\n        },\r\n        \"timeGrain\": \"[parameters('timeGrain')]\",\r\n        \"amount\": \"[parameters('amount')]\",\r\n        \"category\": \"Cost\",\r\n        \"notifications\": {\r\n          \"NotificationForExceededBudget1\": {\r\n            \"enabled\": true,\r\n            \"operator\": \"GreaterThan\",\r\n            \"threshold\": \"[parameters('firstThreshold')]\",\r\n            \"contactGroups\": \"[variables('groups')]\"\r\n          },\r\n          \"NotificationForExceededBudget2\": {\r\n            \"enabled\": true,\r\n            \"operator\": \"GreaterThan\",\r\n            \"threshold\": \"[parameters('secondThreshold')]\",\r\n            \"contactGroups\": \"[variables('groups')]\"\r\n          },\r\n          \"NotificationForExceededBudget3\": {\r\n            \"enabled\": true,\r\n            \"operator\": \"GreaterThan\",\r\n            \"threshold\": \"[parameters('thirdThreshold')]\",\r\n            \"contactGroups\": \"[variables('groups')]\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIs there any way that I can still achieve my goal? - thank you!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "But there is the problem that Terraform wants to reapply the resource every month, so I thought I could tell to ignore changes to start date and end date, but this would (opposite to the deprecated resource `azurerm_template_deployment`) need a compute operation, namely `jsondecode`, which is not allowed. ", "keywords": ["change"]}, {"source": "Text", "text": "```bash terraform { required_version = \"~> 0.13.0\" required_providers { azurerm = \"~> 2.37.0\" } } provider azurerm { features {} } locals { budget_start_date = formatdate(\"YYYY-MM-01\", timestamp()) budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\")) budget_params = jsonencode({ \"budgetName\" = \"budgettest\", \"amount\" = \"4000\", \"timeGrain\" = \"Annually\", \"startDate\" = local.budget_start_date, \"endDate\" = local.budget_end_date, \"firstThreshold\" = \"75\", \"secondThreshold\" = \"100\", \"thirdThreshold\" = \"50\", \"contactGroups\" = \"\" }) } resource \"azurerm_resource_group\" \"rg\" { # A subscription cannot have more than 980 resource groups: # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits name = \"example-rg\" location = \"westeurope\" } resource \"azurerm_template_deployment\" \"dsw_budget\" { name = \"test-budget-template\" resource_group_name = azurerm_resource_group.rg[0].name deployment_mode = \"Incremental\" template_content = file(\"${path.module}/arm/budget_deploy.json\") parameters_content = local.budget_params lifecycle { ignore_changes = [ jsondecode(parameters_content)[\"startDate\"], jsondecode(parameters_content)[\"endDate\"] ] } } ``` ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "}, \"location\": { \"type\": \"string\", \"defaultValue\": \"[resourceGroup().location]\" } }, \"variables\": { \"groups\": \"[split(parameters('contactGroups'),',')]\" }, \"resources\": [ { \"name\": \"[parameters('budgetName')]\", \"type\": \"Microsoft.Consumption/budgets\", \"location\": \"[parameters('location')]\", \"apiVersion\": \"2019-10-01\", \"properties\": { \"timePeriod\": { \"startDate\": \"[parameters('startDate')]\", \"endDate\": \"[parameters('endDate')]\" }, \"timeGrain\": \"[parameters('timeGrain')]\", \"amount\": \"[parameters('amount')]\", \"category\": \"Cost\", \"notifications\": { \"NotificationForExceededBudget1\": { \"enabled\": true, \"operator\": \"GreaterThan\", \"threshold\": \"[parameters('firstThreshold')]\", \"contactGroups\": \"[variables('groups')]\" }, \"NotificationForExceededBudget2\": { \"enabled\": true, \"operator\": \"GreaterThan\", \"threshold\": \"[parameters('secondThreshold')]\", \"contactGroups\": \"[variables('groups')]\" ", "keywords": ["cost"]}]}, {"Id": "237174880", "PostHistoryTypeId": "5", "PostId": "65292868", "RevisionGUID": "21512fdd-b482-4de7-b25d-ced9fe241597", "CreationDate": "2020-12-18T15:18:01.690", "UserId": "9698518", "Comment": "added 15 characters in body", "Text": "Maybe related: https://stackoverflow.com/questions/65257838/azurerm-resource-group-template-deployment-ignoring-parameter-file\r\n\r\nI would like to use the resource `azurerm_resource_group_template_deployment` from Terraform version 0.37. But there is the problem that Terraform wants to reapply the resource every month, so I thought I could tell to ignore changes to start date and end date, but this would (opposite to the deprecated resource `azurerm_template_deployment`) need a compute operation, namely `jsondecode`, which is not allowed. I.e. the following code would not work.\r\n```bash\r\nterraform {\r\n  required_version = \"~> 0.13.0\"\r\n  required_providers {\r\n    azurerm = \"~> 2.37.0\"\r\n  }\r\n}\r\n\r\nprovider azurerm {\r\n  features {}\r\n}\r\n\r\nlocals {\r\n  budget_start_date = formatdate(\"YYYY-MM-01\", timestamp())\r\n  budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\"))\r\n  budget_params = jsonencode({\r\n    \"budgetName\" = \"budgettest\",\r\n    \"amount\" = \"4000\",\r\n    \"timeGrain\" = \"Annually\",\r\n    \"startDate\" = local.budget_start_date,\r\n    \"endDate\" = local.budget_end_date,\r\n    \"firstThreshold\" = \"75\",\r\n    \"secondThreshold\" = \"100\",\r\n    \"thirdThreshold\" = \"50\",\r\n    \"contactGroups\" = \"\"\r\n  }) \r\n  }\r\n\r\nresource \"azurerm_resource_group\" \"rg\" {\r\n  # A subscription cannot have more than 980 resource groups:\r\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\r\n  name = \"example-rg\"\r\n  location = \"westeurope\"\r\n}\r\n\r\nresource \"azurerm_resource_group_template_deployment\" \"dsw_budget\" {\r\n  name = \"test-budget-template\"\r\n  resource_group_name = azurerm_resource_group.rg[0].name\r\n  deployment_mode = \"Incremental\"\r\n\r\n  template_content = file(\"${path.module}/arm/budget_deploy.json\")\r\n\r\n  parameters_content = local.budget_params\r\n  \r\n  lifecycle {\r\n    ignore_changes = [\r\n      jsondecode(parameters_content)[\"startDate\"],\r\n      jsondecode(parameters_content)[\"endDate\"]\r\n    ]\r\n  }\r\n\r\n}\r\n```\r\n\r\nFor the sake of completeness, content of `budget_deploy.json`:\r\n```json\r\n{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"budgetName\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"MyBudget\"\r\n    },\r\n    \"amount\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"1000\"\r\n    },\r\n    \"timeGrain\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"Monthly\",\r\n      \"allowedValues\": [\r\n        \"Monthly\",\r\n        \"Quarterly\",\r\n        \"Annually\"\r\n      ]\r\n    },\r\n    \"startDate\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"endDate\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"firstThreshold\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"90\"\r\n    },\r\n    \"secondThreshold\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"110\"\r\n    },\r\n    \"thirdThreshold\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"80\"\r\n    },\r\n    \"contactEmails\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"\"\r\n    },\r\n    \"contactGroups\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"\"\r\n    },\r\n    \"location\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"[resourceGroup().location]\"\r\n    }\r\n  },\r\n  \"variables\": {\r\n    \"groups\": \"[split(parameters('contactGroups'),',')]\"\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"name\": \"[parameters('budgetName')]\",\r\n      \"type\": \"Microsoft.Consumption/budgets\",\r\n      \"location\": \"[parameters('location')]\",\r\n      \"apiVersion\": \"2019-10-01\",\r\n      \"properties\": {\r\n        \"timePeriod\": {\r\n          \"startDate\": \"[parameters('startDate')]\",\r\n          \"endDate\": \"[parameters('endDate')]\"\r\n        },\r\n        \"timeGrain\": \"[parameters('timeGrain')]\",\r\n        \"amount\": \"[parameters('amount')]\",\r\n        \"category\": \"Cost\",\r\n        \"notifications\": {\r\n          \"NotificationForExceededBudget1\": {\r\n            \"enabled\": true,\r\n            \"operator\": \"GreaterThan\",\r\n            \"threshold\": \"[parameters('firstThreshold')]\",\r\n            \"contactGroups\": \"[variables('groups')]\"\r\n          },\r\n          \"NotificationForExceededBudget2\": {\r\n            \"enabled\": true,\r\n            \"operator\": \"GreaterThan\",\r\n            \"threshold\": \"[parameters('secondThreshold')]\",\r\n            \"contactGroups\": \"[variables('groups')]\"\r\n          },\r\n          \"NotificationForExceededBudget3\": {\r\n            \"enabled\": true,\r\n            \"operator\": \"GreaterThan\",\r\n            \"threshold\": \"[parameters('thirdThreshold')]\",\r\n            \"contactGroups\": \"[variables('groups')]\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIs there any way that I can still achieve my goal? - thank you!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "But there is the problem that Terraform wants to reapply the resource every month, so I thought I could tell to ignore changes to start date and end date, but this would (opposite to the deprecated resource `azurerm_template_deployment`) need a compute operation, namely `jsondecode`, which is not allowed. ", "keywords": ["change"]}, {"source": "Text", "text": "```bash terraform { required_version = \"~> 0.13.0\" required_providers { azurerm = \"~> 2.37.0\" } } provider azurerm { features {} } locals { budget_start_date = formatdate(\"YYYY-MM-01\", timestamp()) budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\")) budget_params = jsonencode({ \"budgetName\" = \"budgettest\", \"amount\" = \"4000\", \"timeGrain\" = \"Annually\", \"startDate\" = local.budget_start_date, \"endDate\" = local.budget_end_date, \"firstThreshold\" = \"75\", \"secondThreshold\" = \"100\", \"thirdThreshold\" = \"50\", \"contactGroups\" = \"\" }) } resource \"azurerm_resource_group\" \"rg\" { # A subscription cannot have more than 980 resource groups: # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits name = \"example-rg\" location = \"westeurope\" } resource \"azurerm_resource_group_template_deployment\" \"dsw_budget\" { name = \"test-budget-template\" resource_group_name = azurerm_resource_group.rg[0].name deployment_mode = \"Incremental\" template_content = file(\"${path.module}/arm/budget_deploy.json\") parameters_content = local.budget_params lifecycle { ignore_changes = [ jsondecode(parameters_content)[\"startDate\"], jsondecode(parameters_content)[\"endDate\"] ] } } ``` ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "}, \"resources\": [ { \"name\": \"[parameters('budgetName')]\", \"type\": \"Microsoft.Consumption/budgets\", \"location\": \"[parameters('location')]\", \"apiVersion\": \"2019-10-01\", \"properties\": { \"timePeriod\": { \"startDate\": \"[parameters('startDate')]\", \"endDate\": \"[parameters('endDate')]\" }, \"timeGrain\": \"[parameters('timeGrain')]\", \"amount\": \"[parameters('amount')]\", \"category\": \"Cost\", \"notifications\": { \"NotificationForExceededBudget1\": { \"enabled\": true, \"operator\": \"GreaterThan\", \"threshold\": \"[parameters('firstThreshold')]\", \"contactGroups\": \"[variables('groups')]\" }, \"NotificationForExceededBudget2\": { \"enabled\": true, \"operator\": \"GreaterThan\", \"threshold\": \"[parameters('secondThreshold')]\", \"contactGroups\": \"[variables('groups')]\" ", "keywords": ["cost"]}]}], "answers": [{"Id": "65359522", "PostTypeId": "2", "ParentId": "65292868", "CreationDate": "2020-12-18T15:17:11.163", "Score": "0", "Body": "<p>I resorted to use tags for the end and start date for the budget. The <code>ignore_changes</code> would work for the <em>deprecated</em> <code>azurerm_template_deployment</code> as parameters is of type <code>map</code> in that case and not of <code>json</code> type, like so:</p>\n<pre><code>terraform {\n  required_version = &quot;~&gt; 0.13.0&quot;\n  required_providers {\n    azurerm = &quot;~&gt; 2.37.0&quot;\n  }\n}\n\nprovider azurerm {\n  features {}\n}\n\nlocals {\n  budget_start_date = formatdate(&quot;YYYY-MM-01&quot;, timestamp())\n  budget_end_date = formatdate(&quot;YYYY-MM-01&quot;, timeadd(timestamp(), &quot;17568h&quot;))\n  budget_params = {\n    &quot;budgetName&quot; = &quot;budgettest&quot;,\n    &quot;amount&quot; = &quot;4000&quot;,\n    &quot;timeGrain&quot; = &quot;Annually&quot;,\n    &quot;startDate&quot; = local.budget_start_date,\n    &quot;endDate&quot; = local.budget_end_date,\n    &quot;firstThreshold&quot; = &quot;75&quot;,\n    &quot;secondThreshold&quot; = &quot;100&quot;,\n    &quot;thirdThreshold&quot; = &quot;50&quot;,\n    &quot;contactGroups&quot; = &quot;&quot;\n  }\n  }\n\nresource &quot;azurerm_resource_group&quot; &quot;rg&quot; {\n  # A subscription cannot have more than 980 resource groups:\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\n  name = &quot;example-rg&quot;\n  location = &quot;westeurope&quot;\n}\n\nresource &quot;azurerm_template_deployment&quot; &quot;dsw_budget&quot; {\n  name = &quot;test-budget-template&quot;\n  resource_group_name = azurerm_resource_group.rg[0].name\n  deployment_mode = &quot;Incremental&quot;\n\n  template_content = file(&quot;${path.module}/arm/budget_deploy.json&quot;)\n\n  parameters_content = local.budget_params\n  \n  lifecycle {\n    ignore_changes = [\n      parameters[&quot;startDate&quot;],\n      parameters[&quot;endDate&quot;]\n    ]\n  }\n\n}\n</code></pre>\n<p>Now this is not possible anymore with <code>azurerm_resource_group_template_deployment</code>, as json content is has to passed and therefore in <code>ignore_changes</code> a json-decoding which is a computation operation would have to be made, which is not allowed.</p>\n<p>Therefore to solve my problem of fixating start and end dates, I resorted to using tags for start and end date and a data source querying them:</p>\n<pre><code>terraform {\n  required_version = &quot;~&gt; 0.13.0&quot;\n  required_providers {\n    azurerm = &quot;~&gt; 2.37.0&quot;\n  }\n}\n\nprovider azurerm {\n  features {\n    template_deployment {\n      delete_nested_items_during_deletion = false\n    }\n  }\n}\n\ndata &quot;azurerm_resources&quot; &quot;aml&quot; {\n  resource_group_name = &quot;${var.tk_name_id}-${local.stage}-rg&quot;\n  type = &quot;Microsoft.MachineLearningServices/workspaces&quot;\n}\n\n\nlocals {\n  budget_start_date_tag = try(element(data.azurerm_resources.aml.resources[*].tags.budget_start_date, 0), &quot;NA&quot;)\n  budget_end_date_tag = try(element(data.azurerm_resources.aml.resources[*].tags.budget_end_date, 0), &quot;NA&quot;)\n  should_test_budget = local.is_test_stage_boolean &amp;&amp; var.test_budget\n  budget_start_date = local.budget_start_date_tag != &quot;NA&quot; ? local.budget_start_date_tag : (local.should_test_budget ? &quot;START DATE FAIL!&quot; : formatdate(&quot;YYYY-MM-01&quot;, timestamp()))\n  budget_end_date = local.budget_end_date_tag != &quot;NA&quot; ? local.budget_end_date_tag : (local.should_test_budget ? &quot;END DATE FAIL!&quot; : formatdate(&quot;YYYY-MM-01&quot;, timeadd(timestamp(), &quot;17568h&quot;)))\n  budget_date_tags = {\n     &quot;budget_start_date&quot; : local.budget_start_date,\n     &quot;budget_end_date&quot; : local.budget_end_date\n  }\n}\n\n#--------------------------------------------------------------------------------------------------------------------\n# DSW: Resource Group \n# --------------------------------------------------------------------------------------------------------------------\nresource &quot;azurerm_resource_group&quot; &quot;rg&quot; {\n  # A subscription cannot have more than 980 resource groups:\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\n  count = local.no_addresses_available_boolean ? 0 : 1\n  name = &quot;test-rg&quot;\n  location = var.location\n  tags = local.budget_date_tags\n}\n\nresource &quot;azurerm_machine_learning_workspace&quot; &quot;aml_workspace&quot; {\n  name = local.aml_ws_name\n  resource_group_name = azurerm_resource_group.rg[0].name\n  location = azurerm_resource_group.rg[0].location\n  application_insights_id = azurerm_application_insights.aml_insights.id\n  key_vault_id = azurerm_key_vault.aml_kv.id\n  storage_account_id = azurerm_storage_account.aml_st.id\n  container_registry_id = azurerm_container_registry.aml_acr.id\n  sku_name = &quot;Basic&quot;\n  tags = merge(var.azure_tags, local.budget_date_tags)\n  identity {\n    type = &quot;SystemAssigned&quot;\n  }\n}\n</code></pre>\n<p>@Charles Xu I did not quite test it yet and I am also not sure if this is the best solution?</p>\n<p>EDIT: Now I actually run into cyclic dependency because the data source does obviously not exist before resource group is created: <a href=\"https://github.com/hashicorp/terraform/issues/16380\" rel=\"nofollow noreferrer\">https://github.com/hashicorp/terraform/issues/16380</a>.</p>\n", "OwnerUserId": "9698518", "LastEditorUserId": "9698518", "LastEditDate": "2020-12-24T14:12:02.080", "LastActivityDate": "2020-12-24T14:12:02.080", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "115693921", "PostId": "65359522", "Score": "0", "Text": "@Charles Xu This solution works now. I realized I cannot use budget tags nor resource group tags. That's why I also opened: https://github.com/terraform-providers/terraform-provider-azurerm/issues/9964. Therefore I had to choose another resource, i.e. the Azure Machine Learning Workspace. Using the budget tags of this allows me to fixate the budget start and end date once fixed.", "CreationDate": "2020-12-24T14:14:45.200", "UserId": "9698518", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "That's why I also opened: https://github.com/terraform-providers/terraform-provider-azurerm/issues/9964. ", "keywords": ["provider"]}]}], "history": [{"Id": "237174846", "PostHistoryTypeId": "2", "PostId": "65359522", "RevisionGUID": "8f9a981a-6e2e-43ec-81e8-c01535d5832e", "CreationDate": "2020-12-18T15:17:11.163", "UserId": "9698518", "Text": "I resorted to use tags for the end and start date for the budget. The `ignore_changes` would work for the *deprecated* `azurerm_template_deployment` as parameters is of type `map` in that case and not of `json` type, like so:\r\n```\r\nterraform {\r\n  required_version = \"~> 0.13.0\"\r\n  required_providers {\r\n    azurerm = \"~> 2.37.0\"\r\n  }\r\n}\r\n\r\nprovider azurerm {\r\n  features {}\r\n}\r\n\r\nlocals {\r\n  budget_start_date = formatdate(\"YYYY-MM-01\", timestamp())\r\n  budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\"))\r\n  budget_params = {\r\n    \"budgetName\" = \"budgettest\",\r\n    \"amount\" = \"4000\",\r\n    \"timeGrain\" = \"Annually\",\r\n    \"startDate\" = local.budget_start_date,\r\n    \"endDate\" = local.budget_end_date,\r\n    \"firstThreshold\" = \"75\",\r\n    \"secondThreshold\" = \"100\",\r\n    \"thirdThreshold\" = \"50\",\r\n    \"contactGroups\" = \"\"\r\n  }\r\n  }\r\n\r\nresource \"azurerm_resource_group\" \"rg\" {\r\n  # A subscription cannot have more than 980 resource groups:\r\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\r\n  name = \"example-rg\"\r\n  location = \"westeurope\"\r\n}\r\n\r\nresource \"azurerm_template_deployment\" \"dsw_budget\" {\r\n  name = \"test-budget-template\"\r\n  resource_group_name = azurerm_resource_group.rg[0].name\r\n  deployment_mode = \"Incremental\"\r\n\r\n  template_content = file(\"${path.module}/arm/budget_deploy.json\")\r\n\r\n  parameters_content = local.budget_params\r\n  \r\n  lifecycle {\r\n    ignore_changes = [\r\n      parameters[\"startDate\"],\r\n      parameters[\"endDate\"]\r\n    ]\r\n  }\r\n\r\n}\r\n```\r\n\r\nNow this is not possible anymore with `azurerm_resource_group_template_deployment`, as json content is has to passed and therefore in `ignore_changes` a json-decoding which is a computation operation would have to be made, which is not allowed.\r\n\r\nTherefore to solve my problem of fixating start and end dates, I resorted to using tags for start and end date and a data source querying them:\r\n```\r\nterraform {\r\n  required_version = \"~> 0.13.0\"\r\n  required_providers {\r\n    azurerm = \"~> 2.37.0\"\r\n  }\r\n}\r\n\r\nprovider azurerm {\r\n  features {\r\n    template_deployment {\r\n      delete_nested_items_during_deletion = false\r\n    }\r\n  }\r\n}\r\n\r\ndata \"azurerm_resources\" \"rg\" {\r\n  resource_group_name = \"test-rg\"\r\n  name = \"test-rg\"\r\n}\r\n\r\n\r\nlocals {\r\n  budget_start_date_tag = try(data.azurerm_resources.rg.resources[0].tags.budget_start_date, \"\")\r\n  budget_end_date_tag = try(data.azurerm_resources.rg.resources[0].tags.budget_end_date, \"\")\r\n  should_test_budget = local.is_test_stage_boolean && var.test_budget\r\n  use_budget_start_tag = length(local.budget_start_date_tag) != 0\r\n  use_budget_end_tag = length(local.budget_end_date_tag) != 0\r\n  budget_start_date = local.use_budget_start_tag ? local.budget_start_date_tag : (local.should_test_budget ? var.test_start_date : formatdate(\"YYYY-MM-01\", timestamp()))\r\n  budget_end_date = local.use_budget_end_tag ? local.budget_end_date_tag : (local.should_test_budget ? var.test_end_date : formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\")))\r\n  budget_date_tags = {\r\n     \"budget_start_date\" : local.budget_start_date,\r\n     \"budget_end_date\" : local.budget_end_date\r\n  }\r\n}\r\n\r\n#--------------------------------------------------------------------------------------------------------------------\r\n# DSW: Resource Group \r\n# --------------------------------------------------------------------------------------------------------------------\r\nresource \"azurerm_resource_group\" \"rg\" {\r\n  # A subscription cannot have more than 980 resource groups:\r\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\r\n  count = local.no_addresses_available_boolean ? 0 : 1\r\n  name = \"test-rg\"\r\n  location = var.location\r\n  tags = local.budget_date_tags\r\n}\r\n```\r\n\r\n@Charles Xu I did not quite test it yet and I am also not sure if this is the best solution?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The `ignore_changes` would work for the *deprecated* `azurerm_template_deployment` as parameters is of type `map` in that case and not of `json` type, like so: ``` terraform { required_version = \"~> 0.13.0\" required_providers { azurerm = \"~> 2.37.0\" } } provider azurerm { features {} } locals { budget_start_date = formatdate(\"YYYY-MM-01\", timestamp()) budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\")) budget_params = { \"budgetName\" = \"budgettest\", \"amount\" = \"4000\", \"timeGrain\" = \"Annually\", \"startDate\" = local.budget_start_date, \"endDate\" = local.budget_end_date, \"firstThreshold\" = \"75\", \"secondThreshold\" = \"100\", \"thirdThreshold\" = \"50\", \"contactGroups\" = \"\" } } resource \"azurerm_resource_group\" \"rg\" { # A subscription cannot have more than 980 resource groups: # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits name = \"example-rg\" location = \"westeurope\" } resource \"azurerm_template_deployment\" \"dsw_budget\" { name = \"test-budget-template\" resource_group_name = azurerm_resource_group.rg[0].name deployment_mode = \"Incremental\" template_content = file(\"${path.module}/arm/budget_deploy.json\") parameters_content = local.budget_params lifecycle { ignore_changes = [ parameters[\"startDate\"], parameters[\"endDate\"] ] } } ``` ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "Therefore to solve my problem of fixating start and end dates, I resorted to using tags for start and end date and a data source querying them: ``` terraform { required_version = \"~> 0.13.0\" required_providers { azurerm = \"~> 2.37.0\" } } provider azurerm { features { template_deployment { delete_nested_items_during_deletion = false } } } data \"azurerm_resources\" \"rg\" { resource_group_name = \"test-rg\" name = \"test-rg\" } locals { budget_start_date_tag = try(data.azurerm_resources.rg.resources[0].tags.budget_start_date, \"\") budget_end_date_tag = try(data.azurerm_resources.rg.resources[0].tags.budget_end_date, \"\") should_test_budget = local.is_test_stage_boolean && var.test_budget use_budget_start_tag = length(local.budget_start_date_tag) != 0 use_budget_end_tag = length(local.budget_end_date_tag) != 0 budget_start_date = local.use_budget_start_tag ? local.budget_start_date_tag : (local.should_test_budget ? var.test_start_date : formatdate(\"YYYY-MM-01\", timestamp())) budget_end_date = local.use_budget_end_tag ? local.budget_end_date_tag : (local.should_test_budget ? var.test_end_date : formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\"))) budget_date_tags = { \"budget_start_date\" : local.budget_start_date, \"budget_end_date\" : local.budget_end_date } } #-------------------------------------------------------------------------------------------------------------------- # DSW: Resource Group # -------------------------------------------------------------------------------------------------------------------- resource \"azurerm_resource_group\" \"rg\" { # A subscription cannot have more than 980 resource groups: # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits count = local.no_addresses_available_boolean ? 0 : 1 name = \"test-rg\" location = var.location tags = local.budget_date_tags ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "} ``` @Charles Xu I did not quite test it yet and I am also not sure if this is the best solution?", "keywords": ["test"]}]}, {"Id": "237186227", "PostHistoryTypeId": "5", "PostId": "65359522", "RevisionGUID": "6e217ee4-3339-4e91-8355-756c5edd2dbf", "CreationDate": "2020-12-18T18:27:39.790", "UserId": "9698518", "Comment": "update with problematic part of the solution", "Text": "I resorted to use tags for the end and start date for the budget. The `ignore_changes` would work for the *deprecated* `azurerm_template_deployment` as parameters is of type `map` in that case and not of `json` type, like so:\r\n```\r\nterraform {\r\n  required_version = \"~> 0.13.0\"\r\n  required_providers {\r\n    azurerm = \"~> 2.37.0\"\r\n  }\r\n}\r\n\r\nprovider azurerm {\r\n  features {}\r\n}\r\n\r\nlocals {\r\n  budget_start_date = formatdate(\"YYYY-MM-01\", timestamp())\r\n  budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\"))\r\n  budget_params = {\r\n    \"budgetName\" = \"budgettest\",\r\n    \"amount\" = \"4000\",\r\n    \"timeGrain\" = \"Annually\",\r\n    \"startDate\" = local.budget_start_date,\r\n    \"endDate\" = local.budget_end_date,\r\n    \"firstThreshold\" = \"75\",\r\n    \"secondThreshold\" = \"100\",\r\n    \"thirdThreshold\" = \"50\",\r\n    \"contactGroups\" = \"\"\r\n  }\r\n  }\r\n\r\nresource \"azurerm_resource_group\" \"rg\" {\r\n  # A subscription cannot have more than 980 resource groups:\r\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\r\n  name = \"example-rg\"\r\n  location = \"westeurope\"\r\n}\r\n\r\nresource \"azurerm_template_deployment\" \"dsw_budget\" {\r\n  name = \"test-budget-template\"\r\n  resource_group_name = azurerm_resource_group.rg[0].name\r\n  deployment_mode = \"Incremental\"\r\n\r\n  template_content = file(\"${path.module}/arm/budget_deploy.json\")\r\n\r\n  parameters_content = local.budget_params\r\n  \r\n  lifecycle {\r\n    ignore_changes = [\r\n      parameters[\"startDate\"],\r\n      parameters[\"endDate\"]\r\n    ]\r\n  }\r\n\r\n}\r\n```\r\n\r\nNow this is not possible anymore with `azurerm_resource_group_template_deployment`, as json content is has to passed and therefore in `ignore_changes` a json-decoding which is a computation operation would have to be made, which is not allowed.\r\n\r\nTherefore to solve my problem of fixating start and end dates, I resorted to using tags for start and end date and a data source querying them:\r\n```\r\nterraform {\r\n  required_version = \"~> 0.13.0\"\r\n  required_providers {\r\n    azurerm = \"~> 2.37.0\"\r\n  }\r\n}\r\n\r\nprovider azurerm {\r\n  features {\r\n    template_deployment {\r\n      delete_nested_items_during_deletion = false\r\n    }\r\n  }\r\n}\r\n\r\ndata \"azurerm_resources\" \"rg\" {\r\n  resource_group_name = \"test-rg\"\r\n  name = \"test-rg\"\r\n}\r\n\r\n\r\nlocals {\r\n  budget_start_date_tag = try(data.azurerm_resources.rg.resources[0].tags.budget_start_date, \"\")\r\n  budget_end_date_tag = try(data.azurerm_resources.rg.resources[0].tags.budget_end_date, \"\")\r\n  should_test_budget = local.is_test_stage_boolean && var.test_budget\r\n  use_budget_start_tag = length(local.budget_start_date_tag) != 0\r\n  use_budget_end_tag = length(local.budget_end_date_tag) != 0\r\n  budget_start_date = local.use_budget_start_tag ? local.budget_start_date_tag : (local.should_test_budget ? var.test_start_date : formatdate(\"YYYY-MM-01\", timestamp()))\r\n  budget_end_date = local.use_budget_end_tag ? local.budget_end_date_tag : (local.should_test_budget ? var.test_end_date : formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\")))\r\n  budget_date_tags = {\r\n     \"budget_start_date\" : local.budget_start_date,\r\n     \"budget_end_date\" : local.budget_end_date\r\n  }\r\n}\r\n\r\n#--------------------------------------------------------------------------------------------------------------------\r\n# DSW: Resource Group \r\n# --------------------------------------------------------------------------------------------------------------------\r\nresource \"azurerm_resource_group\" \"rg\" {\r\n  # A subscription cannot have more than 980 resource groups:\r\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\r\n  count = local.no_addresses_available_boolean ? 0 : 1\r\n  name = \"test-rg\"\r\n  location = var.location\r\n  tags = local.budget_date_tags\r\n}\r\n```\r\n\r\n@Charles Xu I did not quite test it yet and I am also not sure if this is the best solution?\r\n\r\nEDIT: Now I actually run into cyclic dependency because the data source does obviously not exist before resource group is created: https://github.com/hashicorp/terraform/issues/16380.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The `ignore_changes` would work for the *deprecated* `azurerm_template_deployment` as parameters is of type `map` in that case and not of `json` type, like so: ``` terraform { required_version = \"~> 0.13.0\" required_providers { azurerm = \"~> 2.37.0\" } } provider azurerm { features {} } locals { budget_start_date = formatdate(\"YYYY-MM-01\", timestamp()) budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\")) budget_params = { \"budgetName\" = \"budgettest\", \"amount\" = \"4000\", \"timeGrain\" = \"Annually\", \"startDate\" = local.budget_start_date, \"endDate\" = local.budget_end_date, \"firstThreshold\" = \"75\", \"secondThreshold\" = \"100\", \"thirdThreshold\" = \"50\", \"contactGroups\" = \"\" } } resource \"azurerm_resource_group\" \"rg\" { # A subscription cannot have more than 980 resource groups: # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits name = \"example-rg\" location = \"westeurope\" } resource \"azurerm_template_deployment\" \"dsw_budget\" { name = \"test-budget-template\" resource_group_name = azurerm_resource_group.rg[0].name deployment_mode = \"Incremental\" template_content = file(\"${path.module}/arm/budget_deploy.json\") parameters_content = local.budget_params lifecycle { ignore_changes = [ parameters[\"startDate\"], parameters[\"endDate\"] ] } } ``` ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "Therefore to solve my problem of fixating start and end dates, I resorted to using tags for start and end date and a data source querying them: ``` terraform { required_version = \"~> 0.13.0\" required_providers { azurerm = \"~> 2.37.0\" } } provider azurerm { features { template_deployment { delete_nested_items_during_deletion = false } } } data \"azurerm_resources\" \"rg\" { resource_group_name = \"test-rg\" name = \"test-rg\" } locals { budget_start_date_tag = try(data.azurerm_resources.rg.resources[0].tags.budget_start_date, \"\") budget_end_date_tag = try(data.azurerm_resources.rg.resources[0].tags.budget_end_date, \"\") should_test_budget = local.is_test_stage_boolean && var.test_budget use_budget_start_tag = length(local.budget_start_date_tag) != 0 use_budget_end_tag = length(local.budget_end_date_tag) != 0 budget_start_date = local.use_budget_start_tag ? local.budget_start_date_tag : (local.should_test_budget ? var.test_start_date : formatdate(\"YYYY-MM-01\", timestamp())) budget_end_date = local.use_budget_end_tag ? local.budget_end_date_tag : (local.should_test_budget ? var.test_end_date : formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\"))) budget_date_tags = { \"budget_start_date\" : local.budget_start_date, \"budget_end_date\" : local.budget_end_date } } #-------------------------------------------------------------------------------------------------------------------- # DSW: Resource Group # -------------------------------------------------------------------------------------------------------------------- resource \"azurerm_resource_group\" \"rg\" { # A subscription cannot have more than 980 resource groups: # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits count = local.no_addresses_available_boolean ? 0 : 1 name = \"test-rg\" location = var.location tags = local.budget_date_tags } ``` ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "@Charles Xu I did not quite test it yet and I am also not sure if this is the best solution? ", "keywords": ["test"]}]}, {"Id": "237529528", "PostHistoryTypeId": "5", "PostId": "65359522", "RevisionGUID": "7ce9de44-0a43-4be4-be84-1a143392a541", "CreationDate": "2020-12-24T14:12:02.080", "UserId": "9698518", "Comment": "EDIT2: @Charles Xu This solution works now. I realized I cannot use budget tags nor resource group tags. Therefore I had to choose another resource, i.e. the Azure Machine Learning Workspace. Using the budget tags of this allows me to fixate the budget start and end date once fixed. ", "Text": "I resorted to use tags for the end and start date for the budget. The `ignore_changes` would work for the *deprecated* `azurerm_template_deployment` as parameters is of type `map` in that case and not of `json` type, like so:\r\n```\r\nterraform {\r\n  required_version = \"~> 0.13.0\"\r\n  required_providers {\r\n    azurerm = \"~> 2.37.0\"\r\n  }\r\n}\r\n\r\nprovider azurerm {\r\n  features {}\r\n}\r\n\r\nlocals {\r\n  budget_start_date = formatdate(\"YYYY-MM-01\", timestamp())\r\n  budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\"))\r\n  budget_params = {\r\n    \"budgetName\" = \"budgettest\",\r\n    \"amount\" = \"4000\",\r\n    \"timeGrain\" = \"Annually\",\r\n    \"startDate\" = local.budget_start_date,\r\n    \"endDate\" = local.budget_end_date,\r\n    \"firstThreshold\" = \"75\",\r\n    \"secondThreshold\" = \"100\",\r\n    \"thirdThreshold\" = \"50\",\r\n    \"contactGroups\" = \"\"\r\n  }\r\n  }\r\n\r\nresource \"azurerm_resource_group\" \"rg\" {\r\n  # A subscription cannot have more than 980 resource groups:\r\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\r\n  name = \"example-rg\"\r\n  location = \"westeurope\"\r\n}\r\n\r\nresource \"azurerm_template_deployment\" \"dsw_budget\" {\r\n  name = \"test-budget-template\"\r\n  resource_group_name = azurerm_resource_group.rg[0].name\r\n  deployment_mode = \"Incremental\"\r\n\r\n  template_content = file(\"${path.module}/arm/budget_deploy.json\")\r\n\r\n  parameters_content = local.budget_params\r\n  \r\n  lifecycle {\r\n    ignore_changes = [\r\n      parameters[\"startDate\"],\r\n      parameters[\"endDate\"]\r\n    ]\r\n  }\r\n\r\n}\r\n```\r\n\r\nNow this is not possible anymore with `azurerm_resource_group_template_deployment`, as json content is has to passed and therefore in `ignore_changes` a json-decoding which is a computation operation would have to be made, which is not allowed.\r\n\r\nTherefore to solve my problem of fixating start and end dates, I resorted to using tags for start and end date and a data source querying them:\r\n```\r\nterraform {\r\n  required_version = \"~> 0.13.0\"\r\n  required_providers {\r\n    azurerm = \"~> 2.37.0\"\r\n  }\r\n}\r\n\r\nprovider azurerm {\r\n  features {\r\n    template_deployment {\r\n      delete_nested_items_during_deletion = false\r\n    }\r\n  }\r\n}\r\n\r\ndata \"azurerm_resources\" \"aml\" {\r\n  resource_group_name = \"${var.tk_name_id}-${local.stage}-rg\"\r\n  type = \"Microsoft.MachineLearningServices/workspaces\"\r\n}\r\n\r\n\r\nlocals {\r\n  budget_start_date_tag = try(element(data.azurerm_resources.aml.resources[*].tags.budget_start_date, 0), \"NA\")\r\n  budget_end_date_tag = try(element(data.azurerm_resources.aml.resources[*].tags.budget_end_date, 0), \"NA\")\r\n  should_test_budget = local.is_test_stage_boolean && var.test_budget\r\n  budget_start_date = local.budget_start_date_tag != \"NA\" ? local.budget_start_date_tag : (local.should_test_budget ? \"START DATE FAIL!\" : formatdate(\"YYYY-MM-01\", timestamp()))\r\n  budget_end_date = local.budget_end_date_tag != \"NA\" ? local.budget_end_date_tag : (local.should_test_budget ? \"END DATE FAIL!\" : formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\")))\r\n  budget_date_tags = {\r\n     \"budget_start_date\" : local.budget_start_date,\r\n     \"budget_end_date\" : local.budget_end_date\r\n  }\r\n}\r\n\r\n#--------------------------------------------------------------------------------------------------------------------\r\n# DSW: Resource Group \r\n# --------------------------------------------------------------------------------------------------------------------\r\nresource \"azurerm_resource_group\" \"rg\" {\r\n  # A subscription cannot have more than 980 resource groups:\r\n  # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits\r\n  count = local.no_addresses_available_boolean ? 0 : 1\r\n  name = \"test-rg\"\r\n  location = var.location\r\n  tags = local.budget_date_tags\r\n}\r\n\r\nresource \"azurerm_machine_learning_workspace\" \"aml_workspace\" {\r\n  name = local.aml_ws_name\r\n  resource_group_name = azurerm_resource_group.rg[0].name\r\n  location = azurerm_resource_group.rg[0].location\r\n  application_insights_id = azurerm_application_insights.aml_insights.id\r\n  key_vault_id = azurerm_key_vault.aml_kv.id\r\n  storage_account_id = azurerm_storage_account.aml_st.id\r\n  container_registry_id = azurerm_container_registry.aml_acr.id\r\n  sku_name = \"Basic\"\r\n  tags = merge(var.azure_tags, local.budget_date_tags)\r\n  identity {\r\n    type = \"SystemAssigned\"\r\n  }\r\n}\r\n```\r\n\r\n@Charles Xu I did not quite test it yet and I am also not sure if this is the best solution?\r\n\r\nEDIT: Now I actually run into cyclic dependency because the data source does obviously not exist before resource group is created: https://github.com/hashicorp/terraform/issues/16380.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The `ignore_changes` would work for the *deprecated* `azurerm_template_deployment` as parameters is of type `map` in that case and not of `json` type, like so: ``` terraform { required_version = \"~> 0.13.0\" required_providers { azurerm = \"~> 2.37.0\" } } provider azurerm { features {} } locals { budget_start_date = formatdate(\"YYYY-MM-01\", timestamp()) budget_end_date = formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\")) budget_params = { \"budgetName\" = \"budgettest\", \"amount\" = \"4000\", \"timeGrain\" = \"Annually\", \"startDate\" = local.budget_start_date, \"endDate\" = local.budget_end_date, \"firstThreshold\" = \"75\", \"secondThreshold\" = \"100\", \"thirdThreshold\" = \"50\", \"contactGroups\" = \"\" } } resource \"azurerm_resource_group\" \"rg\" { # A subscription cannot have more than 980 resource groups: # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits name = \"example-rg\" location = \"westeurope\" } resource \"azurerm_template_deployment\" \"dsw_budget\" { name = \"test-budget-template\" resource_group_name = azurerm_resource_group.rg[0].name deployment_mode = \"Incremental\" template_content = file(\"${path.module}/arm/budget_deploy.json\") parameters_content = local.budget_params lifecycle { ignore_changes = [ parameters[\"startDate\"], parameters[\"endDate\"] ] } } ``` ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "Therefore to solve my problem of fixating start and end dates, I resorted to using tags for start and end date and a data source querying them: ``` terraform { required_version = \"~> 0.13.0\" required_providers { azurerm = \"~> 2.37.0\" } } provider azurerm { features { template_deployment { delete_nested_items_during_deletion = false } } } data \"azurerm_resources\" \"aml\" { resource_group_name = \"${var.tk_name_id}-${local.stage}-rg\" type = \"Microsoft.MachineLearningServices/workspaces\" } locals { budget_start_date_tag = try(element(data.azurerm_resources.aml.resources[*].tags.budget_start_date, 0), \"NA\") budget_end_date_tag = try(element(data.azurerm_resources.aml.resources[*].tags.budget_end_date, 0), \"NA\") should_test_budget = local.is_test_stage_boolean && var.test_budget budget_start_date = local.budget_start_date_tag != \"NA\" ? local.budget_start_date_tag : (local.should_test_budget ? \"START DATE FAIL!\" : formatdate(\"YYYY-MM-01\", timestamp())) budget_end_date = local.budget_end_date_tag != \"NA\" ? local.budget_end_date_tag : (local.should_test_budget ? \"END DATE FAIL!\" : formatdate(\"YYYY-MM-01\", timeadd(timestamp(), \"17568h\"))) budget_date_tags = { \"budget_start_date\" : local.budget_start_date, \"budget_end_date\" : local.budget_end_date } } #-------------------------------------------------------------------------------------------------------------------- # DSW: Resource Group # -------------------------------------------------------------------------------------------------------------------- resource \"azurerm_resource_group\" \"rg\" { # A subscription cannot have more than 980 resource groups: # https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits count = local.no_addresses_available_boolean ? 0 : 1 name = \"test-rg\" location = var.location tags = local.budget_date_tags } resource \"azurerm_machine_learning_workspace\" \"aml_workspace\" { name = local.aml_ws_name resource_group_name = azurerm_resource_group.rg[0].name location = azurerm_resource_group.rg[0].location application_insights_id = azurerm_application_insights.aml_insights.id key_vault_id = azurerm_key_vault.aml_kv.id storage_account_id = azurerm_storage_account.aml_st.id container_registry_id = azurerm_container_registry.aml_acr.id sku_name = \"Basic\" tags = merge(var.azure_tags, local.budget_date_tags) identity { type = \"SystemAssigned\" } } ``` ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "@Charles Xu I did not quite test it yet and I am also not sure if this is the best solution? ", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "Therefore to solve my problem of fixating start and end dates, I resorted to using tags for start and end date and a data source querying them: @Charles Xu I did not quite test it yet and I am also not sure if this is the best solution? ", "keywords": ["test"]}]}, {"Id": "65320786", "PostTypeId": "2", "ParentId": "65292868", "CreationDate": "2020-12-16T09:43:52.713", "Score": "0", "Body": "<p>I don't think it's right the way you use the <code>ignore_changes</code>. Take a look at the <code>ignore_changes</code> in <a href=\"https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html\" rel=\"nofollow noreferrer\"><code>lifecycle</code></a> for every resource. It should the property of the resource you want to create, not the value. In addition, if you want to change the resources via the Azure Template in Terraform, it's better to use the <code>Incremental</code> <code>deployment_mode</code>, and do not change the property that you want to ignore the changes.</p>\n", "OwnerUserId": "9773937", "LastActivityDate": "2020-12-16T09:43:52.713", "CommentCount": "8", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "115499200", "PostId": "65320786", "Score": "0", "Text": "Yes, you are right unfortunately I made a copy-paste mistake. Now it should be o.k. Still, now I guess the best way is to probably save a tag of the start date and end date in Azure and use a data source to see if the tag is already set or not. If it is set, always use that value. Or is there an option in terraform to not change the value of a variable once it is set? Probably this is against the principles of variables, but in this case that would be helpful...", "CreationDate": "2020-12-16T21:15:05.960", "UserId": "9698518", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Or is there an option in terraform to not change the value of a variable once it is set? ", "keywords": ["change"]}]}, {"Id": "115503754", "PostId": "65320786", "Score": "0", "Text": "@mgross There is an example for the tags in ignore_changes in the link I provided in the answer.", "CreationDate": "2020-12-17T01:48:08.097", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "115540421", "PostId": "65320786", "Score": "0", "Text": "@mgross Any updates on this question? Does it solve your problem?", "CreationDate": "2020-12-18T08:45:29.433", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "115550341", "PostId": "65320786", "Score": "0", "Text": "I am not sure if we had a misunderstanding: I just want that the start and end date do not change for an existing resource group until it is terminated. This is why I posted an answer below as to how I think I will resolve it.", "CreationDate": "2020-12-18T15:19:22.337", "UserId": "9698518", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am not sure if we had a misunderstanding: I just want that the start and end date do not change for an existing resource group until it is terminated. ", "keywords": ["change"]}]}, {"Id": "115600324", "PostId": "65320786", "Score": "0", "Text": "@mgross How does it work before deprecated in `azurerm_template_deployment`? The start and end dates are the tags for the group?", "CreationDate": "2020-12-21T02:33:34.823", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "115604080", "PostId": "65320786", "Score": "0", "Text": "No there I can use     ignore_changes = [\n      parameters[\"startDate\"], parameters[\"endDate\"]\n    ], because parameters does not have to be json-encoded.", "CreationDate": "2020-12-21T07:43:50.513", "UserId": "9698518", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "115606492", "PostId": "65320786", "Score": "0", "Text": "@mgross There is no start and end date for the group properties. It should be the tag for the group.", "CreationDate": "2020-12-21T09:37:32.237", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "115632215", "PostId": "65320786", "Score": "0", "Text": "@mgross I think the way you used before is that ignore the parameters in the template, but if you do not want to change the tags of the existing group, you need to do it like what I said.", "CreationDate": "2020-12-22T07:13:56.833", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I think the way you used before is that ignore the parameters in the template, but if you do not want to change the tags of the existing group, you need to do it like what I said.", "keywords": ["change"]}]}], "history": [{"Id": "237011704", "PostHistoryTypeId": "2", "PostId": "65320786", "RevisionGUID": "0ded76f2-fa3a-4766-a93a-63e5c695f97a", "CreationDate": "2020-12-16T09:43:52.713", "UserId": "9773937", "Text": "I don't think it's right the way you use the `ignore_changes`. Take a look at the `ignore_changes` in [`lifecycle`][1] for every resource. It should the property of the resource you want to create, not the value. In addition, if you want to change the resources via the Azure Template in Terraform, it's better to use the `Incremental` `deployment_mode`, and do not change the property that you want to ignore the changes. \r\n\r\n\r\n  [1]: https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "In addition, if you want to change the resources via the Azure Template in Terraform, it's better to use the `Incremental` `deployment_mode`, and do not change the property that you want to ignore the changes. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "In addition, if you want to change the resources via the Azure Template in Terraform, it's better to use the Incremental deployment_mode, and do not change the property that you want to ignore the changes.", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "How can I use azurerm_resource_group_template_deployment for azure budget resource but ignore changes in start and end date?", "keywords": ["change"]}, {"source": "Body", "text": "But there is the problem that Terraform wants to reapply the resource every month, so I thought I could tell to ignore changes to start date and end date, but this would (opposite to the deprecated resource azurerm_template_deployment) need a compute operation, namely jsondecode, which is not allowed. ", "keywords": ["change"]}]}