{"Id": "60233243", "PostTypeId": "1", "CreationDate": "2020-02-14T20:41:10.183", "Score": "0", "ViewCount": "703", "Body": "<p><a href=\"https://i.stack.imgur.com/090Pg.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/090Pg.png\" alt=\"enter image description here\"></a>Asking the community if it's possible to do the following. (had no luck in finding further information) </p>\n\n<p>I create a ci/cd pipeline with Github/cloudbuild/Terraform. I have cloudbuild build terraform configuration upon github pull request and merge to new branch. However, I have cloudbuild service account (Default) use with least privilege. \nQuestion adheres, I would like terraform to pull permission from an existing service account with least privilege to prevent any exploits, etc. once cloudbuild gets pull build triggers to init terraform configuration. At this time, i.e terraform will extract existing external SA to obtain permission to build TF. \nI tried to use service account, and binding roles to that service account but error happens that \nstates service account already existences. \nNext step, is for me to use a module but I think this is also going to create a new SA with replicated roles. \nIf this is confusing I do apologize, I will help in refining the question to be more concise. </p>\n", "OwnerUserId": "10015397", "LastEditorUserId": "10015397", "LastEditDate": "2020-02-18T19:18:30.910", "LastActivityDate": "2020-02-19T09:40:08.760", "Title": "adding existing GCP service account to Terraform root module for cloudbuild to build Terraform configuration", "Tags": "<google-cloud-platform><terraform-provider-gcp>", "AnswerCount": "1", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "106548999", "PostId": "60233243", "Score": "0", "Text": "Not sure to clearly understand. Do you want to handle service account not created by Terraform? Do have example to illustrate your case?", "CreationDate": "2020-02-15T08:56:14.693", "UserId": "11372593", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "106641593", "PostId": "60233243", "Score": "0", "Text": "Yes I do want to handle the authoritative service account for terraform build process to be import or export from GCP IAM project of which it is being provisioned by.", "CreationDate": "2020-02-18T19:06:34.017", "UserId": "10015397", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "106642743", "PostId": "60233243", "Score": "0", "Text": "Just for clarifuing. 1) Where do you run your terraform? On Cloud Build? On VM? 2) I understood that you don't want to reuse Cloud Build SA. Why? Do you prefer to use a temporarily SA created only for Terraform?", "CreationDate": "2020-02-18T19:51:51.393", "UserId": "11372593", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "106647326", "PostId": "60233243", "Score": "0", "Text": "Yes I execute TerraForm from the cloudbuild. \nI am seeing if it's possible to use a more less privilege service account in substitute of cloud build default service account. I think I could configure cloud build to use such account but I'm researching if possible at TerraForm level. @guillaume blaquiere", "CreationDate": "2020-02-18T23:10:50.307", "UserId": "10015397", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "215009783", "PostHistoryTypeId": "2", "PostId": "60233243", "RevisionGUID": "d2691183-58e8-4cdb-831d-67725b247beb", "CreationDate": "2020-02-14T20:41:10.183", "UserId": "10015397", "Text": "Asking the community if it's possible to do the following. (had no luck in finding further information) \r\n\r\nI create a ci/cd pipeline with Github/cloudbuild/Terraform. I have cloudbuild build terraform configuration upon github pull request and merge to new branch. However, I have cloudbuild service account (Default) use with least privilege. \r\nQuestion adheres, I would like terraform to pull permission from an existing service account with least privilege to prevent any exploits, etc. once cloudbuild gets pull build triggers to init terraform configuration. At this time, i.e terraform will extract existing external SA to obtain permission to build TF. \r\nI tried to use service account, and binding roles to that service account but error happens that \r\nstates service account already existences. \r\nNext step, is for me to use a module but I think this is also going to create a new SA with replicated roles. \r\nIf this is confusing I do apologize, I will help in refining the question to be more concise. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "215009784", "PostHistoryTypeId": "1", "PostId": "60233243", "RevisionGUID": "d2691183-58e8-4cdb-831d-67725b247beb", "CreationDate": "2020-02-14T20:41:10.183", "UserId": "10015397", "Text": "adding existing GCP service account to Terraform root module for cloudbuild to build Terraform configuration", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "215009785", "PostHistoryTypeId": "3", "PostId": "60233243", "RevisionGUID": "d2691183-58e8-4cdb-831d-67725b247beb", "CreationDate": "2020-02-14T20:41:10.183", "UserId": "10015397", "Text": "<google-cloud-platform><terraform-provider-gcp>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "215246124", "PostHistoryTypeId": "5", "PostId": "60233243", "RevisionGUID": "dac0cb57-fd17-486a-9939-0e337499ca43", "CreationDate": "2020-02-18T19:18:30.910", "UserId": "10015397", "Comment": "Adding a visual explanation ", "Text": "[![enter image description here][1]][1]Asking the community if it's possible to do the following. (had no luck in finding further information) \r\n\r\nI create a ci/cd pipeline with Github/cloudbuild/Terraform. I have cloudbuild build terraform configuration upon github pull request and merge to new branch. However, I have cloudbuild service account (Default) use with least privilege. \r\nQuestion adheres, I would like terraform to pull permission from an existing service account with least privilege to prevent any exploits, etc. once cloudbuild gets pull build triggers to init terraform configuration. At this time, i.e terraform will extract existing external SA to obtain permission to build TF. \r\nI tried to use service account, and binding roles to that service account but error happens that \r\nstates service account already existences. \r\nNext step, is for me to use a module but I think this is also going to create a new SA with replicated roles. \r\nIf this is confusing I do apologize, I will help in refining the question to be more concise. \r\n\r\n\r\n  [1]: https://i.stack.imgur.com/090Pg.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "60297166", "PostTypeId": "2", "ParentId": "60233243", "CreationDate": "2020-02-19T09:40:08.760", "Score": "1", "Body": "<p>You have 2 solutions:</p>\n\n<ol>\n<li>Use the Cloud Build service account when you execute your Terraform. Your provider look like this:</li>\n</ol>\n\n<pre><code>provider \"google\" {\n//  Useless with Cloud Build\n//  credentials = file(\"${var.CREDENTIAL_FILE}}\")\n  project = var.PROJECT_ID\n  region = \"europe-west1\"\n}\n</code></pre>\n\n<p>But this solution implies to grant several roles to Cloud Build only for Terraform process. A custom role is a good choice for granting only what is required.</p>\n\n<ol start=\"2\">\n<li><p>The second solution is to use a service account key file. Here again 2 solutions:</p>\n\n<ul>\n<li>Cloud Build creates the service account, grant all the role on it, generates a key and passes it to terraform. After the terraform execution, the service account is deleted by Cloud Build. Good solution, but you have to grant Cloud Build service account the capability to grant itself any roles and to generate a json Key file. That's a lot a responsibility!</li>\n<li>Use an existing service account and the key generated on it. But you have to secure the key and to rotate it regularly. I recommend you to securely store it in <a href=\"https://cloud.google.com/secret-manager/docs\" rel=\"nofollow noreferrer\">secret manager</a>, but for the rotation, you have to manage it by yourselves, today. With this process, Cloud Build download the key (in secret manager) and pass it to terraform. Here again, the Cloud Build service account has the right to access to secrets, that is a critical privilege. The step in Cloud Build is something like this:</li>\n</ul></li>\n</ol>\n\n<pre><code>steps:\n        - name: gcr.io/cloud-builders/gcloud:latest\n          entrypoint: \"bash\"\n          args:\n                  - \"-c\"\n                  - |\n                      gcloud beta secrets versions access --secret=test-secret latest &gt; my-secret-file.txt\n</code></pre>\n", "OwnerUserId": "11372593", "LastActivityDate": "2020-02-19T09:40:08.760", "CommentCount": "7", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "106685300", "PostId": "60297166", "Score": "0", "Text": "tested and it works the way I was seeking \nThank you", "CreationDate": "2020-02-20T00:28:12.083", "UserId": "10015397", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "tested and it works the way I was seeking Thank you", "keywords": ["test"]}]}, {"Id": "108180057", "PostId": "60297166", "Score": "0", "Text": "Just food for thought, would it be possible to add a service-account to be used instead of user credentials? meaning in cloudbuild > gcloud config set account {name of service account} for cloud build to pull the custom roles and permissions to be used?", "CreationDate": "2020-04-10T22:57:43.133", "UserId": "10015397", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "108190127", "PostId": "60297166", "Score": "0", "Text": "Do you want to use a custom service account for Cloud Build instead of using the default one?", "CreationDate": "2020-04-11T11:28:01.460", "UserId": "11372593", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "108193925", "PostId": "60297166", "Score": "0", "Text": "Yes that is correct, I was looking at the gcloud --impersonate-service-account but I'll need to test more. I'm seeing if their's more ways than one to do this", "CreationDate": "2020-04-11T14:29:55.227", "UserId": "10015397", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Yes that is correct, I was looking at the gcloud --impersonate-service-account but I'll need to test more. ", "keywords": ["test"]}]}, {"Id": "108200793", "PostId": "60297166", "Score": "0", "Text": "Today, you can't customize the Cloud Build service account, you have to grant the correct role to the default Cloud Build service account. I know that this feature is in the roadmap, but I don't have any idea about the timeline, especially with the current COVID crisis", "CreationDate": "2020-04-11T19:13:00.807", "UserId": "11372593", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I know that this feature is in the roadmap, but I don't have any idea about the timeline, especially with the current COVID crisis", "keywords": ["feature"]}]}, {"Id": "108263650", "PostId": "60297166", "Score": "0", "Text": "I was creating automation for the TerraForm provisioning GCP project and services. I found upon my research that for now, we will need to have a cloud build default service account (at org_level) that must have billing account user and project creator for cloud build to execute TerraForm config file to provision GCP projects from Terraform admin project. Thus, you could supplement the service account in cloudbuild.yaml with using secret but then this opens up, a new risk of vulnerabilities on top of having a cloud build service account already having organizational permission.", "CreationDate": "2020-04-13T23:11:55.297", "UserId": "10015397", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I found upon my research that for now, we will need to have a cloud build default service account (at org_level) that must have billing account user and project creator for cloud build to execute TerraForm config file to provision GCP projects from Terraform admin project. ", "keywords": ["bill"]}]}, {"Id": "108263664", "PostId": "60297166", "Score": "1", "Text": "Thank you for your rapid response over the week and expertise. Was very much appreciated during this process.", "CreationDate": "2020-04-13T23:12:57.043", "UserId": "10015397", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "215284216", "PostHistoryTypeId": "2", "PostId": "60297166", "RevisionGUID": "9c20c5e6-cdb9-4f7a-8c3b-007a62f3fc0e", "CreationDate": "2020-02-19T09:40:08.760", "UserId": "11372593", "Text": "You have 2 solutions:\r\n\r\n1. Use the Cloud Build service account when you execute your Terraform. Your provider look like this:\r\n\r\n```\r\nprovider \"google\" {\r\n//  Useless with Cloud Build\r\n//  credentials = file(\"${var.CREDENTIAL_FILE}}\")\r\n  project = var.PROJECT_ID\r\n  region = \"europe-west1\"\r\n}\r\n```\r\nBut this solution implies to grant several roles to Cloud Build only for Terraform process. A custom role is a good choice for granting only what is required.\r\n\r\n2. The second solution is to use a service account key file. Here again 2 solutions:\r\n\r\n  *  Cloud Build creates the service account, grant all the role on it, generates a key and passes it to terraform. After the terraform execution, the service account is deleted by Cloud Build. Good solution, but you have to grant Cloud Build service account the capability to grant itself any roles and to generate a json Key file. That's a lot a responsibility!\r\n  * Use an existing service account and the key generated on it. But you have to secure the key and to rotate it regularly. I recommend you to securely store it in [secret manager](https://cloud.google.com/secret-manager/docs), but for the rotation, you have to manage it by yourselves, today. With this process, Cloud Build download the key (in secret manager) and pass it to terraform. Here again, the Cloud Build service account has the right to access to secrets, that is a critical privilege. The step in Cloud Build is something like this:\r\n\r\n```\r\nsteps:\r\n        - name: gcr.io/cloud-builders/gcloud:latest\r\n          entrypoint: \"bash\"\r\n          args:\r\n                  - \"-c\"\r\n                  - |\r\n                      gcloud beta secrets versions access --secret=test-secret latest > my-secret-file.txt\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Your provider look like this: ``` provider \"google\" { // Useless with Cloud Build // credentials = file(\"${var.CREDENTIAL_FILE}}\") project = var.PROJECT_ID region = \"europe-west1\" } ``` ", "keywords": ["provider"]}, {"source": "Text", "text": "The step in Cloud Build is something like this: ``` steps: - name: gcr.io/cloud-builders/gcloud:latest entrypoint: \"bash\" args: - \"-c\" - | gcloud beta secrets versions access --secret=test-secret latest > my-secret-file.txt ```", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "Your provider look like this: But this solution implies to grant several roles to Cloud Build only for Terraform process. ", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": []}