{"Id": "74583280", "PostTypeId": "1", "CreationDate": "2022-11-26T15:07:08.297", "Score": "0", "ViewCount": "29", "Body": "<p>Given the map of objects that contains a list of repeating strings:</p>\n<pre><code>variable &quot;input_var&quot; = {\n  type = object(map(\n    name = string\n    tags = optional(list(string))\n  )),\n  default = {\n    &quot;one&quot; = {\n      name = &quot;nameone&quot;\n      tags = [&quot;tag1&quot;, &quot;tag2&quot;]\n    }\n    &quot;two&quot; = {\n      name = &quot;nametwo&quot;\n      tags = [&quot;tag1&quot;, &quot;tag3&quot;]\n    }\n    &quot;three&quot; = {\n      name = &quot;namethree&quot;\n      tags = [&quot;tag2&quot;]\n    }\n    &quot;four&quot; = { \n      name = &quot;namefour&quot;\n    }\n  }\n}\n</code></pre>\n<p>I want to create a map with keys being the tags from all elements of <code>var.input_var</code>.\nTaking the above defaults, a sample of output is:</p>\n<pre><code>{\n  &quot;tag1&quot;: [\n    {\n      name = &quot;nameone&quot;\n      key = &quot;one&quot;\n    },\n    {\n      name = &quot;nametwo&quot;\n      key = &quot;two&quot;\n    },\n  ],\n  &quot;tag2&quot;: [\n    {\n      name = &quot;namethree&quot;\n      key = &quot;three&quot;\n    }\n  ],\n  &quot;tag3&quot;: [\n    {\n      name = &quot;nametwo&quot;\n      key = &quot;two&quot;\n    }\n  ]\n}\n</code></pre>\n<p>I was able to achieve this in a two step steps.</p>\n<p>First is to create a unique set of tags:</p>\n<pre><code>locals{\n  tags_set = distinct(flatten([\n    for k, v in var.input_var: coalesce(v.tags, [])\n  ]))\n}\n</code></pre>\n<p>followed by creating the (local) map out of <code>local.tags_set</code>:</p>\n<pre><code>tags_map = { for key_tag in local.tags_set:\n    key_tag =&gt; flatten([for k, v in var.input_var: [\n      for tag in coalesce(v.tags, []) : {\n        key = k\n        name = v.name\n      } if tag == key_tag\n  ]]) }\n</code></pre>\n<p>Is there a better implementation for this, in a single step and/or more efficient?</p>\n", "OwnerUserId": "1958032", "LastActivityDate": "2022-11-26T15:07:08.297", "Title": "How to create a map by switching keys and values from another map in Terraform?", "Tags": "<terraform>", "AnswerCount": "0", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131656480", "PostId": "74583280", "Score": "0", "Text": "What's wrong with the current code?", "CreationDate": "2022-11-26T23:24:20.797", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131956195", "PostId": "74583280", "Score": "0", "Text": "@Marcin nothing is wrong. I am a beginner in Terraform and created this so I am thinking there must be a better/cleaner way that I am not aware of (as a beginner).", "CreationDate": "2022-12-12T08:22:16.623", "UserId": "1958032", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "283052304", "PostHistoryTypeId": "2", "PostId": "74583280", "RevisionGUID": "ff3d75e9-4249-4a67-a77a-3a32dae3a19e", "CreationDate": "2022-11-26T15:07:08.297", "UserId": "1958032", "Text": "Given the map of objects that contains a list of repeating strings:\r\n\r\n```\r\nvariable \"input_var\" = {\r\n  type = object(map(\r\n    name = string\r\n    tags = optional(list(string))\r\n  )),\r\n  default = {\r\n    \"one\" = {\r\n      name = \"nameone\"\r\n      tags = [\"tag1\", \"tag2\"]\r\n    }\r\n    \"two\" = {\r\n      name = \"nametwo\"\r\n      tags = [\"tag1\", \"tag3\"]\r\n    }\r\n    \"three\" = {\r\n      name = \"namethree\"\r\n      tags = [\"tag2\"]\r\n    }\r\n    \"four\" = { \r\n      name = \"namefour\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI want to create a map with keys being the tags from all elements of `var.input_var`. \r\nTaking the above defaults, a sample of output is:\r\n\r\n```\r\n{\r\n  \"tag1\": [\r\n    {\r\n      name = \"nameone\"\r\n      key = \"one\"\r\n    },\r\n    {\r\n      name = \"nametwo\"\r\n      key = \"two\"\r\n    },\r\n  ],\r\n  \"tag2\": [\r\n    {\r\n      name = \"namethree\"\r\n      key = \"three\"\r\n    }\r\n  ],\r\n  \"tag3\": [\r\n    {\r\n      name = \"nametwo\"\r\n      key = \"two\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nI was able to achieve this in a two step steps.\r\n\r\nFirst is to create a unique set of tags:\r\n\r\n```\r\nlocals{\r\n  tags_set = distinct(flatten([\r\n    for k, v in var.input_var: coalesce(v.tags, [])\r\n  ]))\r\n}\r\n```\r\n\r\nfollowed by creating the (local) map out of `local.tags_set`:\r\n\r\n```\r\ntags_map = { for key_tag in local.tags_set:\r\n    key_tag => flatten([for k, v in var.input_var: [\r\n      for tag in coalesce(v.tags, []) : {\r\n        key = k\r\n        name = v.name\r\n      } if tag == key_tag\r\n  ]]) }\r\n```\r\n\r\nIs there a better implementation for this, in a single step and/or more efficient?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Is there a better implementation for this, in a single step and/or more efficient", "keywords": ["efficient"]}]}, {"Id": "283052306", "PostHistoryTypeId": "1", "PostId": "74583280", "RevisionGUID": "ff3d75e9-4249-4a67-a77a-3a32dae3a19e", "CreationDate": "2022-11-26T15:07:08.297", "UserId": "1958032", "Text": "How to create a map by switching keys and values from another map in Terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "283052307", "PostHistoryTypeId": "3", "PostId": "74583280", "RevisionGUID": "ff3d75e9-4249-4a67-a77a-3a32dae3a19e", "CreationDate": "2022-11-26T15:07:08.297", "UserId": "1958032", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": false, "filtered-sentences": [{"source": "Body", "text": "Is there a better implementation for this, in a single step and/or more efficient?", "keywords": ["efficient"]}]}