{"Id": "65841363", "PostTypeId": "1", "CreationDate": "2021-01-22T08:06:22.157", "Score": "0", "ViewCount": "641", "Body": "<p>I am creating an aws budget alarm using terraform. I know how to create one alarm for specific account in aws.\nI want to create a terraform code where I will be able to create for example 100 budget alarms for 100 accounts in aws.\nI can't create one budget alarm for all accounts because I want to bill my expenses separately and if any of these accounts exceeds the budget I want to receive an email.</p>\n<p>How to implement this?</p>\n", "OwnerUserId": "13679264", "LastActivityDate": "2021-04-14T06:23:22.747", "Title": "How to create aws budget alarm for every account separately?", "Tags": "<amazon-web-services><terraform>", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "239263430", "PostHistoryTypeId": "2", "PostId": "65841363", "RevisionGUID": "619e43e1-15c5-45d1-85da-c65fa29c17f6", "CreationDate": "2021-01-22T08:06:22.157", "UserId": "13679264", "Text": "I am creating an aws budget alarm using terraform. I know how to create one alarm for specific account in aws.\r\nI want to create a terraform code where I will be able to create for example 100 budget alarms for 100 accounts in aws. \r\nI can't create one budget alarm for all accounts because I want to bill my expenses separately and if any of these accounts exceeds the budget I want to receive an email.\r\n\r\nHow to implement this?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I can't create one budget alarm for all accounts because I want to bill my expenses separately and if any of these accounts exceeds the budget I want to receive an email. ", "keywords": ["bill", "expense"]}]}, {"Id": "239263431", "PostHistoryTypeId": "1", "PostId": "65841363", "RevisionGUID": "619e43e1-15c5-45d1-85da-c65fa29c17f6", "CreationDate": "2021-01-22T08:06:22.157", "UserId": "13679264", "Text": "How to create aws budget alarm for every account separately?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "239263432", "PostHistoryTypeId": "3", "PostId": "65841363", "RevisionGUID": "619e43e1-15c5-45d1-85da-c65fa29c17f6", "CreationDate": "2021-01-22T08:06:22.157", "UserId": "13679264", "Text": "<amazon-web-services><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "67086485", "PostTypeId": "2", "ParentId": "65841363", "CreationDate": "2021-04-14T06:23:22.747", "Score": "2", "Body": "<p>For this task, I agree with <code>@samtoddler</code> that AWS StackSets would solve the problem better than Terraform. But if you still want to go with Terraform, one approach would be creating a terraform module and use it in your target accounts.</p>\n<p>I wrote this module if you need <a href=\"https://github.com/rribeiro1/terraform-aws-budget-alarms\" rel=\"nofollow noreferrer\">Budget Alarms for Terraform</a>. It can also be integrated with Slack for receiving notifications.</p>\n", "OwnerUserId": "7690356", "LastActivityDate": "2021-04-14T06:23:22.747", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "244623608", "PostHistoryTypeId": "2", "PostId": "67086485", "RevisionGUID": "678e2206-cb12-4f32-85f7-f10d082a3535", "CreationDate": "2021-04-14T06:23:22.747", "UserId": "7690356", "Text": "For this task, I agree with `@samtoddler` that AWS StackSets would solve the problem better than Terraform. But if you still want to go with Terraform, one approach would be creating a terraform module and use it in your target accounts.\r\n\r\nI wrote this module if you need [Budget Alarms for Terraform](https://github.com/rribeiro1/terraform-aws-budget-alarms). It can also be integrated with Slack for receiving notifications.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "65843137", "PostTypeId": "2", "ParentId": "65841363", "CreationDate": "2021-01-22T10:10:22.033", "Score": "0", "Body": "<p>You need setup to <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\" rel=\"nofollow noreferrer\">terrform aws providers</a> with cross-account <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html\" rel=\"nofollow noreferrer\">Delegate access across AWS accounts using IAM roles</a> IAM roles access for each account and then subsequently use them while creating the budget alerts.</p>\n<pre><code>\nprovider &quot;aws&quot; {\n  alias  = &quot;myaccount&quot;\n  region = &quot;eu-central-1&quot;\n\n  assume_role {\n    role_arn = &quot;arn:aws:iam::1234567890:role/AdminRole&quot;\n  }\n\n  allowed_account_ids = [&quot;1234567890&quot;]\n}\n\n</code></pre>\n<p>And then eventually use them for various resources</p>\n<pre><code>resource &quot;aws_budgets_budget&quot; &quot;cost&quot; {\n  provider = &quot;aws.myaccount&quot;\n  # ...\n  budget_type  = &quot;COST&quot;\n  limit_amount = &quot;100&quot;\n  limit_unit   = &quot;USD&quot;\n}\n\n</code></pre>\n<p><code>OR</code></p>\n<p>If you are using <a href=\"https://aws.amazon.com/organizations/\" rel=\"nofollow noreferrer\">AWS Organizations</a> to centrally manage accounts.</p>\n<p>You can use <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/what-is-cfnstacksets.html\" rel=\"nofollow noreferrer\">AWS StackSets</a> to create a codebuild job in the destination account with your terraform code which creates the alerts.</p>\n<p><code>Preferred</code> way because this will take care of creating the codebuild job as soon as the new account is available(`depending on your configure weather to do in the whole Organization or use Organization Units(OU).</p>\n<p>Then you can use lambda in the <code>organizations master account</code> to invoke that codebuild job with custom params like the <code>budget</code> for that particular account. This too can be automated if we send back an event(<code>SNS</code>) from the destination account to master account and hook our lambda to the same.</p>\n<p>If you are tagging your AWS accounts <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html\" rel=\"nofollow noreferrer\">Tagging AWS Organizations resources</a> you can have some information predefined somewhere in <code>DynamoDB</code> and use that in your lambda to invoke the corresponding codebuild job.</p>\n<p><code>OR</code></p>\n<p>Just create a <code>stackset</code> and with some cloudformation code like below and which triggers from the <code>organization master account</code> with the <code>budget</code> amount as param to the stack.</p>\n<ul>\n<li>whole Organization</li>\n<li>per Organization Unit(<code>OU</code>),</li>\n<li>per account.</li>\n</ul>\n<pre class=\"lang-yaml prettyprint-override\"><code>Resources:\n\n  # note that changing some attributes on Budget resources will result in an error.\n  # this unfortunately is a cloudformation error described here: https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/365\n  # workaround is to delete the budget resource and then re-add it.\n  Budget:\n    Type: AWS::Budgets::Budget\n    Properties:\n      Budget:\n        BudgetName: !Sub '${resourcePrefix}-budget-${AWSAccount.Alias}' # AWSAccount.Alias resolves to IAM Alias of current account\n        BudgetLimit:\n          Amount: !GetAtt AWSAccount.Tags.budget-alarm-threshold # Resolves to value of tag of current account\n          Unit: USD\n        TimeUnit: MONTHLY\n        BudgetType: COST\n      NotificationsWithSubscribers:\n        - Notification:\n            NotificationType: FORECASTED\n            ComparisonOperator: GREATER_THAN\n            Threshold: 1\n          Subscribers:\n            - SubscriptionType: SNS\n              Address: !Ref BudgetAlarmTopic\n            - SubscriptionType: EMAIL\n              Address: olaf_conijn@hotmail.com\n</code></pre>\n", "OwnerUserId": "2246345", "LastEditorUserId": "2246345", "LastEditDate": "2021-01-22T11:04:04.857", "LastActivityDate": "2021-01-22T11:04:04.857", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "239270728", "PostHistoryTypeId": "2", "PostId": "65843137", "RevisionGUID": "82c2f9f2-6aac-4895-8a37-1e631895b873", "CreationDate": "2021-01-22T10:10:22.033", "UserId": "2246345", "Text": "Assuming you are using [AWS Organizations](https://aws.amazon.com/organizations/) to centrally manage accounts.\r\n\r\n\r\n```hcl\r\ndata \"aws_organizations_organization\" \"example\" {}\r\n\r\noutput \"account_ids\" {\r\n  value = data.aws_organizations_organization.example.accounts[*].id\r\n}\r\n```\r\n\r\nYou get all the accounts in the organization and now you just have to iterate, like below I am trying to generate some policy arn(`just an example`):\r\n\r\n```hcl\r\ndata \"aws_organizations_organization\" \"example\" {}\r\n\r\noutput \"account_ids\" {\r\n  value = data.aws_organizations_organization.example.accounts[*].id\r\n}\r\nresource \"aws_iam_role\" \"example_long\" {\r\n  name = \"example-long\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": ${jsonencode(formatlist(\"arn:aws:iam::%s:root\", data.aws_organizations_organization.example.accounts[*].id))}\r\n      },\r\n      \"Action\": \"sts:AssumeRole\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n```\r\n\r\n`OR`\r\n\r\n\r\nYou can use [AWS StackSets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/what-is-cfnstacksets.html) to create a codebuild job in the destination account with your terraform code which creates the alerts.\r\n\r\n\r\nThen you can use lambda in the `organizations master account` to invoke that codebuild job with custom params like the `budget` for that particular account. OR\r\n\r\nIf you are tagging your AWS accounts [Tagging AWS Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) you can have some information predefined somewhere in `DynamoDB` and use that in your lambda to invoke the corresponding codebuild job.\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You get all the accounts in the organization and now you just have to iterate, like below I am trying to generate some policy arn(`just an example`): ```hcl data \"aws_organizations_organization\" \"example\" {} output \"account_ids\" { value = data.aws_organizations_organization.example.accounts[*].id } resource \"aws_iam_role\" \"example_long\" { name = \"example-long\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": ${jsonencode(formatlist(\"arn:aws:iam::%s:root\", data.aws_organizations_organization.example.accounts[*].id))} }, \"Action\": \"sts:AssumeRole\" } ] } EOF } ``` ", "keywords": ["policy"]}]}, {"Id": "239271139", "PostHistoryTypeId": "5", "PostId": "65843137", "RevisionGUID": "15fd900f-6d3e-46df-a080-a367c87ddd2f", "CreationDate": "2021-01-22T10:17:24.680", "UserId": "2246345", "Comment": "added 352 characters in body", "Text": "Assuming you are using [AWS Organizations](https://aws.amazon.com/organizations/) to centrally manage accounts.\r\n\r\n\r\n```hcl\r\ndata \"aws_organizations_organization\" \"example\" {}\r\n\r\noutput \"account_ids\" {\r\n  value = data.aws_organizations_organization.example.accounts[*].id\r\n}\r\n```\r\n\r\nYou get all the accounts in the organization and now you just have to iterate, like below I am trying to generate some policy arn(`just an example`):\r\n\r\n```hcl\r\ndata \"aws_organizations_organization\" \"example\" {}\r\n\r\noutput \"account_ids\" {\r\n  value = data.aws_organizations_organization.example.accounts[*].id\r\n}\r\nresource \"aws_iam_role\" \"example_long\" {\r\n  name = \"example-long\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": ${jsonencode(formatlist(\"arn:aws:iam::%s:root\", data.aws_organizations_organization.example.accounts[*].id))}\r\n      },\r\n      \"Action\": \"sts:AssumeRole\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n```\r\n\r\n`OR`\r\n\r\n\r\nYou can use [AWS StackSets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/what-is-cfnstacksets.html) to create a codebuild job in the destination account with your terraform code which creates the alerts. \r\n\r\n`Preferred` way because this will take care of creating the codebuild job as soon as the new account is available(`depending on your configure weather to do in the whole Organization or use Organization Units(OU).\r\n \r\nThen you can use lambda in the `organizations master account` to invoke that codebuild job with custom params like the `budget` for that particular account.This too can be automated if we send back an event(`SNS`) from the destination account to master account and hook our lambda to the same. \r\n\r\nIf you are tagging your AWS accounts [Tagging AWS Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) you can have some information predefined somewhere in `DynamoDB` and use that in your lambda to invoke the corresponding codebuild job.\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You get all the accounts in the organization and now you just have to iterate, like below I am trying to generate some policy arn(`just an example`): ```hcl data \"aws_organizations_organization\" \"example\" {} output \"account_ids\" { value = data.aws_organizations_organization.example.accounts[*].id } resource \"aws_iam_role\" \"example_long\" { name = \"example-long\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": ${jsonencode(formatlist(\"arn:aws:iam::%s:root\", data.aws_organizations_organization.example.accounts[*].id))} }, \"Action\": \"sts:AssumeRole\" } ] } EOF } ``` ", "keywords": ["policy"]}]}, {"Id": "239272133", "PostHistoryTypeId": "5", "PostId": "65843137", "RevisionGUID": "a42efaaa-3022-421b-89fd-5305b79823f6", "CreationDate": "2021-01-22T10:32:41.830", "UserId": "2246345", "Comment": "added 352 characters in body", "Text": "Assuming you are using [AWS Organizations](https://aws.amazon.com/organizations/) to centrally manage accounts.\r\n\r\n\r\n```hcl\r\ndata \"aws_organizations_organization\" \"example\" {}\r\n\r\noutput \"account_ids\" {\r\n  value = data.aws_organizations_organization.example.accounts[*].id\r\n}\r\n```\r\n\r\nYou get all the accounts in the organization and now you just have to iterate, like below I am trying to generate some policy arn(`just an example`):\r\n\r\n```hcl\r\ndata \"aws_organizations_organization\" \"example\" {}\r\n\r\noutput \"account_ids\" {\r\n  value = data.aws_organizations_organization.example.accounts[*].id\r\n}\r\nresource \"aws_iam_role\" \"example_long\" {\r\n  name = \"example-long\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": ${jsonencode(formatlist(\"arn:aws:iam::%s:root\", data.aws_organizations_organization.example.accounts[*].id))}\r\n      },\r\n      \"Action\": \"sts:AssumeRole\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n```\r\n\r\n`OR`\r\n\r\n\r\nYou can use [AWS StackSets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/what-is-cfnstacksets.html) to create a codebuild job in the destination account with your terraform code which creates the alerts. \r\n\r\n`Preferred` way because this will take care of creating the codebuild job as soon as the new account is available(`depending on your configure weather to do in the whole Organization or use Organization Units(OU).\r\n \r\nThen you can use lambda in the `organizations master account` to invoke that codebuild job with custom params like the `budget` for that particular account.This too can be automated if we send back an event(`SNS`) from the destination account to master account and hook our lambda to the same. \r\n\r\nIf you are tagging your AWS accounts [Tagging AWS Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) you can have some information predefined somewhere in `DynamoDB` and use that in your lambda to invoke the corresponding codebuild job.\r\n\r\n`OR`\r\n\r\nJust create a `stackset` and with some cloudformation code like below and which triggers from the `organization master account` with the `budget` amount as param to the stack. \r\n\r\n* whole Organization\r\n* per Organization Unit(`OU`),\r\n* per account.\r\n\r\n```yaml\r\nResources:\r\n\r\n  # note that changing some attributes on Budget resources will result in an error.\r\n  # this unfortunately is a cloudformation error described here: https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/365\r\n  # workaround is to delete the budget resource and then re-add it.\r\n  Budget:\r\n    Type: AWS::Budgets::Budget\r\n    Properties:\r\n      Budget:\r\n        BudgetName: !Sub '${resourcePrefix}-budget-${AWSAccount.Alias}' # AWSAccount.Alias resolves to IAM Alias of current account\r\n        BudgetLimit:\r\n          Amount: !GetAtt AWSAccount.Tags.budget-alarm-threshold # Resolves to value of tag of current account\r\n          Unit: USD\r\n        TimeUnit: MONTHLY\r\n        BudgetType: COST\r\n      NotificationsWithSubscribers:\r\n        - Notification:\r\n            NotificationType: FORECASTED\r\n            ComparisonOperator: GREATER_THAN\r\n            Threshold: 1\r\n          Subscribers:\r\n            - SubscriptionType: SNS\r\n              Address: !Ref BudgetAlarmTopic\r\n            - SubscriptionType: EMAIL\r\n              Address: olaf_conijn@hotmail.com\r\n```\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You get all the accounts in the organization and now you just have to iterate, like below I am trying to generate some policy arn(`just an example`): ```hcl data \"aws_organizations_organization\" \"example\" {} output \"account_ids\" { value = data.aws_organizations_organization.example.accounts[*].id } resource \"aws_iam_role\" \"example_long\" { name = \"example-long\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": ${jsonencode(formatlist(\"arn:aws:iam::%s:root\", data.aws_organizations_organization.example.accounts[*].id))} }, \"Action\": \"sts:AssumeRole\" } ] } EOF } ``` ", "keywords": ["policy"]}, {"source": "Text", "text": "```yaml Resources: # note that changing some attributes on Budget resources will result in an error. ", "keywords": ["change"]}, {"source": "Text", "text": "Budget: Type: AWS::Budgets::Budget Properties: Budget: BudgetName: !Sub '${resourcePrefix}-budget-${AWSAccount.Alias}' # AWSAccount.Alias resolves to IAM Alias of current account BudgetLimit: Amount: !GetAtt AWSAccount.Tags.budget-alarm-threshold # Resolves to value of tag of current account Unit: USD TimeUnit: MONTHLY BudgetType: COST NotificationsWithSubscribers: - Notification: NotificationType: FORECASTED ComparisonOperator: GREATER_THAN Threshold: 1 Subscribers: - SubscriptionType: SNS Address: !Ref BudgetAlarmTopic - SubscriptionType: EMAIL Address: olaf_conijn@hotmail.com ```", "keywords": ["cost"]}]}, {"Id": "239274010", "PostHistoryTypeId": "5", "PostId": "65843137", "RevisionGUID": "f6275892-9ee2-4387-9b4a-756d2eb9291f", "CreationDate": "2021-01-22T11:04:04.857", "UserId": "2246345", "Comment": "added 113 characters in body", "Text": "You need setup to [terrform aws providers](https://registry.terraform.io/providers/hashicorp/aws/latest/docs) with cross-account [Delegate access across AWS accounts using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html) IAM roles access for each account and then subsequently use them while creating the budget alerts.\r\n\r\n\r\n```hcl\r\n\r\nprovider \"aws\" {\r\n  alias  = \"myaccount\"\r\n  region = \"eu-central-1\"\r\n\r\n  assume_role {\r\n    role_arn = \"arn:aws:iam::1234567890:role/AdminRole\"\r\n  }\r\n\r\n  allowed_account_ids = [\"1234567890\"]\r\n}\r\n\r\n```\r\n\r\nAnd then eventually use them for various resources\r\n\r\n```hcl\r\nresource \"aws_budgets_budget\" \"cost\" {\r\n  provider = \"aws.myaccount\"\r\n  # ...\r\n  budget_type  = \"COST\"\r\n  limit_amount = \"100\"\r\n  limit_unit   = \"USD\"\r\n}\r\n\r\n```\r\n\r\n`OR`\r\n\r\nIf you are using [AWS Organizations](https://aws.amazon.com/organizations/) to centrally manage accounts.\r\n\r\nYou can use [AWS StackSets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/what-is-cfnstacksets.html) to create a codebuild job in the destination account with your terraform code which creates the alerts. \r\n\r\n`Preferred` way because this will take care of creating the codebuild job as soon as the new account is available(`depending on your configure weather to do in the whole Organization or use Organization Units(OU).\r\n \r\nThen you can use lambda in the `organizations master account` to invoke that codebuild job with custom params like the `budget` for that particular account. This too can be automated if we send back an event(`SNS`) from the destination account to master account and hook our lambda to the same. \r\n\r\nIf you are tagging your AWS accounts [Tagging AWS Organizations resources](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html) you can have some information predefined somewhere in `DynamoDB` and use that in your lambda to invoke the corresponding codebuild job.\r\n\r\n`OR`\r\n\r\nJust create a `stackset` and with some cloudformation code like below and which triggers from the `organization master account` with the `budget` amount as param to the stack. \r\n\r\n* whole Organization\r\n* per Organization Unit(`OU`),\r\n* per account.\r\n\r\n```yaml\r\nResources:\r\n\r\n  # note that changing some attributes on Budget resources will result in an error.\r\n  # this unfortunately is a cloudformation error described here: https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/365\r\n  # workaround is to delete the budget resource and then re-add it.\r\n  Budget:\r\n    Type: AWS::Budgets::Budget\r\n    Properties:\r\n      Budget:\r\n        BudgetName: !Sub '${resourcePrefix}-budget-${AWSAccount.Alias}' # AWSAccount.Alias resolves to IAM Alias of current account\r\n        BudgetLimit:\r\n          Amount: !GetAtt AWSAccount.Tags.budget-alarm-threshold # Resolves to value of tag of current account\r\n          Unit: USD\r\n        TimeUnit: MONTHLY\r\n        BudgetType: COST\r\n      NotificationsWithSubscribers:\r\n        - Notification:\r\n            NotificationType: FORECASTED\r\n            ComparisonOperator: GREATER_THAN\r\n            Threshold: 1\r\n          Subscribers:\r\n            - SubscriptionType: SNS\r\n              Address: !Ref BudgetAlarmTopic\r\n            - SubscriptionType: EMAIL\r\n              Address: olaf_conijn@hotmail.com\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "```hcl provider \"aws\" { alias = \"myaccount\" region = \"eu-central-1\" assume_role { role_arn = \"arn:aws:iam::1234567890:role/AdminRole\" } allowed_account_ids = [\"1234567890\"] } ``` ", "keywords": ["provider"]}, {"source": "Text", "text": "And then eventually use them for various resources ```hcl resource \"aws_budgets_budget\" \"cost\" { provider = \"aws.myaccount\" # ... budget_type = \"COST\" limit_amount = \"100\" limit_unit = \"USD\" } ``` `OR` ", "keywords": ["cost", "provider"]}, {"source": "Text", "text": "```yaml Resources: # note that changing some attributes on Budget resources will result in an error. ", "keywords": ["change"]}, {"source": "Text", "text": "Budget: Type: AWS::Budgets::Budget Properties: Budget: BudgetName: !Sub '${resourcePrefix}-budget-${AWSAccount.Alias}' # AWSAccount.Alias resolves to IAM Alias of current account BudgetLimit: Amount: !GetAtt AWSAccount.Tags.budget-alarm-threshold # Resolves to value of tag of current account Unit: USD TimeUnit: MONTHLY BudgetType: COST NotificationsWithSubscribers: - Notification: NotificationType: FORECASTED ComparisonOperator: GREATER_THAN Threshold: 1 Subscribers: - SubscriptionType: SNS Address: !Ref BudgetAlarmTopic - SubscriptionType: EMAIL Address: olaf_conijn@hotmail.com ```", "keywords": ["cost"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I can't create one budget alarm for all accounts because I want to bill my expenses separately and if any of these accounts exceeds the budget I want to receive an email. ", "keywords": ["bill", "expense"]}]}