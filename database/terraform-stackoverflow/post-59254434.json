{"Id": "59254434", "PostTypeId": "1", "AcceptedAnswerId": "59259393", "CreationDate": "2019-12-09T18:11:17.660", "Score": "2", "ViewCount": "1348", "Body": "<p>I am at wits end searching for several days now, I am no terraform expert but I cant seem to find anyway to get all the GCP Vm instance List of external ips inside of a Kubernetes cluster as i then need to use this list to add them to allowed list for Database access.</p>\n\n<p>Can someone point me to an example or what</p>\n\n<p>tried something like this but cant use * =\\</p>\n\n<pre><code>data \"google_compute_instance\" \"instances\" {\n}\n\noutput \"instance_ids\" {\n  value = \"${data.google_compute_instance.instances.*.network_interface.0.access_config.0.nat_ip }\"\n}\n</code></pre>\n", "OwnerUserId": "2044633", "LastEditorUserId": "2044633", "LastEditDate": "2019-12-09T18:16:21.073", "LastActivityDate": "2021-07-12T00:59:29.907", "Title": "GCP List vm instances and Get External IPs", "Tags": "<google-cloud-platform><terraform><google-kubernetes-engine>", "AnswerCount": "4", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "links": [{"Id": "1720539239", "CreationDate": "2019-12-12T19:38:55.793", "PostId": "59254434", "RelatedPostId": "58607536", "LinkTypeId": "1"}], "history": [{"Id": "210868024", "PostHistoryTypeId": "2", "PostId": "59254434", "RevisionGUID": "e4bc9c68-5a9f-4b93-af15-084ce177042b", "CreationDate": "2019-12-09T18:11:17.660", "UserId": "2044633", "Text": "I am at wits end searching for several days now, I am no terraform expert but I cant seem to find anyway to get all the GCP Vm instance List of external ips inside of a Kubernetes cluster as i then need to use this list to add them to allowed list for Database access.\r\n\r\nCan someone point me to an example or what", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am at wits end searching for several days now, I am no terraform expert but I cant seem to find anyway to get all the GCP Vm instance List of external ips inside of a Kubernetes cluster as i then need to use this list to add them to allowed list for Database access. ", "keywords": ["instance", "cluster"]}]}, {"Id": "210868025", "PostHistoryTypeId": "1", "PostId": "59254434", "RevisionGUID": "e4bc9c68-5a9f-4b93-af15-084ce177042b", "CreationDate": "2019-12-09T18:11:17.660", "UserId": "2044633", "Text": "GCP List vm instances and Get External IPs", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "210868026", "PostHistoryTypeId": "3", "PostId": "59254434", "RevisionGUID": "e4bc9c68-5a9f-4b93-af15-084ce177042b", "CreationDate": "2019-12-09T18:11:17.660", "UserId": "2044633", "Text": "<google-cloud-platform><terraform><google-kubernetes-engine>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "210868297", "PostHistoryTypeId": "5", "PostId": "59254434", "RevisionGUID": "e035c77d-147e-48d7-8d87-18a9db8c3967", "CreationDate": "2019-12-09T18:16:21.073", "UserId": "2044633", "Comment": "added 259 characters in body", "Text": "I am at wits end searching for several days now, I am no terraform expert but I cant seem to find anyway to get all the GCP Vm instance List of external ips inside of a Kubernetes cluster as i then need to use this list to add them to allowed list for Database access.\r\n\r\nCan someone point me to an example or what\r\n\r\ntried something like this but cant use * =\\\r\n\r\n    data \"google_compute_instance\" \"instances\" {\r\n    }\r\n    \r\n    output \"instance_ids\" {\r\n      value = \"${data.google_compute_instance.instances.*.network_interface.0.access_config.0.nat_ip }\"\r\n    }\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am at wits end searching for several days now, I am no terraform expert but I cant seem to find anyway to get all the GCP Vm instance List of external ips inside of a Kubernetes cluster as i then need to use this list to add them to allowed list for Database access. ", "keywords": ["instance", "cluster"]}]}], "answers": [{"Id": "59256040", "PostTypeId": "2", "ParentId": "59254434", "CreationDate": "2019-12-09T20:22:49.183", "Score": "0", "Body": "<p>Rather than think about the reality that GKE nodes are implemented as Compute Engines, maybe think about GKE nodes in their Kubernetes concept.  As a test, I created a cluster with 3 nodes and then ran:</p>\n\n<pre><code>kubectl get nodes -o wide\n</code></pre>\n\n<p>The result was </p>\n\n<pre><code>NAME                                STATUS   ROLES    AGE   VERSION           INTERNAL-IP   EXTERNAL-IP      OS-IMAGE                             KERNEL-VERSION   CONTAINER-RUNTIME\ngke-c1-default-pool-5b6b460a-59nb   Ready    &lt;none&gt;   68s   v1.13.11-gke.14   10.128.0.42   35.222.104.41    Container-Optimized OS from Google   4.14.138+        docker://18.9.7\ngke-c1-default-pool-5b6b460a-ggh9   Ready    &lt;none&gt;   68s   v1.13.11-gke.14   10.128.0.41   35.192.152.130   Container-Optimized OS from Google   4.14.138+        docker://18.9.7\ngke-c1-default-pool-5b6b460a-j8nn   Ready    &lt;none&gt;   67s   v1.13.11-gke.14   10.128.0.40   104.197.68.223   Container-Optimized OS from Google   4.14.138+        docker://18.9.7\n</code></pre>\n\n<p>Please pay attention to the column called EXTERNAL-IP.  I then compared these against the Compute Engine VM instance exposed public IP and found them to be identical.</p>\n\n<p>Now that we see that examining the nodes using kubectl returns the information we desire, we can now potentially use a Terraform equivalent to this command.  For example, the <a href=\"https://www.terraform.io/docs/providers/kubernetes/index.html\" rel=\"nofollow noreferrer\">Kubernetes Provider</a>.</p>\n", "OwnerUserId": "1738915", "LastActivityDate": "2019-12-09T20:22:49.183", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "104735144", "PostId": "59256040", "Score": "0", "Text": "While this is a nice idea, there's no relevant data source in the Kubernetes provider that will help with this so it's a non starter as things stand right now. You could instead use an external data source to call `kubectl` and output that but you'd need to flesh that out in your answer because that's a bit tricky to leave as an exercise to the reader.", "CreationDate": "2019-12-10T09:00:03.947", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "While this is a nice idea, there's no relevant data source in the Kubernetes provider that will help with this so it's a non starter as things stand right now. ", "keywords": ["provider"]}]}], "history": [{"Id": "210875122", "PostHistoryTypeId": "2", "PostId": "59256040", "RevisionGUID": "88bc126b-a7fe-4f37-8a82-a5f35e57e438", "CreationDate": "2019-12-09T20:22:49.183", "UserId": "1738915", "Text": "Rather than think about the reality that GKE nodes are implemented as Compute Engines, maybe think about GKE nodes in their Kubernetes concept.  As a test, I created a cluster with 3 nodes and then ran:\r\n\r\n```\r\nkubectl get nodes -o wide\r\n```\r\n\r\nThe result was \r\n\r\n```\r\nNAME                                STATUS   ROLES    AGE   VERSION           INTERNAL-IP   EXTERNAL-IP      OS-IMAGE                             KERNEL-VERSION   CONTAINER-RUNTIME\r\ngke-c1-default-pool-5b6b460a-59nb   Ready    <none>   68s   v1.13.11-gke.14   10.128.0.42   35.222.104.41    Container-Optimized OS from Google   4.14.138+        docker://18.9.7\r\ngke-c1-default-pool-5b6b460a-ggh9   Ready    <none>   68s   v1.13.11-gke.14   10.128.0.41   35.192.152.130   Container-Optimized OS from Google   4.14.138+        docker://18.9.7\r\ngke-c1-default-pool-5b6b460a-j8nn   Ready    <none>   67s   v1.13.11-gke.14   10.128.0.40   104.197.68.223   Container-Optimized OS from Google   4.14.138+        docker://18.9.7\r\n```\r\n\r\nPlease pay attention to the column called EXTERNAL-IP.  I then compared these against the Compute Engine VM instance exposed public IP and found them to be identical.\r\n\r\nNow that we see that examining the nodes using kubectl returns the information we desire, we can now potentially use a Terraform equivalent to this command.  For example, the [Kubernetes Provider](https://www.terraform.io/docs/providers/kubernetes/index.html).", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As a test, I created a cluster with 3 nodes and then ran: ``` kubectl get nodes -o wide ``` ", "keywords": ["cluster", "test"]}, {"source": "Text", "text": "Please pay attention to the column called EXTERNAL-IP. ", "keywords": ["pay"]}, {"source": "Text", "text": "I then compared these against the Compute Engine VM instance exposed public IP and found them to be identical. ", "keywords": ["instance"]}, {"source": "Text", "text": "For example, the [Kubernetes Provider](https://www.terraform.io/docs/providers/kubernetes/index.html).", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "As a test, I created a cluster with 3 nodes and then ran: The result was Please pay attention to the column called EXTERNAL-IP. ", "keywords": ["pay", "cluster", "test"]}, {"source": "Body", "text": "I then compared these against the Compute Engine VM instance exposed public IP and found them to be identical. ", "keywords": ["instance"]}, {"source": "Body", "text": "For example, the Kubernetes Provider.", "keywords": ["provider"]}]}, {"Id": "59256155", "PostTypeId": "2", "ParentId": "59254434", "CreationDate": "2019-12-09T20:32:43.023", "Score": "0", "Body": "<p>My terraform knowledge is a little haisy but can you not do the following? </p>\n\n<p>As mentioned on this page: <a href=\"https://www.terraform.io/docs/provisioners/local-exec.html\" rel=\"nofollow noreferrer\">https://www.terraform.io/docs/provisioners/local-exec.html</a></p>\n\n<pre><code>resource \"gcp_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo gcloud compute instances list --format=\\\"value(External IP)\\\" --filter=\\\"name~'gke-$cluster_name-$pool_name*' --format=\\\"value(External_IP)\\\" \"} &gt;&gt; public_ips.txt\"\n  }\n}\n</code></pre>\n\n<p>then read it from the file? </p>\n", "OwnerUserId": "12480585", "LastActivityDate": "2019-12-09T20:32:43.023", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "104724269", "PostId": "59256155", "Score": "0", "Text": "Interesting, with the new version of TF i wanted to see if i could use expressions to iterate through the list of ips and create a map.  I will explore these ideas that were posted. Thank you!", "CreationDate": "2019-12-09T22:17:06.630", "UserId": "2044633", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "210875595", "PostHistoryTypeId": "2", "PostId": "59256155", "RevisionGUID": "de8c2d96-eba2-4322-be2f-4c4ec2119d49", "CreationDate": "2019-12-09T20:32:43.023", "UserId": "12480585", "Text": "My terraform knowledge is a little haisy but can you not do the following? \r\n\r\nAs mentioned on this page: https://www.terraform.io/docs/provisioners/local-exec.html\r\n\r\n    resource \"gcp_instance\" \"web\" {\r\n      # ...\r\n    \r\n      provisioner \"local-exec\" {\r\n        command = \"echo gcloud compute instances list --format=\\\"value(External IP)\\\" --filter=\\\"name~'gke-$cluster_name-$pool_name*' --format=\\\"value(External_IP)\\\" \"} >> public_ips.txt\"\r\n      }\r\n    }\r\nthen read it from the file? \r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "59259393", "PostTypeId": "2", "ParentId": "59254434", "CreationDate": "2019-12-10T02:35:26.663", "Score": "4", "Body": "<p>I came up with one way to do this using Terraform, but it's slightly hacky as it involves a bit of string manipulation on some of the URLs due to the GKE cluster metadata returning a list of Instance Group <em>Managers</em> and not Instance Groups (despite what the attribute is labelled). However it does work for the cluster I tested it on.</p>\n\n<p>If it helps, here's a Terraform example that outputs the external IPs for all the nodes compute instances:</p>\n\n<pre><code>provider \"google\" {\n  version = \"~&gt; 2\"\n  project  = \"my-project\"\n}\n\n// GKE cluster details\ndata \"google_container_cluster\" \"my_cluster\" {\n  name     = \"my-cluster-name\"\n  location = \"my-location\"\n} \n\n// GKE node instance group details\ndata \"google_compute_instance_group\" \"node_instance_groups\" {\n    for_each = toset(data.google_container_cluster.my_cluster.node_pool[0].instance_group_urls)\n    self_link = replace(each.key, \"instanceGroupManagers\", \"instanceGroups\")\n}\n\n// GKE node compute instance details\ndata \"google_compute_instance\" \"nodes\" {\n    for_each = toset(flatten([for x in data.google_compute_instance_group.node_instance_groups : x.instances[*]]))\n    self_link = each.key\n}\n\n// Return the external IPs for all GKE node instances\noutput \"external_ips\" {\n    value = [for x in data.google_compute_instance.nodes : x.network_interface[0].access_config[0].nat_ip]\n}\n</code></pre>\n", "OwnerUserId": "46239", "LastActivityDate": "2019-12-10T02:35:26.663", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "104797693", "PostId": "59259393", "Score": "0", "Text": "that worked well! thank you but the downside is I can't use it if it depends on another resource. Even if i add depends_on I get      The \"for_each\" value depends on resource attributes that cannot be determined\nuntil apply, so Terraform cannot predict how many instances will be created.\nTo work around this, use the -target argument to first apply only the\nresources that the for_each depends on.", "CreationDate": "2019-12-12T02:16:30.710", "UserId": "2044633", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "104825253", "PostId": "59259393", "Score": "0", "Text": "It's hard to say what the solution to that might be without seeing your code, maybe post a new question with what you're trying to get working. Also see if this answer provides any help https://stackoverflow.com/questions/58607536/terraform-decouple-security-group-dependency?r=SearchResults", "CreationDate": "2019-12-12T19:38:55.793", "UserId": "46239", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "210889289", "PostHistoryTypeId": "2", "PostId": "59259393", "RevisionGUID": "4a3a45fb-1512-42c6-ad28-495667829578", "CreationDate": "2019-12-10T02:35:26.663", "UserId": "46239", "Text": "I came up with one way to do this using Terraform, but it's slightly hacky as it involves a bit of string manipulation on some of the URLs due to the GKE cluster metadata returning a list of Instance Group _Managers_ and not Instance Groups (despite what the attribute is labelled). However it does work for the cluster I tested it on.\r\n\r\nIf it helps, here's a Terraform example that outputs the external IPs for all the nodes compute instances:\r\n\r\n    provider \"google\" {\r\n      version = \"~> 2\"\r\n      project  = \"my-project\"\r\n    }\r\n    \r\n    // GKE cluster details\r\n    data \"google_container_cluster\" \"my_cluster\" {\r\n      name     = \"my-cluster-name\"\r\n      location = \"my-location\"\r\n    } \r\n    \r\n    // GKE node instance group details\r\n    data \"google_compute_instance_group\" \"node_instance_groups\" {\r\n        for_each = toset(data.google_container_cluster.my_cluster.node_pool[0].instance_group_urls)\r\n        self_link = replace(each.key, \"instanceGroupManagers\", \"instanceGroups\")\r\n    }\r\n    \r\n    // GKE node compute instance details\r\n    data \"google_compute_instance\" \"nodes\" {\r\n        for_each = toset(flatten([for x in data.google_compute_instance_group.node_instance_groups : x.instances[*]]))\r\n        self_link = each.key\r\n    }\r\n    \r\n    // Return the external IPs for all GKE node instances\r\n    output \"external_ips\" {\r\n        value = [for x in data.google_compute_instance.nodes : x.network_interface[0].access_config[0].nat_ip]\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I came up with one way to do this using Terraform, but it's slightly hacky as it involves a bit of string manipulation on some of the URLs due to the GKE cluster metadata returning a list of Instance Group _Managers_ and not Instance Groups (despite what the attribute is labelled). ", "keywords": ["instance", "cluster"]}, {"source": "Text", "text": "However it does work for the cluster I tested it on. ", "keywords": ["cluster", "test"]}, {"source": "Text", "text": "If it helps, here's a Terraform example that outputs the external IPs for all the nodes compute instances: provider \"google\" { version = \"~> 2\" project = \"my-project\" } // GKE cluster details data \"google_container_cluster\" \"my_cluster\" { name = \"my-cluster-name\" location = \"my-location\" } // GKE node instance group details data \"google_compute_instance_group\" \"node_instance_groups\" { for_each = toset(data.google_container_cluster.my_cluster.node_pool[0].instance_group_urls) self_link = replace(each.key, \"instanceGroupManagers\", \"instanceGroups\") } // GKE node compute instance details data \"google_compute_instance\" \"nodes\" { for_each = toset(flatten([for x in data.google_compute_instance_group.node_instance_groups : x.instances[*]])) self_link = each.key } ", "keywords": ["instance", "provider", "cluster"]}]}], "filtered-sentences": [{"source": "Body", "text": "I came up with one way to do this using Terraform, but it's slightly hacky as it involves a bit of string manipulation on some of the URLs due to the GKE cluster metadata returning a list of Instance Group Managers and not Instance Groups (despite what the attribute is labelled). ", "keywords": ["instance", "cluster"]}, {"source": "Body", "text": "However it does work for the cluster I tested it on. ", "keywords": ["cluster", "test"]}]}, {"Id": "68340922", "PostTypeId": "2", "ParentId": "59254434", "CreationDate": "2021-07-12T00:59:29.907", "Score": "0", "Body": "<p>The sortest solution to this problem is by using the gcloud command-line tool in conjunction with awk to manipulate the output.</p>\n<p>With 2 simple commands, you get a nice formatted output.</p>\n<p>First, calculate the number of nodes:</p>\n<pre><code>num_nodes=$(kubectl get nodes | awk 'END{print NR - 1}')\n</code></pre>\n<p>After</p>\n<pre><code>gcloud compute instances list | awk '{print $1,$5}' | tail -n $num_nodes\n</code></pre>\n<p>If you want to create a dynamic Ansible inventory, then the above command becomes:</p>\n<pre><code>gcloud compute instances list | awk '{print $1, &quot;ansible_ssh_host=&quot;$5}' | tail -n $num_nodes\n</code></pre>\n", "OwnerUserId": "2076568", "LastActivityDate": "2021-07-12T00:59:29.907", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "250066605", "PostHistoryTypeId": "2", "PostId": "68340922", "RevisionGUID": "374985b8-e3c7-4b86-855d-b066ca1c77e0", "CreationDate": "2021-07-12T00:59:29.907", "UserId": "2076568", "Text": "The sortest solution to this problem is by using the gcloud command-line tool in conjunction with awk to manipulate the output.\r\n\r\nWith 2 simple commands, you get a nice formatted output.\r\n\r\nFirst, calculate the number of nodes:\r\n```\r\nnum_nodes=$(kubectl get nodes | awk 'END{print NR - 1}')\r\n```\r\nAfter \r\n```\r\ngcloud compute instances list | awk '{print $1,$5}' | tail -n $num_nodes\r\n``` \r\nIf you want to create a dynamic Ansible inventory, then the above command becomes:\r\n```\r\ngcloud compute instances list | awk '{print $1, \"ansible_ssh_host=\"$5}' | tail -n $num_nodes\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I am at wits end searching for several days now, I am no terraform expert but I cant seem to find anyway to get all the GCP Vm instance List of external ips inside of a Kubernetes cluster as i then need to use this list to add them to allowed list for Database access. ", "keywords": ["instance", "cluster"]}]}