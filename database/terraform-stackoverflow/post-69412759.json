{"Id": "69412759", "PostTypeId": "1", "AcceptedAnswerId": "69413425", "CreationDate": "2021-10-01T23:13:32.307", "Score": "0", "ViewCount": "303", "Body": "<p>I manage our ECS tasks with terraform and it's been all well and good but recently, I've run into this error when the task tries to fetch the image from ECR:</p>\n<pre><code>CannotPullContainerError: failed to register layer: devmapper: Thin Pool has 4143 free data blocks which is less than minimum required 4449 free data blocks. Create more free space in thin pool or use dm.min_free_space option to change behavior\n</code></pre>\n<p>I'm a bit confused here on what to update. Our ECS service uses an EC2 launch type, but I think I have a fundamental misunderstanding of what's happening here. Reading <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/CannotCreateContainerError.html\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/CannotCreateContainerError.html</a> it seems like it's because the volume is too small but the AWS help page suggests <code>docker prune</code>. This confuses me since it was my understanding that the ECS task would have access to the full volume as a fresh start every time -- why would there be stale images/containers on the volume? Or is the page just suggesting that in cases where your ECS task might be fetching too multiple images, you should remove stale ones.</p>\n<p>Other than that, I'm not sure how to proceed. Would increasing the <code>ephemeral_storage</code>in the <code>aws_ecs_task_definition</code> help here, or do I need to manage my own volume that's attached to the <code>aws_launch_template</code> instance that's tied to the <code>aws_autoscaling_group</code> that's tied to relevant <code>aws_ecs_service</code></p>\n", "OwnerUserId": "4096578", "LastActivityDate": "2021-10-02T01:56:15.613", "Title": "ECS doesn't have enough free data blocks for docker image. How to provision enough volume/storage?", "Tags": "<amazon-web-services><terraform><amazon-ecs>", "AnswerCount": "1", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "122687466", "PostId": "69412759", "Score": "0", "Text": "The later, `aws_launch_template`. I am not sure how it is these days but ECS used to not clear cached images from previous tasks", "CreationDate": "2021-10-01T23:58:31.357", "UserId": "1032785", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "122695957", "PostId": "69412759", "Score": "0", "Text": "\"it was my understanding that the ECS task would have access to the full volume as a fresh start every time\" Each ECS task deployment doesn't trigger a new EC2 instance to be created. So after several ECS task deployments the EC2 instance can run out of disk space due to the Docker image cache. You could switch to Fargate to eliminate this issue.", "CreationDate": "2021-10-02T14:52:27.847", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Each ECS task deployment doesn't trigger a new EC2 instance to be created. ", "keywords": ["instance"]}, {"source": "Text", "text": "So after several ECS task deployments the EC2 instance can run out of disk space due to the Docker image cache. ", "keywords": ["instance"]}]}, {"Id": "122717918", "PostId": "69412759", "Score": "0", "Text": "makes sense -- thanks so much for the help! i added an extended volume instead although i suppose as a cheap workaround. I can't use fargate unfortunately because of specific ec2 instance requirements", "CreationDate": "2021-10-04T01:35:11.550", "UserId": "4096578", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "makes sense -- thanks so much for the help! i added an extended volume instead although i suppose as a cheap workaround. ", "keywords": ["cheap"]}, {"source": "Text", "text": "I can't use fargate unfortunately because of specific ec2 instance requirements", "keywords": ["instance"]}]}], "history": [{"Id": "254950406", "PostHistoryTypeId": "2", "PostId": "69412759", "RevisionGUID": "2b3de384-1378-498f-86eb-830212a7b4fc", "CreationDate": "2021-10-01T23:13:32.307", "UserId": "4096578", "Text": "I manage our ECS tasks with terraform and it's been all well and good but recently, I've run into this error when the task tries to fetch the image from ECR:\r\n```\r\nCannotPullContainerError: failed to register layer: devmapper: Thin Pool has 4143 free data blocks which is less than minimum required 4449 free data blocks. Create more free space in thin pool or use dm.min_free_space option to change behavior\r\n```\r\n\r\nI'm a bit confused here on what to update. Our ECS service uses an EC2 launch type, but I think I have a fundamental misunderstanding of what's happening here. Reading https://docs.aws.amazon.com/AmazonECS/latest/developerguide/CannotCreateContainerError.html it seems like it's because the volume is too small but the AWS help page suggests `docker prune`. This confuses me since it was my understanding that the ECS task would have access to the full volume as a fresh start every time -- why would there be stale images/containers on the volume? Or is the page just suggesting that in cases where your ECS task might be fetching too multiple images, you should remove stale ones.\r\n\r\nOther than that, I'm not sure how to proceed. Would increasing the `ephemeral_storage`in the `aws_ecs_task_definition` help here, or do I need to manage my own volume that's attached to the `aws_launch_template` instance that's tied to the `aws_autoscaling_group` that's tied to relevant `aws_ecs_service`", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Create more free space in thin pool or use dm.min_free_space option to change behavior ``` ", "keywords": ["change"]}, {"source": "Text", "text": "Would increasing the `ephemeral_storage`in the `aws_ecs_task_definition` help here, or do I need to manage my own volume that's attached to the `aws_launch_template` instance that's tied to the `aws_autoscaling_group` that's tied to relevant `aws_ecs_service`", "keywords": ["instance"]}]}, {"Id": "254950408", "PostHistoryTypeId": "1", "PostId": "69412759", "RevisionGUID": "2b3de384-1378-498f-86eb-830212a7b4fc", "CreationDate": "2021-10-01T23:13:32.307", "UserId": "4096578", "Text": "ECS doesn't have enough free data blocks for docker image. How to provision enough volume/storage?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "How to provision enough volume/storage?", "keywords": ["storage"]}]}, {"Id": "254950409", "PostHistoryTypeId": "3", "PostId": "69412759", "RevisionGUID": "2b3de384-1378-498f-86eb-830212a7b4fc", "CreationDate": "2021-10-01T23:13:32.307", "UserId": "4096578", "Text": "<amazon-web-services><terraform><amazon-ecs>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "69413425", "PostTypeId": "2", "ParentId": "69412759", "CreationDate": "2021-10-02T01:56:15.613", "Score": "1", "Body": "<p>Just had to add this block to my <code>aws_launch_template</code></p>\n<pre><code>resource &quot;aws_launch_template&quot; &quot;instance&quot; {\n  ...\n  block_device_mappings {\n    device_name = &quot;/dev/xvdcz&quot;\n\n    ebs {\n      volume_size           = 50\n      delete_on_termination = true\n    }\n  }\n\n}\n</code></pre>\n", "OwnerUserId": "4096578", "LastActivityDate": "2021-10-02T01:56:15.613", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "254959884", "PostHistoryTypeId": "2", "PostId": "69413425", "RevisionGUID": "628c2bba-7eb1-4648-8668-6be3ea1fff4b", "CreationDate": "2021-10-02T01:56:15.613", "UserId": "4096578", "Text": "Just had to add this block to my `aws_launch_template`\r\n\r\n```\r\nresource \"aws_launch_template\" \"instance\" {\r\n  ...\r\n  block_device_mappings {\r\n    device_name = \"/dev/xvdcz\"\r\n\r\n    ebs {\r\n      volume_size           = 50\r\n      delete_on_termination = true\r\n    }\r\n  }\r\n\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Just had to add this block to my `aws_launch_template` ``` resource \"aws_launch_template\" \"instance\" { ... block_device_mappings { device_name = \"/dev/xvdcz\" ebs { volume_size = 50 delete_on_termination = true } } } ```", "keywords": ["instance"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "How to provision enough volume/storage?", "keywords": ["storage"]}, {"source": "Body", "text": "Would increasing the ephemeral_storagein the aws_ecs_task_definition help here, or do I need to manage my own volume that's attached to the aws_launch_template instance that's tied to the aws_autoscaling_group that's tied to relevant aws_ecs_service", "keywords": ["instance"]}]}