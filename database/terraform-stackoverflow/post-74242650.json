{"Id": "74242650", "PostTypeId": "1", "AcceptedAnswerId": "74243218", "CreationDate": "2022-10-29T03:36:46.343", "Score": "1", "ViewCount": "122", "Body": "<p>My main.tf has following code:</p>\n<pre><code>resource &quot;aws_lb_target_group&quot; &quot;dev-ext-test-msvc1-pub&quot; {\n  name                 = &quot;dev-ext-test-msvc1-pub&quot;\n  port                 = &quot;14003&quot;\n  protocol             = &quot;HTTP&quot;\n  target_type          = &quot;instance&quot;\n  vpc_id               = data.aws_vpc.vpc.id\n  protocol_version     = &quot;HTTP1&quot;\n  deregistration_delay = 10\n  health_check {\n      enabled             = true\n      interval            = 10\n      path                = &quot;/health&quot;\n      port                = &quot;32767&quot;\n      healthy_threshold   = 2\n      unhealthy_threshold = 2\n      timeout             = 2\n      protocol            = &quot;HTTP&quot;\n      matcher             = &quot;200&quot;\n  }\n\n  tags = {\n      environment = &quot;dev&quot;\n      project     = &quot;ext test 2&quot;\n      Name        = &quot;dev-ext-test-msvc1-pub&quot;\n  }\n}\n\nresource &quot;aws_lb_target_group&quot; &quot;dev-ext-test-msvc2-pub&quot; {\n  name                 = &quot;dev-ext-test-msvc2-pub&quot;\n  port                 = &quot;14004&quot;\n  protocol             = &quot;HTTP&quot;\n  target_type          = &quot;instance&quot;\n  vpc_id               = data.aws_vpc.vpc.id\n  protocol_version     = &quot;HTTP1&quot;\n  deregistration_delay = 10\n  health_check {\n      enabled             = true\n      interval            = 10\n      path                = &quot;/health&quot;\n      port                = &quot;32767&quot;\n      healthy_threshold   = 2\n      unhealthy_threshold = 2\n      timeout             = 2\n      protocol            = &quot;HTTP&quot;\n      matcher             = &quot;200&quot;\n  }\n\n  tags = {\n      environment = &quot;dev&quot;\n      project     = &quot;ext test 2&quot;\n      Name        = &quot;dev-ext-test-msvc2-pub&quot;\n  }\n}\n\nresource &quot;aws_lb_target_group&quot; &quot;dev-ext-test-msvc5-pub&quot; {\n  name                 = &quot;dev-ext-test-msvc5-pub&quot;\n  port                 = &quot;14002&quot;\n  protocol             = &quot;HTTP&quot;\n  target_type          = &quot;instance&quot;\n  vpc_id               = data.aws_vpc.vpc.id\n  protocol_version     = &quot;HTTP1&quot;\n  deregistration_delay = 10\n  health_check {\n      enabled             = true\n      interval            = 10\n      path                = &quot;/health&quot;\n      port                = &quot;32767&quot;\n      healthy_threshold   = 2\n      unhealthy_threshold = 2\n      timeout             = 2\n      protocol            = &quot;HTTP&quot;\n      matcher             = &quot;200&quot;\n  }\n\n  tags = {\n      environment = &quot;dev&quot;\n      project     = &quot;ext test 2&quot;\n      Name        = &quot;dev-ext-test-msvc5-pub&quot;\n  }\n}\n\n\nresource &quot;aws_lb_target_group&quot; &quot;dev-ext-test-msvc4-pub&quot; {\n  name                 = &quot;dev-ext-test-msvc4-pub&quot;\n  port                 = &quot;14001&quot;\n  protocol             = &quot;HTTP&quot;\n  target_type          = &quot;instance&quot;\n  vpc_id               = data.aws_vpc.vpc.id\n  protocol_version     = &quot;HTTP1&quot;\n  deregistration_delay = 10\n  health_check {\n      enabled             = true\n      interval            = 10\n      path                = &quot;/health&quot;\n      port                = &quot;32767&quot;\n      healthy_threshold   = 2\n      unhealthy_threshold = 2\n      timeout             = 2\n      protocol            = &quot;HTTP&quot;\n      matcher             = &quot;200&quot;\n  }\n\n  tags = {\n      environment = &quot;dev&quot;\n      project     = &quot;ext test 2&quot;\n      Name        = &quot;dev-ext-test-msvc4-pub&quot;\n  }\n}\n\n</code></pre>\n<p>And output.tf is :</p>\n<pre><code>output &quot;lb_dns&quot; {\n    value = module.dev-ext-test-pub-2-alb.lb_dns_name\n}\noutput &quot;lb_security_group&quot; {\n    value = module.dev-ext-test-pub-2-alb-sg.security_group_id\n}\noutput &quot;lb_target_groups&quot; {\n    value = aws_lb_target_group.*.name\n}\noutput &quot;lb_target_groups_arns&quot; {\n    value = aws_lb_target_group.*.arn\n}\noutput &quot;worker_ami&quot; {\n    value = data.aws_ami.k8s_msvcs_custom_ami.id\n}\noutput &quot;worker_security_group&quot; {\n    value = data.aws_security_group.worker_k8s_sg.id\n}\noutput &quot;worker_subnet_id&quot; {\n    value = data.aws_subnet.worker-subnet.id\n}\n</code></pre>\n<p>But the <code>aws_lb_target_group.*.name</code> is unable to fetch all target groups. Though I can do something like this to fetch the values:</p>\n<pre><code>output &quot;lb_target_groups&quot; {\n    value = [aws_lb_target_group.dev-ext-test-msvc1-pub.name, aws_lb_target_group.dev-ext-test-msvc4-pub.name,]\n}\noutput &quot;lb_target_groups_arns&quot; {\n    value = [aws_lb_target_group.dev-ext-test-msvc1-pub.arn, aws_lb_target_group.dev-ext-test-msvc4-pub.arn,]\n}\n</code></pre>\n<p>But is there a more efficient way to fetch all target groups?</p>\n", "OwnerUserId": "2297135", "LastEditorUserId": "248823", "LastEditDate": "2022-10-29T06:25:44.773", "LastActivityDate": "2022-10-29T16:41:41.220", "Title": "How to show all alb tg resources in output using terraform?", "Tags": "<amazon-web-services><terraform><terraform-provider-aws>", "AnswerCount": "2", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131082464", "PostId": "74242650", "Score": "1", "Text": "As mentioned in the below answer, this isn't a feature of Terraform currently. There is a request to add this feature to Terraform here: https://github.com/hashicorp/terraform/issues/19931 Please give it an up-vote.", "CreationDate": "2022-10-29T14:57:58.397", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As mentioned in the below answer, this isn't a feature of Terraform currently. ", "keywords": ["feature"]}, {"source": "Text", "text": "There is a request to add this feature to Terraform here: https://github.com/hashicorp/terraform/issues/19931 Please give it an up-vote.", "keywords": ["feature"]}]}], "history": [{"Id": "281094013", "PostHistoryTypeId": "2", "PostId": "74242650", "RevisionGUID": "684f285a-37ec-430f-b3d5-0ae2256a5ba1", "CreationDate": "2022-10-29T03:36:46.343", "UserId": "2297135", "Text": "My main.tf has following code:\r\n\r\n```\r\nresource \"aws_lb_target_group\" \"dev-ext-test-msvc1-pub\" {\r\n  name                 = \"dev-ext-test-msvc1-pub\"\r\n  port                 = \"14003\"\r\n  protocol             = \"HTTP\"\r\n  target_type          = \"instance\"\r\n  vpc_id               = data.aws_vpc.vpc.id\r\n  protocol_version     = \"HTTP1\"\r\n  deregistration_delay = 10\r\n  health_check {\r\n      enabled             = true\r\n      interval            = 10\r\n      path                = \"/health\"\r\n      port                = \"32767\"\r\n      healthy_threshold   = 2\r\n      unhealthy_threshold = 2\r\n      timeout             = 2\r\n      protocol            = \"HTTP\"\r\n      matcher             = \"200\"\r\n  }\r\n\r\n  tags = {\r\n      environment = \"dev\"\r\n      project     = \"ext test 2\"\r\n      Name        = \"dev-ext-test-msvc1-pub\"\r\n  }\r\n}\r\n\r\nresource \"aws_lb_target_group\" \"dev-ext-test-msvc2-pub\" {\r\n  name                 = \"dev-ext-test-msvc2-pub\"\r\n  port                 = \"14004\"\r\n  protocol             = \"HTTP\"\r\n  target_type          = \"instance\"\r\n  vpc_id               = data.aws_vpc.vpc.id\r\n  protocol_version     = \"HTTP1\"\r\n  deregistration_delay = 10\r\n  health_check {\r\n      enabled             = true\r\n      interval            = 10\r\n      path                = \"/health\"\r\n      port                = \"32767\"\r\n      healthy_threshold   = 2\r\n      unhealthy_threshold = 2\r\n      timeout             = 2\r\n      protocol            = \"HTTP\"\r\n      matcher             = \"200\"\r\n  }\r\n\r\n  tags = {\r\n      environment = \"dev\"\r\n      project     = \"ext test 2\"\r\n      Name        = \"dev-ext-test-msvc2-pub\"\r\n  }\r\n}\r\n\r\nresource \"aws_lb_target_group\" \"dev-ext-test-msvc5-pub\" {\r\n  name                 = \"dev-ext-test-msvc5-pub\"\r\n  port                 = \"14002\"\r\n  protocol             = \"HTTP\"\r\n  target_type          = \"instance\"\r\n  vpc_id               = data.aws_vpc.vpc.id\r\n  protocol_version     = \"HTTP1\"\r\n  deregistration_delay = 10\r\n  health_check {\r\n      enabled             = true\r\n      interval            = 10\r\n      path                = \"/health\"\r\n      port                = \"32767\"\r\n      healthy_threshold   = 2\r\n      unhealthy_threshold = 2\r\n      timeout             = 2\r\n      protocol            = \"HTTP\"\r\n      matcher             = \"200\"\r\n  }\r\n\r\n  tags = {\r\n      environment = \"dev\"\r\n      project     = \"ext test 2\"\r\n      Name        = \"dev-ext-test-msvc5-pub\"\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_lb_target_group\" \"dev-ext-test-msvc4-pub\" {\r\n  name                 = \"dev-ext-test-msvc4-pub\"\r\n  port                 = \"14001\"\r\n  protocol             = \"HTTP\"\r\n  target_type          = \"instance\"\r\n  vpc_id               = data.aws_vpc.vpc.id\r\n  protocol_version     = \"HTTP1\"\r\n  deregistration_delay = 10\r\n  health_check {\r\n      enabled             = true\r\n      interval            = 10\r\n      path                = \"/health\"\r\n      port                = \"32767\"\r\n      healthy_threshold   = 2\r\n      unhealthy_threshold = 2\r\n      timeout             = 2\r\n      protocol            = \"HTTP\"\r\n      matcher             = \"200\"\r\n  }\r\n\r\n  tags = {\r\n      environment = \"dev\"\r\n      project     = \"ext test 2\"\r\n      Name        = \"dev-ext-test-msvc4-pub\"\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\nAnd output.tf is :\r\n```\r\noutput \"lb_dns\" {\r\n    value = module.dev-ext-test-pub-2-alb.lb_dns_name\r\n}\r\noutput \"lb_security_group\" {\r\n    value = module.dev-ext-test-pub-2-alb-sg.security_group_id\r\n}\r\noutput \"lb_target_groups\" {\r\n    value = aws_lb_target_group.*.name\r\n}\r\noutput \"lb_target_groups_arns\" {\r\n    value = aws_lb_target_group.*.arn\r\n}\r\noutput \"worker_ami\" {\r\n    value = data.aws_ami.k8s_msvcs_custom_ami.id\r\n}\r\noutput \"worker_security_group\" {\r\n    value = data.aws_security_group.worker_k8s_sg.id\r\n}\r\noutput \"worker_subnet_id\" {\r\n    value = data.aws_subnet.worker-subnet.id\r\n}\r\n```\r\nBut the `aws_lb_target_group.*.name` is unable to fetch all target groups. Though I can do something like this to fetch the values:\r\n```\r\noutput \"lb_target_groups\" {\r\n    value = [aws_lb_target_group.dev-ext-test-msvc1-pub.name, aws_lb_target_group.dev-ext-test-msvc4-pub.name,]\r\n}\r\noutput \"lb_target_groups_arns\" {\r\n    value = [aws_lb_target_group.dev-ext-test-msvc1-pub.arn, aws_lb_target_group.dev-ext-test-msvc4-pub.arn,]\r\n}\r\n```\r\nBut is there a more efficient way to fetch all target groups?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "My main.tf has following code: ``` resource \"aws_lb_target_group\" \"dev-ext-test-msvc1-pub\" { name = \"dev-ext-test-msvc1-pub\" port = \"14003\" protocol = \"HTTP\" target_type = \"instance\" vpc_id = data.aws_vpc.vpc.id protocol_version = \"HTTP1\" deregistration_delay = 10 health_check { enabled = true interval = 10 path = \"/health\" port = \"32767\" healthy_threshold = 2 unhealthy_threshold = 2 timeout = 2 protocol = \"HTTP\" matcher = \"200\" } tags = { environment = \"dev\" project = \"ext test 2\" Name = \"dev-ext-test-msvc1-pub\" } } resource \"aws_lb_target_group\" \"dev-ext-test-msvc2-pub\" { name = \"dev-ext-test-msvc2-pub\" port = \"14004\" protocol = \"HTTP\" target_type = \"instance\" vpc_id = data.aws_vpc.vpc.id protocol_version = \"HTTP1\" deregistration_delay = 10 health_check { enabled = true interval = 10 path = \"/health\" port = \"32767\" healthy_threshold = 2 unhealthy_threshold = 2 timeout = 2 protocol = \"HTTP\" matcher = \"200\" } tags = { environment = \"dev\" project = \"ext test 2\" Name = \"dev-ext-test-msvc2-pub\" } } resource \"aws_lb_target_group\" \"dev-ext-test-msvc5-pub\" { name = \"dev-ext-test-msvc5-pub\" port = \"14002\" protocol = \"HTTP\" target_type = \"instance\" vpc_id = data.aws_vpc.vpc.id protocol_version = \"HTTP1\" deregistration_delay = 10 health_check { enabled = true interval = 10 path = \"/health\" port = \"32767\" healthy_threshold = 2 unhealthy_threshold = 2 timeout = 2 protocol = \"HTTP\" matcher = \"200\" } tags = { environment = \"dev\" project = \"ext test 2\" Name = \"dev-ext-test-msvc5-pub\" } } resource \"aws_lb_target_group\" \"dev-ext-test-msvc4-pub\" { name = \"dev-ext-test-msvc4-pub\" port = \"14001\" protocol = \"HTTP\" target_type = \"instance\" vpc_id = data.aws_vpc.vpc.id protocol_version = \"HTTP1\" deregistration_delay = 10 health_check { enabled = true interval = 10 path = \"/health\" port = \"32767\" healthy_threshold = 2 unhealthy_threshold = 2 timeout = 2 protocol = \"HTTP\" matcher = \"200\" } tags = { environment = \"dev\" project = \"ext test 2\" Name = \"dev-ext-test-msvc4-pub\" } } ``` And output.tf is : ``` output \"lb_dns\" { value = module.dev-ext-test-pub-2-alb.lb_dns_name } output \"lb_security_group\" { value = module.dev-ext-test-pub-2-alb-sg.security_group_id } output \"lb_target_groups\" { value = aws_lb_target_group.*.name } output \"lb_target_groups_arns\" { value = aws_lb_target_group.*.arn } output \"worker_ami\" { value = data.aws_ami.k8s_msvcs_custom_ami.id } output \"worker_security_group\" { value = data.aws_security_group.worker_k8s_sg.id } output \"worker_subnet_id\" { value = data.aws_subnet.worker-subnet.id } ``` But the `aws_lb_target_group.*.name` is unable to fetch all target groups. ", "keywords": ["instance", "test"]}, {"source": "Text", "text": "Though I can do something like this to fetch the values: ``` output \"lb_target_groups\" { value = [aws_lb_target_group.dev-ext-test-msvc1-pub.name, aws_lb_target_group.dev-ext-test-msvc4-pub.name,] } output \"lb_target_groups_arns\" { value = [aws_lb_target_group.dev-ext-test-msvc1-pub.arn, aws_lb_target_group.dev-ext-test-msvc4-pub.arn,] } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "But is there a more efficient way to fetch all target groups?", "keywords": ["efficient"]}]}, {"Id": "281094015", "PostHistoryTypeId": "1", "PostId": "74242650", "RevisionGUID": "684f285a-37ec-430f-b3d5-0ae2256a5ba1", "CreationDate": "2022-10-29T03:36:46.343", "UserId": "2297135", "Text": "How to show all alb tg resources in output using terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "281094016", "PostHistoryTypeId": "3", "PostId": "74242650", "RevisionGUID": "684f285a-37ec-430f-b3d5-0ae2256a5ba1", "CreationDate": "2022-10-29T03:36:46.343", "UserId": "2297135", "Text": "<terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "281097332", "PostHistoryTypeId": "6", "PostId": "74242650", "RevisionGUID": "e65e561b-e036-4215-acb0-01a2fdef5021", "CreationDate": "2022-10-29T06:25:44.773", "UserId": "248823", "Comment": "edited tags", "Text": "<amazon-web-services><terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "74243218", "PostTypeId": "2", "ParentId": "74242650", "CreationDate": "2022-10-29T06:20:32.417", "Score": "3", "Body": "<blockquote>\n<p>But is there a more efficient way to fetch all target groups?</p>\n</blockquote>\n<p>Sadly, <strong>no</strong> due to your code design, as your are defining fully distinct <code>aws_lb_target_group</code> resources.</p>\n<p>But if you were to re-organize your code to use only single block <code>aws_lb_target_group</code> with <code>count</code> or <code>for_each</code>, then there wouldn't be any issues getting all names using spat expressions.</p>\n<p>For example:</p>\n<pre><code>variable &quot;tgs&quot; {\n    default = {\n        &quot;dev-ext-test-msvc1-pub&quot; = {\n            port = 14003\n        },\n        &quot;dev-ext-test-msvc2-pub&quot; = {\n            port = 14004\n        }\n        # the rest\n    }\n}\n\n\nresource &quot;aws_lb_target_group&quot; &quot;tgs&quot; {\n\n  for_each             = var.tgs\n\n  name                 = each.key\n  port                 = each.value.port\n  protocol             = &quot;HTTP&quot;\n  target_type          = &quot;instance&quot;\n  vpc_id               = data.aws_vpc.vpc.id\n  protocol_version     = &quot;HTTP1&quot;\n  deregistration_delay = 10\n  health_check {\n      enabled             = true\n      interval            = 10\n      path                = &quot;/health&quot;\n      port                = &quot;32767&quot;\n      healthy_threshold   = 2\n      unhealthy_threshold = 2\n      timeout             = 2\n      protocol            = &quot;HTTP&quot;\n      matcher             = &quot;200&quot;\n  }\n\n  tags = {\n      environment = &quot;dev&quot;\n      project     = &quot;ext test 2&quot;\n      Name        = each.key\n  }\n}\n</code></pre>\n<p>then</p>\n<pre><code>output &quot;lb_target_groups&quot; {\n    value = values(aws_lb_target_group.tgs)[*].name\n}\n</code></pre>\n", "OwnerUserId": "248823", "LastEditorUserId": "248823", "LastEditDate": "2022-10-29T06:26:19.523", "LastActivityDate": "2022-10-29T06:26:19.523", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "281097158", "PostHistoryTypeId": "2", "PostId": "74243218", "RevisionGUID": "b0ab9488-d98b-4527-852d-3db45730d741", "CreationDate": "2022-10-29T06:20:32.417", "UserId": "248823", "Text": "> But is there a more efficient way to fetch all target groups?\r\n\r\nSadly, **no** due to your code design, as your are fully distinct `aws_lb_target_group` resources. \r\n\r\nBut if you were to re-organize your code to use only single block `aws_lb_target_group` with `count` or `for_each`, then there wouldn't be any issues getting all names using spat expressions.\r\n\r\nFor example:\r\n\r\n```\r\nvariable \"tgs\" {\r\n    default = {\r\n        \"dev-ext-test-msvc1-pub\" = {\r\n            port = 14003\r\n        },\r\n        \"dev-ext-test-msvc2-pub\" = {\r\n            port = 14004\r\n        }\r\n        # the rest\r\n    }\r\n}\r\n\r\n\r\nresource \"aws_lb_target_group\" \"tgs\" {\r\n\r\n  for_each             = var.tgs\r\n\r\n  name                 = each.key\r\n  port                 = each.value.port\r\n  protocol             = \"HTTP\"\r\n  target_type          = \"instance\"\r\n  vpc_id               = data.aws_vpc.vpc.id\r\n  protocol_version     = \"HTTP1\"\r\n  deregistration_delay = 10\r\n  health_check {\r\n      enabled             = true\r\n      interval            = 10\r\n      path                = \"/health\"\r\n      port                = \"32767\"\r\n      healthy_threshold   = 2\r\n      unhealthy_threshold = 2\r\n      timeout             = 2\r\n      protocol            = \"HTTP\"\r\n      matcher             = \"200\"\r\n  }\r\n\r\n  tags = {\r\n      environment = \"dev\"\r\n      project     = \"ext test 2\"\r\n      Name        = each.key\r\n  }\r\n}\r\n```\r\n\r\nthen\r\n\r\n```\r\noutput \"lb_target_groups\" {\r\n    value = values(aws_lb_target_group.tgs)[*].name\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "But is there a more efficient way to fetch all target groups? ", "keywords": ["efficient"]}, {"source": "Text", "text": "For example: ``` variable \"tgs\" { default = { \"dev-ext-test-msvc1-pub\" = { port = 14003 }, \"dev-ext-test-msvc2-pub\" = { port = 14004 } # the rest } } resource \"aws_lb_target_group\" \"tgs\" { for_each = var.tgs name = each.key port = each.value.port protocol = \"HTTP\" target_type = \"instance\" vpc_id = data.aws_vpc.vpc.id protocol_version = \"HTTP1\" deregistration_delay = 10 health_check { enabled = true interval = 10 path = \"/health\" port = \"32767\" healthy_threshold = 2 unhealthy_threshold = 2 timeout = 2 protocol = \"HTTP\" matcher = \"200\" ", "keywords": ["instance", "test"]}, {"source": "Text", "text": "} tags = { environment = \"dev\" project = \"ext test 2\" Name = each.key } ", "keywords": ["test"]}]}, {"Id": "281097342", "PostHistoryTypeId": "5", "PostId": "74243218", "RevisionGUID": "6a283dde-1e1e-40df-bf50-0e591d2e2929", "CreationDate": "2022-10-29T06:26:19.523", "UserId": "248823", "Comment": "added 9 characters in body", "Text": "> But is there a more efficient way to fetch all target groups?\r\n\r\nSadly, **no** due to your code design, as your are defining fully distinct `aws_lb_target_group` resources. \r\n\r\nBut if you were to re-organize your code to use only single block `aws_lb_target_group` with `count` or `for_each`, then there wouldn't be any issues getting all names using spat expressions.\r\n\r\nFor example:\r\n\r\n```\r\nvariable \"tgs\" {\r\n    default = {\r\n        \"dev-ext-test-msvc1-pub\" = {\r\n            port = 14003\r\n        },\r\n        \"dev-ext-test-msvc2-pub\" = {\r\n            port = 14004\r\n        }\r\n        # the rest\r\n    }\r\n}\r\n\r\n\r\nresource \"aws_lb_target_group\" \"tgs\" {\r\n\r\n  for_each             = var.tgs\r\n\r\n  name                 = each.key\r\n  port                 = each.value.port\r\n  protocol             = \"HTTP\"\r\n  target_type          = \"instance\"\r\n  vpc_id               = data.aws_vpc.vpc.id\r\n  protocol_version     = \"HTTP1\"\r\n  deregistration_delay = 10\r\n  health_check {\r\n      enabled             = true\r\n      interval            = 10\r\n      path                = \"/health\"\r\n      port                = \"32767\"\r\n      healthy_threshold   = 2\r\n      unhealthy_threshold = 2\r\n      timeout             = 2\r\n      protocol            = \"HTTP\"\r\n      matcher             = \"200\"\r\n  }\r\n\r\n  tags = {\r\n      environment = \"dev\"\r\n      project     = \"ext test 2\"\r\n      Name        = each.key\r\n  }\r\n}\r\n```\r\n\r\nthen\r\n\r\n```\r\noutput \"lb_target_groups\" {\r\n    value = values(aws_lb_target_group.tgs)[*].name\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "But is there a more efficient way to fetch all target groups? ", "keywords": ["efficient"]}, {"source": "Text", "text": "For example: ``` variable \"tgs\" { default = { \"dev-ext-test-msvc1-pub\" = { port = 14003 }, \"dev-ext-test-msvc2-pub\" = { port = 14004 } # the rest } } resource \"aws_lb_target_group\" \"tgs\" { for_each = var.tgs name = each.key port = each.value.port protocol = \"HTTP\" target_type = \"instance\" vpc_id = data.aws_vpc.vpc.id protocol_version = \"HTTP1\" deregistration_delay = 10 health_check { enabled = true interval = 10 path = \"/health\" port = \"32767\" healthy_threshold = 2 unhealthy_threshold = 2 timeout = 2 protocol = \"HTTP\" matcher = \"200\" ", "keywords": ["instance", "test"]}, {"source": "Text", "text": "} tags = { environment = \"dev\" project = \"ext test 2\" Name = each.key } ", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "But is there a more efficient way to fetch all target groups? ", "keywords": ["efficient"]}]}, {"Id": "74247046", "PostTypeId": "2", "ParentId": "74242650", "CreationDate": "2022-10-29T16:41:41.220", "Score": "1", "Body": "<p>Since you're not creating your <code>tg</code> through a loop, it's not possible to index or use the splat as you tried.</p>\n<p>You have two choices, create a variable type object with your <code>tg</code> data and iterate over that variable and then use the splat or create a local with the attributes that you want, and then iterate over it, something like this</p>\n<pre><code>locals {\n  all_tg = [ resource.aws_lb_target_group.dev-ext-test-msvc1-pub,\n             resource.aws_lb_target_group.dev-ext-test-msvc2-pub,\n             resource.aws_lb_target_group.dev-ext-test-msvc5-pub,\n             resource.aws_lb_target_group.dev-ext-test-msvc4-pub\n  ]\n\noutput &quot;all_tg_names&quot; {\n  value = [ for tg in tolist(local.all_tg) : tg.name ]\n} \n</code></pre>\n<p>Here an example:</p>\n<pre><code>terraform {\n\n}\n\nprovider &quot;random&quot; {}\n\nresource &quot;random_pet&quot; &quot;a&quot; {}\nresource &quot;random_pet&quot; &quot;b&quot; {}\nresource &quot;random_pet&quot; &quot;c&quot; {}\n\nlocals {\n  pet = [ resource.random_pet.a,\n          resource.random_pet.b,\n          resource.random_pet.c\n        ]\n}\n\noutput &quot;name&quot; {\n  value = [for pet in tolist(local.pet) : pet.id]\n}\n</code></pre>\n<p>Then, after apply it will produce something like this</p>\n<pre><code>Apply complete! Resources: 3 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nname = [\n  &quot;mint-reptile&quot;,\n  &quot;uncommon-coyote&quot;,\n  &quot;in-mutt&quot;,\n]\n</code></pre>\n<p>Of course, this solution could be much better if you rethink the way you're building the same resource.</p>\n<p>I hope it helps.</p>\n", "OwnerUserId": "3673929", "LastActivityDate": "2022-10-29T16:41:41.220", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "281119103", "PostHistoryTypeId": "2", "PostId": "74247046", "RevisionGUID": "97405185-ee02-49de-a63a-0b9bea555cef", "CreationDate": "2022-10-29T16:41:41.220", "UserId": "3673929", "Text": "Since you're not creating your `tg` through a loop, it's not possible to index or use the splat as you tried.\r\n\r\nYou have two choices, create a variable type object with your `tg` data and iterate over that variable and then use the splat or create a local with the attributes that you want, and then iterate over it, something like this\r\n\r\n```\r\nlocals {\r\n  all_tg = [ resource.aws_lb_target_group.dev-ext-test-msvc1-pub,\r\n             resource.aws_lb_target_group.dev-ext-test-msvc2-pub,\r\n             resource.aws_lb_target_group.dev-ext-test-msvc5-pub,\r\n             resource.aws_lb_target_group.dev-ext-test-msvc4-pub\r\n  ]\r\n\r\noutput \"all_tg_names\" {\r\n  value = [ for tg in tolist(local.all_tg) : tg.name ]\r\n} \r\n```\r\n\r\nHere an example:\r\n\r\n```\r\nterraform {\r\n\r\n}\r\n\r\nprovider \"random\" {}\r\n\r\nresource \"random_pet\" \"a\" {}\r\nresource \"random_pet\" \"b\" {}\r\nresource \"random_pet\" \"c\" {}\r\n\r\nlocals {\r\n  pet = [ resource.random_pet.a,\r\n       resource.random_pet.b,\r\n       resource.random_pet.c\r\n     ]\r\n}\r\n\r\noutput \"name\" {\r\n  value = [for pet in tolist(local.pet) : pet.id]\r\n}\r\n```\r\n\r\nThen, after apply it will produce something like this\r\n\r\n```\r\nApply complete! Resources: 3 added, 0 changed, 0 destroyed.\r\n\r\nOutputs:\r\n\r\nname = [\r\n  \"mint-reptile\",\r\n  \"uncommon-coyote\",\r\n  \"in-mutt\",\r\n]\r\n```\r\n\r\nOf course, this solution could be much better if you rethink the way you're building the same resource.\r\n\r\nI hope it helps.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You have two choices, create a variable type object with your `tg` data and iterate over that variable and then use the splat or create a local with the attributes that you want, and then iterate over it, something like this ``` locals { all_tg = [ resource.aws_lb_target_group.dev-ext-test-msvc1-pub, resource.aws_lb_target_group.dev-ext-test-msvc2-pub, resource.aws_lb_target_group.dev-ext-test-msvc5-pub, resource.aws_lb_target_group.dev-ext-test-msvc4-pub ] output \"all_tg_names\" { value = [ for tg in tolist(local.all_tg) : tg.name ] } ``` Here an example: ``` terraform { } provider \"random\" {} resource \"random_pet\" \"a\" {} resource \"random_pet\" \"b\" {} resource \"random_pet\" \"c\" {} locals { pet = [ resource.random_pet.a, resource.random_pet.b, resource.random_pet.c ] } output \"name\" { value = [for pet in tolist(local.pet) : pet.id] } ``` Then, after apply it will produce something like this ``` Apply complete! Resources: 3 added, 0 changed, 0 destroyed", "keywords": ["provider", "change", "test"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "But is there a more efficient way to fetch all target groups?", "keywords": ["efficient"]}]}