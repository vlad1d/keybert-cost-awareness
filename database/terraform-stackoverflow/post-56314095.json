{"Id": "56314095", "PostTypeId": "1", "AcceptedAnswerId": "56314652", "CreationDate": "2019-05-26T13:50:25.920", "Score": "2", "ViewCount": "3341", "Body": "<p>In the following code block I'm trying to pass an array of server names to the attributes_json block:    </p>\n\n<pre><code>resource \"aws_instance\" \"consul-server\" {\n    ami = var.consul-server\n    instance_type = \"t2.nano\"\n    key_name = var.aws_key_name\n    iam_instance_profile = \"dna_inst_mgmt\"\n    vpc_security_group_ids = [\n        \"${aws_security_group.yutani_consul.id}\",\n        \"${aws_security_group.yutani_ssh.id}\"\n    ]\n        subnet_id = \"${aws_subnet.public_1_subnet_us_east_1c.id}\"\n        associate_public_ip_address = true\n      tags = {\n        Name = \"consul-server${count.index}\"\n    }\n\n    root_block_device {\n        volume_size = \"30\"\n        delete_on_termination = \"true\"\n    }\n\n    connection {\n        type = \"ssh\"\n        user = \"chef\"\n        private_key = \"${file(\"${var.aws_key_path}\")}\"\n        timeout = \"2m\"\n        agent = false\n        host = self.public_ip\n    }\n\n   count = var.consul-server_count\n\n   provisioner \"chef\" {\n         attributes_json = &lt;&lt;-EOF\n                {\n                    \"consul\": {\n                            \"servers\": [\"${split(\",\",aws_instance.consul-server[count.index].id)}\"]\n                      }\n                }\n                EOF\n        use_policyfile = true\n        policy_name = \"consul_server\"\n        policy_group = \"aws_stage_enc\"\n        node_name       = \"consul-server${count.index}\"\n        server_url      = var.chef_server_url\n        recreate_client = true\n        skip_install = true\n        user_name       = var.chef_username\n        user_key        = \"${file(\"${var.chef_user_key}\")}\"\n       version         = \"14\"\n    }\n   }\n</code></pre>\n\n<p>Running this gives me an error:</p>\n\n<pre><code>Error: Cycle: aws_instance.consul-server[1], aws_instance.consul-server[0]\n</code></pre>\n\n<p>(This is after declaring a count of 2 in a variable for var.consul-server_count)</p>\n\n<p>Can anyone tell me what the proper way is to do this?</p>\n", "OwnerUserId": "4347446", "LastEditorUserId": "498256", "LastEditDate": "2019-06-15T01:00:55.013", "LastActivityDate": "2019-06-15T01:00:55.013", "Title": "How can I pass a comma separated array to a resource in terraform v0.12.0?", "Tags": "<terraform><hcl><terraform0.12+>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "links": [{"Id": "1675079715", "CreationDate": "2019-05-27T21:12:45.607", "PostId": "56314095", "RelatedPostId": "56137102", "LinkTypeId": "1"}], "history": [{"Id": "198484239", "PostHistoryTypeId": "2", "PostId": "56314095", "RevisionGUID": "dca9524b-66d3-4e4b-ab95-c0a9f6f5c30a", "CreationDate": "2019-05-26T13:50:25.920", "UserId": "4347446", "Text": "In the following code block I'm trying to pass an array of server names to the attributes_json block:    \r\n    \r\n    resource \"aws_instance\" \"consul-server\" {\r\n        ami = var.consul-server\r\n        instance_type = \"t2.nano\"\r\n        key_name = var.aws_key_name\r\n        iam_instance_profile = \"dna_inst_mgmt\"\r\n        vpc_security_group_ids = [\r\n            \"${aws_security_group.yutani_consul.id}\",\r\n            \"${aws_security_group.yutani_ssh.id}\"\r\n        ]\r\n            subnet_id = \"${aws_subnet.public_1_subnet_us_east_1c.id}\"\r\n            associate_public_ip_address = true\r\n          tags = {\r\n            Name = \"consul-server${count.index}\"\r\n        }\r\n    \r\n        root_block_device {\r\n            volume_size = \"30\"\r\n            delete_on_termination = \"true\"\r\n        }\r\n    \r\n        connection {\r\n            type = \"ssh\"\r\n            user = \"chef\"\r\n            private_key = \"${file(\"${var.aws_key_path}\")}\"\r\n            timeout = \"2m\"\r\n            agent = false\r\n            host = self.public_ip\r\n        }\r\n\r\n       count = var.consul-server_count\r\n\r\n       provisioner \"chef\" {\r\n             attributes_json = <<-EOF\r\n                    {\r\n                        \"consul\": {\r\n                                \"servers\": [\"${split(\",\",aws_instance.consul-server[count.index].id)}\"]\r\n                          }\r\n                    }\r\n                    EOF\r\n            use_policyfile = true\r\n            policy_name = \"consul_server\"\r\n            policy_group = \"aws_stage_enc\"\r\n            node_name       = \"consul-server${count.index}\"\r\n            server_url      = var.chef_server_url\r\n            recreate_client = true\r\n            skip_install = true\r\n            user_name       = var.chef_username\r\n            user_key        = \"${file(\"${var.chef_user_key}\")}\"\r\n           version         = \"14\"\r\n        }\r\n       }\r\n\r\nRunning this gives me an error:\r\n\r\n    Error: Cycle: aws_instance.consul-server[1], aws_instance.consul-server[0]\r\n\r\n(This is after declaring a count of 2 in a variable for var.consul-server_count)\r\n\r\nCan anyone tell me what the proper way is to do this?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "198484240", "PostHistoryTypeId": "1", "PostId": "56314095", "RevisionGUID": "dca9524b-66d3-4e4b-ab95-c0a9f6f5c30a", "CreationDate": "2019-05-26T13:50:25.920", "UserId": "4347446", "Text": "How can I pass a comma separated array to a resource in terraform v0.12.0?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "198484241", "PostHistoryTypeId": "3", "PostId": "56314095", "RevisionGUID": "dca9524b-66d3-4e4b-ab95-c0a9f6f5c30a", "CreationDate": "2019-05-26T13:50:25.920", "UserId": "4347446", "Text": "<terraform><hcl>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "199713031", "PostHistoryTypeId": "6", "PostId": "56314095", "RevisionGUID": "e83a1ec7-b5f5-43b5-8b8f-3b77877e6085", "CreationDate": "2019-06-15T01:00:55.013", "UserId": "498256", "Comment": "edited tags", "Text": "<terraform><hcl><terraform0.12+>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "56314652", "PostTypeId": "2", "ParentId": "56314095", "CreationDate": "2019-05-26T15:01:45.130", "Score": "1", "Body": "<p>There are two issues here: (1) How to interpolate a comma-separated list in a JSON string ; and (2) What is causing the cyclic dependency error.</p>\n\n<h2>How to interpolate a list to make a valid JSON array</h2>\n\n<h3>Use jsonencode</h3>\n\n<p>The cleanest method is to not use a heredoc at all and just use the <a href=\"https://www.terraform.io/docs/configuration/functions/jsonencode.html\" rel=\"nofollow noreferrer\"><code>jsonencode</code></a>  function.</p>\n\n<p>You could do this:</p>\n\n<pre class=\"lang-tf prettyprint-override\"><code>locals {\n  arr = [\"host1\", \"host2\", \"host3\"]\n}\n\noutput \"test\" {\n  value = jsonencode(\n    {\n      \"consul\" = {\n        \"servers\" = local.arr\n      }\n    })\n}\n</code></pre>\n\n<p>And this yields as output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Outputs:\n\ntest = {\"consul\":{\"servers\":[\"host1\",\"host2\",\"host3\"]}}\n</code></pre>\n\n<h3>Use the join function and a heredoc</h3>\n\n<p>The Chef provisioner's docs suggest to use a heredoc for the JSON string, so you can also do this:</p>\n\n<pre class=\"lang-tf prettyprint-override\"><code>locals {\n  arr = [\"host1\", \"host2\", \"host3\"]\n  sep = \"\\\", \\\"\"\n}\n\noutput \"test\" {\n  value = &lt;&lt;-EOF\n    {\n      \"consul\": {\n        \"servers\": [\"${join(local.sep, local.arr)}\"]\n      }\n    }\n  EOF\n}\n</code></pre>\n\n<p>If I apply that:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Outputs:\n\ntest = {\n  \"consul\": {\n    \"servers\": [\"host1\", \"host2\", \"host3\"]\n  }\n}\n</code></pre>\n\n<p>Some things to pay attention to here:</p>\n\n<ul>\n<li><p>You are trying to join your hosts so that they become valid JSON in the context of a JSON array. You need to join them with <code>\",\"</code>, not just a comma. That's why I've defined a local variable <code>sep = \"\\\", \\\"\"</code>.</p></li>\n<li><p>You seem to be trying to <code>split</code> there when you apparently need <code>join</code>.</p></li>\n</ul>\n\n<h2>Cyclic dependency issue</h2>\n\n<p>The cause of the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Error: Cycle: aws_instance.consul-server[1], aws_instance.consul-server[0]\n</code></pre>\n\n<p>Is that you have a cyclic dependency. Consider this simplified example:</p>\n\n<pre class=\"lang-tf prettyprint-override\"><code>resource \"aws_instance\" \"example\" {\n  count         = 3\n  ami           = \"ami-08589eca6dcc9b39c\"\n  instance_type = \"t2.micro\"\n  user_data     = &lt;&lt;-EOF\n    hosts=\"${join(\",\", aws_instance.example[count.index].id)}\"\n  EOF\n}\n</code></pre>\n\n<p>Or you could use splat notation there too for the same result i.e. <code>aws_instance.example.*.id</code>.</p>\n\n<p>Terraform plan then yields:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u25b6 terraform012 plan \n...\nError: Cycle: aws_instance.example[2], aws_instance.example[1], aws_instance.example[0]\n</code></pre>\n\n<p>So you get a cycle error there because <code>aws_instance.example.*.id</code> depends on the <code>aws_instance.example</code> being created, so the resource depends on itself. In other words, you can't use a resources exported values inside the resource itself.</p>\n\n<h2>What to do</h2>\n\n<p>I don't know much about Consul, but all the same, I'm a bit confused tbh why you want the EC2 instance IDs in the <code>servers</code> field. Wouldn't the Consul config be expecting IP addresses or hostnames there?</p>\n\n<p>In any case, you probably need to calculate the host names yourself outside of this resource, either as a static input parameter or something that you can calculate somehow. And I imagine you'll end up with something like:</p>\n\n<pre class=\"lang-tf prettyprint-override\"><code>variable \"host_names\" {\n  type    = list\n  default = [\"myhost1\"]\n}\n\nresource \"aws_instance\" \"consul_server\" {\n  ...\n  provisioner \"chef\" {\n    attributes_json = jsonencode(\n      {\n        \"consul\" = {\n          \"servers\" = var.host_names\n        }\n      })\n  }\n}\n</code></pre>\n", "OwnerUserId": "3787051", "LastEditorUserId": "3787051", "LastEditDate": "2019-05-27T13:29:17.963", "LastActivityDate": "2019-05-27T13:29:17.963", "CommentCount": "9", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "99240058", "PostId": "56314652", "Score": "0", "Text": "Thank you :) I was hoping I could make this list variable depending on the amount of instances I wanted to deploy. Would a nested loop work inside that locals definition to provide that?", "CreationDate": "2019-05-26T16:41:39.013", "UserId": "4347446", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "99248389", "PostId": "56314652", "Score": "0", "Text": "@TyMac. Ok. I see the problem there, you're getting a circular dependency because the AWS instance ID is only available after the provider has created the instances. I'll update my answer with some suggestions when I have a moment.", "CreationDate": "2019-05-27T05:13:52.147", "UserId": "3787051", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I see the problem there, you're getting a circular dependency because the AWS instance ID is only available after the provider has created the instances. ", "keywords": ["instance", "provider"]}]}, {"Id": "99260303", "PostId": "56314652", "Score": "0", "Text": "@TyMac, much expanded. Does that help?", "CreationDate": "2019-05-27T12:45:49.323", "UserId": "3787051", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "99263175", "PostId": "56314652", "Score": "1", "Text": "Very much expanded thanks! The reason for the servers field sounds like what you're guessing at - Chef configures consul server's \"retry_join\" option with the list of instances. I am looking to consolidate the instance names with the hostnames, chef node names, and the DNS names so that the names in the \"retry_join\" field show up the same in every place, especially when running \"consul members\". Sounds like I should actually be using something like \".dns_name\" instead of \".id\".", "CreationDate": "2019-05-27T14:20:54.687", "UserId": "4347446", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am looking to consolidate the instance names with the hostnames, chef node names, and the DNS names so that the names in the \"retry_join\" field show up the same in every place, especially when running \"consul members\". ", "keywords": ["instance"]}]}, {"Id": "99263412", "PostId": "56314652", "Score": "0", "Text": "@TyMac, there's a `.public_dns` but it isn't going to help because you still can't refer to it inside the resource block. I think you'll need to tell Terraform the DNS names up front some way.", "CreationDate": "2019-05-27T14:29:12.403", "UserId": "3787051", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "99269737", "PostId": "56314652", "Score": "0", "Text": "Looks like I need to base whatever I use (node name, instance name, dns ...etc) off of \"count\" to keep it dynamic however... otherwise it looks like I'd have to change the names in multiple places. Not sure how to do that with \"count\" however.", "CreationDate": "2019-05-27T19:20:51.620", "UserId": "4347446", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Looks like I need to base whatever I use (node name, instance name, dns ...etc) off of \"count\" to keep it dynamic however... otherwise it looks like I'd have to change the names in multiple places. ", "keywords": ["instance", "change"]}]}, {"Id": "99271581", "PostId": "56314652", "Score": "0", "Text": "@TyMac, does [this](https://stackoverflow.com/a/56146510/3787051) help?", "CreationDate": "2019-05-27T21:12:45.607", "UserId": "3787051", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "99272707", "PostId": "56314652", "Score": "0", "Text": "Seems to be on the right path... getting an error however: \"Error: Invalid template interpolation value: Cannot include the given value in a string template: string required.\"", "CreationDate": "2019-05-27T22:42:18.480", "UserId": "4347446", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "99274014", "PostId": "56314652", "Score": "0", "Text": "\"servers\": \"\\\\\\\"${local.consul_json}\\\\\\\"\" almost works after defining a locals block: consul_json = \"${join(\", \", var.consul_list)}\" - have to do this since I'm actually passing this in to a json block... unfortunately it produces this: retry_join = \\\"consul-server01, consul-server02, consul-server03\\\"", "CreationDate": "2019-05-28T00:56:25.557", "UserId": "4347446", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "198486647", "PostHistoryTypeId": "2", "PostId": "56314652", "RevisionGUID": "50b23152-0205-4fca-9e29-8e3934fd7309", "CreationDate": "2019-05-26T15:01:45.130", "UserId": "3787051", "Text": "I cannot reproduce this without a lot of setup, but, in general, here is how you can interpolate a comma-separate string to make valid JSON inside a Terraform heredoc:\r\n\r\n```lang-tf\r\nlocals {\r\n  arr = [\"host1\", \"host2\", \"host3\"]\r\n  sep = \"\\\",\\\"\"\r\n}\r\n\r\noutput \"test\" {\r\n  value = <<-EOF\r\n    {\r\n      \"consul\": {\r\n        \"servers\": [\"${join(local.sep, local.arr)}\"]\r\n      }\r\n    }\r\n  EOF\r\n}\r\n```\r\n\r\nIf I apply that:\r\n\r\n```lang-none\r\n\u25b6 terraform012 apply\r\n\r\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\r\n\r\nOutputs:\r\n\r\ntest = {\r\n  \"consul\": {\r\n    \"servers\": [\"host1\",\"host2\",\"host3\"]\r\n  }\r\n}\r\n```\r\n\r\nSome things to pay attention to here:\r\n\r\n- You are trying to join your hosts so that they become valid JSON in the context of a JSON array. You need to join them with `\",\"`, not just a comma. That's why I've defined a local variable `sep = \"\\\",\\\"\"`.\r\n\r\n- You seem to be trying to `split` there when you apparently need `join`. I'm not sure if that relates to the error message you're seeing or not.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I cannot reproduce this without a lot of setup, but, in general, here is how you can interpolate a comma-separate string to make valid JSON inside a Terraform heredoc: ```lang-tf locals { arr = [\"host1\", \"host2\", \"host3\"] sep = \"\\\",\\\"\" } output \"test\" { value = <<-EOF { \"consul\": { \"servers\": [\"${join(local.sep, local.arr)}\"] } } EOF } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "If I apply that: ```lang-none \u25b6 terraform012 apply Apply complete! Resources: 0 added, 0 changed, 0 destroyed. ", "keywords": ["change"]}, {"source": "Text", "text": "Outputs: test = { \"consul\": { \"servers\": [\"host1\",\"host2\",\"host3\"] } } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "Some things to pay attention to here: - You are trying to join your hosts so that they become valid JSON in the context of a JSON array. ", "keywords": ["pay"]}]}, {"Id": "198536506", "PostHistoryTypeId": "5", "PostId": "56314652", "RevisionGUID": "647ed237-e549-4a84-8c29-5b60923457a9", "CreationDate": "2019-05-27T12:45:28.563", "UserId": "3787051", "Comment": "added 2391 characters in body", "Text": "There are two issues here: (1) How to interpolate a comma-separated list in a JSON string ; and (2) What is causing the cyclic dependency error.\r\n\r\n## How to interpolate a list to make a valid JSON array\r\n\r\n### Use jsonencode\r\n\r\nThe cleanest method is to not use a heredoc at all and just use the [`jsonencode`](https://www.terraform.io/docs/configuration/functions/jsonencode.html)  function.\r\n\r\nYou could do this:\r\n\r\n```lang-tf\r\nlocals {\r\n  arr = [\"host1\", \"host2\", \"host3\"]\r\n}\r\n\r\noutput \"test\" {\r\n  value = jsonencode(\r\n    {\r\n      \"consul\" = {\r\n        \"servers\" = local.arr\r\n      }\r\n    })\r\n}\r\n```\r\n\r\nAnd this yields as output:\r\n\r\n```lang-none\r\nOutputs:\r\n\r\ntest = {\"consul\":{\"servers\":[\"host1\",\"host2\",\"host3\"]}}\r\n```\r\n\r\n### Use the join function and a heredoc\r\n\r\nThe Chef provisioner's docs suggest to use a heredoc for the JSON string, so you can also do this:\r\n\r\n```lang-tf\r\nlocals {\r\n  arr = [\"host1\", \"host2\", \"host3\"]\r\n  sep = \"\\\", \\\"\"\r\n}\r\n\r\noutput \"test\" {\r\n  value = <<-EOF\r\n    {\r\n      \"consul\": {\r\n        \"servers\": [\"${join(local.sep, local.arr)}\"]\r\n      }\r\n    }\r\n  EOF\r\n}\r\n```\r\n\r\nIf I apply that:\r\n\r\n```lang-none\r\nOutputs:\r\n\r\ntest = {\r\n  \"consul\": {\r\n    \"servers\": [\"host1\", \"host2\", \"host3\"]\r\n  }\r\n}\r\n```\r\n\r\nSome things to pay attention to here:\r\n\r\n- You are trying to join your hosts so that they become valid JSON in the context of a JSON array. You need to join them with `\",\"`, not just a comma. That's why I've defined a local variable `sep = \"\\\", \\\"\"`.\r\n\r\n- You seem to be trying to `split` there when you apparently need `join`.\r\n\r\n## Cyclic dependency issue\r\n\r\nThe cause of the error message:\r\n\r\n```lang-none\r\nError: Cycle: aws_instance.consul-server[1], aws_instance.consul-server[0]\r\n```\r\n\r\nIs that you have a cyclic dependency. Consider this simplified example:\r\n\r\n```lang-tf\r\nresource \"aws_instance\" \"example\" {\r\n  count         = 3\r\n  ami           = \"ami-08589eca6dcc9b39c\"\r\n  instance_type = \"t2.micro\"\r\n  key_name      = \"default\"\r\n  user_data     = <<-EOF\r\n    hosts=\"${join(\",\", aws_instance.example[count.index].id)}\"\r\n  EOF\r\n}\r\n```\r\n\r\nOr you could use splat notation there too for the same result i.e. `aws_instance.example.*.id`.\r\n\r\nTerraform plan then yields:\r\n\r\n```lang-none\r\n\u25b6 terraform012 plan \r\n...\r\nError: Cycle: aws_instance.example[2], aws_instance.example[1], aws_instance.example[0]\r\n```\r\n\r\nSo you get a cycle error there because `aws_instance.example.*.id` depends on the `aws_instance.example` being created, so the resource depends on itself. In other words, you can't use a resources exported values inside the resource itself.\r\n\r\n## What to do\r\n\r\nI don't know much about Consul, but all the same, I'm a bit confused tbh why you want the EC2 instance IDs in the `servers` field. Wouldn't the Consul config be expecting IP addresses or hostnames there?\r\n\r\nIn any case, you probably need to calculate the host names yourself outside of this resource, either as a static input parameter or something that you can calculate somehow. And I imagine you'll end up with something like:\r\n\r\n```lang-tf\r\nvariable \"host_names\" {\r\n  type    = list\r\n  default = [\"myhost1\"]\r\n}\r\n\r\nresource \"aws_instance\" \"consul_server\" {\r\n  ...\r\n  provisioner \"chef\" {\r\n    attributes_json = jsonencode(\r\n      {\r\n        \"consul\" = {\r\n          \"servers\" = var.host_names\r\n        }\r\n      })\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You could do this: ```lang-tf locals { arr = [\"host1\", \"host2\", \"host3\"] } output \"test\" { value = jsonencode( { \"consul\" = { \"servers\" = local.arr } }) } ``` And this yields as output: ```lang-none Outputs: test = {\"consul\":{\"servers\":[\"host1\",\"host2\",\"host3\"]}} ``` ### Use the join function and a heredoc ", "keywords": ["test"]}, {"source": "Text", "text": "The Chef provisioner's docs suggest to use a heredoc for the JSON string, so you can also do this: ```lang-tf locals { arr = [\"host1\", \"host2\", \"host3\"] sep = \"\\\", \\\"\" } output \"test\" { value = <<-EOF { \"consul\": { \"servers\": [\"${join(local.sep, local.arr)}\"] } } EOF } ``` If I apply that: ```lang-none Outputs: test = { \"consul\": { \"servers\": [\"host1\", \"host2\", \"host3\"] } } ``` Some things to pay attention to here: - You are trying to join your hosts so that they become valid JSON in the context of a JSON array. ", "keywords": ["pay", "test"]}, {"source": "Text", "text": "## What to do I don't know much about Consul, but all the same, I'm a bit confused tbh why you want the EC2 instance IDs in the `servers` field. ", "keywords": ["instance"]}]}, {"Id": "198539366", "PostHistoryTypeId": "5", "PostId": "56314652", "RevisionGUID": "7206a051-7c9b-4a68-b1dc-3f98ddf37a3f", "CreationDate": "2019-05-27T13:29:17.963", "UserId": "3787051", "Comment": "deleted 29 characters in body", "Text": "There are two issues here: (1) How to interpolate a comma-separated list in a JSON string ; and (2) What is causing the cyclic dependency error.\r\n\r\n## How to interpolate a list to make a valid JSON array\r\n\r\n### Use jsonencode\r\n\r\nThe cleanest method is to not use a heredoc at all and just use the [`jsonencode`](https://www.terraform.io/docs/configuration/functions/jsonencode.html)  function.\r\n\r\nYou could do this:\r\n\r\n```lang-tf\r\nlocals {\r\n  arr = [\"host1\", \"host2\", \"host3\"]\r\n}\r\n\r\noutput \"test\" {\r\n  value = jsonencode(\r\n    {\r\n      \"consul\" = {\r\n        \"servers\" = local.arr\r\n      }\r\n    })\r\n}\r\n```\r\n\r\nAnd this yields as output:\r\n\r\n```lang-none\r\nOutputs:\r\n\r\ntest = {\"consul\":{\"servers\":[\"host1\",\"host2\",\"host3\"]}}\r\n```\r\n\r\n### Use the join function and a heredoc\r\n\r\nThe Chef provisioner's docs suggest to use a heredoc for the JSON string, so you can also do this:\r\n\r\n```lang-tf\r\nlocals {\r\n  arr = [\"host1\", \"host2\", \"host3\"]\r\n  sep = \"\\\", \\\"\"\r\n}\r\n\r\noutput \"test\" {\r\n  value = <<-EOF\r\n    {\r\n      \"consul\": {\r\n        \"servers\": [\"${join(local.sep, local.arr)}\"]\r\n      }\r\n    }\r\n  EOF\r\n}\r\n```\r\n\r\nIf I apply that:\r\n\r\n```lang-none\r\nOutputs:\r\n\r\ntest = {\r\n  \"consul\": {\r\n    \"servers\": [\"host1\", \"host2\", \"host3\"]\r\n  }\r\n}\r\n```\r\n\r\nSome things to pay attention to here:\r\n\r\n- You are trying to join your hosts so that they become valid JSON in the context of a JSON array. You need to join them with `\",\"`, not just a comma. That's why I've defined a local variable `sep = \"\\\", \\\"\"`.\r\n\r\n- You seem to be trying to `split` there when you apparently need `join`.\r\n\r\n## Cyclic dependency issue\r\n\r\nThe cause of the error message:\r\n\r\n```lang-none\r\nError: Cycle: aws_instance.consul-server[1], aws_instance.consul-server[0]\r\n```\r\n\r\nIs that you have a cyclic dependency. Consider this simplified example:\r\n\r\n```lang-tf\r\nresource \"aws_instance\" \"example\" {\r\n  count         = 3\r\n  ami           = \"ami-08589eca6dcc9b39c\"\r\n  instance_type = \"t2.micro\"\r\n  user_data     = <<-EOF\r\n    hosts=\"${join(\",\", aws_instance.example[count.index].id)}\"\r\n  EOF\r\n}\r\n```\r\n\r\nOr you could use splat notation there too for the same result i.e. `aws_instance.example.*.id`.\r\n\r\nTerraform plan then yields:\r\n\r\n```lang-none\r\n\u25b6 terraform012 plan \r\n...\r\nError: Cycle: aws_instance.example[2], aws_instance.example[1], aws_instance.example[0]\r\n```\r\n\r\nSo you get a cycle error there because `aws_instance.example.*.id` depends on the `aws_instance.example` being created, so the resource depends on itself. In other words, you can't use a resources exported values inside the resource itself.\r\n\r\n## What to do\r\n\r\nI don't know much about Consul, but all the same, I'm a bit confused tbh why you want the EC2 instance IDs in the `servers` field. Wouldn't the Consul config be expecting IP addresses or hostnames there?\r\n\r\nIn any case, you probably need to calculate the host names yourself outside of this resource, either as a static input parameter or something that you can calculate somehow. And I imagine you'll end up with something like:\r\n\r\n```lang-tf\r\nvariable \"host_names\" {\r\n  type    = list\r\n  default = [\"myhost1\"]\r\n}\r\n\r\nresource \"aws_instance\" \"consul_server\" {\r\n  ...\r\n  provisioner \"chef\" {\r\n    attributes_json = jsonencode(\r\n      {\r\n        \"consul\" = {\r\n          \"servers\" = var.host_names\r\n        }\r\n      })\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You could do this: ```lang-tf locals { arr = [\"host1\", \"host2\", \"host3\"] } output \"test\" { value = jsonencode( { \"consul\" = { \"servers\" = local.arr } }) } ``` And this yields as output: ```lang-none Outputs: test = {\"consul\":{\"servers\":[\"host1\",\"host2\",\"host3\"]}} ``` ### Use the join function and a heredoc ", "keywords": ["test"]}, {"source": "Text", "text": "The Chef provisioner's docs suggest to use a heredoc for the JSON string, so you can also do this: ```lang-tf locals { arr = [\"host1\", \"host2\", \"host3\"] sep = \"\\\", \\\"\" } output \"test\" { value = <<-EOF { \"consul\": { \"servers\": [\"${join(local.sep, local.arr)}\"] } } EOF } ``` If I apply that: ```lang-none Outputs: test = { \"consul\": { \"servers\": [\"host1\", \"host2\", \"host3\"] } } ``` Some things to pay attention to here: - You are trying to join your hosts so that they become valid JSON in the context of a JSON array. ", "keywords": ["pay", "test"]}, {"source": "Text", "text": "## What to do I don't know much about Consul, but all the same, I'm a bit confused tbh why you want the EC2 instance IDs in the `servers` field. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "The Chef provisioner's docs suggest to use a heredoc for the JSON string, so you can also do this: If I apply that: Some things to pay attention to here: You are trying to join your hosts so that they become valid JSON in the context of a JSON array. ", "keywords": ["pay"]}, {"source": "Body", "text": "What to do I don't know much about Consul, but all the same, I'm a bit confused tbh why you want the EC2 instance IDs in the servers field. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": []}