{"Id": "74270372", "PostTypeId": "1", "AcceptedAnswerId": "74270536", "CreationDate": "2022-11-01T00:39:35.280", "Score": "0", "ViewCount": "406", "Body": "<p>In a <code>aws_ssoadmin_permission_set_inline_policy</code> ressource, i'm using a <code>for_each</code> to parse a list of name corresponding to my data source name. It doesn't work when using the <code>each.key</code> but wokring when hard coding the value <code>inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json </code></p>\n<pre><code>data &quot;aws_iam_policy_document&quot; &quot;emobg-sso-billing-admin&quot; {\n  statement {\n    sid    = &quot;VisualEditor0&quot;\n    effect = &quot;Allow&quot;\n    actions = [\n      &quot;aws-marketplace:*&quot;,\n      &quot;aws-portal:*&quot;,\n      &quot;budgets:*&quot;\n    ]\n    resources = [\n      &quot;*&quot;,\n    ]\n  }\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;emobg-sso-billing-audit&quot; {\n  statement {\n    sid    = &quot;VisualEditor0&quot;\n    effect = &quot;Allow&quot;\n    actions = [\n      &quot;support:*&quot;,\n      &quot;tag:*&quot;,\n      &quot;s3:*&quot;\n    ]\n    resources = [\n      &quot;*&quot;,\n    ]\n  }\n}\n\nresource &quot;aws_ssoadmin_permission_set&quot; &quot;emobg&quot; {\n  for_each = toset(local.permission_sets_name)\n\n  name             = each.key\n  description      = each.key\n  instance_arn     = local.sso_instance_arn\n  session_duration = local.session_duration\n}\n\nresource &quot;aws_ssoadmin_permission_set_inline_policy&quot; &quot;emobg&quot; {\n  for_each           = toset(local.permission_sets_name)\n\n  inline_policy      = format(&quot;data.aws_iam_policy_document.%s.json&quot;, each.key) # &lt;-- doesn't works\n#  inline_policy      = data.aws_iam_policy_document.emobg-sso-billing-admin.json # &lt;-- works\n  instance_arn       = local.sso_instance_arn\n  permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn\n}\n\nlocals {\n  session_duration    = &quot;PT8H&quot;\n\n  permission_sets_name = [\n    &quot;emobg-sso-billing-admin&quot;,\n    &quot;emobg-sso-billing-audit&quot;,\n  ]\n}\n</code></pre>\n<p><strong>The error message is:</strong></p>\n<pre><code>2022-11-01T01:19:43.923+0100 [ERROR] vertex &quot;aws_ssoadmin_permission_set_inline_policy.emobg[\\&quot;emobg-sso-billing-admin\\&quot;]&quot; error: &quot;inline_policy&quot; contains an invalid JSON policy\n2022-11-01T01:19:43.923+0100 [ERROR] vertex &quot;aws_ssoadmin_permission_set_inline_policy.emobg (expand)&quot; error: &quot;inline_policy&quot; contains an invalid JSON policy\n\u2577\n\u2502 Error: &quot;inline_policy&quot; contains an invalid JSON policy\n\u2502\n\u2502   with aws_ssoadmin_permission_set_inline_policy.emobg[&quot;emobg-sso-billing-admin&quot;],\n\u2502   on permission_set.tf line 13, in resource &quot;aws_ssoadmin_permission_set_inline_policy&quot; &quot;emobg&quot;:\n\u2502   13:   inline_policy      = format(&quot;data.aws_iam_policy_document.%s.json&quot;, each.value)\n</code></pre>\n<p>I really don't understand what's wrong with the JSON policy because it's the same.\nMaybe I missed something ?</p>\n", "OwnerUserId": "10653829", "LastEditorUserId": "10653829", "LastEditDate": "2022-11-01T01:37:45.097", "LastActivityDate": "2022-11-01T18:25:08.633", "Title": "terraform using for_each to find data source", "Tags": "<json><amazon-web-services><foreach><terraform>", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "281252351", "PostHistoryTypeId": "2", "PostId": "74270372", "RevisionGUID": "240749f4-5f89-453e-9f2a-ee161aa36f20", "CreationDate": "2022-11-01T00:39:35.280", "UserId": "10653829", "Text": "In a `aws_ssoadmin_permission_set_inline_policy` ressource, i'm using a `for_each` to parse a list of name corresponding to my data source name. It doesn't work when using the `each.key` but wokring when hard coding the value `inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json\r\n`\r\n\r\n```\r\ndata \"aws_iam_policy_document\" \"emobg-sso-billing-admin\" {\r\n  statement {\r\n    sid    = \"VisualEditor0\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"aws-marketplace:*\",\r\n      \"aws-portal:*\",\r\n      \"budgets:*\",\r\n      \"ce:*\",\r\n      \"cur:*\",\r\n      \"license-manager:*\",\r\n      \"purchase-orders:*\",\r\n      \"mgh:*\",\r\n      \"support:*\",\r\n      \"tag:*\",\r\n      \"s3:*\"\r\n    ]\r\n    resources = [\r\n      \"*\",\r\n    ]\r\n  }\r\n}\r\n\r\nresource \"aws_ssoadmin_permission_set\" \"emobg\" {\r\n  for_each = toset(local.permission_sets_name)\r\n\r\n  name             = each.key\r\n  description      = each.key\r\n  instance_arn     = local.sso_instance_arn\r\n  session_duration = local.session_duration\r\n}\r\n\r\nresource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\" {\r\n  for_each           = toset(local.permission_sets_name)\r\n\r\n  inline_policy      = format(\"data.aws_iam_policy_document.%s.json\", each.key) # <-- doesn't works\r\n#  inline_policy      = data.aws_iam_policy_document.emobg-sso-billing-admin.json # <-- works\r\n  instance_arn       = local.sso_instance_arn\r\n  permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn\r\n}\r\n\r\nlocals {\r\n  session_duration    = \"PT8H\"\r\n\r\n  permission_sets_name = [\r\n    \"emobg-sso-billing-admin\",\r\n#    \"emobg-sso-billing-audit\",\r\n}\r\n```\r\n\r\n\r\n**The error message is:**\r\n```\r\n2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg[\\\"emobg-sso-billing-admin\\\"]\" error: \"inline_policy\" contains an invalid JSON policy\r\n2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg (expand)\" error: \"inline_policy\" contains an invalid JSON policy\r\n\u2577\r\n\u2502 Error: \"inline_policy\" contains an invalid JSON policy\r\n\u2502\r\n\u2502   with aws_ssoadmin_permission_set_inline_policy.emobg[\"emobg-sso-billing-admin\"],\r\n\u2502   on permission_set.tf line 13, in resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\":\r\n\u2502   13:   inline_policy      = format(\"data.aws_iam_policy_document.%s.json\", each.value)\r\n```\r\n\r\nI really don't understand what's wrong with the JSON policy because it's the same.\r\nMaybe I missed something ?\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It doesn't work when using the `each.key` but wokring when hard coding the value `inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json ` ``` data \"aws_iam_policy_document\" \"emobg-sso-billing-admin\" { statement { sid = \"VisualEditor0\" effect = \"Allow\" actions = [ \"aws-marketplace:*\", \"aws-portal:*\", \"budgets:*\", \"ce:*\", \"cur:*\", \"license-manager:*\", \"purchase-orders:*\", \"mgh:*\", \"support:*\", \"tag:*\", \"s3:*\" ] resources = [ \"*\", ] } } resource \"aws_ssoadmin_permission_set\" \"emobg\" { for_each = toset(local.permission_sets_name) name = each.key description = each.key instance_arn = local.sso_instance_arn session_duration = local.session_duration } resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\" { for_each = toset(local.permission_sets_name) inline_policy = format(\"data.aws_iam_policy_document.%s.json\", each.key) # <-- doesn't works # inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json # <-- works instance_arn = local.sso_instance_arn permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn } locals { session_duration = \"PT8H\" permission_sets_name = [ \"emobg-sso-billing-admin\", # \"emobg-sso-billing-audit\", } ``` ", "keywords": ["bill"]}, {"source": "Text", "text": "2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg[\\\"emobg-sso-billing-admin\\\"]\" error: \"inline_policy\" contains an invalid JSON policy 2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg (expand)\" error: \"inline_policy\" contains an invalid JSON policy \u2577 \u2502 Error: \"inline_policy\" contains an invalid JSON policy \u2502 \u2502 with aws_ssoadmin_permission_set_inline_policy.emobg[\"emobg-sso-billing-admin\"], \u2502 on permission_set.tf line 13, in resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\": \u2502 13: inline_policy = format(\"data.aws_iam_policy_document.%s.json\", each.value) ``` ", "keywords": ["bill", "policy"]}, {"source": "Text", "text": "I really don't understand what's wrong with the JSON policy because it's the same", "keywords": ["policy"]}]}, {"Id": "281252353", "PostHistoryTypeId": "1", "PostId": "74270372", "RevisionGUID": "240749f4-5f89-453e-9f2a-ee161aa36f20", "CreationDate": "2022-11-01T00:39:35.280", "UserId": "10653829", "Text": "terraform using for_each to find data source", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "281252354", "PostHistoryTypeId": "3", "PostId": "74270372", "RevisionGUID": "240749f4-5f89-453e-9f2a-ee161aa36f20", "CreationDate": "2022-11-01T00:39:35.280", "UserId": "10653829", "Text": "<json><amazon-web-services><foreach><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "281252577", "PostHistoryTypeId": "5", "PostId": "74270372", "RevisionGUID": "3671cb10-d686-4ef1-8d38-abd16751a9ae", "CreationDate": "2022-11-01T00:46:17.553", "UserId": "10653829", "Comment": "added 5 characters in body", "Text": "In a `aws_ssoadmin_permission_set_inline_policy` ressource, i'm using a `for_each` to parse a list of name corresponding to my data source name. It doesn't work when using the `each.key` but wokring when hard coding the value `inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json\r\n`\r\n\r\n```\r\ndata \"aws_iam_policy_document\" \"emobg-sso-billing-admin\" {\r\n  statement {\r\n    sid    = \"VisualEditor0\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"aws-marketplace:*\",\r\n      \"aws-portal:*\",\r\n      \"budgets:*\",\r\n      \"ce:*\",\r\n      \"cur:*\",\r\n      \"license-manager:*\",\r\n      \"purchase-orders:*\",\r\n      \"mgh:*\",\r\n      \"support:*\",\r\n      \"tag:*\",\r\n      \"s3:*\"\r\n    ]\r\n    resources = [\r\n      \"*\",\r\n    ]\r\n  }\r\n}\r\n\r\nresource \"aws_ssoadmin_permission_set\" \"emobg\" {\r\n  for_each = toset(local.permission_sets_name)\r\n\r\n  name             = each.key\r\n  description      = each.key\r\n  instance_arn     = local.sso_instance_arn\r\n  session_duration = local.session_duration\r\n}\r\n\r\nresource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\" {\r\n  for_each           = toset(local.permission_sets_name)\r\n\r\n  inline_policy      = format(\"data.aws_iam_policy_document.%s.json\", each.key) # <-- doesn't works\r\n#  inline_policy      = data.aws_iam_policy_document.emobg-sso-billing-admin.json # <-- works\r\n  instance_arn       = local.sso_instance_arn\r\n  permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn\r\n}\r\n\r\nlocals {\r\n  session_duration    = \"PT8H\"\r\n\r\n  permission_sets_name = [\r\n    \"emobg-sso-billing-admin\",\r\n#    \"emobg-sso-billing-audit\",\r\n  ]\r\n}\r\n```\r\n\r\n\r\n**The error message is:**\r\n```\r\n2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg[\\\"emobg-sso-billing-admin\\\"]\" error: \"inline_policy\" contains an invalid JSON policy\r\n2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg (expand)\" error: \"inline_policy\" contains an invalid JSON policy\r\n\u2577\r\n\u2502 Error: \"inline_policy\" contains an invalid JSON policy\r\n\u2502\r\n\u2502   with aws_ssoadmin_permission_set_inline_policy.emobg[\"emobg-sso-billing-admin\"],\r\n\u2502   on permission_set.tf line 13, in resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\":\r\n\u2502   13:   inline_policy      = format(\"data.aws_iam_policy_document.%s.json\", each.value)\r\n```\r\n\r\nI really don't understand what's wrong with the JSON policy because it's the same.\r\nMaybe I missed something ?\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It doesn't work when using the `each.key` but wokring when hard coding the value `inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json ` ``` data \"aws_iam_policy_document\" \"emobg-sso-billing-admin\" { statement { sid = \"VisualEditor0\" effect = \"Allow\" actions = [ \"aws-marketplace:*\", \"aws-portal:*\", \"budgets:*\", \"ce:*\", \"cur:*\", \"license-manager:*\", \"purchase-orders:*\", \"mgh:*\", \"support:*\", \"tag:*\", \"s3:*\" ] resources = [ \"*\", ] } } resource \"aws_ssoadmin_permission_set\" \"emobg\" { for_each = toset(local.permission_sets_name) name = each.key description = each.key instance_arn = local.sso_instance_arn session_duration = local.session_duration } resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\" { for_each = toset(local.permission_sets_name) inline_policy = format(\"data.aws_iam_policy_document.%s.json\", each.key) # <-- doesn't works # inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json # <-- works instance_arn = local.sso_instance_arn permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn } locals { session_duration = \"PT8H\" permission_sets_name = [ \"emobg-sso-billing-admin\", # \"emobg-sso-billing-audit\", ] } ``` ", "keywords": ["bill"]}, {"source": "Text", "text": "2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg[\\\"emobg-sso-billing-admin\\\"]\" error: \"inline_policy\" contains an invalid JSON policy 2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg (expand)\" error: \"inline_policy\" contains an invalid JSON policy \u2577 \u2502 Error: \"inline_policy\" contains an invalid JSON policy \u2502 \u2502 with aws_ssoadmin_permission_set_inline_policy.emobg[\"emobg-sso-billing-admin\"], \u2502 on permission_set.tf line 13, in resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\": \u2502 13: inline_policy = format(\"data.aws_iam_policy_document.%s.json\", each.value) ``` ", "keywords": ["bill", "policy"]}, {"source": "Text", "text": "I really don't understand what's wrong with the JSON policy because it's the same", "keywords": ["policy"]}]}, {"Id": "281253899", "PostHistoryTypeId": "5", "PostId": "74270372", "RevisionGUID": "424b0b54-eec6-4fc6-b16c-c936893b83d6", "CreationDate": "2022-11-01T01:37:45.097", "UserId": "10653829", "Comment": "added 94 characters in body", "Text": "In a `aws_ssoadmin_permission_set_inline_policy` ressource, i'm using a `for_each` to parse a list of name corresponding to my data source name. It doesn't work when using the `each.key` but wokring when hard coding the value `inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json\r\n`\r\n\r\n```\r\ndata \"aws_iam_policy_document\" \"emobg-sso-billing-admin\" {\r\n  statement {\r\n    sid    = \"VisualEditor0\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"aws-marketplace:*\",\r\n      \"aws-portal:*\",\r\n      \"budgets:*\"\r\n    ]\r\n    resources = [\r\n      \"*\",\r\n    ]\r\n  }\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"emobg-sso-billing-audit\" {\r\n  statement {\r\n    sid    = \"VisualEditor0\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"support:*\",\r\n      \"tag:*\",\r\n      \"s3:*\"\r\n    ]\r\n    resources = [\r\n      \"*\",\r\n    ]\r\n  }\r\n}\r\n\r\nresource \"aws_ssoadmin_permission_set\" \"emobg\" {\r\n  for_each = toset(local.permission_sets_name)\r\n\r\n  name             = each.key\r\n  description      = each.key\r\n  instance_arn     = local.sso_instance_arn\r\n  session_duration = local.session_duration\r\n}\r\n\r\nresource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\" {\r\n  for_each           = toset(local.permission_sets_name)\r\n\r\n  inline_policy      = format(\"data.aws_iam_policy_document.%s.json\", each.key) # <-- doesn't works\r\n#  inline_policy      = data.aws_iam_policy_document.emobg-sso-billing-admin.json # <-- works\r\n  instance_arn       = local.sso_instance_arn\r\n  permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn\r\n}\r\n\r\nlocals {\r\n  session_duration    = \"PT8H\"\r\n\r\n  permission_sets_name = [\r\n    \"emobg-sso-billing-admin\",\r\n    \"emobg-sso-billing-audit\",\r\n  ]\r\n}\r\n```\r\n\r\n\r\n**The error message is:**\r\n```\r\n2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg[\\\"emobg-sso-billing-admin\\\"]\" error: \"inline_policy\" contains an invalid JSON policy\r\n2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg (expand)\" error: \"inline_policy\" contains an invalid JSON policy\r\n\u2577\r\n\u2502 Error: \"inline_policy\" contains an invalid JSON policy\r\n\u2502\r\n\u2502   with aws_ssoadmin_permission_set_inline_policy.emobg[\"emobg-sso-billing-admin\"],\r\n\u2502   on permission_set.tf line 13, in resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\":\r\n\u2502   13:   inline_policy      = format(\"data.aws_iam_policy_document.%s.json\", each.value)\r\n```\r\n\r\nI really don't understand what's wrong with the JSON policy because it's the same.\r\nMaybe I missed something ?\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It doesn't work when using the `each.key` but wokring when hard coding the value `inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json ` ``` data \"aws_iam_policy_document\" \"emobg-sso-billing-admin\" { statement { sid = \"VisualEditor0\" effect = \"Allow\" actions = [ \"aws-marketplace:*\", \"aws-portal:*\", \"budgets:*\" ] resources = [ \"*\", ] } } data \"aws_iam_policy_document\" \"emobg-sso-billing-audit\" { statement { sid = \"VisualEditor0\" effect = \"Allow\" actions = [ \"support:*\", \"tag:*\", \"s3:*\" ] resources = [ \"*\", ] } } resource \"aws_ssoadmin_permission_set\" \"emobg\" { for_each = toset(local.permission_sets_name) name = each.key description = each.key instance_arn = local.sso_instance_arn session_duration = local.session_duration } resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\" { for_each = toset(local.permission_sets_name) inline_policy = format(\"data.aws_iam_policy_document.%s.json\", each.key) # <-- doesn't works # inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json # <-- works instance_arn = local.sso_instance_arn permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn } locals { session_duration = \"PT8H\" permission_sets_name = [ \"emobg-sso-billing-admin\", \"emobg-sso-billing-audit\", ] } ``` ", "keywords": ["bill"]}, {"source": "Text", "text": "2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg[\\\"emobg-sso-billing-admin\\\"]\" error: \"inline_policy\" contains an invalid JSON policy 2022-11-01T01:19:43.923+0100 [ERROR] vertex \"aws_ssoadmin_permission_set_inline_policy.emobg (expand)\" error: \"inline_policy\" contains an invalid JSON policy \u2577 \u2502 Error: \"inline_policy\" contains an invalid JSON policy \u2502 \u2502 with aws_ssoadmin_permission_set_inline_policy.emobg[\"emobg-sso-billing-admin\"], \u2502 on permission_set.tf line 13, in resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\": \u2502 13: inline_policy = format(\"data.aws_iam_policy_document.%s.json\", each.value) ``` ", "keywords": ["bill", "policy"]}, {"source": "Text", "text": "I really don't understand what's wrong with the JSON policy because it's the same", "keywords": ["policy"]}]}], "answers": [{"Id": "74279177", "PostTypeId": "2", "ParentId": "74270372", "CreationDate": "2022-11-01T16:48:04.703", "Score": "0", "Body": "<p>As it was mentioned, it's not allowed from terraform to make a dynamic references, so I finally used a map even if the name of the policy is the same of the base name.</p>\n<pre><code>data &quot;aws_iam_policy_document&quot; &quot;emobg-sso-billing-admin&quot; {\n  statement {\n    sid    = &quot;VisualEditor0&quot;\n    effect = &quot;Allow&quot;\n    actions = [\n      &quot;aws-marketplace:*&quot;,\n      &quot;aws-portal:*&quot;,\n      &quot;budgets:*&quot;\n    ]\n    resources = [\n      &quot;*&quot;,\n    ]\n  }\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;emobg-sso-billing-audit&quot; {\n  statement {\n    sid    = &quot;VisualEditor0&quot;\n    effect = &quot;Allow&quot;\n    actions = [\n      &quot;support:*&quot;,\n      &quot;tag:*&quot;,\n      &quot;s3:*&quot;\n    ]\n    resources = [\n      &quot;*&quot;,\n    ]\n  }\n}\n\n... [ ALL OTHERS DATA SOURCES POLICIES ARE LISTED HERE ]\n\nresource &quot;aws_ssoadmin_permission_set&quot; &quot;emobg&quot; {\n  for_each = local.permission_set_map\n\n  name             = each.key\n  description      = each.key\n  instance_arn     = local.sso_instance_arn\n  session_duration = local.session_duration\n}\n\nresource &quot;aws_ssoadmin_permission_set_inline_policy&quot; &quot;emobg&quot; {\n  for_each = local.inline_policies_map\n\n  inline_policy      = each.value\n  instance_arn       = local.sso_instance_arn\n  permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn\n}\n\nlocals {\n  session_duration = &quot;PT8H&quot;\n  permission_set_map  = { for ps in local.permission_sets : ps.name =&gt; ps }\n  inline_policies_map = { for ps in local.permission_sets : ps.name =&gt; ps.inline_policy if ps.inline_policy != &quot;&quot; }\n}\n\nlocals {\n  permission_sets = [\n    {\n      name          = &quot;emobg-sso-billing-admin&quot;,\n      inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json\n    },\n    {\n      name          = &quot;emobg-sso-billing-audit&quot;,\n      inline_policy = data.aws_iam_policy_document.emobg-sso-billing-audit.json\n    },\n    {\n      ... [ All MY POLICIES ARE LISTED HERE ]\n    }\n  ]\n}\n</code></pre>\n", "OwnerUserId": "10653829", "LastActivityDate": "2022-11-01T16:48:04.703", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "281301513", "PostHistoryTypeId": "2", "PostId": "74279177", "RevisionGUID": "b9b209e8-f195-4a3d-97cf-a22ad174bde4", "CreationDate": "2022-11-01T16:48:04.703", "UserId": "10653829", "Text": "As it was mentioned, it's not allowed from terraform to make a dynamic references, so I finally used a map even if the name of the policy is the same of the base name.\r\n\r\n```\r\ndata \"aws_iam_policy_document\" \"emobg-sso-billing-admin\" {\r\n  statement {\r\n    sid    = \"VisualEditor0\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"aws-marketplace:*\",\r\n      \"aws-portal:*\",\r\n      \"budgets:*\"\r\n    ]\r\n    resources = [\r\n      \"*\",\r\n    ]\r\n  }\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"emobg-sso-billing-audit\" {\r\n  statement {\r\n    sid    = \"VisualEditor0\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"support:*\",\r\n      \"tag:*\",\r\n      \"s3:*\"\r\n    ]\r\n    resources = [\r\n      \"*\",\r\n    ]\r\n  }\r\n}\r\n\r\n... [ ALL OTHERS DATA SOURCES POLICIES ARE LISTED HERE ]\r\n\r\nresource \"aws_ssoadmin_permission_set\" \"emobg\" {\r\n  for_each = local.permission_set_map\r\n\r\n  name             = each.key\r\n  description      = each.key\r\n  instance_arn     = local.sso_instance_arn\r\n  session_duration = local.session_duration\r\n}\r\n\r\nresource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\" {\r\n  for_each = local.inline_policies_map\r\n\r\n  inline_policy      = each.value\r\n  instance_arn       = local.sso_instance_arn\r\n  permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn\r\n}\r\n\r\nlocals {\r\n  session_duration = \"PT8H\"\r\n  permission_set_map  = { for ps in local.permission_sets : ps.name => ps }\r\n  inline_policies_map = { for ps in local.permission_sets : ps.name => ps.inline_policy if ps.inline_policy != \"\" }\r\n}\r\n\r\nlocals {\r\n  permission_sets = [\r\n    {\r\n      name          = \"emobg-sso-billing-admin\",\r\n      inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json\r\n    },\r\n    {\r\n      name          = \"emobg-sso-billing-audit\",\r\n      inline_policy = data.aws_iam_policy_document.emobg-sso-billing-audit.json\r\n    },\r\n    {\r\n      ... [ All MY POLICIES ARE LISTED HERE ]\r\n    }\r\n  ]\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As it was mentioned, it's not allowed from terraform to make a dynamic references, so I finally used a map even if the name of the policy is the same of the base name. ", "keywords": ["policy"]}, {"source": "Text", "text": "``` data \"aws_iam_policy_document\" \"emobg-sso-billing-admin\" { statement { sid = \"VisualEditor0\" effect = \"Allow\" actions = [ \"aws-marketplace:*\", \"aws-portal:*\", \"budgets:*\" ] resources = [ \"*\", ] } } data \"aws_iam_policy_document\" \"emobg-sso-billing-audit\" { statement { sid = \"VisualEditor0\" effect = \"Allow\" actions = [ \"support:*\", \"tag:*\", \"s3:*\" ] resources = [ \"*\", ] } } ... [ ALL OTHERS DATA SOURCES POLICIES ARE LISTED HERE ] resource \"aws_ssoadmin_permission_set\" \"emobg\" { for_each = local.permission_set_map name = each.key description = each.key instance_arn = local.sso_instance_arn session_duration = local.session_duration } resource \"aws_ssoadmin_permission_set_inline_policy\" \"emobg\" { for_each = local.inline_policies_map inline_policy = each.value instance_arn = local.sso_instance_arn permission_set_arn = aws_ssoadmin_permission_set.emobg[each.key].arn } locals { session_duration = \"PT8H\" permission_set_map = { for ps in local.permission_sets : ps.name => ps } inline_policies_map = { for ps in local.permission_sets : ps.name => ps.inline_policy if ps.inline_policy != \"\" ", "keywords": ["bill"]}, {"source": "Text", "text": "} } locals { permission_sets = [ { name = \"emobg-sso-billing-admin\", inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json }, { name = \"emobg-sso-billing-audit\", inline_policy = data.aws_iam_policy_document.emobg-sso-billing-audit.json }, { ... [ All MY POLICIES ARE LISTED HERE ] } ] ", "keywords": ["bill"]}]}], "filtered-sentences": [{"source": "Body", "text": "As it was mentioned, it's not allowed from terraform to make a dynamic references, so I finally used a map even if the name of the policy is the same of the base name.", "keywords": ["policy"]}]}, {"Id": "74270536", "PostTypeId": "2", "ParentId": "74270372", "CreationDate": "2022-11-01T01:13:03.650", "Score": "1", "Body": "<p>Because you are using <code>format(&quot;data.aws_iam_policy_document.%s.json&quot;, each.key)</code>, the policy will be <strong>literal string</strong> <code>&quot;data.aws_iam_policy_document.%s.json&quot;</code>.</p>\n<p>You have only <strong>single</strong> policy, so you have to use it directly:</p>\n<pre><code> inline_policy      = data.aws_iam_policy_document.emobg-sso-billing-admin.json \n</code></pre>\n<p>that's why it works. You do not have more then one <code>aws_iam_policy_document</code> in your code.</p>\n<p><strong>Thanks</strong> to <a href=\"https://stackoverflow.com/users/248823/marcin\">Marcin</a>, who give me the anser in comment: You can't do what you want. TF does not support dynamic references to different resources.</p>\n", "OwnerUserId": "248823", "LastEditorUserId": "10653829", "LastEditDate": "2022-11-01T18:25:08.633", "LastActivityDate": "2022-11-01T18:25:08.633", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131124313", "PostId": "74270536", "Score": "0", "Text": "No, i have a lot of policies, above it's just an example, that's why I would like to use a format with `each_key`. I'll modify my example code for no misunderstanding.", "CreationDate": "2022-11-01T01:35:19.980", "UserId": "10653829", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131124408", "PostId": "74270536", "Score": "2", "Text": "@Bakka You can't do what you want. TF does not support dynamic references to different resources. You have to create a single `aws_iam_policy_document` and use `for_each` and `count` to create different instances of it.", "CreationDate": "2022-11-01T01:48:56.377", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "281253299", "PostHistoryTypeId": "2", "PostId": "74270536", "RevisionGUID": "dd7ce020-74b8-4613-ba60-c40ae93adbde", "CreationDate": "2022-11-01T01:13:03.650", "UserId": "248823", "Text": "Because you are using `format(\"data.aws_iam_policy_document.%s.json\", each.key)`, the policy will be **literal string** `\"data.aws_iam_policy_document.%s.json\"`. \r\n\r\nYou have only **single** policy, so you have to use it directly:\r\n\r\n```\r\n inline_policy      = data.aws_iam_policy_document.emobg-sso-billing-admin.json \r\n```\r\n\r\nthat's why it works. You do not have more then one `aws_iam_policy_document` in your code.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Because you are using `format(\"data.aws_iam_policy_document.%s.json\", each.key)`, the policy will be **literal string** `\"data.aws_iam_policy_document.%s.json\"`. ", "keywords": ["policy"]}, {"source": "Text", "text": "You have only **single** policy, so you have to use it directly: ``` inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json ``` that's why it works", "keywords": ["bill", "policy"]}]}, {"Id": "281307692", "PostHistoryTypeId": "5", "PostId": "74270536", "RevisionGUID": "c290411e-2ff2-4b40-af79-32ea4bde4a90", "CreationDate": "2022-11-01T18:25:08.633", "UserId": "10653829", "Comment": "Marcin give me the final answer in comment, so i add it to the answer", "Text": "Because you are using `format(\"data.aws_iam_policy_document.%s.json\", each.key)`, the policy will be **literal string** `\"data.aws_iam_policy_document.%s.json\"`. \r\n\r\nYou have only **single** policy, so you have to use it directly:\r\n\r\n```\r\n inline_policy      = data.aws_iam_policy_document.emobg-sso-billing-admin.json \r\n```\r\n\r\nthat's why it works. You do not have more then one `aws_iam_policy_document` in your code.\r\n\r\n\r\n**Thanks** to [Marcin][1], who give me the anser in comment: You can't do what you want. TF does not support dynamic references to different resources.\r\n\r\n\r\n  [1]: https://stackoverflow.com/users/248823/marcin", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Because you are using `format(\"data.aws_iam_policy_document.%s.json\", each.key)`, the policy will be **literal string** `\"data.aws_iam_policy_document.%s.json\"`. ", "keywords": ["policy"]}, {"source": "Text", "text": "You have only **single** policy, so you have to use it directly: ``` inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json ``` that's why it works. ", "keywords": ["bill", "policy"]}]}, {"Id": "281307693", "PostHistoryTypeId": "24", "PostId": "74270536", "RevisionGUID": "c290411e-2ff2-4b40-af79-32ea4bde4a90", "CreationDate": "2022-11-01T18:25:08.633", "Comment": "Proposed by 10653829 approved by 14133230, 1557658 edit id of 5435185", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": [{"source": "Body", "text": "Because you are using format(\"data.aws_iam_policy_document.%s.json\", each.key), the policy will be literal string \"data.aws_iam_policy_document.%s.json\". ", "keywords": ["policy"]}, {"source": "Body", "text": "You have only single policy, so you have to use it directly: that's why it works. ", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "It doesn't work when using the each.key but wokring when hard coding the value inline_policy = data.aws_iam_policy_document.emobg-sso-billing-admin.json ", "keywords": ["bill"]}, {"source": "Body", "text": "The error message is: I really don't understand what's wrong with the JSON policy because it's the same. ", "keywords": ["policy"]}]}