{"Id": "63551694", "PostTypeId": "1", "CreationDate": "2020-08-23T20:28:59.717", "Score": "0", "ViewCount": "604", "Body": "<p>I'm new to Terraform and like to create &quot;random&quot; instances.\nSome settings like OS, setup script ... will stay the same. Mostly the region/zone would change.</p>\n<p>How can I do that?\nIt seems Terraform already knows about which combinations are valid. For example with AWS EC2 or lightsail it will complain if you choose a wrong combination. I guess this will reduce the amount of work. I'm wondering though if this is valid for each provider.</p>\n<p>How could you automatically create a valid configuration, with only the region or zone changing each time Terraform runs?</p>\n<p>Edit: Config looks like:</p>\n<pre><code>    terraform {\n  required_providers {\n    aws = {\n      source = &quot;hashicorp/aws&quot;\n    }\n  }\n}\n\nprovider &quot;aws&quot; {\n#  profile    = &quot;default&quot;\n#  region     = &quot;us-west-2&quot;\n   accesskey = ...\n   secretkey = ...\n}\n\nresource &quot;aws_instance&quot; &quot;example&quot; {\n  ami           = &quot;ami-830c94e3&quot;\n  instance_type = &quot;t2.micro&quot;\n}\n</code></pre>\n", "OwnerUserId": "13052537", "LastEditorUserId": "13052537", "LastEditDate": "2020-08-24T09:48:42.157", "LastActivityDate": "2020-08-24T19:08:16.930", "Title": "Creating a \"random\" instance with Terraform - autocreate valid configurations", "Tags": "<terraform>", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "229368934", "PostHistoryTypeId": "2", "PostId": "63551694", "RevisionGUID": "1199262a-af88-4b06-a0f8-507a1b67edbd", "CreationDate": "2020-08-23T20:28:59.717", "UserId": "13052537", "Text": "I'm new to Terraform and like to create \"random\" instances.\r\nSome settings like OS, setup script ... will stay the same. Mostly the region/zone would change.\r\n\r\nHow can I do that?\r\nIt seems Terraform already knows about which combinations are valid. For example with AWS EC2 or lightsail it will complain if you choose a wrong combination. I guess this will reduce the amount of work. I'm wondering though if this is valid for each provider.\r\n\r\nHow could you automatically create a valid configuration, with only the region or zone changing each time Terraform runs? ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Mostly the region/zone would change. ", "keywords": ["change"]}, {"source": "Text", "text": "I'm wondering though if this is valid for each provider. ", "keywords": ["provider"]}, {"source": "Text", "text": "How could you automatically create a valid configuration, with only the region or zone changing each time Terraform runs?", "keywords": ["change"]}]}, {"Id": "229368935", "PostHistoryTypeId": "1", "PostId": "63551694", "RevisionGUID": "1199262a-af88-4b06-a0f8-507a1b67edbd", "CreationDate": "2020-08-23T20:28:59.717", "UserId": "13052537", "Text": "Creating a \"random\" instance with Terraform - autocreate valid configurations", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Creating a \"random\" instance with Terraform - autocreate valid configurations", "keywords": ["instance"]}]}, {"Id": "229368936", "PostHistoryTypeId": "3", "PostId": "63551694", "RevisionGUID": "1199262a-af88-4b06-a0f8-507a1b67edbd", "CreationDate": "2020-08-23T20:28:59.717", "UserId": "13052537", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "229397881", "PostHistoryTypeId": "5", "PostId": "63551694", "RevisionGUID": "f522c319-73fc-4e89-a141-acdec27f72a4", "CreationDate": "2020-08-24T09:48:42.157", "UserId": "13052537", "Comment": "added 432 characters in body", "Text": "I'm new to Terraform and like to create \"random\" instances.\r\nSome settings like OS, setup script ... will stay the same. Mostly the region/zone would change.\r\n\r\nHow can I do that?\r\nIt seems Terraform already knows about which combinations are valid. For example with AWS EC2 or lightsail it will complain if you choose a wrong combination. I guess this will reduce the amount of work. I'm wondering though if this is valid for each provider.\r\n\r\nHow could you automatically create a valid configuration, with only the region or zone changing each time Terraform runs? \r\n\r\nEdit: Config looks like:\r\n\r\n        terraform {\r\n      required_providers {\r\n        aws = {\r\n          source = \"hashicorp/aws\"\r\n        }\r\n      }\r\n    }\r\n    \r\n    provider \"aws\" {\r\n    #  profile    = \"default\"\r\n    #  region     = \"us-west-2\"\r\n       accesskey = ...\r\n       secretkey = ...\r\n    }\r\n\r\n    resource \"aws_instance\" \"example\" {\r\n      ami           = \"ami-830c94e3\"\r\n      instance_type = \"t2.micro\"\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Mostly the region/zone would change. ", "keywords": ["change"]}, {"source": "Text", "text": "I'm wondering though if this is valid for each provider. ", "keywords": ["provider"]}, {"source": "Text", "text": "How could you automatically create a valid configuration, with only the region or zone changing each time Terraform runs? ", "keywords": ["change"]}, {"source": "Text", "text": "Edit: Config looks like: terraform { required_providers { aws = { source = \"hashicorp/aws\" } } } provider \"aws\" { # profile = \"default\" # region = \"us-west-2\" accesskey = ... secretkey = ... } resource \"aws_instance\" \"example\" { ami = \"ami-830c94e3\" instance_type = \"t2.micro\" }", "keywords": ["provider"]}]}], "answers": [{"Id": "63567287", "PostTypeId": "2", "ParentId": "63551694", "CreationDate": "2020-08-24T19:08:16.930", "Score": "1", "Body": "<p>A declarative system like Terraform unfortunately isn't very friendly to randomness, because it expects the system to converge on a desired state, but random configuration would mean that the desired state would change on each action and thus it would never converge. Where possible I would recommend using &quot;randomization&quot; or &quot;distribution&quot; mechanisms built in to your cloud provider, such as AWS autoscaling over multiple subnets.</p>\n<p>However, to be pragmatic Terraform does have a <a href=\"https://registry.terraform.io/providers/hashicorp/random/latest\" rel=\"nofollow noreferrer\"><code>random</code> provider</a>, which represents the generation of random numbers as a funny sort of Terraform resource so that the random results can be preserved from one run to the next, in the same way as Terraform remembers the ID of an EC2 instance from one run to the next.</p>\n<p><a href=\"https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/shuffle\" rel=\"nofollow noreferrer\">The <code>random_shuffle</code> resource</a> can be useful for this sort of &quot;choose any one (or N) of these options&quot; situation.</p>\n<p>Taking your example of randomly choosing AWS regions and availability zones, the first step would be to enumerate all of the options your random choice can choose from:</p>\n<pre><code>locals {\n  possible_regions = toset([\n    &quot;us-east-1&quot;,\n    &quot;us-east-2&quot;,\n    &quot;us-west-1&quot;,\n    &quot;us-west-2&quot;,\n  ])\n  possible_availability_zones = tomap({\n    us-east-1 = toset([&quot;a&quot;, &quot;b&quot;, &quot;e&quot;])\n    us-east-2 = toset([&quot;a&quot;, &quot;c&quot;)\n    us-west-1 = toset([&quot;a&quot;, &quot;b&quot;])\n    us-west-2 = toset([&quot;b&quot;, &quot;c&quot;])\n  })\n}\n</code></pre>\n<p>You can then pass these inputs into <code>random_shuffle</code> resources to select, for example, one region and then two availability zones from that region:</p>\n<pre><code>resource &quot;random_shuffle&quot; &quot;region&quot; {\n  input        = local.possible_regions\n  result_count = 1\n}\n\nresource &quot;random_shuffle&quot; &quot;availability_zones&quot; {\n  input        = local.possible_availability_zones[local.chosen_region]\n  result_count = 2\n}\n\nlocals {\n  local.chosen_region = random_shuffle.region.result[0]\n  local.chosen_availability_zones = random_shuffle.availability_zones.result\n}\n</code></pre>\n<p>You can then use <code>local.chosen_region</code> and <code>local.chosen_availability_zones</code> elsewhere in your configuration.</p>\n<p>However, there is one important catch with randomly selecting regions in particular: the AWS provider is designed to require a region, because each AWS region is an entirely distinct set of endpoints, and so the provider won't be able to successfully configure itself if the region isn't known until the apply step, as would be the case if you wrote <code>region = local.chosen_region</code> in the provider configuration.</p>\n<p>To work around this will require using the exceptional-use-only <code>-target</code> option to <code>terraform apply</code>, to direct Terraform to first focus only on generating the random region, and ignore everything else until that has succeeded:</p>\n<pre><code># First apply with just the random region targeted\nterraform apply -target=random_shuffle.region\n\n# After that succeeds, run apply again normally to\n# create everything else.\nterraform apply\n</code></pre>\n", "OwnerUserId": "281848", "LastActivityDate": "2020-08-24T19:08:16.930", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "229434006", "PostHistoryTypeId": "2", "PostId": "63567287", "RevisionGUID": "1643546b-a515-469b-8e7d-48eab2747065", "CreationDate": "2020-08-24T19:08:16.930", "UserId": "281848", "Text": "A declarative system like Terraform unfortunately isn't very friendly to randomness, because it expects the system to converge on a desired state, but random configuration would mean that the desired state would change on each action and thus it would never converge. Where possible I would recommend using \"randomization\" or \"distribution\" mechanisms built in to your cloud provider, such as AWS autoscaling over multiple subnets.\r\n\r\nHowever, to be pragmatic Terraform does have a [`random` provider](https://registry.terraform.io/providers/hashicorp/random/latest), which represents the generation of random numbers as a funny sort of Terraform resource so that the random results can be preserved from one run to the next, in the same way as Terraform remembers the ID of an EC2 instance from one run to the next.\r\n\r\n[The `random_shuffle` resource](https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/shuffle) can be useful for this sort of \"choose any one (or N) of these options\" situation.\r\n\r\nTaking your example of randomly choosing AWS regions and availability zones, the first step would be to enumerate all of the options your random choice can choose from:\r\n\r\n```\r\nlocals {\r\n  possible_regions = toset([\r\n    \"us-east-1\",\r\n    \"us-east-2\",\r\n    \"us-west-1\",\r\n    \"us-west-2\",\r\n  ])\r\n  possible_availability_zones = tomap({\r\n    us-east-1 = toset([\"a\", \"b\", \"e\"])\r\n    us-east-2 = toset([\"a\", \"c\")\r\n    us-west-1 = toset([\"a\", \"b\"])\r\n    us-west-2 = toset([\"b\", \"c\"])\r\n  })\r\n}\r\n```\r\n\r\nYou can then pass these inputs into `random_shuffle` resources to select, for example, one region and then two availability zones from that region:\r\n\r\n```\r\nresource \"random_shuffle\" \"region\" {\r\n  input        = local.possible_regions\r\n  result_count = 1\r\n}\r\n\r\nresource \"random_shuffle\" \"availability_zones\" {\r\n  input        = local.possible_availability_zones[local.chosen_region]\r\n  result_count = 2\r\n}\r\n\r\nlocals {\r\n  local.chosen_region = random_shuffle.region.result[0]\r\n  local.chosen_availability_zones = random_shuffle.availability_zones.result\r\n}\r\n```\r\n\r\nYou can then use `local.chosen_region` and `local.chosen_availability_zones` elsewhere in your configuration.\r\n\r\nHowever, there is one important catch with randomly selecting regions in particular: the AWS provider is designed to require a region, because each AWS region is an entirely distinct set of endpoints, and so the provider won't be able to successfully configure itself if the region isn't known until the apply step, as would be the case if you wrote `region = local.chosen_region` in the provider configuration.\r\n\r\nTo work around this will require using the exceptional-use-only `-target` option to `terraform apply`, to direct Terraform to first focus only on generating the random region, and ignore everything else until that has succeeded:\r\n\r\n```\r\n# First apply with just the random region targeted\r\nterraform apply -target=random_shuffle.region\r\n\r\n# After that succeeds, run apply again normally to\r\n# create everything else.\r\nterraform apply\r\n```\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "A declarative system like Terraform unfortunately isn't very friendly to randomness, because it expects the system to converge on a desired state, but random configuration would mean that the desired state would change on each action and thus it would never converge. ", "keywords": ["change"]}, {"source": "Text", "text": "Where possible I would recommend using \"randomization\" or \"distribution\" mechanisms built in to your cloud provider, such as AWS autoscaling over multiple subnets. ", "keywords": ["provider"]}, {"source": "Text", "text": "However, to be pragmatic Terraform does have a [`random` provider](https://registry.terraform.io/providers/hashicorp/random/latest), which represents the generation of random numbers as a funny sort of Terraform resource so that the random results can be preserved from one run to the next, in the same way as Terraform remembers the ID of an EC2 instance from one run to the next. ", "keywords": ["instance", "provider"]}, {"source": "Text", "text": "However, there is one important catch with randomly selecting regions in particular: the AWS provider is designed to require a region, because each AWS region is an entirely distinct set of endpoints, and so the provider won't be able to successfully configure itself if the region isn't known until the apply step, as would be the case if you wrote `region = local.chosen_region` in the provider configuration. ", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "A declarative system like Terraform unfortunately isn't very friendly to randomness, because it expects the system to converge on a desired state, but random configuration would mean that the desired state would change on each action and thus it would never converge. ", "keywords": ["change"]}, {"source": "Body", "text": "Where possible I would recommend using \"randomization\" or \"distribution\" mechanisms built in to your cloud provider, such as AWS autoscaling over multiple subnets. ", "keywords": ["provider"]}, {"source": "Body", "text": "However, to be pragmatic Terraform does have a random provider, which represents the generation of random numbers as a funny sort of Terraform resource so that the random results can be preserved from one run to the next, in the same way as Terraform remembers the ID of an EC2 instance from one run to the next. ", "keywords": ["instance", "provider"]}, {"source": "Body", "text": "However, there is one important catch with randomly selecting regions in particular: the AWS provider is designed to require a region, because each AWS region is an entirely distinct set of endpoints, and so the provider won't be able to successfully configure itself if the region isn't known until the apply step, as would be the case if you wrote region = local.chosen_region in the provider configuration. ", "keywords": ["provider"]}]}, {"Id": "63552880", "PostTypeId": "2", "ParentId": "63551694", "CreationDate": "2020-08-23T23:09:25.707", "Score": "1", "Body": "<p>Using AWS as an example, <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance\" rel=\"nofollow noreferrer\">aws_instance</a> has two required parameters: <code>ami</code> and <code>instance_type</code>.</p>\n<p>Thus to create an instance, you need to provide both of them:</p>\n<pre><code>resource &quot;aws_instance&quot; &quot;my&quot; {\n  ami           = &quot;ami-02354e95b39ca8dec&quot;\n  instance_type = &quot;t2.micro&quot;\n}\n</code></pre>\n<p>Everything else will be deduced or set to their default values. In terms of availability zones and subnets, if not explicitly specified, they will be chosen &quot;randomly&quot; (AWS decides how to place them, so if fact they can be all in one AZ).</p>\n<p>Thus, to create 3 instances in different subnets and AZs you can do simply:</p>\n<pre><code>provider &quot;aws&quot; {\n  region     = &quot;us-east-1&quot;\n}\n\n\ndata &quot;aws_ami&quot; &quot;al2_ami&quot; {\n\n    most_recent = true\n\n    owners = [&quot;amazon&quot;]\n\n   filter {\n     name   = &quot;name&quot;\n     values = [&quot;amzn2-ami-hvm*&quot;]\n   }\n}\n\nresource &quot;aws_instance&quot; &quot;my&quot; {\n  count         = 3\n  ami           = data.aws_ami.al2_ami.id\n  instance_type = &quot;t2.micro&quot;\n}\n</code></pre>\n", "OwnerUserId": "248823", "LastEditorUserId": "248823", "LastEditDate": "2020-08-24T11:16:52.157", "LastActivityDate": "2020-08-24T11:16:52.157", "CommentCount": "7", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "112388400", "PostId": "63552880", "Score": "0", "Text": "That does not work for me. I get \"The argument \"region\" is required, but no definition was found.\" Do you maybe have a region defined elsewhere? Some module or default profile? How about other providers like GCE, Digitalocean ... ? Is there some way to list available regions with Terraform?", "CreationDate": "2020-08-24T08:31:17.543", "UserId": "13052537", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112390031", "PostId": "63552880", "Score": "0", "Text": "@shittyscripts There are no regions in aws_instance. Region is selected at the TF provider level, not instance level. I can't comment on other clouds.", "CreationDate": "2020-08-24T09:28:50.500", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Region is selected at the TF provider level, not instance level. ", "keywords": ["instance", "provider"]}]}, {"Id": "112390642", "PostId": "63552880", "Score": "0", "Text": "I added my non-working config. Can you take a look? This is more or less the first config I have ever set up so it could be there is stuff missing in the Terraform folder?", "CreationDate": "2020-08-24T09:50:04.650", "UserId": "13052537", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112390748", "PostId": "63552880", "Score": "0", "Text": "@shittyscripts Yes, I updated the answer. The only regional attribute was AMI. You can dynamically fetch valid AMI ID for a given region, using `data \"aws_ami\"`, and the example does not depend an a region now.", "CreationDate": "2020-08-24T09:53:43.697", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112393086", "PostId": "63552880", "Score": "0", "Text": "sorry to bother  you again. But I get the same error. It asks me for a region. When I enter that, it creates 3 instances in that region. Could you add a bit more stuff like \"provider\" etc to your cost sample minus api keys? So I can just try to copy paste and then \"terraform apply\" it. I", "CreationDate": "2020-08-24T11:14:18.770", "UserId": "13052537", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Could you add a bit more stuff like \"provider\" etc to your cost sample minus api keys? ", "keywords": ["cost", "provider"]}]}, {"Id": "112393717", "PostId": "63552880", "Score": "0", "Text": "This creates completely identical VM's in us-east-1. I need some randomness - like create 3 VM's (same type, AMI) , today in region A,B,C, on next invocation of terraform B,D,Z ...", "CreationDate": "2020-08-24T11:37:54.587", "UserId": "13052537", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112394135", "PostId": "63552880", "Score": "0", "Text": "AWS decides on this as I pointed in the answer. For fine grain control on the selection process of AZs you need at least auto scaling group or a custom solution.", "CreationDate": "2020-08-24T11:51:50.307", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "229373784", "PostHistoryTypeId": "2", "PostId": "63552880", "RevisionGUID": "6570f893-962f-4e61-aad1-8c3e2525d8ed", "CreationDate": "2020-08-23T23:09:25.707", "UserId": "248823", "Text": "Using AWS as an example, [aws_instance](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance) has two required parameters: `ami` and `instance_type`.\r\n\r\n\r\nThus to create an instance, you need to provide both of them:\r\n\r\n```\r\nresource \"aws_instance\" \"my\" {\r\n  ami           = \"ami-02354e95b39ca8dec\"\r\n  instance_type = \"t2.micro\"\r\n}\r\n```\r\n\r\nEverything else will be deduced or set to their default values. In terms of availability zones and subnets, if not explicitly specified, they will be chosen \"randomly\" (AWS decides how to place them, so if fact they can be all in one AZ).\r\n\r\nThus, to create 3 instances in different subnets and AZs you can do simply:\r\n\r\n```\r\nresource \"aws_instance\" \"my\" {\r\n  count         = 3\r\n  ami           = \"ami-02354e95b39ca8dec\"\r\n  instance_type = \"t2.micro\"\r\n}\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Using AWS as an example, [aws_instance](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance) has two required parameters: `ami` and `instance_type`. ", "keywords": ["instance"]}, {"source": "Text", "text": "Thus to create an instance, you need to provide both of them: ``` resource \"aws_instance\" \"my\" { ami = \"ami-02354e95b39ca8dec\" instance_type = \"t2.micro\" } ``` ", "keywords": ["instance"]}]}, {"Id": "229398173", "PostHistoryTypeId": "5", "PostId": "63552880", "RevisionGUID": "d3f1af96-e13e-416c-b196-76ce7ebfa9e6", "CreationDate": "2020-08-24T09:52:30.037", "UserId": "248823", "Comment": "added 163 characters in body", "Text": "Using AWS as an example, [aws_instance](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance) has two required parameters: `ami` and `instance_type`.\r\n\r\n\r\nThus to create an instance, you need to provide both of them:\r\n\r\n```\r\nresource \"aws_instance\" \"my\" {\r\n  ami           = \"ami-02354e95b39ca8dec\"\r\n  instance_type = \"t2.micro\"\r\n}\r\n```\r\n\r\nEverything else will be deduced or set to their default values. In terms of availability zones and subnets, if not explicitly specified, they will be chosen \"randomly\" (AWS decides how to place them, so if fact they can be all in one AZ).\r\n\r\nThus, to create 3 instances in different subnets and AZs you can do simply:\r\n\r\n```\r\ndata \"aws_ami\" \"al2_ami\" {\r\n\r\n    most_recent = true\r\n\r\n    owners = [\"amazon\"]\r\n\r\n   filter {\r\n     name   = \"name\"\r\n     values = [\"amzn2-ami-hvm*\"]\r\n   }\r\n}\r\n\r\nresource \"aws_instance\" \"my\" {\r\n  count         = 3\r\n  ami           = data.aws_ami.al2_ami.id\r\n  instance_type = \"t2.micro\"\r\n}\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Using AWS as an example, [aws_instance](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance) has two required parameters: `ami` and `instance_type`. ", "keywords": ["instance"]}, {"source": "Text", "text": "Thus to create an instance, you need to provide both of them: ``` resource \"aws_instance\" \"my\" { ami = \"ami-02354e95b39ca8dec\" instance_type = \"t2.micro\" } ``` ", "keywords": ["instance"]}]}, {"Id": "229403523", "PostHistoryTypeId": "5", "PostId": "63552880", "RevisionGUID": "50271579-0a76-477e-b56a-cf27ef7e6e74", "CreationDate": "2020-08-24T11:16:52.157", "UserId": "248823", "Comment": "added 53 characters in body", "Text": "Using AWS as an example, [aws_instance](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance) has two required parameters: `ami` and `instance_type`.\r\n\r\n\r\nThus to create an instance, you need to provide both of them:\r\n\r\n```\r\nresource \"aws_instance\" \"my\" {\r\n  ami           = \"ami-02354e95b39ca8dec\"\r\n  instance_type = \"t2.micro\"\r\n}\r\n```\r\n\r\nEverything else will be deduced or set to their default values. In terms of availability zones and subnets, if not explicitly specified, they will be chosen \"randomly\" (AWS decides how to place them, so if fact they can be all in one AZ).\r\n\r\nThus, to create 3 instances in different subnets and AZs you can do simply:\r\n\r\n```\r\nprovider \"aws\" {\r\n  region     = \"us-east-1\"\r\n}\r\n\r\n\r\ndata \"aws_ami\" \"al2_ami\" {\r\n\r\n    most_recent = true\r\n\r\n    owners = [\"amazon\"]\r\n\r\n   filter {\r\n     name   = \"name\"\r\n     values = [\"amzn2-ami-hvm*\"]\r\n   }\r\n}\r\n\r\nresource \"aws_instance\" \"my\" {\r\n  count         = 3\r\n  ami           = data.aws_ami.al2_ami.id\r\n  instance_type = \"t2.micro\"\r\n}\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Using AWS as an example, [aws_instance](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance) has two required parameters: `ami` and `instance_type`. ", "keywords": ["instance"]}, {"source": "Text", "text": "Thus to create an instance, you need to provide both of them: ``` resource \"aws_instance\" \"my\" { ami = \"ami-02354e95b39ca8dec\" instance_type = \"t2.micro\" } ``` ", "keywords": ["instance"]}, {"source": "Text", "text": "Thus, to create 3 instances in different subnets and AZs you can do simply: ``` provider \"aws\" { region = \"us-east-1\" } data \"aws_ami\" \"al2_ami\" { most_recent = true owners = [\"amazon\"] filter { name = \"name\" values = [\"amzn2-ami-hvm*\"] } } resource \"aws_instance\" \"my\" { count = 3 ami = data.aws_ami.al2_ami.id instance_type = \"t2.micro\" ", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "Thus to create an instance, you need to provide both of them: Everything else will be deduced or set to their default values. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Creating a \"random\" instance with Terraform - autocreate valid configurations", "keywords": ["instance"]}, {"source": "Body", "text": "Mostly the region/zone would change. ", "keywords": ["change"]}, {"source": "Body", "text": "I'm wondering though if this is valid for each provider. ", "keywords": ["provider"]}, {"source": "Body", "text": "How could you automatically create a valid configuration, with only the region or zone changing each time Terraform runs? ", "keywords": ["change"]}]}