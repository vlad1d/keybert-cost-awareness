{"Id": "61704797", "PostTypeId": "1", "AcceptedAnswerId": "61720030", "CreationDate": "2020-05-09T22:47:00.177", "Score": "2", "ViewCount": "592", "Body": "<p>I am attempting to setup a terraform project, using remote storage (Terraform Cloud), that will primarily provision Google Cloud Platform resources. As part of the infrastructure I require 3 environments that will be managed using terraform workspaces. Each environment will have it's own directory in my repository, within each I'll define the environment specific resources. The directory structure looks similar to:</p>\n\n<pre><code>|- terraform-project\n   |- environments\n   |  |- staging\n   |  |  |- main.tf\n   |  |  |- outputs.tf\n   |  |  |- variables.tf\n   |  |- production\n   |     |- main.tf\n   |     |- outputs.tf\n   |     |- variables.tf\n   |- backend.tf\n   |- main.tf\n   |- outputs.tf\n   |- variables.tf\n</code></pre>\n\n<p>However each environment needs to use the same Google Cloud Platform project. I would typically create the project using the following inside the root-most <code>main.tf</code> file:</p>\n\n<pre><code>resource \"random_id\" \"project_id\" {\n  byte_length = 4\n  prefix      = \"${var.project_name}-\"\n}\n\nresource \"google_project\" \"project\" {\n  name            = var.project_name\n  project_id      = random_id.project_id.hex\n  billing_account = var.billing_account\n  org_id          = var.org_id\n}\n</code></pre>\n\n<p>So my question is how would I create the project only the once and share this between environments? Doing the following inside each environment <code>main.tf</code> does not work:</p>\n\n<pre><code>resource \"google_compute_network\" \"vpc_network\" {\n  name    = \"staging-network\"\n  project = google_project.project.project_id\n}\n</code></pre>\n\n<p>The <code>google_project.project.project_id</code> resource cannot be found. Presumably because the <code>terraform plan environments/{staging,production}</code> command does not know to look up the directory tree.</p>\n\n<p>I thought about using a module but given the code above uses a random id would this not cause the project to be created once for each environment, but with a different id?</p>\n\n<hr>\n\n<p><strong>Edit</strong>: Another idea is to create a <code>core</code> workspace that will contain the setup of the Google Cloud Platform project, and any other shared resources. Then each environment will include a <code>data</code> block pointing to the remote state of the <code>core</code> workspace:</p>\n\n<pre><code>data \"terraform_remote_state\" \"core\" {\n  backend = \"remote\"\n  ...\n}\n\nresource \"google_compute_network\" \"vpc_network\" {\n  name    = \"staging-network\"\n  project = data.terraform_remote_state.core.outputs.project_id\n}\n</code></pre>\n\n<p>Is this an acceptable solution?</p>\n", "OwnerUserId": "1613695", "LastEditorUserId": "1613695", "LastEditDate": "2020-05-10T13:49:16.323", "LastActivityDate": "2020-05-10T23:24:41.663", "Title": "Share Google Cloud Platform project across terraform workspaces", "Tags": "<terraform><terraform-cloud>", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "221253203", "PostHistoryTypeId": "2", "PostId": "61704797", "RevisionGUID": "a173d4f4-da95-4d26-92fc-d02543bbb013", "CreationDate": "2020-05-09T22:47:00.177", "UserId": "1613695", "Text": "I am attempting to setup a terraform project, using remote storage (Terraform Cloud), that will primarily provision Google Cloud Platform resources. As part of the infrastructure I require 3 environments that will be managed using terraform workspaces. Each environment will have it's own directory in my repository, within each I'll define the environment specific resources. The directory structure looks similar to:\r\n\r\n    |- terraform-project\r\n       |- environments\r\n       |  |- staging\r\n       |  |  |- main.tf\r\n       |  |  |- outputs.tf\r\n       |  |  |- variables.tf\r\n       |  |- production\r\n       |     |- main.tf\r\n       |     |- outputs.tf\r\n       |     |- variables.tf\r\n       |- backend.tf\r\n       |- main.tf\r\n       |- outputs.tf\r\n       |- variables.tf\r\n\r\nHowever each environment needs to use the same Google Cloud Platform project. I would typically create the project using the following inside the root-most `main.tf` file:\r\n\r\n    resource \"random_id\" \"project_id\" {\r\n      byte_length = 4\r\n      prefix      = \"${var.project_name}-\"\r\n    }\r\n\r\n    resource \"google_project\" \"project\" {\r\n      name            = var.project_name\r\n      project_id      = random_id.project_id.hex\r\n      billing_account = var.billing_account\r\n      org_id          = var.org_id\r\n    }\r\n\r\nSo my question is how would I create the project only the once and share this between environments? Doing the following inside each environment `main.tf` does not work:\r\n\r\n    resource \"google_compute_network\" \"vpc_network\" {\r\n      name    = \"staging-network\"\r\n      project = google_project.project.project_id\r\n    }\r\n\r\nThe `google_project.project.project_id` resource cannot be found. Presumably because the `terraform plan environments/{staging,production}` command does not know to look up the directory tree.\r\n\r\nI thought about using a module but given the code above uses a random id would this not cause the project to be created once for each environment, but with a different id?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am attempting to setup a terraform project, using remote storage (Terraform Cloud), that will primarily provision Google Cloud Platform resources. ", "keywords": ["storage"]}, {"source": "Text", "text": "I would typically create the project using the following inside the root-most `main.tf` file: resource \"random_id\" \"project_id\" { byte_length = 4 prefix = \"${var.project_name}-\" } resource \"google_project\" \"project\" { name = var.project_name project_id = random_id.project_id.hex billing_account = var.billing_account org_id = var.org_id } ", "keywords": ["bill"]}]}, {"Id": "221253204", "PostHistoryTypeId": "1", "PostId": "61704797", "RevisionGUID": "a173d4f4-da95-4d26-92fc-d02543bbb013", "CreationDate": "2020-05-09T22:47:00.177", "UserId": "1613695", "Text": "Share Google Cloud Platform project across terraform workspaces", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "221253205", "PostHistoryTypeId": "3", "PostId": "61704797", "RevisionGUID": "a173d4f4-da95-4d26-92fc-d02543bbb013", "CreationDate": "2020-05-09T22:47:00.177", "UserId": "1613695", "Text": "<terraform><terraform-cloud>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "221281093", "PostHistoryTypeId": "5", "PostId": "61704797", "RevisionGUID": "9ca4bb7e-ffb6-4fbc-a546-df11b83ffc24", "CreationDate": "2020-05-10T11:57:00.980", "UserId": "1613695", "Comment": "Add another proposed solution", "Text": "I am attempting to setup a terraform project, using remote storage (Terraform Cloud), that will primarily provision Google Cloud Platform resources. As part of the infrastructure I require 3 environments that will be managed using terraform workspaces. Each environment will have it's own directory in my repository, within each I'll define the environment specific resources. The directory structure looks similar to:\r\n\r\n    |- terraform-project\r\n       |- environments\r\n       |  |- staging\r\n       |  |  |- main.tf\r\n       |  |  |- outputs.tf\r\n       |  |  |- variables.tf\r\n       |  |- production\r\n       |     |- main.tf\r\n       |     |- outputs.tf\r\n       |     |- variables.tf\r\n       |- backend.tf\r\n       |- main.tf\r\n       |- outputs.tf\r\n       |- variables.tf\r\n\r\nHowever each environment needs to use the same Google Cloud Platform project. I would typically create the project using the following inside the root-most `main.tf` file:\r\n\r\n    resource \"random_id\" \"project_id\" {\r\n      byte_length = 4\r\n      prefix      = \"${var.project_name}-\"\r\n    }\r\n\r\n    resource \"google_project\" \"project\" {\r\n      name            = var.project_name\r\n      project_id      = random_id.project_id.hex\r\n      billing_account = var.billing_account\r\n      org_id          = var.org_id\r\n    }\r\n\r\nSo my question is how would I create the project only the once and share this between environments? Doing the following inside each environment `main.tf` does not work:\r\n\r\n    resource \"google_compute_network\" \"vpc_network\" {\r\n      name    = \"staging-network\"\r\n      project = google_project.project.project_id\r\n    }\r\n\r\nThe `google_project.project.project_id` resource cannot be found. Presumably because the `terraform plan environments/{staging,production}` command does not know to look up the directory tree.\r\n\r\nI thought about using a module but given the code above uses a random id would this not cause the project to be created once for each environment, but with a different id?\r\n\r\n----------\r\n\r\n**Edit**: Another idea is to create a `core` workspace that will contain the setup of the Google Cloud Platform project, and any other shared resources. Then each environment will include a `data` block pointing to the remote state of the `core` workspace:\r\n\r\n    data \"terraform_remote_state\" \"core\" {\r\n      backend = \"remote\"\r\n      ...\r\n    }\r\n\r\n    resource \"google_compute_network\" \"vpc_network\" {\r\n      name    = \"staging-network\"\r\n      project = data.terraform_remote_state.core.project_id\r\n    }\r\n\r\nIs this an acceptable solution?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am attempting to setup a terraform project, using remote storage (Terraform Cloud), that will primarily provision Google Cloud Platform resources. ", "keywords": ["storage"]}, {"source": "Text", "text": "I would typically create the project using the following inside the root-most `main.tf` file: resource \"random_id\" \"project_id\" { byte_length = 4 prefix = \"${var.project_name}-\" } resource \"google_project\" \"project\" { name = var.project_name project_id = random_id.project_id.hex billing_account = var.billing_account org_id = var.org_id } ", "keywords": ["bill"]}]}, {"Id": "221287256", "PostHistoryTypeId": "5", "PostId": "61704797", "RevisionGUID": "568a5a0e-485c-4b51-ad54-88eb14849bcf", "CreationDate": "2020-05-10T13:49:16.323", "UserId": "1613695", "Comment": "added 8 characters in body", "Text": "I am attempting to setup a terraform project, using remote storage (Terraform Cloud), that will primarily provision Google Cloud Platform resources. As part of the infrastructure I require 3 environments that will be managed using terraform workspaces. Each environment will have it's own directory in my repository, within each I'll define the environment specific resources. The directory structure looks similar to:\r\n\r\n    |- terraform-project\r\n       |- environments\r\n       |  |- staging\r\n       |  |  |- main.tf\r\n       |  |  |- outputs.tf\r\n       |  |  |- variables.tf\r\n       |  |- production\r\n       |     |- main.tf\r\n       |     |- outputs.tf\r\n       |     |- variables.tf\r\n       |- backend.tf\r\n       |- main.tf\r\n       |- outputs.tf\r\n       |- variables.tf\r\n\r\nHowever each environment needs to use the same Google Cloud Platform project. I would typically create the project using the following inside the root-most `main.tf` file:\r\n\r\n    resource \"random_id\" \"project_id\" {\r\n      byte_length = 4\r\n      prefix      = \"${var.project_name}-\"\r\n    }\r\n\r\n    resource \"google_project\" \"project\" {\r\n      name            = var.project_name\r\n      project_id      = random_id.project_id.hex\r\n      billing_account = var.billing_account\r\n      org_id          = var.org_id\r\n    }\r\n\r\nSo my question is how would I create the project only the once and share this between environments? Doing the following inside each environment `main.tf` does not work:\r\n\r\n    resource \"google_compute_network\" \"vpc_network\" {\r\n      name    = \"staging-network\"\r\n      project = google_project.project.project_id\r\n    }\r\n\r\nThe `google_project.project.project_id` resource cannot be found. Presumably because the `terraform plan environments/{staging,production}` command does not know to look up the directory tree.\r\n\r\nI thought about using a module but given the code above uses a random id would this not cause the project to be created once for each environment, but with a different id?\r\n\r\n----------\r\n\r\n**Edit**: Another idea is to create a `core` workspace that will contain the setup of the Google Cloud Platform project, and any other shared resources. Then each environment will include a `data` block pointing to the remote state of the `core` workspace:\r\n\r\n    data \"terraform_remote_state\" \"core\" {\r\n      backend = \"remote\"\r\n      ...\r\n    }\r\n\r\n    resource \"google_compute_network\" \"vpc_network\" {\r\n      name    = \"staging-network\"\r\n      project = data.terraform_remote_state.core.outputs.project_id\r\n    }\r\n\r\nIs this an acceptable solution?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am attempting to setup a terraform project, using remote storage (Terraform Cloud), that will primarily provision Google Cloud Platform resources. ", "keywords": ["storage"]}, {"source": "Text", "text": "I would typically create the project using the following inside the root-most `main.tf` file: resource \"random_id\" \"project_id\" { byte_length = 4 prefix = \"${var.project_name}-\" } resource \"google_project\" \"project\" { name = var.project_name project_id = random_id.project_id.hex billing_account = var.billing_account org_id = var.org_id } ", "keywords": ["bill"]}]}], "answers": [{"Id": "61708498", "PostTypeId": "2", "ParentId": "61704797", "CreationDate": "2020-05-10T07:17:42.013", "Score": "0", "Body": "<p>Use the following Project directory</p>\n\n<pre><code>| - Terraform Project\n  |- staging\n    |- main.tf\n    |- backend.tf\n    |- provider.tf\n    |- vars.tf\n    |- output.tf\n  |- production\n    |- main.tf\n    |- backend.tf\n    |- provider.tf\n    |- vars.tf\n    |- output.tf\n  |- modules\n    |- main.tf\n    |- vars.tf\n    |- output.tf\n</code></pre>\n\n<p>Main Business logic will be in the modules/main.tf file.</p>\n\n<p>While provisioning the Resources per Environment, your {{env_type}}/main.tf will call the module, for example:-</p>\n\n<p>staging/main.tf:-</p>\n\n<pre><code>module \"example\" {\n  source = \"../modules/\"\n}\n</code></pre>\n\n<p>staging/provider.tf:-</p>\n\n<pre><code>provider \"google\" {\n  project     = var.PROJECT_NAME\n  credentials = \"xxxxxxxxxxx\"\n  region      = \"${var.REGION}\"\n}\n</code></pre>\n\n<p>Same will be for Production Environment type, So this you can use the same code and project for multiple environment type example</p>\n", "OwnerUserId": "7980157", "LastActivityDate": "2020-05-10T07:17:42.013", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "109156905", "PostId": "61708498", "Score": "0", "Text": "How does this help in regard to having a single Google Cloud Platform project being created and shared between environments? Whilst I understand modules are reusable \"chunks\" of infrastructure they tend to be used to spin up multiple, but similar, resources. If I included the module in each environment would terraform try to create a project for each?", "CreationDate": "2020-05-10T11:26:10.337", "UserId": "1613695", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "221268651", "PostHistoryTypeId": "2", "PostId": "61708498", "RevisionGUID": "1353b4c2-87ee-4852-9140-5a276cb6ccc2", "CreationDate": "2020-05-10T07:17:42.013", "UserId": "7980157", "Text": "Use the following Project directory\r\n\r\n    | - Terraform Project\r\n      |- staging\r\n        |- main.tf\r\n        |- backend.tf\r\n        |- provider.tf\r\n        |- vars.tf\r\n        |- output.tf\r\n      |- production\r\n        |- main.tf\r\n        |- backend.tf\r\n        |- provider.tf\r\n        |- vars.tf\r\n        |- output.tf\r\n      |- modules\r\n        |- main.tf\r\n        |- vars.tf\r\n        |- output.tf\r\n\r\nMain Business logic will be in the modules/main.tf file.\r\n\r\nWhile provisioning the Resources per Environment, your {{env_type}}/main.tf will call the module, for example:-\r\n\r\nstaging/main.tf:-\r\n\r\n    module \"example\" {\r\n      source = \"../modules/\"\r\n    }\r\nstaging/provider.tf:-\r\n\r\n    provider \"google\" {\r\n      project     = var.PROJECT_NAME\r\n      credentials = \"xxxxxxxxxxx\"\r\n      region      = \"${var.REGION}\"\r\n    }\r\n\r\nSame will be for Production Environment type, So this you can use the same code and project for multiple environment type example", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Use the following Project directory | - Terraform Project |- staging |- main.tf |- backend.tf |- provider.tf |- vars.tf |- output.tf |- production |- main.tf |- backend.tf |- provider.tf |- vars.tf |- output.tf |- modules |- main.tf |- vars.tf |- output.tf Main Business logic will be in the modules/main.tf file. ", "keywords": ["provider"]}, {"source": "Text", "text": "While provisioning the Resources per Environment, your {{env_type}}/main.tf will call the module, for example:- staging/main.tf:- module \"example\" { source = \"../modules/\" } staging/provider.tf:- provider \"google\" { project = var.PROJECT_NAME credentials = \"xxxxxxxxxxx\" region = \"${var.REGION}\" } Same will be for Production Environment type, So this you can use the same code and project for multiple environment type example", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "While provisioning the Resources per Environment, your {{env_type}}/main.tf will call the module, for example:- staging/main.tf:- staging/provider.tf:- Same will be for Production Environment type, So this you can use the same code and project for multiple environment type example", "keywords": ["provider"]}]}, {"Id": "61720030", "PostTypeId": "2", "ParentId": "61704797", "CreationDate": "2020-05-10T23:24:41.663", "Score": "1", "Body": "<p>The idea I went for in the end was to create another workspace to hold the shared, \"core\" infrastructure pieces. This is called <code>core</code> and its sole purpose (at least for now) is to create the Google Cloud Platform project. It then outputs the project id to be used by other workspaces. The final directory structure looked like this:</p>\n\n<pre><code>|- terraform-project\n   |- environments\n   |  |- core\n   |  |  |- main.tf\n   |  |  |- outputs.tf\n   |  |  |- variables.tf\n   |  |- staging\n   |  |  |- main.tf\n   |  |  |- outputs.tf\n   |  |- production\n   |     |- main.tf\n   |     |- outputs.tf\n   |- backend.tf\n</code></pre>\n\n<p>where <code>environments/core/main.tf</code> has the following configuration:</p>\n\n<pre><code>provider \"google\" {\n  project = \"admin-project\"\n  version = \"~&gt; 3.6.0\"\n}\n\nresource \"random_id\" \"project_id\" {\n  byte_length = 4\n  prefix      = \"${var.project_name}-\"\n}\n\nresource \"google_project\" \"project\" {\n  name            = var.project_name\n  project_id      = random_id.project_id.hex\n  billing_account = var.billing_account\n  org_id          = var.org_id\n}\n</code></pre>\n\n<p>and each of the other environment <code>main.tf</code> files have the following configuration:</p>\n\n<pre><code>provider \"google\" {\n  project = \"admin-project\"\n  version = \"~&gt; 3.6.0\"\n}\n\ndata \"terraform_remote_state\" \"core\" {\n  backend = \"remote\"\n\n  config = {\n    organization = \"my-org\"\n    workspaces = {\n      name = \"networking-core\"\n    }\n  }\n}\n\nresource \"google_compute_network\" \"vpc_network\" {\n  name        = \"my-network\"\n  project     = terraform_remote_state.core.outputs.project_id\n}\n</code></pre>\n\n<p>This of course now creates a dependancy between the workspaces that I use but I don't view this necessarily as a disadvantage.</p>\n", "OwnerUserId": "1613695", "LastActivityDate": "2020-05-10T23:24:41.663", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "221316115", "PostHistoryTypeId": "2", "PostId": "61720030", "RevisionGUID": "f00a6740-1b02-48d8-8187-b1a3c0aa3c3d", "CreationDate": "2020-05-10T23:24:41.663", "UserId": "1613695", "Text": "The idea I went for in the end was to create another workspace to hold the shared, \"core\" infrastructure pieces. This is called `core` and its sole purpose (at least for now) is to create the Google Cloud Platform project. It then outputs the project id to be used by other workspaces. The final directory structure looked like this:\r\n\r\n    |- terraform-project\r\n       |- environments\r\n       |  |- core\r\n       |  |  |- main.tf\r\n       |  |  |- outputs.tf\r\n       |  |  |- variables.tf\r\n       |  |- staging\r\n       |  |  |- main.tf\r\n       |  |  |- outputs.tf\r\n       |  |- production\r\n       |     |- main.tf\r\n       |     |- outputs.tf\r\n       |- backend.tf\r\n\r\nwhere `environments/core/main.tf` has the following configuration:\r\n\r\n    provider \"google\" {\r\n      project = \"admin-project\"\r\n      version = \"~> 3.6.0\"\r\n    }\r\n\r\n    resource \"random_id\" \"project_id\" {\r\n      byte_length = 4\r\n      prefix      = \"${var.project_name}-\"\r\n    }\r\n\r\n    resource \"google_project\" \"project\" {\r\n      name            = var.project_name\r\n      project_id      = random_id.project_id.hex\r\n      billing_account = var.billing_account\r\n      org_id          = var.org_id\r\n    }\r\n\r\nand each of the other environment `main.tf` files have the following configuration:\r\n\r\n    provider \"google\" {\r\n      project = \"admin-project\"\r\n      version = \"~> 3.6.0\"\r\n    }\r\n    \r\n    data \"terraform_remote_state\" \"core\" {\r\n      backend = \"remote\"\r\n    \r\n      config = {\r\n        organization = \"my-org\"\r\n        workspaces = {\r\n          name = \"networking-core\"\r\n        }\r\n      }\r\n    }\r\n    \r\n    resource \"google_compute_network\" \"vpc_network\" {\r\n      name        = \"my-network\"\r\n      project     = terraform_remote_state.core.outputs.project_id\r\n    }\r\n\r\nThis of course now creates a dependancy between the workspaces that I use but I don't view this necessarily as a disadvantage.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The final directory structure looked like this: |- terraform-project |- environments | |- core | | |- main.tf | | |- outputs.tf | | |- variables.tf | |- staging | | |- main.tf | | |- outputs.tf | |- production | |- main.tf | |- outputs.tf |- backend.tf where `environments/core/main.tf` has the following configuration: provider \"google\" { project = \"admin-project\" version = \"~> 3.6.0\" } resource \"random_id\" \"project_id\" { byte_length = 4 prefix = \"${var.project_name}-\" } resource \"google_project\" \"project\" { name = var.project_name project_id = random_id.project_id.hex billing_account = var.billing_account org_id = var.org_id } and each of the other environment `main.tf` files have the following configuration: provider \"google\" { project = \"admin-project\" version = \"~> 3.6.0\" } data \"terraform_remote_state\" \"core\" { backend = \"remote\" config = { organization = \"my-org\" workspaces = { name = \"networking-core\" } } } resource \"google_compute_network\" \"vpc_network\" { name = \"my-network\" project = terraform_remote_state.core.outputs.project_id } This of course now creates a dependancy between the workspaces that I use but I don't view this necessarily as a disadvantage", "keywords": ["bill", "networking", "provider"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I am attempting to setup a terraform project, using remote storage (Terraform Cloud), that will primarily provision Google Cloud Platform resources. ", "keywords": ["storage"]}]}