{"Id": "72886135", "PostTypeId": "1", "CreationDate": "2022-07-06T15:21:42.047", "Score": "6", "ViewCount": "1215", "Body": "<p>I've been attempting to recreate an existing infrastructure using Terraform and one of the required services is an S3 bucket which should contain publicly accessible images.</p>\n<p>Here is the Terraform code for the bucket:</p>\n<pre><code>resource &quot;aws_s3_bucket&quot; &quot;foo_icons&quot; {\n\n  bucket = join(&quot;-&quot;, [local.prefix, &quot;foo&quot;, &quot;icons&quot;])\n  tags = {\n    Name        = join(&quot;-&quot;, [local.prefix, &quot;foo&quot;, &quot;icons&quot;])\n    Environment = var.environment\n  }\n}\n\n\nresource &quot;aws_s3_bucket_acl&quot; &quot;icons_bucket_acl&quot; {\n  bucket = aws_s3_bucket.foo_icons.id\n  acl    = &quot;public-read&quot;\n}\n\n</code></pre>\n<p>The bucket is populated as follows:</p>\n<pre><code>resource &quot;aws_s3_object&quot; &quot;icon_repository_files&quot; {\n  for_each = fileset(&quot;../files/icon-repository/&quot;, &quot;**&quot;)\n  bucket = aws_s3_bucket.foo_icons.id\n  key = each.value\n  source = &quot;../files/icon-repository/${each.value}&quot;\n  etag = filemd5(&quot;../files/icon-repository/${each.value}&quot;)\n}\n</code></pre>\n<p>The result I can see on the console is that the bucket is in fact publicly accessible, but that each object in the bucket is not public according to the ACL shown. I also can't reach the S3 objects with the displayed url: this results in access denied.</p>\n<p>What is the best way to create a bucket with publicly accessible objects in Terraform? I read that ACL is no longer &quot;modern&quot; so if there is a better approach to achieve this, I'd be happy to hear it.</p>\n", "OwnerUserId": "16886539", "LastEditorUserId": "122643", "LastEditDate": "2023-04-12T03:57:54.953", "LastActivityDate": "2023-04-12T03:57:54.953", "Title": "Public S3 objects in public bucket", "Tags": "<amazon-s3><terraform><acl>", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "128736022", "PostId": "72886135", "Score": "1", "Text": "IMO you should use TF to create the bucket and settings, but objects within the bucket should be managed differently as they are not infrastructure. I would also recommend serving your s3 files through a CDN instead of a public bucket.", "CreationDate": "2022-07-06T15:34:00.960", "UserId": "1032785", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "135249295", "PostId": "72886135", "Score": "0", "Text": "You should use CloudFront to serve static content to web. CloudFront offers edge locations, caching, security, protection against DDoS attacks and it will cost you less in the long run.", "CreationDate": "2023-07-18T16:26:10.980", "UserId": "5660156", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "CloudFront offers edge locations, caching, security, protection against DDoS attacks and it will cost you less in the long run.", "keywords": ["cost"]}]}], "history": [{"Id": "273684186", "PostHistoryTypeId": "2", "PostId": "72886135", "RevisionGUID": "197abd12-575c-4f20-8eb9-7395fc461efd", "CreationDate": "2022-07-06T15:21:42.047", "UserId": "16886539", "Text": "I've been attempting to recreate an existing infrastructure using Terraform and one of the required services is an S3 bucket which should contain publicly accessible images.\r\n\r\nhere is the terraform code for the bucket:\r\n\r\n```\r\nresource \"aws_s3_bucket\" \"foo_icons\" {\r\n\r\n  bucket = join(\"-\", [local.prefix, \"foo\", \"icons\"])\r\n  tags = {\r\n    Name        = join(\"-\", [local.prefix, \"foo\", \"icons\"])\r\n    Environment = var.environment\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_s3_bucket_acl\" \"icons_bucket_acl\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  acl    = \"public-read\"\r\n}\r\n\r\n```\r\n\r\nthe bucket is populated as follows\r\n\r\n```\r\nresource \"aws_s3_object\" \"icon_repository_files\" {\r\n  for_each = fileset(\"../files/icon-repository/\", \"**\")\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  key = each.value\r\n  source = \"../files/icon-repository/${each.value}\"\r\n  etag = filemd5(\"../files/icon-repository/${each.value}\")\r\n\r\n}\r\n```\r\n\r\nThe result I can see on the console is that the bucket is in fact publicly accessible, but that each object in the bucket is not public according to the ACL shown. I also can't reach the s3 objects with the displayed url; this results in access denied.\r\n\r\nSo, I guess the question is what is the best way to create a bucket with publicly accessible objects in Terraform?\r\n\r\nThanks in advance.\r\n\r\nPS. I read that ACL is no longer \"modern\" so if there is a better approach to achieve this, I'd be happy to hear it.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "273684188", "PostHistoryTypeId": "1", "PostId": "72886135", "RevisionGUID": "197abd12-575c-4f20-8eb9-7395fc461efd", "CreationDate": "2022-07-06T15:21:42.047", "UserId": "16886539", "Text": "public s3 objects with terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "273684189", "PostHistoryTypeId": "3", "PostId": "72886135", "RevisionGUID": "197abd12-575c-4f20-8eb9-7395fc461efd", "CreationDate": "2022-07-06T15:21:42.047", "UserId": "16886539", "Text": "<amazon-s3><terraform><acl>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "291232243", "PostHistoryTypeId": "5", "PostId": "72886135", "RevisionGUID": "b924f27d-0331-4118-85b6-4ac23185f1f3", "CreationDate": "2023-04-12T03:57:54.953", "UserId": "122643", "Comment": "Clarity, minor punctuation/formatting changes.", "Text": "I've been attempting to recreate an existing infrastructure using Terraform and one of the required services is an S3 bucket which should contain publicly accessible images.\r\n\r\nHere is the Terraform code for the bucket:\r\n\r\n```\r\nresource \"aws_s3_bucket\" \"foo_icons\" {\r\n\r\n  bucket = join(\"-\", [local.prefix, \"foo\", \"icons\"])\r\n  tags = {\r\n    Name        = join(\"-\", [local.prefix, \"foo\", \"icons\"])\r\n    Environment = var.environment\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_s3_bucket_acl\" \"icons_bucket_acl\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  acl    = \"public-read\"\r\n}\r\n\r\n```\r\n\r\nThe bucket is populated as follows:\r\n\r\n```\r\nresource \"aws_s3_object\" \"icon_repository_files\" {\r\n  for_each = fileset(\"../files/icon-repository/\", \"**\")\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  key = each.value\r\n  source = \"../files/icon-repository/${each.value}\"\r\n  etag = filemd5(\"../files/icon-repository/${each.value}\")\r\n}\r\n```\r\n\r\nThe result I can see on the console is that the bucket is in fact publicly accessible, but that each object in the bucket is not public according to the ACL shown. I also can't reach the S3 objects with the displayed url: this results in access denied.\r\n\r\nWhat is the best way to create a bucket with publicly accessible objects in Terraform? I read that ACL is no longer \"modern\" so if there is a better approach to achieve this, I'd be happy to hear it.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Comment", "text": "Clarity, minor punctuation/formatting changes.", "keywords": ["change"]}]}, {"Id": "291232244", "PostHistoryTypeId": "4", "PostId": "72886135", "RevisionGUID": "b924f27d-0331-4118-85b6-4ac23185f1f3", "CreationDate": "2023-04-12T03:57:54.953", "UserId": "122643", "Comment": "Clarity, minor punctuation/formatting changes.", "Text": "Public S3 objects in public bucket", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Comment", "text": "Clarity, minor punctuation/formatting changes.", "keywords": ["change"]}]}], "answers": [{"Id": "75991758", "PostTypeId": "2", "ParentId": "72886135", "CreationDate": "2023-04-12T03:48:44.293", "Score": "0", "Body": "<p>A public bucket does not imply that all objects within it are also public. The permissions are more fine-grained than that. To allow blanket access to every object within the bucket by anyone at all, you can use the <code>aws_s3_bucket_policy</code> resource to give the <code>s3:GetObject</code> permission to everyone.</p>\n<p>Here's an example of a public bucket, using the more recent <code>aws_s3_bucket_public_access_block</code> resource which, as you mention, is intended to replace the <code>acl</code> argument.</p>\n<pre><code>resource &quot;aws_s3_bucket&quot; &quot;foo_icons&quot; {\n  bucket = join(&quot;-&quot;, [local.prefix, &quot;foo&quot;, &quot;icons&quot;])\n}\n\nresource &quot;aws_s3_bucket_ownership_controls&quot; &quot;foo_icons&quot; {\n  bucket = aws_s3_bucket.foo_icons.id\n  rule {\n    object_ownership = &quot;BucketOwnerPreferred&quot;\n  }\n}\n\nresource &quot;aws_s3_bucket_public_access_block&quot; &quot;foo_icons&quot; {\n  bucket = aws_s3_bucket.foo_icons.id\n\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n\nresource &quot;aws_s3_bucket_acl&quot; &quot;foo_icons&quot; {\n  bucket = aws_s3_bucket.foo_icons.id\n  acl    = &quot;public-read&quot;\n\n  depends_on = [\n    aws_s3_bucket_ownership_controls.foo_icons,\n    aws_s3_bucket_public_access_block.foo_icons,\n  ]\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;s3_bucket_foo_icons&quot; {\n  policy_id = &quot;s3_bucket_foo_icons&quot;\n\n  statement {\n    actions = [\n      &quot;s3:GetObject&quot;\n    ]\n    effect = &quot;Allow&quot;\n    resources = [\n      &quot;${aws_s3_bucket.foo_icons.arn}/*&quot;\n    ]\n    principals {\n      type        = &quot;*&quot;\n      identifiers = [&quot;*&quot;]\n    }\n    sid = &quot;S3IconsBucketPublicAccess&quot;\n  }\n}\n\nresource &quot;aws_s3_bucket_policy&quot; &quot;foo_icons&quot; {\n  bucket = aws_s3_bucket.foo_icons.id\n  policy = data.aws_iam_policy_document.s3_bucket.foo_icons.json\n}\n</code></pre>\n<p>Care should be taken not to accidentally apply the policy to other buckets, as we're deliberately overriding pretty much every precaution and permission S3 buckets get by default when they're created.</p>\n", "OwnerUserId": "122643", "LastEditorUserId": "122643", "LastEditDate": "2023-04-12T03:55:14.477", "LastActivityDate": "2023-04-12T03:55:14.477", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "291232053", "PostHistoryTypeId": "2", "PostId": "75991758", "RevisionGUID": "b7d7f59b-1665-4e46-b04c-a0092c91aae4", "CreationDate": "2023-04-12T03:48:44.293", "UserId": "122643", "Text": "A public bucket does not imply that all objects within it are also public. The permissions are more fine-grained than that. To allow blanket access to every object within the bucket by anyone at all, you can use the `aws_s3_bucket_policy` resource to give the `s3:GetObject` permission to everyone.\r\n\r\nHere's an example of a public bucket, using the more recent `aws_s3_bucket_public_access_block` resource which, as you mention, is intended to replace the `acl` argument.\r\n\r\n```terraform\r\nresource \"aws_s3_bucket\" \"foo_icons\" {\r\n  bucket = join(\"-\", [local.prefix, \"foo\", \"icons\"])\r\n}\r\n\r\nresource \"aws_s3_bucket_ownership_controls\" \"foo_icons\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  rule {\r\n    object_ownership = \"BucketOwnerPreferred\"\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"foo_icons\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n\r\n  block_public_acls       = false\r\n  block_public_policy     = false\r\n  ignore_public_acls      = false\r\n  restrict_public_buckets = false\r\n}\r\n\r\nresource \"aws_s3_bucket_acl\" \"foo_icons\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  acl    = \"public-read\"\r\n\r\n  depends_on = [\r\n    aws_s3_bucket_ownership_controls.foo_icons,\r\n    aws_s3_bucket_public_access_block.foo_icons,\r\n  ]\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"s3_bucket_foo_icons\" {\r\n  policy_id = \"s3_bucket_foo_icons\"\r\n\r\n  statement {\r\n    actions = [\r\n      \"s3:GetObject\"\r\n    ]\r\n    effect = \"Allow\"\r\n    resources = [\r\n      \"${aws_s3_bucket.foo_icons.arn}/*\"\r\n    ]\r\n    principals {\r\n      type        = \"*\"\r\n      identifiers = [\"*\"]\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_policy\" \"foo_icons\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  policy = data.aws_iam_policy_document.s3_bucket.foo_icons.json\r\n}\r\n```\r\nCare should be taken not to accidentally apply the policy to other buckets, as we're deliberately overriding pretty much every precaution and permission S3 buckets get by default when they're created.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "```terraform resource \"aws_s3_bucket\" \"foo_icons\" { bucket = join(\"-\", [local.prefix, \"foo\", \"icons\"]) } resource \"aws_s3_bucket_ownership_controls\" \"foo_icons\" { bucket = aws_s3_bucket.foo_icons.id rule { object_ownership = \"BucketOwnerPreferred\" } } resource \"aws_s3_bucket_public_access_block\" \"foo_icons\" { bucket = aws_s3_bucket.foo_icons.id block_public_acls = false block_public_policy = false ignore_public_acls = false restrict_public_buckets = false } resource \"aws_s3_bucket_acl\" \"foo_icons\" { bucket = aws_s3_bucket.foo_icons.id acl = \"public-read\" depends_on = [ aws_s3_bucket_ownership_controls.foo_icons, aws_s3_bucket_public_access_block.foo_icons, ] } data \"aws_iam_policy_document\" \"s3_bucket_foo_icons\" { policy_id = \"s3_bucket_foo_icons\" statement { actions = [ \"s3:GetObject\" ] effect = \"Allow\" resources = [ \"${aws_s3_bucket.foo_icons.arn}/*\" ] principals { type = \"*\" identifiers = [\"*\"] } } } resource \"aws_s3_bucket_policy\" \"foo_icons\" { bucket = aws_s3_bucket.foo_icons.id policy = data.aws_iam_policy_document.s3_bucket.foo_icons.json } ``` ", "keywords": ["policy"]}, {"source": "Text", "text": "Care should be taken not to accidentally apply the policy to other buckets, as we're deliberately overriding pretty much every precaution and permission S3 buckets get by default when they're created", "keywords": ["policy"]}]}, {"Id": "291232202", "PostHistoryTypeId": "5", "PostId": "75991758", "RevisionGUID": "59679bf2-c67c-4bfc-8fd6-07219af50ce0", "CreationDate": "2023-04-12T03:55:14.477", "UserId": "122643", "Comment": "added 39 characters in body", "Text": "A public bucket does not imply that all objects within it are also public. The permissions are more fine-grained than that. To allow blanket access to every object within the bucket by anyone at all, you can use the `aws_s3_bucket_policy` resource to give the `s3:GetObject` permission to everyone.\r\n\r\nHere's an example of a public bucket, using the more recent `aws_s3_bucket_public_access_block` resource which, as you mention, is intended to replace the `acl` argument.\r\n\r\n```terraform\r\nresource \"aws_s3_bucket\" \"foo_icons\" {\r\n  bucket = join(\"-\", [local.prefix, \"foo\", \"icons\"])\r\n}\r\n\r\nresource \"aws_s3_bucket_ownership_controls\" \"foo_icons\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  rule {\r\n    object_ownership = \"BucketOwnerPreferred\"\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"foo_icons\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n\r\n  block_public_acls       = false\r\n  block_public_policy     = false\r\n  ignore_public_acls      = false\r\n  restrict_public_buckets = false\r\n}\r\n\r\nresource \"aws_s3_bucket_acl\" \"foo_icons\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  acl    = \"public-read\"\r\n\r\n  depends_on = [\r\n    aws_s3_bucket_ownership_controls.foo_icons,\r\n    aws_s3_bucket_public_access_block.foo_icons,\r\n  ]\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"s3_bucket_foo_icons\" {\r\n  policy_id = \"s3_bucket_foo_icons\"\r\n\r\n  statement {\r\n    actions = [\r\n      \"s3:GetObject\"\r\n    ]\r\n    effect = \"Allow\"\r\n    resources = [\r\n      \"${aws_s3_bucket.foo_icons.arn}/*\"\r\n    ]\r\n    principals {\r\n      type        = \"*\"\r\n      identifiers = [\"*\"]\r\n    }\r\n    sid = \"S3IconsBucketPublicAccess\"\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_policy\" \"foo_icons\" {\r\n  bucket = aws_s3_bucket.foo_icons.id\r\n  policy = data.aws_iam_policy_document.s3_bucket.foo_icons.json\r\n}\r\n```\r\nCare should be taken not to accidentally apply the policy to other buckets, as we're deliberately overriding pretty much every precaution and permission S3 buckets get by default when they're created.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "```terraform resource \"aws_s3_bucket\" \"foo_icons\" { bucket = join(\"-\", [local.prefix, \"foo\", \"icons\"]) } resource \"aws_s3_bucket_ownership_controls\" \"foo_icons\" { bucket = aws_s3_bucket.foo_icons.id rule { object_ownership = \"BucketOwnerPreferred\" } } resource \"aws_s3_bucket_public_access_block\" \"foo_icons\" { bucket = aws_s3_bucket.foo_icons.id block_public_acls = false block_public_policy = false ignore_public_acls = false restrict_public_buckets = false } resource \"aws_s3_bucket_acl\" \"foo_icons\" { bucket = aws_s3_bucket.foo_icons.id acl = \"public-read\" depends_on = [ aws_s3_bucket_ownership_controls.foo_icons, aws_s3_bucket_public_access_block.foo_icons, ] } data \"aws_iam_policy_document\" \"s3_bucket_foo_icons\" { policy_id = \"s3_bucket_foo_icons\" statement { actions = [ \"s3:GetObject\" ] effect = \"Allow\" resources = [ \"${aws_s3_bucket.foo_icons.arn}/*\" ] principals { type = \"*\" identifiers = [\"*\"] } sid = \"S3IconsBucketPublicAccess\" } } resource \"aws_s3_bucket_policy\" \"foo_icons\" { bucket = aws_s3_bucket.foo_icons.id policy = data.aws_iam_policy_document.s3_bucket.foo_icons.json } ``` ", "keywords": ["policy"]}, {"source": "Text", "text": "Care should be taken not to accidentally apply the policy to other buckets, as we're deliberately overriding pretty much every precaution and permission S3 buckets get by default when they're created", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "Care should be taken not to accidentally apply the policy to other buckets, as we're deliberately overriding pretty much every precaution and permission S3 buckets get by default when they're created.", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": []}