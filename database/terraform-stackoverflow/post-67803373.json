{"Id": "67803373", "PostTypeId": "1", "CreationDate": "2021-06-02T10:29:24.920", "Score": "0", "ViewCount": "1689", "Body": "<p>I am trying to use Terraform and Terragrunt to create a bunch of different resources in Azure.\nAmongst others, I am deploying subscriptions and resource groups.</p>\n<p>I have one central variable file that contains some metadata, and deploys resources based on that.\nI can deploy all the subscriptions that I want, but I have an issue because I want to deploy resource groups within those subscriptions, and I am not sure how to do it the best way, since the resource group resource doesn't have a subscription parameter.</p>\n<p>Variable file looks something like:</p>\n<pre><code>inputs = {\n\n    departments = [\n    {\n        name = &quot;test&quot;,\n        region = &quot;West Europe&quot;\n        email = &quot;something@something.com&quot;\n\n    },\n    {\n        name = &quot;test2&quot;\n        region = &quot;West Europe&quot;\n        email = &quot;someone@something.com&quot;\n    }\n]\n</code></pre>\n<p>}</p>\n<p>So in my resource group module I have defined it like this:</p>\n<pre><code>resource &quot;azurerm_resource_group&quot; &quot;example&quot; {\nfor_each = {for dep in var.departments: dep.name =&gt; dep}\n\n  name     = &quot;rg-${each.value.name}&quot;\n  location = &quot;${each.value.region}&quot;\n}\n</code></pre>\n<p>And that is ok, but I need to switch context to the correct subscriptions, so the resource groups are being placed in the proper subs.\nAny ideas?</p>\n", "OwnerUserId": "16104554", "LastActivityDate": "2022-12-26T15:04:58.207", "Title": "Terraform resource group deployment in multiple subscriptions", "Tags": "<terraform><terraform-provider-azure>", "AnswerCount": "2", "CommentCount": "1", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "120129568", "PostId": "67803373", "Score": "0", "Text": "Any updates on this question? Does it solve your problem? Please let me know if you have any responses.", "CreationDate": "2021-06-14T06:31:05.227", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "247735814", "PostHistoryTypeId": "2", "PostId": "67803373", "RevisionGUID": "5ba6b89a-0574-45be-a8be-4e54f91ff9f4", "CreationDate": "2021-06-02T10:29:24.920", "UserId": "16104554", "Text": "I am trying to use Terraform and Terragrunt to create a bunch of different resources in Azure.\r\nAmongst others, I am deploying subscriptions and resource groups.\r\n\r\nI have one central variable file that contains some metadata, and deploys resources based on that.\r\nI can deploy all the subscriptions that I want, but I have an issue because I want to deploy resource groups within those subscriptions, and I am not sure how to do it the best way, since the resource group resource doesn't have a subscription parameter.\r\n\r\nVariable file looks something like:\r\n\r\n    inputs = {\r\n\r\n        departments = [\r\n        {\r\n            name = \"test\",\r\n            region = \"West Europe\"\r\n            email = \"something@something.com\"\r\n\r\n        },\r\n        {\r\n            name = \"test2\"\r\n            region = \"West Europe\"\r\n            email = \"someone@something.com\"\r\n        }\r\n    ]\r\n}\r\n\r\nSo in my resource group module I have defined it like this:\r\n\r\n    resource \"azurerm_resource_group\" \"example\" {\r\n    for_each = {for dep in var.departments: dep.name => dep}\r\n\r\n      name     = \"rg-${each.value.name}\"\r\n      location = \"${each.value.region}\"\r\n    }\r\n\r\nAnd that is ok, but I need to switch context to the correct subscriptions, so the resource groups are being placed in the proper subs.\r\nAny ideas?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Variable file looks something like: inputs = { departments = [ { name = \"test\", region = \"West Europe\" email = \"something@something.com\" }, { name = \"test2\" region = \"West Europe\" email = \"someone@something.com\" } ] } So in my resource group module I have defined it like this: resource \"azurerm_resource_group\" \"example\" { for_each = {for dep in var.departments: dep.name => dep} name = \"rg-${each.value.name}\" location = \"${each.value.region}\" ", "keywords": ["test"]}]}, {"Id": "247735815", "PostHistoryTypeId": "1", "PostId": "67803373", "RevisionGUID": "5ba6b89a-0574-45be-a8be-4e54f91ff9f4", "CreationDate": "2021-06-02T10:29:24.920", "UserId": "16104554", "Text": "Terraform resource group deployment in multiple subscriptions", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "247735816", "PostHistoryTypeId": "3", "PostId": "67803373", "RevisionGUID": "5ba6b89a-0574-45be-a8be-4e54f91ff9f4", "CreationDate": "2021-06-02T10:29:24.920", "UserId": "16104554", "Text": "<terraform><terraform-provider-azure>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "74921529", "PostTypeId": "2", "ParentId": "67803373", "CreationDate": "2022-12-26T15:04:58.207", "Score": "0", "Body": "<p>I hope the code below can fix your problem. (it works for me!)</p>\n<p><strong>main.tf</strong></p>\n<pre><code>\nprovider &quot;azurerm&quot; {\n  features {}\n}\n\ndata &quot;azurerm_billing_mca_account_scope&quot; &quot;bl&quot; {\n  billing_account_name = var.billing_account\n  billing_profile_name = var.billing_profile\n  invoice_section_name = var.invoice_section\n}\n\nresource &quot;azurerm_subscription&quot; &quot;subs&quot; {\n  subscription_name = &quot;test-new&quot;\n  billing_scope_id  = data.azurerm_billing_mca_account_scope.bl.id\n}\n\ncreated Subscription\nprovider &quot;azurerm&quot; {\n  alias           = &quot;new_sub&quot;\n  subscription_id = azurerm_subscription.subs.subscription_id\n  features {}\n}\n\n# Create a Resource Group in the newly created Subscription\nresource &quot;azurerm_resource_group&quot; &quot;example&quot; {\n  provider = azurerm.new_sub\n  name     = &quot;new-rg-in-new-sub&quot;\n  location = &quot;eastus2&quot;\n}\n\n</code></pre>\n<p>Note: if you face an error when creating the rg, then run again the <code>az login</code> and <code>terraform apply</code> again that will work, the az is not getting the new subscription automatically sometimes.</p>\n", "OwnerUserId": "16290031", "LastActivityDate": "2022-12-26T15:04:58.207", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "284998993", "PostHistoryTypeId": "2", "PostId": "74921529", "RevisionGUID": "045b8cf9-0895-4efc-99bd-cf3152790662", "CreationDate": "2022-12-26T15:04:58.207", "UserId": "16290031", "Text": "I hope the code below can fix your problem. (it works for me!)\r\n\r\n**main.tf**\r\n```\r\n\r\nprovider \"azurerm\" {\r\n  features {}\r\n}\r\n\r\ndata \"azurerm_billing_mca_account_scope\" \"bl\" {\r\n  billing_account_name = var.billing_account\r\n  billing_profile_name = var.billing_profile\r\n  invoice_section_name = var.invoice_section\r\n}\r\n\r\nresource \"azurerm_subscription\" \"subs\" {\r\n  subscription_name = \"test-new\"\r\n  billing_scope_id  = data.azurerm_billing_mca_account_scope.bl.id\r\n}\r\n\r\ncreated Subscription\r\nprovider \"azurerm\" {\r\n  alias           = \"new_sub\"\r\n  subscription_id = azurerm_subscription.subs.subscription_id\r\n  features {}\r\n}\r\n\r\n# Create a Resource Group in the newly created Subscription\r\nresource \"azurerm_resource_group\" \"example\" {\r\n  provider = azurerm.new_sub\r\n  name     = \"new-rg-in-new-sub\"\r\n  location = \"eastus2\"\r\n}\r\n\r\n```\r\n\r\nNote: if you face an error when creating the rg, then run again the `az login` and `terraform apply` again that will work, the az is not getting the new subscription automatically sometimes.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I hope the code below can fix your problem. (it works for me!) **main.tf** ``` provider \"azurerm\" { features {} } data \"azurerm_billing_mca_account_scope\" \"bl\" { billing_account_name = var.billing_account billing_profile_name = var.billing_profile invoice_section_name = var.invoice_section } resource \"azurerm_subscription\" \"subs\" { subscription_name = \"test-new\" billing_scope_id = data.azurerm_billing_mca_account_scope.bl.id } created Subscription provider \"azurerm\" { alias = \"new_sub\" subscription_id = azurerm_subscription.subs.subscription_id features {} } # Create a Resource Group in the newly created Subscription resource \"azurerm_resource_group\" \"example\" { provider = azurerm.new_sub name = \"new-rg-in-new-sub\" location = \"eastus2\" } ``` ", "keywords": ["bill", "provider", "test"]}]}], "filtered-sentences": []}, {"Id": "67814197", "PostTypeId": "2", "ParentId": "67803373", "CreationDate": "2021-06-03T01:07:42.547", "Score": "0", "Body": "<p>To deploy resources in multiple subscriptions, you can use multiple providers, <a href=\"https://www.terraform.io/docs/language/providers/configuration.html#alias-multiple-provider-configurations\" rel=\"nofollow noreferrer\">here</a> you can get more details and the example code below:</p>\n<pre><code>provider &quot;azurerm&quot; {\n    subscription_id = &quot;xxxxxx&quot;\n    tenant_id = &quot;xxxxxx&quot;\n    client_id = &quot;xxxxxx&quot;\n    client_secret = &quot;xxxxxx&quot;\n}\n\nprovider &quot;azurerm&quot; {\n    alias = sub2\n    subscription_id = &quot;xxxxxx&quot;\n    tenant_id = &quot;xxxxxx&quot;\n    client_id = &quot;xxxxxx&quot;\n    client_secret = &quot;xxxxxx&quot;\n}\n\nresource &quot;azurerm_resource_group&quot; &quot;example1&quot; {\n    provider = azurerm\n    ...\n}\n\nresource &quot;azurerm_resource_group&quot; &quot;example1&quot; {\n    provider = azurerm.sub2\n    ...\n}\n</code></pre>\n<p>And if you use the for_each in terraform, you can add the alias option in the input:</p>\n<pre><code>inputs = {\n\n    departments = [\n      {\n        name = &quot;test&quot;,\n        provider = &quot;azurerm&quot;\n        region = &quot;West Europe&quot;\n        email = &quot;something@something.com&quot;\n\n      },\n      {\n        name = &quot;test2&quot;\n        provider = &quot;azurerm.sub2&quot;\n        region = &quot;West Europe&quot;\n        email = &quot;someone@something.com&quot;\n      }\n    ]\n}\n</code></pre>\n<p>This is just an example, but it's the workaround. You can change the code as you need.</p>\n", "OwnerUserId": "9773937", "LastActivityDate": "2021-06-03T01:07:42.547", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "120190375", "PostId": "67814197", "Score": "0", "Text": "Ufortunately this won't work, as subscriptions are also created based on the input file. So it would create a sub called \"{name}-sub\" for instance. So i don't really have the posibility to define the providers the way you described.", "CreationDate": "2021-06-16T10:23:39.307", "UserId": "16104554", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "So it would create a sub called \"{name}-sub\" for instance. ", "keywords": ["instance"]}]}, {"Id": "120212439", "PostId": "67814197", "Score": "1", "Text": "@jonashoye It seems you only can use the local-exec to execute the Azure CLI command to create the resources in the new subscription. First, use the command `az account set --subscription subscription_id` to set the current subscription and then create the resources.", "CreationDate": "2021-06-17T06:08:09.127", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "247780961", "PostHistoryTypeId": "2", "PostId": "67814197", "RevisionGUID": "53a77267-04b5-475a-8891-713d5cf342b8", "CreationDate": "2021-06-03T01:07:42.547", "UserId": "9773937", "Text": "To deploy resources in multiple subscriptions, you can use multiple providers, [here][1] you can get more details and the example code below:\r\n\r\n    provider \"azurerm\" {\r\n        subscription_id = \"xxxxxx\"\r\n        tenant_id = \"xxxxxx\"\r\n        client_id = \"xxxxxx\"\r\n        client_secret = \"xxxxxx\"\r\n    }\r\n    \r\n    provider \"azurerm\" {\r\n        alias = sub2\r\n        subscription_id = \"xxxxxx\"\r\n        tenant_id = \"xxxxxx\"\r\n        client_id = \"xxxxxx\"\r\n        client_secret = \"xxxxxx\"\r\n    }\r\n    \r\n    resource \"azurerm_resource_group\" \"example1\" {\r\n        provider = azurerm\r\n        ...\r\n    }\r\n    \r\n    resource \"azurerm_resource_group\" \"example1\" {\r\n        provider = azurerm.sub2\r\n        ...\r\n    }\r\n\r\nAnd if you use the for_each in terraform, you can add the alias option in the input:\r\n\r\n    inputs = {\r\n    \r\n        departments = [\r\n          {\r\n            name = \"test\",\r\n            provider = \"azurerm\"\r\n            region = \"West Europe\"\r\n            email = \"something@something.com\"\r\n    \r\n          },\r\n          {\r\n            name = \"test2\"\r\n            provider = \"azurerm.sub2\"\r\n            region = \"West Europe\"\r\n            email = \"someone@something.com\"\r\n          }\r\n        ]\r\n    }\r\n\r\nThis is just an example, but it's the workaround. You can change the code as you need.\r\n\r\n  [1]: https://www.terraform.io/docs/language/providers/configuration.html#alias-multiple-provider-configurations", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To deploy resources in multiple subscriptions, you can use multiple providers, [here][1] you can get more details and the example code below: provider \"azurerm\" { subscription_id = \"xxxxxx\" tenant_id = \"xxxxxx\" client_id = \"xxxxxx\" client_secret = \"xxxxxx\" } provider \"azurerm\" { alias = sub2 subscription_id = \"xxxxxx\" tenant_id = \"xxxxxx\" client_id = \"xxxxxx\" client_secret = \"xxxxxx\" } resource \"azurerm_resource_group\" \"example1\" { provider = azurerm ... } resource \"azurerm_resource_group\" \"example1\" { provider = azurerm.sub2 ... } And if you use the for_each in terraform, you can add the alias option in the input: inputs = { departments = [ { name = \"test\", provider = \"azurerm\" region = \"West Europe\" email = \"something@something.com\" }, { name = \"test2\" provider = \"azurerm.sub2\" region = \"West Europe\" email = \"someone@something.com\" } ] } This is just an example, but it's the workaround. ", "keywords": ["provider", "test"]}, {"source": "Text", "text": "You can change the code as you need. [1]: https://www", "keywords": ["change"]}, {"source": "Text", "text": ".terraform.io/docs/language/providers/configuration.html#alias-multiple-provider-configurations", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can change the code as you need.", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": []}