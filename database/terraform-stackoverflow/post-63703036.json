{"Id": "63703036", "PostTypeId": "1", "CreationDate": "2020-09-02T09:53:15.023", "Score": "-1", "ViewCount": "57", "Body": "<p>How to fix a code to solve this issue? I had two instances wordpress and wordpress2. I want to run ELB dns name and I should be able to run dns name of ELB to open for example view of my wordpress instance or wordpress2 instance in browser. Now ELB has registered two service instances from ASG. How to fix it? The problem is that service instances are behind elb not wordpres and wordpress2 instances. The rest of code works fine.</p>\n<pre><code>resource &quot;aws_vpc&quot; &quot;myvpc&quot;{\n cidr_block = &quot;192.168.0.0/16&quot;\n instance_tenancy = &quot;default&quot;\n enable_dns_hostnames = true\n tags = {\n Name = &quot;newvpc&quot;\n }\n}\n\nresource &quot;aws_subnet&quot; &quot;firstsubnet&quot;{\n  vpc_id = aws_vpc.myvpc.id\n  cidr_block = &quot;192.168.1.0/24&quot;\n  availability_zone = &quot;${var.availability_zone1}&quot;\n  map_public_ip_on_launch = true\n  tags = {\n    Name = &quot;public_subnet&quot;\n  }\n}\n\n\nresource &quot;aws_subnet&quot; &quot;secondsubnet&quot;{\n vpc_id = aws_vpc.myvpc.id\n cidr_block = &quot;192.168.2.0/24&quot;\n availability_zone = &quot;${var.availability_zone2}&quot;\n tags = {\n Name = &quot;private_subnet&quot;\n }\n}\n\n\nresource &quot;aws_internet_gateway&quot; &quot;my_igv&quot; {\n  vpc_id = aws_vpc.myvpc.id\n  tags = {\n    Name = &quot;my_igv&quot;\n  }\n}\n\nresource &quot;aws_route_table&quot; &quot;my_route&quot; {\n  vpc_id = aws_vpc.myvpc.id\n  route {\n    cidr_block = &quot;0.0.0.0/0&quot;\n    gateway_id = aws_internet_gateway.my_igv.id\n  }\n  tags = {\n    Name = &quot;my_route&quot;\n  }\n}\n\nresource &quot;aws_route_table_association&quot; &quot;subnet_assosiate&quot; {\n  subnet_id      = aws_subnet.firstsubnet.id\n  route_table_id = aws_route_table.my_route.id\n}\n\nresource &quot;aws_security_group&quot; &quot;mysc1&quot; {\n  name        = &quot;mysc1-http&quot;\n  description = &quot;Allow inbound traffic&quot;\n  vpc_id      = aws_vpc.myvpc.id\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  tags = {\n    Name = &quot;allow_http&quot;\n  }\n}\n\nresource &quot;aws_instance&quot; &quot;wp&quot; {\n ami = &quot;ami-07d9160fa81ccffb5&quot;\n instance_type = &quot;t2.micro&quot;\n vpc_security_group_ids = [&quot;${aws_security_group.mysc1.id}&quot;]\n subnet_id = aws_subnet.firstsubnet.id\n key_name = &quot;MyKey&quot;\n user_data = &quot;${file(&quot;wordpress.sh&quot;)}&quot;\n tags = {\n Name = &quot;wordpress&quot;\n }\n connection {\n type = &quot;ssh&quot;\n user = &quot;ec2-user&quot;\n private_key = file(&quot;./MyKey.pem&quot;)\n host = aws_instance.wp.public_ip\n }\n\n}\n\n\nresource &quot;aws_instance&quot; &quot;wp2&quot; {\n ami = &quot;ami-07d9160fa81ccffb5&quot;\n instance_type = &quot;t2.micro&quot;\n vpc_security_group_ids = [&quot;${aws_security_group.mysc1.id}&quot;]\n subnet_id = aws_subnet.firstsubnet.id\n key_name = &quot;MyKey&quot;\n user_data = &quot;${file(&quot;wordpress.sh&quot;)}&quot;\n tags = {\n Name = &quot;wordpress2&quot;\n }\n connection {\n type = &quot;ssh&quot;\n user = &quot;ec2-user&quot;\n private_key = file(&quot;./MyKey.pem&quot;)\n host = aws_instance.wp.public_ip\n }\n}\n\nresource &quot;aws_security_group&quot; &quot;mysc2&quot; {\n name = &quot;mysc2-db&quot;\n description = &quot;Allow inbound traffic&quot;\n vpc_id = aws_vpc.myvpc.id\n ingress {\n from_port = 3306\n to_port = 3306\n protocol = &quot;tcp&quot;\n cidr_blocks = [&quot;0.0.0.0/0&quot;]\n }\n ingress {\n from_port = 22\n to_port = 22\n protocol = &quot;tcp&quot;\n cidr_blocks = [&quot;0.0.0.0/0&quot;]\n }\n egress {\n from_port = 0\n to_port = 0\n protocol = &quot;-1&quot;\n cidr_blocks = [&quot;0.0.0.0/0&quot;]\n }\n tags = {\n Name = &quot;allow_db&quot;\n }\n}\n\nresource &quot;aws_instance&quot; &quot;db&quot; {\n  ami = &quot;ami-07d9160fa81ccffb5&quot;\n  instance_type = &quot;t2.micro&quot;\n  vpc_security_group_ids = [&quot;${aws_security_group.mysc2.id}&quot;]\n  subnet_id = aws_subnet.secondsubnet.id\n  key_name = &quot;MyKey&quot;\n  tags = {\n    Name = &quot;mysql&quot;\n  }\n}\noutput &quot;instance_ip_addr&quot; {\n  value = aws_instance.db.private_ip\n}\n\n\nmodule &quot;asg&quot; {\n\n  load_balancers  = [module.elb_http.this_elb_id]\n  \n  source  = &quot;terraform-aws-modules/autoscaling/aws&quot;\n  version = &quot;~&gt; 3.0&quot;\n  \n  name = &quot;service&quot;\n\n  # Launch configuration\n  lc_name = &quot;example-lc&quot;\n\n  image_id        = &quot;ami-ebd02392&quot;\n  instance_type   = &quot;t2.micro&quot;\n  security_groups = [&quot;${aws_security_group.mysc1.id}&quot;]\n\n  ebs_block_device = [\n    {\n      device_name           = &quot;/dev/xvdz&quot;\n      volume_type           = &quot;gp2&quot;\n      volume_size           = &quot;50&quot;\n      delete_on_termination = true\n    },\n  ]\n\n  root_block_device = [\n    {\n      volume_size = &quot;50&quot;\n      volume_type = &quot;gp2&quot;\n    },\n  ]\n\n  # Auto scaling group\n  asg_name                  = &quot;example-asg&quot;\n  vpc_zone_identifier       = [&quot;${aws_subnet.firstsubnet.id}&quot;, &quot;${aws_subnet.secondsubnet.id}&quot;]\n  health_check_type         = &quot;EC2&quot;\n  min_size                  = 0\n  max_size                  = 2\n  desired_capacity          = 2\n  wait_for_capacity_timeout = 0\n\n  tags = [\n    {\n      key                 = &quot;Environment&quot;\n      value               = &quot;dev&quot;\n      propagate_at_launch = true\n    },\n    {\n      key                 = &quot;Project&quot;\n      value               = &quot;megasecret&quot;\n      propagate_at_launch = true\n    },\n  ]\n\n  tags_as_map = {\n    extra_tag1 = &quot;extra_value1&quot;\n    extra_tag2 = &quot;extra_value2&quot;\n  }\n}\n\n\n\nmodule &quot;elb_http&quot; {\n  source  = &quot;terraform-aws-modules/elb/aws&quot;\n  version = &quot;~&gt; 2.0&quot;\n\n  name = &quot;elb-example&quot;\n\n  subnets         = [&quot;${aws_subnet.firstsubnet.id}&quot;, &quot;${aws_subnet.secondsubnet.id}&quot;]\n  security_groups = [&quot;${aws_security_group.mysc1.id}&quot;]\n  internal        = false\n\n  listener = [\n    {\n      instance_port     = &quot;80&quot;\n      instance_protocol = &quot;HTTP&quot;\n      lb_port           = &quot;80&quot;\n      lb_protocol       = &quot;HTTP&quot;\n    },\n    {\n      instance_port     = &quot;8080&quot;\n      instance_protocol = &quot;http&quot;\n      lb_port           = &quot;8080&quot;\n      lb_protocol       = &quot;http&quot;\n      #ssl_certificate_id = &quot;arn:aws:acm:eu-west-1:235367859451:certificate/6c270328-2cd5-4b2d-8dfd-ae8d0004ad31&quot;\n    },\n  ]\n\n  health_check = {\n    target              = &quot;HTTP:80/&quot;\n    interval            = 30\n    healthy_threshold   = 2\n    unhealthy_threshold = 2\n    timeout             = 5\n  }\n\n # access_logs = {\n #   bucket = &quot;my-access-logs-bucket-999&quot;\n # }\n\n # // ELB attachments\n # number_of_instances = 2\n # instances           = [&quot;i-06ff41a77dfb5349d&quot;, &quot;i-4906ff41a77dfb53d&quot;]\n \n # tags = {\n ##   Environment = &quot;dev&quot;\n # }\n}\n\nresource &quot;aws_efs_file_system&quot; &quot;efs-example&quot; {\n   creation_token = &quot;efs-example&quot;\n   performance_mode = &quot;generalPurpose&quot;\n   throughput_mode = &quot;bursting&quot;\n   encrypted = &quot;true&quot;\n tags = {\n     Name = &quot;EfsExample&quot;\n   }\n }\n</code></pre>\n", "OwnerUserId": "13547335", "LastEditorUserId": "13547335", "LastEditDate": "2020-09-02T10:23:08.363", "LastActivityDate": "2020-09-06T22:10:07.663", "Title": "Ho to set up wordpress and wordpress2 instance for asg behind elb?", "Tags": "<amazon-web-services><terraform>", "AnswerCount": "2", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "112648030", "PostId": "63703036", "Score": "1", "Text": "Could you please clarify what is giving you a problem? You told us what you'd like to do, but you didn't say what is happening.", "CreationDate": "2020-09-02T10:02:25.150", "UserId": "174777", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112648567", "PostId": "63703036", "Score": "0", "Text": "I have updated my question and I have added where is the problem.", "CreationDate": "2020-09-02T10:23:37.463", "UserId": "13547335", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112667368", "PostId": "63703036", "Score": "0", "Text": "Why are you defining an Auto Scaling group? What are those instances used for?", "CreationDate": "2020-09-02T21:49:04.430", "UserId": "174777", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112760664", "PostId": "63703036", "Score": "0", "Text": "I am defining Auto Scaling Group to copy instances.I wanted to receive something where my one main instance wordpress will be down one from my Auto Scalling Group instance will take over.", "CreationDate": "2020-09-06T17:08:33.697", "UserId": "13547335", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I wanted to receive something where my one main instance wordpress will be down one from my Auto Scalling Group instance will take over.", "keywords": ["instance"]}]}], "history": [{"Id": "230004667", "PostHistoryTypeId": "2", "PostId": "63703036", "RevisionGUID": "f5160f21-b012-45dd-a3bf-30f343c4a3f2", "CreationDate": "2020-09-02T09:53:15.023", "UserId": "13547335", "Text": "How to fix a code to solve this issue? I had two instances wordpress and wordpress2. I want to run ELB dns name and I should be able to run dns name of ELB to open for example view of my wordpress instance or wordpress2 instance in browser. Now ELB has registered two service instances from ASG. How to fix it? The rest of code works fine.\r\n\r\n\r\n    resource \"aws_vpc\" \"myvpc\"{\r\n     cidr_block = \"192.168.0.0/16\"\r\n     instance_tenancy = \"default\"\r\n     enable_dns_hostnames = true\r\n     tags = {\r\n     Name = \"newvpc\"\r\n     }\r\n    }\r\n    \r\n    resource \"aws_subnet\" \"firstsubnet\"{\r\n      vpc_id = aws_vpc.myvpc.id\r\n      cidr_block = \"192.168.1.0/24\"\r\n      availability_zone = \"${var.availability_zone1}\"\r\n      map_public_ip_on_launch = true\r\n      tags = {\r\n        Name = \"public_subnet\"\r\n      }\r\n    }\r\n    \r\n    \r\n    resource \"aws_subnet\" \"secondsubnet\"{\r\n     vpc_id = aws_vpc.myvpc.id\r\n     cidr_block = \"192.168.2.0/24\"\r\n     availability_zone = \"${var.availability_zone2}\"\r\n     tags = {\r\n     Name = \"private_subnet\"\r\n     }\r\n    }\r\n    \r\n    \r\n    resource \"aws_internet_gateway\" \"my_igv\" {\r\n      vpc_id = aws_vpc.myvpc.id\r\n      tags = {\r\n        Name = \"my_igv\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_route_table\" \"my_route\" {\r\n      vpc_id = aws_vpc.myvpc.id\r\n      route {\r\n        cidr_block = \"0.0.0.0/0\"\r\n        gateway_id = aws_internet_gateway.my_igv.id\r\n      }\r\n      tags = {\r\n        Name = \"my_route\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_route_table_association\" \"subnet_assosiate\" {\r\n      subnet_id      = aws_subnet.firstsubnet.id\r\n      route_table_id = aws_route_table.my_route.id\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"mysc1\" {\r\n      name        = \"mysc1-http\"\r\n      description = \"Allow inbound traffic\"\r\n      vpc_id      = aws_vpc.myvpc.id\r\n      ingress {\r\n        from_port   = 80\r\n        to_port     = 80\r\n        protocol    = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n      }\r\n      ingress {\r\n        from_port   = 22\r\n        to_port     = 22\r\n        protocol    = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n      }\r\n      egress {\r\n        from_port   = 0\r\n        to_port     = 0\r\n        protocol    = \"-1\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n      }\r\n      tags = {\r\n        Name = \"allow_http\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_instance\" \"wp\" {\r\n     ami = \"ami-07d9160fa81ccffb5\"\r\n     instance_type = \"t2.micro\"\r\n     vpc_security_group_ids = [\"${aws_security_group.mysc1.id}\"]\r\n     subnet_id = aws_subnet.firstsubnet.id\r\n     key_name = \"MyKey\"\r\n     user_data = \"${file(\"wordpress.sh\")}\"\r\n     tags = {\r\n     Name = \"wordpress\"\r\n     }\r\n     connection {\r\n     type = \"ssh\"\r\n     user = \"ec2-user\"\r\n     private_key = file(\"./MyKey.pem\")\r\n     host = aws_instance.wp.public_ip\r\n     }\r\n    \r\n    }\r\n    \r\n    \r\n    resource \"aws_instance\" \"wp2\" {\r\n     ami = \"ami-07d9160fa81ccffb5\"\r\n     instance_type = \"t2.micro\"\r\n     vpc_security_group_ids = [\"${aws_security_group.mysc1.id}\"]\r\n     subnet_id = aws_subnet.firstsubnet.id\r\n     key_name = \"MyKey\"\r\n     user_data = \"${file(\"wordpress.sh\")}\"\r\n     tags = {\r\n     Name = \"wordpress2\"\r\n     }\r\n     connection {\r\n     type = \"ssh\"\r\n     user = \"ec2-user\"\r\n     private_key = file(\"./MyKey.pem\")\r\n     host = aws_instance.wp.public_ip\r\n     }\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"mysc2\" {\r\n     name = \"mysc2-db\"\r\n     description = \"Allow inbound traffic\"\r\n     vpc_id = aws_vpc.myvpc.id\r\n     ingress {\r\n     from_port = 3306\r\n     to_port = 3306\r\n     protocol = \"tcp\"\r\n     cidr_blocks = [\"0.0.0.0/0\"]\r\n     }\r\n     ingress {\r\n     from_port = 22\r\n     to_port = 22\r\n     protocol = \"tcp\"\r\n     cidr_blocks = [\"0.0.0.0/0\"]\r\n     }\r\n     egress {\r\n     from_port = 0\r\n     to_port = 0\r\n     protocol = \"-1\"\r\n     cidr_blocks = [\"0.0.0.0/0\"]\r\n     }\r\n     tags = {\r\n     Name = \"allow_db\"\r\n     }\r\n    }\r\n    \r\n    resource \"aws_instance\" \"db\" {\r\n      ami = \"ami-07d9160fa81ccffb5\"\r\n      instance_type = \"t2.micro\"\r\n      vpc_security_group_ids = [\"${aws_security_group.mysc2.id}\"]\r\n      subnet_id = aws_subnet.secondsubnet.id\r\n      key_name = \"MyKey\"\r\n      tags = {\r\n        Name = \"mysql\"\r\n      }\r\n    }\r\n    output \"instance_ip_addr\" {\r\n      value = aws_instance.db.private_ip\r\n    }\r\n    \r\n    \r\n    module \"asg\" {\r\n    \r\n      load_balancers  = [module.elb_http.this_elb_id]\r\n      \r\n      source  = \"terraform-aws-modules/autoscaling/aws\"\r\n      version = \"~> 3.0\"\r\n      \r\n      name = \"service\"\r\n    \r\n      # Launch configuration\r\n      lc_name = \"example-lc\"\r\n    \r\n      image_id        = \"ami-ebd02392\"\r\n      instance_type   = \"t2.micro\"\r\n      security_groups = [\"${aws_security_group.mysc1.id}\"]\r\n    \r\n      ebs_block_device = [\r\n        {\r\n          device_name           = \"/dev/xvdz\"\r\n          volume_type           = \"gp2\"\r\n          volume_size           = \"50\"\r\n          delete_on_termination = true\r\n        },\r\n      ]\r\n    \r\n      root_block_device = [\r\n        {\r\n          volume_size = \"50\"\r\n          volume_type = \"gp2\"\r\n        },\r\n      ]\r\n    \r\n      # Auto scaling group\r\n      asg_name                  = \"example-asg\"\r\n      vpc_zone_identifier       = [\"${aws_subnet.firstsubnet.id}\", \"${aws_subnet.secondsubnet.id}\"]\r\n      health_check_type         = \"EC2\"\r\n      min_size                  = 0\r\n      max_size                  = 2\r\n      desired_capacity          = 2\r\n      wait_for_capacity_timeout = 0\r\n    \r\n      tags = [\r\n        {\r\n          key                 = \"Environment\"\r\n          value               = \"dev\"\r\n          propagate_at_launch = true\r\n        },\r\n        {\r\n          key                 = \"Project\"\r\n          value               = \"megasecret\"\r\n          propagate_at_launch = true\r\n        },\r\n      ]\r\n    \r\n      tags_as_map = {\r\n        extra_tag1 = \"extra_value1\"\r\n        extra_tag2 = \"extra_value2\"\r\n      }\r\n    }\r\n    \r\n    \r\n    \r\n    module \"elb_http\" {\r\n      source  = \"terraform-aws-modules/elb/aws\"\r\n      version = \"~> 2.0\"\r\n    \r\n      name = \"elb-example\"\r\n    \r\n      subnets         = [\"${aws_subnet.firstsubnet.id}\", \"${aws_subnet.secondsubnet.id}\"]\r\n      security_groups = [\"${aws_security_group.mysc1.id}\"]\r\n      internal        = false\r\n    \r\n      listener = [\r\n        {\r\n          instance_port     = \"80\"\r\n          instance_protocol = \"HTTP\"\r\n          lb_port           = \"80\"\r\n          lb_protocol       = \"HTTP\"\r\n        },\r\n        {\r\n          instance_port     = \"8080\"\r\n          instance_protocol = \"http\"\r\n          lb_port           = \"8080\"\r\n          lb_protocol       = \"http\"\r\n          #ssl_certificate_id = \"arn:aws:acm:eu-west-1:235367859451:certificate/6c270328-2cd5-4b2d-8dfd-ae8d0004ad31\"\r\n        },\r\n      ]\r\n    \r\n      health_check = {\r\n        target              = \"HTTP:80/\"\r\n        interval            = 30\r\n        healthy_threshold   = 2\r\n        unhealthy_threshold = 2\r\n        timeout             = 5\r\n      }\r\n    \r\n     # access_logs = {\r\n     #   bucket = \"my-access-logs-bucket-999\"\r\n     # }\r\n    \r\n     # // ELB attachments\r\n     # number_of_instances = 2\r\n     # instances           = [\"i-06ff41a77dfb5349d\", \"i-4906ff41a77dfb53d\"]\r\n     \r\n     # tags = {\r\n     ##   Environment = \"dev\"\r\n     # }\r\n    }\r\n    \r\n    resource \"aws_efs_file_system\" \"efs-example\" {\r\n       creation_token = \"efs-example\"\r\n       performance_mode = \"generalPurpose\"\r\n       throughput_mode = \"bursting\"\r\n       encrypted = \"true\"\r\n     tags = {\r\n         Name = \"EfsExample\"\r\n       }\r\n     }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I want to run ELB dns name and I should be able to run dns name of ELB to open for example view of my wordpress instance or wordpress2 instance in browser. ", "keywords": ["instance"]}]}, {"Id": "230004668", "PostHistoryTypeId": "1", "PostId": "63703036", "RevisionGUID": "f5160f21-b012-45dd-a3bf-30f343c4a3f2", "CreationDate": "2020-09-02T09:53:15.023", "UserId": "13547335", "Text": "Ho to set up wordpress and wordpress2 instance for asg behind elb?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Ho to set up wordpress and wordpress2 instance for asg behind elb?", "keywords": ["instance"]}]}, {"Id": "230004669", "PostHistoryTypeId": "3", "PostId": "63703036", "RevisionGUID": "f5160f21-b012-45dd-a3bf-30f343c4a3f2", "CreationDate": "2020-09-02T09:53:15.023", "UserId": "13547335", "Text": "<amazon-web-services><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "230006781", "PostHistoryTypeId": "5", "PostId": "63703036", "RevisionGUID": "9951d1c0-9bb3-44ab-b331-e49fd84107d5", "CreationDate": "2020-09-02T10:23:08.363", "UserId": "13547335", "Comment": "added 92 characters in body", "Text": "How to fix a code to solve this issue? I had two instances wordpress and wordpress2. I want to run ELB dns name and I should be able to run dns name of ELB to open for example view of my wordpress instance or wordpress2 instance in browser. Now ELB has registered two service instances from ASG. How to fix it? The problem is that service instances are behind elb not wordpres and wordpress2 instances. The rest of code works fine.\r\n\r\n\r\n    resource \"aws_vpc\" \"myvpc\"{\r\n     cidr_block = \"192.168.0.0/16\"\r\n     instance_tenancy = \"default\"\r\n     enable_dns_hostnames = true\r\n     tags = {\r\n     Name = \"newvpc\"\r\n     }\r\n    }\r\n    \r\n    resource \"aws_subnet\" \"firstsubnet\"{\r\n      vpc_id = aws_vpc.myvpc.id\r\n      cidr_block = \"192.168.1.0/24\"\r\n      availability_zone = \"${var.availability_zone1}\"\r\n      map_public_ip_on_launch = true\r\n      tags = {\r\n        Name = \"public_subnet\"\r\n      }\r\n    }\r\n    \r\n    \r\n    resource \"aws_subnet\" \"secondsubnet\"{\r\n     vpc_id = aws_vpc.myvpc.id\r\n     cidr_block = \"192.168.2.0/24\"\r\n     availability_zone = \"${var.availability_zone2}\"\r\n     tags = {\r\n     Name = \"private_subnet\"\r\n     }\r\n    }\r\n    \r\n    \r\n    resource \"aws_internet_gateway\" \"my_igv\" {\r\n      vpc_id = aws_vpc.myvpc.id\r\n      tags = {\r\n        Name = \"my_igv\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_route_table\" \"my_route\" {\r\n      vpc_id = aws_vpc.myvpc.id\r\n      route {\r\n        cidr_block = \"0.0.0.0/0\"\r\n        gateway_id = aws_internet_gateway.my_igv.id\r\n      }\r\n      tags = {\r\n        Name = \"my_route\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_route_table_association\" \"subnet_assosiate\" {\r\n      subnet_id      = aws_subnet.firstsubnet.id\r\n      route_table_id = aws_route_table.my_route.id\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"mysc1\" {\r\n      name        = \"mysc1-http\"\r\n      description = \"Allow inbound traffic\"\r\n      vpc_id      = aws_vpc.myvpc.id\r\n      ingress {\r\n        from_port   = 80\r\n        to_port     = 80\r\n        protocol    = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n      }\r\n      ingress {\r\n        from_port   = 22\r\n        to_port     = 22\r\n        protocol    = \"tcp\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n      }\r\n      egress {\r\n        from_port   = 0\r\n        to_port     = 0\r\n        protocol    = \"-1\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n      }\r\n      tags = {\r\n        Name = \"allow_http\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_instance\" \"wp\" {\r\n     ami = \"ami-07d9160fa81ccffb5\"\r\n     instance_type = \"t2.micro\"\r\n     vpc_security_group_ids = [\"${aws_security_group.mysc1.id}\"]\r\n     subnet_id = aws_subnet.firstsubnet.id\r\n     key_name = \"MyKey\"\r\n     user_data = \"${file(\"wordpress.sh\")}\"\r\n     tags = {\r\n     Name = \"wordpress\"\r\n     }\r\n     connection {\r\n     type = \"ssh\"\r\n     user = \"ec2-user\"\r\n     private_key = file(\"./MyKey.pem\")\r\n     host = aws_instance.wp.public_ip\r\n     }\r\n    \r\n    }\r\n    \r\n    \r\n    resource \"aws_instance\" \"wp2\" {\r\n     ami = \"ami-07d9160fa81ccffb5\"\r\n     instance_type = \"t2.micro\"\r\n     vpc_security_group_ids = [\"${aws_security_group.mysc1.id}\"]\r\n     subnet_id = aws_subnet.firstsubnet.id\r\n     key_name = \"MyKey\"\r\n     user_data = \"${file(\"wordpress.sh\")}\"\r\n     tags = {\r\n     Name = \"wordpress2\"\r\n     }\r\n     connection {\r\n     type = \"ssh\"\r\n     user = \"ec2-user\"\r\n     private_key = file(\"./MyKey.pem\")\r\n     host = aws_instance.wp.public_ip\r\n     }\r\n    }\r\n    \r\n    resource \"aws_security_group\" \"mysc2\" {\r\n     name = \"mysc2-db\"\r\n     description = \"Allow inbound traffic\"\r\n     vpc_id = aws_vpc.myvpc.id\r\n     ingress {\r\n     from_port = 3306\r\n     to_port = 3306\r\n     protocol = \"tcp\"\r\n     cidr_blocks = [\"0.0.0.0/0\"]\r\n     }\r\n     ingress {\r\n     from_port = 22\r\n     to_port = 22\r\n     protocol = \"tcp\"\r\n     cidr_blocks = [\"0.0.0.0/0\"]\r\n     }\r\n     egress {\r\n     from_port = 0\r\n     to_port = 0\r\n     protocol = \"-1\"\r\n     cidr_blocks = [\"0.0.0.0/0\"]\r\n     }\r\n     tags = {\r\n     Name = \"allow_db\"\r\n     }\r\n    }\r\n    \r\n    resource \"aws_instance\" \"db\" {\r\n      ami = \"ami-07d9160fa81ccffb5\"\r\n      instance_type = \"t2.micro\"\r\n      vpc_security_group_ids = [\"${aws_security_group.mysc2.id}\"]\r\n      subnet_id = aws_subnet.secondsubnet.id\r\n      key_name = \"MyKey\"\r\n      tags = {\r\n        Name = \"mysql\"\r\n      }\r\n    }\r\n    output \"instance_ip_addr\" {\r\n      value = aws_instance.db.private_ip\r\n    }\r\n    \r\n    \r\n    module \"asg\" {\r\n    \r\n      load_balancers  = [module.elb_http.this_elb_id]\r\n      \r\n      source  = \"terraform-aws-modules/autoscaling/aws\"\r\n      version = \"~> 3.0\"\r\n      \r\n      name = \"service\"\r\n    \r\n      # Launch configuration\r\n      lc_name = \"example-lc\"\r\n    \r\n      image_id        = \"ami-ebd02392\"\r\n      instance_type   = \"t2.micro\"\r\n      security_groups = [\"${aws_security_group.mysc1.id}\"]\r\n    \r\n      ebs_block_device = [\r\n        {\r\n          device_name           = \"/dev/xvdz\"\r\n          volume_type           = \"gp2\"\r\n          volume_size           = \"50\"\r\n          delete_on_termination = true\r\n        },\r\n      ]\r\n    \r\n      root_block_device = [\r\n        {\r\n          volume_size = \"50\"\r\n          volume_type = \"gp2\"\r\n        },\r\n      ]\r\n    \r\n      # Auto scaling group\r\n      asg_name                  = \"example-asg\"\r\n      vpc_zone_identifier       = [\"${aws_subnet.firstsubnet.id}\", \"${aws_subnet.secondsubnet.id}\"]\r\n      health_check_type         = \"EC2\"\r\n      min_size                  = 0\r\n      max_size                  = 2\r\n      desired_capacity          = 2\r\n      wait_for_capacity_timeout = 0\r\n    \r\n      tags = [\r\n        {\r\n          key                 = \"Environment\"\r\n          value               = \"dev\"\r\n          propagate_at_launch = true\r\n        },\r\n        {\r\n          key                 = \"Project\"\r\n          value               = \"megasecret\"\r\n          propagate_at_launch = true\r\n        },\r\n      ]\r\n    \r\n      tags_as_map = {\r\n        extra_tag1 = \"extra_value1\"\r\n        extra_tag2 = \"extra_value2\"\r\n      }\r\n    }\r\n    \r\n    \r\n    \r\n    module \"elb_http\" {\r\n      source  = \"terraform-aws-modules/elb/aws\"\r\n      version = \"~> 2.0\"\r\n    \r\n      name = \"elb-example\"\r\n    \r\n      subnets         = [\"${aws_subnet.firstsubnet.id}\", \"${aws_subnet.secondsubnet.id}\"]\r\n      security_groups = [\"${aws_security_group.mysc1.id}\"]\r\n      internal        = false\r\n    \r\n      listener = [\r\n        {\r\n          instance_port     = \"80\"\r\n          instance_protocol = \"HTTP\"\r\n          lb_port           = \"80\"\r\n          lb_protocol       = \"HTTP\"\r\n        },\r\n        {\r\n          instance_port     = \"8080\"\r\n          instance_protocol = \"http\"\r\n          lb_port           = \"8080\"\r\n          lb_protocol       = \"http\"\r\n          #ssl_certificate_id = \"arn:aws:acm:eu-west-1:235367859451:certificate/6c270328-2cd5-4b2d-8dfd-ae8d0004ad31\"\r\n        },\r\n      ]\r\n    \r\n      health_check = {\r\n        target              = \"HTTP:80/\"\r\n        interval            = 30\r\n        healthy_threshold   = 2\r\n        unhealthy_threshold = 2\r\n        timeout             = 5\r\n      }\r\n    \r\n     # access_logs = {\r\n     #   bucket = \"my-access-logs-bucket-999\"\r\n     # }\r\n    \r\n     # // ELB attachments\r\n     # number_of_instances = 2\r\n     # instances           = [\"i-06ff41a77dfb5349d\", \"i-4906ff41a77dfb53d\"]\r\n     \r\n     # tags = {\r\n     ##   Environment = \"dev\"\r\n     # }\r\n    }\r\n    \r\n    resource \"aws_efs_file_system\" \"efs-example\" {\r\n       creation_token = \"efs-example\"\r\n       performance_mode = \"generalPurpose\"\r\n       throughput_mode = \"bursting\"\r\n       encrypted = \"true\"\r\n     tags = {\r\n         Name = \"EfsExample\"\r\n       }\r\n     }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I want to run ELB dns name and I should be able to run dns name of ELB to open for example view of my wordpress instance or wordpress2 instance in browser. ", "keywords": ["instance"]}]}], "answers": [{"Id": "63709648", "PostTypeId": "2", "ParentId": "63703036", "CreationDate": "2020-09-02T16:23:01.400", "Score": "0", "Body": "<p>Allow me to rephrase your question, because it was not entirely clear to me, and might not be clear to others as well.</p>\n<p><strong>Problem:</strong></p>\n<ul>\n<li>You've created two EC2 instances using the <code>aws_instance</code> resource: <code>wp</code> and <code>wp2</code>.</li>\n<li>You've created an Auto Scaling Group with a desired capacity of 2, which launches 2 EC2 instances.</li>\n<li>The instances spawned by the ASG are registered with the load balancer, but the instances created manually, are not.</li>\n</ul>\n<p><strong>Solution:</strong></p>\n<ul>\n<li>If you want to remove the ASG instances from the load balancer, remove the line <code>load_balancers  = [module.elb_http.this_elb_id]</code> in the <code>asg</code> module.</li>\n<li>If you want to add the separate EC2 instances to the ELB, create two <code>aws_elb_attachment</code> resources, one for each EC2 instance, that attaches the instance to the ELB. <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elb_attachment\" rel=\"nofollow noreferrer\">See docs here</a>.</li>\n</ul>\n", "OwnerUserId": "2961424", "LastActivityDate": "2020-09-02T16:23:01.400", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "112761346", "PostId": "63709648", "Score": "0", "Text": "How to connect wp and wp2 instances with aws_elb_attachment?", "CreationDate": "2020-09-06T17:45:39.053", "UserId": "13547335", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112991028", "PostId": "63709648", "Score": "0", "Text": "How to add the separate EC2 instances wp and wp2 to the ELB? I don't want to use instance id because I don't have they are before creating all environment. I have seen documentation but it not helps me.", "CreationDate": "2020-09-15T07:44:14.540", "UserId": "13547335", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I don't want to use instance id because I don't have they are before creating all environment. ", "keywords": ["instance"]}]}], "history": [{"Id": "230031530", "PostHistoryTypeId": "2", "PostId": "63709648", "RevisionGUID": "8613a677-8346-42d3-96f2-d6d0003c232f", "CreationDate": "2020-09-02T16:23:01.400", "UserId": "2961424", "Text": "Allow me to rephrase your question, because it was not entirely clear to me, and might not be clear to others as well.\r\n\r\n**Problem:**\r\n- You've created two EC2 instances using the `aws_instance` resource: `wp` and `wp2`.\r\n- You've created an Auto Scaling Group with a desired capacity of 2, which launches 2 EC2 instances.\r\n- The instances spawned by the ASG are registered with the load balancer, but the instances created manually, are not. \r\n\r\n**Solution:**\r\n - If you want to remove the ASG instances from the load balancer, remove the line `load_balancers  = [module.elb_http.this_elb_id]` in the `asg` module. \r\n - If you want to add the separate EC2 instances to the ELB, create two `aws_elb_attachment` resources, one for each EC2 instance, that attaches the instance to the ELB. [See docs here][1]. \r\n\r\n\r\n  [1]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elb_attachment", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "- If you want to add the separate EC2 instances to the ELB, create two `aws_elb_attachment` resources, one for each EC2 instance, that attaches the instance to the ELB. [See docs here][1]. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "If you want to add the separate EC2 instances to the ELB, create two aws_elb_attachment resources, one for each EC2 instance, that attaches the instance to the ELB. ", "keywords": ["instance"]}]}, {"Id": "63769326", "PostTypeId": "2", "ParentId": "63703036", "CreationDate": "2020-09-06T22:10:07.663", "Score": "0", "Body": "<p>Frankly, the configuration appears to be a mess.</p>\n<p>You should not mix Auto Scaling and non-Auto Scaling. From what I can see, your template is launching two EC2 instances with Amazon Linux 2, and it is ALSO launching an Auto Scaling group with Amazon Linux 1.</p>\n<p>The Auto Scaling group has a minimum of 0, a maximum of 2 and a <strong>desired capacity</strong> of 2, which means it will start with 2 instances. I could not see any Scaling Policies, so it will remain at 2, giving a <strong>total instance count of 4</strong>.</p>\n<p>The Auto Scaling group is configured to launch instances across both the <strong>public and private subnets</strong>, which is quite strange. It is also re-using the same security group as the EC2 instances, whereas it should have its own security group.</p>\n<p>In addition, there is an EC2 instance for &quot;db&quot;, which frankly should go on Amazon RDS rather than an EC2 instance.</p>\n<p>I cannot see any linkage between the Load Balancer and <em>any</em> of the EC2 instances (those launch specifically, and those in the Auto Scaling group). So, there is no &quot;single point of entry&quot; to access your WordPress instances.</p>\n<p><strong>Determine your architecture</strong></p>\n<p>First, I should mention that I'm not a WordPress person, so you'll need to make sure that running WordPress across multiple computers will work as expected. For example, if somebody uploads a media file, will it be available to all instances? I would be concerned that everything might not be stored in the database itself.</p>\n<p>You should start by determining how many instances you require for WordPress. For example, you might just want one instance running at all times, which should be automatically replaced in case of failure. Or, you might have high volumes of traffic and you want multiple instances running at all times.</p>\n<p>If you need a <strong>highly-available</strong> solution, then you should <strong>run instances in different Availability Zones</strong> in case of a major failure (but this also involves additional expense, such as duplicating the database).</p>\n<p>The very simplest setup would be:</p>\n<ul>\n<li><strong>Use Auto Scaling to launch WordPress server in the public subnet</strong>, with <code>Min=1, Max=1</code> so that it will automatically replace it if it fails (mind you, replace it with <em>what?</em>, since my little understanding of WordPress is that a lot of files are stored on the disk, which would be lost if it is re-launched from a previous disk image)</li>\n<li>Database in <strong>Amazon RDS</strong> in a private subnet</li>\n</ul>\n<p>A more resilient solution would be:</p>\n<ul>\n<li>A <strong>Load Balancer</strong> in the public subnets</li>\n<li>An <strong>Auto Scaling group</strong> in the private subnets for the WordPress instances</li>\n<li>An <strong>Amazon RDS Multi-AZ database</strong> running across multiple availability zones</li>\n</ul>\n<p><strong>Suggestion</strong></p>\n<p>So, the way I would approach all this is:</p>\n<ul>\n<li>Do some experimentation to determine how WordPress behaves when run across multiple instances, and when &quot;re-launched&quot; from a base installation or a saved disk image, to ensure that you can successfully run multiple instances and recover from failure</li>\n<li>Determine whether your workload can run on a single instance, or if multiple instances are required</li>\n<li>Determine your appetite for failure, in case of an AZ failure</li>\n<li>Architect to meet those requirements</li>\n</ul>\n", "OwnerUserId": "174777", "LastActivityDate": "2020-09-06T22:10:07.663", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "113021520", "PostId": "63769326", "Score": "0", "Text": "How to add the separate EC2 instances wp and wp2 to the ELB? I don't want to use instance id because I don't have they are before creating all environment. I have seen documentation but it not helps me.", "CreationDate": "2020-09-16T07:27:22.353", "UserId": "13547335", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I don't want to use instance id because I don't have they are before creating all environment. ", "keywords": ["instance"]}]}], "history": [{"Id": "230292030", "PostHistoryTypeId": "2", "PostId": "63769326", "RevisionGUID": "b25a902b-bd79-4fa5-935e-fafcccb60948", "CreationDate": "2020-09-06T22:10:07.663", "UserId": "174777", "Text": "Frankly, the configuration appears to be a mess.\r\n\r\nYou should not mix Auto Scaling and non-Auto Scaling. From what I can see, your template is launching two EC2 instances with Amazon Linux 2, and it is ALSO launching an Auto Scaling group with Amazon Linux 1.\r\n\r\nThe Auto Scaling group has a minimum of 0, a maximum of 2 and a **desired capacity** of 2, which means it will start with 2 instances. I could not see any Scaling Policies, so it will remain at 2, giving a **total instance count of 4**.\r\n\r\nThe Auto Scaling group is configured to launch instances across both the **public and private subnets**, which is quite strange. It is also re-using the same security group as the EC2 instances, whereas it should have its own security group.\r\n\r\nIn addition, there is an EC2 instance for \"db\", which frankly should go on Amazon RDS rather than an EC2 instance.\r\n\r\nI cannot see any linkage between the Load Balancer and _any_ of the EC2 instances (those launch specifically, and those in the Auto Scaling group). So, there is no \"single point of entry\" to access your WordPress instances.\r\n\r\n**Determine your architecture**\r\n\r\nFirst, I should mention that I'm not a WordPress person, so you'll need to make sure that running WordPress across multiple computers will work as expected. For example, if somebody uploads a media file, will it be available to all instances? I would be concerned that everything might not be stored in the database itself.\r\n\r\nYou should start by determining how many instances you require for WordPress. For example, you might just want one instance running at all times, which should be automatically replaced in case of failure. Or, you might have high volumes of traffic and you want multiple instances running at all times.\r\n\r\nIf you need a **highly-available** solution, then you should **run instances in different Availability Zones** in case of a major failure (but this also involves additional expense, such as duplicating the database).\r\n\r\nThe very simplest setup would be:\r\n\r\n- **Use Auto Scaling to launch WordPress server in the public subnet**, with `Min=1, Max=1` so that it will automatically replace it if it fails (mind you, replace it with _what?_, since my little understanding of WordPress is that a lot of files are stored on the disk, which would be lost if it is re-launched from a previous disk image)\r\n- Database in **Amazon RDS** in a private subnet\r\n\r\nA more resilient solution would be:\r\n\r\n- A **Load Balancer** in the public subnets\r\n- An **Auto Scaling group** in the private subnets for the WordPress instances\r\n- An **Amazon RDS Multi-AZ database** running across multiple availability zones\r\n\r\n**Suggestion**\r\n\r\nSo, the way I would approach all this is:\r\n\r\n- Do some experimentation to determine how WordPress behaves when run across multiple instances, and when \"re-launched\" from a base installation or a saved disk image, to ensure that you can successfully run multiple instances and recover from failure\r\n- Determine whether your workload can run on a single instance, or if multiple instances are required\r\n- Determine your appetite for failure, in case of an AZ failure\r\n- Architect to meet those requirements", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I could not see any Scaling Policies, so it will remain at 2, giving a **total instance count of 4**. ", "keywords": ["instance"]}, {"source": "Text", "text": "In addition, there is an EC2 instance for \"db\", which frankly should go on Amazon RDS rather than an EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "For example, you might just want one instance running at all times, which should be automatically replaced in case of failure. ", "keywords": ["instance"]}, {"source": "Text", "text": "If you need a **highly-available** solution, then you should **run instances in different Availability Zones** in case of a major failure (but this also involves additional expense, such as duplicating the database). ", "keywords": ["expense"]}, {"source": "Text", "text": "So, the way I would approach all this is: - Do some experimentation to determine how WordPress behaves when run across multiple instances, and when \"re-launched\" from a base installation or a saved disk image, to ensure that you can successfully run multiple instances and recover from failure - Determine whether your workload can run on a single instance, or if multiple instances are required - Determine your appetite for failure, in case of an AZ failure - Architect to meet those requirements", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "I could not see any Scaling Policies, so it will remain at 2, giving a total instance count of 4. ", "keywords": ["instance"]}, {"source": "Body", "text": "In addition, there is an EC2 instance for \"db\", which frankly should go on Amazon RDS rather than an EC2 instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "For example, you might just want one instance running at all times, which should be automatically replaced in case of failure. ", "keywords": ["instance"]}, {"source": "Body", "text": "If you need a highly-available solution, then you should run instances in different Availability Zones in case of a major failure (but this also involves additional expense, such as duplicating the database). ", "keywords": ["expense"]}, {"source": "Body", "text": "An Amazon RDS Multi-AZ database running across multiple availability zones Suggestion So, the way I would approach all this is: Do some experimentation to determine how WordPress behaves when run across multiple instances, and when \"re-launched\" from a base installation or a saved disk image, to ensure that you can successfully run multiple instances and recover from failure Determine whether your workload can run on a single instance, or if multiple instances are required Determine your appetite for failure, in case of an AZ failure Architect to meet those requirements", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Ho to set up wordpress and wordpress2 instance for asg behind elb?", "keywords": ["instance"]}, {"source": "Body", "text": "I want to run ELB dns name and I should be able to run dns name of ELB to open for example view of my wordpress instance or wordpress2 instance in browser. ", "keywords": ["instance"]}]}