{"Id": "66413967", "PostTypeId": "1", "CreationDate": "2021-02-28T21:24:07.480", "Score": "1", "ViewCount": "648", "Body": "<p>I decided to automate the creation of GC projects using Terraform.\nOne resource that Terraform will create during the run, is a new GSuite user. This is done using the <a href=\"https://github.com/DeviaVir/terraform-provider-gsuite\" rel=\"nofollow noreferrer\">terraform-provider-gsuite</a>. So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line.</p>\n<p>Next, instead of relying on my command line, I decided to have a Cloud Build trigger that would execute Terraform init-plan-apply. As you all know, Cloud builds run under the identity of the GCB Service Account. This means we need to give that SA the permissions that Terraform might need during the execution. So far so good.\nSo I run the build, and I see that the only resource that Terraform is not able to create is the GSuite user. Digging through the logs I found these 2 requests (and their responses):</p>\n<pre><code>GET /admin/directory/v1/users?alt=json&amp;customer=my_customer&amp;prettyPrint=false&amp;query=email%3Alolloso-admin%40codedby.pm HTTP/1.1\nHost: www.googleapis.com\nUser-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\nX-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\nAccept-Encoding: gzip\n\nHTTP/2.0 400 Bad Request\nCache-Control: private\nContent-Type: application/json; charset=UTF-8\nDate: Sun, 28 Feb 2021 12:58:25 GMT\nServer: ESF\nVary: Origin\nVary: X-Origin\nVary: Referer\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nX-Xss-Protection: 0\n\n{\n  &quot;error&quot;: {\n    &quot;code&quot;: 400,\n    &quot;message&quot;: &quot;Invalid Input&quot;,\n    &quot;errors&quot;: [\n      {\n        &quot;domain&quot;: &quot;global&quot;,\n        &quot;reason&quot;: &quot;invalid&quot;\n      }\n    ]\n  }\n}\n</code></pre>\n<pre><code>POST /admin/directory/v1/users?alt=json&amp;prettyPrint=false HTTP/1.1\n Host: www.googleapis.com\n User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\n Content-Length: 276\n Content-Type: application/json\n X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\n Accept-Encoding: gzip\n \n {\n  &quot;changePasswordAtNextLogin&quot;: true,\n  &quot;externalIds&quot;: [],\n  &quot;includeInGlobalAddressList&quot;: true,\n  &quot;name&quot;: {\n   &quot;familyName&quot;: &quot;********&quot;,\n   &quot;givenName&quot;: &quot;*******&quot;\n  },\n  &quot;orgUnitPath&quot;: &quot;/&quot;,\n\n  &quot;password&quot;: &quot;********&quot;,\n  &quot;primaryEmail&quot;: &quot;*********&quot;,\n  &quot;sshPublicKeys&quot;: []\n }\n \n HTTP/2.0 403 Forbidden\n Cache-Control: private\n Content-Type: application/json; charset=UTF-8\n Date: Sun, 28 Feb 2021 12:58:25 GMT\n Server: ESF\n Vary: Origin\n Vary: X-Origin\n Vary: Referer\n Www-Authenticate: Bearer realm=&quot;https://accounts.google.com/&quot;, error=&quot;insufficient_scope&quot;, scope=&quot;https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/directory.user&quot;\n X-Content-Type-Options: nosniff\n X-Frame-Options: SAMEORIGIN\n X-Xss-Protection: 0\n \n {\n   &quot;error&quot;: {\n     &quot;code&quot;: 403,\n     &quot;message&quot;: &quot;Request had insufficient authentication scopes.&quot;,\n     &quot;errors&quot;: [\n       {\n         &quot;message&quot;: &quot;Insufficient Permission&quot;,\n         &quot;domain&quot;: &quot;global&quot;,\n         &quot;reason&quot;: &quot;insufficientPermissions&quot;\n       }\n     ],\n     &quot;status&quot;: &quot;PERMISSION_DENIED&quot;\n   }\n }\n</code></pre>\n<p>I think this is the API complaining that the Cloud Build Service Account does not have enough rights to access the Directory API. And here is where the situation gets wild.</p>\n<p>In order to do so I thought to grant domain-wide delegation to the Cloud Build SA. But that SA is special and I could not find a way to grant it.\nI tried then to give the role <code>serviceAccountUser</code> to the Cloud Build SA on my SA (the one which has domain-wide delegation). But I did not manage to succeed. In fact the build still trows the same error of insufficient permission.\nI then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. Also there, no luck.</p>\n<p>Is it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation?</p>\n<p>Thanks</p>\n<p><strong>UPDATE 1 (using custom build service account)</strong></p>\n<p>As per John comment, I tried to use a user-specified service account to execute my build. The necessary setup info has been taken from the <a href=\"https://cloud.google.com/build/docs/securing-builds/configure-user-specified-service-accounts\" rel=\"nofollow noreferrer\">official guide</a>.\nThis is my <code>cloudbuild.yaml</code> file</p>\n<pre><code>steps:\n- id: 'tf init'\n  name: 'hashicorp/terraform'\n  entrypoint: 'sh'\n  args: \n  - '-c'\n  - |\n      terraform init\n\n- id: 'tf plan'\n  name: 'hashicorp/terraform'\n  entrypoint: 'sh'\n  args: \n  - '-c'\n  - | \n      terraform plan\n\n- id: 'tf apply'\n  name: 'hashicorp/terraform'\n  entrypoint: 'sh'\n  args: \n  - '-c'\n  - | \n      terraform apply -auto-approve\n\nlogsBucket: 'gs://tf-project-creator-cloudbuild-logs'\nserviceAccount: 'projects/tf-project-creator/serviceAccounts/sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com'\noptions:\n  env: \n  - 'TF_LOG=DEBUG'\n</code></pre>\n<p>where <code>sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com</code> is the service account which has domain-wide delegation on my Google Workspace.\nI then executed the build manually</p>\n<pre><code>export GOOGLE_APPLICATION_CREDENTIALS=.secrets/sa-terraform-project-creator.json; gcloud builds submit --config cloudbuild.yaml\n</code></pre>\n<p>specifying the json private key of the same SA of above.\nI would have expected the build to pass but I still get the same error of above</p>\n<pre><code>POST /admin/directory/v1/users?alt=json&amp;prettyPrint=false HTTP/1.1\n Host: www.googleapis.com\n User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\n Content-Length: 276\n Content-Type: application/json\n X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\n Accept-Encoding: gzip\n \n {\n  &quot;changePasswordAtNextLogin&quot;: true,\n  &quot;externalIds&quot;: [],\n  &quot;includeInGlobalAddressList&quot;: true,\n  &quot;name&quot;: {\n   &quot;familyName&quot;: &quot;REDACTED&quot;,\n   &quot;givenName&quot;: &quot;REDACTED&quot;\n  },\n  &quot;orgUnitPath&quot;: &quot;/&quot;,\n  &quot;organizations&quot;: [],\n  &quot;password&quot;: &quot;REDACTED&quot;,\n  &quot;primaryEmail&quot;: &quot;REDACTED&quot;,\n  &quot;sshPublicKeys&quot;: []\n }\n \n -----------------------------------------------------\n 2021/03/06 17:26:19 [DEBUG] Google API Response Details:\n ---[ RESPONSE ]--------------------------------------\n HTTP/2.0 403 Forbidden\n Cache-Control: private\n Content-Type: application/json; charset=UTF-8\n Date: Sat, 06 Mar 2021 17:26:19 GMT\n Server: ESF\n Vary: Origin\n Vary: X-Origin\n Vary: Referer\n Www-Authenticate: Bearer realm=&quot;https://accounts.google.com/&quot;, www.googleapis.com/auth/directory.user&quot;\n X-Content-Type-Options: nosniff\n X-Frame-Options: SAMEORIGIN\n X-Xss-Protection: 0\n \n {\n   &quot;error&quot;: {\n     &quot;code&quot;: 403,\n     &quot;message&quot;: &quot;Request had insufficient authentication scopes.&quot;,\n\n       {\n         &quot;message&quot;: &quot;Insufficient Permission&quot;,\n         &quot;domain&quot;: &quot;global&quot;,\n         &quot;reason&quot;: &quot;insufficientPermissions&quot;\n       }\n     ],\n     &quot;status&quot;: &quot;PERMISSION_DENIED&quot;\n   }\n}\n</code></pre>\n<p>Is there anything I am missing?</p>\n<p><strong>UPDATE 2 (check on active identity when submitting a build)</strong>\nAs deviavir pointed out in their comment, I tried</p>\n<ol>\n<li><p>enabling &quot;Service Accounts&quot; in the GCB settings, but as suspected it did not work.</p>\n</li>\n<li><p>double checking the active identity while submitting the build. One of the limitations of using a custom build SA, is that the build must be manually triggered. So using gcloud, that means</p>\n</li>\n</ol>\n<pre><code>gcloud builds submit --config cloudbuild.yaml\n</code></pre>\n<p>Til now, when executing this command I have always prepended it by setting <code>GOOGLE_APPLICATION_CREDENTIALS</code> var like this</p>\n<pre><code>export GOOGLE_APPLICATION_CREDENTIALS=.secrets/sa-terraform-project-creator.json\n</code></pre>\n<p>The specified private key is the key to my build SA (the one with domain-wide delegation). While doing that, I was always logged in in gcloud with another account (the Owner of the project) which does not have the domain-wide delegation permission). But I thought that by setting GOOGLE_APPLICATION_CREDENTIALS, gcloud would have picked up that credentials. I still think that is the case, but I tried to then submit the build while being logged in gcloud using that same build SA.\nSo I did</p>\n<pre><code>gcloud auth activate-service-account sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com --key-file='.secrets/sa-terraform-project-creator.json' \n</code></pre>\n<p>and right after</p>\n<pre><code>gcloud builds submit --config cloudbuild.yaml\n</code></pre>\n<p>Yet again, I hit the same permission problem when accessing the Directory API.</p>\n<p>As deviavir suspected, I start to think that during the execution of the build, the call to the Directory API is done with the wrong credentials.\nIs there a way to log the identity used while executing certain Terraform plugin API calls? That would help a lot.</p>\n", "OwnerUserId": "6004854", "LastEditorUserId": "6004854", "LastEditDate": "2021-03-08T22:25:40.863", "LastActivityDate": "2021-03-08T22:25:40.863", "Title": "Can Terraform provider for GSuite access the Admin SDK Directory API when executed in Google Cloud Build from the default Cloud Build Service Account?", "Tags": "<google-cloud-platform><google-workspace><google-cloud-build><terraform-provider-gcp>", "AnswerCount": "0", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "117413135", "PostId": "66413967", "Score": "0", "Text": "AFAIK it is not possible to enable G Suite Domain Wide Delegation on the default Cloud Build service account. You can specify a different service account for Cloud Build's use which does have delegation enabled. In the Cloud Build config file add a serviceAccount field specifying the email address of your service account.", "CreationDate": "2021-02-28T22:25:31.720", "UserId": "8016720", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "AFAIK it is not possible to enable G Suite Domain Wide Delegation on the default Cloud Build service account. ", "keywords": ["domain"]}]}, {"Id": "117561459", "PostId": "66413967", "Score": "0", "Text": "Thanks John. Though I tried to use a custom cloud build service account (and failed), I will try again and then update this question.", "CreationDate": "2021-03-05T22:31:45.443", "UserId": "6004854", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "117611392", "PostId": "66413967", "Score": "0", "Text": "Do you have the \"Service Accounts\" GCP Service enabled here? https://console.cloud.google.com/cloud-build/settings/service-account\n\nI also thought the serviceAccount per build was still in beta, it might be worth verifying we actually picked up on the credentials using something like `gcloud auth list`", "CreationDate": "2021-03-08T12:34:35.347", "UserId": "1222881", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "117624206", "PostId": "66413967", "Score": "0", "Text": "The \"Service Accounts\" options under Cloud Build, actually changes the IAM policy for the default GCB Service Account. In fact, after I enabled it, I could see this project IAM policy change in the logs: `bindingDeltas: [\n0: {\naction: \"ADD\"\nrole: \"roles/iam.serviceAccountUser\"\nmember: \"serviceAccount:913800439725@cloudbuild.gserviceaccount.com\"\n}\n]` and even then, the build fails with the same persmissions error", "CreationDate": "2021-03-08T20:42:11.557", "UserId": "6004854", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The \"Service Accounts\" options under Cloud Build, actually changes the IAM policy for the default GCB Service Account. ", "keywords": ["policy", "change"]}, {"source": "Text", "text": "In fact, after I enabled it, I could see this project IAM policy change in the logs: `bindingDeltas: [ 0: { action: \"ADD\" role: \"roles/iam.serviceAccountUser\" member: \"serviceAccount:913800439725@cloudbuild.gserviceaccount.com\" } ]` and even then, the build fails with the same persmissions error", "keywords": ["policy", "change"]}]}, {"Id": "117626215", "PostId": "66413967", "Score": "0", "Text": "I updated the question with some other attempts that I thought about after deviavir comment", "CreationDate": "2021-03-08T22:26:44.450", "UserId": "6004854", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "241743258", "PostHistoryTypeId": "2", "PostId": "66413967", "RevisionGUID": "39721676-b1a3-4e6a-a094-2c08bb815555", "CreationDate": "2021-02-28T21:24:07.480", "UserId": "6004854", "Text": "I decided to automate the creation of GC projects using Terraform.\r\nOne resource that Terraform will create during the run, is a new GSuite user. This is done using the [terraform-provider-gsuite][1]. So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line. \r\n\r\nNext, instead of relying on my command line, I decided to have a Cloud Build trigger that would execute Terraform init-plan-apply. As you all know, Cloud builds run under the identity of the GCB Service Account. This means we need to give that SA the permissions that Terraform might need during the execution. So far so good. \r\nSo I run the build, and I see that the only resource that Terraform is not able to create is the GSuite user. Digging through the logs I found these 2 requests (and their responses):\r\n\r\n```\r\nGET /admin/directory/v1/users?alt=json&customer=my_customer&prettyPrint=false&query=email%3Alolloso-admin%40codedby.pm HTTP/1.1\r\nHost: www.googleapis.com\r\nUser-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\nX-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\nAccept-Encoding: gzip\r\n\r\nHTTP/2.0 400 Bad Request\r\nCache-Control: private\r\nContent-Type: application/json; charset=UTF-8\r\nDate: Sun, 28 Feb 2021 12:58:25 GMT\r\nServer: ESF\r\nVary: Origin\r\nVary: X-Origin\r\nVary: Referer\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: SAMEORIGIN\r\nX-Xss-Protection: 0\r\n\r\n{\r\n  \"error\": {\r\n    \"code\": 400,\r\n    \"message\": \"Invalid Input\",\r\n    \"errors\": [\r\n      {\r\n        \"domain\": \"global\",\r\n        \"reason\": \"invalid\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n```\r\nPOST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1\r\n Host: www.googleapis.com\r\n User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\n Content-Length: 276\r\n Content-Type: application/json\r\n X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\n Accept-Encoding: gzip\r\n \r\n {\r\n  \"changePasswordAtNextLogin\": true,\r\n  \"externalIds\": [],\r\n  \"includeInGlobalAddressList\": true,\r\n  \"name\": {\r\n   \"familyName\": \"********\",\r\n   \"givenName\": \"*******\"\r\n  },\r\n  \"orgUnitPath\": \"/\",\r\n\r\n  \"password\": \"********\",\r\n  \"primaryEmail\": \"*********\",\r\n  \"sshPublicKeys\": []\r\n }\r\n \r\n HTTP/2.0 403 Forbidden\r\n Cache-Control: private\r\n Content-Type: application/json; charset=UTF-8\r\n Date: Sun, 28 Feb 2021 12:58:25 GMT\r\n Server: ESF\r\n Vary: Origin\r\n Vary: X-Origin\r\n Vary: Referer\r\n Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", error=\"insufficient_scope\", scope=\"https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/directory.user\"\r\n X-Content-Type-Options: nosniff\r\n X-Frame-Options: SAMEORIGIN\r\n X-Xss-Protection: 0\r\n \r\n {\r\n   \"error\": {\r\n     \"code\": 403,\r\n     \"message\": \"Request had insufficient authentication scopes.\",\r\n     \"errors\": [\r\n       {\r\n         \"message\": \"Insufficient Permission\",\r\n         \"domain\": \"global\",\r\n         \"reason\": \"insufficientPermissions\"\r\n       }\r\n     ],\r\n     \"status\": \"PERMISSION_DENIED\"\r\n   }\r\n }\r\n```\r\n\r\nI think this is the API complaining that the Cloud Build Service Account does not have enough rights to access the Directory API. And here is where the situation gets wild. \r\n\r\nIn order to do so I thought to grant domain-wide delegation to the Cloud Build SA. But that SA is special and I could not find a way to grant it. \r\nI tried then to give the role `serviceAccountUser` to the Cloud Build SA on my SA (the one which has domain-wide delegation). But I did not manage to succeed. In fact the build still trows the same error of insufficient permission. \r\nI then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. Also there, no luck. \r\n\r\nIs it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation? \r\n\r\nThanks\r\n\r\n\r\n  [1]: https://github.com/DeviaVir/terraform-provider-gsuite", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is done using the [terraform-provider-gsuite][1]. ", "keywords": ["provider"]}, {"source": "Text", "text": "So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line. ", "keywords": ["domain"]}, {"source": "Text", "text": "GET /admin/directory/v1/users?alt=json&customer=my_customer&prettyPrint=false&query=email%3Alolloso-admin%40codedby.pm HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip HTTP/2.0 400 Bad Request Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sun, 28 Feb 2021 12:58:25 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 400, \"message\": \"Invalid Input\", \"errors\": [ { \"domain\": \"global\", \"reason\": \"invalid\" } ] } } ``` ``` POST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 Content-Length: 276 Content-Type: application/json X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip { \"changePasswordAtNextLogin\": true, \"externalIds\": [], \"includeInGlobalAddressList\": true, \"name\": { \"familyName\": \"********\", \"givenName\": \"*******\" }, \"orgUnitPath\": \"/\", \"password\": \"********\", \"primaryEmail\": \"*********\", \"sshPublicKeys\": [] } HTTP/2.0 403 Forbidden Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sun, 28 Feb 2021 12:58:25 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", error=\"insufficient_scope\", scope=\"https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/directory.user\" X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 403, \"message\": \"Request had insufficient authentication scopes.\", \"errors\": [ { \"message\": \"Insufficient Permission\", \"domain\": \"global\", \"reason\": \"insufficientPermissions\" } ], \"status\": \"PERMISSION_DENIED\" } } ", "keywords": ["domain", "change"]}, {"source": "Text", "text": "In order to do so I thought to grant domain-wide delegation to the Cloud Build SA. ", "keywords": ["domain"]}, {"source": "Text", "text": "I tried then to give the role `serviceAccountUser` to the Cloud Build SA on my SA (the one which has domain-wide delegation). ", "keywords": ["domain"]}, {"source": "Text", "text": "I then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. ", "keywords": ["domain"]}, {"source": "Text", "text": "Is it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation? ", "keywords": ["domain"]}, {"source": "Text", "text": "Thanks [1]: https://github.com/DeviaVir/terraform-provider-gsuite", "keywords": ["provider"]}]}, {"Id": "241743259", "PostHistoryTypeId": "1", "PostId": "66413967", "RevisionGUID": "39721676-b1a3-4e6a-a094-2c08bb815555", "CreationDate": "2021-02-28T21:24:07.480", "UserId": "6004854", "Text": "Can Terraform provider for GSuite access the Admin SDK Directory API when executed in Google Cloud Build from the default Cloud Build Service Account?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Can Terraform provider for GSuite access the Admin SDK Directory API when executed in Google Cloud Build from the default Cloud Build Service Account?", "keywords": ["provider"]}]}, {"Id": "241743260", "PostHistoryTypeId": "3", "PostId": "66413967", "RevisionGUID": "39721676-b1a3-4e6a-a094-2c08bb815555", "CreationDate": "2021-02-28T21:24:07.480", "UserId": "6004854", "Text": "<google-cloud-platform><google-cloud-build><terraform-provider-gcp><google-cloud-billing>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "242152680", "PostHistoryTypeId": "5", "PostId": "66413967", "RevisionGUID": "34a7dc30-6971-44f3-8d36-87269ec1b94a", "CreationDate": "2021-03-06T18:15:41.437", "UserId": "6004854", "Comment": "Updated with the use of user-defined service account for building", "Text": "I decided to automate the creation of GC projects using Terraform.\r\nOne resource that Terraform will create during the run, is a new GSuite user. This is done using the [terraform-provider-gsuite][1]. So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line. \r\n\r\nNext, instead of relying on my command line, I decided to have a Cloud Build trigger that would execute Terraform init-plan-apply. As you all know, Cloud builds run under the identity of the GCB Service Account. This means we need to give that SA the permissions that Terraform might need during the execution. So far so good. \r\nSo I run the build, and I see that the only resource that Terraform is not able to create is the GSuite user. Digging through the logs I found these 2 requests (and their responses):\r\n\r\n```\r\nGET /admin/directory/v1/users?alt=json&customer=my_customer&prettyPrint=false&query=email%3Alolloso-admin%40codedby.pm HTTP/1.1\r\nHost: www.googleapis.com\r\nUser-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\nX-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\nAccept-Encoding: gzip\r\n\r\nHTTP/2.0 400 Bad Request\r\nCache-Control: private\r\nContent-Type: application/json; charset=UTF-8\r\nDate: Sun, 28 Feb 2021 12:58:25 GMT\r\nServer: ESF\r\nVary: Origin\r\nVary: X-Origin\r\nVary: Referer\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: SAMEORIGIN\r\nX-Xss-Protection: 0\r\n\r\n{\r\n  \"error\": {\r\n    \"code\": 400,\r\n    \"message\": \"Invalid Input\",\r\n    \"errors\": [\r\n      {\r\n        \"domain\": \"global\",\r\n        \"reason\": \"invalid\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n```\r\nPOST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1\r\n Host: www.googleapis.com\r\n User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\n Content-Length: 276\r\n Content-Type: application/json\r\n X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\n Accept-Encoding: gzip\r\n \r\n {\r\n  \"changePasswordAtNextLogin\": true,\r\n  \"externalIds\": [],\r\n  \"includeInGlobalAddressList\": true,\r\n  \"name\": {\r\n   \"familyName\": \"********\",\r\n   \"givenName\": \"*******\"\r\n  },\r\n  \"orgUnitPath\": \"/\",\r\n\r\n  \"password\": \"********\",\r\n  \"primaryEmail\": \"*********\",\r\n  \"sshPublicKeys\": []\r\n }\r\n \r\n HTTP/2.0 403 Forbidden\r\n Cache-Control: private\r\n Content-Type: application/json; charset=UTF-8\r\n Date: Sun, 28 Feb 2021 12:58:25 GMT\r\n Server: ESF\r\n Vary: Origin\r\n Vary: X-Origin\r\n Vary: Referer\r\n Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", error=\"insufficient_scope\", scope=\"https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/directory.user\"\r\n X-Content-Type-Options: nosniff\r\n X-Frame-Options: SAMEORIGIN\r\n X-Xss-Protection: 0\r\n \r\n {\r\n   \"error\": {\r\n     \"code\": 403,\r\n     \"message\": \"Request had insufficient authentication scopes.\",\r\n     \"errors\": [\r\n       {\r\n         \"message\": \"Insufficient Permission\",\r\n         \"domain\": \"global\",\r\n         \"reason\": \"insufficientPermissions\"\r\n       }\r\n     ],\r\n     \"status\": \"PERMISSION_DENIED\"\r\n   }\r\n }\r\n```\r\n\r\nI think this is the API complaining that the Cloud Build Service Account does not have enough rights to access the Directory API. And here is where the situation gets wild. \r\n\r\nIn order to do so I thought to grant domain-wide delegation to the Cloud Build SA. But that SA is special and I could not find a way to grant it. \r\nI tried then to give the role `serviceAccountUser` to the Cloud Build SA on my SA (the one which has domain-wide delegation). But I did not manage to succeed. In fact the build still trows the same error of insufficient permission. \r\nI then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. Also there, no luck. \r\n\r\nIs it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation? \r\n\r\nThanks\r\n\r\n\r\n**Update** \r\nAs per John comment, I tried to use a user-specified service account to execute my build. The necessary setup info has been taken from the [official guide][2]. \r\nThis is my `cloudbuild.yaml` file\r\n\r\n```\r\nsteps:\r\n- id: 'tf init'\r\n  name: 'hashicorp/terraform'\r\n  entrypoint: 'sh'\r\n  args: \r\n  - '-c'\r\n  - |\r\n      terraform init\r\n\r\n- id: 'tf plan'\r\n  name: 'hashicorp/terraform'\r\n  entrypoint: 'sh'\r\n  args: \r\n  - '-c'\r\n  - | \r\n      terraform plan\r\n\r\n- id: 'tf apply'\r\n  name: 'hashicorp/terraform'\r\n  entrypoint: 'sh'\r\n  args: \r\n  - '-c'\r\n  - | \r\n      terraform apply -auto-approve\r\n\r\nlogsBucket: 'gs://tf-project-creator-cloudbuild-logs'\r\nserviceAccount: 'projects/tf-project-creator/serviceAccounts/sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com'\r\noptions:\r\n  env: \r\n  - 'TF_LOG=DEBUG'\r\n```\r\n\r\nwhere `sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com` is the service account which has domain-wide delegation on my Google Workspace. \r\nI then executed the build manually \r\n\r\n```\r\nexport GOOGLE_APPLICATION_CREDENTIALS=.secrets/sa-terraform-project-creator.json; gcloud builds submit --config cloudbuild.yaml\r\n```\r\n\r\nspecifying the json private key of the same SA of above. \r\nI would have expected the build to pass but I still get the same error of above \r\n```\r\nPOST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1\r\n Host: www.googleapis.com\r\n User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\n Content-Length: 276\r\n Content-Type: application/json\r\n X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\n Accept-Encoding: gzip\r\n \r\n {\r\n  \"changePasswordAtNextLogin\": true,\r\n  \"externalIds\": [],\r\n  \"includeInGlobalAddressList\": true,\r\n  \"name\": {\r\n   \"familyName\": \"REDACTED\",\r\n   \"givenName\": \"REDACTED\"\r\n  },\r\n  \"orgUnitPath\": \"/\",\r\n  \"organizations\": [],\r\n  \"password\": \"REDACTED\",\r\n  \"primaryEmail\": \"REDACTED\",\r\n  \"sshPublicKeys\": []\r\n }\r\n \r\n -----------------------------------------------------\r\n 2021/03/06 17:26:19 [DEBUG] Google API Response Details:\r\n ---[ RESPONSE ]--------------------------------------\r\n HTTP/2.0 403 Forbidden\r\n Cache-Control: private\r\n Content-Type: application/json; charset=UTF-8\r\n Date: Sat, 06 Mar 2021 17:26:19 GMT\r\n Server: ESF\r\n Vary: Origin\r\n Vary: X-Origin\r\n Vary: Referer\r\n Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", www.googleapis.com/auth/directory.user\"\r\n X-Content-Type-Options: nosniff\r\n X-Frame-Options: SAMEORIGIN\r\n X-Xss-Protection: 0\r\n \r\n {\r\n   \"error\": {\r\n     \"code\": 403,\r\n     \"message\": \"Request had insufficient authentication scopes.\",\r\n\r\n       {\r\n         \"message\": \"Insufficient Permission\",\r\n         \"domain\": \"global\",\r\n         \"reason\": \"insufficientPermissions\"\r\n       }\r\n     ],\r\n     \"status\": \"PERMISSION_DENIED\"\r\n   }\r\n}\r\n```\r\n\r\nIs there anything I am missing? \r\n\r\n\r\n  [1]: https://github.com/DeviaVir/terraform-provider-gsuite\r\n  [2]: https://cloud.google.com/build/docs/securing-builds/configure-user-specified-service-accounts", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is done using the [terraform-provider-gsuite][1]. ", "keywords": ["provider"]}, {"source": "Text", "text": "So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line. ", "keywords": ["domain"]}, {"source": "Text", "text": "GET /admin/directory/v1/users?alt=json&customer=my_customer&prettyPrint=false&query=email%3Alolloso-admin%40codedby.pm HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip HTTP/2.0 400 Bad Request Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sun, 28 Feb 2021 12:58:25 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 400, \"message\": \"Invalid Input\", \"errors\": [ { \"domain\": \"global\", \"reason\": \"invalid\" } ] } } ``` ``` POST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 Content-Length: 276 Content-Type: application/json X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip { \"changePasswordAtNextLogin\": true, \"externalIds\": [], \"includeInGlobalAddressList\": true, \"name\": { \"familyName\": \"********\", \"givenName\": \"*******\" }, \"orgUnitPath\": \"/\", \"password\": \"********\", \"primaryEmail\": \"*********\", \"sshPublicKeys\": [] } HTTP/2.0 403 Forbidden Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sun, 28 Feb 2021 12:58:25 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", error=\"insufficient_scope\", scope=\"https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/directory.user\" X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 403, \"message\": \"Request had insufficient authentication scopes.\", \"errors\": [ { \"message\": \"Insufficient Permission\", \"domain\": \"global\", \"reason\": \"insufficientPermissions\" } ], \"status\": \"PERMISSION_DENIED\" } } ", "keywords": ["domain", "change"]}, {"source": "Text", "text": "In order to do so I thought to grant domain-wide delegation to the Cloud Build SA. ", "keywords": ["domain"]}, {"source": "Text", "text": "I tried then to give the role `serviceAccountUser` to the Cloud Build SA on my SA (the one which has domain-wide delegation). ", "keywords": ["domain"]}, {"source": "Text", "text": "I then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. ", "keywords": ["domain"]}, {"source": "Text", "text": "Is it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation? ", "keywords": ["domain"]}, {"source": "Text", "text": "This is my `cloudbuild.yaml` file ``` steps: - id: 'tf init' name: 'hashicorp/terraform' entrypoint: 'sh' args: - '-c' - | terraform init - id: 'tf plan' name: 'hashicorp/terraform' entrypoint: 'sh' args: - '-c' - | terraform plan - id: 'tf apply' name: 'hashicorp/terraform' entrypoint: 'sh' args: - '-c' - | terraform apply -auto-approve logsBucket: 'gs://tf-project-creator-cloudbuild-logs' serviceAccount: 'projects/tf-project-creator/serviceAccounts/sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com' options: env: - 'TF_LOG=DEBUG' ``` where `sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com` is the service account which has domain-wide delegation on my Google Workspace. ", "keywords": ["domain"]}, {"source": "Text", "text": "POST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 Content-Length: 276 Content-Type: application/json X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip { \"changePasswordAtNextLogin\": true, \"externalIds\": [], \"includeInGlobalAddressList\": true, \"name\": { \"familyName\": \"REDACTED\", \"givenName\": \"REDACTED\" }, \"orgUnitPath\": \"/\", \"organizations\": [], \"password\": \"REDACTED\", \"primaryEmail\": \"REDACTED\", \"sshPublicKeys\": [] } ----------------------------------------------------- 2021/03/06 17:26:19 [DEBUG] Google API Response Details: ---[ RESPONSE ]-------------------------------------- HTTP/2.0 403 Forbidden Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sat, 06 Mar 2021 17:26:19 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", www.googleapis.com/auth/directory.user\" X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 403, \"message\": \"Request had insufficient authentication scopes.\", { \"message\": \"Insufficient Permission\", \"domain\": \"global\", \"reason\": \"insufficientPermissions\" } ], \"status\": \"PERMISSION_DENIED\" ", "keywords": ["domain", "change"]}, {"source": "Text", "text": "} } ``` Is there anything I am missing? [1]: https://github.com/DeviaVir/terraform-provider-gsuite [2]: https://cloud.google.com/build/docs/securing-builds/configure-user-specified-service-accounts", "keywords": ["provider"]}]}, {"Id": "242155889", "PostHistoryTypeId": "5", "PostId": "66413967", "RevisionGUID": "e80266ab-12b7-4d61-964a-049caec7f33b", "CreationDate": "2021-03-06T19:33:07.820", "UserId": "6004854", "Comment": "added 2 characters in body; edited tags", "Text": "I decided to automate the creation of GC projects using Terraform.\r\nOne resource that Terraform will create during the run, is a new GSuite user. This is done using the [terraform-provider-gsuite][1]. So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line. \r\n\r\nNext, instead of relying on my command line, I decided to have a Cloud Build trigger that would execute Terraform init-plan-apply. As you all know, Cloud builds run under the identity of the GCB Service Account. This means we need to give that SA the permissions that Terraform might need during the execution. So far so good. \r\nSo I run the build, and I see that the only resource that Terraform is not able to create is the GSuite user. Digging through the logs I found these 2 requests (and their responses):\r\n\r\n```\r\nGET /admin/directory/v1/users?alt=json&customer=my_customer&prettyPrint=false&query=email%3Alolloso-admin%40codedby.pm HTTP/1.1\r\nHost: www.googleapis.com\r\nUser-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\nX-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\nAccept-Encoding: gzip\r\n\r\nHTTP/2.0 400 Bad Request\r\nCache-Control: private\r\nContent-Type: application/json; charset=UTF-8\r\nDate: Sun, 28 Feb 2021 12:58:25 GMT\r\nServer: ESF\r\nVary: Origin\r\nVary: X-Origin\r\nVary: Referer\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: SAMEORIGIN\r\nX-Xss-Protection: 0\r\n\r\n{\r\n  \"error\": {\r\n    \"code\": 400,\r\n    \"message\": \"Invalid Input\",\r\n    \"errors\": [\r\n      {\r\n        \"domain\": \"global\",\r\n        \"reason\": \"invalid\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n```\r\nPOST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1\r\n Host: www.googleapis.com\r\n User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\n Content-Length: 276\r\n Content-Type: application/json\r\n X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\n Accept-Encoding: gzip\r\n \r\n {\r\n  \"changePasswordAtNextLogin\": true,\r\n  \"externalIds\": [],\r\n  \"includeInGlobalAddressList\": true,\r\n  \"name\": {\r\n   \"familyName\": \"********\",\r\n   \"givenName\": \"*******\"\r\n  },\r\n  \"orgUnitPath\": \"/\",\r\n\r\n  \"password\": \"********\",\r\n  \"primaryEmail\": \"*********\",\r\n  \"sshPublicKeys\": []\r\n }\r\n \r\n HTTP/2.0 403 Forbidden\r\n Cache-Control: private\r\n Content-Type: application/json; charset=UTF-8\r\n Date: Sun, 28 Feb 2021 12:58:25 GMT\r\n Server: ESF\r\n Vary: Origin\r\n Vary: X-Origin\r\n Vary: Referer\r\n Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", error=\"insufficient_scope\", scope=\"https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/directory.user\"\r\n X-Content-Type-Options: nosniff\r\n X-Frame-Options: SAMEORIGIN\r\n X-Xss-Protection: 0\r\n \r\n {\r\n   \"error\": {\r\n     \"code\": 403,\r\n     \"message\": \"Request had insufficient authentication scopes.\",\r\n     \"errors\": [\r\n       {\r\n         \"message\": \"Insufficient Permission\",\r\n         \"domain\": \"global\",\r\n         \"reason\": \"insufficientPermissions\"\r\n       }\r\n     ],\r\n     \"status\": \"PERMISSION_DENIED\"\r\n   }\r\n }\r\n```\r\n\r\nI think this is the API complaining that the Cloud Build Service Account does not have enough rights to access the Directory API. And here is where the situation gets wild. \r\n\r\nIn order to do so I thought to grant domain-wide delegation to the Cloud Build SA. But that SA is special and I could not find a way to grant it. \r\nI tried then to give the role `serviceAccountUser` to the Cloud Build SA on my SA (the one which has domain-wide delegation). But I did not manage to succeed. In fact the build still trows the same error of insufficient permission. \r\nI then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. Also there, no luck. \r\n\r\nIs it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation? \r\n\r\nThanks\r\n\r\n\r\n**Update** \r\n\r\nAs per John comment, I tried to use a user-specified service account to execute my build. The necessary setup info has been taken from the [official guide][2]. \r\nThis is my `cloudbuild.yaml` file\r\n\r\n```\r\nsteps:\r\n- id: 'tf init'\r\n  name: 'hashicorp/terraform'\r\n  entrypoint: 'sh'\r\n  args: \r\n  - '-c'\r\n  - |\r\n      terraform init\r\n\r\n- id: 'tf plan'\r\n  name: 'hashicorp/terraform'\r\n  entrypoint: 'sh'\r\n  args: \r\n  - '-c'\r\n  - | \r\n      terraform plan\r\n\r\n- id: 'tf apply'\r\n  name: 'hashicorp/terraform'\r\n  entrypoint: 'sh'\r\n  args: \r\n  - '-c'\r\n  - | \r\n      terraform apply -auto-approve\r\n\r\nlogsBucket: 'gs://tf-project-creator-cloudbuild-logs'\r\nserviceAccount: 'projects/tf-project-creator/serviceAccounts/sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com'\r\noptions:\r\n  env: \r\n  - 'TF_LOG=DEBUG'\r\n```\r\n\r\nwhere `sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com` is the service account which has domain-wide delegation on my Google Workspace. \r\nI then executed the build manually \r\n\r\n```\r\nexport GOOGLE_APPLICATION_CREDENTIALS=.secrets/sa-terraform-project-creator.json; gcloud builds submit --config cloudbuild.yaml\r\n```\r\n\r\nspecifying the json private key of the same SA of above. \r\nI would have expected the build to pass but I still get the same error of above \r\n```\r\nPOST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1\r\n Host: www.googleapis.com\r\n User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\n Content-Length: 276\r\n Content-Type: application/json\r\n X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\n Accept-Encoding: gzip\r\n \r\n {\r\n  \"changePasswordAtNextLogin\": true,\r\n  \"externalIds\": [],\r\n  \"includeInGlobalAddressList\": true,\r\n  \"name\": {\r\n   \"familyName\": \"REDACTED\",\r\n   \"givenName\": \"REDACTED\"\r\n  },\r\n  \"orgUnitPath\": \"/\",\r\n  \"organizations\": [],\r\n  \"password\": \"REDACTED\",\r\n  \"primaryEmail\": \"REDACTED\",\r\n  \"sshPublicKeys\": []\r\n }\r\n \r\n -----------------------------------------------------\r\n 2021/03/06 17:26:19 [DEBUG] Google API Response Details:\r\n ---[ RESPONSE ]--------------------------------------\r\n HTTP/2.0 403 Forbidden\r\n Cache-Control: private\r\n Content-Type: application/json; charset=UTF-8\r\n Date: Sat, 06 Mar 2021 17:26:19 GMT\r\n Server: ESF\r\n Vary: Origin\r\n Vary: X-Origin\r\n Vary: Referer\r\n Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", www.googleapis.com/auth/directory.user\"\r\n X-Content-Type-Options: nosniff\r\n X-Frame-Options: SAMEORIGIN\r\n X-Xss-Protection: 0\r\n \r\n {\r\n   \"error\": {\r\n     \"code\": 403,\r\n     \"message\": \"Request had insufficient authentication scopes.\",\r\n\r\n       {\r\n         \"message\": \"Insufficient Permission\",\r\n         \"domain\": \"global\",\r\n         \"reason\": \"insufficientPermissions\"\r\n       }\r\n     ],\r\n     \"status\": \"PERMISSION_DENIED\"\r\n   }\r\n}\r\n```\r\n\r\nIs there anything I am missing? \r\n\r\n\r\n  [1]: https://github.com/DeviaVir/terraform-provider-gsuite\r\n  [2]: https://cloud.google.com/build/docs/securing-builds/configure-user-specified-service-accounts", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is done using the [terraform-provider-gsuite][1]. ", "keywords": ["provider"]}, {"source": "Text", "text": "So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line. ", "keywords": ["domain"]}, {"source": "Text", "text": "GET /admin/directory/v1/users?alt=json&customer=my_customer&prettyPrint=false&query=email%3Alolloso-admin%40codedby.pm HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip HTTP/2.0 400 Bad Request Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sun, 28 Feb 2021 12:58:25 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 400, \"message\": \"Invalid Input\", \"errors\": [ { \"domain\": \"global\", \"reason\": \"invalid\" } ] } } ``` ``` POST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 Content-Length: 276 Content-Type: application/json X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip { \"changePasswordAtNextLogin\": true, \"externalIds\": [], \"includeInGlobalAddressList\": true, \"name\": { \"familyName\": \"********\", \"givenName\": \"*******\" }, \"orgUnitPath\": \"/\", \"password\": \"********\", \"primaryEmail\": \"*********\", \"sshPublicKeys\": [] } HTTP/2.0 403 Forbidden Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sun, 28 Feb 2021 12:58:25 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", error=\"insufficient_scope\", scope=\"https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/directory.user\" X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 403, \"message\": \"Request had insufficient authentication scopes.\", \"errors\": [ { \"message\": \"Insufficient Permission\", \"domain\": \"global\", \"reason\": \"insufficientPermissions\" } ], \"status\": \"PERMISSION_DENIED\" } } ", "keywords": ["domain", "change"]}, {"source": "Text", "text": "In order to do so I thought to grant domain-wide delegation to the Cloud Build SA. ", "keywords": ["domain"]}, {"source": "Text", "text": "I tried then to give the role `serviceAccountUser` to the Cloud Build SA on my SA (the one which has domain-wide delegation). ", "keywords": ["domain"]}, {"source": "Text", "text": "I then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. ", "keywords": ["domain"]}, {"source": "Text", "text": "Is it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation? ", "keywords": ["domain"]}, {"source": "Text", "text": "This is my `cloudbuild.yaml` file ``` steps: - id: 'tf init' name: 'hashicorp/terraform' entrypoint: 'sh' args: - '-c' - | terraform init - id: 'tf plan' name: 'hashicorp/terraform' entrypoint: 'sh' args: - '-c' - | terraform plan - id: 'tf apply' name: 'hashicorp/terraform' entrypoint: 'sh' args: - '-c' - | terraform apply -auto-approve logsBucket: 'gs://tf-project-creator-cloudbuild-logs' serviceAccount: 'projects/tf-project-creator/serviceAccounts/sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com' options: env: - 'TF_LOG=DEBUG' ``` where `sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com` is the service account which has domain-wide delegation on my Google Workspace. ", "keywords": ["domain"]}, {"source": "Text", "text": "POST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 Content-Length: 276 Content-Type: application/json X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip { \"changePasswordAtNextLogin\": true, \"externalIds\": [], \"includeInGlobalAddressList\": true, \"name\": { \"familyName\": \"REDACTED\", \"givenName\": \"REDACTED\" }, \"orgUnitPath\": \"/\", \"organizations\": [], \"password\": \"REDACTED\", \"primaryEmail\": \"REDACTED\", \"sshPublicKeys\": [] } ----------------------------------------------------- 2021/03/06 17:26:19 [DEBUG] Google API Response Details: ---[ RESPONSE ]-------------------------------------- HTTP/2.0 403 Forbidden Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sat, 06 Mar 2021 17:26:19 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", www.googleapis.com/auth/directory.user\" X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 403, \"message\": \"Request had insufficient authentication scopes.\", { \"message\": \"Insufficient Permission\", \"domain\": \"global\", \"reason\": \"insufficientPermissions\" } ], \"status\": \"PERMISSION_DENIED\" ", "keywords": ["domain", "change"]}, {"source": "Text", "text": "} } ``` Is there anything I am missing? [1]: https://github.com/DeviaVir/terraform-provider-gsuite [2]: https://cloud.google.com/build/docs/securing-builds/configure-user-specified-service-accounts", "keywords": ["provider"]}]}, {"Id": "242155890", "PostHistoryTypeId": "6", "PostId": "66413967", "RevisionGUID": "e80266ab-12b7-4d61-964a-049caec7f33b", "CreationDate": "2021-03-06T19:33:07.820", "UserId": "6004854", "Comment": "added 2 characters in body; edited tags", "Text": "<google-cloud-platform><google-workspace><google-cloud-build><terraform-provider-gcp>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "242275212", "PostHistoryTypeId": "5", "PostId": "66413967", "RevisionGUID": "47029335-2ecf-41a7-90f1-ee037451ce9d", "CreationDate": "2021-03-08T22:25:40.863", "UserId": "6004854", "Comment": "added 1826 characters in body", "Text": "I decided to automate the creation of GC projects using Terraform.\r\nOne resource that Terraform will create during the run, is a new GSuite user. This is done using the [terraform-provider-gsuite][1]. So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line. \r\n\r\nNext, instead of relying on my command line, I decided to have a Cloud Build trigger that would execute Terraform init-plan-apply. As you all know, Cloud builds run under the identity of the GCB Service Account. This means we need to give that SA the permissions that Terraform might need during the execution. So far so good. \r\nSo I run the build, and I see that the only resource that Terraform is not able to create is the GSuite user. Digging through the logs I found these 2 requests (and their responses):\r\n\r\n```\r\nGET /admin/directory/v1/users?alt=json&customer=my_customer&prettyPrint=false&query=email%3Alolloso-admin%40codedby.pm HTTP/1.1\r\nHost: www.googleapis.com\r\nUser-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\nX-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\nAccept-Encoding: gzip\r\n\r\nHTTP/2.0 400 Bad Request\r\nCache-Control: private\r\nContent-Type: application/json; charset=UTF-8\r\nDate: Sun, 28 Feb 2021 12:58:25 GMT\r\nServer: ESF\r\nVary: Origin\r\nVary: X-Origin\r\nVary: Referer\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: SAMEORIGIN\r\nX-Xss-Protection: 0\r\n\r\n{\r\n  \"error\": {\r\n    \"code\": 400,\r\n    \"message\": \"Invalid Input\",\r\n    \"errors\": [\r\n      {\r\n        \"domain\": \"global\",\r\n        \"reason\": \"invalid\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n```\r\nPOST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1\r\n Host: www.googleapis.com\r\n User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\n Content-Length: 276\r\n Content-Type: application/json\r\n X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\n Accept-Encoding: gzip\r\n \r\n {\r\n  \"changePasswordAtNextLogin\": true,\r\n  \"externalIds\": [],\r\n  \"includeInGlobalAddressList\": true,\r\n  \"name\": {\r\n   \"familyName\": \"********\",\r\n   \"givenName\": \"*******\"\r\n  },\r\n  \"orgUnitPath\": \"/\",\r\n\r\n  \"password\": \"********\",\r\n  \"primaryEmail\": \"*********\",\r\n  \"sshPublicKeys\": []\r\n }\r\n \r\n HTTP/2.0 403 Forbidden\r\n Cache-Control: private\r\n Content-Type: application/json; charset=UTF-8\r\n Date: Sun, 28 Feb 2021 12:58:25 GMT\r\n Server: ESF\r\n Vary: Origin\r\n Vary: X-Origin\r\n Vary: Referer\r\n Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", error=\"insufficient_scope\", scope=\"https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/directory.user\"\r\n X-Content-Type-Options: nosniff\r\n X-Frame-Options: SAMEORIGIN\r\n X-Xss-Protection: 0\r\n \r\n {\r\n   \"error\": {\r\n     \"code\": 403,\r\n     \"message\": \"Request had insufficient authentication scopes.\",\r\n     \"errors\": [\r\n       {\r\n         \"message\": \"Insufficient Permission\",\r\n         \"domain\": \"global\",\r\n         \"reason\": \"insufficientPermissions\"\r\n       }\r\n     ],\r\n     \"status\": \"PERMISSION_DENIED\"\r\n   }\r\n }\r\n```\r\n\r\nI think this is the API complaining that the Cloud Build Service Account does not have enough rights to access the Directory API. And here is where the situation gets wild. \r\n\r\nIn order to do so I thought to grant domain-wide delegation to the Cloud Build SA. But that SA is special and I could not find a way to grant it. \r\nI tried then to give the role `serviceAccountUser` to the Cloud Build SA on my SA (the one which has domain-wide delegation). But I did not manage to succeed. In fact the build still trows the same error of insufficient permission. \r\nI then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. Also there, no luck. \r\n\r\nIs it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation? \r\n\r\nThanks\r\n\r\n\r\n**UPDATE 1 (using custom build service account)** \r\n\r\nAs per John comment, I tried to use a user-specified service account to execute my build. The necessary setup info has been taken from the [official guide][2]. \r\nThis is my `cloudbuild.yaml` file\r\n\r\n```\r\nsteps:\r\n- id: 'tf init'\r\n  name: 'hashicorp/terraform'\r\n  entrypoint: 'sh'\r\n  args: \r\n  - '-c'\r\n  - |\r\n      terraform init\r\n\r\n- id: 'tf plan'\r\n  name: 'hashicorp/terraform'\r\n  entrypoint: 'sh'\r\n  args: \r\n  - '-c'\r\n  - | \r\n      terraform plan\r\n\r\n- id: 'tf apply'\r\n  name: 'hashicorp/terraform'\r\n  entrypoint: 'sh'\r\n  args: \r\n  - '-c'\r\n  - | \r\n      terraform apply -auto-approve\r\n\r\nlogsBucket: 'gs://tf-project-creator-cloudbuild-logs'\r\nserviceAccount: 'projects/tf-project-creator/serviceAccounts/sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com'\r\noptions:\r\n  env: \r\n  - 'TF_LOG=DEBUG'\r\n```\r\n\r\nwhere `sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com` is the service account which has domain-wide delegation on my Google Workspace. \r\nI then executed the build manually \r\n\r\n```\r\nexport GOOGLE_APPLICATION_CREDENTIALS=.secrets/sa-terraform-project-creator.json; gcloud builds submit --config cloudbuild.yaml\r\n```\r\n\r\nspecifying the json private key of the same SA of above. \r\nI would have expected the build to pass but I still get the same error of above \r\n```\r\nPOST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1\r\n Host: www.googleapis.com\r\n User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7\r\n Content-Length: 276\r\n Content-Type: application/json\r\n X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514\r\n Accept-Encoding: gzip\r\n \r\n {\r\n  \"changePasswordAtNextLogin\": true,\r\n  \"externalIds\": [],\r\n  \"includeInGlobalAddressList\": true,\r\n  \"name\": {\r\n   \"familyName\": \"REDACTED\",\r\n   \"givenName\": \"REDACTED\"\r\n  },\r\n  \"orgUnitPath\": \"/\",\r\n  \"organizations\": [],\r\n  \"password\": \"REDACTED\",\r\n  \"primaryEmail\": \"REDACTED\",\r\n  \"sshPublicKeys\": []\r\n }\r\n \r\n -----------------------------------------------------\r\n 2021/03/06 17:26:19 [DEBUG] Google API Response Details:\r\n ---[ RESPONSE ]--------------------------------------\r\n HTTP/2.0 403 Forbidden\r\n Cache-Control: private\r\n Content-Type: application/json; charset=UTF-8\r\n Date: Sat, 06 Mar 2021 17:26:19 GMT\r\n Server: ESF\r\n Vary: Origin\r\n Vary: X-Origin\r\n Vary: Referer\r\n Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", www.googleapis.com/auth/directory.user\"\r\n X-Content-Type-Options: nosniff\r\n X-Frame-Options: SAMEORIGIN\r\n X-Xss-Protection: 0\r\n \r\n {\r\n   \"error\": {\r\n     \"code\": 403,\r\n     \"message\": \"Request had insufficient authentication scopes.\",\r\n\r\n       {\r\n         \"message\": \"Insufficient Permission\",\r\n         \"domain\": \"global\",\r\n         \"reason\": \"insufficientPermissions\"\r\n       }\r\n     ],\r\n     \"status\": \"PERMISSION_DENIED\"\r\n   }\r\n}\r\n```\r\n\r\nIs there anything I am missing? \r\n\r\n**UPDATE 2 (check on active identity when submitting a build)** \r\nAs deviavir pointed out in their comment, I tried \r\n\r\n1. enabling \"Service Accounts\" in the GCB settings, but as suspected it did not work. \r\n\r\n2. double checking the active identity while submitting the build. One of the limitations of using a custom build SA, is that the build must be manually triggered. So using gcloud, that means \r\n\r\n```\r\ngcloud builds submit --config cloudbuild.yaml\r\n```\r\n\r\nTil now, when executing this command I have always prepended it by setting `GOOGLE_APPLICATION_CREDENTIALS` var like this\r\n\r\n```\r\nexport GOOGLE_APPLICATION_CREDENTIALS=.secrets/sa-terraform-project-creator.json\r\n``` \r\n\r\nThe specified private key is the key to my build SA (the one with domain-wide delegation). While doing that, I was always logged in in gcloud with another account (the Owner of the project) which does not have the domain-wide delegation permission). But I thought that by setting GOOGLE_APPLICATION_CREDENTIALS, gcloud would have picked up that credentials. I still think that is the case, but I tried to then submit the build while being logged in gcloud using that same build SA. \r\nSo I did \r\n\r\n```\r\ngcloud auth activate-service-account sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com --key-file='.secrets/sa-terraform-project-creator.json' \r\n```\r\nand right after \r\n```\r\ngcloud builds submit --config cloudbuild.yaml\r\n```\r\n\r\nYet again, I hit the same permission problem when accessing the Directory API.\r\n\r\nAs deviavir suspected, I start to think that during the execution of the build, the call to the Directory API is done with the wrong credentials. \r\nIs there a way to log the identity used while executing certain Terraform plugin API calls? That would help a lot. \r\n\r\n\r\n\r\n  [1]: https://github.com/DeviaVir/terraform-provider-gsuite\r\n  [2]: https://cloud.google.com/build/docs/securing-builds/configure-user-specified-service-accounts", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is done using the [terraform-provider-gsuite][1]. ", "keywords": ["provider"]}, {"source": "Text", "text": "So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line. ", "keywords": ["domain"]}, {"source": "Text", "text": "GET /admin/directory/v1/users?alt=json&customer=my_customer&prettyPrint=false&query=email%3Alolloso-admin%40codedby.pm HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip HTTP/2.0 400 Bad Request Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sun, 28 Feb 2021 12:58:25 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 400, \"message\": \"Invalid Input\", \"errors\": [ { \"domain\": \"global\", \"reason\": \"invalid\" } ] } } ``` ``` POST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 Content-Length: 276 Content-Type: application/json X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip { \"changePasswordAtNextLogin\": true, \"externalIds\": [], \"includeInGlobalAddressList\": true, \"name\": { \"familyName\": \"********\", \"givenName\": \"*******\" }, \"orgUnitPath\": \"/\", \"password\": \"********\", \"primaryEmail\": \"*********\", \"sshPublicKeys\": [] } HTTP/2.0 403 Forbidden Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sun, 28 Feb 2021 12:58:25 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", error=\"insufficient_scope\", scope=\"https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/directory.user\" X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 403, \"message\": \"Request had insufficient authentication scopes.\", \"errors\": [ { \"message\": \"Insufficient Permission\", \"domain\": \"global\", \"reason\": \"insufficientPermissions\" } ], \"status\": \"PERMISSION_DENIED\" } } ", "keywords": ["domain", "change"]}, {"source": "Text", "text": "In order to do so I thought to grant domain-wide delegation to the Cloud Build SA. ", "keywords": ["domain"]}, {"source": "Text", "text": "I tried then to give the role `serviceAccountUser` to the Cloud Build SA on my SA (the one which has domain-wide delegation). ", "keywords": ["domain"]}, {"source": "Text", "text": "I then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. ", "keywords": ["domain"]}, {"source": "Text", "text": "Is it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation? ", "keywords": ["domain"]}, {"source": "Text", "text": "This is my `cloudbuild.yaml` file ``` steps: - id: 'tf init' name: 'hashicorp/terraform' entrypoint: 'sh' args: - '-c' - | terraform init - id: 'tf plan' name: 'hashicorp/terraform' entrypoint: 'sh' args: - '-c' - | terraform plan - id: 'tf apply' name: 'hashicorp/terraform' entrypoint: 'sh' args: - '-c' - | terraform apply -auto-approve logsBucket: 'gs://tf-project-creator-cloudbuild-logs' serviceAccount: 'projects/tf-project-creator/serviceAccounts/sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com' options: env: - 'TF_LOG=DEBUG' ``` where `sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com` is the service account which has domain-wide delegation on my Google Workspace. ", "keywords": ["domain"]}, {"source": "Text", "text": "POST /admin/directory/v1/users?alt=json&prettyPrint=false HTTP/1.1 Host: www.googleapis.com User-Agent: google-api-go-client/0.5 (linux amd64) Terraform/0.14.7 Content-Length: 276 Content-Type: application/json X-Goog-Api-Client: gl-go/1.15.6 gdcl/20200514 Accept-Encoding: gzip { \"changePasswordAtNextLogin\": true, \"externalIds\": [], \"includeInGlobalAddressList\": true, \"name\": { \"familyName\": \"REDACTED\", \"givenName\": \"REDACTED\" }, \"orgUnitPath\": \"/\", \"organizations\": [], \"password\": \"REDACTED\", \"primaryEmail\": \"REDACTED\", \"sshPublicKeys\": [] } ----------------------------------------------------- 2021/03/06 17:26:19 [DEBUG] Google API Response Details: ---[ RESPONSE ]-------------------------------------- HTTP/2.0 403 Forbidden Cache-Control: private Content-Type: application/json; charset=UTF-8 Date: Sat, 06 Mar 2021 17:26:19 GMT Server: ESF Vary: Origin Vary: X-Origin Vary: Referer Www-Authenticate: Bearer realm=\"https://accounts.google.com/\", www.googleapis.com/auth/directory.user\" X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-Xss-Protection: 0 { \"error\": { \"code\": 403, \"message\": \"Request had insufficient authentication scopes.\", { \"message\": \"Insufficient Permission\", \"domain\": \"global\", \"reason\": \"insufficientPermissions\" } ], \"status\": \"PERMISSION_DENIED\" } } ``` ", "keywords": ["domain", "change"]}, {"source": "Text", "text": "The specified private key is the key to my build SA (the one with domain-wide delegation). ", "keywords": ["domain"]}, {"source": "Text", "text": "While doing that, I was always logged in in gcloud with another account (the Owner of the project) which does not have the domain-wide delegation permission). ", "keywords": ["domain"]}, {"source": "Text", "text": "That would help a lot. [1]: https://github.com/DeviaVir/terraform-provider-gsuite [2]: https://cloud.google.com/build/docs/securing-builds/configure-user-specified-service-accounts", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Can Terraform provider for GSuite access the Admin SDK Directory API when executed in Google Cloud Build from the default Cloud Build Service Account?", "keywords": ["provider"]}, {"source": "Body", "text": "This is done using the terraform-provider-gsuite. ", "keywords": ["provider"]}, {"source": "Body", "text": "So I set all up (service account, domain-wide delegation, etc) and all works fine when I run the Terraform steps from my command line. ", "keywords": ["domain"]}, {"source": "Body", "text": "In order to do so I thought to grant domain-wide delegation to the Cloud Build SA. ", "keywords": ["domain"]}, {"source": "Body", "text": "I tried then to give the role serviceAccountUser to the Cloud Build SA on my SA (the one which has domain-wide delegation). ", "keywords": ["domain"]}, {"source": "Body", "text": "I then tried to use my SA (with domain-wide delegatuion) as custom Cloud Build Service Account. ", "keywords": ["domain"]}, {"source": "Body", "text": "Is it even possible from a Cloud Build to access certain resources for which normally one would use domain-wide delegation? ", "keywords": ["domain"]}, {"source": "Body", "text": "This is my cloudbuild.yaml file where sa-terraform-project-creator@tf-project-creator.iam.gserviceaccount.com is the service account which has domain-wide delegation on my Google Workspace. ", "keywords": ["domain"]}, {"source": "Body", "text": "The specified private key is the key to my build SA (the one with domain-wide delegation). ", "keywords": ["domain"]}, {"source": "Body", "text": "While doing that, I was always logged in in gcloud with another account (the Owner of the project) which does not have the domain-wide delegation permission). ", "keywords": ["domain"]}]}