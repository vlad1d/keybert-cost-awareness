{"Id": "76014419", "PostTypeId": "1", "AcceptedAnswerId": "76015594", "CreationDate": "2023-04-14T11:00:18.033", "Score": "1", "ViewCount": "324", "Body": "<p>Using Terraform, I am trying to apply a lifecycle rule for a specific Google Storage bucket prefix. According to Google Cloud documentation (<a href=\"https://cloud.google.com/storage/docs/lifecycle#matchesprefix-suffix\" rel=\"nofollow noreferrer\">https://cloud.google.com/storage/docs/lifecycle#matchesprefix-suffix</a>), this is possible using <code>matches_prefix = &quot;path&quot;</code></p>\n<p>However, when I run Terraform plan and apply, this <code>matches_prefix</code> is being ignore and the lifecycle rule is being applied to the whole bucket instead.\nThis is my current code:</p>\n<pre><code>module &quot;my-buckets&quot; {\n  source     = &quot;terraform-google-modules/cloud-storage/google&quot;\n  version    = &quot;3.2&quot;\n  project_id = var.gcp_project_id\n  location   = &quot;US&quot;\n\n  names  = [&quot;operational-bucket&quot;]\n  prefix = var.env_stage #variable is defined. In this case, the value is dev.\n  versioning = {\n    operational-bucket = true\n  }\n  randomize_suffix = false\n\n  lifecycle_rules = [\n      {\n        action = {\n          type = &quot;Delete&quot;\n        }\n        condition = {\n          matches_prefix = &quot;var/logs&quot;\n          age = 400\n        }\n      }\n    ]\n}\n</code></pre>\n<p>And this is the result of running <code>terraform plan</code> (having <code>matches_prefix</code> empty):</p>\n<pre><code> resource &quot;google_storage_bucket&quot; &quot;buckets&quot; {\n        id                          = &quot;dev-operational-bucket&quot;\n        name                        = &quot;dev-operational-bucket&quot;\n        # (11 unchanged attributes hidden)\n\n      + lifecycle_rule {\n          + action {\n              + type = &quot;Delete&quot;\n            }\n\n          + condition {\n              + age                   = 400\n              + matches_prefix        = []\n              + matches_storage_class = []\n              + matches_suffix        = []\n              + with_state            = (known after apply)\n            }\n        }\n\n        # (1 unchanged block hidden)\n    }\n</code></pre>\n<p>Anyone already had a similar problem?</p>\n", "OwnerUserId": "2923192", "LastActivityDate": "2023-04-14T13:27:19.863", "Title": "Unable to apply Terraform matches_prefix to Google Cloud Storage", "Tags": "<google-cloud-platform><terraform><google-cloud-storage><terraform-provider-gcp><terraform-google-cloud>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "291362849", "PostHistoryTypeId": "2", "PostId": "76014419", "RevisionGUID": "cd642cc1-da17-4a9d-8762-4f62da34fa54", "CreationDate": "2023-04-14T11:00:18.033", "UserId": "2923192", "Text": "Using Terraform, I am trying to apply a lifecycle rule for a specific Google Storage bucket prefix. According to Google Cloud documentation (https://cloud.google.com/storage/docs/lifecycle#matchesprefix-suffix), this is possible using `matches_prefix = \"path\"`\r\n\r\nHowever, when I run Terraform plan and apply, this `matches_prefix` is being ignore and the lifecycle rule is being applied to the whole bucket instead.\r\nThis is my current code:\r\n\r\n    module \"my-buckets\" {\r\n      source     = \"terraform-google-modules/cloud-storage/google\"\r\n      version    = \"3.2\"\r\n      project_id = var.gcp_project_id\r\n      location   = \"US\"\r\n    \r\n      names  = [\"operational-bucket\"]\r\n      prefix = var.env_stage #variable is defined. In this case, the value is dev.\r\n      versioning = {\r\n        operational-bucket = true\r\n      }\r\n      randomize_suffix = false\r\n    \r\n      lifecycle_rules = [\r\n          {\r\n            action = {\r\n              type = \"Delete\"\r\n            }\r\n            condition = {\r\n              matches_prefix = \"var/logs\"\r\n              age = 400\r\n            }\r\n          }\r\n        ]\r\n    }\r\n\r\nAnd this is the result of running `terraform plan` (having `matches_prefix` empty):\r\n\r\n     resource \"google_storage_bucket\" \"buckets\" {\r\n            id                          = \"dev-operational-bucket\"\r\n            name                        = \"dev-operational-bucket\"\r\n            # (11 unchanged attributes hidden)\r\n    \r\n          + lifecycle_rule {\r\n              + action {\r\n                  + type = \"Delete\"\r\n                }\r\n    \r\n              + condition {\r\n                  + age                   = 400\r\n                  + matches_prefix        = []\r\n                  + matches_storage_class = []\r\n                  + matches_suffix        = []\r\n                  + with_state            = (known after apply)\r\n                }\r\n            }\r\n    \r\n            # (1 unchanged block hidden)\r\n        }\r\n\r\nAnyone already had a similar problem?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Using Terraform, I am trying to apply a lifecycle rule for a specific Google Storage bucket prefix. ", "keywords": ["storage"]}, {"source": "Text", "text": "According to Google Cloud documentation (https://cloud.google.com/storage/docs/lifecycle#matchesprefix-suffix), this is possible using `matches_prefix = \"path\"` ", "keywords": ["storage"]}, {"source": "Text", "text": "This is my current code: module \"my-buckets\" { source = \"terraform-google-modules/cloud-storage/google\" version = \"3.2\" project_id = var.gcp_project_id location = \"US\" names = [\"operational-bucket\"] prefix = var.env_stage #variable is defined. ", "keywords": ["storage"]}]}, {"Id": "291362851", "PostHistoryTypeId": "1", "PostId": "76014419", "RevisionGUID": "cd642cc1-da17-4a9d-8762-4f62da34fa54", "CreationDate": "2023-04-14T11:00:18.033", "UserId": "2923192", "Text": "Unable to apply Terraform matches_prefix to Google Cloud Storage", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Unable to apply Terraform matches_prefix to Google Cloud Storage", "keywords": ["storage"]}]}, {"Id": "291362852", "PostHistoryTypeId": "3", "PostId": "76014419", "RevisionGUID": "cd642cc1-da17-4a9d-8762-4f62da34fa54", "CreationDate": "2023-04-14T11:00:18.033", "UserId": "2923192", "Text": "<google-cloud-platform><terraform><google-cloud-storage><terraform-provider-gcp><terraform-google-cloud>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "76015594", "PostTypeId": "2", "ParentId": "76014419", "CreationDate": "2023-04-14T13:27:19.863", "Score": "2", "Body": "<p>The specific debugging information for this would normally be in the module documentation or the variable declaration type specification, but those both omit the helpful information in this module. However, we can also find some helpful information in the release notes that this capability to specify <code>matches_prefix</code> was <a href=\"https://github.com/terraform-google-modules/terraform-google-cloud-storage/blob/master/CHANGELOG.md#400-2023-04-06\" rel=\"nofollow noreferrer\">added in version 4.0.0</a>. Ordinarily the variable type specification would cause your invalid argument to throw a runtime error, but it is not specified in this module, and so it is merely ignored during Terraform execution.</p>\n<p>That root cause explanation aside: you need to upgrade the module from 3.2.0 to 4.0.0. This is a backwards incompatible release, and therefore you may need additional modifications to your module declaration before you can begin using the <code>matches_prefix</code> argument in the <code>lifecycle_rules</code>. You can also attempt to switch from using this module to your own module, as the module only contains one config file, and you are only managing one bucket, and so the cost/benefit may be worthwhile.</p>\n", "OwnerUserId": "5343387", "LastActivityDate": "2023-04-14T13:27:19.863", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "134097056", "PostId": "76015594", "Score": "0", "Text": "Thank you, @Matt Schuchard, the upgrade does the trick, it was the version indeed.\nOne thing that I noticed is that the terraform plan now prepares to \"destroy my existing bucket\". Is it expected for the version or something I could avoid?", "CreationDate": "2023-04-17T09:33:00.120", "UserId": "2923192", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "134098025", "PostId": "76015594", "Score": "0", "Text": "@JuliaBel That depends on whether GCP can update your bucket with the modifications, or it needs to be re-created. It appears GCP would be unable to update the bucket, and there is likely nothing you can do if GCP does not support the operation..", "CreationDate": "2023-04-17T10:46:11.933", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "134098436", "PostId": "76015594", "Score": "0", "Text": "That' makes sense, thank you again, @Matt Schuchard.", "CreationDate": "2023-04-17T11:16:23.677", "UserId": "2923192", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "291369587", "PostHistoryTypeId": "2", "PostId": "76015594", "RevisionGUID": "e76ee8b0-5d99-4284-b00e-5ee4211b4914", "CreationDate": "2023-04-14T13:27:19.863", "UserId": "5343387", "Text": "The specific debugging information for this would normally be in the module documentation or the variable declaration type specification, but those both omit the helpful information in this module. However, we can also find some helpful information in the release notes that this capability to specify `matches_prefix` was [added in version 4.0.0][1]. Ordinarily the variable type specification would cause your invalid argument to throw a runtime error, but it is not specified in this module, and so it is merely ignored during Terraform execution.\r\n\r\nThat root cause explanation aside: you need to upgrade the module from 3.2.0 to 4.0.0. This is a backwards incompatible release, and therefore you may need additional modifications to your module declaration before you can begin using the `matches_prefix` argument in the `lifecycle_rules`. You can also attempt to switch from using this module to your own module, as the module only contains one config file, and you are only managing one bucket, and so the cost/benefit may be worthwhile.\r\n\r\n\r\n  [1]: https://github.com/terraform-google-modules/terraform-google-cloud-storage/blob/master/CHANGELOG.md#400-2023-04-06", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can also attempt to switch from using this module to your own module, as the module only contains one config file, and you are only managing one bucket, and so the cost/benefit may be worthwhile. ", "keywords": ["cost"]}, {"source": "Text", "text": "[1]: https://github.com/terraform-google-modules/terraform-google-cloud-storage/blob/master/CHANGELOG.md#400-2023-04-06", "keywords": ["storage", "change"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can also attempt to switch from using this module to your own module, as the module only contains one config file, and you are only managing one bucket, and so the cost/benefit may be worthwhile.", "keywords": ["cost"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Unable to apply Terraform matches_prefix to Google Cloud Storage", "keywords": ["storage"]}, {"source": "Body", "text": "Using Terraform, I am trying to apply a lifecycle rule for a specific Google Storage bucket prefix. ", "keywords": ["storage"]}, {"source": "Body", "text": "According to Google Cloud documentation (https://cloud.google.com/storage/docs/lifecycle#matchesprefix-suffix), this is possible using matches_prefix = \"path\" However, when I run Terraform plan and apply, this matches_prefix is being ignore and the lifecycle rule is being applied to the whole bucket instead. ", "keywords": ["storage"]}]}