{"Id": "65579265", "PostTypeId": "1", "AcceptedAnswerId": "65593186", "CreationDate": "2021-01-05T12:49:37.417", "Score": "1", "ViewCount": "2414", "Body": "<p>TF version: 0.13.4</p>\n<p>Provider version: 2.40.0</p>\n<p>I'm not sure on the best/most efficient way to do this, but what I'm trying to achieve is to attach 2 disks (for now) to each VM, but I need to be able to configure each VM and disk as per requirements. I may need to vary the number of disks and VM's in the future. I'm trying to get the for_each to loop over the size and based on how many values are in there, create that amount of disks so that I can have multiple disks with different sizes.</p>\n<p>Is there a way to do this without having to create multiple managed disk resources manually?</p>\n<p>My current code creates varying number of VM's but only attaches one disk per VM. The variables that the for_each iterates over are set in a tfvars file per environment:</p>\n<pre><code>desktop_servers = {\n  &quot;Server_1&quot; = {\n    name = 1,\n    zone = 1,\n    lun  = 1,\n    size = 32\n  }\n  &quot;Server_2&quot; = {\n    name = 2,\n    zone = 2,\n    lun  = 2,\n    size = 32\n  }\n\n  &quot;Server_3&quot; = {\n    name = 3,\n    zone = 3,\n    lun  = 3,\n    size = 32\n  }\n}\n\netl_servers = {\n  &quot;Server_1&quot; = {\n    name = 1,\n    zone = 1,\n    lun  = 1,\n    size = 32\n  }\n  &quot;Server_2&quot; = {\n    name = 2,\n    zone = 2,\n    lun  = 2,\n    size = 32\n  }\n}\n\n</code></pre>\n<p>virtual machine resource within the module.tf</p>\n<pre><code># Azure Virtual Machine\nresource &quot;azurerm_windows_virtual_machine&quot; &quot;virtual_machine&quot; {\n  for_each                         = var.servers\n  name                             = &quot;vm-${var.environment}-${var.vm_identifier}${each.value.name}&quot;\n  location                         = var.location\n  resource_group_name              = var.resource_group\n  zone                             = each.value.zone\n  size                             = var.vm_size\n  network_interface_ids            = [azurerm_network_interface.network_interface[each.key].id]\n  computer_name                    = &quot;${var.vm_identifier}${each.value.name}&quot;\n  admin_username                   = xxxx\n  admin_password                   = xxxx\n  provision_vm_agent               = &quot;true&quot;\n  source_image_id                  = data.azurerm_shared_image.dwp_shared_image.id\n\n\n  boot_diagnostics {\n    storage_account_uri = data.azurerm_storage_account.dwp_diag_storage_account.primary_blob_endpoint\n  }\n\n  os_disk {\n    name                      = &quot;vm-${var.environment}-${var.directorate}-${var.business_unit}-${var.vm_identifier}-os${each.value.name}&quot;\n    caching                   = &quot;ReadWrite&quot;\n    storage_account_type      = &quot;Premium_LRS&quot;\n  }\n\n  depends_on = [azurerm_network_interface.network_interface]\n}\n</code></pre>\n<p>managed disk resource within module.tf :</p>\n<pre><code># #Managed disks per vm\nresource &quot;azurerm_managed_disk&quot; &quot;managed_disk&quot; {\n  for_each               = var.servers\n  name                   = &quot;disk-${var.environment}-${var.vm_identifier}${each.value.name}&quot;\n  location               = var.location\n  resource_group_name    = var.resource_group\n  storage_account_type   = &quot;Premium_LRS&quot;\n  create_option          = &quot;Empty&quot;\n  disk_size_gb           = each.value.size\n  zones                  = [azurerm_windows_virtual_machine.virtual_machine[each.key].zone]\n}\n\nresource &quot;azurerm_virtual_machine_data_disk_attachment&quot; &quot;disk_attachment&quot; {\n  for_each           = var.servers\n  managed_disk_id    = azurerm_managed_disk.managed_disk[each.key].id\n  virtual_machine_id = azurerm_windows_virtual_machine.virtual_machine[each.key].id\n  lun                = each.value.lun\n  caching            = &quot;ReadWrite&quot;\n}\n</code></pre>\n<p>variable.tf within the module:</p>\n<pre><code>variable &quot;servers&quot; {\n  description = &quot;Variable for defining each instance&quot;\n}\n</code></pre>\n<p>Example of a module for the ETL servers in the main.tf. :</p>\n<pre><code>module &quot;etl_vm&quot; {\n  source                       = &quot;../modules/compute/windows_vm&quot;\n  location                     = var.location\n  resource_group               = azurerm_resource_group.rg_sbox_etl.name\n  directorate                  = var.directorate\n  business_unit                = var.business_unit\n  environment                  = var.environment\n  network_rg_identifier        = var.network_rg_identifier\n  subnet_name                  = &quot;sub-${var.environment}-${var.directorate}-${var.business_unit}-be01&quot;\n  diag_storage_account_name    = var.diag_storage_account_name\n  log_analytics_workspace_name = var.log_analytics_workspace_name\n  backup_policy_name           = var.backup_policy_name\n  vm_identifier                = &quot;${var.vm_identifier}${var.instance_number}-etl&quot;\n  servers                      = var.etl_servers\n  vm_size                      = var.etl_vm_size\n  enable_management_locks      = true\n  image_name                   = &quot;WIN2016-CISL2&quot;\n  gallery_subscription_id      = var.sub_id\n  gallery_resourcegroup        = var.rg_gallery\n  gallery_name                 = &quot;SBOXGallery&quot;\n</code></pre>\n", "OwnerUserId": "9663105", "LastEditorUserId": "9663105", "LastEditDate": "2021-01-06T10:22:20.877", "LastActivityDate": "2021-01-06T10:22:20.877", "Title": "Use a for_each to attach varying number of disks to varying number of VM's", "Tags": "<azure><azure-virtual-machine><terraform-provider-azure>", "AnswerCount": "1", "CommentCount": "4", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "115961943", "PostId": "65579265", "Score": "0", "Text": "How does `var.servers` relate to `etl_servers` and `desktop_servers`? Is it a joint map of these two variables?", "CreationDate": "2021-01-05T23:15:47.520", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "115972691", "PostId": "65579265", "Score": "0", "Text": "I have updated my code to show how they link together. `var.servers' is an input variable defined in the module. 'etl_servers' are defined in the tfvars files and called within the module.", "CreationDate": "2021-01-06T10:58:12.530", "UserId": "9663105", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "115994224", "PostId": "65579265", "Score": "0", "Text": "Any updates on this question? Does it solve your problem?", "CreationDate": "2021-01-07T03:04:43.537", "UserId": "9773937", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "116001614", "PostId": "65579265", "Score": "0", "Text": "Thanks - I can see how this will solve the issue and from the plan I ran, it looks good. I'm having issue with a nested provider as a result of adding the for_each to the calling module, but thats a separate issue", "CreationDate": "2021-01-07T10:25:30.360", "UserId": "9663105", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm having issue with a nested provider as a result of adding the for_each to the calling module, but thats a separate issue", "keywords": ["provider"]}]}], "history": [{"Id": "238142366", "PostHistoryTypeId": "2", "PostId": "65579265", "RevisionGUID": "294fd8c3-bac2-4f57-8a67-2444669193bc", "CreationDate": "2021-01-05T12:49:37.417", "UserId": "9663105", "Text": "TF version: 0.13.4\r\n\r\nProvider version: 2.40.0\r\n\r\nI'm not sure on the best/most efficient way to do this, but what I'm trying to achieve is to attach 2 disks (for now) to each VM, but I need to be able to configure each VM and disk as per requirements. I may need to vary the number of disks and VM's in the future. I'm trying to get the for_each to loop over the size and based on how many values are in there, create that amount of disks so that I can have multiple disks with different sizes.\r\n\r\nIs there a way to do this without having to create multiple managed disk resources manually?\r\n\r\nMy current code creates varying number of VM's but only attaches one disk per VM. The variables that the for_each iterates over are set in a tfvars file:\r\n\r\n```\r\ndesktop_servers = {\r\n  \"Server_1\" = {\r\n    name = 1,\r\n    zone = 1,\r\n    lun  = 1,\r\n    size = 32\r\n  }\r\n  \"Server_2\" = {\r\n    name = 2,\r\n    zone = 2,\r\n    lun  = 2,\r\n    size = 32\r\n  }\r\n\r\n  \"Server_3\" = {\r\n    name = 3,\r\n    zone = 3,\r\n    lun  = 3,\r\n    size = 32\r\n  }\r\n}\r\n\r\netl_servers = {\r\n  \"Server_1\" = {\r\n    name = 1,\r\n    zone = 1,\r\n    lun  = 1,\r\n    size = 32\r\n  }\r\n  \"Server_2\" = {\r\n    name = 2,\r\n    zone = 2,\r\n    lun  = 2,\r\n    size = 32\r\n  }\r\n}\r\n```\r\nmain.tf virtual machine resource:\r\n\r\n```\r\n# Azure Virtual Machine\r\nresource \"azurerm_windows_virtual_machine\" \"virtual_machine\" {\r\n  for_each                         = var.servers\r\n  name                             = \"vm-${var.environment}-${var.vm_identifier}${each.value.name}\"\r\n  location                         = var.location\r\n  resource_group_name              = var.resource_group\r\n  zone                             = each.value.zone\r\n  size                             = var.vm_size\r\n  network_interface_ids            = [azurerm_network_interface.network_interface[each.key].id]\r\n  computer_name                    = \"${var.vm_identifier}${each.value.name}\"\r\n  admin_username                   = xxxx\r\n  admin_password                   = xxxx\r\n  provision_vm_agent               = \"true\"\r\n  source_image_id                  = data.azurerm_shared_image.dwp_shared_image.id\r\n\r\n\r\n  boot_diagnostics {\r\n    storage_account_uri = data.azurerm_storage_account.dwp_diag_storage_account.primary_blob_endpoint\r\n  }\r\n\r\n  os_disk {\r\n    name                      = \"vm-${var.environment}-${var.directorate}-${var.business_unit}-${var.vm_identifier}-os${each.value.name}\"\r\n    caching                   = \"ReadWrite\"\r\n    storage_account_type      = \"Premium_LRS\"\r\n  }\r\n\r\n  depends_on = [azurerm_network_interface.network_interface]\r\n}\r\n```\r\nmain.tf managed disks:\r\n```\r\n# #Managed disks per vm\r\nresource \"azurerm_managed_disk\" \"managed_disk\" {\r\n  for_each               = var.servers\r\n  name                   = \"disk-${var.environment}-${var.vm_identifier}${each.value.name}\"\r\n  location               = var.location\r\n  resource_group_name    = var.resource_group\r\n  storage_account_type   = \"Premium_LRS\"\r\n  create_option          = \"Empty\"\r\n  disk_size_gb           = each.value.size\r\n  zones                  = [azurerm_windows_virtual_machine.virtual_machine[each.key].zone]\r\n}\r\n\r\nresource \"azurerm_virtual_machine_data_disk_attachment\" \"disk_attachment\" {\r\n  for_each           = var.servers\r\n  managed_disk_id    = azurerm_managed_disk.managed_disk[each.key].id\r\n  virtual_machine_id = azurerm_windows_virtual_machine.virtual_machine[each.key].id\r\n  lun                = each.value.lun\r\n  caching            = \"ReadWrite\"\r\n}\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "TF version: 0.13.4 Provider version: 2.40.0 I'm not sure on the best/most efficient way to do this, but what I'm trying to achieve is to attach 2 disks (for now) to each VM, but I need to be able to configure each VM and disk as per requirements. ", "keywords": ["efficient", "provider"]}]}, {"Id": "238142367", "PostHistoryTypeId": "1", "PostId": "65579265", "RevisionGUID": "294fd8c3-bac2-4f57-8a67-2444669193bc", "CreationDate": "2021-01-05T12:49:37.417", "UserId": "9663105", "Text": "Use a for_each to attach varying number of disks to varying number of VM's", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "238142368", "PostHistoryTypeId": "3", "PostId": "65579265", "RevisionGUID": "294fd8c3-bac2-4f57-8a67-2444669193bc", "CreationDate": "2021-01-05T12:49:37.417", "UserId": "9663105", "Text": "<azure><terraform><azure-rm>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "238185224", "PostHistoryTypeId": "6", "PostId": "65579265", "RevisionGUID": "47f17968-72da-4d2c-8a59-51da17bbd9b5", "CreationDate": "2021-01-06T02:43:21.793", "UserId": "9773937", "Comment": "edited tags", "Text": "<azure><azure-virtual-machine><terraform-provider-azure>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "238203863", "PostHistoryTypeId": "5", "PostId": "65579265", "RevisionGUID": "a711f63c-1840-447e-9350-f297b70040ce", "CreationDate": "2021-01-06T10:22:20.877", "UserId": "9663105", "Comment": "Added in module variable to show how var.servers links together", "Text": "TF version: 0.13.4\r\n\r\nProvider version: 2.40.0\r\n\r\nI'm not sure on the best/most efficient way to do this, but what I'm trying to achieve is to attach 2 disks (for now) to each VM, but I need to be able to configure each VM and disk as per requirements. I may need to vary the number of disks and VM's in the future. I'm trying to get the for_each to loop over the size and based on how many values are in there, create that amount of disks so that I can have multiple disks with different sizes.\r\n\r\nIs there a way to do this without having to create multiple managed disk resources manually?\r\n\r\nMy current code creates varying number of VM's but only attaches one disk per VM. The variables that the for_each iterates over are set in a tfvars file per environment:\r\n\r\n```\r\ndesktop_servers = {\r\n  \"Server_1\" = {\r\n    name = 1,\r\n    zone = 1,\r\n    lun  = 1,\r\n    size = 32\r\n  }\r\n  \"Server_2\" = {\r\n    name = 2,\r\n    zone = 2,\r\n    lun  = 2,\r\n    size = 32\r\n  }\r\n\r\n  \"Server_3\" = {\r\n    name = 3,\r\n    zone = 3,\r\n    lun  = 3,\r\n    size = 32\r\n  }\r\n}\r\n\r\netl_servers = {\r\n  \"Server_1\" = {\r\n    name = 1,\r\n    zone = 1,\r\n    lun  = 1,\r\n    size = 32\r\n  }\r\n  \"Server_2\" = {\r\n    name = 2,\r\n    zone = 2,\r\n    lun  = 2,\r\n    size = 32\r\n  }\r\n}\r\n\r\n```\r\nvirtual machine resource within the module.tf\r\n```\r\n# Azure Virtual Machine\r\nresource \"azurerm_windows_virtual_machine\" \"virtual_machine\" {\r\n  for_each                         = var.servers\r\n  name                             = \"vm-${var.environment}-${var.vm_identifier}${each.value.name}\"\r\n  location                         = var.location\r\n  resource_group_name              = var.resource_group\r\n  zone                             = each.value.zone\r\n  size                             = var.vm_size\r\n  network_interface_ids            = [azurerm_network_interface.network_interface[each.key].id]\r\n  computer_name                    = \"${var.vm_identifier}${each.value.name}\"\r\n  admin_username                   = xxxx\r\n  admin_password                   = xxxx\r\n  provision_vm_agent               = \"true\"\r\n  source_image_id                  = data.azurerm_shared_image.dwp_shared_image.id\r\n\r\n\r\n  boot_diagnostics {\r\n    storage_account_uri = data.azurerm_storage_account.dwp_diag_storage_account.primary_blob_endpoint\r\n  }\r\n\r\n  os_disk {\r\n    name                      = \"vm-${var.environment}-${var.directorate}-${var.business_unit}-${var.vm_identifier}-os${each.value.name}\"\r\n    caching                   = \"ReadWrite\"\r\n    storage_account_type      = \"Premium_LRS\"\r\n  }\r\n\r\n  depends_on = [azurerm_network_interface.network_interface]\r\n}\r\n```\r\nmanaged disk resource within module.tf :\r\n```\r\n# #Managed disks per vm\r\nresource \"azurerm_managed_disk\" \"managed_disk\" {\r\n  for_each               = var.servers\r\n  name                   = \"disk-${var.environment}-${var.vm_identifier}${each.value.name}\"\r\n  location               = var.location\r\n  resource_group_name    = var.resource_group\r\n  storage_account_type   = \"Premium_LRS\"\r\n  create_option          = \"Empty\"\r\n  disk_size_gb           = each.value.size\r\n  zones                  = [azurerm_windows_virtual_machine.virtual_machine[each.key].zone]\r\n}\r\n\r\nresource \"azurerm_virtual_machine_data_disk_attachment\" \"disk_attachment\" {\r\n  for_each           = var.servers\r\n  managed_disk_id    = azurerm_managed_disk.managed_disk[each.key].id\r\n  virtual_machine_id = azurerm_windows_virtual_machine.virtual_machine[each.key].id\r\n  lun                = each.value.lun\r\n  caching            = \"ReadWrite\"\r\n}\r\n```\r\nvariable.tf within the module:\r\n```\r\nvariable \"servers\" {\r\n  description = \"Variable for defining each instance\"\r\n}\r\n```\r\n\r\nExample of a module for the ETL servers in the main.tf. :\r\n```\r\nmodule \"etl_vm\" {\r\n  source                       = \"../modules/compute/windows_vm\"\r\n  location                     = var.location\r\n  resource_group               = azurerm_resource_group.rg_sbox_etl.name\r\n  directorate                  = var.directorate\r\n  business_unit                = var.business_unit\r\n  environment                  = var.environment\r\n  network_rg_identifier        = var.network_rg_identifier\r\n  subnet_name                  = \"sub-${var.environment}-${var.directorate}-${var.business_unit}-be01\"\r\n  diag_storage_account_name    = var.diag_storage_account_name\r\n  log_analytics_workspace_name = var.log_analytics_workspace_name\r\n  backup_policy_name           = var.backup_policy_name\r\n  vm_identifier                = \"${var.vm_identifier}${var.instance_number}-etl\"\r\n  servers                      = var.etl_servers\r\n  vm_size                      = var.etl_vm_size\r\n  enable_management_locks      = true\r\n  image_name                   = \"WIN2016-CISL2\"\r\n  gallery_subscription_id      = var.sub_id\r\n  gallery_resourcegroup        = var.rg_gallery\r\n  gallery_name                 = \"SBOXGallery\"\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "TF version: 0.13.4 Provider version: 2.40.0 I'm not sure on the best/most efficient way to do this, but what I'm trying to achieve is to attach 2 disks (for now) to each VM, but I need to be able to configure each VM and disk as per requirements. ", "keywords": ["efficient", "provider"]}, {"source": "Text", "text": "The variables that the for_each iterates over are set in a tfvars file per environment: ``` desktop_servers = { \"Server_1\" = { name = 1, zone = 1, lun = 1, size = 32 } \"Server_2\" = { name = 2, zone = 2, lun = 2, size = 32 } \"Server_3\" = { name = 3, zone = 3, lun = 3, size = 32 } } etl_servers = { \"Server_1\" = { name = 1, zone = 1, lun = 1, size = 32 } \"Server_2\" = { name = 2, zone = 2, lun = 2, size = 32 } } ``` virtual machine resource within the module.tf ``` # Azure Virtual Machine resource \"azurerm_windows_virtual_machine\" \"virtual_machine\" { for_each = var.servers name = \"vm-${var.environment}-${var.vm_identifier}${each.value.name}\" location = var.location resource_group_name = var.resource_group zone = each.value.zone size = var.vm_size network_interface_ids = [azurerm_network_interface.network_interface[each.key].id] computer_name = \"${var.vm_identifier}${each.value.name}\" admin_username = xxxx admin_password = xxxx provision_vm_agent = \"true\" source_image_id = data.azurerm_shared_image.dwp_shared_image.id boot_diagnostics { storage_account_uri = data.azurerm_storage_account.dwp_diag_storage_account.primary_blob_endpoint } os_disk { name = \"vm-${var.environment}-${var.directorate}-${var.business_unit}-${var.vm_identifier}-os${each.value.name}\" caching = \"ReadWrite\" storage_account_type = \"Premium_LRS\" } depends_on = [azurerm_network_interface.network_interface] } ``` managed disk resource within module.tf : ``` # #Managed disks per vm resource \"azurerm_managed_disk\" \"managed_disk\" { for_each = var.servers name = \"disk-${var.environment}-${var.vm_identifier}${each.value.name}\" location = var.location resource_group_name = var.resource_group storage_account_type = \"Premium_LRS\" create_option = \"Empty\" disk_size_gb = each.value.size zones = [azurerm_windows_virtual_machine.virtual_machine[each.key].zone] } resource \"azurerm_virtual_machine_data_disk_attachment\" \"disk_attachment\" { for_each = var.servers managed_disk_id = azurerm_managed_disk.managed_disk[each.key].id virtual_machine_id = azurerm_windows_virtual_machine.virtual_machine[each.key].id lun = each.value.lun caching = \"ReadWrite\" } ``` variable.tf within the module: ``` variable \"servers\" { description = \"Variable for defining each instance\" } ``` Example of a module for the ETL servers in the main.tf. : ``` module \"etl_vm\" { source = \"../modules/compute/windows_vm\" location = var.location resource_group = azurerm_resource_group.rg_sbox_etl.name directorate = var.directorate business_unit = var.business_unit environment = var.environment network_rg_identifier = var.network_rg_identifier subnet_name = \"sub-${var.environment}-${var.directorate}-${var.business_unit}-be01\" diag_storage_account_name = var.diag_storage_account_name log_analytics_workspace_name = var.log_analytics_workspace_name backup_policy_name = var.backup_policy_name vm_identifier = \"${var.vm_identifier}${var.instance_number}-etl\" servers = var.etl_servers vm_size = var.etl_vm_size enable_management_locks = true image_name = \"WIN2016-CISL2\" gallery_subscription_id = var.sub_id gallery_resourcegroup = var.rg_gallery gallery_name = \"SBOXGallery\" ```", "keywords": ["instance"]}]}], "answers": [{"Id": "65593186", "PostTypeId": "2", "ParentId": "65579265", "CreationDate": "2021-01-06T09:25:04.243", "Score": "2", "Body": "<p>You can use the module to achieve it. But it's a little complex. The idea is that you use the module to configure the VM, in each VM, you can configure different data disks and attach them to the VM. Use the variable to input different VM number of the configuration. Here is an example:</p>\n<p>main.tf</p>\n<pre><code>variable &quot;rg_name&quot; {\n    type = string\n}\n\nvariable &quot;vms&quot; {\n    type = map(object({\n        size = string\n        admin_user = string\n        admin_password = string\n        disks = list(number)\n    }))\n}\n\nvariable &quot;location&quot; {}\n\nmodule &quot;vms&quot; {\n    for_each = var.vms\n    \n    source = &quot;./modules/vm&quot;\n    resource_group_name = var.rg_name\n    vm_name = each.key\n    vm = each.value\n    disks = each.value[&quot;disks&quot;]\n    location = var.location\n}\n</code></pre>\n<p>terraform.tfvar</p>\n<pre><code>rg_name = &quot;charlesVMs&quot;\nlocation = &quot;East US&quot;\nvms ={\n  azurevm1 = {\n    \n    size = &quot;Standard_DS1_v2&quot;\n    admin_user = &quot;azureuser&quot;\n    admin_password = &quot;azureuser@2021&quot;\n    disks = [30, 30]\n  }\n}\n</code></pre>\n<p>./modules/vm/main.tf</p>\n<pre><code>variable &quot;resource_group_name&quot; {}\n\nvariable &quot;vm&quot; {}\n\nvariable &quot;disks&quot; {}\n\nvariable &quot;location&quot; {}\n\nvariable &quot;vm_name&quot; {}\n\nresource &quot;azurerm_resource_group&quot; &quot;example&quot; {\n    name  = var.resource_group_name\n    location = var.location\n}\n\nresource &quot;azurerm_virtual_network&quot; &quot;example&quot; {\n  name                = &quot;example-network&quot;\n  address_space       = [&quot;10.0.0.0/16&quot;]\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n}\n\nresource &quot;azurerm_subnet&quot; &quot;example&quot; {\n  name                 = &quot;internal&quot;\n  resource_group_name  = azurerm_resource_group.example.name\n  virtual_network_name = azurerm_virtual_network.example.name\n  address_prefixes     = [&quot;10.0.2.0/24&quot;]\n}\n\nresource &quot;azurerm_network_interface&quot; &quot;example&quot; {\n  name                = &quot;example-nic&quot;\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n\n  ip_configuration {\n    name                          = &quot;internal&quot;\n    subnet_id                     = azurerm_subnet.example.id\n    private_ip_address_allocation = &quot;Dynamic&quot;\n  }\n}\n\nresource &quot;azurerm_linux_virtual_machine&quot; &quot;vm&quot; {\n  name              = var.vm_name\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n  size                = var.vm[&quot;size&quot;]\n\n  disable_password_authentication = false\n  admin_username      = var.vm[&quot;admin_user&quot;]\n  admin_password      = var.vm[&quot;admin_password&quot;]\n  network_interface_ids = [\n    azurerm_network_interface.example.id\n  ]\n\n  # admin_ssh_key {\n  #   username   = &quot;adminuser&quot;\n  #   public_key = file(&quot;~/.ssh/id_rsa.pub&quot;)\n  # }\n\n  os_disk {\n    caching              = &quot;ReadWrite&quot;\n    storage_account_type = &quot;Standard_LRS&quot;\n  }\n\n  source_image_reference {\n    publisher = &quot;Canonical&quot;\n    offer     = &quot;UbuntuServer&quot;\n    sku       = &quot;16.04-LTS&quot;\n    version   = &quot;latest&quot;\n  }\n}\n\nresource &quot;azurerm_managed_disk&quot; &quot;example&quot; {\n  count       = length(var.vm[&quot;disks&quot;])\n  name        = &quot;datadisk-${count.index}&quot;\n  location    = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  storage_account_type = &quot;Standard_LRS&quot;\n  create_option        = &quot;Empty&quot;\n  disk_size_gb    = element(var.vm[&quot;disks&quot;], count.index)\n}\n\nresource &quot;azurerm_virtual_machine_data_disk_attachment&quot; &quot;example&quot; {\n  count              = length(var.vm[&quot;disks&quot;])\n  managed_disk_id    = element(azurerm_managed_disk.example.*.id, count.index)\n  virtual_machine_id = azurerm_linux_virtual_machine.vm.id\n  lun                = count.index\n  caching            = &quot;ReadWrite&quot;\n}\n</code></pre>\n<p>You only need to give the varying number of VM's configuration and the varying number of disks with sizes for the <code>vms</code> variable.</p>\n", "OwnerUserId": "9773937", "LastActivityDate": "2021-01-06T09:25:04.243", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "238200545", "PostHistoryTypeId": "2", "PostId": "65593186", "RevisionGUID": "940db02b-bacf-4a82-85b2-135c71e7edda", "CreationDate": "2021-01-06T09:25:04.243", "UserId": "9773937", "Text": "You can use the module to achieve it. But it's a little complex. The idea is that you use the module to configure the VM, in each VM, you can configure different data disks and attach them to the VM. Use the variable to input different VM number of the configuration. Here is an example:\r\n\r\nmain.tf\r\n\r\n    variable \"rg_name\" {\r\n        type = string\r\n    }\r\n    \r\n    variable \"vms\" {\r\n        type = map(object({\r\n            size = string\r\n            admin_user = string\r\n            admin_password = string\r\n            disks = list(number)\r\n        }))\r\n    }\r\n    \r\n    variable \"location\" {}\r\n    \r\n    module \"vms\" {\r\n        for_each = var.vms\r\n        \r\n        source = \"./modules/vm\"\r\n        resource_group_name = var.rg_name\r\n        vm_name = each.key\r\n        vm = each.value\r\n        disks = each.value[\"disks\"]\r\n        location = var.location\r\n    }\r\n\r\nterraform.tfvar\r\n\r\n    rg_name = \"charlesVMs\"\r\n    location = \"East US\"\r\n    vms ={\r\n      azurevm1 = {\r\n        \r\n        size = \"Standard_DS1_v2\"\r\n        admin_user = \"azureuser\"\r\n        admin_password = \"azureuser@2021\"\r\n        disks = [30, 30]\r\n      }\r\n    }\r\n\r\n./modules/vm/main.tf\r\n\r\n    variable \"resource_group_name\" {}\r\n    \r\n    variable \"vm\" {}\r\n    \r\n    variable \"disks\" {}\r\n    \r\n    variable \"location\" {}\r\n    \r\n    variable \"vm_name\" {}\r\n    \r\n    resource \"azurerm_resource_group\" \"example\" {\r\n        name  = var.resource_group_name\r\n        location = var.location\r\n    }\r\n    \r\n    resource \"azurerm_virtual_network\" \"example\" {\r\n      name                = \"example-network\"\r\n      address_space       = [\"10.0.0.0/16\"]\r\n      location            = azurerm_resource_group.example.location\r\n      resource_group_name = azurerm_resource_group.example.name\r\n    }\r\n    \r\n    resource \"azurerm_subnet\" \"example\" {\r\n      name                 = \"internal\"\r\n      resource_group_name  = azurerm_resource_group.example.name\r\n      virtual_network_name = azurerm_virtual_network.example.name\r\n      address_prefixes     = [\"10.0.2.0/24\"]\r\n    }\r\n    \r\n    resource \"azurerm_network_interface\" \"example\" {\r\n      name                = \"example-nic\"\r\n      location            = azurerm_resource_group.example.location\r\n      resource_group_name = azurerm_resource_group.example.name\r\n    \r\n      ip_configuration {\r\n        name                          = \"internal\"\r\n        subnet_id                     = azurerm_subnet.example.id\r\n        private_ip_address_allocation = \"Dynamic\"\r\n      }\r\n    }\r\n    \r\n    resource \"azurerm_linux_virtual_machine\" \"vm\" {\r\n      name              = var.vm_name\r\n      resource_group_name = azurerm_resource_group.example.name\r\n      location            = azurerm_resource_group.example.location\r\n      size                = var.vm[\"size\"]\r\n    \r\n      disable_password_authentication = false\r\n      admin_username      = var.vm[\"admin_user\"]\r\n      admin_password      = var.vm[\"admin_password\"]\r\n      network_interface_ids = [\r\n        azurerm_network_interface.example.id\r\n      ]\r\n    \r\n      # admin_ssh_key {\r\n      #   username   = \"adminuser\"\r\n      #   public_key = file(\"~/.ssh/id_rsa.pub\")\r\n      # }\r\n    \r\n      os_disk {\r\n        caching              = \"ReadWrite\"\r\n        storage_account_type = \"Standard_LRS\"\r\n      }\r\n    \r\n      source_image_reference {\r\n        publisher = \"Canonical\"\r\n        offer     = \"UbuntuServer\"\r\n        sku       = \"16.04-LTS\"\r\n        version   = \"latest\"\r\n      }\r\n    }\r\n    \r\n    resource \"azurerm_managed_disk\" \"example\" {\r\n      count       = length(var.vm[\"disks\"])\r\n      name        = \"datadisk-${count.index}\"\r\n      location    = azurerm_resource_group.example.location\r\n      resource_group_name = azurerm_resource_group.example.name\r\n      storage_account_type = \"Standard_LRS\"\r\n      create_option        = \"Empty\"\r\n      disk_size_gb    = element(var.vm[\"disks\"], count.index)\r\n    }\r\n    \r\n    resource \"azurerm_virtual_machine_data_disk_attachment\" \"example\" {\r\n      count              = length(var.vm[\"disks\"])\r\n      managed_disk_id    = element(azurerm_managed_disk.example.*.id, count.index)\r\n      virtual_machine_id = azurerm_linux_virtual_machine.vm.id\r\n      lun                = count.index\r\n      caching            = \"ReadWrite\"\r\n    }\r\n\r\nYou only need to give the varying number of VM's configuration and the varying number of disks with sizes for the `vms` variable.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "TF version: 0.13.4 Provider version: 2.40.0 I'm not sure on the best/most efficient way to do this, but what I'm trying to achieve is to attach 2 disks (for now) to each VM, but I need to be able to configure each VM and disk as per requirements. ", "keywords": ["efficient", "provider"]}]}