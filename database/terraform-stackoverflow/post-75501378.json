{"Id": "75501378", "PostTypeId": "1", "CreationDate": "2023-02-19T15:53:26.500", "Score": "0", "ViewCount": "166", "Body": "<p>I have an ECS cluster (type: ec2) that has an auto-scaling group. let's say that I have for example 10 instances as a maximum and there are 6 instances as a desired count of running instances and each instance has 2 deployed services now I want to configure the auto-scaling group for dynamically scaling up / down based on the service counts and this means:\nif the desired number of the deployed service is 6 and I made an update to scaling the replica number of a service. the cluster must scale up with an instance from the 10 instances for the new replica number and so on until the maximum number of 10 instances is full and if I decrease the number of replicas the cluster must terminate the unused instance and so on.</p>\n<ul>\n<li>why i need this ?</li>\n</ul>\n<p>because I don't wanna have any instance with a Status: Active and I don't use it. I think that any unused instance with an active status will pay for it. so if you even have a good idea or I am\u00a0wrong in my thoughts tell me.</p>\n<p>here is my configuration:</p>\n<pre><code>resource &quot;aws_autoscaling_policy&quot; &quot;asg_policy&quot; {\n  name                   = &quot;asg-policy&quot;\n  scaling_adjustment     = 1\n  policy_type            = &quot;SimpleScaling&quot;\n  adjustment_type        = &quot;ChangeInCapacity&quot;\n  cooldown               = 100\n  autoscaling_group_name = aws_autoscaling_group.ecs_asg.name\n}\n\nresource &quot;aws_autoscaling_group&quot; &quot;ecs_asg&quot; {\n  name                      = &quot;ecs-asg&quot;\n  vpc_zone_identifier       = [&quot;${aws_subnet.public_1.id}&quot;, &quot;${aws_subnet.public_2.id}&quot;, &quot;${aws_subnet.public_3.id}&quot;]\n  launch_configuration      = aws_launch_configuration.ecs_launch_config.name\n  desired_capacity          = 6\n  min_size                  = 0\n  max_size                  = 10\n  health_check_grace_period = 100\n  health_check_type         = &quot;ELB&quot;\n  force_delete              = true\n  target_group_arns         = [aws_lb_target_group.asg_tg.arn]\n  termination_policies      = [&quot;OldestInstance&quot;]\n}\n</code></pre>\n<ul>\n<li>i tried to configure the asg_policy but seems not working as expected.</li>\n<li>tried to setup the max / min number but not working.</li>\n</ul>\n<p>can anyone help me &amp; tnx</p>\n", "OwnerUserId": "21245180", "LastActivityDate": "2023-02-19T15:53:26.500", "Title": "How to configure aws auto scaling group for scaling up/down using terraform", "Tags": "<amazon-web-services><terraform><amazon-ecs><aws-auto-scaling>", "AnswerCount": "0", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "133210973", "PostId": "75501378", "Score": "1", "Text": "What is wrong with the current code? Any errors?", "CreationDate": "2023-02-19T16:53:29.710", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "133211764", "PostId": "75501378", "Score": "0", "Text": "@MarkoE no errors, but it's not increasing more than the desired number dynamically if I am increasing the service replica number while no more enough capacity on the cluster.", "CreationDate": "2023-02-19T18:00:35.567", "UserId": "21245180", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "@MarkoE no errors, but it's not increasing more than the desired number dynamically if I am increasing the service replica number while no more enough capacity on the cluster.", "keywords": ["cluster"]}]}, {"Id": "133215905", "PostId": "75501378", "Score": "1", "Text": "Sadly your question lacks details and is unclear. Do you want to create ec2 capacity provider? Where is the code for that?", "CreationDate": "2023-02-20T01:13:06.980", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Do you want to create ec2 capacity provider? ", "keywords": ["provider"]}]}, {"Id": "133220241", "PostId": "75501378", "Score": "0", "Text": "@Marcin no, maybe u wanna read it again, I am talking about an auto-scaling group with a dynamic scale up / down according to the cluster capacity.", "CreationDate": "2023-02-20T09:03:18.587", "UserId": "21245180", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "@Marcin no, maybe u wanna read it again, I am talking about an auto-scaling group with a dynamic scale up / down according to the cluster capacity.", "keywords": ["cluster"]}]}], "history": [{"Id": "288358202", "PostHistoryTypeId": "2", "PostId": "75501378", "RevisionGUID": "62d3de44-e989-44e4-95ba-24c70874fbef", "CreationDate": "2023-02-19T15:53:26.500", "UserId": "21245180", "Text": "I have an ECS cluster (type: ec2) that has an auto-scaling group. let's say that I have for example 10 instances as a maximum and there are 6 instances as a desired count of running instances and each instance has 2 deployed services now I want to configure the auto-scaling group for dynamically scaling up / down based on the service counts and this means:\r\nif the desired number of the deployed service is 6 and I made an update to scaling the replica number of a service. the cluster must scale up with an instance from the 10 instances for the new replica number and so on until the maximum number of 10 instances is full and if I decrease the number of replicas the cluster must terminate the unused instance and so on.\r\n\r\n- why i need this ?\r\n\r\nbecause I don't wanna have any instance with a Status: Active and I don't use it. I think that any unused instance with an active status will pay for it. so if you even have a good idea or I am\u00a0wrong in my thoughts tell me.\r\n\r\nhere is my configuration:\r\n\r\n```\r\nresource \"aws_autoscaling_policy\" \"asg_policy\" {\r\n  name                   = \"asg-policy\"\r\n  scaling_adjustment     = 1\r\n  policy_type            = \"SimpleScaling\"\r\n  adjustment_type        = \"ChangeInCapacity\"\r\n  cooldown               = 100\r\n  autoscaling_group_name = aws_autoscaling_group.ecs_asg.name\r\n}\r\n\r\nresource \"aws_autoscaling_group\" \"ecs_asg\" {\r\n  name                      = \"ecs-asg\"\r\n  vpc_zone_identifier       = [\"${aws_subnet.public_1.id}\", \"${aws_subnet.public_2.id}\", \"${aws_subnet.public_3.id}\"]\r\n  launch_configuration      = aws_launch_configuration.ecs_launch_config.name\r\n  desired_capacity          = 6\r\n  min_size                  = 0\r\n  max_size                  = 10\r\n  health_check_grace_period = 100\r\n  health_check_type         = \"ELB\"\r\n  force_delete              = true\r\n  target_group_arns         = [aws_lb_target_group.asg_tg.arn]\r\n  termination_policies      = [\"OldestInstance\"]\r\n}\r\n```\r\n\r\n- i tried to configure the asg_policy but seems not working as expected.\r\n- tried to setup the max / min number but not working.\r\n\r\ncan anyone help me & tnx", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have an ECS cluster (type: ec2) that has an auto-scaling group. let's say that I have for example 10 instances as a maximum and there are 6 instances as a desired count of running instances and each instance has 2 deployed services now I want to configure the auto-scaling group for dynamically scaling up / down based on the service counts and this means: if the desired number of the deployed service is 6 and I made an update to scaling the replica number of a service. ", "keywords": ["instance", "cluster"]}, {"source": "Text", "text": "the cluster must scale up with an instance from the 10 instances for the new replica number and so on until the maximum number of 10 instances is full and if I decrease the number of replicas the cluster must terminate the unused instance and so on. - why i need this ? because I don't wanna have any instance with a Status: Active and I don't use it. ", "keywords": ["instance", "cluster"]}, {"source": "Text", "text": "I think that any unused instance with an active status will pay for it. ", "keywords": ["pay", "instance"]}, {"source": "Text", "text": "here is my configuration: ``` resource \"aws_autoscaling_policy\" \"asg_policy\" { name = \"asg-policy\" scaling_adjustment = 1 policy_type = \"SimpleScaling\" adjustment_type = \"ChangeInCapacity\" cooldown = 100 autoscaling_group_name = aws_autoscaling_group.ecs_asg.name } resource \"aws_autoscaling_group\" \"ecs_asg\" { name = \"ecs-asg\" vpc_zone_identifier = [\"${aws_subnet.public_1.id}\", \"${aws_subnet.public_2.id}\", \"${aws_subnet.public_3.id}\"] launch_configuration = aws_launch_configuration.ecs_launch_config.name desired_capacity = 6 min_size = 0 max_size = 10 health_check_grace_period = 100 health_check_type = \"ELB\" force_delete = true target_group_arns = [aws_lb_target_group.asg_tg.arn] termination_policies = [\"OldestInstance\"] } ``` - i tried to configure the asg_policy but seems not working as expected", "keywords": ["policy", "change"]}]}, {"Id": "288358204", "PostHistoryTypeId": "1", "PostId": "75501378", "RevisionGUID": "62d3de44-e989-44e4-95ba-24c70874fbef", "CreationDate": "2023-02-19T15:53:26.500", "UserId": "21245180", "Text": "How to configure aws auto scaling group for scaling up/down using terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "288358205", "PostHistoryTypeId": "3", "PostId": "75501378", "RevisionGUID": "62d3de44-e989-44e4-95ba-24c70874fbef", "CreationDate": "2023-02-19T15:53:26.500", "UserId": "21245180", "Text": "<amazon-web-services><terraform><amazon-ecs><aws-auto-scaling>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "288358206", "PostHistoryTypeId": "66", "PostId": "75501378", "RevisionGUID": "62d3de44-e989-44e4-95ba-24c70874fbef", "CreationDate": "2023-02-19T15:53:26.500", "UserId": "21245180", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have an ECS cluster (type: ec2) that has an auto-scaling group. let's say that I have for example 10 instances as a maximum and there are 6 instances as a desired count of running instances and each instance has 2 deployed services now I want to configure the auto-scaling group for dynamically scaling up / down based on the service counts and this means: if the desired number of the deployed service is 6 and I made an update to scaling the replica number of a service. ", "keywords": ["instance", "cluster"]}, {"source": "Body", "text": "the cluster must scale up with an instance from the 10 instances for the new replica number and so on until the maximum number of 10 instances is full and if I decrease the number of replicas the cluster must terminate the unused instance and so on. ", "keywords": ["instance", "cluster"]}, {"source": "Body", "text": "why i need this ? because I don't wanna have any instance with a Status: Active and I don't use it. ", "keywords": ["instance"]}, {"source": "Body", "text": "I think that any unused instance with an active status will pay for it. ", "keywords": ["pay", "instance"]}]}