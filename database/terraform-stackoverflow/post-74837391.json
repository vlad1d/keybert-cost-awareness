{"Id": "74837391", "PostTypeId": "1", "AcceptedAnswerId": "74854974", "CreationDate": "2022-12-17T20:50:21.693", "Score": "-3", "ViewCount": "790", "Body": "<p>I was wondering, why does terraform downloads the modules to the local machine during terraform init command. What is the need to download the modules in our local machine? Why can't terraform directly refers to the file present in the repository?</p>\n<p><strong>Example of referring a remote module as follow:</strong></p>\n<pre><code>module &quot;signalR&quot; {\n  source  = &quot;git@github.com:fifa-x/terraform-azurerm-signalr.git?ref=v1.1.0&quot;\n}\n</code></pre>\n", "OwnerUserId": "8660480", "LastActivityDate": "2022-12-19T19:06:29.867", "Title": "Why does Terraform download modules into your local computer while referring to the module present on remote repository?", "Tags": "<terraform><terraform-provider-aws><terraform-provider-azure><terraform-provider-gcp><terraform0.12+>", "AnswerCount": "2", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132074454", "PostId": "74837391", "Score": "1", "Text": "To read the file, it has to be downloaded.", "CreationDate": "2022-12-17T22:19:38.633", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "284505327", "PostHistoryTypeId": "2", "PostId": "74837391", "RevisionGUID": "9dc3a3b2-1d59-4ea6-904a-81a30c7feffb", "CreationDate": "2022-12-17T20:50:21.693", "UserId": "8660480", "Text": "\r\nI was wondering, why does terraform downloads the modules to the local machine during terraform init command. What is the need to download the modules in our local machine? Why can't terraform directly refers to the file present in the repository?\r\n\r\n**Example of referring a remote module as follow:**\r\n\r\n    module \"signalR\" {\r\n      source  = \"git@github.com:fifa-x/terraform-azurerm-signalr.git?ref=v1.1.0\"\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "284505329", "PostHistoryTypeId": "1", "PostId": "74837391", "RevisionGUID": "9dc3a3b2-1d59-4ea6-904a-81a30c7feffb", "CreationDate": "2022-12-17T20:50:21.693", "UserId": "8660480", "Text": "Why does Terraform download modules into your local computer while referring to the module present on remote repository?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "284505330", "PostHistoryTypeId": "3", "PostId": "74837391", "RevisionGUID": "9dc3a3b2-1d59-4ea6-904a-81a30c7feffb", "CreationDate": "2022-12-17T20:50:21.693", "UserId": "8660480", "Text": "<terraform><terraform-provider-aws><terraform-provider-azure><terraform-provider-gcp><terraform0.12+>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "74839513", "PostTypeId": "2", "ParentId": "74837391", "CreationDate": "2022-12-18T06:32:13.970", "Score": "1", "Body": "<p>From the <a href=\"https://developer.hashicorp.com/terraform/language/modules/sources\" rel=\"nofollow noreferrer\">documentation</a>: &quot;so that other Terraform commands can use it.&quot;</p>\n<p>That said,</p>\n<blockquote>\n<p>Local paths are special in that they are not &quot;installed&quot; in the same sense that other sources are: the files are already present on local disk (possibly as a result of installing a parent module) and so can just be used directly. Their source code is automatically updated if the parent module is upgraded.</p>\n</blockquote>\n<p>Hope that helps.</p>\n", "OwnerUserId": "1426433", "LastActivityDate": "2022-12-18T06:32:13.970", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "284518263", "PostHistoryTypeId": "2", "PostId": "74839513", "RevisionGUID": "ce14743a-e190-471a-bc17-e4864d01d034", "CreationDate": "2022-12-18T06:32:13.970", "UserId": "1426433", "Text": "From the [documentation][1]: \"so that other Terraform commands can use it.\"\r\n\r\nThat said,\r\n\r\n> Local paths are special in that they are not \"installed\" in the same sense that other sources are: the files are already present on local disk (possibly as a result of installing a parent module) and so can just be used directly. Their source code is automatically updated if the parent module is upgraded.\r\n\r\nHope that helps.\r\n\r\n\r\n  [1]: https://developer.hashicorp.com/terraform/language/modules/sources", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "74854974", "PostTypeId": "2", "ParentId": "74837391", "CreationDate": "2022-12-19T19:06:29.867", "Score": "1", "Body": "<p>Terraform needs to download the contents of the repository in order to work with it, because otherwise it would have no way to know what is defined in the repository.</p>\n<p>However, I think you are asking why Terraform writes what it downloaded into the local filesystem rather than just using it in memory for the duration of the operation. There are a few different reasons for that design tradeoff:</p>\n<ul>\n<li><p><strong>Security:</strong> A remote Terraform module is arbitrary code installed over the internet, which you'll presumably eventually be running with access to high-value credentials.</p>\n<p>Terraform performs all loading of code from remote systems in <code>terraform init</code> and no other command so that you can review what <code>terraform init</code> installed -- either manually or with some automated security tools -- before you actually execute the module.</p>\n<p>Other commands like <code>terraform apply</code> work only with modules already cached on the local system, so that once you've checked what was installed you can be confident that Terraform will be evaluating exactly that code.</p>\n</li>\n<li><p><strong>Performance:</strong> Fetching code over the network can potentially be slow and/or expensive, particularly from Git repositories where the protocol requires always retrieving at least the entire content of the current commit.</p>\n<p>By downloading remote code only once during <code>terraform init</code> and then reusing it for subsequent commands Terraform can amortize the cost of downloading the dependencies across multiple commands.</p>\n</li>\n<li><p><strong>Debugging:</strong> If something goes wrong when you run <code>terraform apply</code>, Terraform might report an error that refers to source code in an external module. Although Terraform does include a minimal snippet of the part of the module which was in error, you may need to review other parts of that module's source code to fully understand what went wrong.</p>\n<p>Keeping a copy of the source code on your local system means that you can more easily inspect the rest of the module source code and be sure that you're looking at the module code that Terraform was really reading. If Terraform instead only kept that source code briefly in memory while it was running, you'd need to look up the rest of the source code in the original repository and you might inadvertently be looking at the wrong commit and therefore get a misleading answer as to how the rest of the module behaves.</p>\n</li>\n</ul>\n<p>Creating a local cache of remote dependencies is a typical design choice for computer languages that support direct installation of remote libraries, and it's often for similar reasons as with Terraform. Terraform's details are not exactly the same, but the same general principles apply as with other programming languages.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2022-12-19T19:06:29.867", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "284607486", "PostHistoryTypeId": "2", "PostId": "74854974", "RevisionGUID": "14a7a865-da5d-463c-a39d-0204b4f666d4", "CreationDate": "2022-12-19T19:06:29.867", "UserId": "281848", "Text": "Terraform needs to download the contents of the repository in order to work with it, because otherwise it would have no way to know what is defined in the repository.\r\n\r\nHowever, I think you are asking why Terraform writes what it downloaded into the local filesystem rather than just using it in memory for the duration of the operation. There are a few different reasons for that design tradeoff:\r\n\r\n* **Security:** A remote Terraform module is arbitrary code installed over the internet, which you'll presumably eventually be running with access to high-value credentials.\r\n\r\n    Terraform performs all loading of code from remote systems in `terraform init` and no other command so that you can review what `terraform init` installed -- either manually or with some automated security tools -- before you actually execute the module.\r\n\r\n    Other commands like `terraform apply` work only with modules already cached on the local system, so that once you've checked what was installed you can be confident that Terraform will be evaluating exactly that code.\r\n\r\n* **Performance:** Fetching code over the network can potentially be slow and/or expensive, particularly from Git repositories where the protocol requires always retrieving at least the entire content of the current commit.\r\n\r\n    By downloading remote code only once during `terraform init` and then reusing it for subsequent commands Terraform can amortize the cost of downloading the dependencies across multiple commands.\r\n\r\n* **Debugging:** If something goes wrong when you run `terraform apply`, Terraform might report an error that refers to source code in an external module. Although Terraform does include a minimal snippet of the part of the module which was in error, you may need to review other parts of that module's source code to fully understand what went wrong.\r\n\r\n    Keeping a copy of the source code on your local system means that you can more easily inspect the rest of the module source code and be sure that you're looking at the module code that Terraform was really reading. If Terraform instead only kept that source code briefly in memory while it was running, you'd need to look up the rest of the source code in the original repository and you might inadvertently be looking at the wrong commit and therefore get a misleading answer as to how the rest of the module behaves.\r\n\r\nCreating a local cache of remote dependencies is a typical design choice for computer languages that support direct installation of remote libraries, and it's often for similar reasons as with Terraform. Terraform's details are not exactly the same, but the same general principles apply as with other programming languages.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Fetching code over the network can potentially be slow and/or expensive, particularly from Git repositories where the protocol requires always retrieving at least the entire content of the current commit. ", "keywords": ["expense"]}, {"source": "Text", "text": "By downloading remote code only once during `terraform init` and then reusing it for subsequent commands Terraform can amortize the cost of downloading the dependencies across multiple commands. ", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "Performance: Fetching code over the network can potentially be slow and/or expensive, particularly from Git repositories where the protocol requires always retrieving at least the entire content of the current commit. ", "keywords": ["expense"]}, {"source": "Body", "text": "By downloading remote code only once during terraform init and then reusing it for subsequent commands Terraform can amortize the cost of downloading the dependencies across multiple commands. ", "keywords": ["cost"]}]}], "contains-topic": true, "filtered-sentences": []}