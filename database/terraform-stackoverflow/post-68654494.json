{"Id": "68654494", "PostTypeId": "1", "CreationDate": "2021-08-04T15:59:20.033", "Score": "0", "ViewCount": "294", "Body": "<p>I have the following multi-account setup with AWS SSO:</p>\n<ul>\n<li>An account called &quot;infrastructure-owner&quot;. Under this account, there is a role called &quot;SomeAccessLevel&quot; where I can click to sign-in the web console.</li>\n<li>Another account called &quot;infrastructure-consumer&quot;. Under this account there is the same role called &quot;SomeAccessLevel&quot; where I can click to sign-in the web console. There may be other roles.</li>\n</ul>\n<p>Account &quot;infrastructure-owner&quot; owns resources (for example S3 buckets, DynamoDB tables, or VPNs) typically with read/write access. This account is somewhat protected and rarely used. Account &quot;infrastructure-consumer&quot; merely have read access to resources in &quot;infrastructure-owner&quot;. This account is used often by multiple people/services. For example, production data pipelines run in &quot;infrastructure-consumer&quot; and have read-only rights to S3 buckets in &quot;infrastructure-owner&quot;. However, from time to time, new data may be included manually in these S3 buckets via sign-in &quot;infrastructure-owner&quot;.</p>\n<p><strong>I would like to provision this infrastructure with Terraform. I am unable to provide permissions for &quot;infrastructure-consumer&quot; to access resources from &quot;infrastructure-owner&quot;.</strong> I've read dozens of blog posts on AWS multi-account / SSO / Terraform but I still cannot do it. At this point, I cannot even do it manually in the web console.</p>\n<p>Please realize that &quot;SomeAccessLevel&quot; is a <strong>role created by AWS that I cannot modify</strong> (typically called AWSReservedSSO_YOURNAMEHERE_RANDOMSTRING). Also, <strong>I cannot give permissions to particular users</strong>, since these users may not be owned by &quot;infrastructure-consumer&quot;. Also, users access this account via SSO using a role.</p>\n<p>The following Terraform code is an example DynamoDB table created in the &quot;infrastructure-owner&quot; that I would like to read in the &quot;infrastructure-consumer&quot; account (any role):</p>\n<pre><code># Terraform config\nterraform {\n  required_version = &quot;&gt;= 1.0.0&quot;\n\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 3.44&quot;\n    }\n  }\n\n  backend &quot;remote&quot; {\n    hostname = &quot;app.terraform.io&quot;\n    organization = &quot;YOUR_ORGANIZATION_HERE&quot;\n\n    workspaces {\n      name = &quot;YOUR_TF_WORKSPACE_NAME_HERE&quot;  # linked to &quot;infrastructure-owner&quot; \n    }\n  }\n}\n\n# Local provider\nprovider &quot;aws&quot; {\n  profile = &quot;YOUR_AWS_PROFILE_NAME_HERE&quot;  # linked to &quot;infrastructure-owner&quot; \n  region = &quot;eu-central-1&quot;\n}\n\n# Example resource that I would like to access from other accounts like &quot;infrastructure-consumer&quot;\nresource &quot;aws_dynamodb_table&quot; &quot;my-database&quot; {\n\n  # Basic\n  name           = &quot;my-database&quot;\n  billing_mode   = &quot;PAY_PER_REQUEST&quot;\n  hash_key       = &quot;uuid&quot;\n\n  # Key\n  attribute {\n    name = &quot;uuid&quot;\n    type = &quot;S&quot;\n  }\n}\n\n# YOUR CODE TO ALLOW &quot;infrastructure-consumer&quot; TO READ THE TABLE.\n</code></pre>\n<p>It could also happen that there is a better architecture for this use case. I am trying to follow general practices for AWS multi-account for production environments, and Terraform for provisioning them.</p>\n<p>Thank you!</p>\n", "OwnerUserId": "3848982", "LastActivityDate": "2022-02-07T11:09:34.410", "Title": "How to share AWS infrastructure among multiple accounts using Terraform and AWS SSO?", "Tags": "<amazon-web-services><terraform><amazon-iam>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "251428355", "PostHistoryTypeId": "2", "PostId": "68654494", "RevisionGUID": "cb545dfb-7eb4-451a-a060-75621d886441", "CreationDate": "2021-08-04T15:59:20.033", "UserId": "3848982", "Text": "I have the following multi-account setup with AWS SSO:\r\n- An account called \"infrastructure-owner\". Under this account, there is a role called \"SomeAccessLevel\" where I can click to sign-in the web console.\r\n- Another account called \"infrastructure-consumer\". Under this account there is the same role called \"SomeAccessLevel\" where I can click to sign-in the web console. There may be other roles.\r\n\r\nAccount \"infrastructure-owner\" owns resources (for example S3 buckets, DynamoDB tables, or VPNs) typically with read/write access. This account is somewhat protected and rarely used. Account \"infrastructure-consumer\" merely have read access to resources in \"infrastructure-owner\". This account is used often by multiple people/services. For example, production data pipelines run in \"infrastructure-consumer\" and have read-only rights to S3 buckets in \"infrastructure-owner\". However, from time to time, new data may be included manually in these S3 buckets via sign-in \"infrastructure-owner\". \r\n\r\n**I would like to provision this infrastructure with Terraform. I am unable to provide permissions for \"infrastructure-consumer\" to access resources from \"infrastructure-owner\".** I've read dozens of blog posts on AWS multi-account / SSO / Terraform but I still cannot do it. At this point, I cannot even do it manually in the web console.\r\n\r\nPlease realize that \"SomeAccessLevel\" is a **role created by AWS that I cannot modify** (typically called AWSReservedSSO_YOURNAMEHERE_RANDOMSTRING). Also, **I cannot give permissions to particular users**, since these users may not be owned by \"infrastructure-consumer\". Also, users access this account via SSO using a role.\r\n\r\nThe following Terraform code is an example DynamoDB table created in the \"infrastructure-owner\" that I would like to read in the \"infrastructure-consumer\" account (any role):\r\n\r\n```\r\n# Terraform config\r\nterraform {\r\n  required_version = \">= 1.0.0\"\r\n\r\n  required_providers {\r\n    aws = {\r\n      source  = \"hashicorp/aws\"\r\n      version = \"~> 3.44\"\r\n    }\r\n  }\r\n\r\n  backend \"remote\" {\r\n    hostname = \"app.terraform.io\"\r\n    organization = \"YOUR_ORGANIZATION_HERE\"\r\n\r\n    workspaces {\r\n      name = \"YOUR_TF_WORKSPACE_NAME_HERE\"  # linked to \"infrastructure-owner\" \r\n    }\r\n  }\r\n}\r\n\r\n# Local provider\r\nprovider \"aws\" {\r\n  profile = \"YOUR_AWS_PROFILE_NAME_HERE\"  # linked to \"infrastructure-owner\" \r\n  region = \"eu-central-1\"\r\n}\r\n\r\n# Example resource that I would like to access from other accounts like \"infrastructure-consumer\"\r\nresource \"aws_dynamodb_table\" \"my-database\" {\r\n\r\n  # Basic\r\n  name           = \"my-database\"\r\n  billing_mode   = \"PAY_PER_REQUEST\"\r\n  hash_key       = \"uuid\"\r\n\r\n  # Key\r\n  attribute {\r\n    name = \"uuid\"\r\n    type = \"S\"\r\n  }\r\n}\r\n\r\n# YOUR CODE TO ALLOW \"infrastructure-consumer\" TO READ THE TABLE.\r\n```\r\n\r\nIt could also happen that there is a better architecture for this use case. I am trying to follow general practices for AWS multi-account for production environments, and Terraform for provisioning them.\r\n\r\nThank you!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The following Terraform code is an example DynamoDB table created in the \"infrastructure-owner\" that I would like to read in the \"infrastructure-consumer\" account (any role): ``` # Terraform config terraform { required_version = \">= 1.0.0\" required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 3.44\" } } backend \"remote\" { hostname = \"app.terraform.io\" organization = \"YOUR_ORGANIZATION_HERE\" workspaces { name = \"YOUR_TF_WORKSPACE_NAME_HERE\" # linked to \"infrastructure-owner\" } } } # Local provider provider \"aws\" { profile = \"YOUR_AWS_PROFILE_NAME_HERE\" # linked to \"infrastructure-owner\" region = \"eu-central-1\" } # Example resource that I would like to access from other accounts like \"infrastructure-consumer\" resource \"aws_dynamodb_table\" \"my-database\" { # Basic name = \"my-database\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"uuid\" # Key attribute { name = \"uuid\" type = \"S\" } } # YOUR CODE TO ALLOW \"infrastructure-consumer\" TO READ THE TABLE. ", "keywords": ["bill", "provider"]}]}, {"Id": "251428356", "PostHistoryTypeId": "1", "PostId": "68654494", "RevisionGUID": "cb545dfb-7eb4-451a-a060-75621d886441", "CreationDate": "2021-08-04T15:59:20.033", "UserId": "3848982", "Text": "How to share AWS infrastructure among multiple accounts using Terraform and AWS SSO?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "251428357", "PostHistoryTypeId": "3", "PostId": "68654494", "RevisionGUID": "cb545dfb-7eb4-451a-a060-75621d886441", "CreationDate": "2021-08-04T15:59:20.033", "UserId": "3848982", "Text": "<amazon-web-services><terraform><amazon-iam>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "71017551", "PostTypeId": "2", "ParentId": "68654494", "CreationDate": "2022-02-07T11:09:34.410", "Score": "0", "Body": "<p>I assume you mean AWS accounts and not IAM accounts (users).</p>\n<p>I remember that roles to be assumed via AWS SSO had something called permission sets, which is no more than a policy with API actions allowed|denied to be performed while assuming a role. I don't know exactly how AWS SSO could influence how role trust works in AWS, but you could have a role in <strong>infrastructure-owner's account</strong> that trusts anything in <strong>infrastructure-consumer's account</strong>, i.e. trusting <code>&quot;arn:aws:iam::${var.infrastructure-consumer's account}:root&quot;</code></p>\n<p>To achieve that with Terraform you would run it in your management account (SSO Administrator's Account) and make that trust happen.</p>\n", "OwnerUserId": "14491866", "LastActivityDate": "2022-02-07T11:09:34.410", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "263586934", "PostHistoryTypeId": "2", "PostId": "71017551", "RevisionGUID": "cffe03b4-456e-4ad7-ad3a-938c91175354", "CreationDate": "2022-02-07T11:09:34.410", "UserId": "14491866", "Text": "I assume you mean AWS accounts and not IAM accounts (users). \r\n\r\nI remember that roles to be assumed via AWS SSO had something called permission sets, which is no more than a policy with API actions allowed|denied to be performed while assuming a role. I don't know exactly how AWS SSO could influence how role trust works in AWS, but you could have a role in **infrastructure-owner's account** that trusts anything in **infrastructure-consumer's account**, i.e. trusting `\"arn:aws:iam::${var.infrastructure-consumer's account}:root\"`\r\n\r\nTo achieve that with Terraform you would run it in your management account (SSO Administrator's Account) and make that trust happen.\r\n\r\n\r\n  [1]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs#assume-role", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I remember that roles to be assumed via AWS SSO had something called permission sets, which is no more than a policy with API actions allowed|denied to be performed while assuming a role. ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "I remember that roles to be assumed via AWS SSO had something called permission sets, which is no more than a policy with API actions allowed|denied to be performed while assuming a role. ", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": []}