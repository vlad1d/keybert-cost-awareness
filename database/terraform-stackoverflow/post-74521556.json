{"Id": "74521556", "PostTypeId": "1", "CreationDate": "2022-11-21T15:51:55.950", "Score": "0", "ViewCount": "172", "Body": "<p>I am building a lab utility to deploy my teams development environments (testing / stress etc).</p>\n<p>At present, the pipeline is as follows:</p>\n<ul>\n<li>Trigger pipeline via HTTP request, args contain the distribution, web server and web server version using ARGs that are passed too multi stage dockerfiles.</li>\n<li>Dockerx builds the container (if it doesn't exist in ECR)</li>\n<li>Pipeline job pushes that container to ECR (if it doesn't already exist).</li>\n<li>Terraform deploys the container using Fargate, sets up VPCs and a ALB to handle ingress externally.</li>\n<li>FQDN / TLS is then provisioned on ...com</li>\n</ul>\n<p>Previously when I've made tools like this that create environments, environments were managed and deleted solely at project level, given each environment had it's own project, given this is best practice for isolation and billing tracking purposes, however given the organisation security constraints of my company, I am limited to only 1 project wherein I can create all the resources.</p>\n<p>This means I have to find a way to manage/deploy 30 (the max) environments in one project without it being a bit of a clustered duck.</p>\n<p>More or less, I am looking for a way that allows me to keep track, and tear down environments (autonomously) and their associated resources relevant to a certain identifier, most likely these environments can be separated by resource tags/groups.</p>\n<p>It appears the CDKTF/Pulumi looks like a neat way of achieving some form of &quot;high-level&quot; structure, but I am struggling to find ways to use them to do what I want. If anyone can recommend an approach, it'd be appreciated.</p>\n<p>I have not tried anything yet, mainly because this is something that requires planning before I start work on it (don't like reaching deadends ha).</p>\n", "OwnerUserId": "7752506", "LastActivityDate": "2023-04-14T07:26:53.707", "Title": "How to manage multiple Environments within one project (GCP/AWS)", "Tags": "<google-cloud-platform><terraform><pulumi><terraform-cdk>", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131554481", "PostId": "74521556", "Score": "1", "Text": "Your question is too broad for Stack Overflow. Limit your post to one well-defined problem per post. https://stackoverflow.com/help/how-to-ask", "CreationDate": "2022-11-21T21:26:16.130", "UserId": "8016720", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131565395", "PostId": "74521556", "Score": "0", "Text": "I would recommend starting a conversation in the terraform-cdk channel in the https://cdk.dev/ slack or in HashiCorps Discuss forum: https://discuss.hashicorp.com/c/terraform-core/cdk-for-terraform/47", "CreationDate": "2022-11-22T11:03:56.707", "UserId": "1559386", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "282695091", "PostHistoryTypeId": "2", "PostId": "74521556", "RevisionGUID": "7209847f-d229-4a7a-af42-ed906a6acea2", "CreationDate": "2022-11-21T15:51:55.950", "UserId": "7752506", "Text": "I am building a lab utility to deploy my teams development environments (testing / stress etc).\r\n\r\nAt present, the pipeline is as follows:\r\n- Trigger pipeline via HTTP request, args contain the distribution, web server and web server version using ARGs that are passed too multi stage dockerfiles.\r\n- Dockerx builds the container (if it doesn't exist in ECR)\r\n- Pipeline job pushes that container to ECR (if it doesn't already exist).\r\n- Terraform deploys the container using Fargate, sets up VPCs and a ALB to handle ingress externally. \r\n- FQDN / TLS is then provisioned on <env-name>.<me>.<example>.com\r\n\r\nPreviously when I've made tools like this that create environments, environments were managed and deleted solely at project level, given each environment had it's own project, given this is best practice for isolation and billing tracking purposes, however given the organisation security constraints of my company, I am limited to only 1 project wherein I can create all the resources. \r\n\r\nThis means I have to find a way to manage/deploy 30 (the max) environments in one project without it being a bit of a clustered duck.\r\n\r\nMore or less, I am looking for a way that allows me to keep track, and tear down environments (autonomously) and their associated resources relevant to a certain identifier, most likely these environments can be separated by resource tags/groups.\r\n\r\nIt appears the CDKTF/Pulumi looks like a neat way of achieving some form of \"high-level\" structure, but I am struggling to find ways to use them to do what I want. If anyone can recommend an approach, it'd be appreciated.\r\n\r\nI have not tried anything yet, mainly because this is something that requires planning before I start work on it (don't like reaching deadends ha).", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am building a lab utility to deploy my teams development environments (testing / stress etc). ", "keywords": ["test"]}, {"source": "Text", "text": "Previously when I've made tools like this that create environments, environments were managed and deleted solely at project level, given each environment had it's own project, given this is best practice for isolation and billing tracking purposes, however given the organisation security constraints of my company, I am limited to only 1 project wherein I can create all the resources. ", "keywords": ["bill"]}]}, {"Id": "282695093", "PostHistoryTypeId": "1", "PostId": "74521556", "RevisionGUID": "7209847f-d229-4a7a-af42-ed906a6acea2", "CreationDate": "2022-11-21T15:51:55.950", "UserId": "7752506", "Text": "How to manage multiple Environments within one project (GCP/AWS)", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "282695094", "PostHistoryTypeId": "3", "PostId": "74521556", "RevisionGUID": "7209847f-d229-4a7a-af42-ed906a6acea2", "CreationDate": "2022-11-21T15:51:55.950", "UserId": "7752506", "Text": "<google-cloud-platform><terraform><pulumi><terraform-cdk>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "282695095", "PostHistoryTypeId": "66", "PostId": "74521556", "RevisionGUID": "7209847f-d229-4a7a-af42-ed906a6acea2", "CreationDate": "2022-11-21T15:51:55.950", "UserId": "7752506", "filtered-sentences": []}], "answers": [{"Id": "76012562", "PostTypeId": "2", "ParentId": "74521556", "CreationDate": "2023-04-14T07:26:53.707", "Score": "0", "Body": "<p>In CDKTF you have the concept of <a href=\"https://developer.hashicorp.com/terraform/cdktf/concepts/stacks\" rel=\"nofollow noreferrer\">Stacks</a> which are similar to a Terraform root module / Terraform Cloud workspace. You can create a <code>TerraformStack</code> instance for each of these environments and a specific <code>TerraformStack</code> class for each type of environment you need. They can inherit from another so you can compose new environments quite easily. You can see examples of multiple stacks being used in the <a href=\"https://github.com/cdktf/cdktf-integration-serverless-example/blob/main/main.ts#L19\" rel=\"nofollow noreferrer\">e2e examples</a>.\nCDKTF CLI lets you deploy / destroy multiple stacks at once based on their name, e.g. <code>cdktf deploy '*-development'</code>.</p>\n", "OwnerUserId": "1559386", "LastActivityDate": "2023-04-14T07:26:53.707", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "291352407", "PostHistoryTypeId": "2", "PostId": "76012562", "RevisionGUID": "299f60e5-65a1-43f9-bc38-5b78899e7a81", "CreationDate": "2023-04-14T07:26:53.707", "UserId": "1559386", "Text": "In CDKTF you have the concept of [Stacks][1] which are similar to a Terraform root module / Terraform Cloud workspace. You can create a `TerraformStack` instance for each of these environments and a specific `TerraformStack` class for each type of environment you need. They can inherit from another so you can compose new environments quite easily. You can see examples of multiple stacks being used in the [e2e examples][2].\r\nCDKTF CLI lets you deploy / destroy multiple stacks at once based on their name, e.g. `cdktf deploy '*-development'`.\r\n\r\n\r\n\r\n  [1]: https://developer.hashicorp.com/terraform/cdktf/concepts/stacks\r\n  [2]: https://github.com/cdktf/cdktf-integration-serverless-example/blob/main/main.ts#L19", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can create a `TerraformStack` instance for each of these environments and a specific `TerraformStack` class for each type of environment you need. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can create a TerraformStack instance for each of these environments and a specific TerraformStack class for each type of environment you need. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I am building a lab utility to deploy my teams development environments (testing / stress etc). ", "keywords": ["test"]}, {"source": "Body", "text": "Previously when I've made tools like this that create environments, environments were managed and deleted solely at project level, given each environment had it's own project, given this is best practice for isolation and billing tracking purposes, however given the organisation security constraints of my company, I am limited to only 1 project wherein I can create all the resources. ", "keywords": ["bill"]}]}