{"Id": "73878612", "PostTypeId": "1", "CreationDate": "2022-09-28T08:48:03.640", "Score": "2", "ViewCount": "312", "Body": "<p>I have two modules and one root module that pretty much use the same &quot;blueprint&quot; of a variable, namely to instantiate projects within my infrastructure. As I'm in a test and learn process, I have to go back to all the occurences of <code>variables.tf</code> where they are declared. Therefore, I must change everything every time I want to add an attribute or remove it from the modules. It's a pain and waste of time.</p>\n<ul>\n<li>Either within module defined inputs</li>\n<li>Or within root-module variables</li>\n</ul>\n<p>How I wish to use this variable :</p>\n<p>Global <strong>blueprint</strong> declaration (sort of how you would declare a class in python or java)</p>\n<pre><code>&quot;blueprint&quot; project&quot; {\n  type = object({\n    name                = string\n    id_suffix           = string\n    auto_create_network = bool\n    apis_to_enable      = list(string)\n    attached_principals_info = object({\n      service_account_principals = map(object({\n        name          = string\n        description   = string\n        disabled      = bool\n        roles         = list(string)\n        impersonators = list(string)\n      }))\n      user_principals = map(object({\n        email       = string\n        description = string\n        full_name   = string\n        roles       = list(string)\n      }))\n    })\n  })\n}\n\n&quot;blueprint&quot; &quot;projects&quot; {\n  type = map(project)\n}\n</code></pre>\n<p>Usage within the <strong>module input <code>.tfs</code></strong>:</p>\n<pre><code>variable &quot;project&quot; {\n  type = blueprint.project\n}\n\nvariable &quot;projects&quot; {\n  type = blueprint.projects\n}\n</code></pre>\n<p>How I currently use it:</p>\n<p>The <code>variable project</code> and <code>variable projects</code> are explicitely detailed within each <code>.tf</code> of each module, similarly to what I declared above...</p>\n<p>Side note : I've been following the credo <code>write as little code as possible, be as lazy-efficient as possible</code> within all my coding\nendeavors, it's quite hard to do it in Terraform.</p>\n", "OwnerUserId": "4375983", "LastEditorUserId": "4375983", "LastEditDate": "2022-09-28T08:55:16.680", "LastActivityDate": "2022-09-28T08:55:16.680", "Title": "Terraform : How to avoid code duplication of variables?", "Tags": "<terraform>", "AnswerCount": "0", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "130451415", "PostId": "73878612", "Score": "0", "Text": "TF does not support such a functionality. You have to either accept how TF works, or look for better IaC tool then TF.", "CreationDate": "2022-09-28T09:43:13.137", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130451638", "PostId": "73878612", "Score": "1", "Text": "It's opensource. I'm investigating ways to add this feature x)", "CreationDate": "2022-09-28T09:53:17.137", "UserId": "4375983", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm investigating ways to add this feature x)", "keywords": ["feature"]}]}, {"Id": "130451676", "PostId": "73878612", "Score": "1", "Text": "In fact, there is a very well received **issue** on github about this : https://github.com/hashicorp/terraform/issues/27365", "CreationDate": "2022-09-28T09:54:40.840", "UserId": "4375983", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130453350", "PostId": "73878612", "Score": "0", "Text": "\"The variable project and variable projects are explicitely detailed within each .tf of each module\" This is likely the root cause here. You should only need to declare it in one module.", "CreationDate": "2022-09-28T11:16:44.040", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130458237", "PostId": "73878612", "Score": "0", "Text": "How else would you say \"I require this variable for this module\"? N.B Root module uses module 1, module 1 uses module 2 (as a submodule)", "CreationDate": "2022-09-28T14:39:35.950", "UserId": "4375983", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "279080829", "PostHistoryTypeId": "2", "PostId": "73878612", "RevisionGUID": "66eb86dc-e4be-4351-8b04-e1cd7344f94f", "CreationDate": "2022-09-28T08:48:03.640", "UserId": "4375983", "Text": "I have two modules and one root module that pretty much use the same \"blueprint\" of a variable, namely to instantiate projects within my infrastructure. As I'm in a test and learn process, I have to go back to all the occurences of `variables.tf` where they are declared. Therefore, I must change everything every time I want to add an attribute or remove it from the modules. It's a pain and waste of time.\r\n\r\n- Either within module defined inputs\r\n- Or within root-module variables\r\n\r\nHow I wish to use this variable :\r\n\r\nGlobal **blueprint** declaration (sort of how you would declare a class in python or java)\r\n\r\n```HCL\r\n\"blueprint\" project\" {\r\n  type = object({\r\n    name                = string\r\n    id_suffix           = string\r\n    auto_create_network = bool\r\n    apis_to_enable      = list(string)\r\n    attached_principals_info = object({\r\n      service_account_principals = map(object({\r\n        name          = string\r\n        description   = string\r\n        disabled      = bool\r\n        roles         = list(string)\r\n        impersonators = list(string)\r\n      }))\r\n      user_principals = map(object({\r\n        email       = string\r\n        description = string\r\n        full_name   = string\r\n        roles       = list(string)\r\n      }))\r\n    })\r\n  })\r\n}\r\n\r\n\"blueprint\" \"projects\" {\r\n  type = map(project)\r\n}\r\n```\r\n\r\nUsage within the **module input `.tfs`**:\r\n```HCL\r\nvariable \"project\" {\r\n  type = blueprint.project\r\n}\r\n\r\nvariable \"projects\" {\r\n  type = blueprint.projects\r\n}\r\n```\r\n\r\nHow I currently use it:\r\n\r\nThe `variable project` and `variable projects` are explicitely detailed within each `.tf` of each module, similarly to what I declared above... \r\n\r\nSide note : I've been following the credo `write as little code as possible, be as lazy-efficient as possible` within all my programming endeavors, it's quite hard to do it in Terraform.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As I'm in a test and learn process, I have to go back to all the occurences of `variables.tf` where they are declared. ", "keywords": ["test"]}, {"source": "Text", "text": "Therefore, I must change everything every time I want to add an attribute or remove it from the modules. ", "keywords": ["change"]}, {"source": "Text", "text": "Side note : I've been following the credo `write as little code as possible, be as lazy-efficient as possible` within all my programming endeavors, it's quite hard to do it in Terraform.", "keywords": ["efficient"]}]}, {"Id": "279080832", "PostHistoryTypeId": "1", "PostId": "73878612", "RevisionGUID": "66eb86dc-e4be-4351-8b04-e1cd7344f94f", "CreationDate": "2022-09-28T08:48:03.640", "UserId": "4375983", "Text": "Terraform : How to avoid code duplication of variables?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "279080833", "PostHistoryTypeId": "3", "PostId": "73878612", "RevisionGUID": "66eb86dc-e4be-4351-8b04-e1cd7344f94f", "CreationDate": "2022-09-28T08:48:03.640", "UserId": "4375983", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "279081405", "PostHistoryTypeId": "5", "PostId": "73878612", "RevisionGUID": "66abfee3-4f71-4737-bcb8-8664a713fdb7", "CreationDate": "2022-09-28T08:55:16.680", "UserId": "4375983", "Comment": "deleted 3 characters in body", "Text": "I have two modules and one root module that pretty much use the same \"blueprint\" of a variable, namely to instantiate projects within my infrastructure. As I'm in a test and learn process, I have to go back to all the occurences of `variables.tf` where they are declared. Therefore, I must change everything every time I want to add an attribute or remove it from the modules. It's a pain and waste of time.\r\n\r\n- Either within module defined inputs\r\n- Or within root-module variables\r\n\r\nHow I wish to use this variable :\r\n\r\nGlobal **blueprint** declaration (sort of how you would declare a class in python or java)\r\n\r\n```HCL\r\n\"blueprint\" project\" {\r\n  type = object({\r\n    name                = string\r\n    id_suffix           = string\r\n    auto_create_network = bool\r\n    apis_to_enable      = list(string)\r\n    attached_principals_info = object({\r\n      service_account_principals = map(object({\r\n        name          = string\r\n        description   = string\r\n        disabled      = bool\r\n        roles         = list(string)\r\n        impersonators = list(string)\r\n      }))\r\n      user_principals = map(object({\r\n        email       = string\r\n        description = string\r\n        full_name   = string\r\n        roles       = list(string)\r\n      }))\r\n    })\r\n  })\r\n}\r\n\r\n\"blueprint\" \"projects\" {\r\n  type = map(project)\r\n}\r\n```\r\n\r\nUsage within the **module input `.tfs`**:\r\n```HCL\r\nvariable \"project\" {\r\n  type = blueprint.project\r\n}\r\n\r\nvariable \"projects\" {\r\n  type = blueprint.projects\r\n}\r\n```\r\n\r\nHow I currently use it:\r\n\r\nThe `variable project` and `variable projects` are explicitely detailed within each `.tf` of each module, similarly to what I declared above... \r\n\r\nSide note : I've been following the credo `write as little code as possible, be as lazy-efficient as possible` within all my coding \r\nendeavors, it's quite hard to do it in Terraform.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As I'm in a test and learn process, I have to go back to all the occurences of `variables.tf` where they are declared. ", "keywords": ["test"]}, {"source": "Text", "text": "Therefore, I must change everything every time I want to add an attribute or remove it from the modules. ", "keywords": ["change"]}, {"source": "Text", "text": "Side note : I've been following the credo `write as little code as possible, be as lazy-efficient as possible` within all my coding endeavors, it's quite hard to do it in Terraform.", "keywords": ["efficient"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "As I'm in a test and learn process, I have to go back to all the occurences of variables.tf where they are declared. ", "keywords": ["test"]}, {"source": "Body", "text": "Therefore, I must change everything every time I want to add an attribute or remove it from the modules. ", "keywords": ["change"]}, {"source": "Body", "text": "Side note : I've been following the credo write as little code as possible, be as lazy-efficient as possible within all my coding endeavors, it's quite hard to do it in Terraform.", "keywords": ["efficient"]}]}