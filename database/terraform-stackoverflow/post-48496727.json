{"Id": "48496727", "PostTypeId": "1", "CreationDate": "2018-01-29T07:57:07.117", "Score": "0", "ViewCount": "1437", "Body": "<p>I'm having a problem with my terraform configuration for AWS, i hope someone can help me out.</p>\n\n<p>I have a production variable that i utilize to create an RDS cluster:</p>\n\n<pre><code>resource \"aws_rds_cluster\" \"cluster\" {\n  count = \"${var.production ? 1 : 0}\"\n  ...\n}\n</code></pre>\n\n<p>So obviously, the resource is ctreated if <em>production = true</em>. In another resource i want to reference the endpoint attribute of this cluster, if production was set to true. If not, i want to use another variable:</p>\n\n<pre><code>module \"ecs\" {\n  aws_ecs_taskdefinition-environmentVariable-list = &lt;&lt;EOF\n[\n  { \"name\" : \"SomeName\", \"value\" : \"${var.production ? aws_rds_cluster.cluster.endpoint : var.ENV_DATABASE_HOST}:3306\" },\n]\nEOF\n}\n</code></pre>\n\n<p>The issue i'm having, is that when production is false, it is as if terraform tries to resolve the '<em>aws_rds_cluster.cluster.endpoint</em>', even though that is not the value supposed to be used. And that obviously fails, since in production that resource has count 0:</p>\n\n<blockquote>\n  <p>module.ecs.var.aws_ecs_taskdefinition-environmentVariable-list:\n  Resource 'aws_rds_cluster.cluster' not found for variable\n  'aws_rds_cluster.cluster.endpoint'</p>\n</blockquote>\n\n<p>I have the same kind of issue in the relation between a securityGroup and a securityGroupRule for that RDS cluster. Even though the count of the rule is set to 0, it seems like terraform tries to resolve the id of the group it references, which it obviously cant because the group also have a count of 0.</p>\n", "OwnerUserId": "2812462", "LastEditorUserId": "781754", "LastEditDate": "2018-12-16T16:37:34.210", "LastActivityDate": "2018-12-16T16:37:34.210", "Title": "Conditionally resolving a conditional resource's attribute fails", "Tags": "<terraform>", "AnswerCount": "1", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "83990389", "PostId": "48496727", "Score": "0", "Text": "What do you do when it's not production? Use an in memory database? Have you considered pushing the RDS cluster endpoint address into the `ecs` module and using a data source to fetch it from there? It would cause you an issue on the first plan if the RDS cluster hadn't yet been created but you could potentially separate the RDS cluster and the ECS stuff into separate parts for Terraform to work on.", "CreationDate": "2018-01-29T10:04:11.457", "UserId": "2291321", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Have you considered pushing the RDS cluster endpoint address into the `ecs` module and using a data source to fetch it from there? ", "keywords": ["cluster"]}, {"source": "Text", "text": "It would cause you an issue on the first plan if the RDS cluster hadn't yet been created but you could potentially separate the RDS cluster and the ECS stuff into separate parts for Terraform to work on.", "keywords": ["cluster"]}]}, {"Id": "83998586", "PostId": "48496727", "Score": "0", "Text": "@ydaetskcoR The thing is, they should not be considered as seperate parts from terraforms perspective. This cluster is only serving grafana - hence it's part of the grafana configuration. In memory database is not an option, grafana is running on ECS and if the task goes down so does the in memory database. Unless i make sure grafana always runs on the same ec2 with the inmemory, but that kinda defeats the purpose of using ecs. Also, that doesn't solve my initial problem, that i want to create \"internally dependent\" resources in some condition (i also have that problem in other configs)", "CreationDate": "2018-01-29T13:40:23.163", "UserId": "2812462", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "This cluster is only serving grafana - hence it's part of the grafana configuration. ", "keywords": ["cluster"]}]}, {"Id": "83998655", "PostId": "48496727", "Score": "0", "Text": "What do you do instead of a cluster in non prod then?", "CreationDate": "2018-01-29T13:41:54.967", "UserId": "2291321", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "What do you do instead of a cluster in non prod then?", "keywords": ["cluster"]}]}, {"Id": "83998791", "PostId": "48496727", "Score": "0", "Text": "@ydaetskcoR I have a \"common\" cluster that several other applications use as well. This is to minimize cost. That way, on DEV/TEST several applications use the same cluster, but in prod each application has its own cluster. This way, DB load on one application wont affect any other application. - So the terraform configuration for the dev/test clusters do not belong with the grafana terraform configuration, it has is its own separate configuration", "CreationDate": "2018-01-29T13:45:08.607", "UserId": "2812462", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "@ydaetskcoR I have a \"common\" cluster that several other applications use as well. ", "keywords": ["cluster"]}, {"source": "Text", "text": "This is to minimize cost. ", "keywords": ["cost"]}, {"source": "Text", "text": "That way, on DEV/TEST several applications use the same cluster, but in prod each application has its own cluster. ", "keywords": ["cluster", "test"]}, {"source": "Text", "text": "- So the terraform configuration for the dev/test clusters do not belong with the grafana terraform configuration, it has is its own separate configuration", "keywords": ["test"]}]}, {"Id": "83999357", "PostId": "48496727", "Score": "0", "Text": "@ydaetskcoR Sorry, i think i misread your first comment, i thought you suggested using an in memory database instead :) Regarding pushing the endpoint address into the ecs module and using the output, does that not just move the problem to the module?", "CreationDate": "2018-01-29T13:58:16.383", "UserId": "2812462", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "165667038", "PostHistoryTypeId": "2", "PostId": "48496727", "RevisionGUID": "67bcbe3a-a84c-40ae-a291-6bd6ad50f457", "CreationDate": "2018-01-29T07:57:07.117", "UserId": "2812462", "Text": "I'm having a problem with my terraform configuration for AWS, i hope someone can help me out.\r\n\r\nI have a production variable that i utilize to create an RDS cluster:\r\n\r\n    resource \"aws_rds_cluster\" \"cluster\" {\r\n      count = \"${var.production ? 1 : 0}\"\r\n      ...\r\n    }\r\n\r\nSo obviously, the resource is ctreated if *production = true*. In another resource i want to reference the endpoint attribute of this cluster, if production was set to true. If not, i want to use another variable:\r\n\r\n\r\n    module \"ecs\" {\r\n      aws_ecs_taskdefinition-environmentVariable-list = <<EOF\r\n    [\r\n      { \"name\" : \"SomeName\", \"value\" : \"${var.production ? aws_rds_cluster.cluster.endpoint : var.ENV_DATABASE_HOST}:3306\" },\r\n    ]\r\n    EOF\r\n    }\r\n\r\nThe issue i'm having, is that when production is false, it is as if terraform tries to resolve the '*aws_rds_cluster.cluster.endpoint*', even though that is not the value supposed to be used. And that obviously fails, since in production that resource has count 0:\r\n\r\n> module.ecs.var.aws_ecs_taskdefinition-environmentVariable-list:\r\n> Resource 'aws_rds_cluster.cluster' not found for variable\r\n> 'aws_rds_cluster.cluster.endpoint'\r\n\r\nI have the same kind of issue in the relation between a securityGroup and a securityGroupRule for that RDS cluster. Even though the count of the rule is set to 0, it seems like terraform tries to resolve the id of the group it references, which it obviously cant because the group also have a count of 0.\r\n\r\nAny help is appreciated!\r\n\r\nThanks in advance\r\n\r\nFrederik", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I have a production variable that i utilize to create an RDS cluster: resource \"aws_rds_cluster\" \"cluster\" { count = \"${var.production ? 1 : 0}\" ... } ", "keywords": ["cluster"]}, {"source": "Text", "text": "In another resource i want to reference the endpoint attribute of this cluster, if production was set to true. ", "keywords": ["cluster"]}, {"source": "Text", "text": "If not, i want to use another variable: module \"ecs\" { aws_ecs_taskdefinition-environmentVariable-list = < module.ecs.var.aws_ecs_taskdefinition-environmentVariable-list: > Resource 'aws_rds_cluster.cluster' not found for variable > 'aws_rds_cluster.cluster.endpoint' ", "keywords": ["cluster"]}, {"source": "Text", "text": "I have the same kind of issue in the relation between a securityGroup and a securityGroupRule for that RDS cluster. ", "keywords": ["cluster"]}]}, {"Id": "165667039", "PostHistoryTypeId": "1", "PostId": "48496727", "RevisionGUID": "67bcbe3a-a84c-40ae-a291-6bd6ad50f457", "CreationDate": "2018-01-29T07:57:07.117", "UserId": "2812462", "Text": "Conditionally resolving a conditional resource's attribute fails", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "165667040", "PostHistoryTypeId": "3", "PostId": "48496727", "RevisionGUID": "67bcbe3a-a84c-40ae-a291-6bd6ad50f457", "CreationDate": "2018-01-29T07:57:07.117", "UserId": "2812462", "Text": "<terraform><hashicorp>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "187933703", "PostHistoryTypeId": "6", "PostId": "48496727", "RevisionGUID": "d569ca17-de3a-4a41-b0ac-2a72ee084242", "CreationDate": "2018-12-16T16:37:34.210", "UserId": "781754", "Comment": "edited tags", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "187933710", "PostHistoryTypeId": "5", "PostId": "48496727", "RevisionGUID": "d569ca17-de3a-4a41-b0ac-2a72ee084242", "CreationDate": "2018-12-16T16:37:34.210", "UserId": "781754", "Comment": "edited tags", "Text": "I'm having a problem with my terraform configuration for AWS, i hope someone can help me out.\r\n\r\nI have a production variable that i utilize to create an RDS cluster:\r\n\r\n    resource \"aws_rds_cluster\" \"cluster\" {\r\n      count = \"${var.production ? 1 : 0}\"\r\n      ...\r\n    }\r\n\r\nSo obviously, the resource is ctreated if *production = true*. In another resource i want to reference the endpoint attribute of this cluster, if production was set to true. If not, i want to use another variable:\r\n\r\n\r\n    module \"ecs\" {\r\n      aws_ecs_taskdefinition-environmentVariable-list = <<EOF\r\n    [\r\n      { \"name\" : \"SomeName\", \"value\" : \"${var.production ? aws_rds_cluster.cluster.endpoint : var.ENV_DATABASE_HOST}:3306\" },\r\n    ]\r\n    EOF\r\n    }\r\n\r\nThe issue i'm having, is that when production is false, it is as if terraform tries to resolve the '*aws_rds_cluster.cluster.endpoint*', even though that is not the value supposed to be used. And that obviously fails, since in production that resource has count 0:\r\n\r\n> module.ecs.var.aws_ecs_taskdefinition-environmentVariable-list:\r\n> Resource 'aws_rds_cluster.cluster' not found for variable\r\n> 'aws_rds_cluster.cluster.endpoint'\r\n\r\nI have the same kind of issue in the relation between a securityGroup and a securityGroupRule for that RDS cluster. Even though the count of the rule is set to 0, it seems like terraform tries to resolve the id of the group it references, which it obviously cant because the group also have a count of 0.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have a production variable that i utilize to create an RDS cluster: resource \"aws_rds_cluster\" \"cluster\" { count = \"${var.production ? 1 : 0}\" ... } ", "keywords": ["cluster"]}, {"source": "Text", "text": "In another resource i want to reference the endpoint attribute of this cluster, if production was set to true. ", "keywords": ["cluster"]}, {"source": "Text", "text": "If not, i want to use another variable: module \"ecs\" { aws_ecs_taskdefinition-environmentVariable-list = < module.ecs.var.aws_ecs_taskdefinition-environmentVariable-list: > Resource 'aws_rds_cluster.cluster' not found for variable > 'aws_rds_cluster.cluster.endpoint' ", "keywords": ["cluster"]}, {"source": "Text", "text": "I have the same kind of issue in the relation between a securityGroup and a securityGroupRule for that RDS cluster. ", "keywords": ["cluster"]}]}], "answers": [{"Id": "51271339", "PostTypeId": "2", "ParentId": "48496727", "CreationDate": "2018-07-10T17:46:12.680", "Score": "0", "Body": "<p>I had the similar issue for which i used splat syntax. However I have to assign a variable (not list). Iam sure it works here as well.</p>\n\n<pre><code>resource \"aws_rds_cluster\" \"cluster\" {\n  count = \"${var.production ? 1 : 0}\"\n  ...\n}\n\nmodule \"ecs\" {\nxyz_endpoint = \"${join(\"\", aws_rds_cluster.cluster.endpoint)}\"\n.............\n}\n\nStatement #1:\nxyz_endpoint = \"${join(\"\", aws_rds_cluster.cluster.endpoint)}\"\nStatement #2:\nxyz_endpoint = ${var.production ? aws_rds_cluster.cluster.endpoint : \"\"}\n</code></pre>\n\n<p>Both above statements yield the same result however when the resource 'aws_rds_cluster.cluster' is not created statement #2 produces error. </p>\n\n<p>Why this is so?</p>\n\n<pre><code>Slats cause attributes to be accessed lazily\n</code></pre>\n\n<p>Please let me know if this doesnt work (after changing it for your scenario).</p>\n\n<p>Regards\nSudhakar</p>\n", "OwnerUserId": "8769067", "LastActivityDate": "2018-07-10T17:46:12.680", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "177360949", "PostHistoryTypeId": "2", "PostId": "51271339", "RevisionGUID": "96f3eb46-4622-4336-af97-d6df1df7427c", "CreationDate": "2018-07-10T17:46:12.680", "UserId": "8769067", "Text": "I had the similar issue for which i used splat syntax. However I have to assign a variable (not list). Iam sure it works here as well.\r\n\r\n    resource \"aws_rds_cluster\" \"cluster\" {\r\n      count = \"${var.production ? 1 : 0}\"\r\n      ...\r\n    }\r\n    \r\n    module \"ecs\" {\r\n    xyz_endpoint = \"${join(\"\", aws_rds_cluster.cluster.endpoint)}\"\r\n    .............\r\n    }\r\n    \r\n    Statement #1:\r\n    xyz_endpoint = \"${join(\"\", aws_rds_cluster.cluster.endpoint)}\"\r\n    Statement #2:\r\n    xyz_endpoint = ${var.production ? aws_rds_cluster.cluster.endpoint : \"\"}\r\n\r\nBoth above statements yield the same result however when the resource 'aws_rds_cluster.cluster' is not created statement #2 produces error. \r\n\r\nWhy this is so?\r\n\r\n    Slats cause attributes to be accessed lazily\r\n\r\nPlease let me know if this doesnt work (after changing it for your scenario).\r\n\r\nRegards\r\nSudhakar", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Iam sure it works here as well. resource \"aws_rds_cluster\" \"cluster\" { count = \"${var.production ? 1 : 0}\" ... } module \"ecs\" { xyz_endpoint = \"${join(\"\", aws_rds_cluster.cluster.endpoint)}\" ............. } Statement #1: xyz_endpoint = \"${join(\"\", aws_rds_cluster.cluster.endpoint)}\" Statement #2: xyz_endpoint = ${var.production ? aws_rds_cluster.cluster.endpoint : \"\"} Both above statements yield the same result however when the resource 'aws_rds_cluster.cluster' is not created statement #2 produces error", "keywords": ["cluster"]}, {"source": "Text", "text": "Please let me know if this doesnt work (after changing it for your scenario)", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "Both above statements yield the same result however when the resource 'aws_rds_cluster.cluster' is not created statement #2 produces error. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Please let me know if this doesnt work (after changing it for your scenario). ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have a production variable that i utilize to create an RDS cluster: ", "keywords": ["cluster"]}, {"source": "Body", "text": "In another resource i want to reference the endpoint attribute of this cluster, if production was set to true. ", "keywords": ["cluster"]}, {"source": "Body", "text": "If not, i want to use another variable: The issue i'm having, is that when production is false, it is as if terraform tries to resolve the 'aws_rds_cluster.cluster.endpoint', even though that is not the value supposed to be used. ", "keywords": ["cluster"]}, {"source": "Body", "text": "And that obviously fails, since in production that resource has count 0: module.ecs.var.aws_ecs_taskdefinition-environmentVariable-list: Resource 'aws_rds_cluster.cluster' not found for variable 'aws_rds_cluster.cluster.endpoint' ", "keywords": ["cluster"]}, {"source": "Body", "text": "I have the same kind of issue in the relation between a securityGroup and a securityGroupRule for that RDS cluster. ", "keywords": ["cluster"]}]}