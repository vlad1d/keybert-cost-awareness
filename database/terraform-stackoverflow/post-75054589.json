{"Id": "75054589", "PostTypeId": "1", "AcceptedAnswerId": "75056138", "CreationDate": "2023-01-09T08:13:06.460", "Score": "1", "ViewCount": "460", "Body": "<p>I'm trying to create a dynamic method to create multiple dynamodb tables with their own attributes. I tried for loops with dynamic blocks, list objects, etc but was not able to iterate attributes for each table. The goal is to have multiple tables with different attributes and global indexes for each table in one go. I have terraform.tfvars and main.tf with the following structure:</p>\n<p>Variable declaration:</p>\n<pre><code>variable &quot;dynamodb_table&quot; {\n  type = list(object({\n    table_name         = string\n    billing_mode       = string\n    read_capacity      = optional(number)\n    write_capacity     = optional(string)\n    hash_key           = string\n    ttl_attribute_name = string\n    ttl_enabled        = string\n    range_key          = optional(string)\n    attribute = object({\n      name = string\n      type = string\n    })\n  }))\n}\n\nvariable &quot;global_secondary_indexes&quot; {\n  description = &quot;Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.&quot;\n  type = list(object({\n    index_name               = string\n    index_projection_type    = string\n    index_range_key          = string\n    index_hash_key           = string\n    index_write_capacity     = optional(string)\n    index_read_capacity      = optional(string)\n    index_non_key_attributes = list(string)\n  }))\n\n  default = []\n}\n</code></pre>\n<pre><code>dynamodb_table = [\n      {\n        table_name   = &quot;devops-test-01&quot;,\n        billing_mode = &quot;PAY_PER_REQUEST&quot;,\n        hash_key           = &quot;UserId&quot;,\n        range_key          = &quot;GameTitle&quot;,\n        ttl_attribute_name = &quot;ttl_attribute_name&quot;,\n        ttl_enabled        = &quot;false&quot;\n        attribute = [\n          {\n            name = &quot;UserId&quot;\n            type = &quot;S&quot;\n          },\n          {\n            name = &quot;GameTitle&quot;\n            type = &quot;S&quot;\n          }\n        ]\n      },\n      {\n        table_name   = &quot;devops-test-02&quot;,\n        billing_mode = &quot;PAY_PER_REQUEST&quot;,\n        hash_key           = &quot;GameTitle&quot;,\n        ttl_attribute_name = &quot;ttl_attribute_name&quot;,\n        ttl_enabled        = &quot;false&quot;\n      }\n    ]\n\n    global_secondary_indexes = [\n      {\n        index_name               = &quot;TitleIndex&quot;\n        index_hash_key           = &quot;UserId&quot;\n        index_range_key          = &quot;GameTitle&quot;\n        index_projection_type    = &quot;INCLUDE&quot;\n        index_non_key_attributes = [&quot;Id&quot;]\n      }\n\n    ]\n\n    default_tags = {\n      &quot;Environment&quot; = &quot;Dev&quot;,\n      &quot;Owner&quot;       = &quot;xxx&quot;\n    }\n</code></pre>\n<pre><code>resource &quot;aws_dynamodb_table&quot; &quot;basic-dynamodb-table&quot; {\n      for_each       = { for key, value in var.dynamodb_table : key =&gt; value }\n      name           = each.value.table_name\n      billing_mode   = each.value.billing_mode\n      read_capacity  = each.value.read_capacity\n      write_capacity = each.value.write_capacity\n      hash_key       = each.value.hash_key\n      range_key      = each.value.range_key\n      ttl {\n        attribute_name = each.value.ttl_attribute_name\n        enabled        = each.value.ttl_enabled\n      }\n\n      dynamic &quot;attribute&quot; {\n\n        for_each = { for key, value in var.attributes : key =&gt; value }\n        content {\n          name = attribute.value.name\n          type = attribute.value.type\n        }\n      }\n\n      dynamic &quot;global_secondary_index&quot; {\n        for_each = var.global_secondary_indexes\n        content {\n          name               = global_secondary_index.value.index_name\n          hash_key           = global_secondary_index.value.index_hash_key\n          projection_type    = global_secondary_index.value.index_projection_type\n          range_key          = lookup(global_secondary_index.value, &quot;index_range_key&quot;, null)\n          read_capacity      = lookup(global_secondary_index.value, &quot;index_read_capacity&quot;, null)\n          write_capacity     = lookup(global_secondary_index.value, &quot;index_write_capacity&quot;, null)\n          non_key_attributes = lookup(global_secondary_index.value, &quot;index_non_key_attributes&quot;, null)\n        }\n      }\n\n\n      tags = merge(\n        var.default_tags,\n        {\n          Name = each.value.table_name\n      })\n\n    }\n</code></pre>\n<p>This code produces the following error:</p>\n<blockquote>\n<p>The given value is not suitable for var.dynamodb_table declared at variable.tf:6,1-26: element 0: attribute \u2502 &quot;attribute&quot;: object required</p>\n</blockquote>\n", "OwnerUserId": "4765370", "LastEditorUserId": "8343484", "LastEditDate": "2023-01-09T09:52:58.923", "LastActivityDate": "2023-01-17T13:12:15.550", "Title": "Terraform dynamic loop to create multiple dynamodb", "Tags": "<amazon-web-services><terraform><terraform-provider-aws>", "AnswerCount": "1", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132447858", "PostId": "75054589", "Score": "0", "Text": "Are there any errors? If so, please add them to the question.", "CreationDate": "2023-01-09T08:14:46.357", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "132449161", "PostId": "75054589", "Score": "0", "Text": "Can you also add the variable declaration, i.e., `variable.tf` file? It seems that the variable type defined in that file is wrong for staters.", "CreationDate": "2023-01-09T09:30:12.650", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "132450084", "PostId": "75054589", "Score": "0", "Text": "variable.tf `variable \"global_secondary_indexes\" {\n  description = \"Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\"\n  type = list(object({\n    index_name               = string\n    index_projection_type    = string\n    index_range_key          = string\n    index_hash_key           = string\n    index_write_capacity     = optional(string)\n    index_read_capacity      = optional(string)\n    index_non_key_attributes = list(string)\n  }))\n  default = []\n}`", "CreationDate": "2023-01-09T10:17:13.060", "UserId": "4765370", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "132450326", "PostId": "75054589", "Score": "0", "Text": "Please update the question with new code and error using properly formatted code blocks.", "CreationDate": "2023-01-09T10:30:29.770", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "285775121", "PostHistoryTypeId": "2", "PostId": "75054589", "RevisionGUID": "cea52aa6-c677-42be-9279-990c4b774a0a", "CreationDate": "2023-01-09T08:13:06.460", "UserId": "4765370", "Text": "I'm trying to create a dynamic method to create multiple dynamodb tables with their own attributes. I tried for loops with dynamic blocks, list objects, etc but was not able to iterate attributes for each table. The goal is to have multiple tables with different attributes and global indexes for each table in one go. I have terraform.tfvars and main.tf with the following structure:\r\n\r\n \r\n\r\n    \r\n\r\n<!-- begin snippet: js hide: false console: true babel: false -->\r\n\r\n<!-- language: lang-html -->\r\n\r\n    dynamodb_table = [\r\n      {\r\n        table_name   = \"devops-test-01\",\r\n        billing_mode = \"PAY_PER_REQUEST\",\r\n        hash_key           = \"UserId\",\r\n        range_key          = \"GameTitle\",\r\n        ttl_attribute_name = \"ttl_attribute_name\",\r\n        ttl_enabled        = \"false\"\r\n        attribute = [\r\n          {\r\n            name = \"UserId\"\r\n            type = \"S\"\r\n          },\r\n          {\r\n            name = \"GameTitle\"\r\n            type = \"S\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        table_name   = \"devops-test-02\",\r\n        billing_mode = \"PAY_PER_REQUEST\",\r\n        hash_key           = \"GameTitle\",\r\n        ttl_attribute_name = \"ttl_attribute_name\",\r\n        ttl_enabled        = \"false\"\r\n      }\r\n    ]\r\n\r\n    global_secondary_indexes = [\r\n      {\r\n        index_name               = \"TitleIndex\"\r\n        index_hash_key           = \"UserId\"\r\n        index_range_key          = \"GameTitle\"\r\n        index_projection_type    = \"INCLUDE\"\r\n        index_non_key_attributes = [\"Id\"]\r\n      }\r\n\r\n    ]\r\n\r\n    default_tags = {\r\n      \"Environment\" = \"Dev\",\r\n      \"Owner\"       = \"xxx\"\r\n    }\r\n\r\n<!-- end snippet -->\r\n\r\n<!-- begin snippet: js hide: false console: true babel: false -->\r\n\r\n<!-- language: lang-html -->\r\n\r\n    resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {\r\n      for_each       = { for key, value in var.dynamodb_table : key => value }\r\n      name           = each.value.table_name\r\n      billing_mode   = each.value.billing_mode\r\n      read_capacity  = each.value.read_capacity\r\n      write_capacity = each.value.write_capacity\r\n      hash_key       = each.value.hash_key\r\n      range_key      = each.value.range_key\r\n      ttl {\r\n        attribute_name = each.value.ttl_attribute_name\r\n        enabled        = each.value.ttl_enabled\r\n      }\r\n\r\n      dynamic \"attribute\" {\r\n\r\n        for_each = { for key, value in var.attributes : key => value }\r\n        content {\r\n          name = attribute.value.name\r\n          type = attribute.value.type\r\n        }\r\n      }\r\n\r\n      dynamic \"global_secondary_index\" {\r\n        for_each = var.global_secondary_indexes\r\n        content {\r\n          name               = global_secondary_index.value.index_name\r\n          hash_key           = global_secondary_index.value.index_hash_key\r\n          projection_type    = global_secondary_index.value.index_projection_type\r\n          range_key          = lookup(global_secondary_index.value, \"index_range_key\", null)\r\n          read_capacity      = lookup(global_secondary_index.value, \"index_read_capacity\", null)\r\n          write_capacity     = lookup(global_secondary_index.value, \"index_write_capacity\", null)\r\n          non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null)\r\n        }\r\n      }\r\n\r\n\r\n      tags = merge(\r\n        var.default_tags,\r\n        {\r\n          Name = each.value.table_name\r\n      })\r\n\r\n    }\r\n\r\n<!-- end snippet -->\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have terraform.tfvars and main.tf with the following structure: dynamodb_table = [ { table_name = \"devops-test-01\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"UserId\", range_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" attribute = [ { name = \"UserId\" type = \"S\" }, { name = \"GameTitle\" type = \"S\" } ] }, { table_name = \"devops-test-02\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" } ] global_secondary_indexes = [ { index_name = \"TitleIndex\" index_hash_key = \"UserId\" index_range_key = \"GameTitle\" index_projection_type = \"INCLUDE\" index_non_key_attributes = [\"Id\"] } ] default_tags = { \"Environment\" = \"Dev\", \"Owner\" = \"xxx\" } resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" { for_each = { for key, value in var.dynamodb_table : key => value } name = each.value.table_name billing_mode = each.value.billing_mode read_capacity = each.value.read_capacity write_capacity = each.value.write_capacity hash_key = each.value.hash_key range_key = each.value.range_key ttl { attribute_name = each.value.ttl_attribute_name enabled = each.value.ttl_enabled } dynamic \"attribute\" { for_each = { for key, value in var.attributes : key => value } content { name = attribute.value.name type = attribute.value.type } } dynamic \"global_secondary_index\" { for_each = var.global_secondary_indexes content { name = global_secondary_index.value.index_name hash_key = global_secondary_index.value.index_hash_key projection_type = global_secondary_index.value.index_projection_type range_key = lookup(global_secondary_index.value, \"index_range_key\", null) read_capacity = lookup(global_secondary_index.value, \"index_read_capacity\", null) write_capacity = lookup(global_secondary_index.value, \"index_write_capacity\", null) non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null) } } tags = merge( var.default_tags, { Name = each.value.table_name }) ", "keywords": ["bill", "test"]}]}, {"Id": "285775123", "PostHistoryTypeId": "1", "PostId": "75054589", "RevisionGUID": "cea52aa6-c677-42be-9279-990c4b774a0a", "CreationDate": "2023-01-09T08:13:06.460", "UserId": "4765370", "Text": "Terraform dynamic loop to create multiple dynamodb", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "285775124", "PostHistoryTypeId": "3", "PostId": "75054589", "RevisionGUID": "cea52aa6-c677-42be-9279-990c4b774a0a", "CreationDate": "2023-01-09T08:13:06.460", "UserId": "4765370", "Text": "<dynamic><terraform><nested-loops><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "285775304", "PostHistoryTypeId": "6", "PostId": "75054589", "RevisionGUID": "c98c8833-d76b-4633-8040-112951d4d343", "CreationDate": "2023-01-09T08:16:47.063", "UserId": "8343484", "Comment": "edited tags", "Text": "<amazon-web-services><terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "285778944", "PostHistoryTypeId": "5", "PostId": "75054589", "RevisionGUID": "30b7ac10-5c64-405e-ad34-cb3ba4d10680", "CreationDate": "2023-01-09T09:25:10.893", "UserId": "8343484", "Comment": "added 185 characters in body", "Text": "I'm trying to create a dynamic method to create multiple dynamodb tables with their own attributes. I tried for loops with dynamic blocks, list objects, etc but was not able to iterate attributes for each table. The goal is to have multiple tables with different attributes and global indexes for each table in one go. I have terraform.tfvars and main.tf with the following structure:\r\n\r\n \r\n\r\n    \r\n\r\n<!-- begin snippet: js hide: false console: true babel: false -->\r\n\r\n<!-- language: lang-html -->\r\n\r\n    dynamodb_table = [\r\n      {\r\n        table_name   = \"devops-test-01\",\r\n        billing_mode = \"PAY_PER_REQUEST\",\r\n        hash_key           = \"UserId\",\r\n        range_key          = \"GameTitle\",\r\n        ttl_attribute_name = \"ttl_attribute_name\",\r\n        ttl_enabled        = \"false\"\r\n        attribute = [\r\n          {\r\n            name = \"UserId\"\r\n            type = \"S\"\r\n          },\r\n          {\r\n            name = \"GameTitle\"\r\n            type = \"S\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        table_name   = \"devops-test-02\",\r\n        billing_mode = \"PAY_PER_REQUEST\",\r\n        hash_key           = \"GameTitle\",\r\n        ttl_attribute_name = \"ttl_attribute_name\",\r\n        ttl_enabled        = \"false\"\r\n      }\r\n    ]\r\n\r\n    global_secondary_indexes = [\r\n      {\r\n        index_name               = \"TitleIndex\"\r\n        index_hash_key           = \"UserId\"\r\n        index_range_key          = \"GameTitle\"\r\n        index_projection_type    = \"INCLUDE\"\r\n        index_non_key_attributes = [\"Id\"]\r\n      }\r\n\r\n    ]\r\n\r\n    default_tags = {\r\n      \"Environment\" = \"Dev\",\r\n      \"Owner\"       = \"xxx\"\r\n    }\r\n\r\n<!-- end snippet -->\r\n\r\n<!-- begin snippet: js hide: false console: true babel: false -->\r\n\r\n<!-- language: lang-html -->\r\n\r\n    resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {\r\n      for_each       = { for key, value in var.dynamodb_table : key => value }\r\n      name           = each.value.table_name\r\n      billing_mode   = each.value.billing_mode\r\n      read_capacity  = each.value.read_capacity\r\n      write_capacity = each.value.write_capacity\r\n      hash_key       = each.value.hash_key\r\n      range_key      = each.value.range_key\r\n      ttl {\r\n        attribute_name = each.value.ttl_attribute_name\r\n        enabled        = each.value.ttl_enabled\r\n      }\r\n\r\n      dynamic \"attribute\" {\r\n\r\n        for_each = { for key, value in var.attributes : key => value }\r\n        content {\r\n          name = attribute.value.name\r\n          type = attribute.value.type\r\n        }\r\n      }\r\n\r\n      dynamic \"global_secondary_index\" {\r\n        for_each = var.global_secondary_indexes\r\n        content {\r\n          name               = global_secondary_index.value.index_name\r\n          hash_key           = global_secondary_index.value.index_hash_key\r\n          projection_type    = global_secondary_index.value.index_projection_type\r\n          range_key          = lookup(global_secondary_index.value, \"index_range_key\", null)\r\n          read_capacity      = lookup(global_secondary_index.value, \"index_read_capacity\", null)\r\n          write_capacity     = lookup(global_secondary_index.value, \"index_write_capacity\", null)\r\n          non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null)\r\n        }\r\n      }\r\n\r\n\r\n      tags = merge(\r\n        var.default_tags,\r\n        {\r\n          Name = each.value.table_name\r\n      })\r\n\r\n    }\r\n\r\n<!-- end snippet -->\r\n\r\nThis code produces the following error:\r\n\r\n> The given value is not suitable for var.dynamodb_table declared at variable.tf:6,1-26: element 0: attribute \u2502 \"attribute\": object required\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have terraform.tfvars and main.tf with the following structure: dynamodb_table = [ { table_name = \"devops-test-01\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"UserId\", range_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" attribute = [ { name = \"UserId\" type = \"S\" }, { name = \"GameTitle\" type = \"S\" } ] }, { table_name = \"devops-test-02\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" } ] global_secondary_indexes = [ { index_name = \"TitleIndex\" index_hash_key = \"UserId\" index_range_key = \"GameTitle\" index_projection_type = \"INCLUDE\" index_non_key_attributes = [\"Id\"] } ] default_tags = { \"Environment\" = \"Dev\", \"Owner\" = \"xxx\" } resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" { for_each = { for key, value in var.dynamodb_table : key => value } name = each.value.table_name billing_mode = each.value.billing_mode read_capacity = each.value.read_capacity write_capacity = each.value.write_capacity hash_key = each.value.hash_key range_key = each.value.range_key ttl { attribute_name = each.value.ttl_attribute_name enabled = each.value.ttl_enabled } dynamic \"attribute\" { for_each = { for key, value in var.attributes : key => value } content { name = attribute.value.name type = attribute.value.type } } dynamic \"global_secondary_index\" { for_each = var.global_secondary_indexes content { name = global_secondary_index.value.index_name hash_key = global_secondary_index.value.index_hash_key projection_type = global_secondary_index.value.index_projection_type range_key = lookup(global_secondary_index.value, \"index_range_key\", null) read_capacity = lookup(global_secondary_index.value, \"index_read_capacity\", null) write_capacity = lookup(global_secondary_index.value, \"index_write_capacity\", null) non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null) } } tags = merge( var.default_tags, { Name = each.value.table_name }) } This code produces the following error: > The given value is not suitable for var.dynamodb_table declared at variable.tf:6,1-26: element 0: attribute \u2502 \"attribute\": object required", "keywords": ["bill", "test"]}]}, {"Id": "285780554", "PostHistoryTypeId": "5", "PostId": "75054589", "RevisionGUID": "224ea9aa-b596-4cdc-b7fc-3de935aea6f5", "CreationDate": "2023-01-09T09:52:58.923", "UserId": "8343484", "Comment": "added 748 characters in body", "Text": "I'm trying to create a dynamic method to create multiple dynamodb tables with their own attributes. I tried for loops with dynamic blocks, list objects, etc but was not able to iterate attributes for each table. The goal is to have multiple tables with different attributes and global indexes for each table in one go. I have terraform.tfvars and main.tf with the following structure:\r\n\r\nVariable declaration:\r\n\r\n```hcl\r\nvariable \"dynamodb_table\" {\r\n  type = list(object({\r\n    table_name         = string\r\n    billing_mode       = string\r\n    read_capacity      = optional(number)\r\n    write_capacity     = optional(string)\r\n    hash_key           = string\r\n    ttl_attribute_name = string\r\n    ttl_enabled        = string\r\n    range_key          = optional(string)\r\n    attribute = object({\r\n      name = string\r\n      type = string\r\n    })\r\n  }))\r\n}\r\n\r\nvariable \"global_secondary_indexes\" {\r\n  description = \"Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\"\r\n  type = list(object({\r\n    index_name               = string\r\n    index_projection_type    = string\r\n    index_range_key          = string\r\n    index_hash_key           = string\r\n    index_write_capacity     = optional(string)\r\n    index_read_capacity      = optional(string)\r\n    index_non_key_attributes = list(string)\r\n  }))\r\n\r\n  default = []\r\n}\r\n```\r\n\r\n```hcl\r\ndynamodb_table = [\r\n      {\r\n        table_name   = \"devops-test-01\",\r\n        billing_mode = \"PAY_PER_REQUEST\",\r\n        hash_key           = \"UserId\",\r\n        range_key          = \"GameTitle\",\r\n        ttl_attribute_name = \"ttl_attribute_name\",\r\n        ttl_enabled        = \"false\"\r\n        attribute = [\r\n          {\r\n            name = \"UserId\"\r\n            type = \"S\"\r\n          },\r\n          {\r\n            name = \"GameTitle\"\r\n            type = \"S\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        table_name   = \"devops-test-02\",\r\n        billing_mode = \"PAY_PER_REQUEST\",\r\n        hash_key           = \"GameTitle\",\r\n        ttl_attribute_name = \"ttl_attribute_name\",\r\n        ttl_enabled        = \"false\"\r\n      }\r\n    ]\r\n\r\n    global_secondary_indexes = [\r\n      {\r\n        index_name               = \"TitleIndex\"\r\n        index_hash_key           = \"UserId\"\r\n        index_range_key          = \"GameTitle\"\r\n        index_projection_type    = \"INCLUDE\"\r\n        index_non_key_attributes = [\"Id\"]\r\n      }\r\n\r\n    ]\r\n\r\n    default_tags = {\r\n      \"Environment\" = \"Dev\",\r\n      \"Owner\"       = \"xxx\"\r\n    }\r\n```\r\n\r\n```hcl\r\nresource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {\r\n      for_each       = { for key, value in var.dynamodb_table : key => value }\r\n      name           = each.value.table_name\r\n      billing_mode   = each.value.billing_mode\r\n      read_capacity  = each.value.read_capacity\r\n      write_capacity = each.value.write_capacity\r\n      hash_key       = each.value.hash_key\r\n      range_key      = each.value.range_key\r\n      ttl {\r\n        attribute_name = each.value.ttl_attribute_name\r\n        enabled        = each.value.ttl_enabled\r\n      }\r\n\r\n      dynamic \"attribute\" {\r\n\r\n        for_each = { for key, value in var.attributes : key => value }\r\n        content {\r\n          name = attribute.value.name\r\n          type = attribute.value.type\r\n        }\r\n      }\r\n\r\n      dynamic \"global_secondary_index\" {\r\n        for_each = var.global_secondary_indexes\r\n        content {\r\n          name               = global_secondary_index.value.index_name\r\n          hash_key           = global_secondary_index.value.index_hash_key\r\n          projection_type    = global_secondary_index.value.index_projection_type\r\n          range_key          = lookup(global_secondary_index.value, \"index_range_key\", null)\r\n          read_capacity      = lookup(global_secondary_index.value, \"index_read_capacity\", null)\r\n          write_capacity     = lookup(global_secondary_index.value, \"index_write_capacity\", null)\r\n          non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null)\r\n        }\r\n      }\r\n\r\n\r\n      tags = merge(\r\n        var.default_tags,\r\n        {\r\n          Name = each.value.table_name\r\n      })\r\n\r\n    }\r\n```\r\n\r\nThis code produces the following error:\r\n\r\n> The given value is not suitable for var.dynamodb_table declared at variable.tf:6,1-26: element 0: attribute \u2502 \"attribute\": object required\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have terraform.tfvars and main.tf with the following structure: Variable declaration: ```hcl variable \"dynamodb_table\" { type = list(object({ table_name = string billing_mode = string read_capacity = optional(number) write_capacity = optional(string) hash_key = string ttl_attribute_name = string ttl_enabled = string range_key = optional(string) attribute = object({ name = string type = string }) })) } variable \"global_secondary_indexes\" { description = \"Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\" type = list(object({ index_name = string index_projection_type = string index_range_key = string index_hash_key = string index_write_capacity = optional(string) index_read_capacity = optional(string) index_non_key_attributes = list(string) })) default = [] } ``` ```hcl dynamodb_table = [ { table_name = \"devops-test-01\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"UserId\", range_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" attribute = [ { name = \"UserId\" type = \"S\" }, { name = \"GameTitle\" type = \"S\" } ] }, { table_name = \"devops-test-02\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" } ] global_secondary_indexes = [ { index_name = \"TitleIndex\" index_hash_key = \"UserId\" index_range_key = \"GameTitle\" index_projection_type = \"INCLUDE\" index_non_key_attributes = [\"Id\"] } ] default_tags = { \"Environment\" = \"Dev\", \"Owner\" = \"xxx\" } ``` ```hcl resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" { for_each = { for key, value in var.dynamodb_table : key => value } name = each.value.table_name billing_mode = each.value.billing_mode read_capacity = each.value.read_capacity write_capacity = each.value.write_capacity hash_key = each.value.hash_key range_key = each.value.range_key ttl { attribute_name = each.value.ttl_attribute_name enabled = each.value.ttl_enabled } dynamic \"attribute\" { for_each = { for key, value in var.attributes : key => value } content { name = attribute.value.name type = attribute.value.type } } dynamic \"global_secondary_index\" { for_each = var.global_secondary_indexes content { name = global_secondary_index.value.index_name hash_key = global_secondary_index.value.index_hash_key projection_type = global_secondary_index.value.index_projection_type range_key = lookup(global_secondary_index.value, \"index_range_key\", null) read_capacity = lookup(global_secondary_index.value, \"index_read_capacity\", null) write_capacity = lookup(global_secondary_index.value, \"index_write_capacity\", null) non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null) } } tags = merge( var.default_tags, { Name = each.value.table_name }) } ``` ", "keywords": ["bill", "test"]}]}], "answers": [{"Id": "75056138", "PostTypeId": "2", "ParentId": "75054589", "CreationDate": "2023-01-09T10:45:19.423", "Score": "2", "Body": "<p>You did not share your <code>attributes</code> variable but I have used <code>attributes</code> in <code>dynamodb_table</code> variable.</p>\n<p>Your main problem is <code>attribute</code> property in <code>dynamodb_table</code> variable is requeired but you did not provide any value for it in <code>devops-test-02</code> table values.</p>\n<hr />\n<p><code>variables.tf</code></p>\n<pre><code>variable &quot;dynamodb_table&quot; {\n  type = list(object({\n    table_name   = string\n    billing_mode = string\n    // read_capacity      = optional(number)\n    //write_capacity     = optional(string)\n    hash_key           = string\n    ttl_attribute_name = string\n    ttl_enabled        = string\n    //range_key          = optional(string)\n    attribute = list(object({\n      name = string\n      type = string\n    }))\n  }))\n  default = [\n    {\n      table_name         = &quot;devops-test-01&quot;,\n      billing_mode       = &quot;PAY_PER_REQUEST&quot;,\n      hash_key           = &quot;UserId&quot;,\n      range_key          = &quot;GameTitle&quot;,\n      ttl_attribute_name = &quot;ttl_attribute_name&quot;,\n      ttl_enabled        = &quot;false&quot;\n      attribute = [\n        {\n          name = &quot;UserId&quot;\n          type = &quot;S&quot;\n        },\n        {\n          name = &quot;GameTitle&quot;\n          type = &quot;S&quot;\n        }\n      ]\n    },\n    {\n      table_name         = &quot;devops-test-02&quot;,\n      billing_mode       = &quot;PAY_PER_REQUEST&quot;,\n      hash_key           = &quot;GameTitle&quot;,\n      ttl_attribute_name = &quot;ttl_attribute_name&quot;,\n      ttl_enabled        = &quot;false&quot;\n      attribute = [\n        {\n          name = &quot;UserId&quot;\n          type = &quot;S&quot;\n        },\n        {\n          name = &quot;GameTitle&quot;\n          type = &quot;S&quot;\n        }\n      ]\n    }\n  ]\n}\n\nvariable &quot;global_secondary_indexes&quot; {\n  description = &quot;Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.&quot;\n  type = list(object({\n    index_name            = string\n    index_projection_type = string\n    index_range_key       = string\n    index_hash_key        = string\n    //index_write_capacity     = optional(string)\n    //index_read_capacity      = optional(string)\n    index_non_key_attributes = list(string)\n  }))\n\n  default = [\n    {\n      index_name               = &quot;TitleIndex&quot;\n      index_hash_key           = &quot;UserId&quot;\n      index_range_key          = &quot;GameTitle&quot;\n      index_projection_type    = &quot;INCLUDE&quot;\n      index_non_key_attributes = [&quot;Id&quot;]\n    }\n  ]\n}\n\nvariable &quot;default_tags&quot; {\n  default = {\n    &quot;Environment&quot; = &quot;Dev&quot;,\n    &quot;Owner&quot;       = &quot;xxx&quot;\n  }\n}\n</code></pre>\n<p><code>dynamodb.tf</code></p>\n<pre><code>resource &quot;aws_dynamodb_table&quot; &quot;basic-dynamodb-table&quot; {\n  for_each       = { for key, value in var.dynamodb_table : value.table_name =&gt; value }\n  name           = each.value.table_name\n  billing_mode   = each.value.billing_mode\n  read_capacity  = lookup(each.value, &quot;read_capacity&quot;, null)\n  write_capacity = lookup(each.value, &quot;write_capacity&quot;, null)\n  hash_key       = each.value.hash_key\n  range_key      = lookup(each.value, &quot;range_key&quot;, null)\n  ttl {\n    attribute_name = each.value.ttl_attribute_name\n    enabled        = each.value.ttl_enabled\n  }\n\n  dynamic &quot;attribute&quot; {\n    for_each = { for key, value in each.value.attribute : key =&gt; value }\n    content {\n      name = attribute.value.name\n      type = attribute.value.type\n    }\n  }\n\n  dynamic &quot;global_secondary_index&quot; {\n    for_each = var.global_secondary_indexes\n    content {\n      name               = global_secondary_index.value.index_name\n      hash_key           = global_secondary_index.value.index_hash_key\n      projection_type    = global_secondary_index.value.index_projection_type\n      range_key          = lookup(global_secondary_index.value, &quot;index_range_key&quot;, null)\n      read_capacity      = lookup(global_secondary_index.value, &quot;index_read_capacity&quot;, null)\n      write_capacity     = lookup(global_secondary_index.value, &quot;index_write_capacity&quot;, null)\n      non_key_attributes = lookup(global_secondary_index.value, &quot;index_non_key_attributes&quot;, null)\n    }\n  }\n\n\n  tags = merge(\n    var.default_tags,\n    {\n      Name = each.value.table_name\n  })\n}\n</code></pre>\n<hr />\n<p><strong>UPDATE 2023-01-17</strong>\nAdd Kinesis streaming destination resource to dynamodb tables.</p>\n<pre><code>resource &quot;aws_kinesis_stream&quot; &quot;example&quot; {\n  for_each = aws_dynamodb_table.basic-dynamodb-table\n\n  name        = &quot;${each.key}_table_stream&quot;\n  shard_count = 1\n}\n\nresource &quot;aws_dynamodb_kinesis_streaming_destination&quot; &quot;example&quot; {\n    for_each = aws_dynamodb_table.basic-dynamodb-table\n    \n    stream_arn = aws_kinesis_stream.example[each.key].arn   \n    table_name = each.key\n}\n</code></pre>\n", "OwnerUserId": "5589820", "LastEditorUserId": "5589820", "LastEditDate": "2023-01-17T13:12:15.550", "LastActivityDate": "2023-01-17T13:12:15.550", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132604404", "PostId": "75056138", "Score": "0", "Text": "how to attach the kinesis stream to these tables. `resource \"aws_dynamodb_kinesis_streaming_destination\" \"example\" {\n  for_each = { for key, value in var.dynamodb_table : key => value if value.table_name != null }\n  stream_arn = aws_kinesis_stream.example.arn\n  table_name = lookup({ for table_name in aws_dynamodb_table.this : table_name.name => table_name.id }, each.value.table_name, null)\n} `", "CreationDate": "2023-01-17T09:02:27.313", "UserId": "4765370", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "132604737", "PostId": "75056138", "Score": "0", "Text": "I updated my answer with `aws_dynamodb_kinesis_streaming_destination`. \nThere two solution in one answer, second option is commented. If you want to use second solution you need to add `depends_on` section. But if you directly use from `aws_dynamodb_table` you dont need to add `depends_on`.", "CreationDate": "2023-01-17T09:19:05.340", "UserId": "5589820", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "285783738", "PostHistoryTypeId": "2", "PostId": "75056138", "RevisionGUID": "1cad44eb-0c23-47a5-883e-3a418f3da9a4", "CreationDate": "2023-01-09T10:45:19.423", "UserId": "5589820", "Text": "You did not share your `attributes` variable but I have used `attributes` in `dynamodb_table` variable.\r\n\r\nYour main problem is `attribute` property in `dynamodb_table` variable is requeired but you did not provide any value for it in `devops-test-02` table values. \r\n\r\n--- \r\n`variables.tf`\r\n```terraform\r\nvariable \"dynamodb_table\" {\r\n  type = list(object({\r\n    table_name   = string\r\n    billing_mode = string\r\n    // read_capacity      = optional(number)\r\n    //write_capacity     = optional(string)\r\n    hash_key           = string\r\n    ttl_attribute_name = string\r\n    ttl_enabled        = string\r\n    //range_key          = optional(string)\r\n    attribute = list(object({\r\n      name = string\r\n      type = string\r\n    }))\r\n  }))\r\n  default = [\r\n    {\r\n      table_name         = \"devops-test-01\",\r\n      billing_mode       = \"PAY_PER_REQUEST\",\r\n      hash_key           = \"UserId\",\r\n      range_key          = \"GameTitle\",\r\n      ttl_attribute_name = \"ttl_attribute_name\",\r\n      ttl_enabled        = \"false\"\r\n      attribute = [\r\n        {\r\n          name = \"UserId\"\r\n          type = \"S\"\r\n        },\r\n        {\r\n          name = \"GameTitle\"\r\n          type = \"S\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      table_name         = \"devops-test-02\",\r\n      billing_mode       = \"PAY_PER_REQUEST\",\r\n      hash_key           = \"GameTitle\",\r\n      ttl_attribute_name = \"ttl_attribute_name\",\r\n      ttl_enabled        = \"false\"\r\n      attribute = [\r\n        {\r\n          name = \"UserId\"\r\n          type = \"S\"\r\n        },\r\n        {\r\n          name = \"GameTitle\"\r\n          type = \"S\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\nvariable \"global_secondary_indexes\" {\r\n  description = \"Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\"\r\n  type = list(object({\r\n    index_name            = string\r\n    index_projection_type = string\r\n    index_range_key       = string\r\n    index_hash_key        = string\r\n    //index_write_capacity     = optional(string)\r\n    //index_read_capacity      = optional(string)\r\n    index_non_key_attributes = list(string)\r\n  }))\r\n\r\n  default = [\r\n    {\r\n      index_name               = \"TitleIndex\"\r\n      index_hash_key           = \"UserId\"\r\n      index_range_key          = \"GameTitle\"\r\n      index_projection_type    = \"INCLUDE\"\r\n      index_non_key_attributes = [\"Id\"]\r\n    }\r\n  ]\r\n}\r\n\r\nvariable \"default_tags\" {\r\n  default = {\r\n    \"Environment\" = \"Dev\",\r\n    \"Owner\"       = \"xxx\"\r\n  }\r\n}\r\n```\r\n\r\n`dynamodb.tf`\r\n```terraform\r\nresource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {\r\n  for_each       = { for key, value in var.dynamodb_table : value.table_name => value }\r\n  name           = each.value.table_name\r\n  billing_mode   = each.value.billing_mode\r\n  read_capacity  = lookup(each.value, \"read_capacity\", null)\r\n  write_capacity = lookup(each.value, \"write_capacity\", null)\r\n  hash_key       = each.value.hash_key\r\n  range_key      = lookup(each.value, \"range_key\", null)\r\n  ttl {\r\n    attribute_name = each.value.ttl_attribute_name\r\n    enabled        = each.value.ttl_enabled\r\n  }\r\n\r\n  dynamic \"attribute\" {\r\n    for_each = { for key, value in each.value.attribute : key => value }\r\n    content {\r\n      name = attribute.value.name\r\n      type = attribute.value.type\r\n    }\r\n  }\r\n\r\n  dynamic \"global_secondary_index\" {\r\n    for_each = var.global_secondary_indexes\r\n    content {\r\n      name               = global_secondary_index.value.index_name\r\n      hash_key           = global_secondary_index.value.index_hash_key\r\n      projection_type    = global_secondary_index.value.index_projection_type\r\n      range_key          = lookup(global_secondary_index.value, \"index_range_key\", null)\r\n      read_capacity      = lookup(global_secondary_index.value, \"index_read_capacity\", null)\r\n      write_capacity     = lookup(global_secondary_index.value, \"index_write_capacity\", null)\r\n      non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null)\r\n    }\r\n  }\r\n\r\n\r\n  tags = merge(\r\n    var.default_tags,\r\n    {\r\n      Name = each.value.table_name\r\n  })\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Your main problem is `attribute` property in `dynamodb_table` variable is requeired but you did not provide any value for it in `devops-test-02` table values. --- `variables.tf` ```terraform variable \"dynamodb_table\" { type = list(object({ table_name = string billing_mode = string // read_capacity = optional(number) //write_capacity = optional(string) hash_key = string ttl_attribute_name = string ttl_enabled = string //range_key = optional(string) attribute = list(object({ name = string type = string })) })) default = [ { table_name = \"devops-test-01\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"UserId\", range_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" attribute = [ { name = \"UserId\" type = \"S\" }, { name = \"GameTitle\" type = \"S\" } ] }, { table_name = \"devops-test-02\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" attribute = [ { name = \"UserId\" type = \"S\" }, { name = \"GameTitle\" type = \"S\" } ] } ] } variable \"global_secondary_indexes\" { description = \"Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\" type = list(object({ index_name = string index_projection_type = string index_range_key = string index_hash_key = string //index_write_capacity = optional(string) //index_read_capacity = optional(string) index_non_key_attributes = list(string) })) default = [ { index_name = \"TitleIndex\" index_hash_key = \"UserId\" index_range_key = \"GameTitle\" index_projection_type = \"INCLUDE\" index_non_key_attributes = [\"Id\"] } ] } variable \"default_tags\" { default = { \"Environment\" = \"Dev\", \"Owner\" = \"xxx\" } } ``` `dynamodb.tf` ", "keywords": ["bill", "test"]}, {"source": "Text", "text": "```terraform resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" { for_each = { for key, value in var.dynamodb_table : value.table_name => value } name = each.value.table_name billing_mode = each.value.billing_mode read_capacity = lookup(each.value, \"read_capacity\", null) write_capacity = lookup(each.value, \"write_capacity\", null) hash_key = each.value.hash_key range_key = lookup(each.value, \"range_key\", null) ttl { attribute_name = each.value.ttl_attribute_name enabled = each.value.ttl_enabled } dynamic \"attribute\" { for_each = { for key, value in each.value.attribute : key => value } content { name = attribute.value.name type = attribute.value.type } } dynamic \"global_secondary_index\" { for_each = var.global_secondary_indexes content { name = global_secondary_index.value.index_name hash_key = global_secondary_index.value.index_hash_key projection_type = global_secondary_index.value.index_projection_type range_key = lookup(global_secondary_index.value, \"index_range_key\", null) read_capacity = lookup(global_secondary_index.value, \"index_read_capacity\", null) write_capacity = lookup(global_secondary_index.value, \"index_write_capacity\", null) non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null) } } tags = merge( var.default_tags, { Name = each.value.table_name }) ", "keywords": ["bill"]}]}, {"Id": "286292337", "PostHistoryTypeId": "5", "PostId": "75056138", "RevisionGUID": "02041e9d-97bd-4905-bcfd-27de50e9a6bc", "CreationDate": "2023-01-17T09:16:41.220", "UserId": "5589820", "Comment": "add kinesis streaming resource", "Text": "You did not share your `attributes` variable but I have used `attributes` in `dynamodb_table` variable.\r\n\r\nYour main problem is `attribute` property in `dynamodb_table` variable is requeired but you did not provide any value for it in `devops-test-02` table values. \r\n\r\n--- \r\n`variables.tf`\r\n```terraform\r\nvariable \"dynamodb_table\" {\r\n  type = list(object({\r\n    table_name   = string\r\n    billing_mode = string\r\n    // read_capacity      = optional(number)\r\n    //write_capacity     = optional(string)\r\n    hash_key           = string\r\n    ttl_attribute_name = string\r\n    ttl_enabled        = string\r\n    //range_key          = optional(string)\r\n    attribute = list(object({\r\n      name = string\r\n      type = string\r\n    }))\r\n  }))\r\n  default = [\r\n    {\r\n      table_name         = \"devops-test-01\",\r\n      billing_mode       = \"PAY_PER_REQUEST\",\r\n      hash_key           = \"UserId\",\r\n      range_key          = \"GameTitle\",\r\n      ttl_attribute_name = \"ttl_attribute_name\",\r\n      ttl_enabled        = \"false\"\r\n      attribute = [\r\n        {\r\n          name = \"UserId\"\r\n          type = \"S\"\r\n        },\r\n        {\r\n          name = \"GameTitle\"\r\n          type = \"S\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      table_name         = \"devops-test-02\",\r\n      billing_mode       = \"PAY_PER_REQUEST\",\r\n      hash_key           = \"GameTitle\",\r\n      ttl_attribute_name = \"ttl_attribute_name\",\r\n      ttl_enabled        = \"false\"\r\n      attribute = [\r\n        {\r\n          name = \"UserId\"\r\n          type = \"S\"\r\n        },\r\n        {\r\n          name = \"GameTitle\"\r\n          type = \"S\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\nvariable \"global_secondary_indexes\" {\r\n  description = \"Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\"\r\n  type = list(object({\r\n    index_name            = string\r\n    index_projection_type = string\r\n    index_range_key       = string\r\n    index_hash_key        = string\r\n    //index_write_capacity     = optional(string)\r\n    //index_read_capacity      = optional(string)\r\n    index_non_key_attributes = list(string)\r\n  }))\r\n\r\n  default = [\r\n    {\r\n      index_name               = \"TitleIndex\"\r\n      index_hash_key           = \"UserId\"\r\n      index_range_key          = \"GameTitle\"\r\n      index_projection_type    = \"INCLUDE\"\r\n      index_non_key_attributes = [\"Id\"]\r\n    }\r\n  ]\r\n}\r\n\r\nvariable \"default_tags\" {\r\n  default = {\r\n    \"Environment\" = \"Dev\",\r\n    \"Owner\"       = \"xxx\"\r\n  }\r\n}\r\n```\r\n\r\n`dynamodb.tf`\r\n```terraform\r\nresource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {\r\n  for_each       = { for key, value in var.dynamodb_table : value.table_name => value }\r\n  name           = each.value.table_name\r\n  billing_mode   = each.value.billing_mode\r\n  read_capacity  = lookup(each.value, \"read_capacity\", null)\r\n  write_capacity = lookup(each.value, \"write_capacity\", null)\r\n  hash_key       = each.value.hash_key\r\n  range_key      = lookup(each.value, \"range_key\", null)\r\n  ttl {\r\n    attribute_name = each.value.ttl_attribute_name\r\n    enabled        = each.value.ttl_enabled\r\n  }\r\n\r\n  dynamic \"attribute\" {\r\n    for_each = { for key, value in each.value.attribute : key => value }\r\n    content {\r\n      name = attribute.value.name\r\n      type = attribute.value.type\r\n    }\r\n  }\r\n\r\n  dynamic \"global_secondary_index\" {\r\n    for_each = var.global_secondary_indexes\r\n    content {\r\n      name               = global_secondary_index.value.index_name\r\n      hash_key           = global_secondary_index.value.index_hash_key\r\n      projection_type    = global_secondary_index.value.index_projection_type\r\n      range_key          = lookup(global_secondary_index.value, \"index_range_key\", null)\r\n      read_capacity      = lookup(global_secondary_index.value, \"index_read_capacity\", null)\r\n      write_capacity     = lookup(global_secondary_index.value, \"index_write_capacity\", null)\r\n      non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null)\r\n    }\r\n  }\r\n\r\n\r\n  tags = merge(\r\n    var.default_tags,\r\n    {\r\n      Name = each.value.table_name\r\n  })\r\n}\r\n```\r\n\r\n--- \r\n**UPDATE 2023-01-17**\r\nAdd Kinesis streaming destination resource to dynamodb tables.\r\n\r\n```terraform\r\nresource \"aws_dynamodb_kinesis_streaming_destination\" \"example\" {\r\n    for_each = aws_dynamodb_table.basic-dynamodb-table // { for key, value in var.dynamodb_table : value.table_name => value }\r\n    \r\n    stream_arn = aws_kinesis_stream.example.arn   \r\n    table_name = each.key\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Your main problem is `attribute` property in `dynamodb_table` variable is requeired but you did not provide any value for it in `devops-test-02` table values. --- `variables.tf` ```terraform variable \"dynamodb_table\" { type = list(object({ table_name = string billing_mode = string // read_capacity = optional(number) //write_capacity = optional(string) hash_key = string ttl_attribute_name = string ttl_enabled = string //range_key = optional(string) attribute = list(object({ name = string type = string })) })) default = [ { table_name = \"devops-test-01\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"UserId\", range_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" attribute = [ { name = \"UserId\" type = \"S\" }, { name = \"GameTitle\" type = \"S\" } ] }, { table_name = \"devops-test-02\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" attribute = [ { name = \"UserId\" type = \"S\" }, { name = \"GameTitle\" type = \"S\" } ] } ] } variable \"global_secondary_indexes\" { description = \"Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\" type = list(object({ index_name = string index_projection_type = string index_range_key = string index_hash_key = string //index_write_capacity = optional(string) //index_read_capacity = optional(string) index_non_key_attributes = list(string) })) default = [ { index_name = \"TitleIndex\" index_hash_key = \"UserId\" index_range_key = \"GameTitle\" index_projection_type = \"INCLUDE\" index_non_key_attributes = [\"Id\"] } ] } variable \"default_tags\" { default = { \"Environment\" = \"Dev\", \"Owner\" = \"xxx\" } } ``` `dynamodb.tf` ", "keywords": ["bill", "test"]}, {"source": "Text", "text": "```terraform resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" { for_each = { for key, value in var.dynamodb_table : value.table_name => value } name = each.value.table_name billing_mode = each.value.billing_mode read_capacity = lookup(each.value, \"read_capacity\", null) write_capacity = lookup(each.value, \"write_capacity\", null) hash_key = each.value.hash_key range_key = lookup(each.value, \"range_key\", null) ttl { attribute_name = each.value.ttl_attribute_name enabled = each.value.ttl_enabled } dynamic \"attribute\" { for_each = { for key, value in each.value.attribute : key => value } content { name = attribute.value.name type = attribute.value.type } } dynamic \"global_secondary_index\" { for_each = var.global_secondary_indexes content { name = global_secondary_index.value.index_name hash_key = global_secondary_index.value.index_hash_key projection_type = global_secondary_index.value.index_projection_type range_key = lookup(global_secondary_index.value, \"index_range_key\", null) read_capacity = lookup(global_secondary_index.value, \"index_read_capacity\", null) write_capacity = lookup(global_secondary_index.value, \"index_write_capacity\", null) non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null) } } tags = merge( var.default_tags, { Name = each.value.table_name }) } ``` --- **UPDATE 2023-01-17** Add Kinesis streaming destination resource to dynamodb tables", "keywords": ["bill"]}]}, {"Id": "286307716", "PostHistoryTypeId": "5", "PostId": "75056138", "RevisionGUID": "d5935ff6-3b21-485f-a25e-16e861ed32b6", "CreationDate": "2023-01-17T13:12:15.550", "UserId": "5589820", "Comment": "add aws_kinesis_stream for dynamotable", "Text": "You did not share your `attributes` variable but I have used `attributes` in `dynamodb_table` variable.\r\n\r\nYour main problem is `attribute` property in `dynamodb_table` variable is requeired but you did not provide any value for it in `devops-test-02` table values. \r\n\r\n--- \r\n`variables.tf`\r\n```terraform\r\nvariable \"dynamodb_table\" {\r\n  type = list(object({\r\n    table_name   = string\r\n    billing_mode = string\r\n    // read_capacity      = optional(number)\r\n    //write_capacity     = optional(string)\r\n    hash_key           = string\r\n    ttl_attribute_name = string\r\n    ttl_enabled        = string\r\n    //range_key          = optional(string)\r\n    attribute = list(object({\r\n      name = string\r\n      type = string\r\n    }))\r\n  }))\r\n  default = [\r\n    {\r\n      table_name         = \"devops-test-01\",\r\n      billing_mode       = \"PAY_PER_REQUEST\",\r\n      hash_key           = \"UserId\",\r\n      range_key          = \"GameTitle\",\r\n      ttl_attribute_name = \"ttl_attribute_name\",\r\n      ttl_enabled        = \"false\"\r\n      attribute = [\r\n        {\r\n          name = \"UserId\"\r\n          type = \"S\"\r\n        },\r\n        {\r\n          name = \"GameTitle\"\r\n          type = \"S\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      table_name         = \"devops-test-02\",\r\n      billing_mode       = \"PAY_PER_REQUEST\",\r\n      hash_key           = \"GameTitle\",\r\n      ttl_attribute_name = \"ttl_attribute_name\",\r\n      ttl_enabled        = \"false\"\r\n      attribute = [\r\n        {\r\n          name = \"UserId\"\r\n          type = \"S\"\r\n        },\r\n        {\r\n          name = \"GameTitle\"\r\n          type = \"S\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\nvariable \"global_secondary_indexes\" {\r\n  description = \"Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\"\r\n  type = list(object({\r\n    index_name            = string\r\n    index_projection_type = string\r\n    index_range_key       = string\r\n    index_hash_key        = string\r\n    //index_write_capacity     = optional(string)\r\n    //index_read_capacity      = optional(string)\r\n    index_non_key_attributes = list(string)\r\n  }))\r\n\r\n  default = [\r\n    {\r\n      index_name               = \"TitleIndex\"\r\n      index_hash_key           = \"UserId\"\r\n      index_range_key          = \"GameTitle\"\r\n      index_projection_type    = \"INCLUDE\"\r\n      index_non_key_attributes = [\"Id\"]\r\n    }\r\n  ]\r\n}\r\n\r\nvariable \"default_tags\" {\r\n  default = {\r\n    \"Environment\" = \"Dev\",\r\n    \"Owner\"       = \"xxx\"\r\n  }\r\n}\r\n```\r\n\r\n`dynamodb.tf`\r\n```terraform\r\nresource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {\r\n  for_each       = { for key, value in var.dynamodb_table : value.table_name => value }\r\n  name           = each.value.table_name\r\n  billing_mode   = each.value.billing_mode\r\n  read_capacity  = lookup(each.value, \"read_capacity\", null)\r\n  write_capacity = lookup(each.value, \"write_capacity\", null)\r\n  hash_key       = each.value.hash_key\r\n  range_key      = lookup(each.value, \"range_key\", null)\r\n  ttl {\r\n    attribute_name = each.value.ttl_attribute_name\r\n    enabled        = each.value.ttl_enabled\r\n  }\r\n\r\n  dynamic \"attribute\" {\r\n    for_each = { for key, value in each.value.attribute : key => value }\r\n    content {\r\n      name = attribute.value.name\r\n      type = attribute.value.type\r\n    }\r\n  }\r\n\r\n  dynamic \"global_secondary_index\" {\r\n    for_each = var.global_secondary_indexes\r\n    content {\r\n      name               = global_secondary_index.value.index_name\r\n      hash_key           = global_secondary_index.value.index_hash_key\r\n      projection_type    = global_secondary_index.value.index_projection_type\r\n      range_key          = lookup(global_secondary_index.value, \"index_range_key\", null)\r\n      read_capacity      = lookup(global_secondary_index.value, \"index_read_capacity\", null)\r\n      write_capacity     = lookup(global_secondary_index.value, \"index_write_capacity\", null)\r\n      non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null)\r\n    }\r\n  }\r\n\r\n\r\n  tags = merge(\r\n    var.default_tags,\r\n    {\r\n      Name = each.value.table_name\r\n  })\r\n}\r\n```\r\n\r\n--- \r\n**UPDATE 2023-01-17**\r\nAdd Kinesis streaming destination resource to dynamodb tables.\r\n\r\n```terraform\r\nresource \"aws_kinesis_stream\" \"example\" {\r\n  for_each = aws_dynamodb_table.basic-dynamodb-table\r\n\r\n  name        = \"${each.key}_table_stream\"\r\n  shard_count = 1\r\n}\r\n\r\nresource \"aws_dynamodb_kinesis_streaming_destination\" \"example\" {\r\n    for_each = aws_dynamodb_table.basic-dynamodb-table\r\n    \r\n    stream_arn = aws_kinesis_stream.example[each.key].arn   \r\n    table_name = each.key\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Your main problem is `attribute` property in `dynamodb_table` variable is requeired but you did not provide any value for it in `devops-test-02` table values. --- `variables.tf` ```terraform variable \"dynamodb_table\" { type = list(object({ table_name = string billing_mode = string // read_capacity = optional(number) //write_capacity = optional(string) hash_key = string ttl_attribute_name = string ttl_enabled = string //range_key = optional(string) attribute = list(object({ name = string type = string })) })) default = [ { table_name = \"devops-test-01\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"UserId\", range_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" attribute = [ { name = \"UserId\" type = \"S\" }, { name = \"GameTitle\" type = \"S\" } ] }, { table_name = \"devops-test-02\", billing_mode = \"PAY_PER_REQUEST\", hash_key = \"GameTitle\", ttl_attribute_name = \"ttl_attribute_name\", ttl_enabled = \"false\" attribute = [ { name = \"UserId\" type = \"S\" }, { name = \"GameTitle\" type = \"S\" } ] } ] } variable \"global_secondary_indexes\" { description = \"Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.\" type = list(object({ index_name = string index_projection_type = string index_range_key = string index_hash_key = string //index_write_capacity = optional(string) //index_read_capacity = optional(string) index_non_key_attributes = list(string) })) default = [ { index_name = \"TitleIndex\" index_hash_key = \"UserId\" index_range_key = \"GameTitle\" index_projection_type = \"INCLUDE\" index_non_key_attributes = [\"Id\"] } ] } variable \"default_tags\" { default = { \"Environment\" = \"Dev\", \"Owner\" = \"xxx\" } } ``` `dynamodb.tf` ", "keywords": ["bill", "test"]}, {"source": "Text", "text": "```terraform resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" { for_each = { for key, value in var.dynamodb_table : value.table_name => value } name = each.value.table_name billing_mode = each.value.billing_mode read_capacity = lookup(each.value, \"read_capacity\", null) write_capacity = lookup(each.value, \"write_capacity\", null) hash_key = each.value.hash_key range_key = lookup(each.value, \"range_key\", null) ttl { attribute_name = each.value.ttl_attribute_name enabled = each.value.ttl_enabled } dynamic \"attribute\" { for_each = { for key, value in each.value.attribute : key => value } content { name = attribute.value.name type = attribute.value.type } } dynamic \"global_secondary_index\" { for_each = var.global_secondary_indexes content { name = global_secondary_index.value.index_name hash_key = global_secondary_index.value.index_hash_key projection_type = global_secondary_index.value.index_projection_type range_key = lookup(global_secondary_index.value, \"index_range_key\", null) read_capacity = lookup(global_secondary_index.value, \"index_read_capacity\", null) write_capacity = lookup(global_secondary_index.value, \"index_write_capacity\", null) non_key_attributes = lookup(global_secondary_index.value, \"index_non_key_attributes\", null) } } tags = merge( var.default_tags, { Name = each.value.table_name }) } ``` --- **UPDATE 2023-01-17** Add Kinesis streaming destination resource to dynamodb tables. ", "keywords": ["bill"]}]}], "filtered-sentences": [{"source": "Body", "text": "Your main problem is attribute property in dynamodb_table variable is requeired but you did not provide any value for it in devops-test-02 table values. variables.tf dynamodb.tf UPDATE 2023-01-17 Add Kinesis streaming destination resource to dynamodb tables.", "keywords": ["test"]}]}], "contains-topic": true, "filtered-sentences": []}