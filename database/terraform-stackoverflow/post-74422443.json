{"Id": "74422443", "PostTypeId": "1", "CreationDate": "2022-11-13T15:46:28.173", "Score": "0", "ViewCount": "86", "Body": "<p>I am trying to reduce the cost of my AWS infrastructure deployed using Terraform for a Django app.</p>\n<p>I have 2 public subnets and 2 private subnets and in the subnets I deploy NAT gateways and elastic ips.</p>\n<p>all works but is expensive.</p>\n<p>As I don't need at the moment outbounds connection from the private network I am considering removing the nats and eips.</p>\n<p>So basically what I did was use this module for network:</p>\n<pre><code>resource &quot;aws_vpc&quot; &quot;main&quot; {\n  cidr_block           = &quot;10.1.0.0/16&quot;\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-vpc&quot; })\n  )\n}\n\nresource &quot;aws_internet_gateway&quot; &quot;main&quot; {\n  vpc_id = aws_vpc.main.id\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-main&quot; })\n\n  )\n}\n#####################################################\n# Public Subnets - Inbound/Outbound Internet Access #\n#####################################################\nresource &quot;aws_subnet&quot; &quot;public_a&quot; {\n  cidr_block              = &quot;10.1.1.0/24&quot;\n  map_public_ip_on_launch = true\n  vpc_id                  = aws_vpc.main.id\n  availability_zone       = &quot;${var.region}a&quot;\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-public-a&quot; })\n  )\n}\n\nresource &quot;aws_route_table&quot; &quot;public_a&quot; {\n  vpc_id = aws_vpc.main.id\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-public-a&quot; })\n  )\n}\n\nresource &quot;aws_route_table_association&quot; &quot;public_a&quot; {\n  subnet_id      = aws_subnet.public_a.id\n  route_table_id = aws_route_table.public_a.id\n}\n\nresource &quot;aws_route&quot; &quot;public_internet_access_a&quot; {\n  route_table_id         = aws_route_table.public_a.id\n  destination_cidr_block = &quot;0.0.0.0/0&quot;\n  gateway_id             = aws_internet_gateway.main.id\n}\n\n# resource &quot;aws_eip&quot; &quot;public_a&quot; {\n#   vpc = true\n\n#   tags = merge(\n#     var.common_tags,\n#     tomap({ &quot;Name&quot; = &quot;${var.prefix}-public-a&quot; })\n#   )\n# }\n\n# resource &quot;aws_nat_gateway&quot; &quot;public_a&quot; {\n#   allocation_id = aws_eip.public_a.id\n#   subnet_id     = aws_subnet.public_a.id\n\n#   tags = merge(\n#     var.common_tags,\n#     tomap({ &quot;Name&quot; = &quot;${var.prefix}-public-a&quot; })\n#   )\n# }\n\nresource &quot;aws_subnet&quot; &quot;public_b&quot; {\n  cidr_block              = &quot;10.1.2.0/24&quot;\n  map_public_ip_on_launch = true\n  vpc_id                  = aws_vpc.main.id\n  availability_zone       = &quot;${var.region}b&quot;\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-public-b&quot; })\n  )\n}\n\nresource &quot;aws_route_table&quot; &quot;public_b&quot; {\n  vpc_id = aws_vpc.main.id\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-public-b&quot; })\n  )\n}\n\nresource &quot;aws_route_table_association&quot; &quot;public_b&quot; {\n  subnet_id      = aws_subnet.public_b.id\n  route_table_id = aws_route_table.public_b.id\n}\n\nresource &quot;aws_route&quot; &quot;public_internet_access_b&quot; {\n  route_table_id         = aws_route_table.public_b.id\n  destination_cidr_block = &quot;0.0.0.0/0&quot;\n  gateway_id             = aws_internet_gateway.main.id\n}\n\n# resource &quot;aws_eip&quot; &quot;public_b&quot; {\n#   vpc = true\n\n#   tags = merge(\n#     var.common_tags,\n#     tomap({ &quot;Name&quot; = &quot;${var.prefix}-public-b&quot; })\n#   )\n# }\n\n# resource &quot;aws_nat_gateway&quot; &quot;public_b&quot; {\n#   allocation_id = aws_eip.public_b.id\n#   subnet_id     = aws_subnet.public_b.id\n\n#   tags = merge(\n#     var.common_tags,\n#     tomap({ &quot;Name&quot; = &quot;${var.prefix}-public-b&quot; })\n#   )\n# }\n\n\n##################################################\n# Private Subnets - Outbound internt access only #\n##################################################\nresource &quot;aws_subnet&quot; &quot;private_a&quot; {\n  cidr_block        = &quot;10.1.10.0/24&quot;\n  vpc_id            = aws_vpc.main.id\n  availability_zone = &quot;${var.region}a&quot;\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-private-a&quot; })\n  )\n}\n\nresource &quot;aws_route_table&quot; &quot;private_a&quot; {\n  vpc_id = aws_vpc.main.id\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-private-a&quot; })\n  )\n}\n\nresource &quot;aws_route_table_association&quot; &quot;private_a&quot; {\n  subnet_id      = aws_subnet.private_a.id\n  route_table_id = aws_route_table.private_a.id\n}\n\n# resource &quot;aws_route&quot; &quot;private_a_internet_out&quot; {\n#   route_table_id         = aws_route_table.private_a.id\n#   nat_gateway_id         = aws_nat_gateway.public_a.id\n#   destination_cidr_block = &quot;0.0.0.0/0&quot;\n# }\n\nresource &quot;aws_subnet&quot; &quot;private_b&quot; {\n  cidr_block        = &quot;10.1.11.0/24&quot;\n  vpc_id            = aws_vpc.main.id\n  availability_zone = &quot;${var.region}b&quot;\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-private-b&quot; })\n  )\n}\n\nresource &quot;aws_route_table&quot; &quot;private_b&quot; {\n  vpc_id = aws_vpc.main.id\n\n  tags = merge(\n    var.common_tags,\n    tomap({ &quot;Name&quot; = &quot;${var.prefix}-private-b&quot; })\n  )\n}\n\nresource &quot;aws_route_table_association&quot; &quot;private_b&quot; {\n  subnet_id      = aws_subnet.private_b.id\n  route_table_id = aws_route_table.private_b.id\n}\n\n# resource &quot;aws_route&quot; &quot;private_b_internet_out&quot; {\n#   route_table_id         = aws_route_table.private_b.id\n#   nat_gateway_id         = aws_nat_gateway.public_b.id\n#   destination_cidr_block = &quot;0.0.0.0/0&quot;\n# }\n</code></pre>\n<p>but this gives me a 503 error when I hit my endpoints/dns and I get no logs in cloudwatch from the container.</p>\n<p>If I un comment the commented bits and redeploy all good.</p>\n<p>Also strangely enough, if I deploy with NAT and then comment the NAT bits and re-run terraform <code>plan</code> and <code>apply</code> the service works.</p>\n<p>the full module is <a href=\"https://github.com/bruvio/tf_fargate_django/tree/feature/reduce-costs\" rel=\"nofollow noreferrer\">here</a></p>\n", "OwnerUserId": "7013795", "LastEditorUserId": "8343484", "LastEditDate": "2022-11-13T15:53:04.720", "LastActivityDate": "2022-11-13T15:53:04.720", "Title": "removing NAT Gateways and Elastic IPs in Terraform application can't start", "Tags": "<amazon-web-services><terraform><terraform-provider-aws>", "AnswerCount": "0", "CommentCount": "6", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131379684", "PostId": "74422443", "Score": "0", "Text": "Is any kind of ALB involved in your architecture?", "CreationDate": "2022-11-13T15:51:03.140", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131379748", "PostId": "74422443", "Score": "0", "Text": "yep, I am using an alb", "CreationDate": "2022-11-13T15:55:30.307", "UserId": "7013795", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131379963", "PostId": "74422443", "Score": "0", "Text": "Not familiar with terraform. But many AWS [clients](https://stackoverflow.com/questions/35788467/does-your-ec2-instance-needs-an-internet-connection-to-upload-logs-in-cloudwatch) need internet access to work. Just an intuition - When you call your API it is calling S3 endpoint (as defined in the full module link you provided. Not sure if your application is using it though) and the service is not able to reach it. \"Commented bits working\" - can you specify what exactly you are commenting out.", "CreationDate": "2022-11-13T16:14:18.137", "UserId": "11666461", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "But many AWS [clients](https://stackoverflow.com/questions/35788467/does-your-ec2-instance-needs-an-internet-connection-to-upload-logs-in-cloudwatch) need internet access to work. ", "keywords": ["instance"]}]}, {"Id": "131379990", "PostId": "74422443", "Score": "1", "Text": "@bruvio You see, that is a crucial piece of information. Since you are removing the stuff from one AZ, that could affect how ALB handles the requests. It could be either that a health check is not working or you haven't configured cross-zone load balancing on the ALB. And possibly a lot of other things.", "CreationDate": "2022-11-13T16:16:21.130", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131380004", "PostId": "74422443", "Score": "0", "Text": "yes I use S3, I guess I need to reenginner the app then. the part of the `network.tf` file that I comment are in the question already commented out", "CreationDate": "2022-11-13T16:17:02.820", "UserId": "7013795", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131380225", "PostId": "74422443", "Score": "1", "Text": "Slightly deviating from the current question. If S3 is integral part of your application, you should try out VPC endpoints for S3, still cloudwatch will not be working. You should use a [NAT instance](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_NAT_Instance.html) if you want all AWS clients working. It is bit of a re-engineering. Also for validating @Marko E 's suggestion, you can directly ping your private instances (bypassing ALB endpoint) from the bastion in one AZ and see if both are reachable. If so, my guess. is that ALB can also do cross-zone pings.", "CreationDate": "2022-11-13T16:32:21.533", "UserId": "11666461", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You should use a [NAT instance](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_NAT_Instance.html) if you want all AWS clients working. ", "keywords": ["nat", "instance"]}]}], "links": [{"Id": "2011940049", "CreationDate": "2022-11-13T16:14:18.137", "PostId": "74422443", "RelatedPostId": "35788467", "LinkTypeId": "1"}], "history": [{"Id": "282125208", "PostHistoryTypeId": "2", "PostId": "74422443", "RevisionGUID": "dc588f6b-6954-4504-80d6-e72f2ef6d797", "CreationDate": "2022-11-13T15:46:28.173", "UserId": "7013795", "Text": "I am trying to reduce the cost of my AWS infrastructure deployed using Terraform for a Django app.\r\n\r\nI have 2 public subnets and 2 private subnets and in the subnets I deploy NAT gateways and elastic ips.\r\n\r\nall works but is expensive. \r\n\r\nAs I don't need at the moment outbounds connection from the private network I am considering removing the nats and eips.\r\n\r\nSo basically what I did was use this module for network:\r\n\r\n\r\n    resource \"aws_vpc\" \"main\" {\r\n      cidr_block           = \"10.1.0.0/16\"\r\n      enable_dns_support   = true\r\n      enable_dns_hostnames = true\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-vpc\" })\r\n      )\r\n    }\r\n    \r\n    resource \"aws_internet_gateway\" \"main\" {\r\n      vpc_id = aws_vpc.main.id\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-main\" })\r\n    \r\n      )\r\n    }\r\n    #####################################################\r\n    # Public Subnets - Inbound/Outbound Internet Access #\r\n    #####################################################\r\n    resource \"aws_subnet\" \"public_a\" {\r\n      cidr_block              = \"10.1.1.0/24\"\r\n      map_public_ip_on_launch = true\r\n      vpc_id                  = aws_vpc.main.id\r\n      availability_zone       = \"${var.region}a\"\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-public-a\" })\r\n      )\r\n    }\r\n    \r\n    resource \"aws_route_table\" \"public_a\" {\r\n      vpc_id = aws_vpc.main.id\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-public-a\" })\r\n      )\r\n    }\r\n    \r\n    resource \"aws_route_table_association\" \"public_a\" {\r\n      subnet_id      = aws_subnet.public_a.id\r\n      route_table_id = aws_route_table.public_a.id\r\n    }\r\n    \r\n    resource \"aws_route\" \"public_internet_access_a\" {\r\n      route_table_id         = aws_route_table.public_a.id\r\n      destination_cidr_block = \"0.0.0.0/0\"\r\n      gateway_id             = aws_internet_gateway.main.id\r\n    }\r\n    \r\n    # resource \"aws_eip\" \"public_a\" {\r\n    #   vpc = true\r\n    \r\n    #   tags = merge(\r\n    #     var.common_tags,\r\n    #     tomap({ \"Name\" = \"${var.prefix}-public-a\" })\r\n    #   )\r\n    # }\r\n    \r\n    # resource \"aws_nat_gateway\" \"public_a\" {\r\n    #   allocation_id = aws_eip.public_a.id\r\n    #   subnet_id     = aws_subnet.public_a.id\r\n    \r\n    #   tags = merge(\r\n    #     var.common_tags,\r\n    #     tomap({ \"Name\" = \"${var.prefix}-public-a\" })\r\n    #   )\r\n    # }\r\n    \r\n    resource \"aws_subnet\" \"public_b\" {\r\n      cidr_block              = \"10.1.2.0/24\"\r\n      map_public_ip_on_launch = true\r\n      vpc_id                  = aws_vpc.main.id\r\n      availability_zone       = \"${var.region}b\"\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-public-b\" })\r\n      )\r\n    }\r\n    \r\n    resource \"aws_route_table\" \"public_b\" {\r\n      vpc_id = aws_vpc.main.id\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-public-b\" })\r\n      )\r\n    }\r\n    \r\n    resource \"aws_route_table_association\" \"public_b\" {\r\n      subnet_id      = aws_subnet.public_b.id\r\n      route_table_id = aws_route_table.public_b.id\r\n    }\r\n    \r\n    resource \"aws_route\" \"public_internet_access_b\" {\r\n      route_table_id         = aws_route_table.public_b.id\r\n      destination_cidr_block = \"0.0.0.0/0\"\r\n      gateway_id             = aws_internet_gateway.main.id\r\n    }\r\n    \r\n    # resource \"aws_eip\" \"public_b\" {\r\n    #   vpc = true\r\n    \r\n    #   tags = merge(\r\n    #     var.common_tags,\r\n    #     tomap({ \"Name\" = \"${var.prefix}-public-b\" })\r\n    #   )\r\n    # }\r\n    \r\n    # resource \"aws_nat_gateway\" \"public_b\" {\r\n    #   allocation_id = aws_eip.public_b.id\r\n    #   subnet_id     = aws_subnet.public_b.id\r\n    \r\n    #   tags = merge(\r\n    #     var.common_tags,\r\n    #     tomap({ \"Name\" = \"${var.prefix}-public-b\" })\r\n    #   )\r\n    # }\r\n    \r\n    \r\n    ##################################################\r\n    # Private Subnets - Outbound internt access only #\r\n    ##################################################\r\n    resource \"aws_subnet\" \"private_a\" {\r\n      cidr_block        = \"10.1.10.0/24\"\r\n      vpc_id            = aws_vpc.main.id\r\n      availability_zone = \"${var.region}a\"\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-private-a\" })\r\n      )\r\n    }\r\n    \r\n    resource \"aws_route_table\" \"private_a\" {\r\n      vpc_id = aws_vpc.main.id\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-private-a\" })\r\n      )\r\n    }\r\n    \r\n    resource \"aws_route_table_association\" \"private_a\" {\r\n      subnet_id      = aws_subnet.private_a.id\r\n      route_table_id = aws_route_table.private_a.id\r\n    }\r\n    \r\n    # resource \"aws_route\" \"private_a_internet_out\" {\r\n    #   route_table_id         = aws_route_table.private_a.id\r\n    #   nat_gateway_id         = aws_nat_gateway.public_a.id\r\n    #   destination_cidr_block = \"0.0.0.0/0\"\r\n    # }\r\n    \r\n    resource \"aws_subnet\" \"private_b\" {\r\n      cidr_block        = \"10.1.11.0/24\"\r\n      vpc_id            = aws_vpc.main.id\r\n      availability_zone = \"${var.region}b\"\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-private-b\" })\r\n      )\r\n    }\r\n    \r\n    resource \"aws_route_table\" \"private_b\" {\r\n      vpc_id = aws_vpc.main.id\r\n    \r\n      tags = merge(\r\n        var.common_tags,\r\n        tomap({ \"Name\" = \"${var.prefix}-private-b\" })\r\n      )\r\n    }\r\n    \r\n    resource \"aws_route_table_association\" \"private_b\" {\r\n      subnet_id      = aws_subnet.private_b.id\r\n      route_table_id = aws_route_table.private_b.id\r\n    }\r\n    \r\n    # resource \"aws_route\" \"private_b_internet_out\" {\r\n    #   route_table_id         = aws_route_table.private_b.id\r\n    #   nat_gateway_id         = aws_nat_gateway.public_b.id\r\n    #   destination_cidr_block = \"0.0.0.0/0\"\r\n    # }\r\n\r\nbut this gives me a 503 error when I hit my endpoints/dns and I get no logs in cloudwatch from the container.\r\n\r\n\r\nIf I un comment the commented bits and redeploy all good.\r\n\r\nAlso strangely enough, if I deploy with NAT and then comment the NAT bits and re-run terraform `plan` and `apply` the service works.\r\n\r\nthe full module is [here][1]\r\n\r\n\r\n  [1]: https://github.com/bruvio/tf_fargate_django/tree/feature/reduce-costs", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am trying to reduce the cost of my AWS infrastructure deployed using Terraform for a Django app. ", "keywords": ["cost"]}, {"source": "Text", "text": "I have 2 public subnets and 2 private subnets and in the subnets I deploy NAT gateways and elastic ips. all works but is expensive. ", "keywords": ["expense", "nat"]}, {"source": "Text", "text": "Also strangely enough, if I deploy with NAT and then comment the NAT bits and re-run terraform `plan` and `apply` the service works. ", "keywords": ["nat"]}, {"source": "Text", "text": "the full module is [here][1] [1]: https://github.com/bruvio/tf_fargate_django/tree/feature/reduce-costs", "keywords": ["feature"]}]}, {"Id": "282125210", "PostHistoryTypeId": "1", "PostId": "74422443", "RevisionGUID": "dc588f6b-6954-4504-80d6-e72f2ef6d797", "CreationDate": "2022-11-13T15:46:28.173", "UserId": "7013795", "Text": "removing NAT Gateways and Elastic IPs in Terraform application can't start", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "removing NAT Gateways and Elastic IPs in Terraform application can't start", "keywords": ["nat"]}]}, {"Id": "282125211", "PostHistoryTypeId": "3", "PostId": "74422443", "RevisionGUID": "dc588f6b-6954-4504-80d6-e72f2ef6d797", "CreationDate": "2022-11-13T15:46:28.173", "UserId": "7013795", "Text": "<terraform><elastic-ip><aws-nat-gateway>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "282125404", "PostHistoryTypeId": "6", "PostId": "74422443", "RevisionGUID": "534d8803-d487-4b75-94db-594b8b72d6c2", "CreationDate": "2022-11-13T15:53:04.720", "UserId": "8343484", "Comment": "edited tags", "Text": "<amazon-web-services><terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "removing NAT Gateways and Elastic IPs in Terraform application can't start", "keywords": ["nat"]}, {"source": "Body", "text": "I am trying to reduce the cost of my AWS infrastructure deployed using Terraform for a Django app. ", "keywords": ["cost"]}, {"source": "Body", "text": "I have 2 public subnets and 2 private subnets and in the subnets I deploy NAT gateways and elastic ips. all works but is expensive. ", "keywords": ["expense", "nat"]}, {"source": "Body", "text": "Also strangely enough, if I deploy with NAT and then comment the NAT bits and re-run terraform plan and apply the service works. ", "keywords": ["nat"]}]}