{"Id": "68884425", "PostTypeId": "1", "CreationDate": "2021-08-22T19:12:21.687", "Score": "0", "ViewCount": "398", "Body": "<p>As part of the IaC workflow we are implementing through Terraform, for some of the common resources we provision for users, we want to create a centralized remote state store. We are using Azure cloud so the default choice is to use Azure blob storage. We were initially thinking of creating one storage continaer per pipeline and store the state there. But then there was another thought wherein create one container and create directory structure per pipeline and store the state there.  I understand blob storage by default is the flat file system. But Azure storage also gives an option to enable hierarchical file structure with ADLS2. Did anyone attempt to store terraform states by enabling hierarchical file system structure in Azure? Is that a valid option at all? Also, can anyone suggest what would be the recommended apporach in my scenario?</p>\n<p>Thanks\nTintu</p>\n", "OwnerUserId": "3009657", "LastActivityDate": "2021-08-25T05:25:07.060", "Title": "Efficient way to manage terraform state with Azure storage contianer per pipeline", "Tags": "<azure><terraform><azure-storage>", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "121741427", "PostId": "68884425", "Score": "1", "Text": "Hierarchical namespaces is more a data lake feature but you could managed permissions at the file/folder level. there are some limitations as well: https://learn.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-known-issues. I do think it s up to you how you want to manage it: depends how many state files you have, who is allowed deploy etc.", "CreationDate": "2021-08-22T22:26:41.763", "UserId": "4167200", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Hierarchical namespaces is more a data lake feature but you could managed permissions at the file/folder level. ", "keywords": ["feature"]}, {"source": "Text", "text": "there are some limitations as well: https://learn.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-known-issues. ", "keywords": ["storage"]}]}], "history": [{"Id": "252429783", "PostHistoryTypeId": "2", "PostId": "68884425", "RevisionGUID": "6b7062cf-dd31-4529-bf09-c14473f173fc", "CreationDate": "2021-08-22T19:12:21.687", "UserId": "3009657", "Text": "As part of the IaC workflow we are implementing through Terraform, for some of the common resources we provision for users, we want to create a centralized remote state store. We are using Azure cloud so the default choice is to use Azure blob storage. We were initially thinking of creating one storage continaer per pipeline and store the state there. But then there was another thought wherein create one container and create directory structure per pipeline and store the state there.  I understand blob storage by default is the flat file system. But Azure storage also gives an option to enable hierarchical file structure with ADLS2. Did anyone attempt to store terraform states by enabling hierarchical file system structure in Azure? Is that a valid option at all? Also, can anyone suggest what would be the recommended apporach in my scenario? \r\n\r\nThanks \r\nTintu", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We are using Azure cloud so the default choice is to use Azure blob storage. ", "keywords": ["storage"]}, {"source": "Text", "text": "We were initially thinking of creating one storage continaer per pipeline and store the state there. ", "keywords": ["storage"]}, {"source": "Text", "text": "I understand blob storage by default is the flat file system. ", "keywords": ["storage"]}, {"source": "Text", "text": "But Azure storage also gives an option to enable hierarchical file structure with ADLS2. ", "keywords": ["storage"]}]}, {"Id": "252429784", "PostHistoryTypeId": "1", "PostId": "68884425", "RevisionGUID": "6b7062cf-dd31-4529-bf09-c14473f173fc", "CreationDate": "2021-08-22T19:12:21.687", "UserId": "3009657", "Text": "Efficient way to manage terraform state with Azure storage contianer per pipeline", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Efficient way to manage terraform state with Azure storage contianer per pipeline", "keywords": ["efficient", "storage"]}]}, {"Id": "252429785", "PostHistoryTypeId": "3", "PostId": "68884425", "RevisionGUID": "6b7062cf-dd31-4529-bf09-c14473f173fc", "CreationDate": "2021-08-22T19:12:21.687", "UserId": "3009657", "Text": "<azure><terraform><azure-storage>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "68917189", "PostTypeId": "2", "ParentId": "68884425", "CreationDate": "2021-08-25T05:20:02.657", "Score": "1", "Body": "<p>Never tried with ADLS2 by using its hierarchical feature. But since your requirement is to save the statefiles in same container but within different folders, you can try out specifying different folder structure while configuring the backend in backend.tf</p>\n<pre><code>terraform init backend-config &quot;key=$somePath/&lt;tfstate-file-name&gt;.tfstate&quot; \n</code></pre>\n<p>And pass different somePath values from a different backend.tfvars files.</p>\n<p>I hope this answers your question!</p>\n", "OwnerUserId": "16649052", "LastEditorUserId": "5525824", "LastEditDate": "2021-08-25T05:25:07.060", "LastActivityDate": "2021-08-25T05:25:07.060", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "121798233", "PostId": "68917189", "Score": "0", "Text": "I understand we can pass the directory prefix. But I am also looking at the RBAC at the directory level so other people don't accidentally access the state", "CreationDate": "2021-08-25T06:37:56.547", "UserId": "3009657", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "121800322", "PostId": "68917189", "Score": "0", "Text": "Yes you can use the ADLS2 access control module offering. In my opinion doing it with RBAC or ACL would be a better option so that you can provide accesses based on the user/service principal that is trying to access the statefile. But here you will have to register the user identity in the Azure Active Directory. And also will have to configure different roles that you want to allow or deny access to for a particular statefile.", "CreationDate": "2021-08-25T08:11:17.460", "UserId": "16649052", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "252566868", "PostHistoryTypeId": "2", "PostId": "68917189", "RevisionGUID": "c8c067c8-d3dc-4586-8b10-d37f32237676", "CreationDate": "2021-08-25T05:20:02.657", "UserId": "16649052", "Text": "Never tried with ADLS2 by using its hierarchical feature. But since your requirement is to save the statefiles in same container but within different folders, you can try out specifying different folder structure while configuring the backend in backend.tf\r\n\r\nterraform init backend-config \"key=$somePath/<tfstate-file-name>.tfstate\" \r\nAnd pass different somePath values from different backend.tfvars files. \r\n\r\nI hope this answers your question!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Never tried with ADLS2 by using its hierarchical feature. ", "keywords": ["feature"]}]}, {"Id": "252567050", "PostHistoryTypeId": "5", "PostId": "68917189", "RevisionGUID": "4d62511a-2a30-4307-8b73-3c780e30e0e3", "CreationDate": "2021-08-25T05:25:07.060", "UserId": "5525824", "Comment": "added 8 characters in body", "Text": "Never tried with ADLS2 by using its hierarchical feature. But since your requirement is to save the statefiles in same container but within different folders, you can try out specifying different folder structure while configuring the backend in backend.tf\r\n\r\n    terraform init backend-config \"key=$somePath/<tfstate-file-name>.tfstate\" \r\n\r\nAnd pass different somePath values from a different backend.tfvars files. \r\n\r\nI hope this answers your question!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Never tried with ADLS2 by using its hierarchical feature. ", "keywords": ["feature"]}]}], "filtered-sentences": [{"source": "Body", "text": "Never tried with ADLS2 by using its hierarchical feature. ", "keywords": ["feature"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Efficient way to manage terraform state with Azure storage contianer per pipeline", "keywords": ["efficient", "storage"]}, {"source": "Body", "text": "We are using Azure cloud so the default choice is to use Azure blob storage. ", "keywords": ["storage"]}, {"source": "Body", "text": "We were initially thinking of creating one storage continaer per pipeline and store the state there. ", "keywords": ["storage"]}, {"source": "Body", "text": "I understand blob storage by default is the flat file system. ", "keywords": ["storage"]}, {"source": "Body", "text": "But Azure storage also gives an option to enable hierarchical file structure with ADLS2. ", "keywords": ["storage"]}]}