{"Id": "64898815", "PostTypeId": "1", "AcceptedAnswerId": "64903240", "CreationDate": "2020-11-18T18:06:55.717", "Score": "0", "ViewCount": "1153", "Body": "<p>I'm developing a SPA with several envs: dev, preprod, prod</p>\n<p>Each env have a corresponding CloudFront distribution and bucket website.</p>\n<p>We also have a static website with user manual that is served on behavior /documentation/*</p>\n<p>This static website is stored on a separate bucket</p>\n<p>All environments share the same documentation, so there is only one bucket for all envs.</p>\n<p>The project is a company portal, so user documentation should not be accessible publicly.</p>\n<p>To achieve that, we are using OAI, so bucket is accessible only <strong>through</strong> CloudFront (a lambda@edge ensure user has a valid token and redirect him otherwise, so the documentation is private).</p>\n<p>Everything is fine when I deploy on dev using</p>\n<pre class=\"lang-sh prettyprint-override\"><code>terraform workspace select dev\nterraform apply -var-file=dev.tfvars\n</code></pre>\n<p>But when I try to deploy on preprod</p>\n<pre class=\"lang-sh prettyprint-override\"><code>terraform workspace select preprod\nterraform apply -var-file=preprod.tfvars\n</code></pre>\n<p>Terraform changes OAI ID this way</p>\n<pre><code>  # module.s3.aws_s3_bucket_policy.documentation_policy will be updated in-place\n  ~ resource &quot;aws_s3_bucket_policy&quot; &quot;documentation_policy&quot; {\n        bucket = &quot;my-bucket&quot;\n      ~ policy = jsonencode(\n          ~ {\n              ~ Statement = [\n                  ~ {\n                        Action    = &quot;s3:GetObject&quot;\n                        Effect    = &quot;Allow&quot;\n                      ~ Principal = {\n                          ~ AWS = &quot;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3U64NEVQ9IQHH&quot; -&gt; &quot;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3ORU58OAALJAP&quot;\n                        }\n                        Resource  = &quot;arn:aws:s3:::my-bucket/*&quot;\n                        Sid       = &quot;&quot;\n                    },\n                ]\n                Version   = &quot;2012-10-17&quot;\n            }\n        )\n    }\n</code></pre>\n<p>Whereas I would like the principal to added this way:</p>\n<pre><code>  # module.s3.aws_s3_bucket_policy.documentation_policy will be updated in-place\n  ~ resource &quot;aws_s3_bucket_policy&quot; &quot;documentation_policy&quot; {\n        bucket = &quot;my-bucket&quot;\n      ~ policy = jsonencode(\n          ~ {\n              Statement = [\n                  {\n                        Action    = &quot;s3:GetObject&quot;\n                        Effect    = &quot;Allow&quot;\n                        Principal = {\n                          AWS = &quot;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3U64NEVQ9IQHH&quot;\n                        }\n                        Resource  = &quot;arn:aws:s3:::my-bucket/*&quot;\n                        Sid       = &quot;&quot;\n                    },\n                  + {\n                  +     Action    = &quot;s3:GetObject&quot;\n                  +     Effect    = &quot;Allow&quot;\n                  +     Principal = {\n                  +       AWS = &quot;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3ORU58OAALJAP&quot;\n                  +     }\n                  +     Resource  = &quot;arn:aws:s3:::my-bucket/*&quot;\n                  +     Sid       = &quot;&quot;\n                  + },\n                ]\n                Version   = &quot;2012-10-17&quot;\n            }\n        )\n    }\n</code></pre>\n<p>Is there any way to achieve this using terraform 0.13.5</p>\n<p>For information, here is my <code>documentation-bucket.tf</code> which I import in each workspace once created</p>\n<pre><code>resource &quot;aws_s3_bucket&quot; &quot;documentation&quot; {\n  bucket = var.documentation_bucket\n\n  tags = {\n    BillingProject = var.billing_project\n    Environment    = var.env\n    Terraform      = &quot;Yes&quot;\n  }\n\n  logging {\n    target_bucket = var.website_logs_bucket\n    target_prefix = &quot;s3-access-logs/${var.documentation_bucket}/&quot;\n  }\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;documentation&quot; {\n  statement {\n    actions   = [&quot;s3:GetObject&quot;]\n    resources = [&quot;${aws_s3_bucket.documentation.arn}/*&quot;]\n\n    principals {\n      type        = &quot;AWS&quot;\n      identifiers = [aws_cloudfront_origin_access_identity.origin_access_identity.iam_arn]\n    }\n  }\n}\n\nresource &quot;aws_s3_bucket_policy&quot; &quot;documentation_policy&quot; {\n  bucket = aws_s3_bucket.documentation.id\n  policy = data.aws_iam_policy_document.documentation.json\n}\n\n</code></pre>\n<p>Best regards</p>\n", "OwnerUserId": "5272213", "LastActivityDate": "2020-11-18T23:54:38.430", "Title": "Append principal to bucket policy document instead overwrite it", "Tags": "<amazon-web-services><terraform>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "235184402", "PostHistoryTypeId": "2", "PostId": "64898815", "RevisionGUID": "838304d6-433f-453b-8edb-996ae597d120", "CreationDate": "2020-11-18T18:06:55.717", "UserId": "5272213", "Text": "I'm developing a SPA with several envs: dev, preprod, prod\r\n\r\nEach env have a corresponding CloudFront distribution and bucket website.\r\n\r\nWe also have a static website with user manual that is served on behavior /documentation/*\r\n\r\nThis static website is stored on a separate bucket\r\n\r\nAll environments share the same documentation, so there is only one bucket for all envs.\r\n\r\nThe project is a company portal, so user documentation should not be accessible publicly.\r\n\r\nTo achieve that, we are using OAI, so bucket is accessible only **through** CloudFront (a lambda@edge ensure user has a valid token and redirect him otherwise, so the documentation is private).\r\n\r\nEverything is fine when I deploy on dev using\r\n\r\n````bash\r\nterraform workspace select dev\r\nterraform apply -var-file=dev.tfvars\r\n````\r\n\r\nBut when I try to deploy on preprod\r\n\r\n````bash\r\nterraform workspace select preprod\r\nterraform apply -var-file=preprod.tfvars\r\n````\r\n\r\nTerraform changes OAI ID this way\r\n\r\n```\r\n  # module.s3.aws_s3_bucket_policy.documentation_policy will be updated in-place\r\n  ~ resource \"aws_s3_bucket_policy\" \"documentation_policy\" {\r\n        bucket = \"my-bucket\"\r\n      ~ policy = jsonencode(\r\n          ~ {\r\n              ~ Statement = [\r\n                  ~ {\r\n                        Action    = \"s3:GetObject\"\r\n                        Effect    = \"Allow\"\r\n                      ~ Principal = {\r\n                          ~ AWS = \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3U64NEVQ9IQHH\" -> \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3ORU58OAALJAP\"\r\n                        }\r\n                        Resource  = \"arn:aws:s3:::my-bucket/*\"\r\n                        Sid       = \"\"\r\n                    },\r\n                ]\r\n                Version   = \"2012-10-17\"\r\n            }\r\n        )\r\n    }\r\n```\r\n\r\nWhereas I would like the principal to added this way:\r\n\r\n\r\n```\r\n  # module.s3.aws_s3_bucket_policy.documentation_policy will be updated in-place\r\n  ~ resource \"aws_s3_bucket_policy\" \"documentation_policy\" {\r\n        bucket = \"my-bucket\"\r\n      ~ policy = jsonencode(\r\n          ~ {\r\n              Statement = [\r\n                  {\r\n                        Action    = \"s3:GetObject\"\r\n                        Effect    = \"Allow\"\r\n                        Principal = {\r\n                          AWS = \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3U64NEVQ9IQHH\"\r\n                        }\r\n                        Resource  = \"arn:aws:s3:::my-bucket/*\"\r\n                        Sid       = \"\"\r\n                    },\r\n                  + {\r\n                  +     Action    = \"s3:GetObject\"\r\n                  +     Effect    = \"Allow\"\r\n                  +     Principal = {\r\n                  +       AWS = \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3ORU58OAALJAP\"\r\n                  +     }\r\n                  +     Resource  = \"arn:aws:s3:::my-bucket/*\"\r\n                  +     Sid       = \"\"\r\n                  + },\r\n                ]\r\n                Version   = \"2012-10-17\"\r\n            }\r\n        )\r\n    }\r\n```\r\n\r\nIs there any way to achieve this using terraform 0.13.5\r\n\r\nFor information, here is my `documentation-bucket.tf` which I import in each workspace once created\r\n\r\n```tf\r\nresource \"aws_s3_bucket\" \"documentation\" {\r\n  bucket = var.documentation_bucket\r\n\r\n  tags = {\r\n    BillingProject = var.billing_project\r\n    Environment    = var.env\r\n    Terraform      = \"Yes\"\r\n  }\r\n\r\n  logging {\r\n    target_bucket = var.website_logs_bucket\r\n    target_prefix = \"s3-access-logs/${var.documentation_bucket}/\"\r\n  }\r\n\r\n  lifecycle {\r\n    prevent_destroy = true\r\n  }\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"documentation\" {\r\n  statement {\r\n    actions   = [\"s3:GetObject\"]\r\n    resources = [\"${aws_s3_bucket.documentation.arn}/*\"]\r\n\r\n    principals {\r\n      type        = \"AWS\"\r\n      identifiers = [aws_cloudfront_origin_access_identity.origin_access_identity.iam_arn]\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_policy\" \"documentation_policy\" {\r\n  bucket = aws_s3_bucket.documentation.id\r\n  policy = data.aws_iam_policy_document.documentation.json\r\n}\r\n\r\n```\r\n\r\nBest regards", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "But when I try to deploy on preprod ````bash terraform workspace select preprod terraform apply -var-file=preprod.tfvars ```` Terraform changes OAI ID this way ``` # module.s3.aws_s3_bucket_policy.documentation_policy will be updated in-place ~ resource \"aws_s3_bucket_policy\" \"documentation_policy\" { bucket = \"my-bucket\" ~ policy = jsonencode( ~ { ~ Statement = [ ~ { Action = \"s3:GetObject\" Effect = \"Allow\" ~ Principal = { ~ AWS = \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3U64NEVQ9IQHH\" -> \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3ORU58OAALJAP\" } Resource = \"arn:aws:s3:::my-bucket/*\" Sid = \"\" }, ] Version = \"2012-10-17\" } ) } ``` ", "keywords": ["policy", "change"]}, {"source": "Text", "text": "Whereas I would like the principal to added this way: ``` # module.s3.aws_s3_bucket_policy.documentation_policy will be updated in-place ~ resource \"aws_s3_bucket_policy\" \"documentation_policy\" { bucket = \"my-bucket\" ~ policy = jsonencode( ~ { Statement = [ { Action = \"s3:GetObject\" Effect = \"Allow\" Principal = { AWS = \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3U64NEVQ9IQHH\" } Resource = \"arn:aws:s3:::my-bucket/*\" Sid = \"\" }, + { + Action = \"s3:GetObject\" + Effect = \"Allow\" + Principal = { + AWS = \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E3ORU58OAALJAP\" + } + Resource = \"arn:aws:s3:::my-bucket/*\" + Sid = \"\" + }, ] Version = \"2012-10-17\" } ) } ``` ", "keywords": ["policy"]}, {"source": "Text", "text": "Is there any way to achieve this using terraform 0.13.5 For information, here is my `documentation-bucket.tf` which I import in each workspace once created ```tf resource \"aws_s3_bucket\" \"documentation\" { bucket = var.documentation_bucket tags = { BillingProject = var.billing_project Environment = var.env Terraform = \"Yes\" } logging { target_bucket = var.website_logs_bucket target_prefix = \"s3-access-logs/${var.documentation_bucket}/\" } lifecycle { prevent_destroy = true } } data \"aws_iam_policy_document\" \"documentation\" { statement { actions = [\"s3:GetObject\"] resources = [\"${aws_s3_bucket.documentation.arn}/*\"] principals { type = \"AWS\" identifiers = [aws_cloudfront_origin_access_identity.origin_access_identity.iam_arn] } } } resource \"aws_s3_bucket_policy\" \"documentation_policy\" { bucket = aws_s3_bucket.documentation.id policy = data.aws_iam_policy_document.documentation.json ", "keywords": ["bill", "policy"]}]}, {"Id": "235184403", "PostHistoryTypeId": "1", "PostId": "64898815", "RevisionGUID": "838304d6-433f-453b-8edb-996ae597d120", "CreationDate": "2020-11-18T18:06:55.717", "UserId": "5272213", "Text": "Append principal to bucket policy document instead overwrite it", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Append principal to bucket policy document instead overwrite it", "keywords": ["policy"]}]}, {"Id": "235184404", "PostHistoryTypeId": "3", "PostId": "64898815", "RevisionGUID": "838304d6-433f-453b-8edb-996ae597d120", "CreationDate": "2020-11-18T18:06:55.717", "UserId": "5272213", "Text": "<amazon-web-services><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "64903240", "PostTypeId": "2", "ParentId": "64898815", "CreationDate": "2020-11-18T23:54:38.430", "Score": "1", "Body": "<h3>Assumptions:</h3>\n<p>Based on what you said it seems you manage the same resource in different state files (assumption based on &quot;[...] which I import in each workspace once created&quot;)</p>\n<p>You basically created a split-brain situation by doing so.</p>\n<p>Assumption number two: you are deploying a single S3 bucket and multiple CloudFront distributions accessing this single bucket all in the same AWS Account.</p>\n<h3>Answer:</h3>\n<p>While it is totally fine to do so, this is not how it is supposed to be set up. A single resource should only be managed by a single terraform state (workspace) or you will see this <strong>expected</strong> but unwanted behavior of having an unstable state.</p>\n<p>I would suggest to manage the S3 bucket in a single workspace configuration or even create a new workspace called 'shared'.</p>\n<p>In this workspace, you can use <a href=\"https://www.terraform.io/docs/providers/terraform/d/remote_state.html\" rel=\"nofollow noreferrer\">terraform_remote_state data source</a> to import the state of the other workspaces and build a policy including all your OAIs extracted from the other states. Of course, you can do so without creating a new shared workspace.</p>\n<p>I hope this helps, while it might not be the expected solution - and maybe my assumptions are wrong.</p>\n<h3>Last words:</h3>\n<p>It's not considered good practice to share resources between environments, as data will most likely stay when you decommission environments, and managing access can get complex and insecure.</p>\n<p>Better keep versions of the environments as close as possible like in <a href=\"https://12factor.net/dev-prod-parity\" rel=\"nofollow noreferrer\">Dev/Prod Parity of the 12 factors app</a>, But try not to share resources. If you feel you need to share resources, take some time, and challenge your architecture again.</p>\n", "OwnerUserId": "2157547", "LastActivityDate": "2020-11-18T23:54:38.430", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "114758670", "PostId": "64903240", "Score": "1", "Text": "Hi mariux, thanks for this clear and detailed answer\nYour assomptions were correct, ,I shared the \"documentation\" bucket between env, as user manual is he same.\nHowever, I decided to use one documentation bucket / env, so it can be updated independently and we avoid the error-prone management of a single resource throgh several terraform workspaces", "CreationDate": "2020-11-19T09:50:55.750", "UserId": "5272213", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "235202796", "PostHistoryTypeId": "2", "PostId": "64903240", "RevisionGUID": "552a7482-592e-4979-bcd2-1b088cfa70fd", "CreationDate": "2020-11-18T23:54:38.430", "UserId": "2157547", "Text": "### Assumptions:\r\n\r\nBased on what you said it seems you manage the same resource in different state files (assumption based on \"[...] which I import in each workspace once created\") \r\n\r\nYou basically created a split-brain situation by doing so. \r\n\r\nAssumption number two: you are deploying a single S3 bucket and multiple CloudFront distributions accessing this single bucket all in the same AWS Account. \r\n\r\n### Answer:\r\n\r\nWhile it is totally fine to do so, this is not how it is supposed to be set up. A single resource should only be managed by a single terraform state (workspace) or you will see this **expected** but unwanted behavior of having an unstable state.\r\n\r\nI would suggest to manage the S3 bucket in a single workspace configuration or even create a new workspace called 'shared'.\r\n\r\nIn this workspace, you can use [terraform_remote_state data source](https://www.terraform.io/docs/providers/terraform/d/remote_state.html) to import the state of the other workspaces and build a policy including all your OAIs extracted from the other states. Of course, you can do so without creating a new shared workspace.\r\n\r\nI hope this helps, while it might not be the expected solution - and maybe my assumptions are wrong.\r\n\r\n### Last words: \r\n\r\nIt's not considered good practice to share resources between environments, as data will most likely stay when you decommission environments, and managing access can get complex and insecure. \r\n\r\nBetter keep versions of the environments as close as possible like in [Dev/Prod Parity of the 12 factors app](https://12factor.net/dev-prod-parity), But try not to share resources. If you feel you need to share resources, take some time, and challenge your architecture again.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "In this workspace, you can use [terraform_remote_state data source](https://www.terraform.io/docs/providers/terraform/d/remote_state.html) to import the state of the other workspaces and build a policy including all your OAIs extracted from the other states. ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "In this workspace, you can use terraform_remote_state data source to import the state of the other workspaces and build a policy including all your OAIs extracted from the other states. ", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Append principal to bucket policy document instead overwrite it", "keywords": ["policy"]}, {"source": "Body", "text": "Everything is fine when I deploy on dev using But when I try to deploy on preprod Terraform changes OAI ID this way Whereas I would like the principal to added this way: Is there any way to achieve this using terraform 0.13.5 For information, here is my documentation-bucket.tf which I import in each workspace once created Best regards", "keywords": ["change"]}]}