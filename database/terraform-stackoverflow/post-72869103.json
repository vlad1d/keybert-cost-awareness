{"Id": "72869103", "PostTypeId": "1", "CreationDate": "2022-07-05T12:01:04.227", "Score": "0", "ViewCount": "192", "Body": "<p>Just wondering what is the best practice here.</p>\n<p>I have these dev environments, dev/QA/UAT/ab/monkey and so on, which are used only during the daytime. We would like to save some cost here, by shutting them down during nighttime.</p>\n<p>Each environment consists of frontend/API/caching/queueing/DB servers/Docker images.</p>\n<p>Is using Terraform's create/destroy daily the right approach here?</p>\n<p>First thing I noticed is the IP address change on removing EC2 instances. Every day on destroying the env, I will have to re-map the DNS. But this can be solved using EC2 elastic IP. But then I read somewhere:</p>\n<p><code>if you\u2019re using an EIP to just provide a public IP and not to rapidly and seamlessly distribute traffic in the event of an outage while keeping DNS records the same, it\u2019s best to just use the AWS non-EIP pub IP and DNS records for pub access</code></p>\n<p>Does AWS give a public DNS that doesn't go away if I shut down the EC2 instance?</p>\n<p>Next is of course the data back-ups that I have to do. I have to back up all DBs, assets like images and videos, logs are not a concern since I will be pushing them off to another server using a log collector agent but all other data needs to be backed up before removal using Terraform destroy. I will also have tones of ECR images, I guess I need to back up them as well.</p>\n<p>This feels like a lot of work. What is the best practice?</p>\n<p>Just to add, almost all environments will run through-out the year.</p>\n", "OwnerUserId": "2075004", "LastActivityDate": "2022-07-06T15:12:47.700", "Title": "Running `terraform destroy` command daily for dev environments", "Tags": "<amazon-web-services><terraform>", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "128706838", "PostId": "72869103", "Score": "0", "Text": "\"but then I read somewhere...\" you read some bad advice. Or at least advice that only applies for production environments, not your temporary dev environments. Do what you need to do and don't worry about some random advice that you read somewhere that doesn't apply to your situation.", "CreationDate": "2022-07-05T12:39:50.077", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "128706897", "PostId": "72869103", "Score": "0", "Text": "I would suggest just shutting down the expensive parts of the environment every day instead of totally destroying and recreating. For example if you just stopped the EC2 instances it would probably provide 90% of the savings you are trying to achieve.", "CreationDate": "2022-07-05T12:41:22.117", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I would suggest just shutting down the expensive parts of the environment every day instead of totally destroying and recreating. ", "keywords": ["expense"]}]}], "history": [{"Id": "273594678", "PostHistoryTypeId": "2", "PostId": "72869103", "RevisionGUID": "e117cb8c-f3e1-462d-ba7a-6cf37b184f91", "CreationDate": "2022-07-05T12:01:04.227", "UserId": "2075004", "Text": "Just wondering what is the best practice here. \r\n\r\nI have these dev environments, dev/QA/UAT/ab/monkey and so on, which are used only during the daytime. We would like to save some cost here, by shutting them down during nighttime. \r\n\r\nEach environment consists of frontend/API/caching/queueing/DB servers/Docker images.\r\n\r\nIs using Terraform's create/destroy daily the right approach here? \r\n\r\nFirst thing I noticed is the IP address change on removing EC2 instances. Every day on destroying the env, I will have to re-map the DNS. But this can be solved using EC2 elastic IP. But then I read somewhere:\r\n\r\n`\r\nif you\u2019re using an EIP to just provide a public IP and not to rapidly and seamlessly distribute traffic in the event of an outage while keeping DNS records the same, it\u2019s best to just use the AWS non-EIP pub IP and DNS records for pub access\r\n`\r\n\r\nDoes AWS give a public DNS that doesn't go away if I shut down the EC2 instance?\r\n\r\n\r\nNext is of course the data back-ups that I have to do. I have to back up all DBs, assets like images and videos, logs are not a concern since I will be pushing them off to another server using a log collector agent but all other data needs to be backed up before removal using Terraform destroy. I will also have tones of ECR images, I guess I need to back up them as well.\r\n\r\nThis feels like a lot of work. What is the best practice?\r\n\r\nJust to add, almost all environments will run through-out the year.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We would like to save some cost here, by shutting them down during nighttime. ", "keywords": ["cost"]}, {"source": "Text", "text": "First thing I noticed is the IP address change on removing EC2 instances. ", "keywords": ["change"]}, {"source": "Text", "text": "Does AWS give a public DNS that doesn't go away if I shut down the EC2 instance? ", "keywords": ["instance"]}]}, {"Id": "273594680", "PostHistoryTypeId": "1", "PostId": "72869103", "RevisionGUID": "e117cb8c-f3e1-462d-ba7a-6cf37b184f91", "CreationDate": "2022-07-05T12:01:04.227", "UserId": "2075004", "Text": "Running `terraform destroy` command daily for dev environments", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "273594681", "PostHistoryTypeId": "3", "PostId": "72869103", "RevisionGUID": "e117cb8c-f3e1-462d-ba7a-6cf37b184f91", "CreationDate": "2022-07-05T12:01:04.227", "UserId": "2075004", "Text": "<amazon-web-services><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "72885997", "PostTypeId": "2", "ParentId": "72869103", "CreationDate": "2022-07-06T15:12:47.700", "Score": "0", "Body": "<p>You definitely could destroy these environments every day, depending on where your infrastructure as code lives, you could do this in a number of ways. For example if it's in a github repo, using github actions and workflows, you could create a task that runs a little while after you finish each day that would destroy everything. Other options would be gitlab which has it's own way of doing this, or something like Jenkins/TeamCity/Bamboo/CircleCI which could automate the job for you.</p>\n<p>In theory you could set up another job that applies them again each weekday morning, so you can save money and you don't waste time each morning setting up your dev envs.</p>\n<p>With regards to your DNS issues, if you are managing your DNS records with route53, you can add a <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_record\" rel=\"nofollow noreferrer\">resource</a> for your records which point to the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/instance#public_ip\" rel=\"nofollow noreferrer\">public IP</a> of your instance (that would be an A record), or the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/instance#public_dns\" rel=\"nofollow noreferrer\">public DNS</a> of your instance (for example). Then when you create the new resources each morning the records will be updated to point at your new instances.</p>\n<p>Simply shutting down the instances isn't always going to cut all of your costs, as you will still be paying for some resources like the EBS volumes and if you have elastic IPs which are not in use you get charged for that, load balancers generate charges even when not in use etc</p>\n", "OwnerUserId": "1357569", "LastActivityDate": "2022-07-06T15:12:47.700", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "273683490", "PostHistoryTypeId": "2", "PostId": "72885997", "RevisionGUID": "37235408-b666-4694-a6c5-e6f00e3fe3ef", "CreationDate": "2022-07-06T15:12:47.700", "UserId": "1357569", "Text": "You definitely could destroy these environments every day, depending on where your infrastructure as code lives, you could do this in a number of ways. For example if it's in a github repo, using github actions and workflows, you could create a task that runs a little while after you finish each day that would destroy everything. Other options would be gitlab which has it's own way of doing this, or something like Jenkins/TeamCity/Bamboo/CircleCI which could automate the job for you.\r\n\r\nIn theory you could set up another job that applies them again each weekday morning, so you can save money and you don't waste time each morning setting up your dev envs.\r\n\r\nWith regards to your DNS issues, if you are managing your DNS records with route53, you can add a [resource][1] for your records which point to the [public IP][2] of your instance (that would be an A record), or the [public DNS][3] of your instance (for example). Then when you create the new resources each morning the records will be updated to point at your new instances.\r\n\r\nSimply shutting down the instances isn't always going to cut all of your costs, as you will still be paying for some resources like the EBS volumes and if you have elastic IPs which are not in use you get charged for that, load balancers generate charges even when not in use etc\r\n\r\n  [1]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_record\r\n  [2]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/instance#public_ip\r\n  [3]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/instance#public_dns", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "With regards to your DNS issues, if you are managing your DNS records with route53, you can add a [resource][1] for your records which point to the [public IP][2] of your instance (that would be an A record), or the [public DNS][3] of your instance (for example). ", "keywords": ["instance"]}, {"source": "Text", "text": "Simply shutting down the instances isn't always going to cut all of your costs, as you will still be paying for some resources like the EBS volumes and if you have elastic IPs which are not in use you get charged for that, load balancers generate charges even when not in use etc [1]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_record [2]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/instance#public_ip [3]: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/instance#public_dns", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "With regards to your DNS issues, if you are managing your DNS records with route53, you can add a resource for your records which point to the public IP of your instance (that would be an A record), or the public DNS of your instance (for example). ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "We would like to save some cost here, by shutting them down during nighttime. ", "keywords": ["cost"]}, {"source": "Body", "text": "First thing I noticed is the IP address change on removing EC2 instances. ", "keywords": ["change"]}, {"source": "Body", "text": "But then I read somewhere: if you\u2019re using an EIP to just provide a public IP and not to rapidly and seamlessly distribute traffic in the event of an outage while keeping DNS records the same, it\u2019s best to just use the AWS non-EIP pub IP and DNS records for pub access Does AWS give a public DNS that doesn't go away if I shut down the EC2 instance? ", "keywords": ["instance"]}]}