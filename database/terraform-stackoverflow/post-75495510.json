{"Id": "75495510", "PostTypeId": "1", "AcceptedAnswerId": "75495685", "CreationDate": "2023-02-18T18:32:54.363", "Score": "2", "ViewCount": "634", "Body": "<p>I've been trying to create the serverless offer of the cosmosdb database using Terraform, but haven't been able to do so.</p>\n<p>After reading Microsoft's documentations and the Azurerm terraform registry documentations, I could code this resource:</p>\n<pre><code>resource &quot;azurerm_cosmosdb_account&quot; &quot;resume-challenge-cosmosdb&quot; {\nname                      = var.cosmosdb-name\n  location                  = var.region\n  resource_group_name       = azurerm_resource_group.cloud-resume-rg.name\n  offer_type                = &quot;Standard&quot;\n  kind                      = &quot;GlobalDocumentDB&quot;\n  enable_automatic_failover = false\n  enable_free_tier          = true\n  consistency_policy {\n    consistency_level       = &quot;BoundedStaleness&quot;\n    max_interval_in_seconds = 300\n    max_staleness_prefix    = 100000\n  }\n  geo_location {\n    location          = &quot;brazilsouth&quot;\n    failover_priority = 0\n  }\n}\n</code></pre>\n<p>but it creates the regular version of the cosmosdb.</p>\n", "OwnerUserId": "11788770", "LastActivityDate": "2023-02-20T15:02:13.160", "Title": "How can I create an Azure CosmosDB Serverless using Terraform?", "Tags": "<azure><terraform><azure-cosmosdb><terraform-provider-azure><azure-rm>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "288324253", "PostHistoryTypeId": "2", "PostId": "75495510", "RevisionGUID": "28395297-e4c6-497f-8cd5-14e8892af751", "CreationDate": "2023-02-18T18:32:54.363", "UserId": "11788770", "Text": "I've been trying to create the serverless offer of the cosmosdb database using Terraform, but haven't been able to do so.\r\n\r\nAfter reading Microsoft's documentations and the Azurerm terraform registry documentations, I could code this resource:\r\n\r\n```\r\nresource \"azurerm_cosmosdb_account\" \"resume-challenge-cosmosdb\" {\r\nname                      = var.cosmosdb-name\r\n  location                  = var.region\r\n  resource_group_name       = azurerm_resource_group.cloud-resume-rg.name\r\n  offer_type                = \"Standard\"\r\n  kind                      = \"GlobalDocumentDB\"\r\n  enable_automatic_failover = false\r\n  enable_free_tier          = true\r\n  consistency_policy {\r\n    consistency_level       = \"BoundedStaleness\"\r\n    max_interval_in_seconds = 300\r\n    max_staleness_prefix    = 100000\r\n  }\r\n  geo_location {\r\n    location          = \"brazilsouth\"\r\n    failover_priority = 0\r\n  }\r\n}\r\n```\r\n\r\nbut it creates the regular version of the cosmosdb.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "288324255", "PostHistoryTypeId": "1", "PostId": "75495510", "RevisionGUID": "28395297-e4c6-497f-8cd5-14e8892af751", "CreationDate": "2023-02-18T18:32:54.363", "UserId": "11788770", "Text": "How can I create an Azure CosmosDB Serverless using Terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "288324256", "PostHistoryTypeId": "3", "PostId": "75495510", "RevisionGUID": "28395297-e4c6-497f-8cd5-14e8892af751", "CreationDate": "2023-02-18T18:32:54.363", "UserId": "11788770", "Text": "<azure><terraform><azure-cosmosdb><terraform-provider-azure><azure-rm>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "288324257", "PostHistoryTypeId": "66", "PostId": "75495510", "RevisionGUID": "28395297-e4c6-497f-8cd5-14e8892af751", "CreationDate": "2023-02-18T18:32:54.363", "UserId": "11788770", "filtered-sentences": []}], "answers": [{"Id": "75495685", "PostTypeId": "2", "ParentId": "75495510", "CreationDate": "2023-02-18T18:58:14.260", "Score": "1", "Body": "<p>To make a CosmosDB account serverless using the AzureRM Terraform provider you need to enable the <code>EnableServerless</code> capability on the <code>azurerm_cosmosdb_account</code>.  To do this you must add a <code>capabilities</code> block with <code>name = &quot;EnableServerless&quot;</code>.  Applying this to your above example would look like so:</p>\n<pre><code>resource &quot;azurerm_cosmosdb_account&quot; &quot;resume-challenge-cosmosdb&quot; {\nname                      = var.cosmosdb-name\n  location                  = var.region\n  resource_group_name       = azurerm_resource_group.cloud-resume-rg.name\n  offer_type                = &quot;Standard&quot;\n  kind                      = &quot;GlobalDocumentDB&quot;\n  enable_automatic_failover = false\n  enable_free_tier          = true\n  consistency_policy {\n    consistency_level       = &quot;BoundedStaleness&quot;\n    max_interval_in_seconds = 300\n    max_staleness_prefix    = 100000\n  }\n  geo_location {\n    location          = &quot;brazilsouth&quot;\n    failover_priority = 0\n  }\n  capabilities {\n    name = &quot;EnableServerless&quot;\n  }\n}\n</code></pre>\n<p>I found this by searching for the word &quot;serverless&quot; on the <a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/cosmosdb_account\" rel=\"nofollow noreferrer\">azurerm_cosmosdb_account</a> resource docs.</p>\n", "OwnerUserId": "11820711", "LastEditorUserId": "11820711", "LastEditDate": "2023-02-20T15:02:13.160", "LastActivityDate": "2023-02-20T15:02:13.160", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "133209257", "PostId": "75495685", "Score": "0", "Text": "The serverless is the pay-as-you-go pricing option, does the \"offer_type = Standard\" interfires in the cost?", "CreationDate": "2023-02-19T14:13:51.673", "UserId": "11788770", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The serverless is the pay-as-you-go pricing option, does the \"offer_type = Standard\" interfires in the cost?", "keywords": ["cost", "pay"]}]}, {"Id": "133239326", "PostId": "75495685", "Score": "0", "Text": "How does it interfere with the cost?  Not sure :)  I'd say your best bet is to provision a CosmosDB account using the above Terraform, and also provision a serverless CosmosDB account manually in the Azure Portal, and then compare the resulting JSON ARM template of the two.", "CreationDate": "2023-02-21T09:13:59.827", "UserId": "11820711", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "How does it interfere with the cost? ", "keywords": ["cost"]}]}, {"Id": "133267041", "PostId": "75495685", "Score": "0", "Text": "I think it won't interfire in the costs. After creating, I went to the azure portal and saw the database is in serverless mode. Thanks for the help!", "CreationDate": "2023-02-22T15:16:22.243", "UserId": "11788770", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "After creating, I went to the azure portal and saw the database is in serverless mode. ", "keywords": ["billing mode"]}]}, {"Id": "133269606", "PostId": "75495685", "Score": "0", "Text": "Please accept my answer if it's solved your problem :)", "CreationDate": "2023-02-22T17:20:36.840", "UserId": "11820711", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "288325226", "PostHistoryTypeId": "2", "PostId": "75495685", "RevisionGUID": "9977155b-49e6-4878-9ddd-fe334eff3c9f", "CreationDate": "2023-02-18T18:58:14.260", "UserId": "11820711", "Text": "To make a CosmosDB account serverless using the AzureRM Terraform provider you need to enable the `EnableServerless` capability on the `azurerm_cosmosdb_account`.  To do this you must dd a `capabilities` block with `name = \"EnableServerless\"`.  Applying this to your above example would look like so:\r\n\r\n    resource \"azurerm_cosmosdb_account\" \"resume-challenge-cosmosdb\" {\r\n    name                      = var.cosmosdb-name\r\n      location                  = var.region\r\n      resource_group_name       = azurerm_resource_group.cloud-resume-rg.name\r\n      offer_type                = \"Standard\"\r\n      kind                      = \"GlobalDocumentDB\"\r\n      enable_automatic_failover = false\r\n      enable_free_tier          = true\r\n      consistency_policy {\r\n        consistency_level       = \"BoundedStaleness\"\r\n        max_interval_in_seconds = 300\r\n        max_staleness_prefix    = 100000\r\n      }\r\n      geo_location {\r\n        location          = \"brazilsouth\"\r\n        failover_priority = 0\r\n      }\r\n      capabilities {\r\n        name = \"EnableServerless\"\r\n      }\r\n    }\r\n\r\nI found this by searching for the word \"serverless\" on the [azurerm_cosmosdb_account][1] resource docs.\r\n\r\n  [1]: https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/cosmosdb_account", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To make a CosmosDB account serverless using the AzureRM Terraform provider you need to enable the `EnableServerless` capability on the `azurerm_cosmosdb_account`. ", "keywords": ["provider"]}]}, {"Id": "288411281", "PostHistoryTypeId": "5", "PostId": "75495685", "RevisionGUID": "3e03d045-db36-4c5e-b9d2-fbac6b7faa0e", "CreationDate": "2023-02-20T15:02:13.160", "UserId": "11820711", "Comment": "added 1 character in body", "Text": "To make a CosmosDB account serverless using the AzureRM Terraform provider you need to enable the `EnableServerless` capability on the `azurerm_cosmosdb_account`.  To do this you must add a `capabilities` block with `name = \"EnableServerless\"`.  Applying this to your above example would look like so:\r\n\r\n    resource \"azurerm_cosmosdb_account\" \"resume-challenge-cosmosdb\" {\r\n    name                      = var.cosmosdb-name\r\n      location                  = var.region\r\n      resource_group_name       = azurerm_resource_group.cloud-resume-rg.name\r\n      offer_type                = \"Standard\"\r\n      kind                      = \"GlobalDocumentDB\"\r\n      enable_automatic_failover = false\r\n      enable_free_tier          = true\r\n      consistency_policy {\r\n        consistency_level       = \"BoundedStaleness\"\r\n        max_interval_in_seconds = 300\r\n        max_staleness_prefix    = 100000\r\n      }\r\n      geo_location {\r\n        location          = \"brazilsouth\"\r\n        failover_priority = 0\r\n      }\r\n      capabilities {\r\n        name = \"EnableServerless\"\r\n      }\r\n    }\r\n\r\nI found this by searching for the word \"serverless\" on the [azurerm_cosmosdb_account][1] resource docs.\r\n\r\n  [1]: https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/cosmosdb_account", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To make a CosmosDB account serverless using the AzureRM Terraform provider you need to enable the `EnableServerless` capability on the `azurerm_cosmosdb_account`. ", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "To make a CosmosDB account serverless using the AzureRM Terraform provider you need to enable the EnableServerless capability on the azurerm_cosmosdb_account. ", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": []}