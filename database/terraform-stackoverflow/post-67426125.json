{"Id": "67426125", "PostTypeId": "1", "CreationDate": "2021-05-06T21:22:32.113", "Score": "-3", "ViewCount": "127", "Body": "<p>We have recently started using Terraform for IaC.</p>\n<p>How do we make sure that Terraform is not misused by some member in the team by spinning hundreds of VMs costing the company $$$'s. How do we restrict users from doing this?</p>\n<p>Thanks</p>\n", "OwnerUserId": "14795966", "LastActivityDate": "2021-05-08T01:00:38.720", "Title": "How to stop Terraform being misused", "Tags": "<terraform>", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "246110445", "PostHistoryTypeId": "2", "PostId": "67426125", "RevisionGUID": "591848ea-7be3-4549-8f35-00b6fe74d83d", "CreationDate": "2021-05-06T21:22:32.113", "UserId": "14795966", "Text": "We have recently started using Terraform for IaC.\r\n\r\nHow do we make sure that Terraform is not misused by some member in the team by spinning hundreds of VMs costing the company $$$'s. How do we restrict users from doing this?\r\n\r\nThanks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "246110446", "PostHistoryTypeId": "1", "PostId": "67426125", "RevisionGUID": "591848ea-7be3-4549-8f35-00b6fe74d83d", "CreationDate": "2021-05-06T21:22:32.113", "UserId": "14795966", "Text": "How to stop Terraform being misused", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "246110447", "PostHistoryTypeId": "3", "PostId": "67426125", "RevisionGUID": "591848ea-7be3-4549-8f35-00b6fe74d83d", "CreationDate": "2021-05-06T21:22:32.113", "UserId": "14795966", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "67443156", "PostTypeId": "2", "ParentId": "67426125", "CreationDate": "2021-05-08T01:00:38.720", "Score": "0", "Body": "<p>There are a variety of different answers to this question depending on the details of what you want to achieve and why.</p>\n<p>The most thorough approach would be to ensure that you only grant your users access to perform operations that you consider acceptable within the target cloud platforms. As long as you configure the permissions correctly, the users won't be able to create objects they shouldn't regardless of whether they do it with Terraform or any other tool.</p>\n<p>In practice though we typically need to trust to some extent that operators are acting in good faith, and think about including &quot;guard rails&quot; to discourage <em>accidental</em> misconfiguration, rather than trying to tightly control what individuals are allowed to do.</p>\n<p>As long as folks are running Terraform directly on their own computers, they will have access to do whatever their credentials for the remote system permit them to do. Terraform is totally under the user's control in that case and so you can't control anything at the Terraform level, so any controls you introduce will need to be in the remote system instead.</p>\n<p>However, typically teams using Terraform in production will run it in some sort of automation where the operators execute Terraform only indirectly, with Terraform itself running in a controlled remote environment similar to what's typically provided by CI/CD systems. In that case, you should still assume that <code>terraform plan</code> is effectively executing arbitrary code and so you can't use it as a hard security boundary, but you <em>can</em> create guardrails to help operators acting in good faith to avoid taking damaging actions.</p>\n<p>To do that, make your automation system save a plan to a file, and then export it as JSON for consumption by external software:</p>\n<pre><code>terraform plan -out=tfplan\nterraform show -json tfplan &gt;tfplan.json\n</code></pre>\n<p>Then you can use software of your own design to consume <code>tfplan.json</code>, which is in <a href=\"https://www.terraform.io/docs/internals/json-format.html\" rel=\"nofollow noreferrer\">the Terraform JSON output format</a>, and implement whatever rules you deem appropriate to decide whether a particular plan is acceptable. If your program determines that the plan is not acceptable then you can halt the pipeline and prevent applying the plan.</p>\n<p>If you consider the plan to meet policy then, after human approval, you can apply it from that file saved earlier, to ensure it'll take the same actions as you've checked:</p>\n<pre><code>terraform apply tfplan\n</code></pre>\n<p>There are some external systems which can help you write policies to check a JSON plan. For example, <a href=\"https://www.openpolicyagent.org/\" rel=\"nofollow noreferrer\">Open Policy Agent</a> is open source software <a href=\"https://www.openpolicyagent.org/docs/latest/terraform/\" rel=\"nofollow noreferrer\">which can integrate with Terraform plans</a>, and the higher <a href=\"https://www.hashicorp.com/products/terraform/pricing\" rel=\"nofollow noreferrer\">pricing tiers of Terraform Cloud</a> include &quot;Team Management and Governance&quot;, which is a hosted version of this model using a HashiCorp-specific policy language called <a href=\"https://www.hashicorp.com/sentinel\" rel=\"nofollow noreferrer\">Sentinel</a>. Other open source projects and vendors have similar offerings.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2021-05-08T01:00:38.720", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "246185703", "PostHistoryTypeId": "2", "PostId": "67443156", "RevisionGUID": "c68795d3-6f00-4a48-86ee-4936d7f3cef0", "CreationDate": "2021-05-08T01:00:38.720", "UserId": "281848", "Text": "There are a variety of different answers to this question depending on the details of what you want to achieve and why.\r\n\r\nThe most thorough approach would be to ensure that you only grant your users access to perform operations that you consider acceptable within the target cloud platforms. As long as you configure the permissions correctly, the users won't be able to create objects they shouldn't regardless of whether they do it with Terraform or any other tool.\r\n\r\nIn practice though we typically need to trust to some extent that operators are acting in good faith, and think about including \"guard rails\" to discourage _accidental_ misconfiguration, rather than trying to tightly control what individuals are allowed to do.\r\n\r\nAs long as folks are running Terraform directly on their own computers, they will have access to do whatever their credentials for the remote system permit them to do. Terraform is totally under the user's control in that case and so you can't control anything at the Terraform level, so any controls you introduce will need to be in the remote system instead.\r\n\r\nHowever, typically teams using Terraform in production will run it in some sort of automation where the operators execute Terraform only indirectly, with Terraform itself running in a controlled remote environment similar to what's typically provided by CI/CD systems. In that case, you should still assume that `terraform plan` is effectively executing arbitrary code and so you can't use it as a hard security boundary, but you _can_ create guardrails to help operators acting in good faith to avoid taking damaging actions.\r\n\r\nTo do that, make your automation system save a plan to a file, and then export it as JSON for consumption by external software:\r\n\r\n```\r\nterraform plan -out=tfplan\r\nterraform show -json tfplan >tfplan.json\r\n```\r\n\r\nThen you can use software of your own design to consume `tfplan.json`, which is in [the Terraform JSON output format](https://www.terraform.io/docs/internals/json-format.html), and implement whatever rules you deem appropriate to decide whether a particular plan is acceptable. If your program determines that the plan is not acceptable then you can halt the pipeline and prevent applying the plan.\r\n\r\nIf you consider the plan to meet policy then, after human approval, you can apply it from that file saved earlier, to ensure it'll take the same actions as you've checked:\r\n\r\n```\r\nterraform apply tfplan\r\n```\r\n\r\nThere are some external systems which can help you write policies to check a JSON plan. For example, [Open Policy Agent](https://www.openpolicyagent.org/) is open source software [which can integrate with Terraform plans](https://www.openpolicyagent.org/docs/latest/terraform/), and the higher [pricing tiers of Terraform Cloud](https://www.hashicorp.com/products/terraform/pricing) include \"Team Management and Governance\", which is a hosted version of this model using a HashiCorp-specific policy language called [Sentinel](https://www.hashicorp.com/sentinel). Other open source projects and vendors have similar offerings.\r\n\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "If you consider the plan to meet policy then, after human approval, you can apply it from that file saved earlier, to ensure it'll take the same actions as you've checked: ``` terraform apply tfplan ``` ", "keywords": ["policy"]}, {"source": "Text", "text": "For example, [Open Policy Agent](https://www.openpolicyagent.org/) is open source software [which can integrate with Terraform plans](https://www.openpolicyagent.org/docs/latest/terraform/), and the higher [pricing tiers of Terraform Cloud](https://www.hashicorp.com/products/terraform/pricing) include \"Team Management and Governance\", which is a hosted version of this model using a HashiCorp-specific policy language called [Sentinel](https://www.hashicorp.com/sentinel). ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "If you consider the plan to meet policy then, after human approval, you can apply it from that file saved earlier, to ensure it'll take the same actions as you've checked: ", "keywords": ["policy"]}, {"source": "Body", "text": "For example, Open Policy Agent is open source software which can integrate with Terraform plans, and the higher pricing tiers of Terraform Cloud include \"Team Management and Governance\", which is a hosted version of this model using a HashiCorp-specific policy language called Sentinel. ", "keywords": ["policy"]}]}, {"Id": "67438442", "PostTypeId": "2", "ParentId": "67426125", "CreationDate": "2021-05-07T16:14:27.663", "Score": "0", "Body": "<p>Hashicorp offers a product named <a href=\"https://www.terraform.io/docs/cloud/sentinel/index.html\" rel=\"nofollow noreferrer\">Sentinel</a>, which allows you to write required policies for your Terraform organizations and users - note that this is a paid feature.</p>\n<p>It's not clear which costs you're looking to restrict exactly, but with Sentinel, you could write a policy that restricts the total monthly cost of a Terraform plan like so:</p>\n<pre><code># This policy uses the Sentinel tfrun import to restrict the\n# proposed monthly cost that would be incurred if the current\n# plan were applied\n\n# Import common-functions/tfrun-functions/tfrun-functions.sentinel\n# with alias &quot;run&quot;\nimport &quot;tfrun-functions&quot; as run\n# The standard decimal import\nimport &quot;decimal&quot;\n\n# Monthly Limit\nlimit = decimal.new(1000)\n\n# Call the validation function\n# Warnings will be printed for violations\ncost_validated = run.limit_proposed_monthly_cost(limit)\n\n# Main rule\nmain = rule {\n  cost_validated\n}\n</code></pre>\n<p><a href=\"https://github.com/hashicorp/terraform-guides/blob/master/governance/third-generation/cloud-agnostic/limit-proposed-monthly-cost.sentinel\" rel=\"nofollow noreferrer\">See the source of this policy here</a>.</p>\n", "OwnerUserId": "866021", "LastActivityDate": "2021-05-07T16:14:27.663", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "246162718", "PostHistoryTypeId": "2", "PostId": "67438442", "RevisionGUID": "b5c8e7e8-d23d-4cfe-bd5a-cd2e48d31550", "CreationDate": "2021-05-07T16:14:27.663", "UserId": "866021", "Text": "Hashicorp offers a product named [Sentinel][1], which allows you to write required policies for your Terraform organizations and users - note that this is a paid feature.\r\n\r\nIt's not clear which costs you're looking to restrict exactly, but with Sentinel, you could write a policy that restricts the total monthly cost of a Terraform plan like so:\r\n\r\n\r\n    # This policy uses the Sentinel tfrun import to restrict the\r\n    # proposed monthly cost that would be incurred if the current\r\n    # plan were applied\r\n    \r\n    # Import common-functions/tfrun-functions/tfrun-functions.sentinel\r\n    # with alias \"run\"\r\n    import \"tfrun-functions\" as run\r\n    # The standard decimal import\r\n    import \"decimal\"\r\n    \r\n    # Monthly Limit\r\n    limit = decimal.new(1000)\r\n    \r\n    # Call the validation function\r\n    # Warnings will be printed for violations\r\n    cost_validated = run.limit_proposed_monthly_cost(limit)\r\n    \r\n    # Main rule\r\n    main = rule {\r\n      cost_validated\r\n    }\r\n\r\n[See the source of this policy here][2].\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/cloud/sentinel/index.html\r\n  [2]: https://github.com/hashicorp/terraform-guides/blob/master/governance/third-generation/cloud-agnostic/limit-proposed-monthly-cost.sentinel", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Hashicorp offers a product named [Sentinel][1], which allows you to write required policies for your Terraform organizations and users - note that this is a paid feature. ", "keywords": ["feature"]}, {"source": "Text", "text": "It's not clear which costs you're looking to restrict exactly, but with Sentinel, you could write a policy that restricts the total monthly cost of a Terraform plan like so: # This policy uses the Sentinel tfrun import to restrict the # proposed monthly cost that would be incurred if the current # plan were applied # Import common-functions/tfrun-functions/tfrun-functions.sentinel # with alias \"run\" import \"tfrun-functions\" as run # The standard decimal import import \"decimal\" # Monthly Limit limit = decimal.new(1000) # Call the validation function # Warnings will be printed for violations cost_validated = run.limit_proposed_monthly_cost(limit) # Main rule main = rule { cost_validated } [See the source of this policy here][2]. [1]: https://www.terraform.io/docs/cloud/sentinel/index.html [2]: https://github.com/hashicorp/terraform-guides/blob/master/governance/third-generation/cloud-agnostic/limit-proposed-monthly-cost.sentinel", "keywords": ["cost", "policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "Hashicorp offers a product named Sentinel, which allows you to write required policies for your Terraform organizations and users - note that this is a paid feature. ", "keywords": ["feature"]}, {"source": "Body", "text": "It's not clear which costs you're looking to restrict exactly, but with Sentinel, you could write a policy that restricts the total monthly cost of a Terraform plan like so: See the source of this policy here.", "keywords": ["cost", "policy"]}]}], "contains-topic": true, "filtered-sentences": []}