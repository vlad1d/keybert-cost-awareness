{"Id": "62922549", "PostTypeId": "1", "CreationDate": "2020-07-15T19:34:56.677", "Score": "3", "ViewCount": "1355", "Body": "<p>I setup a Cloudfront distribution, S3 bucket, and associated policies as follows:</p>\n<pre><code>resource &quot;aws_s3_bucket&quot; &quot;front_end&quot; {\n  bucket = var.domain_name\n  acl    = &quot;public&quot;\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;front_end&quot; {\n  statement {\n    sid = &quot;AllowCloudFront&quot;\n\n    actions = [\n      &quot;s3:GetObject&quot;\n    ]\n\n    resources = [\n      &quot;${aws_s3_bucket.front_end.arn}/*&quot;\n    ]\n\n    principals {\n      type = &quot;AWS&quot;\n      identifiers = [\n        aws_cloudfront_origin_access_identity.main.iam_arn,\n      ]\n    }\n  }\n}\n\nresource &quot;aws_s3_bucket_policy&quot; &quot;front_end&quot; {\n  bucket = aws_s3_bucket.front_end.id\n  policy = data.aws_iam_policy_document.front_end.json\n}\n\nlocals {\n  origin_id = &quot;tdweb-S3-origin&quot;\n}\n\nresource &quot;aws_cloudfront_distribution&quot; &quot;main&quot; {\n  origin {\n    domain_name = aws_s3_bucket.front_end.bucket_regional_domain_name\n    origin_id = local.origin_id\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.main.cloudfront_access_identity_path\n    }\n  }\n\n  enabled = true\n  is_ipv6_enabled = true\n  default_root_object = &quot;index.html&quot;\n\n  aliases = [\n    var.domain_name,\n  ]\n\n  default_cache_behavior {\n    allowed_methods = [&quot;GET&quot;, &quot;HEAD&quot;]\n\n    cached_methods = [&quot;GET&quot;, &quot;HEAD&quot;]\n\n    target_origin_id = local.origin_id\n\n    forwarded_values {\n      query_string = false\n\n      cookies {\n        forward = &quot;none&quot;\n      }\n    }\n\n    viewer_protocol_policy = &quot;redirect-to-https&quot;\n    min_ttl = 0\n    default_ttl = 86400\n    max_ttl = 31536000\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = &quot;none&quot;\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn = aws_acm_certificate.main.arn\n    ssl_support_method = &quot;sni-only&quot;\n    minimum_protocol_version = &quot;TLSv1&quot;\n  }\n\n  custom_error_response {\n    error_code = 403\n    response_code = 200\n    error_caching_min_ttl = 0\n    response_page_path = &quot;/&quot;\n  }\n}\n\nresource &quot;aws_cloudfront_origin_access_identity&quot; &quot;main&quot; {\n}\n\nresource &quot;aws_route53_record&quot; &quot;root_domain&quot; {\n  zone_id = aws_route53_zone.external.zone_id\n  name = var.domain_name\n  type = &quot;A&quot;\n\n  alias {\n    name = aws_cloudfront_distribution.main.domain_name\n    zone_id = aws_cloudfront_distribution.main.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n</code></pre>\n<p>and I get this when I access my website from the domain:</p>\n<pre><code>&lt;Error&gt;\n&lt;Code&gt;AccessDenied&lt;/Code&gt;\n&lt;Message&gt;Access Denied&lt;/Message&gt;\n&lt;RequestId&gt;DHDW5R8Q8R8RFS1J&lt;/RequestId&gt;\n&lt;HostId&gt;CaKxdDjJ/azq9BUOePWsc1f/O+sLuoex4mtz57JbtAdAZe05v1Vwy+OjNehkiYGN2jeSOPMIO3o=&lt;/HostId&gt;\n&lt;/Error&gt;\n</code></pre>\n<p>Following the debugging steps, <a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/s3-rest-api-cloudfront-error-403/\" rel=\"nofollow noreferrer\">https://aws.amazon.com/premiumsupport/knowledge-center/s3-rest-api-cloudfront-error-403/</a>, I have check what I think is all the possible issues.</p>\n<blockquote>\n<p>If you don't configure an origin access identity (OAI), then the\nobjects must be publicly accessible or requested with AWS Signature\nVersion 4.</p>\n</blockquote>\n<p>I am using OAI.</p>\n<blockquote>\n<p>Objects in the bucket can't be encrypted by AWS Key Management Service (AWS KMS).</p>\n</blockquote>\n<p>I don't think they are. That's not enabbled.</p>\n<blockquote>\n<p>The S3 bucket policy must allow access to s3:GetObject. If the bucket policy\ngrants access, then the AWS account that owns the S3 bucket must also own the object.</p>\n</blockquote>\n<p>Yep, my policy does exactly that. There's also only one account involved.</p>\n<blockquote>\n<p>The requested objects must exist in the S3 bucket. If clients request the\nroot of your distribution, then you must define a default root object.</p>\n</blockquote>\n<p>Yep, I'm trying to get route and this config points to index.html which is in the bucket.</p>\n<blockquote>\n<p>If you configured an OAI, then the OAI must be included in the S3\nbucket policy. If you didn't configure an OAI, then Amazon S3 block\npublic access settings must be disabled.</p>\n</blockquote>\n<p>I did configure OAI to the best of my knowledge, this is the most likely culprit since I'm the least familiar with this step but I think it's configured. I followed the docs on the Terraform website so much of this is copied from there.</p>\n<p>Anyone know what I'm missing here?</p>\n<p>Edit: this is the json generated by this terraform.</p>\n<p>{\n&quot;Version&quot;: &quot;2012-10-17&quot;,\n&quot;Statement&quot;: [\n{\n&quot;Sid&quot;: &quot;AllowCloudFront&quot;,\n&quot;Effect&quot;: &quot;Allow&quot;,\n&quot;Principal&quot;: {\n&quot;AWS&quot;: &quot;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E2I7BV2A1PTW72&quot;\n},\n&quot;Action&quot;: &quot;s3:GetObject&quot;,\n&quot;Resource&quot;: &quot;arn:aws:s3:::my-bucket-name/*&quot;\n}\n]\n}</p>\n", "OwnerUserId": "3433802", "LastEditorUserId": "8343484", "LastEditDate": "2020-07-16T17:09:14.997", "LastActivityDate": "2020-07-16T17:09:14.997", "Title": "Why does this Terraform managed AWS Cloudfront distribution give error 403 AccessDenied?", "Tags": "<amazon-web-services><amazon-s3><terraform><amazon-cloudfront>", "AnswerCount": "0", "CommentCount": "12", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "111272670", "PostId": "62922549", "Score": "0", "Text": "Could you post what the actual bucket policy in json format look like?", "CreationDate": "2020-07-15T19:55:47.627", "UserId": "10692493", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Could you post what the actual bucket policy in json format look like?", "keywords": ["policy"]}]}, {"Id": "111273214", "PostId": "62922549", "Score": "0", "Text": "Sure. I just added it.", "CreationDate": "2020-07-15T20:19:01.347", "UserId": "3433802", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111273376", "PostId": "62922549", "Score": "0", "Text": "Ok, it looks good to me. Can you invalidate the CF distribution and try again?", "CreationDate": "2020-07-15T20:25:54.653", "UserId": "10692493", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111274501", "PostId": "62922549", "Score": "0", "Text": "Do you mean just disable it and then reenable it? Or is invalidate something different?", "CreationDate": "2020-07-15T21:11:34.497", "UserId": "3433802", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111274511", "PostId": "62922549", "Score": "0", "Text": "https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html#Invalidation_Requests", "CreationDate": "2020-07-15T21:12:14.040", "UserId": "10692493", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111274527", "PostId": "62922549", "Score": "0", "Text": "Just do a `/*` invalidation", "CreationDate": "2020-07-15T21:12:44.350", "UserId": "10692493", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111274687", "PostId": "62922549", "Score": "0", "Text": "Oh that. Yes. I've done that a lot for /*. I'll run it now though.", "CreationDate": "2020-07-15T21:20:21.297", "UserId": "3433802", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111274998", "PostId": "62922549", "Score": "0", "Text": "I ran another. Still access denied.", "CreationDate": "2020-07-15T21:33:43.210", "UserId": "3433802", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111275102", "PostId": "62922549", "Score": "0", "Text": "Does the resource you are trying to access exists?", "CreationDate": "2020-07-15T21:38:54.757", "UserId": "10692493", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111275356", "PostId": "62922549", "Score": "0", "Text": "Yeah. There's currently just one item in the bucket and it's index.html.", "CreationDate": "2020-07-15T21:50:33.137", "UserId": "3433802", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111529557", "PostId": "62922549", "Score": "0", "Text": "@mmachenry Can you try to use S3 bucket ID as `origin_id` in `aws_cloudfront_distribution`? Like this: `origin_id   = aws_s3_bucket.front_end.id`", "CreationDate": "2020-07-24T08:18:00.420", "UserId": "4334928", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127310668", "PostId": "62922549", "Score": "0", "Text": "did you sort it out? having the same issue", "CreationDate": "2022-04-28T22:38:39.580", "UserId": "9785462", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "226703113", "PostHistoryTypeId": "2", "PostId": "62922549", "RevisionGUID": "244250de-8f86-4c13-aea4-a9b4a1b1e6f2", "CreationDate": "2020-07-15T19:34:56.677", "UserId": "3433802", "Text": "I setup a Cloudfront distribution, S3 bucket, and associated policies as follows:\r\n\r\n    resource \"aws_s3_bucket\" \"front_end\" {\r\n      bucket = var.domain_name\r\n      acl    = \"public\"\r\n    }\r\n    \r\n    data \"aws_iam_policy_document\" \"front_end\" {\r\n      statement {\r\n        sid = \"AllowCloudFront\"\r\n    \r\n        actions = [\r\n          \"s3:GetObject\"\r\n        ]\r\n    \r\n        resources = [\r\n          \"${aws_s3_bucket.front_end.arn}/*\"\r\n        ]\r\n    \r\n        principals {\r\n          type = \"AWS\"\r\n          identifiers = [\r\n            aws_cloudfront_origin_access_identity.main.iam_arn,\r\n          ]\r\n        }\r\n      }\r\n    }\r\n    \r\n    resource \"aws_s3_bucket_policy\" \"front_end\" {\r\n      bucket = aws_s3_bucket.front_end.id\r\n      policy = data.aws_iam_policy_document.front_end.json\r\n    }\r\n    \r\n    locals {\r\n      origin_id = \"tdweb-S3-origin\"\r\n    }\r\n    \r\n    resource \"aws_cloudfront_distribution\" \"main\" {\r\n      origin {\r\n        domain_name = aws_s3_bucket.front_end.bucket_regional_domain_name\r\n        origin_id = local.origin_id\r\n    \r\n        s3_origin_config {\r\n          origin_access_identity = aws_cloudfront_origin_access_identity.main.cloudfront_access_identity_path\r\n        }\r\n      }\r\n    \r\n      enabled = true\r\n      is_ipv6_enabled = true\r\n      default_root_object = \"index.html\"\r\n    \r\n      aliases = [\r\n        var.domain_name,\r\n      ]\r\n    \r\n      default_cache_behavior {\r\n        allowed_methods = [\"GET\", \"HEAD\"]\r\n    \r\n        cached_methods = [\"GET\", \"HEAD\"]\r\n    \r\n        target_origin_id = local.origin_id\r\n    \r\n        forwarded_values {\r\n          query_string = false\r\n    \r\n          cookies {\r\n            forward = \"none\"\r\n          }\r\n        }\r\n    \r\n        viewer_protocol_policy = \"redirect-to-https\"\r\n        min_ttl = 0\r\n        default_ttl = 86400\r\n        max_ttl = 31536000\r\n      }\r\n    \r\n      restrictions {\r\n        geo_restriction {\r\n          restriction_type = \"none\"\r\n        }\r\n      }\r\n    \r\n      viewer_certificate {\r\n        acm_certificate_arn = aws_acm_certificate.main.arn\r\n        ssl_support_method = \"sni-only\"\r\n        minimum_protocol_version = \"TLSv1\"\r\n      }\r\n    \r\n      custom_error_response {\r\n        error_code = 403\r\n        response_code = 200\r\n        error_caching_min_ttl = 0\r\n        response_page_path = \"/\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_cloudfront_origin_access_identity\" \"main\" {\r\n    }\r\n    \r\n    resource \"aws_route53_record\" \"root_domain\" {\r\n      zone_id = aws_route53_zone.external.zone_id\r\n      name = var.domain_name\r\n      type = \"A\"\r\n    \r\n      alias {\r\n        name = aws_cloudfront_distribution.main.domain_name\r\n        zone_id = aws_cloudfront_distribution.main.hosted_zone_id\r\n        evaluate_target_health = false\r\n      }\r\n    }\r\n\r\nand I get this when I access my website from the domain:\r\n\r\n    <Error>\r\n    <Code>AccessDenied</Code>\r\n    <Message>Access Denied</Message>\r\n    <RequestId>DHDW5R8Q8R8RFS1J</RequestId>\r\n    <HostId>CaKxdDjJ/azq9BUOePWsc1f/O+sLuoex4mtz57JbtAdAZe05v1Vwy+OjNehkiYGN2jeSOPMIO3o=</HostId>\r\n    </Error>\r\n\r\nFollowing the debugging steps, https://aws.amazon.com/premiumsupport/knowledge-center/s3-rest-api-cloudfront-error-403/, I have check what I think is all the possible issues.\r\n\r\n> If you don't configure an origin access identity (OAI), then the\r\n> objects must be publicly accessible or requested with AWS Signature\r\n> Version 4.\r\n\r\nI am using OAI.\r\n\r\n> Objects in the bucket can't be encrypted by AWS Key Management Service (AWS KMS).\r\n\r\nI don't think they are. That's not enabbled.\r\n\r\n> The S3 bucket policy must allow access to s3:GetObject. If the bucket policy\r\n> grants access, then the AWS account that owns the S3 bucket must also own the object.\r\n\r\nYep, my policy does exactly that. There's also only one account involved.\r\n\r\n> The requested objects must exist in the S3 bucket. If clients request the\r\n> root of your distribution, then you must define a default root object.\r\n\r\nYep, I'm trying to get route and this config points to index.html which is in the bucket.\r\n\r\n> If you configured an OAI, then the OAI must be included in the S3\r\n> bucket policy. If you didn't configure an OAI, then Amazon S3 block\r\n> public access settings must be disabled.\r\n\r\nI did configure OAI to the best of my knowledge, this is the most likely culprit since I'm the least familiar with this step but I think it's configured. I followed the docs on the Terraform website so much of this is copied from there.\r\n\r\nAnyone know what I'm missing here?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I setup a Cloudfront distribution, S3 bucket, and associated policies as follows: resource \"aws_s3_bucket\" \"front_end\" { bucket = var.domain_name acl = \"public\" } data \"aws_iam_policy_document\" \"front_end\" { statement { sid = \"AllowCloudFront\" actions = [ \"s3:GetObject\" ] resources = [ \"${aws_s3_bucket.front_end.arn}/*\" ] principals { type = \"AWS\" identifiers = [ aws_cloudfront_origin_access_identity.main.iam_arn, ] } } } resource \"aws_s3_bucket_policy\" \"front_end\" { bucket = aws_s3_bucket.front_end.id policy = data.aws_iam_policy_document.front_end.json } locals { origin_id = \"tdweb-S3-origin\" } resource \"aws_cloudfront_distribution\" \"main\" { origin { domain_name = aws_s3_bucket.front_end.bucket_regional_domain_name origin_id = local.origin_id s3_origin_config { origin_access_identity = aws_cloudfront_origin_access_identity.main.cloudfront_access_identity_path } } enabled = true is_ipv6_enabled = true default_root_object = \"index.html\" aliases = [ var.domain_name, ] default_cache_behavior { allowed_methods = [\"GET\", \"HEAD\"] cached_methods = [\"GET\", \"HEAD\"] target_origin_id = local.origin_id forwarded_values { query_string = false cookies { forward = \"none\" } } viewer_protocol_policy = \"redirect-to-https\" min_ttl = 0 default_ttl = 86400 max_ttl = 31536000 } restrictions { geo_restriction { restriction_type = \"none\" } } viewer_certificate { acm_certificate_arn = aws_acm_certificate.main.arn ssl_support_method = \"sni-only\" minimum_protocol_version = \"TLSv1\" } custom_error_response { error_code = 403 response_code = 200 error_caching_min_ttl = 0 response_page_path = \"/\" } } resource \"aws_cloudfront_origin_access_identity\" \"main\" { } resource \"aws_route53_record\" \"root_domain\" { zone_id = aws_route53_zone.external.zone_id name = var.domain_name type = \"A\" alias { name = aws_cloudfront_distribution.main.domain_name zone_id = aws_cloudfront_distribution.main.hosted_zone_id evaluate_target_health = false } } and I get this when I access my website from the domain: AccessDenied Access Denied DHDW5R8Q8R8RFS1J CaKxdDjJ/azq9BUOePWsc1f/O+sLuoex4mtz57JbtAdAZe05v1Vwy+OjNehkiYGN2jeSOPMIO3o= Following the debugging steps, https://aws.amazon.com/premiumsupport/knowledge-center/s3-rest-api-cloudfront-error-403/, I have check what I think is all the possible issues. ", "keywords": ["domain", "policy"]}, {"source": "Text", "text": "> The S3 bucket policy must allow access to s3:GetObject. ", "keywords": ["policy"]}, {"source": "Text", "text": "If the bucket policy > grants access, then the AWS account that owns the S3 bucket must also own the object. ", "keywords": ["policy"]}, {"source": "Text", "text": "Yep, my policy does exactly that. ", "keywords": ["policy"]}, {"source": "Text", "text": "> If you configured an OAI, then the OAI must be included in the S3 > bucket policy. ", "keywords": ["policy"]}]}, {"Id": "226703114", "PostHistoryTypeId": "1", "PostId": "62922549", "RevisionGUID": "244250de-8f86-4c13-aea4-a9b4a1b1e6f2", "CreationDate": "2020-07-15T19:34:56.677", "UserId": "3433802", "Text": "Why does this Terraform managed AWS Cloudfront distribution give error 403 AccessDenied?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "226703115", "PostHistoryTypeId": "3", "PostId": "62922549", "RevisionGUID": "244250de-8f86-4c13-aea4-a9b4a1b1e6f2", "CreationDate": "2020-07-15T19:34:56.677", "UserId": "3433802", "Text": "<amazon-web-services><amazon-s3><terraform><amazon-cloudfront>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "226705549", "PostHistoryTypeId": "5", "PostId": "62922549", "RevisionGUID": "306f22be-9f6c-4c1b-8e14-2742a40ef424", "CreationDate": "2020-07-15T20:18:37.760", "UserId": "3433802", "Comment": "Adding requested info", "Text": "I setup a Cloudfront distribution, S3 bucket, and associated policies as follows:\r\n\r\n    resource \"aws_s3_bucket\" \"front_end\" {\r\n      bucket = var.domain_name\r\n      acl    = \"public\"\r\n    }\r\n    \r\n    data \"aws_iam_policy_document\" \"front_end\" {\r\n      statement {\r\n        sid = \"AllowCloudFront\"\r\n    \r\n        actions = [\r\n          \"s3:GetObject\"\r\n        ]\r\n    \r\n        resources = [\r\n          \"${aws_s3_bucket.front_end.arn}/*\"\r\n        ]\r\n    \r\n        principals {\r\n          type = \"AWS\"\r\n          identifiers = [\r\n            aws_cloudfront_origin_access_identity.main.iam_arn,\r\n          ]\r\n        }\r\n      }\r\n    }\r\n    \r\n    resource \"aws_s3_bucket_policy\" \"front_end\" {\r\n      bucket = aws_s3_bucket.front_end.id\r\n      policy = data.aws_iam_policy_document.front_end.json\r\n    }\r\n    \r\n    locals {\r\n      origin_id = \"tdweb-S3-origin\"\r\n    }\r\n    \r\n    resource \"aws_cloudfront_distribution\" \"main\" {\r\n      origin {\r\n        domain_name = aws_s3_bucket.front_end.bucket_regional_domain_name\r\n        origin_id = local.origin_id\r\n    \r\n        s3_origin_config {\r\n          origin_access_identity = aws_cloudfront_origin_access_identity.main.cloudfront_access_identity_path\r\n        }\r\n      }\r\n    \r\n      enabled = true\r\n      is_ipv6_enabled = true\r\n      default_root_object = \"index.html\"\r\n    \r\n      aliases = [\r\n        var.domain_name,\r\n      ]\r\n    \r\n      default_cache_behavior {\r\n        allowed_methods = [\"GET\", \"HEAD\"]\r\n    \r\n        cached_methods = [\"GET\", \"HEAD\"]\r\n    \r\n        target_origin_id = local.origin_id\r\n    \r\n        forwarded_values {\r\n          query_string = false\r\n    \r\n          cookies {\r\n            forward = \"none\"\r\n          }\r\n        }\r\n    \r\n        viewer_protocol_policy = \"redirect-to-https\"\r\n        min_ttl = 0\r\n        default_ttl = 86400\r\n        max_ttl = 31536000\r\n      }\r\n    \r\n      restrictions {\r\n        geo_restriction {\r\n          restriction_type = \"none\"\r\n        }\r\n      }\r\n    \r\n      viewer_certificate {\r\n        acm_certificate_arn = aws_acm_certificate.main.arn\r\n        ssl_support_method = \"sni-only\"\r\n        minimum_protocol_version = \"TLSv1\"\r\n      }\r\n    \r\n      custom_error_response {\r\n        error_code = 403\r\n        response_code = 200\r\n        error_caching_min_ttl = 0\r\n        response_page_path = \"/\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_cloudfront_origin_access_identity\" \"main\" {\r\n    }\r\n    \r\n    resource \"aws_route53_record\" \"root_domain\" {\r\n      zone_id = aws_route53_zone.external.zone_id\r\n      name = var.domain_name\r\n      type = \"A\"\r\n    \r\n      alias {\r\n        name = aws_cloudfront_distribution.main.domain_name\r\n        zone_id = aws_cloudfront_distribution.main.hosted_zone_id\r\n        evaluate_target_health = false\r\n      }\r\n    }\r\n\r\nand I get this when I access my website from the domain:\r\n\r\n    <Error>\r\n    <Code>AccessDenied</Code>\r\n    <Message>Access Denied</Message>\r\n    <RequestId>DHDW5R8Q8R8RFS1J</RequestId>\r\n    <HostId>CaKxdDjJ/azq9BUOePWsc1f/O+sLuoex4mtz57JbtAdAZe05v1Vwy+OjNehkiYGN2jeSOPMIO3o=</HostId>\r\n    </Error>\r\n\r\nFollowing the debugging steps, https://aws.amazon.com/premiumsupport/knowledge-center/s3-rest-api-cloudfront-error-403/, I have check what I think is all the possible issues.\r\n\r\n> If you don't configure an origin access identity (OAI), then the\r\n> objects must be publicly accessible or requested with AWS Signature\r\n> Version 4.\r\n\r\nI am using OAI.\r\n\r\n> Objects in the bucket can't be encrypted by AWS Key Management Service (AWS KMS).\r\n\r\nI don't think they are. That's not enabbled.\r\n\r\n> The S3 bucket policy must allow access to s3:GetObject. If the bucket policy\r\n> grants access, then the AWS account that owns the S3 bucket must also own the object.\r\n\r\nYep, my policy does exactly that. There's also only one account involved.\r\n\r\n> The requested objects must exist in the S3 bucket. If clients request the\r\n> root of your distribution, then you must define a default root object.\r\n\r\nYep, I'm trying to get route and this config points to index.html which is in the bucket.\r\n\r\n> If you configured an OAI, then the OAI must be included in the S3\r\n> bucket policy. If you didn't configure an OAI, then Amazon S3 block\r\n> public access settings must be disabled.\r\n\r\nI did configure OAI to the best of my knowledge, this is the most likely culprit since I'm the least familiar with this step but I think it's configured. I followed the docs on the Terraform website so much of this is copied from there.\r\n\r\nAnyone know what I'm missing here?\r\n\r\nEdit: this is the json generated by this terraform. \r\n\r\n   {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n        {\r\n          \"Sid\": \"AllowCloudFront\",\r\n          \"Effect\": \"Allow\",\r\n          \"Principal\": {\r\n              \"AWS\": \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E2I7BV2A1PTW72\"\r\n          },\r\n          \"Action\": \"s3:GetObject\",\r\n          \"Resource\": \"arn:aws:s3:::towerdesign.io/*\"\r\n        }\r\n      ]\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I setup a Cloudfront distribution, S3 bucket, and associated policies as follows: resource \"aws_s3_bucket\" \"front_end\" { bucket = var.domain_name acl = \"public\" } data \"aws_iam_policy_document\" \"front_end\" { statement { sid = \"AllowCloudFront\" actions = [ \"s3:GetObject\" ] resources = [ \"${aws_s3_bucket.front_end.arn}/*\" ] principals { type = \"AWS\" identifiers = [ aws_cloudfront_origin_access_identity.main.iam_arn, ] } } } resource \"aws_s3_bucket_policy\" \"front_end\" { bucket = aws_s3_bucket.front_end.id policy = data.aws_iam_policy_document.front_end.json } locals { origin_id = \"tdweb-S3-origin\" } resource \"aws_cloudfront_distribution\" \"main\" { origin { domain_name = aws_s3_bucket.front_end.bucket_regional_domain_name origin_id = local.origin_id s3_origin_config { origin_access_identity = aws_cloudfront_origin_access_identity.main.cloudfront_access_identity_path } } enabled = true is_ipv6_enabled = true default_root_object = \"index.html\" aliases = [ var.domain_name, ] default_cache_behavior { allowed_methods = [\"GET\", \"HEAD\"] cached_methods = [\"GET\", \"HEAD\"] target_origin_id = local.origin_id forwarded_values { query_string = false cookies { forward = \"none\" } } viewer_protocol_policy = \"redirect-to-https\" min_ttl = 0 default_ttl = 86400 max_ttl = 31536000 } restrictions { geo_restriction { restriction_type = \"none\" } } viewer_certificate { acm_certificate_arn = aws_acm_certificate.main.arn ssl_support_method = \"sni-only\" minimum_protocol_version = \"TLSv1\" } custom_error_response { error_code = 403 response_code = 200 error_caching_min_ttl = 0 response_page_path = \"/\" } } resource \"aws_cloudfront_origin_access_identity\" \"main\" { } resource \"aws_route53_record\" \"root_domain\" { zone_id = aws_route53_zone.external.zone_id name = var.domain_name type = \"A\" alias { name = aws_cloudfront_distribution.main.domain_name zone_id = aws_cloudfront_distribution.main.hosted_zone_id evaluate_target_health = false } } and I get this when I access my website from the domain: AccessDenied Access Denied DHDW5R8Q8R8RFS1J CaKxdDjJ/azq9BUOePWsc1f/O+sLuoex4mtz57JbtAdAZe05v1Vwy+OjNehkiYGN2jeSOPMIO3o= Following the debugging steps, https://aws.amazon.com/premiumsupport/knowledge-center/s3-rest-api-cloudfront-error-403/, I have check what I think is all the possible issues. ", "keywords": ["domain", "policy"]}, {"source": "Text", "text": "> The S3 bucket policy must allow access to s3:GetObject. ", "keywords": ["policy"]}, {"source": "Text", "text": "If the bucket policy > grants access, then the AWS account that owns the S3 bucket must also own the object. ", "keywords": ["policy"]}, {"source": "Text", "text": "Yep, my policy does exactly that. ", "keywords": ["policy"]}, {"source": "Text", "text": "> If you configured an OAI, then the OAI must be included in the S3 > bucket policy. ", "keywords": ["policy"]}]}, {"Id": "226775388", "PostHistoryTypeId": "5", "PostId": "62922549", "RevisionGUID": "fa703f7c-1a3e-4f02-984b-f629f839a47b", "CreationDate": "2020-07-16T17:09:14.997", "UserId": "8343484", "Comment": "I removed the bucket name from the S3 bucket ARN because the ACL is set to public and that's just enough information to cause some excessive cost.", "Text": "I setup a Cloudfront distribution, S3 bucket, and associated policies as follows:\r\n\r\n    resource \"aws_s3_bucket\" \"front_end\" {\r\n      bucket = var.domain_name\r\n      acl    = \"public\"\r\n    }\r\n    \r\n    data \"aws_iam_policy_document\" \"front_end\" {\r\n      statement {\r\n        sid = \"AllowCloudFront\"\r\n    \r\n        actions = [\r\n          \"s3:GetObject\"\r\n        ]\r\n    \r\n        resources = [\r\n          \"${aws_s3_bucket.front_end.arn}/*\"\r\n        ]\r\n    \r\n        principals {\r\n          type = \"AWS\"\r\n          identifiers = [\r\n            aws_cloudfront_origin_access_identity.main.iam_arn,\r\n          ]\r\n        }\r\n      }\r\n    }\r\n    \r\n    resource \"aws_s3_bucket_policy\" \"front_end\" {\r\n      bucket = aws_s3_bucket.front_end.id\r\n      policy = data.aws_iam_policy_document.front_end.json\r\n    }\r\n    \r\n    locals {\r\n      origin_id = \"tdweb-S3-origin\"\r\n    }\r\n    \r\n    resource \"aws_cloudfront_distribution\" \"main\" {\r\n      origin {\r\n        domain_name = aws_s3_bucket.front_end.bucket_regional_domain_name\r\n        origin_id = local.origin_id\r\n    \r\n        s3_origin_config {\r\n          origin_access_identity = aws_cloudfront_origin_access_identity.main.cloudfront_access_identity_path\r\n        }\r\n      }\r\n    \r\n      enabled = true\r\n      is_ipv6_enabled = true\r\n      default_root_object = \"index.html\"\r\n    \r\n      aliases = [\r\n        var.domain_name,\r\n      ]\r\n    \r\n      default_cache_behavior {\r\n        allowed_methods = [\"GET\", \"HEAD\"]\r\n    \r\n        cached_methods = [\"GET\", \"HEAD\"]\r\n    \r\n        target_origin_id = local.origin_id\r\n    \r\n        forwarded_values {\r\n          query_string = false\r\n    \r\n          cookies {\r\n            forward = \"none\"\r\n          }\r\n        }\r\n    \r\n        viewer_protocol_policy = \"redirect-to-https\"\r\n        min_ttl = 0\r\n        default_ttl = 86400\r\n        max_ttl = 31536000\r\n      }\r\n    \r\n      restrictions {\r\n        geo_restriction {\r\n          restriction_type = \"none\"\r\n        }\r\n      }\r\n    \r\n      viewer_certificate {\r\n        acm_certificate_arn = aws_acm_certificate.main.arn\r\n        ssl_support_method = \"sni-only\"\r\n        minimum_protocol_version = \"TLSv1\"\r\n      }\r\n    \r\n      custom_error_response {\r\n        error_code = 403\r\n        response_code = 200\r\n        error_caching_min_ttl = 0\r\n        response_page_path = \"/\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_cloudfront_origin_access_identity\" \"main\" {\r\n    }\r\n    \r\n    resource \"aws_route53_record\" \"root_domain\" {\r\n      zone_id = aws_route53_zone.external.zone_id\r\n      name = var.domain_name\r\n      type = \"A\"\r\n    \r\n      alias {\r\n        name = aws_cloudfront_distribution.main.domain_name\r\n        zone_id = aws_cloudfront_distribution.main.hosted_zone_id\r\n        evaluate_target_health = false\r\n      }\r\n    }\r\n\r\nand I get this when I access my website from the domain:\r\n\r\n    <Error>\r\n    <Code>AccessDenied</Code>\r\n    <Message>Access Denied</Message>\r\n    <RequestId>DHDW5R8Q8R8RFS1J</RequestId>\r\n    <HostId>CaKxdDjJ/azq9BUOePWsc1f/O+sLuoex4mtz57JbtAdAZe05v1Vwy+OjNehkiYGN2jeSOPMIO3o=</HostId>\r\n    </Error>\r\n\r\nFollowing the debugging steps, https://aws.amazon.com/premiumsupport/knowledge-center/s3-rest-api-cloudfront-error-403/, I have check what I think is all the possible issues.\r\n\r\n> If you don't configure an origin access identity (OAI), then the\r\n> objects must be publicly accessible or requested with AWS Signature\r\n> Version 4.\r\n\r\nI am using OAI.\r\n\r\n> Objects in the bucket can't be encrypted by AWS Key Management Service (AWS KMS).\r\n\r\nI don't think they are. That's not enabbled.\r\n\r\n> The S3 bucket policy must allow access to s3:GetObject. If the bucket policy\r\n> grants access, then the AWS account that owns the S3 bucket must also own the object.\r\n\r\nYep, my policy does exactly that. There's also only one account involved.\r\n\r\n> The requested objects must exist in the S3 bucket. If clients request the\r\n> root of your distribution, then you must define a default root object.\r\n\r\nYep, I'm trying to get route and this config points to index.html which is in the bucket.\r\n\r\n> If you configured an OAI, then the OAI must be included in the S3\r\n> bucket policy. If you didn't configure an OAI, then Amazon S3 block\r\n> public access settings must be disabled.\r\n\r\nI did configure OAI to the best of my knowledge, this is the most likely culprit since I'm the least familiar with this step but I think it's configured. I followed the docs on the Terraform website so much of this is copied from there.\r\n\r\nAnyone know what I'm missing here?\r\n\r\nEdit: this is the json generated by this terraform. \r\n\r\n   {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n        {\r\n          \"Sid\": \"AllowCloudFront\",\r\n          \"Effect\": \"Allow\",\r\n          \"Principal\": {\r\n              \"AWS\": \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E2I7BV2A1PTW72\"\r\n          },\r\n          \"Action\": \"s3:GetObject\",\r\n          \"Resource\": \"arn:aws:s3:::my-bucket-name/*\"\r\n        }\r\n      ]\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I setup a Cloudfront distribution, S3 bucket, and associated policies as follows: resource \"aws_s3_bucket\" \"front_end\" { bucket = var.domain_name acl = \"public\" } data \"aws_iam_policy_document\" \"front_end\" { statement { sid = \"AllowCloudFront\" actions = [ \"s3:GetObject\" ] resources = [ \"${aws_s3_bucket.front_end.arn}/*\" ] principals { type = \"AWS\" identifiers = [ aws_cloudfront_origin_access_identity.main.iam_arn, ] } } } resource \"aws_s3_bucket_policy\" \"front_end\" { bucket = aws_s3_bucket.front_end.id policy = data.aws_iam_policy_document.front_end.json } locals { origin_id = \"tdweb-S3-origin\" } resource \"aws_cloudfront_distribution\" \"main\" { origin { domain_name = aws_s3_bucket.front_end.bucket_regional_domain_name origin_id = local.origin_id s3_origin_config { origin_access_identity = aws_cloudfront_origin_access_identity.main.cloudfront_access_identity_path } } enabled = true is_ipv6_enabled = true default_root_object = \"index.html\" aliases = [ var.domain_name, ] default_cache_behavior { allowed_methods = [\"GET\", \"HEAD\"] cached_methods = [\"GET\", \"HEAD\"] target_origin_id = local.origin_id forwarded_values { query_string = false cookies { forward = \"none\" } } viewer_protocol_policy = \"redirect-to-https\" min_ttl = 0 default_ttl = 86400 max_ttl = 31536000 } restrictions { geo_restriction { restriction_type = \"none\" } } viewer_certificate { acm_certificate_arn = aws_acm_certificate.main.arn ssl_support_method = \"sni-only\" minimum_protocol_version = \"TLSv1\" } custom_error_response { error_code = 403 response_code = 200 error_caching_min_ttl = 0 response_page_path = \"/\" } } resource \"aws_cloudfront_origin_access_identity\" \"main\" { } resource \"aws_route53_record\" \"root_domain\" { zone_id = aws_route53_zone.external.zone_id name = var.domain_name type = \"A\" alias { name = aws_cloudfront_distribution.main.domain_name zone_id = aws_cloudfront_distribution.main.hosted_zone_id evaluate_target_health = false } } and I get this when I access my website from the domain: AccessDenied Access Denied DHDW5R8Q8R8RFS1J CaKxdDjJ/azq9BUOePWsc1f/O+sLuoex4mtz57JbtAdAZe05v1Vwy+OjNehkiYGN2jeSOPMIO3o= Following the debugging steps, https://aws.amazon.com/premiumsupport/knowledge-center/s3-rest-api-cloudfront-error-403/, I have check what I think is all the possible issues. ", "keywords": ["domain", "policy"]}, {"source": "Text", "text": "> The S3 bucket policy must allow access to s3:GetObject. ", "keywords": ["policy"]}, {"source": "Text", "text": "If the bucket policy > grants access, then the AWS account that owns the S3 bucket must also own the object. ", "keywords": ["policy"]}, {"source": "Text", "text": "Yep, my policy does exactly that. ", "keywords": ["policy"]}, {"source": "Text", "text": "> If you configured an OAI, then the OAI must be included in the S3 > bucket policy. ", "keywords": ["policy"]}, {"source": "Comment", "text": "I removed the bucket name from the S3 bucket ARN because the ACL is set to public and that's just enough information to cause some excessive cost.", "keywords": ["cost"]}]}, {"Id": "226775389", "PostHistoryTypeId": "24", "PostId": "62922549", "RevisionGUID": "fa703f7c-1a3e-4f02-984b-f629f839a47b", "CreationDate": "2020-07-16T17:09:14.997", "Comment": "Proposed by 8343484 approved by 3433802 edit id of 4888171", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I setup a Cloudfront distribution, S3 bucket, and associated policies as follows: and I get this when I access my website from the domain: Following the debugging steps, https://aws.amazon.com/premiumsupport/knowledge-center/s3-rest-api-cloudfront-error-403/, I have check what I think is all the possible issues. ", "keywords": ["domain"]}, {"source": "Body", "text": "The S3 bucket policy must allow access to s3:GetObject. ", "keywords": ["policy"]}, {"source": "Body", "text": "If the bucket policy grants access, then the AWS account that owns the S3 bucket must also own the object. ", "keywords": ["policy"]}, {"source": "Body", "text": "Yep, my policy does exactly that. ", "keywords": ["policy"]}, {"source": "Body", "text": "If you configured an OAI, then the OAI must be included in the S3 bucket policy. ", "keywords": ["policy"]}]}