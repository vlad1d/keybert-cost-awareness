{"Id": "69658994", "PostTypeId": "1", "CreationDate": "2021-10-21T09:03:23.023", "Score": "0", "ViewCount": "2711", "Body": "<p>Following this <a href=\"https://github.com/bholzer/AutoBlenderRender\" rel=\"nofollow noreferrer\">Github repo</a>, the user pool domain <code>farm_users</code> is created yet <code>terraform apply</code>returns this error. Tried <code>destroy</code>. Tried deleting the user pool domain in the aws console and repeating <code>apply</code>.</p>\n<pre><code>\u2577\n\u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool.\n\u2502 \n\u2502   with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain,\n\u2502   on modules/api/main.tf line 55, in resource &quot;aws_cognito_user_pool_domain&quot; &quot;farm_users_pool_domain&quot;:\n\u2502   55: resource &quot;aws_cognito_user_pool_domain&quot; &quot;farm_users_pool_domain&quot; {\n\u2502 \n</code></pre>\n<p>After running <code>apply</code>:</p>\n<p><code>$ aws cognito-idp describe-user-pool-domain --domain &quot;fupdomain&quot;</code></p>\n<pre><code>An error occurred (ResourceNotFoundException) when calling the DescribeUserPoolDomain operation: User pool domain fupdomain does not exist in this account.\n</code></pre>\n<p><img src=\"https://i.stack.imgur.com/RSeE6.png\" alt=\"screenshot after running apply\" /></p>\n<p><code>main.tf</code></p>\n<pre><code>provider &quot;aws&quot; {\n  version = &quot;~&gt; 2.31&quot;\n  region = var.region\n}\n\ndata &quot;aws_caller_identity&quot; &quot;current&quot; {}\n\nresource &quot;random_string&quot; &quot;build_id&quot; {\n  length = 16\n  special = false\n  upper = false\n  number = false\n}\n\nmodule &quot;network&quot; {\n  source = &quot;./modules/network&quot;\n\n  availability_zone = var.availability_zone\n  vpc_cidr = var.vpc_cidr\n}\n\nmodule &quot;node_iam_role&quot; {\n  source = &quot;./modules/node_iam_role&quot;\n}\n\nresource &quot;aws_s3_bucket&quot; &quot;render_bucket&quot; {\n  bucket = &quot;${random_string.build_id.result}-render-data&quot;\n  acl    = &quot;private&quot;\n}\n\n# Stores server-side code bundles. i.e. Worker node and lambda layer\nresource &quot;aws_s3_bucket&quot; &quot;code_bundles_bucket&quot; {\n  bucket = &quot;${random_string.build_id.result}-code-bundles&quot;\n  acl    = &quot;private&quot;\n}\n\n# Stores and serves javascript client\nresource &quot;aws_s3_bucket&quot; &quot;client_bucket&quot; {\n  bucket = &quot;${random_string.build_id.result}-client-bucket&quot;\n  acl    = &quot;public-read&quot;\n\n  website {\n    index_document = &quot;index.html&quot;\n    error_document = &quot;error.html&quot;\n  }\n}\n\n# Code bundles\n\ndata &quot;archive_file&quot; &quot;worker_node_code&quot; {\n  type = &quot;zip&quot;\n  source_dir = &quot;${path.root}/src/farm_worker&quot;\n  output_path = &quot;${path.root}/src/bundles/farm_worker.zip&quot;\n}\n\nresource &quot;aws_s3_bucket_object&quot; &quot;worker_code_bundle&quot; {\n  bucket = aws_s3_bucket.code_bundles_bucket.id\n  key = &quot;farm_worker.zip&quot;\n  source = &quot;${path.root}/src/bundles/farm_worker.zip&quot;\n\n  depends_on = [data.archive_file.worker_node_code]\n}\n\n# Security groups for the worker nodes\n\nresource &quot;aws_security_group&quot; &quot;ssh&quot; {\n  name = &quot;allow_ssh&quot;\n  vpc_id = module.network.vpc_id\n\n  ingress {\n    from_port = 22\n    to_port = 22\n    protocol = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  egress {\n    from_port = 0\n    to_port = 0\n    protocol = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n}\n\nresource &quot;aws_security_group&quot; &quot;nfs&quot; {\n  name = &quot;NFS&quot;\n  vpc_id = module.network.vpc_id\n\n  ingress {\n    from_port = 2049\n    to_port = 2049\n    protocol = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  egress {\n    from_port = 0\n    to_port = 0\n    protocol = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n}\n\n# Build queues for project init and frame rendering\n\nresource &quot;aws_sqs_queue&quot; &quot;frame_render_deadletter&quot; {\n  name = &quot;frame_render_deadletter_queue&quot;\n}\n\nresource &quot;aws_sqs_queue&quot; &quot;frame_render_queue&quot; {\n  name                       = &quot;frame_render_queue&quot;\n  visibility_timeout_seconds = 7000\n  redrive_policy             = &quot;{\\&quot;deadLetterTargetArn\\&quot;:\\&quot;${aws_sqs_queue.frame_render_deadletter.arn}\\&quot;,\\&quot;maxReceiveCount\\&quot;:5}&quot;\n}\n\nresource &quot;aws_sqs_queue&quot; &quot;project_init_queue&quot; {\n  name                       = &quot;project_init_queue&quot;\n  visibility_timeout_seconds = 7000\n}\n\n# EFS for shared storage during baking and rendering\n\nresource &quot;aws_efs_file_system&quot; &quot;shared_render_vol&quot; {\n\n  tags = {\n    Name = &quot;SharedRenderEFS&quot;\n  }\n}\n\nresource &quot;aws_efs_mount_target&quot; &quot;shared_mount&quot; {\n  file_system_id = aws_efs_file_system.shared_render_vol.id\n  subnet_id      = module.network.subnet_id\n\n  security_groups = [aws_security_group.nfs.id]\n}\n\nmodule &quot;worker_node&quot; {\n  source = &quot;./modules/worker_node&quot;\n\n  key_name = var.node_key_name\n  image_id = var.blender_node_image_id\n  vpc_security_group_ids = [aws_security_group.ssh.id, aws_security_group.nfs.id]\n  iam_instance_profile = module.node_iam_role.worker_iam_profile_name\n\n  build_id = random_string.build_id.result\n  region = var.region\n  render_bucket = aws_s3_bucket.render_bucket.id\n  code_bucket = aws_s3_bucket.code_bundles_bucket.id\n  frame_queue_url = aws_sqs_queue.frame_render_queue.id\n  project_init_queue_url = aws_sqs_queue.project_init_queue.id\n  shared_file_system_id = aws_efs_file_system.shared_render_vol.id\n\n  instance_types = var.instance_types\n  asg_name = var.worker_asg_name\n  asg_subnets = [module.network.subnet_id]\n  asg_max_workers = var.worker_node_max_count\n  asg_min_workers = 0\n  cloudwatch_namespace = var.cloudwatch_namespace\n}\n\nmodule &quot;bpi_emitter&quot; {\n  source = &quot;./modules/bpi_emitter&quot;\n\n  cloudwatch_namespace = var.cloudwatch_namespace\n  asg_name = module.worker_node.asg_name\n  frame_queue = aws_sqs_queue.frame_render_queue.id\n  project_init_queue = aws_sqs_queue.project_init_queue.id\n  frame_queue_bpi = var.frame_queue_bpi\n  project_init_queue_bpi = var.project_init_queue_bpi\n}\n\n# module &quot;bucket_upload_listener&quot; {\n#   source = &quot;./modules/bucket_upload_listener&quot;\n\n#   bucket_name = aws_s3_bucket.render_bucket.id\n#   bucket_arn = aws_s3_bucket.render_bucket.arn\n#   project_init_queue = aws_sqs_queue.project_init_queue.id\n# }\n\nresource &quot;aws_dynamodb_table&quot; &quot;projects_table&quot; {\n  name = &quot;FarmProjects&quot;\n  billing_mode = &quot;PAY_PER_REQUEST&quot;\n  hash_key = &quot;ProjectId&quot;\n\n  attribute {\n    name = &quot;ProjectId&quot;\n    type = &quot;S&quot;\n  }\n}\n\nresource &quot;aws_dynamodb_table&quot; &quot;application_settings&quot; {\n  name = &quot;FarmApplicationSettings&quot;\n  billing_mode = &quot;PAY_PER_REQUEST&quot;\n  hash_key = &quot;SettingName&quot;\n\n  attribute {\n    name = &quot;SettingName&quot;\n    type = &quot;S&quot;\n  }\n}\n\nmodule &quot;api&quot; {\n  source = &quot;./modules/api&quot;\n\n  region = var.region\n  bucket = aws_s3_bucket.render_bucket.id\n  frame_queue = aws_sqs_queue.frame_render_queue.id\n  project_init_queue = aws_sqs_queue.project_init_queue.id\n  client_endpoint = &quot;https://${aws_s3_bucket.client_bucket.website_endpoint}&quot;\n\n  dynamo_tables = {\n    projects = aws_dynamodb_table.projects_table.name,\n    application_settings = aws_dynamodb_table.application_settings.name\n  }\n}\n\n\n</code></pre>\n", "OwnerUserId": "1172907", "LastEditorUserId": "1172907", "LastEditDate": "2021-11-03T17:50:56.590", "LastActivityDate": "2021-11-03T17:50:56.590", "Title": "Terraform error creating user pool domain", "Tags": "<amazon-web-services><terraform><amazon-cognito><aws-cli>", "AnswerCount": "1", "CommentCount": "5", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "123201826", "PostId": "69658994", "Score": "0", "Text": "What is `aws_cognito_user_pool.farm_users_pool`? What is the meaning of `'55,60p;60q'`? Your question is not clear and lack details.", "CreationDate": "2021-10-24T21:17:41.747", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "123208236", "PostId": "69658994", "Score": "0", "Text": "share your main.tf at least!", "CreationDate": "2021-10-25T07:52:24.710", "UserId": "12659957", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "123421675", "PostId": "69658994", "Score": "0", "Text": "Your error is about `aws_cognito_user_pool_domain`, yet no such resource is shown.", "CreationDate": "2021-11-03T09:51:28.913", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "123429768", "PostId": "69658994", "Score": "1", "Text": "@ErmiyaEskandary Thank you. I've added the repository, what else could I add in order to clarify?", "CreationDate": "2021-11-03T15:06:09.903", "UserId": "1172907", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "123431241", "PostId": "69658994", "Score": "0", "Text": "@ErmiyaEskandary Yes, I even nuked **all regions**. As mentioned, I see that this pool is created after `apply`, yet the error", "CreationDate": "2021-11-03T15:58:50.483", "UserId": "1172907", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "256298504", "PostHistoryTypeId": "2", "PostId": "69658994", "RevisionGUID": "61425a68-52fb-4ced-af0f-e024b26d3beb", "CreationDate": "2021-10-21T09:03:23.023", "UserId": "1172907", "Text": "I `terraform destroy`ed, `aws-nuke`ed many times, searched manually for the mentioned Domain in multiple regions and searched with `aws-cli`. \r\n\r\nYet I can't find the cause. What else could I try?\r\n\r\n    terraform plan\r\n    terraform apply\r\n\r\nresult\r\n\r\n    \u2577\r\n    \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool.\r\n    \u2502 \r\n    \u2502   with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain,\r\n    \u2502   on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\":\r\n    \u2502   55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n    \u2502 \r\n\r\n---\r\n\r\n    sed -n '55,60p;60q' < modules/api/main.tf\r\n\r\nresult\r\n\r\n    resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n      domain       = \"fupdomain\"\r\n      user_pool_id = aws_cognito_user_pool.farm_users_pool.id\r\n    }\r\n    \r\n    resource \"aws_api_gateway_authorizer\" \"farm_api_authorizer\" {\r\n\r\n---\r\n    aws cognito-idp describe-user-pool-domain --domain farm_users_pool_domain\r\n    aws apigateway get-domain-names\r\nresult\r\n\r\n    {\r\n        \"DomainDescription\": {}\r\n    }\r\n    {\r\n        \"items\": []\r\n    }\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I `terraform destroy`ed, `aws-nuke`ed many times, searched manually for the mentioned Domain in multiple regions and searched with `aws-cli`. ", "keywords": ["domain"]}, {"source": "Text", "text": "What else could I try? terraform plan terraform apply result \u2577 \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool. \u2502 \u2502 with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain, \u2502 on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\": \u2502 55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { \u2502 --- sed -n '55,60p;60q' < modules/api/main.tf result resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { domain = \"fupdomain\" user_pool_id = aws_cognito_user_pool.farm_users_pool.id } resource \"aws_api_gateway_authorizer\" \"farm_api_authorizer\" { --- aws cognito-idp describe-user-pool-domain --domain farm_users_pool_domain aws apigateway get-domain-names result { \"DomainDescription\": {} } { \"items\": [] }", "keywords": ["domain"]}]}, {"Id": "256298506", "PostHistoryTypeId": "1", "PostId": "69658994", "RevisionGUID": "61425a68-52fb-4ced-af0f-e024b26d3beb", "CreationDate": "2021-10-21T09:03:23.023", "UserId": "1172907", "Text": "How to fix terraform error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "How to fix terraform error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool", "keywords": ["domain"]}]}, {"Id": "256298507", "PostHistoryTypeId": "3", "PostId": "69658994", "RevisionGUID": "61425a68-52fb-4ced-af0f-e024b26d3beb", "CreationDate": "2021-10-21T09:03:23.023", "UserId": "1172907", "Text": "<amazon-web-services><terraform><amazon-cognito><aws-cli>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "256508988", "PostHistoryTypeId": "5", "PostId": "69658994", "RevisionGUID": "f2ba4384-40bb-473f-865a-0c25e0e6a56a", "CreationDate": "2021-10-24T13:04:50.877", "UserId": "1172907", "Comment": "shortened question and title", "Text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. Tried deleting it in the aws console and repeating `apply` to no avail.:\r\n\r\n    \u2577\r\n    \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool.\r\n    \u2502 \r\n    \u2502   with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain,\r\n    \u2502   on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\":\r\n    \u2502   55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n    \u2502 \r\n\r\n---\r\n\r\n    sed -n '55,60p;60q' < modules/api/main.tf\r\n\r\nresult\r\n\r\n    resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n      domain       = \"fupdomain\"\r\n      user_pool_id = aws_cognito_user_pool.farm_users_pool.id\r\n    }\r\n    \r\n    resource \"aws_api_gateway_authorizer\" \"farm_api_authorizer\" {\r\n\r\n---\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. ", "keywords": ["domain"]}, {"source": "Text", "text": "Tried deleting it in the aws console and repeating `apply` to no avail.: \u2577 \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool. \u2502 \u2502 with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain, \u2502 on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\": \u2502 55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { \u2502 --- sed -n '55,60p;60q' < modules/api/main.tf result resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { domain = \"fupdomain\" user_pool_id = aws_cognito_user_pool.farm_users_pool", "keywords": ["domain"]}]}, {"Id": "256508989", "PostHistoryTypeId": "4", "PostId": "69658994", "RevisionGUID": "f2ba4384-40bb-473f-865a-0c25e0e6a56a", "CreationDate": "2021-10-24T13:04:50.877", "UserId": "1172907", "Comment": "shortened question and title", "Text": "Terraform apply throws error despite creating the user pool domain", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Terraform apply throws error despite creating the user pool domain", "keywords": ["domain"]}]}, {"Id": "256509177", "PostHistoryTypeId": "33", "PostId": "69658994", "RevisionGUID": "8fbc7c9b-60fd-40a7-9ce6-018132e23b54", "CreationDate": "2021-10-24T13:09:18.987", "UserId": "1172907", "Comment": "250011", "filtered-sentences": []}, {"Id": "256509350", "PostHistoryTypeId": "5", "PostId": "69658994", "RevisionGUID": "3b25bba6-08d9-4168-897c-84e0060ba367", "CreationDate": "2021-10-24T13:13:35.197", "UserId": "1172907", "Comment": "add attempts", "Text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. Tried `destroy`. Tried deleting the user pool domain in the aws console and repeating `apply`.\r\n\r\n    \u2577\r\n    \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool.\r\n    \u2502 \r\n    \u2502   with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain,\r\n    \u2502   on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\":\r\n    \u2502   55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n    \u2502 \r\n\r\n---\r\n\r\n    sed -n '55,60p;60q' < modules/api/main.tf\r\n\r\nresult\r\n\r\n    resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n      domain       = \"fupdomain\"\r\n      user_pool_id = aws_cognito_user_pool.farm_users_pool.id\r\n    }\r\n    \r\n    resource \"aws_api_gateway_authorizer\" \"farm_api_authorizer\" {\r\n\r\n---\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. ", "keywords": ["domain"]}, {"source": "Text", "text": "Tried deleting the user pool domain in the aws console and repeating `apply`. ", "keywords": ["domain"]}, {"source": "Text", "text": "\u2577 \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool. \u2502 \u2502 with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain, \u2502 on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\": \u2502 55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { \u2502 --- sed -n '55,60p;60q' < modules/api/main.tf result resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { domain = \"fupdomain\" user_pool_id = aws_cognito_user_pool.farm_users_pool", "keywords": ["domain"]}]}, {"Id": "256545429", "PostHistoryTypeId": "5", "PostId": "69658994", "RevisionGUID": "b50500ca-336d-4dd9-bc72-4c99c9be0ac8", "CreationDate": "2021-10-25T06:42:53.687", "UserId": "1172907", "Comment": "shortened question", "Text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. Tried `destroy`. Tried deleting the user pool domain in the aws console and repeating `apply`.\r\n\r\n    \u2577\r\n    \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool.\r\n    \u2502 \r\n    \u2502   with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain,\r\n    \u2502   on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\":\r\n    \u2502   55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n    \u2502 \r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. ", "keywords": ["domain"]}, {"source": "Text", "text": "Tried deleting the user pool domain in the aws console and repeating `apply`. ", "keywords": ["domain"]}, {"source": "Text", "text": "\u2577 \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool. \u2502 \u2502 with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain, \u2502 on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\": \u2502 55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { \u2502", "keywords": ["domain"]}]}, {"Id": "256550502", "PostHistoryTypeId": "5", "PostId": "69658994", "RevisionGUID": "63236d98-401f-4f14-8c3b-6ec706199b59", "CreationDate": "2021-10-25T08:18:09.830", "UserId": "1172907", "Comment": "add main.tf", "Text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. Tried `destroy`. Tried deleting the user pool domain in the aws console and repeating `apply`.\r\n\r\n    \u2577\r\n    \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool.\r\n    \u2502 \r\n    \u2502   with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain,\r\n    \u2502   on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\":\r\n    \u2502   55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n    \u2502 \r\n\r\n[main.tf (pastebin)](https://pastebin.com/QnUfUnJW)", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. ", "keywords": ["domain"]}, {"source": "Text", "text": "Tried deleting the user pool domain in the aws console and repeating `apply`. ", "keywords": ["domain"]}, {"source": "Text", "text": "\u2577 \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool. \u2502 \u2502 with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain, \u2502 on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\": \u2502 55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { \u2502 [main.tf (pastebin)](https://pastebin.com/QnUfUnJW)", "keywords": ["domain"]}]}, {"Id": "256600163", "PostHistoryTypeId": "5", "PostId": "69658994", "RevisionGUID": "07c613ff-242d-4b8b-9b76-2ac960e42565", "CreationDate": "2021-10-25T20:06:18.093", "UserId": "4800344", "Comment": "added 5485 characters in body", "Text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. Tried `destroy`. Tried deleting the user pool domain in the aws console and repeating `apply`.\r\n\r\n    \u2577\r\n    \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool.\r\n    \u2502 \r\n    \u2502   with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain,\r\n    \u2502   on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\":\r\n    \u2502   55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n    \u2502 \r\n\r\n`main.tf`\r\n\r\n```\r\nprovider \"aws\" {\r\n  version = \"~> 2.31\"\r\n  region = var.region\r\n}\r\n\r\ndata \"aws_caller_identity\" \"current\" {}\r\n\r\nresource \"random_string\" \"build_id\" {\r\n  length = 16\r\n  special = false\r\n  upper = false\r\n  number = false\r\n}\r\n\r\nmodule \"network\" {\r\n  source = \"./modules/network\"\r\n\r\n  availability_zone = var.availability_zone\r\n  vpc_cidr = var.vpc_cidr\r\n}\r\n\r\nmodule \"node_iam_role\" {\r\n  source = \"./modules/node_iam_role\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"render_bucket\" {\r\n  bucket = \"${random_string.build_id.result}-render-data\"\r\n  acl    = \"private\"\r\n}\r\n\r\n# Stores server-side code bundles. i.e. Worker node and lambda layer\r\nresource \"aws_s3_bucket\" \"code_bundles_bucket\" {\r\n  bucket = \"${random_string.build_id.result}-code-bundles\"\r\n  acl    = \"private\"\r\n}\r\n\r\n# Stores and serves javascript client\r\nresource \"aws_s3_bucket\" \"client_bucket\" {\r\n  bucket = \"${random_string.build_id.result}-client-bucket\"\r\n  acl    = \"public-read\"\r\n\r\n  website {\r\n    index_document = \"index.html\"\r\n    error_document = \"error.html\"\r\n  }\r\n}\r\n\r\n# Code bundles\r\n\r\ndata \"archive_file\" \"worker_node_code\" {\r\n  type = \"zip\"\r\n  source_dir = \"${path.root}/src/farm_worker\"\r\n  output_path = \"${path.root}/src/bundles/farm_worker.zip\"\r\n}\r\n\r\nresource \"aws_s3_bucket_object\" \"worker_code_bundle\" {\r\n  bucket = aws_s3_bucket.code_bundles_bucket.id\r\n  key = \"farm_worker.zip\"\r\n  source = \"${path.root}/src/bundles/farm_worker.zip\"\r\n\r\n  depends_on = [data.archive_file.worker_node_code]\r\n}\r\n\r\n# Security groups for the worker nodes\r\n\r\nresource \"aws_security_group\" \"ssh\" {\r\n  name = \"allow_ssh\"\r\n  vpc_id = module.network.vpc_id\r\n\r\n  ingress {\r\n    from_port = 22\r\n    to_port = 22\r\n    protocol = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port = 0\r\n    to_port = 0\r\n    protocol = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"nfs\" {\r\n  name = \"NFS\"\r\n  vpc_id = module.network.vpc_id\r\n\r\n  ingress {\r\n    from_port = 2049\r\n    to_port = 2049\r\n    protocol = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port = 0\r\n    to_port = 0\r\n    protocol = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\n# Build queues for project init and frame rendering\r\n\r\nresource \"aws_sqs_queue\" \"frame_render_deadletter\" {\r\n  name = \"frame_render_deadletter_queue\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"frame_render_queue\" {\r\n  name                       = \"frame_render_queue\"\r\n  visibility_timeout_seconds = 7000\r\n  redrive_policy             = \"{\\\"deadLetterTargetArn\\\":\\\"${aws_sqs_queue.frame_render_deadletter.arn}\\\",\\\"maxReceiveCount\\\":5}\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"project_init_queue\" {\r\n  name                       = \"project_init_queue\"\r\n  visibility_timeout_seconds = 7000\r\n}\r\n\r\n# EFS for shared storage during baking and rendering\r\n\r\nresource \"aws_efs_file_system\" \"shared_render_vol\" {\r\n\r\n  tags = {\r\n    Name = \"SharedRenderEFS\"\r\n  }\r\n}\r\n\r\nresource \"aws_efs_mount_target\" \"shared_mount\" {\r\n  file_system_id = aws_efs_file_system.shared_render_vol.id\r\n  subnet_id      = module.network.subnet_id\r\n\r\n  security_groups = [aws_security_group.nfs.id]\r\n}\r\n\r\nmodule \"worker_node\" {\r\n  source = \"./modules/worker_node\"\r\n\r\n  key_name = var.node_key_name\r\n  image_id = var.blender_node_image_id\r\n  vpc_security_group_ids = [aws_security_group.ssh.id, aws_security_group.nfs.id]\r\n  iam_instance_profile = module.node_iam_role.worker_iam_profile_name\r\n\r\n  build_id = random_string.build_id.result\r\n  region = var.region\r\n  render_bucket = aws_s3_bucket.render_bucket.id\r\n  code_bucket = aws_s3_bucket.code_bundles_bucket.id\r\n  frame_queue_url = aws_sqs_queue.frame_render_queue.id\r\n  project_init_queue_url = aws_sqs_queue.project_init_queue.id\r\n  shared_file_system_id = aws_efs_file_system.shared_render_vol.id\r\n\r\n  instance_types = var.instance_types\r\n  asg_name = var.worker_asg_name\r\n  asg_subnets = [module.network.subnet_id]\r\n  asg_max_workers = var.worker_node_max_count\r\n  asg_min_workers = 0\r\n  cloudwatch_namespace = var.cloudwatch_namespace\r\n}\r\n\r\nmodule \"bpi_emitter\" {\r\n  source = \"./modules/bpi_emitter\"\r\n\r\n  cloudwatch_namespace = var.cloudwatch_namespace\r\n  asg_name = module.worker_node.asg_name\r\n  frame_queue = aws_sqs_queue.frame_render_queue.id\r\n  project_init_queue = aws_sqs_queue.project_init_queue.id\r\n  frame_queue_bpi = var.frame_queue_bpi\r\n  project_init_queue_bpi = var.project_init_queue_bpi\r\n}\r\n\r\n# module \"bucket_upload_listener\" {\r\n#   source = \"./modules/bucket_upload_listener\"\r\n\r\n#   bucket_name = aws_s3_bucket.render_bucket.id\r\n#   bucket_arn = aws_s3_bucket.render_bucket.arn\r\n#   project_init_queue = aws_sqs_queue.project_init_queue.id\r\n# }\r\n\r\nresource \"aws_dynamodb_table\" \"projects_table\" {\r\n  name = \"FarmProjects\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key = \"ProjectId\"\r\n\r\n  attribute {\r\n    name = \"ProjectId\"\r\n    type = \"S\"\r\n  }\r\n}\r\n\r\nresource \"aws_dynamodb_table\" \"application_settings\" {\r\n  name = \"FarmApplicationSettings\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key = \"SettingName\"\r\n\r\n  attribute {\r\n    name = \"SettingName\"\r\n    type = \"S\"\r\n  }\r\n}\r\n\r\nmodule \"api\" {\r\n  source = \"./modules/api\"\r\n\r\n  region = var.region\r\n  bucket = aws_s3_bucket.render_bucket.id\r\n  frame_queue = aws_sqs_queue.frame_render_queue.id\r\n  project_init_queue = aws_sqs_queue.project_init_queue.id\r\n  client_endpoint = \"https://${aws_s3_bucket.client_bucket.website_endpoint}\"\r\n\r\n  dynamo_tables = {\r\n    projects = aws_dynamodb_table.projects_table.name,\r\n    application_settings = aws_dynamodb_table.application_settings.name\r\n  }\r\n}\r\n\r\n\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The user pool domain `farm_users` is created yet `terraform apply`returns this error. ", "keywords": ["domain"]}, {"source": "Text", "text": "Tried deleting the user pool domain in the aws console and repeating `apply`. ", "keywords": ["domain"]}, {"source": "Text", "text": "\u2577 \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool. \u2502 \u2502 with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain, \u2502 on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\": \u2502 55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { \u2502 `main.tf` ``` provider \"aws\" { version = \"~> 2.31\" region = var.region } data \"aws_caller_identity\" \"current\" {} resource \"random_string\" \"build_id\" { length = 16 special = false upper = false number = false } module \"network\" { source = \"./modules/network\" availability_zone = var.availability_zone vpc_cidr = var.vpc_cidr } module \"node_iam_role\" { source = \"./modules/node_iam_role\" } resource \"aws_s3_bucket\" \"render_bucket\" { bucket = \"${random_string.build_id.result}-render-data\" acl = \"private\" } # Stores server-side code bundles. i.e. Worker node and lambda layer resource \"aws_s3_bucket\" \"code_bundles_bucket\" { bucket = \"${random_string.build_id.result}-code-bundles\" acl = \"private\" } # Stores and serves javascript client resource \"aws_s3_bucket\" \"client_bucket\" { bucket = \"${random_string.build_id.result}-client-bucket\" acl = \"public-read\" website { index_document = \"index.html\" error_document = \"error.html\" } } # Code bundles data \"archive_file\" \"worker_node_code\" { type = \"zip\" source_dir = \"${path.root}/src/farm_worker\" output_path = \"${path.root}/src/bundles/farm_worker.zip\" } resource \"aws_s3_bucket_object\" \"worker_code_bundle\" { bucket = aws_s3_bucket.code_bundles_bucket.id key = \"farm_worker.zip\" source = \"${path.root}/src/bundles/farm_worker.zip\" depends_on = [data.archive_file.worker_node_code] } # Security groups for the worker nodes resource \"aws_security_group\" \"ssh\" { name = \"allow_ssh\" vpc_id = module.network.vpc_id ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] } } resource \"aws_security_group\" \"nfs\" { name = \"NFS\" vpc_id = module.network.vpc_id ingress { from_port = 2049 to_port = 2049 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] } } # Build queues for project init and frame rendering resource \"aws_sqs_queue\" \"frame_render_deadletter\" { name = \"frame_render_deadletter_queue\" } resource \"aws_sqs_queue\" \"frame_render_queue\" { name = \"frame_render_queue\" visibility_timeout_seconds = 7000 redrive_policy = \"{\\\"deadLetterTargetArn\\\":\\\"${aws_sqs_queue.frame_render_deadletter.arn}\\\",\\\"maxReceiveCount\\\":5}\" } resource \"aws_sqs_queue\" \"project_init_queue\" { name = \"project_init_queue\" visibility_timeout_seconds = 7000 } # EFS for shared storage during baking and rendering resource \"aws_efs_file_system\" \"shared_render_vol\" { tags = { Name = \"SharedRenderEFS\" } } resource \"aws_efs_mount_target\" \"shared_mount\" { file_system_id = aws_efs_file_system.shared_render_vol.id subnet_id = module.network.subnet_id security_groups = [aws_security_group.nfs.id] } module \"worker_node\" { source = \"./modules/worker_node\" key_name = var.node_key_name image_id = var.blender_node_image_id vpc_security_group_ids = [aws_security_group.ssh.id, aws_security_group.nfs.id] iam_instance_profile = module.node_iam_role.worker_iam_profile_name build_id = random_string.build_id.result region = var.region render_bucket = aws_s3_bucket.render_bucket.id code_bucket = aws_s3_bucket.code_bundles_bucket.id frame_queue_url = aws_sqs_queue.frame_render_queue.id project_init_queue_url = aws_sqs_queue.project_init_queue.id shared_file_system_id = aws_efs_file_system.shared_render_vol.id instance_types = var.instance_types asg_name = var.worker_asg_name asg_subnets = [module.network.subnet_id] asg_max_workers = var.worker_node_max_count asg_min_workers = 0 cloudwatch_namespace = var.cloudwatch_namespace } module \"bpi_emitter\" { source = \"./modules/bpi_emitter\" cloudwatch_namespace = var.cloudwatch_namespace asg_name = module.worker_node.asg_name frame_queue = aws_sqs_queue.frame_render_queue.id project_init_queue = aws_sqs_queue.project_init_queue.id frame_queue_bpi = var.frame_queue_bpi project_init_queue_bpi = var.project_init_queue_bpi } # module \"bucket_upload_listener\" { # source = \"./modules/bucket_upload_listener\" # bucket_name = aws_s3_bucket.render_bucket.id # bucket_arn = aws_s3_bucket.render_bucket.arn # project_init_queue = aws_sqs_queue.project_init_queue.id # } resource \"aws_dynamodb_table\" \"projects_table\" { name = \"FarmProjects\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"ProjectId\" attribute { name = \"ProjectId\" type = \"S\" } } resource \"aws_dynamodb_table\" \"application_settings\" { name = \"FarmApplicationSettings\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"SettingName\" attribute { name = \"SettingName\" type = \"S\" } } module \"api\" { source = \"./modules/api\" region = var.region bucket = aws_s3_bucket.render_bucket.id frame_queue = aws_sqs_queue.frame_render_queue.id project_init_queue = aws_sqs_queue.project_init_queue.id client_endpoint = \"https://${aws_s3_bucket.client_bucket.website_endpoint}\" dynamo_tables = { projects = aws_dynamodb_table.projects_table.name, application_settings = aws_dynamodb_table.application_settings.name } ", "keywords": ["bill", "storage", "domain", "provider"]}]}, {"Id": "257060577", "PostHistoryTypeId": "34", "PostId": "69658994", "RevisionGUID": "f80a1977-e364-4838-96b1-13f898afaa44", "CreationDate": "2021-11-01T15:04:35.527", "UserId": "-1", "Comment": "250011", "filtered-sentences": []}, {"Id": "257184928", "PostHistoryTypeId": "4", "PostId": "69658994", "RevisionGUID": "13483bcd-ae70-48ae-a993-0d4342299423", "CreationDate": "2021-11-03T09:04:16.497", "UserId": "1172907", "Comment": "shortened title", "Text": "Terraform error creating user pool domain", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Terraform error creating user pool domain", "keywords": ["domain"]}]}, {"Id": "257185133", "PostHistoryTypeId": "33", "PostId": "69658994", "RevisionGUID": "3521ee28-dc19-4bee-b7f6-4682967bfba3", "CreationDate": "2021-11-03T09:07:29.550", "UserId": "1172907", "Comment": "251289", "filtered-sentences": []}, {"Id": "257211271", "PostHistoryTypeId": "5", "PostId": "69658994", "RevisionGUID": "df74bb35-fcbd-4577-bc17-b59b680e7504", "CreationDate": "2021-11-03T15:04:13.540", "UserId": "1172907", "Comment": "Add github repository", "Text": "Following this [Github repo](https://github.com/bholzer/AutoBlenderRender), the user pool domain `farm_users` is created yet `terraform apply`returns this error. Tried `destroy`. Tried deleting the user pool domain in the aws console and repeating `apply`.\r\n\r\n    \u2577\r\n    \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool.\r\n    \u2502 \r\n    \u2502   with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain,\r\n    \u2502   on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\":\r\n    \u2502   55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n    \u2502 \r\n\r\n`main.tf`\r\n\r\n```\r\nprovider \"aws\" {\r\n  version = \"~> 2.31\"\r\n  region = var.region\r\n}\r\n\r\ndata \"aws_caller_identity\" \"current\" {}\r\n\r\nresource \"random_string\" \"build_id\" {\r\n  length = 16\r\n  special = false\r\n  upper = false\r\n  number = false\r\n}\r\n\r\nmodule \"network\" {\r\n  source = \"./modules/network\"\r\n\r\n  availability_zone = var.availability_zone\r\n  vpc_cidr = var.vpc_cidr\r\n}\r\n\r\nmodule \"node_iam_role\" {\r\n  source = \"./modules/node_iam_role\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"render_bucket\" {\r\n  bucket = \"${random_string.build_id.result}-render-data\"\r\n  acl    = \"private\"\r\n}\r\n\r\n# Stores server-side code bundles. i.e. Worker node and lambda layer\r\nresource \"aws_s3_bucket\" \"code_bundles_bucket\" {\r\n  bucket = \"${random_string.build_id.result}-code-bundles\"\r\n  acl    = \"private\"\r\n}\r\n\r\n# Stores and serves javascript client\r\nresource \"aws_s3_bucket\" \"client_bucket\" {\r\n  bucket = \"${random_string.build_id.result}-client-bucket\"\r\n  acl    = \"public-read\"\r\n\r\n  website {\r\n    index_document = \"index.html\"\r\n    error_document = \"error.html\"\r\n  }\r\n}\r\n\r\n# Code bundles\r\n\r\ndata \"archive_file\" \"worker_node_code\" {\r\n  type = \"zip\"\r\n  source_dir = \"${path.root}/src/farm_worker\"\r\n  output_path = \"${path.root}/src/bundles/farm_worker.zip\"\r\n}\r\n\r\nresource \"aws_s3_bucket_object\" \"worker_code_bundle\" {\r\n  bucket = aws_s3_bucket.code_bundles_bucket.id\r\n  key = \"farm_worker.zip\"\r\n  source = \"${path.root}/src/bundles/farm_worker.zip\"\r\n\r\n  depends_on = [data.archive_file.worker_node_code]\r\n}\r\n\r\n# Security groups for the worker nodes\r\n\r\nresource \"aws_security_group\" \"ssh\" {\r\n  name = \"allow_ssh\"\r\n  vpc_id = module.network.vpc_id\r\n\r\n  ingress {\r\n    from_port = 22\r\n    to_port = 22\r\n    protocol = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port = 0\r\n    to_port = 0\r\n    protocol = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"nfs\" {\r\n  name = \"NFS\"\r\n  vpc_id = module.network.vpc_id\r\n\r\n  ingress {\r\n    from_port = 2049\r\n    to_port = 2049\r\n    protocol = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port = 0\r\n    to_port = 0\r\n    protocol = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\n# Build queues for project init and frame rendering\r\n\r\nresource \"aws_sqs_queue\" \"frame_render_deadletter\" {\r\n  name = \"frame_render_deadletter_queue\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"frame_render_queue\" {\r\n  name                       = \"frame_render_queue\"\r\n  visibility_timeout_seconds = 7000\r\n  redrive_policy             = \"{\\\"deadLetterTargetArn\\\":\\\"${aws_sqs_queue.frame_render_deadletter.arn}\\\",\\\"maxReceiveCount\\\":5}\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"project_init_queue\" {\r\n  name                       = \"project_init_queue\"\r\n  visibility_timeout_seconds = 7000\r\n}\r\n\r\n# EFS for shared storage during baking and rendering\r\n\r\nresource \"aws_efs_file_system\" \"shared_render_vol\" {\r\n\r\n  tags = {\r\n    Name = \"SharedRenderEFS\"\r\n  }\r\n}\r\n\r\nresource \"aws_efs_mount_target\" \"shared_mount\" {\r\n  file_system_id = aws_efs_file_system.shared_render_vol.id\r\n  subnet_id      = module.network.subnet_id\r\n\r\n  security_groups = [aws_security_group.nfs.id]\r\n}\r\n\r\nmodule \"worker_node\" {\r\n  source = \"./modules/worker_node\"\r\n\r\n  key_name = var.node_key_name\r\n  image_id = var.blender_node_image_id\r\n  vpc_security_group_ids = [aws_security_group.ssh.id, aws_security_group.nfs.id]\r\n  iam_instance_profile = module.node_iam_role.worker_iam_profile_name\r\n\r\n  build_id = random_string.build_id.result\r\n  region = var.region\r\n  render_bucket = aws_s3_bucket.render_bucket.id\r\n  code_bucket = aws_s3_bucket.code_bundles_bucket.id\r\n  frame_queue_url = aws_sqs_queue.frame_render_queue.id\r\n  project_init_queue_url = aws_sqs_queue.project_init_queue.id\r\n  shared_file_system_id = aws_efs_file_system.shared_render_vol.id\r\n\r\n  instance_types = var.instance_types\r\n  asg_name = var.worker_asg_name\r\n  asg_subnets = [module.network.subnet_id]\r\n  asg_max_workers = var.worker_node_max_count\r\n  asg_min_workers = 0\r\n  cloudwatch_namespace = var.cloudwatch_namespace\r\n}\r\n\r\nmodule \"bpi_emitter\" {\r\n  source = \"./modules/bpi_emitter\"\r\n\r\n  cloudwatch_namespace = var.cloudwatch_namespace\r\n  asg_name = module.worker_node.asg_name\r\n  frame_queue = aws_sqs_queue.frame_render_queue.id\r\n  project_init_queue = aws_sqs_queue.project_init_queue.id\r\n  frame_queue_bpi = var.frame_queue_bpi\r\n  project_init_queue_bpi = var.project_init_queue_bpi\r\n}\r\n\r\n# module \"bucket_upload_listener\" {\r\n#   source = \"./modules/bucket_upload_listener\"\r\n\r\n#   bucket_name = aws_s3_bucket.render_bucket.id\r\n#   bucket_arn = aws_s3_bucket.render_bucket.arn\r\n#   project_init_queue = aws_sqs_queue.project_init_queue.id\r\n# }\r\n\r\nresource \"aws_dynamodb_table\" \"projects_table\" {\r\n  name = \"FarmProjects\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key = \"ProjectId\"\r\n\r\n  attribute {\r\n    name = \"ProjectId\"\r\n    type = \"S\"\r\n  }\r\n}\r\n\r\nresource \"aws_dynamodb_table\" \"application_settings\" {\r\n  name = \"FarmApplicationSettings\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key = \"SettingName\"\r\n\r\n  attribute {\r\n    name = \"SettingName\"\r\n    type = \"S\"\r\n  }\r\n}\r\n\r\nmodule \"api\" {\r\n  source = \"./modules/api\"\r\n\r\n  region = var.region\r\n  bucket = aws_s3_bucket.render_bucket.id\r\n  frame_queue = aws_sqs_queue.frame_render_queue.id\r\n  project_init_queue = aws_sqs_queue.project_init_queue.id\r\n  client_endpoint = \"https://${aws_s3_bucket.client_bucket.website_endpoint}\"\r\n\r\n  dynamo_tables = {\r\n    projects = aws_dynamodb_table.projects_table.name,\r\n    application_settings = aws_dynamodb_table.application_settings.name\r\n  }\r\n}\r\n\r\n\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Following this [Github repo](https://github.com/bholzer/AutoBlenderRender), the user pool domain `farm_users` is created yet `terraform apply`returns this error. ", "keywords": ["domain"]}, {"source": "Text", "text": "Tried deleting the user pool domain in the aws console and repeating `apply`. ", "keywords": ["domain"]}, {"source": "Text", "text": "\u2577 \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool. \u2502 \u2502 with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain, \u2502 on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\": \u2502 55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { \u2502 `main.tf` ``` provider \"aws\" { version = \"~", "keywords": ["domain", "provider"]}, {"source": "Text", "text": "> 2.31\" region = var.region } data \"aws_caller_identity\" \"current\" {} resource \"random_string\" \"build_id\" { length = 16 special = false upper = false number = false } module \"network\" { source = \"./modules/network\" availability_zone = var.availability_zone vpc_cidr = var.vpc_cidr } module \"node_iam_role\" { source = \"./modules/node_iam_role\" } resource \"aws_s3_bucket\" \"render_bucket\" { bucket = \"${random_string.build_id.result}-render-data\" acl = \"private\" } # Stores server-side code bundles. i.e. Worker node and lambda layer resource \"aws_s3_bucket\" \"code_bundles_bucket\" { bucket = \"${random_string.build_id.result}-code-bundles\" acl = \"private\" } # Stores and serves javascript client resource \"aws_s3_bucket\" \"client_bucket\" { bucket = \"${random_string.build_id.result}-client-bucket\" acl = \"public-read\" website { index_document = \"index.html\" error_document = \"error.html\" } } # Code bundles data \"archive_file\" \"worker_node_code\" { type = \"zip\" source_dir = \"${path.root}/src/farm_worker\" output_path = \"${path.root}/src/bundles/farm_worker.zip\" } resource \"aws_s3_bucket_object\" \"worker_code_bundle\" { bucket = aws_s3_bucket.code_bundles_bucket.id key = \"farm_worker.zip\" source = \"${path.root}/src/bundles/farm_worker.zip\" depends_on = [data.archive_file.worker_node_code] } # Security groups for the worker nodes resource \"aws_security_group\" \"ssh\" { name = \"allow_ssh\" vpc_id = module.network.vpc_id ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] } } resource \"aws_security_group\" \"nfs\" { name = \"NFS\" vpc_id = module.network.vpc_id ingress { from_port = 2049 to_port = 2049 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] } } # Build queues for project init and frame rendering resource \"aws_sqs_queue\" \"frame_render_deadletter\" { name = \"frame_render_deadletter_queue\" } resource \"aws_sqs_queue\" \"frame_render_queue\" { name = \"frame_render_queue\" visibility_timeout_seconds = 7000 redrive_policy = \"{\\\"deadLetterTargetArn\\\":\\\"${aws_sqs_queue.frame_render_deadletter.arn}\\\",\\\"maxReceiveCount\\\":5}\" } resource \"aws_sqs_queue\" \"project_init_queue\" { name = \"project_init_queue\" visibility_timeout_seconds = 7000 } # EFS for shared storage during baking and rendering resource \"aws_efs_file_system\" \"shared_render_vol\" { tags = { Name = \"SharedRenderEFS\" } } resource \"aws_efs_mount_target\" \"shared_mount\" { file_system_id = aws_efs_file_system.shared_render_vol.id subnet_id = module.network.subnet_id security_groups = [aws_security_group.nfs.id] } module \"worker_node\" { source = \"./modules/worker_node\" key_name = var.node_key_name image_id = var.blender_node_image_id vpc_security_group_ids = [aws_security_group.ssh.id, aws_security_group.nfs.id] iam_instance_profile = module.node_iam_role.worker_iam_profile_name build_id = random_string.build_id.result region = var.region render_bucket = aws_s3_bucket.render_bucket.id code_bucket = aws_s3_bucket.code_bundles_bucket.id frame_queue_url = aws_sqs_queue.frame_render_queue.id project_init_queue_url = aws_sqs_queue.project_init_queue.id shared_file_system_id = aws_efs_file_system.shared_render_vol.id instance_types = var.instance_types asg_name = var.worker_asg_name asg_subnets = [module.network.subnet_id] asg_max_workers = var.worker_node_max_count asg_min_workers = 0 cloudwatch_namespace = var.cloudwatch_namespace } module \"bpi_emitter\" { source = \"./modules/bpi_emitter\" cloudwatch_namespace = var.cloudwatch_namespace asg_name = module.worker_node.asg_name frame_queue = aws_sqs_queue.frame_render_queue.id project_init_queue = aws_sqs_queue.project_init_queue.id frame_queue_bpi = var.frame_queue_bpi project_init_queue_bpi = var.project_init_queue_bpi } # module \"bucket_upload_listener\" { # source = \"./modules/bucket_upload_listener\" # bucket_name = aws_s3_bucket.render_bucket.id # bucket_arn = aws_s3_bucket.render_bucket.arn # project_init_queue = aws_sqs_queue.project_init_queue.id # } resource \"aws_dynamodb_table\" \"projects_table\" { name = \"FarmProjects\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"ProjectId\" attribute { name = \"ProjectId\" type = \"S\" } } resource \"aws_dynamodb_table\" \"application_settings\" { name = \"FarmApplicationSettings\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"SettingName\" attribute { name = \"SettingName\" type = \"S\" } } module \"api\" { source = \"./modules/api\" region = var.region bucket = aws_s3_bucket.render_bucket.id frame_queue = aws_sqs_queue.frame_render_queue.id project_init_queue = aws_sqs_queue.project_init_queue.id client_endpoint = \"https://${aws_s3_bucket.client_bucket.website_endpoint}\" dynamo_tables = { projects = aws_dynamodb_table.projects_table.name, application_settings = aws_dynamodb_table.application_settings.name } ", "keywords": ["bill", "storage"]}]}, {"Id": "257223481", "PostHistoryTypeId": "5", "PostId": "69658994", "RevisionGUID": "950a6e6b-35ba-4205-bcef-bcdc12d8f3fb", "CreationDate": "2021-11-03T17:50:56.590", "UserId": "1172907", "Comment": "add screenshot and aws cli output", "Text": "Following this [Github repo](https://github.com/bholzer/AutoBlenderRender), the user pool domain `farm_users` is created yet `terraform apply`returns this error. Tried `destroy`. Tried deleting the user pool domain in the aws console and repeating `apply`.\r\n\r\n    \u2577\r\n    \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool.\r\n    \u2502 \r\n    \u2502   with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain,\r\n    \u2502   on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\":\r\n    \u2502   55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" {\r\n    \u2502 \r\n\r\nAfter running `apply`:\r\n\r\n`$ aws cognito-idp describe-user-pool-domain --domain \"fupdomain\"`\r\n\r\n    An error occurred (ResourceNotFoundException) when calling the DescribeUserPoolDomain operation: User pool domain fupdomain does not exist in this account.\r\n\r\n\r\n![screenshot after running apply](https://i.stack.imgur.com/RSeE6.png)\r\n\r\n\r\n`main.tf`\r\n\r\n```\r\nprovider \"aws\" {\r\n  version = \"~> 2.31\"\r\n  region = var.region\r\n}\r\n\r\ndata \"aws_caller_identity\" \"current\" {}\r\n\r\nresource \"random_string\" \"build_id\" {\r\n  length = 16\r\n  special = false\r\n  upper = false\r\n  number = false\r\n}\r\n\r\nmodule \"network\" {\r\n  source = \"./modules/network\"\r\n\r\n  availability_zone = var.availability_zone\r\n  vpc_cidr = var.vpc_cidr\r\n}\r\n\r\nmodule \"node_iam_role\" {\r\n  source = \"./modules/node_iam_role\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"render_bucket\" {\r\n  bucket = \"${random_string.build_id.result}-render-data\"\r\n  acl    = \"private\"\r\n}\r\n\r\n# Stores server-side code bundles. i.e. Worker node and lambda layer\r\nresource \"aws_s3_bucket\" \"code_bundles_bucket\" {\r\n  bucket = \"${random_string.build_id.result}-code-bundles\"\r\n  acl    = \"private\"\r\n}\r\n\r\n# Stores and serves javascript client\r\nresource \"aws_s3_bucket\" \"client_bucket\" {\r\n  bucket = \"${random_string.build_id.result}-client-bucket\"\r\n  acl    = \"public-read\"\r\n\r\n  website {\r\n    index_document = \"index.html\"\r\n    error_document = \"error.html\"\r\n  }\r\n}\r\n\r\n# Code bundles\r\n\r\ndata \"archive_file\" \"worker_node_code\" {\r\n  type = \"zip\"\r\n  source_dir = \"${path.root}/src/farm_worker\"\r\n  output_path = \"${path.root}/src/bundles/farm_worker.zip\"\r\n}\r\n\r\nresource \"aws_s3_bucket_object\" \"worker_code_bundle\" {\r\n  bucket = aws_s3_bucket.code_bundles_bucket.id\r\n  key = \"farm_worker.zip\"\r\n  source = \"${path.root}/src/bundles/farm_worker.zip\"\r\n\r\n  depends_on = [data.archive_file.worker_node_code]\r\n}\r\n\r\n# Security groups for the worker nodes\r\n\r\nresource \"aws_security_group\" \"ssh\" {\r\n  name = \"allow_ssh\"\r\n  vpc_id = module.network.vpc_id\r\n\r\n  ingress {\r\n    from_port = 22\r\n    to_port = 22\r\n    protocol = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port = 0\r\n    to_port = 0\r\n    protocol = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"nfs\" {\r\n  name = \"NFS\"\r\n  vpc_id = module.network.vpc_id\r\n\r\n  ingress {\r\n    from_port = 2049\r\n    to_port = 2049\r\n    protocol = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port = 0\r\n    to_port = 0\r\n    protocol = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\n# Build queues for project init and frame rendering\r\n\r\nresource \"aws_sqs_queue\" \"frame_render_deadletter\" {\r\n  name = \"frame_render_deadletter_queue\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"frame_render_queue\" {\r\n  name                       = \"frame_render_queue\"\r\n  visibility_timeout_seconds = 7000\r\n  redrive_policy             = \"{\\\"deadLetterTargetArn\\\":\\\"${aws_sqs_queue.frame_render_deadletter.arn}\\\",\\\"maxReceiveCount\\\":5}\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"project_init_queue\" {\r\n  name                       = \"project_init_queue\"\r\n  visibility_timeout_seconds = 7000\r\n}\r\n\r\n# EFS for shared storage during baking and rendering\r\n\r\nresource \"aws_efs_file_system\" \"shared_render_vol\" {\r\n\r\n  tags = {\r\n    Name = \"SharedRenderEFS\"\r\n  }\r\n}\r\n\r\nresource \"aws_efs_mount_target\" \"shared_mount\" {\r\n  file_system_id = aws_efs_file_system.shared_render_vol.id\r\n  subnet_id      = module.network.subnet_id\r\n\r\n  security_groups = [aws_security_group.nfs.id]\r\n}\r\n\r\nmodule \"worker_node\" {\r\n  source = \"./modules/worker_node\"\r\n\r\n  key_name = var.node_key_name\r\n  image_id = var.blender_node_image_id\r\n  vpc_security_group_ids = [aws_security_group.ssh.id, aws_security_group.nfs.id]\r\n  iam_instance_profile = module.node_iam_role.worker_iam_profile_name\r\n\r\n  build_id = random_string.build_id.result\r\n  region = var.region\r\n  render_bucket = aws_s3_bucket.render_bucket.id\r\n  code_bucket = aws_s3_bucket.code_bundles_bucket.id\r\n  frame_queue_url = aws_sqs_queue.frame_render_queue.id\r\n  project_init_queue_url = aws_sqs_queue.project_init_queue.id\r\n  shared_file_system_id = aws_efs_file_system.shared_render_vol.id\r\n\r\n  instance_types = var.instance_types\r\n  asg_name = var.worker_asg_name\r\n  asg_subnets = [module.network.subnet_id]\r\n  asg_max_workers = var.worker_node_max_count\r\n  asg_min_workers = 0\r\n  cloudwatch_namespace = var.cloudwatch_namespace\r\n}\r\n\r\nmodule \"bpi_emitter\" {\r\n  source = \"./modules/bpi_emitter\"\r\n\r\n  cloudwatch_namespace = var.cloudwatch_namespace\r\n  asg_name = module.worker_node.asg_name\r\n  frame_queue = aws_sqs_queue.frame_render_queue.id\r\n  project_init_queue = aws_sqs_queue.project_init_queue.id\r\n  frame_queue_bpi = var.frame_queue_bpi\r\n  project_init_queue_bpi = var.project_init_queue_bpi\r\n}\r\n\r\n# module \"bucket_upload_listener\" {\r\n#   source = \"./modules/bucket_upload_listener\"\r\n\r\n#   bucket_name = aws_s3_bucket.render_bucket.id\r\n#   bucket_arn = aws_s3_bucket.render_bucket.arn\r\n#   project_init_queue = aws_sqs_queue.project_init_queue.id\r\n# }\r\n\r\nresource \"aws_dynamodb_table\" \"projects_table\" {\r\n  name = \"FarmProjects\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key = \"ProjectId\"\r\n\r\n  attribute {\r\n    name = \"ProjectId\"\r\n    type = \"S\"\r\n  }\r\n}\r\n\r\nresource \"aws_dynamodb_table\" \"application_settings\" {\r\n  name = \"FarmApplicationSettings\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key = \"SettingName\"\r\n\r\n  attribute {\r\n    name = \"SettingName\"\r\n    type = \"S\"\r\n  }\r\n}\r\n\r\nmodule \"api\" {\r\n  source = \"./modules/api\"\r\n\r\n  region = var.region\r\n  bucket = aws_s3_bucket.render_bucket.id\r\n  frame_queue = aws_sqs_queue.frame_render_queue.id\r\n  project_init_queue = aws_sqs_queue.project_init_queue.id\r\n  client_endpoint = \"https://${aws_s3_bucket.client_bucket.website_endpoint}\"\r\n\r\n  dynamo_tables = {\r\n    projects = aws_dynamodb_table.projects_table.name,\r\n    application_settings = aws_dynamodb_table.application_settings.name\r\n  }\r\n}\r\n\r\n\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Following this [Github repo](https://github.com/bholzer/AutoBlenderRender), the user pool domain `farm_users` is created yet `terraform apply`returns this error. ", "keywords": ["domain"]}, {"source": "Text", "text": "Tried deleting the user pool domain in the aws console and repeating `apply`. ", "keywords": ["domain"]}, {"source": "Text", "text": "\u2577 \u2502 Error: Error creating Cognito User Pool Domain: InvalidParameterException: Domain already associated with another user pool. \u2502 \u2502 with module.api.aws_cognito_user_pool_domain.farm_users_pool_domain, \u2502 on modules/api/main.tf line 55, in resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\": \u2502 55: resource \"aws_cognito_user_pool_domain\" \"farm_users_pool_domain\" { \u2502 After running `apply`: `$ aws cognito-idp describe-user-pool-domain --domain \"fupdomain\"` ", "keywords": ["domain"]}, {"source": "Text", "text": "An error occurred (ResourceNotFoundException) when calling the DescribeUserPoolDomain operation: User pool domain fupdomain does not exist in this account. ![screenshot after running apply](https://i.stack.imgur.com/RSeE6.png) `main.tf` ``` provider \"aws\" { version = \"~> 2.31\" region = var.region } data \"aws_caller_identity\" \"current\" {} resource \"random_string\" \"build_id\" { length = 16 special = false upper = false number = false } module \"network\" { source = \"./modules/network\" availability_zone = var.availability_zone vpc_cidr = var.vpc_cidr } module \"node_iam_role\" { source = \"./modules/node_iam_role\" } resource \"aws_s3_bucket\" \"render_bucket\" { bucket = \"${random_string.build_id.result}-render-data\" acl = \"private\" } # Stores server-side code bundles. i.e. Worker node and lambda layer resource \"aws_s3_bucket\" \"code_bundles_bucket\" { bucket = \"${random_string.build_id.result}-code-bundles\" acl = \"private\" } # Stores and serves javascript client resource \"aws_s3_bucket\" \"client_bucket\" { bucket = \"${random_string.build_id.result}-client-bucket\" acl = \"public-read\" website { index_document = \"index.html\" error_document = \"error.html\" } } # Code bundles data \"archive_file\" \"worker_node_code\" { type = \"zip\" source_dir = \"${path.root}/src/farm_worker\" output_path = \"${path.root}/src/bundles/farm_worker.zip\" } resource \"aws_s3_bucket_object\" \"worker_code_bundle\" { bucket = aws_s3_bucket.code_bundles_bucket.id key = \"farm_worker.zip\" source = \"${path.root}/src/bundles/farm_worker.zip\" depends_on = [data.archive_file.worker_node_code] } # Security groups for the worker nodes resource \"aws_security_group\" \"ssh\" { name = \"allow_ssh\" vpc_id = module.network.vpc_id ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] } } resource \"aws_security_group\" \"nfs\" { name = \"NFS\" vpc_id = module.network.vpc_id ingress { from_port = 2049 to_port = 2049 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] } } # Build queues for project init and frame rendering resource \"aws_sqs_queue\" \"frame_render_deadletter\" { name = \"frame_render_deadletter_queue\" } resource \"aws_sqs_queue\" \"frame_render_queue\" { name = \"frame_render_queue\" visibility_timeout_seconds = 7000 redrive_policy = \"{\\\"deadLetterTargetArn\\\":\\\"${aws_sqs_queue.frame_render_deadletter.arn}\\\",\\\"maxReceiveCount\\\":5}\" } resource \"aws_sqs_queue\" \"project_init_queue\" { name = \"project_init_queue\" visibility_timeout_seconds = 7000 } # EFS for shared storage during baking and rendering resource \"aws_efs_file_system\" \"shared_render_vol\" { tags = { Name = \"SharedRenderEFS\" } } resource \"aws_efs_mount_target\" \"shared_mount\" { file_system_id = aws_efs_file_system.shared_render_vol.id subnet_id = module.network.subnet_id security_groups = [aws_security_group.nfs.id] } module \"worker_node\" { source = \"./modules/worker_node\" key_name = var.node_key_name image_id = var.blender_node_image_id vpc_security_group_ids = [aws_security_group.ssh.id, aws_security_group.nfs.id] iam_instance_profile = module.node_iam_role.worker_iam_profile_name build_id = random_string.build_id.result region = var.region render_bucket = aws_s3_bucket.render_bucket.id code_bucket = aws_s3_bucket.code_bundles_bucket.id frame_queue_url = aws_sqs_queue.frame_render_queue.id project_init_queue_url = aws_sqs_queue.project_init_queue.id shared_file_system_id = aws_efs_file_system.shared_render_vol.id instance_types = var.instance_types asg_name = var.worker_asg_name asg_subnets = [module.network.subnet_id] asg_max_workers = var.worker_node_max_count asg_min_workers = 0 cloudwatch_namespace = var.cloudwatch_namespace } module \"bpi_emitter\" { source = \"./modules/bpi_emitter\" cloudwatch_namespace = var.cloudwatch_namespace asg_name = module.worker_node.asg_name frame_queue = aws_sqs_queue.frame_render_queue.id project_init_queue = aws_sqs_queue.project_init_queue.id frame_queue_bpi = var.frame_queue_bpi project_init_queue_bpi = var.project_init_queue_bpi } # module \"bucket_upload_listener\" { # source = \"./modules/bucket_upload_listener\" # bucket_name = aws_s3_bucket.render_bucket.id # bucket_arn = aws_s3_bucket.render_bucket.arn # project_init_queue = aws_sqs_queue.project_init_queue.id # } resource \"aws_dynamodb_table\" \"projects_table\" { name = \"FarmProjects\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"ProjectId\" attribute { name = \"ProjectId\" type = \"S\" } } resource \"aws_dynamodb_table\" \"application_settings\" { name = \"FarmApplicationSettings\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"SettingName\" attribute { name = \"SettingName\" type = \"S\" } } module \"api\" { source = \"./modules/api\" region = var.region bucket = aws_s3_bucket.render_bucket.id frame_queue = aws_sqs_queue.frame_render_queue.id project_init_queue = aws_sqs_queue.project_init_queue.id client_endpoint = \"https://${aws_s3_bucket.client_bucket.website_endpoint}\" dynamo_tables = { projects = aws_dynamodb_table.projects_table.name, application_settings = aws_dynamodb_table.application_settings.name } ", "keywords": ["bill", "storage", "domain", "provider"]}]}, {"Id": "257596811", "PostHistoryTypeId": "34", "PostId": "69658994", "RevisionGUID": "dac2dfaa-407e-4841-b243-4742d02adf53", "CreationDate": "2021-11-09T11:44:34.990", "UserId": "1172907", "Comment": "251289", "filtered-sentences": []}], "answers": [{"Id": "69827756", "PostTypeId": "2", "ParentId": "69658994", "CreationDate": "2021-11-03T15:42:44.100", "Score": "3", "Body": "<p>The domain name should be globally unique. This means that, if in another account the same domain is used, then you can't use it. Try for example:</p>\n<pre><code>aws cognito-idp create-user-pool-domain --domain fupdomain --user-pool-id &lt;pool-id&gt; \n</code></pre>\n<p>The output will be:</p>\n<blockquote>\n<p>An error occurred (InvalidParameterException) when calling the\nCreateUserPoolDomain operation: Domain already associated with another\nuser pool.</p>\n</blockquote>\n<p>This makes sense, as the domain name is used to build a url of the form:</p>\n<p><code>https://{domain}.auth.us-east-1.amazoncognito.com</code></p>\n<p>This is where users should be authenticated against.</p>\n<p>You need to edit the template and pick another name.</p>\n", "OwnerUserId": "24054", "LastActivityDate": "2021-11-03T15:42:44.100", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "257214195", "PostHistoryTypeId": "2", "PostId": "69827756", "RevisionGUID": "9cc61e62-16da-422d-b48a-a26c8ffb97e7", "CreationDate": "2021-11-03T15:42:44.100", "UserId": "24054", "Text": "The domain name should be globally unique. This means that, if in another account the same domain is used, then you can't use it. Try for example:\r\n\r\n    aws cognito-idp create-user-pool-domain --domain fupdomain --user-pool-id <pool-id> \r\n\r\nThe output will be:\r\n\r\n> An error occurred (InvalidParameterException) when calling the\r\n> CreateUserPoolDomain operation: Domain already associated with another\r\n> user pool.\r\n\r\nThis makes sense, as the domain name is used to build a url of the form:\r\n\r\n`https://{domain}.auth.us-east-1.amazoncognito.com`\r\n\r\nThis is where users should be authenticated against.\r\n\r\nYou need to edit the template and pick another name.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The domain name should be globally unique. ", "keywords": ["domain"]}, {"source": "Text", "text": "This means that, if in another account the same domain is used, then you can't use it. ", "keywords": ["domain"]}, {"source": "Text", "text": "Try for example: aws cognito-idp create-user-pool-domain --domain fupdomain --user-pool-id ", "keywords": ["domain"]}, {"source": "Text", "text": "The output will be: > An error occurred (InvalidParameterException) when calling the > CreateUserPoolDomain operation: Domain already associated with another > user pool. ", "keywords": ["domain"]}, {"source": "Text", "text": "This makes sense, as the domain name is used to build a url of the form: `https://{domain}.auth.us-east-1.amazoncognito.com` ", "keywords": ["domain"]}]}], "filtered-sentences": [{"source": "Body", "text": "The domain name should be globally unique. ", "keywords": ["domain"]}, {"source": "Body", "text": "This means that, if in another account the same domain is used, then you can't use it. ", "keywords": ["domain"]}, {"source": "Body", "text": "Try for example: The output will be: An error occurred (InvalidParameterException) when calling the CreateUserPoolDomain operation: Domain already associated with another user pool. ", "keywords": ["domain"]}, {"source": "Body", "text": "This makes sense, as the domain name is used to build a url of the form: https://{domain}.auth.us-east-1.amazoncognito.com ", "keywords": ["domain"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Terraform error creating user pool domain", "keywords": ["domain"]}, {"source": "Body", "text": "Following this Github repo, the user pool domain farm_users is created yet terraform applyreturns this error. ", "keywords": ["domain"]}, {"source": "Body", "text": "Tried deleting the user pool domain in the aws console and repeating apply. ", "keywords": ["domain"]}, {"source": "Body", "text": "After running apply: $ aws cognito-idp describe-user-pool-domain --domain \"fupdomain\" main.tf", "keywords": ["domain"]}]}