{"Id": "73162317", "PostTypeId": "1", "CreationDate": "2022-07-29T06:14:49.110", "Score": "1", "ViewCount": "344", "Body": "<p>We currently only allow <code>terraform apply</code> in our CI / CD to prevent production changes from being applied locally. However, we'd like our developers to be able to run <code>terraform plan</code> locally for fast iteration speed. This requires giving them read-across across <em>everything</em> that Terraform interacts with in order to avoid an unauthorization error.</p>\n<p>Giving our developers <code>roles/viewer</code> is not sufficient, because it does not cover reading organization level IAM, data re. billing account, folders, etc. While we could give our developers the various <code>get</code> permissions one by one now until their <code>terraform plan</code> starts being authorized, this is only a short term solution. We are constantly adding resources from the <a href=\"https://registry.terraform.io/providers/hashicorp/google/latest/docs\" rel=\"nofollow noreferrer\">google provider</a>, and don't want to have to unblock our developer's iteration cycles via additional permission granting each time. <strong>Is there a combination of roles that can provide read access to every endpoint Google Cloud Platform exposes, that the Google Provider could be calling for <em>any</em> of it's resources?</strong></p>\n<p>The roles and / or permissions in this combination should overlap as little as possible. While I'd still greatly appreciate an answer that doesn't meet that criteria, having as mutually exclusive of roles as possible ensures downgrading a particular permission of someone can be tied to <strong>one</strong> role in the combination that should be removed, rather than N items that all provide said permission.</p>\n<p>As an example, <code>roles/viewer</code> is a superset of <code>roles/compute.viewer</code> (to my knowledge), so a combination should not contain both of those. However, <code>roles/viewer</code> and <code>roles/browser</code> each have exclusive permissions they provide, so an answer may well contain those.</p>\n", "OwnerUserId": "5319267", "LastEditorUserId": "5319267", "LastEditDate": "2022-07-29T06:20:26.540", "LastActivityDate": "2022-07-29T06:20:26.540", "Title": "Minimum Roles Needed to Achieve Complete Read-Only Access Across Google's Addressable Resources", "Tags": "<google-cloud-platform><terraform><terraform-provider-gcp><google-iam><identity-management>", "AnswerCount": "0", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129213999", "PostId": "73162317", "Score": "0", "Text": "There is no fixed answer. As Google releases new services, modifies services, etc. the list of IAM roles required will change over time. That means that any answer will probably be out of date next week. Compile a list of Google services, and implement your own custom role. You will need to track release notes, service announcements, etc yourself and update your custom role.", "CreationDate": "2022-07-29T07:05:23.047", "UserId": "8016720", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As Google releases new services, modifies services, etc. the list of IAM roles required will change over time. ", "keywords": ["change"]}]}, {"Id": "129224542", "PostId": "73162317", "Score": "0", "Text": "@JohnHanley Thanks for quick response. Would none of those new services have their permissions backported to a predefined role like `roles/viewer`? I thought that was the purpose of these broad roles, to provide coverage over all of GCP products.", "CreationDate": "2022-07-29T17:28:13.533", "UserId": "5319267", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129227308", "PostId": "73162317", "Score": "0", "Text": "Incorrect assumption. roles such as **viewer** are legacy. They were created very early on when Google based its authorization control on **scopes**. For example, the **owner** role does not have permissions for everything.", "CreationDate": "2022-07-29T20:13:46.307", "UserId": "8016720", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129227545", "PostId": "73162317", "Score": "0", "Text": "@JohnHanley Ah now I understand, I guess it's in our best interest to migrate from `roles/viewer` and `roles/editor` anyway then. Thank you.", "CreationDate": "2022-07-29T20:30:28.303", "UserId": "5319267", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129227693", "PostId": "73162317", "Score": "2", "Text": "The roles of viewer, editor, and owner have far more permissions than normally required. When you start implementing separation of responsibility, which is the opposite of your question, you will use custom roles with specific permissions. Your strategy of one role to grant read/view permission to everything is a dangerous strategy and you would fail a security audit if developers were granted such a role except in separation of projects.", "CreationDate": "2022-07-29T20:39:59.180", "UserId": "8016720", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "275188450", "PostHistoryTypeId": "2", "PostId": "73162317", "RevisionGUID": "93ec64d0-7272-47fd-9dad-edd1aa16f9c6", "CreationDate": "2022-07-29T06:14:49.110", "UserId": "5319267", "Text": "We currently only allow `terraform apply` in our CI / CD to prevent production changes from being applied locally. However, we'd like our developers to be able to run `terraform plan` locally for fast iteration speed. This requires giving them read-across across *everything* that Terraform interacts with in order to avoid an unauthorization error.\r\n\r\nGiving our developers `roles/viewer` is not sufficient, because it does not cover reading organization level IAM, data re. billing account, folders, etc. While we could give our developers the various `get` permissions one by one now until their `terraform plan` starts being authorized, this is only a short term solution. We are constantly adding resources from the [google provider][1], and don't want to have to unblock our developer's iteration cycles via additional permission granting each time. **Is there a combination of roles that can provide read access to every endpoint Google Cloud Platform exposes, that the Google Provider is calling?**   \r\n\r\nThe roles and / or permissions in this combination should overlap as little as possible. While I'd still appreciate an answer that doesn't meet that criteria, having as mutually exclusive of roles as possible ensures downgrading a particular permission of someone can be tied to **one** role in the combination that should be removed, rather than N items that all provide said permission. \r\n\r\nAs an example, `roles/viewer` is a superset of `roles/compute.viewer` (to my knowledge), so a combination should not contain both of those. However, `roles/viewer` and `roles/browser` each have exclusive permissions they provide, so an answer may well contain those. \r\n\r\n\r\n  [1]: https://registry.terraform.io/providers/hashicorp/google/latest/docs", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We currently only allow `terraform apply` in our CI / CD to prevent production changes from being applied locally. ", "keywords": ["change"]}, {"source": "Text", "text": "Giving our developers `roles/viewer` is not sufficient, because it does not cover reading organization level IAM, data re. billing account, folders, etc. ", "keywords": ["bill"]}, {"source": "Text", "text": "We are constantly adding resources from the [google provider][1], and don't want to have to unblock our developer's iteration cycles via additional permission granting each time. ", "keywords": ["provider"]}, {"source": "Text", "text": "**Is there a combination of roles that can provide read access to every endpoint Google Cloud Platform exposes, that the Google Provider is calling?** ", "keywords": ["provider"]}]}, {"Id": "275188452", "PostHistoryTypeId": "1", "PostId": "73162317", "RevisionGUID": "93ec64d0-7272-47fd-9dad-edd1aa16f9c6", "CreationDate": "2022-07-29T06:14:49.110", "UserId": "5319267", "Text": "Minimum Roles Needed to Achieve Complete Read-Only Access Across Google's Addressable Resources", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "275188453", "PostHistoryTypeId": "3", "PostId": "73162317", "RevisionGUID": "93ec64d0-7272-47fd-9dad-edd1aa16f9c6", "CreationDate": "2022-07-29T06:14:49.110", "UserId": "5319267", "Text": "<google-cloud-platform><terraform><terraform-provider-gcp><google-iam><identity-management>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "275188751", "PostHistoryTypeId": "5", "PostId": "73162317", "RevisionGUID": "c350070d-2733-4379-a049-7e80b0c54ce8", "CreationDate": "2022-07-29T06:20:26.540", "UserId": "5319267", "Comment": "added 34 characters in body", "Text": "We currently only allow `terraform apply` in our CI / CD to prevent production changes from being applied locally. However, we'd like our developers to be able to run `terraform plan` locally for fast iteration speed. This requires giving them read-across across *everything* that Terraform interacts with in order to avoid an unauthorization error.\r\n\r\nGiving our developers `roles/viewer` is not sufficient, because it does not cover reading organization level IAM, data re. billing account, folders, etc. While we could give our developers the various `get` permissions one by one now until their `terraform plan` starts being authorized, this is only a short term solution. We are constantly adding resources from the [google provider][1], and don't want to have to unblock our developer's iteration cycles via additional permission granting each time. **Is there a combination of roles that can provide read access to every endpoint Google Cloud Platform exposes, that the Google Provider could be calling for *any* of it's resources?**   \r\n\r\nThe roles and / or permissions in this combination should overlap as little as possible. While I'd still greatly appreciate an answer that doesn't meet that criteria, having as mutually exclusive of roles as possible ensures downgrading a particular permission of someone can be tied to **one** role in the combination that should be removed, rather than N items that all provide said permission. \r\n\r\nAs an example, `roles/viewer` is a superset of `roles/compute.viewer` (to my knowledge), so a combination should not contain both of those. However, `roles/viewer` and `roles/browser` each have exclusive permissions they provide, so an answer may well contain those. \r\n\r\n\r\n  [1]: https://registry.terraform.io/providers/hashicorp/google/latest/docs", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We currently only allow `terraform apply` in our CI / CD to prevent production changes from being applied locally. ", "keywords": ["change"]}, {"source": "Text", "text": "Giving our developers `roles/viewer` is not sufficient, because it does not cover reading organization level IAM, data re. billing account, folders, etc. ", "keywords": ["bill"]}, {"source": "Text", "text": "We are constantly adding resources from the [google provider][1], and don't want to have to unblock our developer's iteration cycles via additional permission granting each time. ", "keywords": ["provider"]}, {"source": "Text", "text": "**Is there a combination of roles that can provide read access to every endpoint Google Cloud Platform exposes, that the Google Provider could be calling for *any* of it's resources?** ", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "We currently only allow terraform apply in our CI / CD to prevent production changes from being applied locally. ", "keywords": ["change"]}, {"source": "Body", "text": "Giving our developers roles/viewer is not sufficient, because it does not cover reading organization level IAM, data re. billing account, folders, etc. ", "keywords": ["bill"]}, {"source": "Body", "text": "We are constantly adding resources from the google provider, and don't want to have to unblock our developer's iteration cycles via additional permission granting each time. ", "keywords": ["provider"]}, {"source": "Body", "text": "Is there a combination of roles that can provide read access to every endpoint Google Cloud Platform exposes, that the Google Provider could be calling for any of it's resources? ", "keywords": ["provider"]}]}