{"Id": "74723928", "PostTypeId": "1", "AcceptedAnswerId": "74724196", "CreationDate": "2022-12-07T23:25:37.757", "Score": "1", "ViewCount": "312", "Body": "<p>I thought this would be easy :frowning:</p>\n<p>Goal is to transform this map:</p>\n<pre><code>```\naccounts = {\n  &quot;acct-key-1&quot; = {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-1&quot;\n    &quot;private-attribute-1&quot; = &quot;fee&quot;\n    &quot;private-attribute-2&quot; = &quot;foe&quot;\n  }\n  &quot;acct-key-2&quot; = {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-2&quot;\n    &quot;private-attribute-1&quot; = &quot;fie&quot;\n    &quot;private-attribute-2&quot; = &quot;fum&quot;\n  }\n}\n```  \n</code></pre>\n<p>into this map:</p>\n<pre><code>```\ngoodness = {\n  &quot;SOME-UNIQUE-VALUE-1&quot; = {\n      &quot;billingcode&quot; = &quot;sys&quot;\n      &quot;acct-key&quot; = &quot;acct-key-1&quot; \n  }\n  &quot;SOME-UNIQUE-VALUE-2&quot; = {\n      &quot;billingcode&quot; = &quot;sys&quot;\n      &quot;acct-key&quot; = &quot;acct-key-2&quot;\n  }\n}\n```\n</code></pre>\n<p>As you can see, there are three tasks going on:</p>\n<ol>\n<li>Create the new map using a guaranteed-unique attribute (future-key) as the key for the new map.  That's not a problem, see code below.</li>\n<li>Insert the old key as an attribute into the new map</li>\n<li>Remove some named attributes (private-attribute-n) from the new map</li>\n</ol>\n<p>Per code below, ZipMap seems to be the way to go partway there.  Using ZipMap I get a partial result like this:</p>\n<pre><code>```\npartial = {\n  &quot;SOME-UNIQUE-VALUE-1&quot; = {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-1&quot;\n    &quot;private-attribute-1&quot; = &quot;fee&quot;\n    &quot;private-attribute-2&quot; = &quot;foe&quot;\n  }\n  &quot;SOME-UNIQUE-VALUE-2&quot; = {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-2&quot;\n    &quot;private-attribute-1&quot; = &quot;fie&quot;\n    &quot;private-attribute-2&quot; = &quot;fum&quot;\n  }\n}\n```\n</code></pre>\n<p>with a few things wrong with it:</p>\n<ul>\n<li>old key not inserted as an attribute</li>\n<li>private attributes not removed</li>\n<li>old key still present.  Don't really care about that one!</li>\n</ul>\n<p>It seems that &quot;all&quot; I need to do is to modify <code>local.newvalues</code> to:</p>\n<ul>\n<li>Insert the old key as an attribute, and</li>\n<li>Remove the unwanted values</li>\n</ul>\n<p>And I've tried nearly every variant of nested for..in loops I could think of and find on the web, with no success at all, not even enough to show.</p>\n<p>The problem seems to be that <code>local.newvalues</code> is a tuple, and methods to modify tuples are few and far between.</p>\n<p>The logic I've tried to implement would go like:</p>\n<p>for  each object in local.newvalues\nget the corresponding old key from keys(accts) and insert it\nlook at other attributes and skip or remove them if they match one of the private keys</p>\n<p>The code is simple and goes like this:</p>\n<pre><code>```\nlocals {\n    # get source map\n    accts = jsondecode(file(&quot;${path.module}/question.json&quot;))\n    newkeys = values(local.accts)[*].future-key\n    newvalues = values(local.accts)\n    partial = zipmap(\n      local.newkeys, local.newvalues\n    )\n}\n\noutput &quot;accounts&quot; {\n    value = local.accts\n}\n\noutput &quot;newkeys&quot; {\n    value = local.newkeys\n}\n\noutput &quot;newvalues&quot; {\n    value = local.newvalues\n}\n\noutput &quot;partial&quot; {\n    value = local.partial\n}```\n</code></pre>\n<p>And the unfinished output like this:</p>\n<pre><code>```\nOutputs:\n\naccounts = {\n  &quot;acct-key-1&quot; = {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-1&quot;\n    &quot;private-attribute-1&quot; = &quot;fee&quot;\n    &quot;private-attribute-2&quot; = &quot;foe&quot;\n  }\n  &quot;acct-key-2&quot; = {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-2&quot;\n    &quot;private-attribute-1&quot; = &quot;fie&quot;\n    &quot;private-attribute-2&quot; = &quot;fum&quot;\n  }\n}\nnewkeys = [\n  &quot;SOME-UNIQUE-VALUE-1&quot;,\n  &quot;SOME-UNIQUE-VALUE-2&quot;,\n]\nnewvalues = [\n  {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-1&quot;\n    &quot;private-attribute-1&quot; = &quot;fee&quot;\n    &quot;private-attribute-2&quot; = &quot;foe&quot;\n  },\n  {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-2&quot;\n    &quot;private-attribute-1&quot; = &quot;fie&quot;\n    &quot;private-attribute-2&quot; = &quot;fum&quot;\n  },\n]\npartial = {\n  &quot;SOME-UNIQUE-VALUE-1&quot; = {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-1&quot;\n    &quot;private-attribute-1&quot; = &quot;fee&quot;\n    &quot;private-attribute-2&quot; = &quot;foe&quot;\n  }\n  &quot;SOME-UNIQUE-VALUE-2&quot; = {\n    &quot;billingcode&quot; = &quot;sys&quot;\n    &quot;future-key&quot; = &quot;SOME-UNIQUE-VALUE-2&quot;\n    &quot;private-attribute-1&quot; = &quot;fie&quot;\n    &quot;private-attribute-2&quot; = &quot;fum&quot;\n  }\n}\n</code></pre>\n<p>To make code easy to reproduce, I put the initial map in a json file that the code reads and decodes; here it is as question.json:</p>\n<pre><code>```\n{\n    &quot;acct-key-1&quot;: {\n        &quot;future-key&quot;: &quot;SOME-UNIQUE-VALUE-1&quot;,\n        &quot;billingcode&quot;: &quot;sys&quot;,\n        &quot;private-attribute-1&quot;: &quot;fee&quot;,\n        &quot;private-attribute-2&quot;: &quot;foe&quot;\n    },\n    &quot;acct-key-2&quot;: {\n        &quot;future-key&quot;: &quot;SOME-UNIQUE-VALUE-2&quot;,\n        &quot;billingcode&quot;: &quot;sys&quot;,\n        &quot;private-attribute-1&quot;: &quot;fie&quot;,\n        &quot;private-attribute-2&quot;: &quot;fum&quot;\n    }  \n}\n```\n</code></pre>\n<p>Ideas much appreciated</p>\n", "OwnerUserId": "15369972", "LastActivityDate": "2022-12-08T00:14:20.930", "Title": "TERRAFORM: Modify Values for ZipMap while Transforming Map to new Keys", "Tags": "<terraform><for-in-loop><hcl>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "283845557", "PostHistoryTypeId": "2", "PostId": "74723928", "RevisionGUID": "cd751eee-8ed2-48ea-9ec7-f4b5c746a276", "CreationDate": "2022-12-07T23:25:37.757", "UserId": "15369972", "Text": "I thought this would be easy :frowning: \r\n\r\nGoal is to transform this map:\r\n\r\n    ```\r\n    accounts = {\r\n      \"acct-key-1\" = {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-1\"\r\n        \"private-attribute-1\" = \"fee\"\r\n        \"private-attribute-2\" = \"foe\"\r\n      }\r\n      \"acct-key-2\" = {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-2\"\r\n        \"private-attribute-1\" = \"fie\"\r\n        \"private-attribute-2\" = \"fum\"\r\n      }\r\n    }\r\n    ```  \r\n\r\ninto this map:\r\n\r\n    ```\r\n    goodness = {\r\n      \"SOME-UNIQUE-VALUE-1\" = {\r\n          \"billingcode\" = \"sys\"\r\n          \"acct-key\" = \"acct-key-1\" \r\n      }\r\n      \"SOME-UNIQUE-VALUE-2\" = {\r\n          \"billingcode\" = \"sys\"\r\n          \"acct-key\" = \"acct-key-2\"\r\n      }\r\n    }\r\n    ```\r\n\r\nAs you can see, there are three tasks going on:\r\n\r\n1. Create the new map using a guaranteed-unique attribute (future-key) as the key for the new map.  That's not a problem, see code below.\r\n2. Insert the old key as an attribute into the new map\r\n3. Remove some named attributes (private-attribute-n) from the new map\r\n\r\nPer code below, ZipMap seems to be the way to go partway there.  Using ZipMap I get a partial result like this:\r\n\r\n    ```\r\n    partial = {\r\n      \"SOME-UNIQUE-VALUE-1\" = {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-1\"\r\n        \"private-attribute-1\" = \"fee\"\r\n        \"private-attribute-2\" = \"foe\"\r\n      }\r\n      \"SOME-UNIQUE-VALUE-2\" = {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-2\"\r\n        \"private-attribute-1\" = \"fie\"\r\n        \"private-attribute-2\" = \"fum\"\r\n      }\r\n    }\r\n    ```\r\n\r\nwith a few things wrong with it:\r\n* old key not inserted as an attribute\r\n* private attributes not removed\r\n* old key still present.  Don't really care about that one!\r\n\r\nIt seems that \"all\" I need to do is to modify `local.newvalues` to:\r\n* Insert the old key as an attribute, and\r\n* Remove the unwanted values\r\n\r\nAnd I've tried nearly every variant of nested for..in loops I could think of and find on the web, with no success at all, not even enough to show.\r\n\r\nThe problem seems to be that `local.newvalues` is a tuple, and methods to modify tuples are few and far between.\r\n\r\nThe logic I've tried to implement would go like:\r\n\r\nfor  each object in local.newvalues\r\n  get the corresponding old key from keys(accts) and insert it \r\n  look at other attributes and skip or remove them if they match one of the private keys\r\n\r\nThe code is simple and goes like this:\r\n\r\n    ```\r\n    locals {\r\n        # get source map\r\n        accts = jsondecode(file(\"${path.module}/question.json\"))\r\n        newkeys = values(local.accts)[*].future-key\r\n        newvalues = values(local.accts)\r\n        partial = zipmap(\r\n          local.newkeys, local.newvalues\r\n        )\r\n    }\r\n    \r\n    output \"accounts\" {\r\n        value = local.accts\r\n    }\r\n    \r\n    output \"newkeys\" {\r\n        value = local.newkeys\r\n    }\r\n    \r\n    output \"newvalues\" {\r\n        value = local.newvalues\r\n    }\r\n    \r\n    output \"partial\" {\r\n        value = local.partial\r\n    }```\r\n\r\nAnd the unfinished output like this:\r\n\r\n    ```\r\n    Outputs:\r\n    \r\n    accounts = {\r\n      \"acct-key-1\" = {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-1\"\r\n        \"private-attribute-1\" = \"fee\"\r\n        \"private-attribute-2\" = \"foe\"\r\n      }\r\n      \"acct-key-2\" = {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-2\"\r\n        \"private-attribute-1\" = \"fie\"\r\n        \"private-attribute-2\" = \"fum\"\r\n      }\r\n    }\r\n    newkeys = [\r\n      \"SOME-UNIQUE-VALUE-1\",\r\n      \"SOME-UNIQUE-VALUE-2\",\r\n    ]\r\n    newvalues = [\r\n      {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-1\"\r\n        \"private-attribute-1\" = \"fee\"\r\n        \"private-attribute-2\" = \"foe\"\r\n      },\r\n      {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-2\"\r\n        \"private-attribute-1\" = \"fie\"\r\n        \"private-attribute-2\" = \"fum\"\r\n      },\r\n    ]\r\n    partial = {\r\n      \"SOME-UNIQUE-VALUE-1\" = {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-1\"\r\n        \"private-attribute-1\" = \"fee\"\r\n        \"private-attribute-2\" = \"foe\"\r\n      }\r\n      \"SOME-UNIQUE-VALUE-2\" = {\r\n        \"billingcode\" = \"sys\"\r\n        \"future-key\" = \"SOME-UNIQUE-VALUE-2\"\r\n        \"private-attribute-1\" = \"fie\"\r\n        \"private-attribute-2\" = \"fum\"\r\n      }\r\n    }\r\n\r\nTo make code easy to reproduce, I put the initial map in a json file that the code reads and decodes; here it is as question.json:\r\n\r\n    ```\r\n    {\r\n        \"acct-key-1\": {\r\n            \"future-key\": \"SOME-UNIQUE-VALUE-1\",\r\n            \"billingcode\": \"sys\",\r\n            \"private-attribute-1\": \"fee\",\r\n            \"private-attribute-2\": \"foe\"\r\n        },\r\n        \"acct-key-2\": {\r\n            \"future-key\": \"SOME-UNIQUE-VALUE-2\",\r\n            \"billingcode\": \"sys\",\r\n            \"private-attribute-1\": \"fie\",\r\n            \"private-attribute-2\": \"fum\"\r\n        }  \r\n    }\r\n    ```\r\n\r\nIdeas much appreciated\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I thought this would be easy :frowning: Goal is to transform this map: ``` accounts = { \"acct-key-1\" = { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-1\" \"private-attribute-1\" = \"fee\" \"private-attribute-2\" = \"foe\" } \"acct-key-2\" = { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-2\" \"private-attribute-1\" = \"fie\" \"private-attribute-2\" = \"fum\" } } ``` into this map: ``` goodness = { \"SOME-UNIQUE-VALUE-1\" = { \"billingcode\" = \"sys\" \"acct-key\" = \"acct-key-1\" } \"SOME-UNIQUE-VALUE-2\" = { \"billingcode\" = \"sys\" \"acct-key\" = \"acct-key-2\" } } ``` ", "keywords": ["bill"]}, {"source": "Text", "text": "Using ZipMap I get a partial result like this: ``` partial = { \"SOME-UNIQUE-VALUE-1\" = { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-1\" \"private-attribute-1\" = \"fee\" \"private-attribute-2\" = \"foe\" } \"SOME-UNIQUE-VALUE-2\" = { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-2\" \"private-attribute-1\" = \"fie\" \"private-attribute-2\" = \"fum\" } } ``` with a few things wrong with it: * old key not inserted as an attribute * private attributes not removed * old key still present. ", "keywords": ["bill"]}, {"source": "Text", "text": "And the unfinished output like this: ``` Outputs: accounts = { \"acct-key-1\" = { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-1\" \"private-attribute-1\" = \"fee\" \"private-attribute-2\" = \"foe\" } \"acct-key-2\" = { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-2\" \"private-attribute-1\" = \"fie\" \"private-attribute-2\" = \"fum\" } } newkeys = [ \"SOME-UNIQUE-VALUE-1\", \"SOME-UNIQUE-VALUE-2\", ] newvalues = [ { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-1\" \"private-attribute-1\" = \"fee\" \"private-attribute-2\" = \"foe\" }, { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-2\" \"private-attribute-1\" = \"fie\" \"private-attribute-2\" = \"fum\" }, ] partial = { \"SOME-UNIQUE-VALUE-1\" = { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-1\" \"private-attribute-1\" = \"fee\" \"private-attribute-2\" = \"foe\" } \"SOME-UNIQUE-VALUE-2\" = { \"billingcode\" = \"sys\" \"future-key\" = \"SOME-UNIQUE-VALUE-2\" \"private-attribute-1\" = \"fie\" \"private-attribute-2\" = \"fum\" } } To make code easy to reproduce, I put the initial map in a json file that the code reads and decodes; here it is as question.json: ``` { \"acct-key-1\": { \"future-key\": \"SOME-UNIQUE-VALUE-1\", \"billingcode\": \"sys\", \"private-attribute-1\": \"fee\", \"private-attribute-2\": \"foe\" ", "keywords": ["bill"]}, {"source": "Text", "text": "}, \"acct-key-2\": { \"future-key\": \"SOME-UNIQUE-VALUE-2\", \"billingcode\": \"sys\", \"private-attribute-1\": \"fie\", \"private-attribute-2\": \"fum\" ", "keywords": ["bill"]}]}, {"Id": "283845559", "PostHistoryTypeId": "1", "PostId": "74723928", "RevisionGUID": "cd751eee-8ed2-48ea-9ec7-f4b5c746a276", "CreationDate": "2022-12-07T23:25:37.757", "UserId": "15369972", "Text": "TERRAFORM: Modify Values for ZipMap while Transforming Map to new Keys", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "283845560", "PostHistoryTypeId": "3", "PostId": "74723928", "RevisionGUID": "cd751eee-8ed2-48ea-9ec7-f4b5c746a276", "CreationDate": "2022-12-07T23:25:37.757", "UserId": "15369972", "Text": "<terraform><for-in-loop><hcl>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "74724196", "PostTypeId": "2", "ParentId": "74723928", "CreationDate": "2022-12-08T00:14:20.930", "Score": "2", "Body": "<p>You do not need zip for that. Just a single for loop is enough:</p>\n<pre><code>\nlocals {\n  goodness = {\n    for acc_key, acc_details in local.accts:\n      acc_details.future-key =&gt; {\n        acct-key = acc_key\n        billingcode = acc_details.billingcode\n      }\n  }\n}\n</code></pre>\n<p>which gives:</p>\n<pre><code>{\n  &quot;SOME-UNIQUE-VALUE-1&quot; = {\n    &quot;acct-key&quot; = &quot;acct-key-1&quot;\n    &quot;billingcode&quot; = &quot;sys&quot;\n  }\n  &quot;SOME-UNIQUE-VALUE-2&quot; = {\n    &quot;acct-key&quot; = &quot;acct-key-2&quot;\n    &quot;billingcode&quot; = &quot;sys&quot;\n  }\n}\n</code></pre>\n", "OwnerUserId": "248823", "LastActivityDate": "2022-12-08T00:14:20.930", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131896086", "PostId": "74724196", "Score": "1", "Text": "Elegant, direct and absolutely perfect.  Thank you so much Marcin!", "CreationDate": "2022-12-08T15:04:02.877", "UserId": "15369972", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131896131", "PostId": "74724196", "Score": "1", "Text": "I remain curious as to how the list of values (local.newvalues) can be transformed as a matter of academic interest, but inverting the problem to generate only properties needed is like a light in the fog.  Thanks again!", "CreationDate": "2022-12-08T15:06:13.987", "UserId": "15369972", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131905709", "PostId": "74724196", "Score": "0", "Text": "@rpc No proplem. You can make new question with relevant examples for the \"academic interest\".", "CreationDate": "2022-12-09T01:04:04.663", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "283847100", "PostHistoryTypeId": "2", "PostId": "74724196", "RevisionGUID": "453a2956-7dc2-4a50-9d4c-4b1a8f73c775", "CreationDate": "2022-12-08T00:14:20.930", "UserId": "248823", "Text": "You do not need zip for that. Just a single for loop is enough:\r\n\r\n```\r\n\r\nlocals {\r\n  goodness = {\r\n    for acc_key, acc_details in local.accts:\r\n      acc_details.future-key => {\r\n        acct-key = acc_key\r\n        billingcode = acc_details.billingcode\r\n      }\r\n  }\r\n}\r\n```\r\n\r\nwhich gives:\r\n\r\n```\r\n{\r\n  \"SOME-UNIQUE-VALUE-1\" = {\r\n    \"acct-key\" = \"acct-key-1\"\r\n    \"billingcode\" = \"sys\"\r\n  }\r\n  \"SOME-UNIQUE-VALUE-2\" = {\r\n    \"acct-key\" = \"acct-key-2\"\r\n    \"billingcode\" = \"sys\"\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Just a single for loop is enough: ``` locals { goodness = { for acc_key, acc_details in local.accts: acc_details.future-key => { acct-key = acc_key billingcode = acc_details.billingcode } } } ``` which gives: ``` { \"SOME-UNIQUE-VALUE-1\" = { \"acct-key\" = \"acct-key-1\" \"billingcode\" = \"sys\" } \"SOME-UNIQUE-VALUE-2\" = { \"acct-key\" = \"acct-key-2\" \"billingcode\" = \"sys\" ", "keywords": ["bill"]}]}], "filtered-sentences": []}], "contains-topic": false, "filtered-sentences": []}