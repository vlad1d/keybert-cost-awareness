{"Id": "71242442", "PostTypeId": "1", "CreationDate": "2022-02-23T18:40:42.173", "Score": "2", "ViewCount": "2761", "Body": "<p>For starters, I've read <a href=\"https://stackoverflow.com/questions/64976695/how-to-conditionally-merge-multiple-iam-policy-statements-in-terraform\">this question</a>, but that solution is rather hacky and I'm hoping that with the newer version of Terraform that there's a more elegant way to achieve this.</p>\n<p>I have multiple IAM policy documents like this:</p>\n<pre><code>data &quot;aws_iam_policy_document&quot; &quot;policy1&quot; { \n  ...\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;policy2&quot; { \n  ...\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;policy3&quot; { \n  ...\n}\n</code></pre>\n<p>And I'm attempting to merge them into one document with <code>source_policy_documents</code>, like so:</p>\n<pre><code>data &quot;aws_iam_policy_document&quot; &quot;combined&quot; {\n  source_policy_documents = [\n    data.aws_iam_policy_document.policy1.json\n    data.aws_iam_policy_document.policy2.json\n    data.aws_iam_policy_document.policy3.json\n  ]\n}\n</code></pre>\n<p>I would like to offer &quot;override&quot; variables to allow users to exclude each document from being merged into the final policy.</p>\n<p>I'm new to Terraform - is there a straightforward way to either dynamically construct <code>source_policy_documents</code> or maybe use <code>override_policy_documents</code> to get what I want?</p>\n<p>Thanks!</p>\n", "OwnerUserId": "3131004", "LastActivityDate": "2022-02-24T17:37:52.853", "Title": "Terraform - conditionally merge multiple aws_iam_policy_document", "Tags": "<terraform><terraform-provider-aws>", "AnswerCount": "1", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "125931267", "PostId": "71242442", "Score": "0", "Text": "It is unclear exactly what functionality you are asking about, but you should be able to render templates for each of these policies, output as strings, and then interpolate or concatenate the strings based on declared input variables.", "CreationDate": "2022-02-23T20:18:55.070", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "125932234", "PostId": "71242442", "Score": "0", "Text": "I'm looking for some functionality that will allow me to dynamically determine the elements of the `source_policy_documents` list. The solution you mention should work, but that seems to be  the solution provided in the linked question, which I'm trying to avoid having to resort to now that Terraform offers to build the resulting JSON for you with the `source_policy_documents` argument.", "CreationDate": "2022-02-23T21:09:39.807", "UserId": "3131004", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "125933599", "PostId": "71242442", "Score": "0", "Text": "My suggestion is unrelated to the linked answer, but I am unsure how to provide more details around it without more concrete details in the question.", "CreationDate": "2022-02-23T22:30:02.393", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "1964718527", "CreationDate": "2022-02-23T18:40:42.173", "PostId": "71242442", "RelatedPostId": "64976695", "LinkTypeId": "1"}], "history": [{"Id": "264776295", "PostHistoryTypeId": "2", "PostId": "71242442", "RevisionGUID": "86f401b5-96aa-4635-bdec-8a39de3c16d6", "CreationDate": "2022-02-23T18:40:42.173", "UserId": "3131004", "Text": "For starters, I've read [this question](https://stackoverflow.com/questions/64976695/how-to-conditionally-merge-multiple-iam-policy-statements-in-terraform), but that solution is rather hacky and I'm hoping that with the newer version of Terraform that there's a more elegant way to achieve this.\r\n\r\nI have multiple IAM policy documents like this:\r\n\r\n    data \"aws_iam_policy_document\" \"policy1\" { \r\n      ...\r\n    }\r\n    \r\n    data \"aws_iam_policy_document\" \"policy2\" { \r\n      ...\r\n    }\r\n    \r\n    data \"aws_iam_policy_document\" \"policy3\" { \r\n      ...\r\n    }\r\n\r\nAnd I'm attempting to merge them into one document with `source_policy_documents`, like so:\r\n\r\n    data \"aws_iam_policy_document\" \"combined\" {\r\n      source_policy_documents = [\r\n        data.aws_iam_policy_document.policy1.json\r\n        data.aws_iam_policy_document.policy2.json\r\n        data.aws_iam_policy_document.policy3.json\r\n      ]\r\n    }\r\n\r\nI would like to offer \"override\" variables to allow users to exclude each document from being merged into the final policy.\r\n\r\nI'm new to Terraform - is there a straightforward way to either dynamically construct `source_policy_documents` or maybe use `override_policy_documents` to get what I want?\r\n\r\nThanks!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For starters, I've read [this question](https://stackoverflow.com/questions/64976695/how-to-conditionally-merge-multiple-iam-policy-statements-in-terraform), but that solution is rather hacky and I'm hoping that with the newer version of Terraform that there's a more elegant way to achieve this. ", "keywords": ["policy"]}, {"source": "Text", "text": "I have multiple IAM policy documents like this: data \"aws_iam_policy_document\" \"policy1\" { ... } data \"aws_iam_policy_document\" \"policy2\" { ... } data \"aws_iam_policy_document\" \"policy3\" { ... } ", "keywords": ["policy"]}, {"source": "Text", "text": "And I'm attempting to merge them into one document with `source_policy_documents`, like so: data \"aws_iam_policy_document\" \"combined\" { source_policy_documents = [ data.aws_iam_policy_document.policy1.json data.aws_iam_policy_document.policy2.json data.aws_iam_policy_document.policy3.json ] } I would like to offer \"override\" variables to allow users to exclude each document from being merged into the final policy. ", "keywords": ["policy"]}]}, {"Id": "264776297", "PostHistoryTypeId": "1", "PostId": "71242442", "RevisionGUID": "86f401b5-96aa-4635-bdec-8a39de3c16d6", "CreationDate": "2022-02-23T18:40:42.173", "UserId": "3131004", "Text": "Terraform - conditionally merge multiple aws_iam_policy_document", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "264776298", "PostHistoryTypeId": "3", "PostId": "71242442", "RevisionGUID": "86f401b5-96aa-4635-bdec-8a39de3c16d6", "CreationDate": "2022-02-23T18:40:42.173", "UserId": "3131004", "Text": "<terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "71256045", "PostTypeId": "2", "ParentId": "71242442", "CreationDate": "2022-02-24T17:37:52.853", "Score": "4", "Body": "<p>This may not be the most efficient, but you could do something like this:\nI am assuming that you have some boolean variables to indicate the policies to be enabled or disabled (policy1_enable, policy2_enable, policy3_enable).</p>\n<pre><code>data &quot;aws_iam_policy_document&quot; &quot;combined&quot; {\n  source_policy_documents = concat(\n    var.policy1_enable == true? [data.aws_iam_policy_document.policy1.json]:[],\n    var.policy2_enable == true? [data.aws_iam_policy_document.policy2.json]:[],\n    var.policy3_enable == true? [data.aws_iam_policy_document.policy3.json]:[])\n}\n</code></pre>\n", "OwnerUserId": "93794", "LastActivityDate": "2022-02-24T17:37:52.853", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "264846857", "PostHistoryTypeId": "2", "PostId": "71256045", "RevisionGUID": "2edbcfe1-9f53-4c27-9c13-1069dd4b8f18", "CreationDate": "2022-02-24T17:37:52.853", "UserId": "93794", "Text": "This may not be the most efficient, but you could do something like this:\r\nI am assuming that you have some boolean variables to indicate the policies to be enabled or disabled (policy1_enable, policy2_enable, policy3_enable).\r\n```\r\ndata \"aws_iam_policy_document\" \"combined\" {\r\n  source_policy_documents = concat(\r\n    var.policy1_enable == true? [data.aws_iam_policy_document.policy1.json]:[],\r\n    var.policy2_enable == true? [data.aws_iam_policy_document.policy2.json]:[],\r\n    var.policy3_enable == true? [data.aws_iam_policy_document.policy3.json]:[])\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This may not be the most efficient, but you could do something like this: I am assuming that you have some boolean variables to indicate the policies to be enabled or disabled (policy1_enable, policy2_enable, policy3_enable). ", "keywords": ["efficient"]}]}], "filtered-sentences": [{"source": "Body", "text": "This may not be the most efficient, but you could do something like this: I am assuming that you have some boolean variables to indicate the policies to be enabled or disabled (policy1_enable, policy2_enable, policy3_enable).", "keywords": ["efficient"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have multiple IAM policy documents like this: And I'm attempting to merge them into one document with source_policy_documents, like so: I would like to offer \"override\" variables to allow users to exclude each document from being merged into the final policy. ", "keywords": ["policy"]}]}