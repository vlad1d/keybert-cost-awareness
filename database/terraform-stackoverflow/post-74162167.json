{"Id": "74162167", "PostTypeId": "1", "CreationDate": "2022-10-22T08:45:08.033", "Score": "0", "ViewCount": "445", "Body": "<p>The reason why I need multiple rules with empty backend is, I'm creating an ingress for the cluster so I can in turn setup their wildcard TLS certificate. For the actual backends, I will have separate microservice modules to create deployments, services and ingresses and define actual backend there.</p>\n<p>Previously <code>backend = {}</code> worked on <code>resource kubernetes_ingress</code>:</p>\n<pre><code>resource &quot;kubernetes_ingress_v1&quot; &quot;my-ingress-resource&quot; {\n  annotations = {\n    &quot;kubernetes.io/ingress.class&quot; = &quot;nginx&quot;\n    &quot;kubernetes.io/tls-acme&quot; = &quot;true&quot;\n    &quot;cert-manager.io/cluster-issuer&quot; = &lt;cert-manager cluster issuer name&gt;\n  }\n  spec {\n    tls {\n      hosts = [&quot;*.example.com&quot;, &quot;*.api.example.com&quot;]\n      secret_name = &lt;secret which cert-manager will store certificate data in&gt;\n    }\n    rule {\n      host = &quot;*.example.com&quot;\n      http {\n        path {\n          backend = {} // &lt;-------------\n          path = &quot;/&quot;\n        }\n      }\n    }\n\n    rule {\n      host = &quot;*.api.example.com&quot;\n      http {\n        path {\n          backend = {} // &lt;-------------\n          path = &quot;/&quot;\n        }\n      }\n    }\n  }\n}\n\n</code></pre>\n<p>But now since my cloud provider enforces 1.22 Kubernetes which deprecates <code>*v1beta1.Ingress</code>, I have to use <code>kubernetes_ingress_v1</code>, which is not happy about the empty backend:</p>\n<p><code>Error: Failed to create Ingress 'XXX' because: Ingress.extensions &quot;XXX&quot; is invalid: [spec.rules[0].http.paths[0].backend: Invalid value: &quot;&quot;: resource or service backend is required]</code></p>\n<p>Does anyone know how I can supply an empty backend under <code>kubernetes_ingress_v1</code>, or for the purpose of creating ingress just for wildcard TLS certificate is there a better way?</p>\n", "OwnerUserId": "9814131", "LastEditorUserId": "9814131", "LastEditDate": "2022-10-22T19:41:34.003", "LastActivityDate": "2022-10-24T07:16:51.690", "Title": "Configure Kubernetes Ingress with empty backend rules (Terraform)", "Tags": "<kubernetes><terraform><kubernetes-ingress><nginx-ingress><cert-manager>", "AnswerCount": "1", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "130938444", "PostId": "74162167", "Score": "0", "Text": "So you want an ingress only for a wildcard certificate?", "CreationDate": "2022-10-22T09:10:58.950", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130938452", "PostId": "74162167", "Score": "0", "Text": "Not quite sure I understand what you are trying to do with this initial Ingress?", "CreationDate": "2022-10-22T09:12:31.200", "UserId": "5529712", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130945929", "PostId": "74162167", "Score": "0", "Text": "@MarkoE I edited the code block to include more TLS context if that makes sense.", "CreationDate": "2022-10-22T19:43:26.983", "UserId": "9814131", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130946060", "PostId": "74162167", "Score": "0", "Text": "@GariSingh I'm using Let's Encrypt which throttles the cert request you can make. I want to use a single certificate for all my domain needs, so I'm having one ingress with wildcard hosts to deal with that; then other microservices can share this certificate and don't have to issue their own certificate in their ingresses. Have you done this before, does that make sense to you?  The thing is w/o this empty backend ingress I believe cert-manager won't work with multiple wildcard hosts sharing one certificate, at least in previous versions. Or do you know how I can achieve this?", "CreationDate": "2022-10-22T19:55:14.327", "UserId": "9814131", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I want to use a single certificate for all my domain needs, so I'm having one ingress with wildcard hosts to deal with that; then other microservices can share this certificate and don't have to issue their own certificate in their ingresses. ", "keywords": ["domain"]}]}], "history": [{"Id": "280630954", "PostHistoryTypeId": "2", "PostId": "74162167", "RevisionGUID": "3ecc6f16-953f-4757-b259-290aedd89dc5", "CreationDate": "2022-10-22T08:45:08.033", "UserId": "9814131", "Text": "The reason why I need multiple rules with empty backend is, I'm creating an ingress for the cluster so I can in turn setup their wildcard TLS certificate. For the actual backends, I will have separate microservice modules to create deployments, services and ingresses and define actual backend there.\r\n\r\nPreviously `backend = {}` worked on `resource kubernetes_ingress`:\r\n\r\n```tf\r\nresource \"kubernetes_ingress_v1\" \"my-ingress-resource\" {\r\n  spec {\r\n    rule {\r\n      host = \"*.example.com\"\r\n      http {\r\n        path {\r\n          backend = {} // <-------------\r\n          path = \"/\"\r\n        }\r\n      }\r\n    }\r\n\r\n    rule {\r\n      host = \"*.api.example.com\"\r\n      http {\r\n        path {\r\n          backend = {} // <-------------\r\n          path = \"/\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nBut now since my cloud provider enforces 1.22 Kubernetes which deprecates `*v1beta1.Ingress`, I have to use `kubernetes_ingress_v1`, which is not happy about the empty backend:\r\n\r\n`Error: Failed to create Ingress 'XXX' because: Ingress.extensions \"XXX\" is invalid: [spec.rules[0].http.paths[0].backend: Invalid value: \"\": resource or service backend is required]`\r\n\r\nDoes anyone know how I can supply an empty backend under `kubernetes_ingress_v1`, or for the purpose of creating ingress just for wildcard TLS certificate is there a better way?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The reason why I need multiple rules with empty backend is, I'm creating an ingress for the cluster so I can in turn setup their wildcard TLS certificate. ", "keywords": ["cluster"]}, {"source": "Text", "text": "But now since my cloud provider enforces 1.22 Kubernetes which deprecates `*v1beta1.Ingress`, I have to use `kubernetes_ingress_v1`, which is not happy about the empty backend: `Error: Failed to create Ingress 'XXX' because: Ingress.extensions \"XXX\" is invalid: [spec.rules[0].http.paths[0].backend: Invalid value: \"\": resource or service backend is required]` ", "keywords": ["provider"]}]}, {"Id": "280630956", "PostHistoryTypeId": "1", "PostId": "74162167", "RevisionGUID": "3ecc6f16-953f-4757-b259-290aedd89dc5", "CreationDate": "2022-10-22T08:45:08.033", "UserId": "9814131", "Text": "Configure Kubernetes Ingress with empty backend rules (Terraform)", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "280630957", "PostHistoryTypeId": "3", "PostId": "74162167", "RevisionGUID": "3ecc6f16-953f-4757-b259-290aedd89dc5", "CreationDate": "2022-10-22T08:45:08.033", "UserId": "9814131", "Text": "<kubernetes><terraform><kubernetes-ingress><nginx-ingress><cert-manager>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "280654632", "PostHistoryTypeId": "5", "PostId": "74162167", "RevisionGUID": "5afe5ad5-15d4-414f-bd5e-c052a92a1898", "CreationDate": "2022-10-22T19:41:34.003", "UserId": "9814131", "Comment": "fix misplaced parts", "Text": "The reason why I need multiple rules with empty backend is, I'm creating an ingress for the cluster so I can in turn setup their wildcard TLS certificate. For the actual backends, I will have separate microservice modules to create deployments, services and ingresses and define actual backend there.\r\n\r\nPreviously `backend = {}` worked on `resource kubernetes_ingress`:\r\n\r\n```tf\r\nresource \"kubernetes_ingress_v1\" \"my-ingress-resource\" {\r\n  annotations = {\r\n    \"kubernetes.io/ingress.class\" = \"nginx\"\r\n    \"kubernetes.io/tls-acme\" = \"true\"\r\n    \"cert-manager.io/cluster-issuer\" = <cert-manager cluster issuer name>\r\n  }\r\n  spec {\r\n    tls {\r\n      hosts = [\"*.example.com\", \"*.api.example.com\"]\r\n      secret_name = <secret which cert-manager will store certificate data in>\r\n    }\r\n    rule {\r\n      host = \"*.example.com\"\r\n      http {\r\n        path {\r\n          backend = {} // <-------------\r\n          path = \"/\"\r\n        }\r\n      }\r\n    }\r\n\r\n    rule {\r\n      host = \"*.api.example.com\"\r\n      http {\r\n        path {\r\n          backend = {} // <-------------\r\n          path = \"/\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nBut now since my cloud provider enforces 1.22 Kubernetes which deprecates `*v1beta1.Ingress`, I have to use `kubernetes_ingress_v1`, which is not happy about the empty backend:\r\n\r\n`Error: Failed to create Ingress 'XXX' because: Ingress.extensions \"XXX\" is invalid: [spec.rules[0].http.paths[0].backend: Invalid value: \"\": resource or service backend is required]`\r\n\r\nDoes anyone know how I can supply an empty backend under `kubernetes_ingress_v1`, or for the purpose of creating ingress just for wildcard TLS certificate is there a better way?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The reason why I need multiple rules with empty backend is, I'm creating an ingress for the cluster so I can in turn setup their wildcard TLS certificate. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Previously `backend = {}` worked on `resource kubernetes_ingress`: ```tf resource \"kubernetes_ingress_v1\" \"my-ingress-resource\" { annotations = { \"kubernetes.io/ingress.class\" = \"nginx\" \"kubernetes.io/tls-acme\" = \"true\" \"cert-manager.io/cluster-issuer\" = } spec { tls { hosts = [\"*.example.com\", \"*.api.example.com\"] secret_name = } rule { host = \"*.example.com\" http { path { backend = {} // <------------- path = \"/\" } } } rule { host = \"*.api.example.com\" http { path { backend = {} // <------------- path = \"/\" } } } } } ``` ", "keywords": ["cluster"]}, {"source": "Text", "text": "But now since my cloud provider enforces 1.22 Kubernetes which deprecates `*v1beta1.Ingress`, I have to use `kubernetes_ingress_v1`, which is not happy about the empty backend: `Error: Failed to create Ingress 'XXX' because: Ingress.extensions \"XXX\" is invalid: [spec.rules[0].http.paths[0].backend: Invalid value: \"\": resource or service backend is required]` ", "keywords": ["provider"]}]}], "answers": [{"Id": "74177702", "PostTypeId": "2", "ParentId": "74162167", "CreationDate": "2022-10-24T07:16:51.690", "Score": "0", "Body": "<p>It turns out the ingress does not check on service during kubectl apply, so I just change it to:</p>\n<pre><code>            backend {\n              service {\n                name = &quot;dummysvc-oktofail&quot;\n                port {\n                  number = 80\n                }\n              }\n            }\n</code></pre>\n<p>It's expected however that in nginx controller log you'll see some error that says endpoint not found for <code>dummysvc-oktofail</code>, but it's harmless.</p>\n<p>Just to add that the configuration I have might not be popular because I'm on a nginx ingress controller on daemonset directly exposed to external traffic. This is to save cost as this is a hobbiest project and I don't want to spend additional cost for Load Balancer which could be expensive.</p>\n", "OwnerUserId": "9814131", "LastActivityDate": "2022-10-24T07:16:51.690", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "280715451", "PostHistoryTypeId": "2", "PostId": "74177702", "RevisionGUID": "aa775063-62a2-497e-ace4-e1457dee464a", "CreationDate": "2022-10-24T07:16:51.690", "UserId": "9814131", "Text": "It turns out the ingress does not check on service during kubectl apply, so I just change it to:\r\n\r\n```\r\n            backend {\r\n              service {\r\n                name = \"dummysvc-oktofail\"\r\n                port {\r\n                  number = 80\r\n                }\r\n              }\r\n            }\r\n```\r\n\r\nIt's expected however that in nginx controller log you'll see some error that says endpoint not found for `dummysvc-oktofail`, but it's harmless.\r\n\r\nJust to add that the configuration I have might not be popular because I'm on a nginx ingress controller on daemonset directly exposed to external traffic. This is to save cost as this is a hobbiest project and I don't want to spend additional cost for Load Balancer which could be expensive. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It turns out the ingress does not check on service during kubectl apply, so I just change it to: ``` backend { service { name = \"dummysvc-oktofail\" port { number = 80 } } } ``` ", "keywords": ["change"]}, {"source": "Text", "text": "This is to save cost as this is a hobbiest project and I don't want to spend additional cost for Load Balancer which could be expensive.", "keywords": ["cost", "expense"]}]}], "filtered-sentences": [{"source": "Body", "text": "It turns out the ingress does not check on service during kubectl apply, so I just change it to: It's expected however that in nginx controller log you'll see some error that says endpoint not found for dummysvc-oktofail, but it's harmless. ", "keywords": ["change"]}, {"source": "Body", "text": "This is to save cost as this is a hobbiest project and I don't want to spend additional cost for Load Balancer which could be expensive.", "keywords": ["cost", "expense"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "The reason why I need multiple rules with empty backend is, I'm creating an ingress for the cluster so I can in turn setup their wildcard TLS certificate. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Previously backend = {} worked on resource kubernetes_ingress: But now since my cloud provider enforces 1.22 Kubernetes which deprecates *v1beta1.Ingress, I have to use kubernetes_ingress_v1, which is not happy about the empty backend: Error: Failed to create Ingress 'XXX' because: Ingress.extensions \"XXX\" is invalid: [spec.rules[0].http.paths[0].backend: Invalid value: \"\": resource or service backend is required] Does anyone know how I can supply an empty backend under kubernetes_ingress_v1, or for the purpose of creating ingress just for wildcard TLS certificate is there a better way?", "keywords": ["provider"]}]}