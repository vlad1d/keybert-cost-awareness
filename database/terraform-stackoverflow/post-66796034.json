{"Id": "66796034", "PostTypeId": "1", "CreationDate": "2021-03-25T08:55:33.013", "Score": "0", "ViewCount": "27", "Body": "<p>I'm looking at using Terraform to build a small multi-cloud project. The project will call some API, perform some manipulation of the data received, then store in the cloud.</p>\n<p>I've written a Typescript project that I intend to upload as either an AWS Lambda function or an Azure function, depending on the choice of cloud provider, set at deployment.</p>\n<p>The problem I'm facing is that the Typescript project must have the ability to switch its storage mechanism depending on which cloud provider the project is being deployed to. I have something similar to this, setting the cloud provider as an environment variable on deployment:</p>\n<pre><code>export const handler = async (event: any = {}): Promise&lt;any&gt; =&gt; {\n    const users: User[] = await fetchUsers();\n    users.PerformSomeUpdate();\n\n    const userRepository: IUserRepository = getUserRepository();\n    userRepository.Save(users);\n    \n    return JSON.stringify(event, null, 2);\n}\n\nfunction getUserRepository(): IUserRepository {\n    if (process.env[&quot;CLOUD_PROVIDER&quot;] == &quot;AWS&quot;) {\n        return new S3Repository();\n    }\n    if (process.env[&quot;CLOUD_PROVIDER&quot;] == &quot;AZURE&quot;) {\n        return new AzureBlobRepository();\n    }\n}\n</code></pre>\n<p>This works fine, but I'd rather not have to check the cloud provider on each execution of the function. Is there a way I can set this dependency at the build/deployment stage instead?</p>\n<p>I've looked into several DI frameworks, but I don't think they're the right answer, as a DI container resolves dependencies at run time.</p>\n", "OwnerUserId": "1361848", "LastActivityDate": "2021-03-25T08:55:33.013", "Title": "Set up internal dependencies at build time", "Tags": "<javascript><typescript><terraform>", "AnswerCount": "0", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "118082504", "PostId": "66796034", "Score": "2", "Text": "Reading an environment variable is pretty cheap, and this is pretty much how they are intended to be used with Lambda. Could you elaborate a bit on why you are not satisfied with the solution you already have?", "CreationDate": "2021-03-25T13:37:00.737", "UserId": "1419616", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Reading an environment variable is pretty cheap, and this is pretty much how they are intended to be used with Lambda. ", "keywords": ["cheap"]}]}, {"Id": "118082718", "PostId": "66796034", "Score": "0", "Text": "Maybe your goal is really to not package and upload dependencies specific to cloud *x* to the execution environment at cloud *y*?", "CreationDate": "2021-03-25T13:43:28.500", "UserId": "1419616", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "118094752", "PostId": "66796034", "Score": "0", "Text": "I agree with @Semafoor there should be a good reason to not use the environment variables. Anyway, as a solution, you can have 2 thin handlers, one per cloud, which resolve the correct version of the repository object and pass it to the shared code modules that do the heavy lifting.", "CreationDate": "2021-03-25T20:54:54.200", "UserId": "2579733", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "243376535", "PostHistoryTypeId": "2", "PostId": "66796034", "RevisionGUID": "888be7d8-60ba-4482-8225-84c5cdf2cceb", "CreationDate": "2021-03-25T08:55:33.013", "UserId": "1361848", "Text": "I'm looking at using Terraform to build a small multi-cloud project. The project will call some API, perform some manipulation of the data received, then store in the cloud.\r\n\r\nI've written a Typescript project that I intend to upload as either an AWS Lambda function or an Azure function, depending on the choice of cloud provider, set at deployment.\r\n\r\nThe problem I'm facing is that the Typescript project must have the ability to switch its storage mechanism depending on which cloud provider the project is being deployed to. I have something similar to this, setting the cloud provider as an environment variable on deployment:\r\n\r\n    export const handler = async (event: any = {}): Promise<any> => {\r\n        const users: User[] = await fetchUsers();\r\n        users.PerformSomeUpdate();\r\n    \r\n        const userRepository: IUserRepository = getUserRepository();\r\n        userRepository.Save(users);\r\n        \r\n        return JSON.stringify(event, null, 2);\r\n    }\r\n    \r\n    function getUserRepository(): IUserRepository {\r\n        if (process.env[\"CLOUD_PROVIDER\"] == \"AWS\") {\r\n            return new S3Repository();\r\n        }\r\n        if (process.env[\"CLOUD_PROVIDER\"] == \"AZURE\") {\r\n            return new AzureBlobRepository();\r\n        }\r\n    }\r\n\r\nThis works fine, but I'd rather not have to check the cloud provider on each execution of the function. Is there a way I can set this dependency at the build/deployment stage instead?\r\n\r\nI've looked into several DI frameworks, but I don't think they're the right answer, as a DI container resolves dependencies at run time.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I've written a Typescript project that I intend to upload as either an AWS Lambda function or an Azure function, depending on the choice of cloud provider, set at deployment. ", "keywords": ["provider"]}, {"source": "Text", "text": "The problem I'm facing is that the Typescript project must have the ability to switch its storage mechanism depending on which cloud provider the project is being deployed to. ", "keywords": ["storage", "provider"]}, {"source": "Text", "text": "I have something similar to this, setting the cloud provider as an environment variable on deployment: export const handler = async (event: any = {}): Promise => { const users: User[] = await fetchUsers(); users.PerformSomeUpdate(); const userRepository: IUserRepository = getUserRepository(); userRepository.Save(users); return JSON.stringify(event, null, 2); } function getUserRepository(): IUserRepository { if (process.env[\"CLOUD_PROVIDER\"] == \"AWS\") { return new S3Repository(); } if (process.env[\"CLOUD_PROVIDER\"] == \"AZURE\") { return new AzureBlobRepository(); } } ", "keywords": ["provider"]}, {"source": "Text", "text": "This works fine, but I'd rather not have to check the cloud provider on each execution of the function. ", "keywords": ["provider"]}]}, {"Id": "243376536", "PostHistoryTypeId": "1", "PostId": "66796034", "RevisionGUID": "888be7d8-60ba-4482-8225-84c5cdf2cceb", "CreationDate": "2021-03-25T08:55:33.013", "UserId": "1361848", "Text": "Set up internal dependencies at build time", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "243376537", "PostHistoryTypeId": "3", "PostId": "66796034", "RevisionGUID": "888be7d8-60ba-4482-8225-84c5cdf2cceb", "CreationDate": "2021-03-25T08:55:33.013", "UserId": "1361848", "Text": "<javascript><typescript><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I've written a Typescript project that I intend to upload as either an AWS Lambda function or an Azure function, depending on the choice of cloud provider, set at deployment. ", "keywords": ["provider"]}, {"source": "Body", "text": "The problem I'm facing is that the Typescript project must have the ability to switch its storage mechanism depending on which cloud provider the project is being deployed to. ", "keywords": ["storage", "provider"]}, {"source": "Body", "text": "I have something similar to this, setting the cloud provider as an environment variable on deployment: ", "keywords": ["provider"]}, {"source": "Body", "text": "This works fine, but I'd rather not have to check the cloud provider on each execution of the function. ", "keywords": ["provider"]}]}