{"Id": "59315467", "PostTypeId": "1", "CreationDate": "2019-12-13T02:49:05.677", "Score": "3", "ViewCount": "967", "Body": "<p>I am following <a href=\"https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca\" rel=\"nofollow noreferrer\">this</a> excellent guide to terraform, specifically I am currently on the 4th part - <a href=\"https://blog.gruntwork.io/how-to-create-reusable-infrastructure-with-terraform-modules-25526d65f73d\" rel=\"nofollow noreferrer\">How to create reusable infrastructure with Terraform modules</a>. And here I have a problem - terraform is unable to rename the resources from the guide. I have no idea whether it is my problem or a bug. And if a bug - where to report it? Is it the aws provider bug or the terraform bug? And what is the workaround?</p>\n\n<p>Anyway, here is my directory structure:</p>\n\n<pre><code>C:\\Work\\terraform&gt; tree /f\nFolder PATH listing for volume OSDisk\nVolume serial number is 689E-A096\nC:.\n\u2502   .gitignore\n\u2502\n\u251c\u2500\u2500\u2500backend\n\u2502       main.tf\n\u2502       terraform.tfstate\n\u2502\n\u251c\u2500\u2500\u2500modules\n\u2502   \u2514\u2500\u2500\u2500services\n\u2502       \u2514\u2500\u2500\u2500webserver-cluster\n\u2502               main.tf\n\u2502               outputs.tf\n\u2502               variables.tf\n\u2502\n\u2514\u2500\u2500\u2500stage\n    \u2514\u2500\u2500\u2500services\n        \u2514\u2500\u2500\u2500webserver-cluster\n                main.tf\n</code></pre>\n\n<p>The backend folder contains the code to setup the S3 backend:</p>\n\n<pre><code>C:\\Work\\terraform\\backend&gt; cat .\\main.tf\nprovider \"aws\" {\n  region = \"us-east-2\"\n}\n\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket = \"mark-kharitonov-terraform-up-and-running-state\"\n  force_destroy = true\n\n  # Enable versioning so we can see the full revision history of our\n  # state files\n  versioning {\n    enabled = true\n  }\n\n  # Enable server-side encryption by default\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = \"AES256\"\n      }\n    }\n  }\n}\n\nresource \"aws_dynamodb_table\" \"terraform_locks\" {\n  name         = \"terraform-up-and-running-locks\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n}\nC:\\Work\\terraform\\backend&gt; terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Checking for available provider plugins...\n- Downloading plugin for provider \"aws\" (hashicorp/aws) 2.41.0...\n\n...\n\n* provider.aws: version = \"~&gt; 2.41\"\n\nTerraform has been successfully initialized!\n\n...\n\nC:\\Work\\terraform\\backend&gt; terraform apply\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # aws_dynamodb_table.terraform_locks will be created\n  + resource \"aws_dynamodb_table\" \"terraform_locks\" {\n...\n      + name             = \"terraform-up-and-running-locks\"\n...\n    }\n\n  # aws_s3_bucket.terraform_state will be created\n  + resource \"aws_s3_bucket\" \"terraform_state\" {\n...\n      + bucket                      = \"mark-kharitonov-terraform-up-and-running-state\"\n...\n    }\n\nPlan: 2 to add, 0 to change, 0 to destroy.\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n\naws_dynamodb_table.terraform_locks: Creating...\naws_s3_bucket.terraform_state: Creating...\naws_dynamodb_table.terraform_locks: Creation complete after 5s [id=terraform-up-and-running-locks]\naws_s3_bucket.terraform_state: Creation complete after 9s [id=mark-kharitonov-terraform-up-and-running-state]\n\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n</code></pre>\n\n<p>All is good, the backend is set up.</p>\n\n<p>Next, there is the modules folder. The guide describes its content, but here it is:</p>\n\n<pre><code>C:\\work\\terraform\\modules\\services\\webserver-cluster&gt; cat .\\variables.tf\nvariable \"server_port\" {\n  description = \"The port the server will use for HTTP requests\"\n  type        = number\n  default     = 8080\n}\n\nvariable \"cluster_name\" {\n  description = \"The name to use for all the cluster resources\"\n  type        = string\n}\nC:\\work\\terraform\\modules\\services\\webserver-cluster&gt; cat .\\main.tf\ndata \"aws_availability_zones\" \"all\" {}\n\nresource \"aws_launch_configuration\" \"example\" {\n  image_id        = \"ami-0c55b159cbfafe1f0\"\n  instance_type   = \"t2.micro\"\n  security_groups = [aws_security_group.instance.id]\n  user_data       = &lt;&lt;-EOF\n              #!/bin/bash\n              echo \"Hello, World\" &gt; index.html\n              nohup busybox httpd -f -p \"${var.server_port}\" &amp;\n              EOF\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\nresource \"aws_autoscaling_group\" \"example\" {\n  launch_configuration = aws_launch_configuration.example.id\n  availability_zones   = data.aws_availability_zones.all.names\n\n  min_size = 2\n  max_size = 10\n\n  load_balancers    = [aws_elb.example.name]\n  health_check_type = \"ELB\"\n\n  tag {\n    key                 = \"Name\"\n    value               = \"${var.cluster_name}-asg\"\n    propagate_at_launch = true\n  }\n}\n\nresource \"aws_elb\" \"example\" {\n  name               = \"${var.cluster_name}-clb\"\n  security_groups    = [aws_security_group.elb.id]\n  availability_zones = data.aws_availability_zones.all.names\n\n  health_check {\n    target              = \"HTTP:${var.server_port}/\"\n    interval            = 30\n    timeout             = 3\n    healthy_threshold   = 2\n    unhealthy_threshold = 2\n  }\n\n  # This adds a listener for incoming HTTP requests.\n  listener {\n    lb_port           = 80\n    lb_protocol       = \"http\"\n    instance_port     = var.server_port\n    instance_protocol = \"http\"\n  }\n}\n\nresource \"aws_security_group\" \"elb\" {\n  name = \"${var.cluster_name}-elb\"\n\n  # Allow all outbound\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  # Inbound HTTP from anywhere\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\nresource \"aws_security_group\" \"instance\" {\n  name = \"${var.cluster_name}-instance\"\n  ingress {\n    from_port   = var.server_port\n    to_port     = var.server_port\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\nC:\\work\\terraform\\modules\\services\\webserver-cluster&gt; cat .\\outputs.tf\noutput \"clb_dns_name\" {\n  value       = aws_elb.example.dns_name\n  description = \"The domain name of the load balancer\"\n}\n</code></pre>\n\n<p>And now I am using the module to create a cluster in staging named <code>webservers-stage</code>:</p>\n\n<pre><code>C:\\work\\terraform\\stage\\services\\webserver-cluster&gt; terraform init\nInitializing modules...\n- webserver_cluster in ..\\..\\..\\modules\\services\\webserver-cluster\n\nInitializing the backend...\n\nSuccessfully configured the backend \"s3\"! Terraform will automatically\nuse this backend unless the backend configuration changes.\n\nInitializing provider plugins...\n- Checking for available provider plugins...\n- Downloading plugin for provider \"aws\" (hashicorp/aws) 2.41.0...\n\n...\n\n* provider.aws: version = \"~&gt; 2.41\"\n\nTerraform has been successfully initialized!\n\n...\nC:\\work\\terraform\\stage\\services\\webserver-cluster&gt; terraform apply\nmodule.webserver_cluster.data.aws_availability_zones.all: Refreshing state...\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # module.webserver_cluster.aws_autoscaling_group.example will be created\n  + resource \"aws_autoscaling_group\" \"example\" {\n...\n      + tag {\n          + key                 = \"Name\"\n          + propagate_at_launch = true\n          + value               = \"webservers-stage-asg\"\n        }\n    }\n\n  # module.webserver_cluster.aws_elb.example will be created\n  + resource \"aws_elb\" \"example\" {\n...\n      + name                        = \"webservers-stage-clb\"\n...\n    }\n\n  # module.webserver_cluster.aws_launch_configuration.example will be created\n  + resource \"aws_launch_configuration\" \"example\" {\n...\n    }\n\n  # module.webserver_cluster.aws_security_group.elb will be created\n  + resource \"aws_security_group\" \"elb\" {\n...\n      + name                   = \"webservers-stage-elb\"\n...\n    }\n\n  # module.webserver_cluster.aws_security_group.instance will be created\n  + resource \"aws_security_group\" \"instance\" {\n...\n      + name                   = \"webservers-stage-instance\"\n...\n    }\n\nPlan: 5 to add, 0 to change, 0 to destroy.\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n\nmodule.webserver_cluster.aws_security_group.instance: Creating...\nmodule.webserver_cluster.aws_security_group.elb: Creating...\nmodule.webserver_cluster.aws_security_group.instance: Creation complete after 2s [id=sg-0774ace0accdfd348]\nmodule.webserver_cluster.aws_launch_configuration.example: Creating...\nmodule.webserver_cluster.aws_security_group.elb: Creation complete after 2s [id=sg-00e75aa1f2fc5d9e9]\nmodule.webserver_cluster.aws_elb.example: Creating...\nmodule.webserver_cluster.aws_launch_configuration.example: Creation complete after 1s [id=terraform-20191213010022791900000001]\nmodule.webserver_cluster.aws_elb.example: Creation complete after 4s [id=webservers-stage-clb]\nmodule.webserver_cluster.aws_autoscaling_group.example: Creating...\nmodule.webserver_cluster.aws_autoscaling_group.example: Still creating... [10s elapsed]\nmodule.webserver_cluster.aws_autoscaling_group.example: Still creating... [20s elapsed]\nmodule.webserver_cluster.aws_autoscaling_group.example: Still creating... [30s elapsed]\nmodule.webserver_cluster.aws_autoscaling_group.example: Still creating... [40s elapsed]\nmodule.webserver_cluster.aws_autoscaling_group.example: Creation complete after 41s [id=tf-asg-20191213010027291700000002]\n\nApply complete! Resources: 5 added, 0 changed, 0 destroyed.\nReleasing state lock. This may take a few moments...\n</code></pre>\n\n<p>It's magic! The cluster is up and running. So far so good.</p>\n\n<p>Now the problematic part. Suppose I want to modify the value of the cluster_name variable effectively renaming all the resources:</p>\n\n<pre><code>C:\\work\\terraform\\stage\\services\\webserver-cluster&gt; (cat .\\main.tf) -replace 'webservers-stage','webservers-stage2' | Out-File -Encoding ascii .\\main.tf\nC:\\work\\terraform\\stage\\services\\webserver-cluster&gt; cat .\\main.tf\nprovider \"aws\" {\n  region = \"us-east-2\"\n}\n\nterraform {\n  backend \"s3\" {\n    # Replace this with your bucket name!\n    bucket = \"mark-kharitonov-terraform-up-and-running-state\"\n    key    = \"stage/services/webserver-cluster/terraform.tfstate\"\n    region = \"us-east-2\"\n    # Replace this with your DynamoDB table name!\n    dynamodb_table = \"terraform-up-and-running-locks\"\n    encrypt        = true\n  }\n}\n\nmodule \"webserver_cluster\" {\n  source       = \"../../../modules/services/webserver-cluster\"\n  cluster_name = \"webservers-stage2\"\n}\n</code></pre>\n\n<p>Now the desire is for the cluster name to be <strong>webservers-stage2</strong>. Here is what happens:</p>\n\n<pre><code>C:\\work\\terraform\\stage\\services\\webserver-cluster&gt; terraform.exe apply\nmodule.webserver_cluster.data.aws_availability_zones.all: Refreshing state...\nmodule.webserver_cluster.aws_security_group.elb: Refreshing state... [id=sg-00e75aa1f2fc5d9e9]\nmodule.webserver_cluster.aws_security_group.instance: Refreshing state... [id=sg-0774ace0accdfd348]\nmodule.webserver_cluster.aws_elb.example: Refreshing state... [id=webservers-stage-clb]\nmodule.webserver_cluster.aws_launch_configuration.example: Refreshing state... [id=terraform-20191213010022791900000001]\nmodule.webserver_cluster.aws_autoscaling_group.example: Refreshing state... [id=tf-asg-20191213010027291700000002]\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  ~ update in-place\n-/+ destroy and then create replacement\n+/- create replacement and then destroy\n\nTerraform will perform the following actions:\n\n  # module.webserver_cluster.aws_autoscaling_group.example will be updated in-place\n  ~ resource \"aws_autoscaling_group\" \"example\" {\n        arn                       = \"arn:aws:autoscaling:us-east-2:170091157278:autoScalingGroup:5fe93e07-27d2-4d4e-91cc-24ae916ec735:autoScalingGroupName/tf-asg-20191213010027291700000002\"\n        availability_zones        = [\n            \"us-east-2a\",\n            \"us-east-2b\",\n            \"us-east-2c\",\n        ]\n        default_cooldown          = 300\n        desired_capacity          = 2\n        enabled_metrics           = []\n        force_delete              = false\n        health_check_grace_period = 300\n        health_check_type         = \"ELB\"\n        id                        = \"tf-asg-20191213010027291700000002\"\n      ~ launch_configuration      = \"terraform-20191213010022791900000001\" -&gt; (known after apply)\n      ~ load_balancers            = [\n          - \"webservers-stage-clb\",\n          + \"webservers-stage2-clb\",\n        ]\n        max_instance_lifetime     = 0\n        max_size                  = 10\n        metrics_granularity       = \"1Minute\"\n        min_size                  = 2\n        name                      = \"tf-asg-20191213010027291700000002\"\n        protect_from_scale_in     = false\n        service_linked_role_arn   = \"arn:aws:iam::170091157278:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling\"\n        suspended_processes       = []\n        target_group_arns         = []\n        termination_policies      = []\n        vpc_zone_identifier       = []\n        wait_for_capacity_timeout = \"10m\"\n\n      - tag {\n          - key                 = \"Name\" -&gt; null\n          - propagate_at_launch = true -&gt; null\n          - value               = \"webservers-stage-asg\" -&gt; null\n        }\n      + tag {\n          + key                 = \"Name\"\n          + propagate_at_launch = true\n          + value               = \"webservers-stage2-asg\"\n        }\n    }\n\n  # module.webserver_cluster.aws_elb.example must be replaced\n-/+ resource \"aws_elb\" \"example\" {\n      ~ arn                         = \"arn:aws:elasticloadbalancing:us-east-2:170091157278:loadbalancer/webservers-stage-clb\" -&gt; (known after apply)\n        availability_zones          = [\n            \"us-east-2a\",\n            \"us-east-2b\",\n            \"us-east-2c\",\n        ]\n        connection_draining         = false\n        connection_draining_timeout = 300\n        cross_zone_load_balancing   = true\n      ~ dns_name                    = \"webservers-stage-clb-641972551.us-east-2.elb.amazonaws.com\" -&gt; (known after apply)\n      ~ id                          = \"webservers-stage-clb\" -&gt; (known after apply)\n        idle_timeout                = 60\n      ~ instances                   = [\n          - \"i-00617fcc06a5ae64f\",\n          - \"i-0ee5eb03f3bf733b0\",\n        ] -&gt; (known after apply)\n      ~ internal                    = false -&gt; (known after apply)\n      ~ name                        = \"webservers-stage-clb\" -&gt; \"webservers-stage2-clb\" # forces replacement\n      ~ security_groups             = [\n          - \"sg-00e75aa1f2fc5d9e9\",\n        ] -&gt; (known after apply)\n      ~ source_security_group       = \"170091157278/webservers-stage-elb\" -&gt; (known after apply)\n      ~ source_security_group_id    = \"sg-00e75aa1f2fc5d9e9\" -&gt; (known after apply)\n      ~ subnets                     = [\n          - \"subnet-3e7c2244\",\n          - \"subnet-6569ef29\",\n          - \"subnet-74e8081f\",\n        ] -&gt; (known after apply)\n      - tags                        = {} -&gt; null\n      ~ zone_id                     = \"Z3AADJGX6KTTL2\" -&gt; (known after apply)\n\n        health_check {\n            healthy_threshold   = 2\n            interval            = 30\n            target              = \"HTTP:8080/\"\n            timeout             = 3\n            unhealthy_threshold = 2\n        }\n\n        listener {\n            instance_port     = 8080\n            instance_protocol = \"http\"\n            lb_port           = 80\n            lb_protocol       = \"http\"\n        }\n    }\n\n  # module.webserver_cluster.aws_launch_configuration.example must be replaced\n+/- resource \"aws_launch_configuration\" \"example\" {\n        associate_public_ip_address      = false\n      ~ ebs_optimized                    = false -&gt; (known after apply)\n        enable_monitoring                = true\n      ~ id                               = \"terraform-20191213010022791900000001\" -&gt; (known after apply)\n        image_id                         = \"ami-0c55b159cbfafe1f0\"\n        instance_type                    = \"t2.micro\"\n      + key_name                         = (known after apply)\n      ~ name                             = \"terraform-20191213010022791900000001\" -&gt; (known after apply)\n      ~ security_groups                  = [\n          - \"sg-0774ace0accdfd348\",\n        ] -&gt; (known after apply) # forces replacement\n        user_data                        = \"398ce7cb244926b5b22c0dcb00d885ac509c0ee5\"\n      - vpc_classic_link_security_groups = [] -&gt; null\n\n      + ebs_block_device {\n          + delete_on_termination = (known after apply)\n          + device_name           = (known after apply)\n          + encrypted             = (known after apply)\n          + iops                  = (known after apply)\n          + no_device             = (known after apply)\n          + snapshot_id           = (known after apply)\n          + volume_size           = (known after apply)\n          + volume_type           = (known after apply)\n        }\n\n      + root_block_device {\n          + delete_on_termination = (known after apply)\n          + encrypted             = (known after apply)\n          + iops                  = (known after apply)\n          + volume_size           = (known after apply)\n          + volume_type           = (known after apply)\n        }\n    }\n\n  # module.webserver_cluster.aws_security_group.elb must be replaced\n-/+ resource \"aws_security_group\" \"elb\" {\n      ~ arn                    = \"arn:aws:ec2:us-east-2:170091157278:security-group/sg-00e75aa1f2fc5d9e9\" -&gt; (known after apply)\n        description            = \"Managed by Terraform\"\n        egress                 = [\n            {\n                cidr_blocks      = [\n                    \"0.0.0.0/0\",\n                ]\n                description      = \"\"\n                from_port        = 0\n                ipv6_cidr_blocks = []\n                prefix_list_ids  = []\n                protocol         = \"-1\"\n                security_groups  = []\n                self             = false\n                to_port          = 0\n            },\n        ]\n      ~ id                     = \"sg-00e75aa1f2fc5d9e9\" -&gt; (known after apply)\n        ingress                = [\n            {\n                cidr_blocks      = [\n                    \"0.0.0.0/0\",\n                ]\n                description      = \"\"\n                from_port        = 80\n                ipv6_cidr_blocks = []\n                prefix_list_ids  = []\n                protocol         = \"tcp\"\n                security_groups  = []\n                self             = false\n                to_port          = 80\n            },\n        ]\n      ~ name                   = \"webservers-stage-elb\" -&gt; \"webservers-stage2-elb\" # forces replacement\n      ~ owner_id               = \"170091157278\" -&gt; (known after apply)\n        revoke_rules_on_delete = false\n      - tags                   = {} -&gt; null\n      ~ vpc_id                 = \"vpc-e8a15983\" -&gt; (known after apply)\n    }\n\n  # module.webserver_cluster.aws_security_group.instance must be replaced\n+/- resource \"aws_security_group\" \"instance\" {\n      ~ arn                    = \"arn:aws:ec2:us-east-2:170091157278:security-group/sg-0774ace0accdfd348\" -&gt; (known after apply)\n        description            = \"Managed by Terraform\"\n      ~ egress                 = [] -&gt; (known after apply)\n      ~ id                     = \"sg-0774ace0accdfd348\" -&gt; (known after apply)\n        ingress                = [\n            {\n                cidr_blocks      = [\n                    \"0.0.0.0/0\",\n                ]\n                description      = \"\"\n                from_port        = 8080\n                ipv6_cidr_blocks = []\n                prefix_list_ids  = []\n                protocol         = \"tcp\"\n                security_groups  = []\n                self             = false\n                to_port          = 8080\n            },\n        ]\n      ~ name                   = \"webservers-stage-instance\" -&gt; \"webservers-stage2-instance\" # forces replacement\n      ~ owner_id               = \"170091157278\" -&gt; (known after apply)\n        revoke_rules_on_delete = false\n      - tags                   = {} -&gt; null\n      ~ vpc_id                 = \"vpc-e8a15983\" -&gt; (known after apply)\n    }\n\nPlan: 4 to add, 1 to change, 4 to destroy.\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value: yes\n\nmodule.webserver_cluster.aws_elb.example: Destroying... [id=webservers-stage-clb]\nmodule.webserver_cluster.aws_security_group.instance: Creating...\nmodule.webserver_cluster.aws_elb.example: Destruction complete after 1s\nmodule.webserver_cluster.aws_security_group.elb: Destroying... [id=sg-00e75aa1f2fc5d9e9]\nmodule.webserver_cluster.aws_security_group.instance: Creation complete after 2s [id=sg-0b3b7c4ceb54ac416]\nmodule.webserver_cluster.aws_launch_configuration.example: Creating...\nmodule.webserver_cluster.aws_launch_configuration.example: Creation complete after 1s [id=terraform-20191213015144456000000001]\nmodule.webserver_cluster.aws_security_group.elb: Still destroying... [id=sg-00e75aa1f2fc5d9e9, 10s elapsed]\nmodule.webserver_cluster.aws_security_group.elb: Still destroying... [id=sg-00e75aa1f2fc5d9e9, 20s elapsed]\nmodule.webserver_cluster.aws_security_group.elb: Destruction complete after 28s\nmodule.webserver_cluster.aws_security_group.elb: Creating...\nmodule.webserver_cluster.aws_security_group.elb: Creation complete after 2s [id=sg-06f4f489b60ba9134]\nmodule.webserver_cluster.aws_elb.example: Creating...\nmodule.webserver_cluster.aws_elb.example: Creation complete after 4s [id=webservers-stage2-clb]\nmodule.webserver_cluster.aws_autoscaling_group.example: Modifying... [id=tf-asg-20191213010027291700000002]\nmodule.webserver_cluster.aws_autoscaling_group.example: Still modifying... [id=tf-asg-20191213010027291700000002, 10s elapsed]\nmodule.webserver_cluster.aws_autoscaling_group.example: Still modifying... [id=tf-asg-20191213010027291700000002, 20s elapsed]\nmodule.webserver_cluster.aws_autoscaling_group.example: Still modifying... [id=tf-asg-20191213010027291700000002, 30s elapsed]\nmodule.webserver_cluster.aws_autoscaling_group.example: Modifications complete after 39s [id=tf-asg-20191213010027291700000002]\nmodule.webserver_cluster.aws_launch_configuration.example: Destroying... [id=terraform-20191213010022791900000001]\nmodule.webserver_cluster.aws_launch_configuration.example: Destruction complete after 0s\nmodule.webserver_cluster.aws_security_group.instance: Destroying... [id=sg-0774ace0accdfd348]\nmodule.webserver_cluster.aws_security_group.instance: Still destroying... [id=sg-0774ace0accdfd348, 10s elapsed]\n...\nmodule.webserver_cluster.aws_security_group.instance: Still destroying... [id=sg-0774ace0accdfd348, 10m0s elapsed]\n\nError: Error deleting security group: DependencyViolation: resource sg-0774ace0accdfd348 has a dependent object\n        status code: 400, request id: d8801db8-65c1-4de1-9f7a-107b2cad247f\n\n\nReleasing state lock. This may take a few moments...\n</code></pre>\n\n<p>What am I missing?</p>\n", "OwnerUserId": "80002", "LastActivityDate": "2019-12-27T06:16:41.240", "Title": "terraform unable to rename multiple aws resources", "Tags": "<terraform><terraform-provider-aws>", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "104876853", "PostId": "59315467", "Score": "0", "Text": "Have you tried using the `create_before_destroy` lifecycle on the `instance` security group? (I don't have time to verify atm, but think it could solve the problem)", "CreationDate": "2019-12-14T22:17:57.143", "UserId": "1127683", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Have you tried using the `create_before_destroy` lifecycle on the `instance` security group? ", "keywords": ["instance"]}]}, {"Id": "104887333", "PostId": "59315467", "Score": "0", "Text": "I tried. It does not work. I set it to true, so it created the new instance first, but then it still fails to destroy the old one. Same error.", "CreationDate": "2019-12-15T15:49:19.220", "UserId": "80002", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I set it to true, so it created the new instance first, but then it still fails to destroy the old one. ", "keywords": ["instance"]}]}], "history": [{"Id": "211120435", "PostHistoryTypeId": "2", "PostId": "59315467", "RevisionGUID": "fa224eb7-283f-4dca-9ad6-7ffa1405a16a", "CreationDate": "2019-12-13T02:49:05.677", "UserId": "80002", "Text": "I am following [this][1] excellent guide to terraform, specifically I am currently on the 4th part - [How to create reusable infrastructure with Terraform modules][2]. And here I have a problem - terraform is unable to rename the resources from the guide. I have no idea whether it is my problem or a bug. And if a bug - where to report it? Is it the aws provider bug or the terraform bug? And what is the workaround?\r\n\r\nAnyway, here is my directory structure:\r\n```\r\nC:\\Work\\terraform> tree /f\r\nFolder PATH listing for volume OSDisk\r\nVolume serial number is 689E-A096\r\nC:.\r\n\u2502   .gitignore\r\n\u2502\r\n\u251c\u2500\u2500\u2500backend\r\n\u2502       main.tf\r\n\u2502       terraform.tfstate\r\n\u2502\r\n\u251c\u2500\u2500\u2500modules\r\n\u2502   \u2514\u2500\u2500\u2500services\r\n\u2502       \u2514\u2500\u2500\u2500webserver-cluster\r\n\u2502               main.tf\r\n\u2502               outputs.tf\r\n\u2502               variables.tf\r\n\u2502\r\n\u2514\u2500\u2500\u2500stage\r\n    \u2514\u2500\u2500\u2500services\r\n        \u2514\u2500\u2500\u2500webserver-cluster\r\n                main.tf\r\n```\r\nThe backend folder contains the code to setup the S3 backend:\r\n```\r\nC:\\Work\\terraform\\backend> cat .\\main.tf\r\nprovider \"aws\" {\r\n  region = \"us-east-2\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"terraform_state\" {\r\n  bucket = \"mark-kharitonov-terraform-up-and-running-state\"\r\n  force_destroy = true\r\n\r\n  # Enable versioning so we can see the full revision history of our\r\n  # state files\r\n  versioning {\r\n    enabled = true\r\n  }\r\n\r\n  # Enable server-side encryption by default\r\n  server_side_encryption_configuration {\r\n    rule {\r\n      apply_server_side_encryption_by_default {\r\n        sse_algorithm = \"AES256\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_dynamodb_table\" \"terraform_locks\" {\r\n  name         = \"terraform-up-and-running-locks\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key     = \"LockID\"\r\n\r\n  attribute {\r\n    name = \"LockID\"\r\n    type = \"S\"\r\n  }\r\n}\r\nC:\\Work\\terraform\\backend> terraform init\r\n\r\nInitializing the backend...\r\n\r\nInitializing provider plugins...\r\n- Checking for available provider plugins...\r\n- Downloading plugin for provider \"aws\" (hashicorp/aws) 2.41.0...\r\n\r\n...\r\n\r\n* provider.aws: version = \"~> 2.41\"\r\n\r\nTerraform has been successfully initialized!\r\n\r\n...\r\n\r\nC:\\Work\\terraform\\backend> terraform apply\r\n\r\nAn execution plan has been generated and is shown below.\r\nResource actions are indicated with the following symbols:\r\n  + create\r\n\r\nTerraform will perform the following actions:\r\n\r\n  # aws_dynamodb_table.terraform_locks will be created\r\n  + resource \"aws_dynamodb_table\" \"terraform_locks\" {\r\n...\r\n      + name             = \"terraform-up-and-running-locks\"\r\n...\r\n    }\r\n\r\n  # aws_s3_bucket.terraform_state will be created\r\n  + resource \"aws_s3_bucket\" \"terraform_state\" {\r\n...\r\n      + bucket                      = \"mark-kharitonov-terraform-up-and-running-state\"\r\n...\r\n    }\r\n\r\nPlan: 2 to add, 0 to change, 0 to destroy.\r\n\r\nDo you want to perform these actions?\r\n  Terraform will perform the actions described above.\r\n  Only 'yes' will be accepted to approve.\r\n\r\n  Enter a value: yes\r\n\r\naws_dynamodb_table.terraform_locks: Creating...\r\naws_s3_bucket.terraform_state: Creating...\r\naws_dynamodb_table.terraform_locks: Creation complete after 5s [id=terraform-up-and-running-locks]\r\naws_s3_bucket.terraform_state: Creation complete after 9s [id=mark-kharitonov-terraform-up-and-running-state]\r\n\r\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\r\n```\r\nAll is good, the backend is set up.\r\n\r\nNext, there is the modules folder. The guide describes its content, but here it is:\r\n```\r\nC:\\work\\terraform\\modules\\services\\webserver-cluster> cat .\\variables.tf\r\nvariable \"server_port\" {\r\n  description = \"The port the server will use for HTTP requests\"\r\n  type        = number\r\n  default     = 8080\r\n}\r\n\r\nvariable \"cluster_name\" {\r\n  description = \"The name to use for all the cluster resources\"\r\n  type        = string\r\n}\r\nC:\\work\\terraform\\modules\\services\\webserver-cluster> cat .\\main.tf\r\ndata \"aws_availability_zones\" \"all\" {}\r\n\r\nresource \"aws_launch_configuration\" \"example\" {\r\n  image_id        = \"ami-0c55b159cbfafe1f0\"\r\n  instance_type   = \"t2.micro\"\r\n  security_groups = [aws_security_group.instance.id]\r\n  user_data       = <<-EOF\r\n              #!/bin/bash\r\n              echo \"Hello, World\" > index.html\r\n              nohup busybox httpd -f -p \"${var.server_port}\" &\r\n              EOF\r\n  lifecycle {\r\n    create_before_destroy = true\r\n  }\r\n}\r\n\r\nresource \"aws_autoscaling_group\" \"example\" {\r\n  launch_configuration = aws_launch_configuration.example.id\r\n  availability_zones   = data.aws_availability_zones.all.names\r\n\r\n  min_size = 2\r\n  max_size = 10\r\n\r\n  load_balancers    = [aws_elb.example.name]\r\n  health_check_type = \"ELB\"\r\n\r\n  tag {\r\n    key                 = \"Name\"\r\n    value               = \"${var.cluster_name}-asg\"\r\n    propagate_at_launch = true\r\n  }\r\n}\r\n\r\nresource \"aws_elb\" \"example\" {\r\n  name               = \"${var.cluster_name}-clb\"\r\n  security_groups    = [aws_security_group.elb.id]\r\n  availability_zones = data.aws_availability_zones.all.names\r\n\r\n  health_check {\r\n    target              = \"HTTP:${var.server_port}/\"\r\n    interval            = 30\r\n    timeout             = 3\r\n    healthy_threshold   = 2\r\n    unhealthy_threshold = 2\r\n  }\r\n\r\n  # This adds a listener for incoming HTTP requests.\r\n  listener {\r\n    lb_port           = 80\r\n    lb_protocol       = \"http\"\r\n    instance_port     = var.server_port\r\n    instance_protocol = \"http\"\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"elb\" {\r\n  name = \"${var.cluster_name}-elb\"\r\n\r\n  # Allow all outbound\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  # Inbound HTTP from anywhere\r\n  ingress {\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"instance\" {\r\n  name = \"${var.cluster_name}-instance\"\r\n  ingress {\r\n    from_port   = var.server_port\r\n    to_port     = var.server_port\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\nC:\\work\\terraform\\modules\\services\\webserver-cluster> cat .\\outputs.tf\r\noutput \"clb_dns_name\" {\r\n  value       = aws_elb.example.dns_name\r\n  description = \"The domain name of the load balancer\"\r\n}\r\n```\r\nAnd now I am using the module to create a cluster in staging named `webservers-stage`:\r\n```\r\nC:\\work\\terraform\\stage\\services\\webserver-cluster> terraform init\r\nInitializing modules...\r\n- webserver_cluster in ..\\..\\..\\modules\\services\\webserver-cluster\r\n\r\nInitializing the backend...\r\n\r\nSuccessfully configured the backend \"s3\"! Terraform will automatically\r\nuse this backend unless the backend configuration changes.\r\n\r\nInitializing provider plugins...\r\n- Checking for available provider plugins...\r\n- Downloading plugin for provider \"aws\" (hashicorp/aws) 2.41.0...\r\n\r\n...\r\n\r\n* provider.aws: version = \"~> 2.41\"\r\n\r\nTerraform has been successfully initialized!\r\n\r\n...\r\nC:\\work\\terraform\\stage\\services\\webserver-cluster> terraform apply\r\nmodule.webserver_cluster.data.aws_availability_zones.all: Refreshing state...\r\n\r\nAn execution plan has been generated and is shown below.\r\nResource actions are indicated with the following symbols:\r\n  + create\r\n\r\nTerraform will perform the following actions:\r\n\r\n  # module.webserver_cluster.aws_autoscaling_group.example will be created\r\n  + resource \"aws_autoscaling_group\" \"example\" {\r\n...\r\n      + tag {\r\n          + key                 = \"Name\"\r\n          + propagate_at_launch = true\r\n          + value               = \"webservers-stage-asg\"\r\n        }\r\n    }\r\n\r\n  # module.webserver_cluster.aws_elb.example will be created\r\n  + resource \"aws_elb\" \"example\" {\r\n...\r\n      + name                        = \"webservers-stage-clb\"\r\n...\r\n    }\r\n\r\n  # module.webserver_cluster.aws_launch_configuration.example will be created\r\n  + resource \"aws_launch_configuration\" \"example\" {\r\n...\r\n    }\r\n\r\n  # module.webserver_cluster.aws_security_group.elb will be created\r\n  + resource \"aws_security_group\" \"elb\" {\r\n...\r\n      + name                   = \"webservers-stage-elb\"\r\n...\r\n    }\r\n\r\n  # module.webserver_cluster.aws_security_group.instance will be created\r\n  + resource \"aws_security_group\" \"instance\" {\r\n...\r\n      + name                   = \"webservers-stage-instance\"\r\n...\r\n    }\r\n\r\nPlan: 5 to add, 0 to change, 0 to destroy.\r\n\r\nDo you want to perform these actions?\r\n  Terraform will perform the actions described above.\r\n  Only 'yes' will be accepted to approve.\r\n\r\n  Enter a value: yes\r\n\r\nmodule.webserver_cluster.aws_security_group.instance: Creating...\r\nmodule.webserver_cluster.aws_security_group.elb: Creating...\r\nmodule.webserver_cluster.aws_security_group.instance: Creation complete after 2s [id=sg-0774ace0accdfd348]\r\nmodule.webserver_cluster.aws_launch_configuration.example: Creating...\r\nmodule.webserver_cluster.aws_security_group.elb: Creation complete after 2s [id=sg-00e75aa1f2fc5d9e9]\r\nmodule.webserver_cluster.aws_elb.example: Creating...\r\nmodule.webserver_cluster.aws_launch_configuration.example: Creation complete after 1s [id=terraform-20191213010022791900000001]\r\nmodule.webserver_cluster.aws_elb.example: Creation complete after 4s [id=webservers-stage-clb]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Creating...\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Still creating... [10s elapsed]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Still creating... [20s elapsed]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Still creating... [30s elapsed]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Still creating... [40s elapsed]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Creation complete after 41s [id=tf-asg-20191213010027291700000002]\r\n\r\nApply complete! Resources: 5 added, 0 changed, 0 destroyed.\r\nReleasing state lock. This may take a few moments...\r\n```\r\nIt's magic! The cluster is up and running. So far so good.\r\n\r\nNow the problematic part. Suppose I want to modify the value of the cluster_name variable effectively renaming all the resources:\r\n```\r\nC:\\work\\terraform\\stage\\services\\webserver-cluster> (cat .\\main.tf) -replace 'webservers-stage','webservers-stage2' | Out-File -Encoding ascii .\\main.tf\r\nC:\\work\\terraform\\stage\\services\\webserver-cluster> cat .\\main.tf\r\nprovider \"aws\" {\r\n  region = \"us-east-2\"\r\n}\r\n\r\nterraform {\r\n  backend \"s3\" {\r\n    # Replace this with your bucket name!\r\n    bucket = \"mark-kharitonov-terraform-up-and-running-state\"\r\n    key    = \"stage/services/webserver-cluster/terraform.tfstate\"\r\n    region = \"us-east-2\"\r\n    # Replace this with your DynamoDB table name!\r\n    dynamodb_table = \"terraform-up-and-running-locks\"\r\n    encrypt        = true\r\n  }\r\n}\r\n\r\nmodule \"webserver_cluster\" {\r\n  source       = \"../../../modules/services/webserver-cluster\"\r\n  cluster_name = \"webservers-stage2\"\r\n}\r\n```\r\nNow the desire is for the cluster name to be **webservers-stage2**. Here is what happens:\r\n```\r\nC:\\work\\terraform\\stage\\services\\webserver-cluster> terraform.exe apply\r\nmodule.webserver_cluster.data.aws_availability_zones.all: Refreshing state...\r\nmodule.webserver_cluster.aws_security_group.elb: Refreshing state... [id=sg-00e75aa1f2fc5d9e9]\r\nmodule.webserver_cluster.aws_security_group.instance: Refreshing state... [id=sg-0774ace0accdfd348]\r\nmodule.webserver_cluster.aws_elb.example: Refreshing state... [id=webservers-stage-clb]\r\nmodule.webserver_cluster.aws_launch_configuration.example: Refreshing state... [id=terraform-20191213010022791900000001]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Refreshing state... [id=tf-asg-20191213010027291700000002]\r\n\r\nAn execution plan has been generated and is shown below.\r\nResource actions are indicated with the following symbols:\r\n  ~ update in-place\r\n-/+ destroy and then create replacement\r\n+/- create replacement and then destroy\r\n\r\nTerraform will perform the following actions:\r\n\r\n  # module.webserver_cluster.aws_autoscaling_group.example will be updated in-place\r\n  ~ resource \"aws_autoscaling_group\" \"example\" {\r\n        arn                       = \"arn:aws:autoscaling:us-east-2:170091157278:autoScalingGroup:5fe93e07-27d2-4d4e-91cc-24ae916ec735:autoScalingGroupName/tf-asg-20191213010027291700000002\"\r\n        availability_zones        = [\r\n            \"us-east-2a\",\r\n            \"us-east-2b\",\r\n            \"us-east-2c\",\r\n        ]\r\n        default_cooldown          = 300\r\n        desired_capacity          = 2\r\n        enabled_metrics           = []\r\n        force_delete              = false\r\n        health_check_grace_period = 300\r\n        health_check_type         = \"ELB\"\r\n        id                        = \"tf-asg-20191213010027291700000002\"\r\n      ~ launch_configuration      = \"terraform-20191213010022791900000001\" -> (known after apply)\r\n      ~ load_balancers            = [\r\n          - \"webservers-stage-clb\",\r\n          + \"webservers-stage2-clb\",\r\n        ]\r\n        max_instance_lifetime     = 0\r\n        max_size                  = 10\r\n        metrics_granularity       = \"1Minute\"\r\n        min_size                  = 2\r\n        name                      = \"tf-asg-20191213010027291700000002\"\r\n        protect_from_scale_in     = false\r\n        service_linked_role_arn   = \"arn:aws:iam::170091157278:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling\"\r\n        suspended_processes       = []\r\n        target_group_arns         = []\r\n        termination_policies      = []\r\n        vpc_zone_identifier       = []\r\n        wait_for_capacity_timeout = \"10m\"\r\n\r\n      - tag {\r\n          - key                 = \"Name\" -> null\r\n          - propagate_at_launch = true -> null\r\n          - value               = \"webservers-stage-asg\" -> null\r\n        }\r\n      + tag {\r\n          + key                 = \"Name\"\r\n          + propagate_at_launch = true\r\n          + value               = \"webservers-stage2-asg\"\r\n        }\r\n    }\r\n\r\n  # module.webserver_cluster.aws_elb.example must be replaced\r\n-/+ resource \"aws_elb\" \"example\" {\r\n      ~ arn                         = \"arn:aws:elasticloadbalancing:us-east-2:170091157278:loadbalancer/webservers-stage-clb\" -> (known after apply)\r\n        availability_zones          = [\r\n            \"us-east-2a\",\r\n            \"us-east-2b\",\r\n            \"us-east-2c\",\r\n        ]\r\n        connection_draining         = false\r\n        connection_draining_timeout = 300\r\n        cross_zone_load_balancing   = true\r\n      ~ dns_name                    = \"webservers-stage-clb-641972551.us-east-2.elb.amazonaws.com\" -> (known after apply)\r\n      ~ id                          = \"webservers-stage-clb\" -> (known after apply)\r\n        idle_timeout                = 60\r\n      ~ instances                   = [\r\n          - \"i-00617fcc06a5ae64f\",\r\n          - \"i-0ee5eb03f3bf733b0\",\r\n        ] -> (known after apply)\r\n      ~ internal                    = false -> (known after apply)\r\n      ~ name                        = \"webservers-stage-clb\" -> \"webservers-stage2-clb\" # forces replacement\r\n      ~ security_groups             = [\r\n          - \"sg-00e75aa1f2fc5d9e9\",\r\n        ] -> (known after apply)\r\n      ~ source_security_group       = \"170091157278/webservers-stage-elb\" -> (known after apply)\r\n      ~ source_security_group_id    = \"sg-00e75aa1f2fc5d9e9\" -> (known after apply)\r\n      ~ subnets                     = [\r\n          - \"subnet-3e7c2244\",\r\n          - \"subnet-6569ef29\",\r\n          - \"subnet-74e8081f\",\r\n        ] -> (known after apply)\r\n      - tags                        = {} -> null\r\n      ~ zone_id                     = \"Z3AADJGX6KTTL2\" -> (known after apply)\r\n\r\n        health_check {\r\n            healthy_threshold   = 2\r\n            interval            = 30\r\n            target              = \"HTTP:8080/\"\r\n            timeout             = 3\r\n            unhealthy_threshold = 2\r\n        }\r\n\r\n        listener {\r\n            instance_port     = 8080\r\n            instance_protocol = \"http\"\r\n            lb_port           = 80\r\n            lb_protocol       = \"http\"\r\n        }\r\n    }\r\n\r\n  # module.webserver_cluster.aws_launch_configuration.example must be replaced\r\n+/- resource \"aws_launch_configuration\" \"example\" {\r\n        associate_public_ip_address      = false\r\n      ~ ebs_optimized                    = false -> (known after apply)\r\n        enable_monitoring                = true\r\n      ~ id                               = \"terraform-20191213010022791900000001\" -> (known after apply)\r\n        image_id                         = \"ami-0c55b159cbfafe1f0\"\r\n        instance_type                    = \"t2.micro\"\r\n      + key_name                         = (known after apply)\r\n      ~ name                             = \"terraform-20191213010022791900000001\" -> (known after apply)\r\n      ~ security_groups                  = [\r\n          - \"sg-0774ace0accdfd348\",\r\n        ] -> (known after apply) # forces replacement\r\n        user_data                        = \"398ce7cb244926b5b22c0dcb00d885ac509c0ee5\"\r\n      - vpc_classic_link_security_groups = [] -> null\r\n\r\n      + ebs_block_device {\r\n          + delete_on_termination = (known after apply)\r\n          + device_name           = (known after apply)\r\n          + encrypted             = (known after apply)\r\n          + iops                  = (known after apply)\r\n          + no_device             = (known after apply)\r\n          + snapshot_id           = (known after apply)\r\n          + volume_size           = (known after apply)\r\n          + volume_type           = (known after apply)\r\n        }\r\n\r\n      + root_block_device {\r\n          + delete_on_termination = (known after apply)\r\n          + encrypted             = (known after apply)\r\n          + iops                  = (known after apply)\r\n          + volume_size           = (known after apply)\r\n          + volume_type           = (known after apply)\r\n        }\r\n    }\r\n\r\n  # module.webserver_cluster.aws_security_group.elb must be replaced\r\n-/+ resource \"aws_security_group\" \"elb\" {\r\n      ~ arn                    = \"arn:aws:ec2:us-east-2:170091157278:security-group/sg-00e75aa1f2fc5d9e9\" -> (known after apply)\r\n        description            = \"Managed by Terraform\"\r\n        egress                 = [\r\n            {\r\n                cidr_blocks      = [\r\n                    \"0.0.0.0/0\",\r\n                ]\r\n                description      = \"\"\r\n                from_port        = 0\r\n                ipv6_cidr_blocks = []\r\n                prefix_list_ids  = []\r\n                protocol         = \"-1\"\r\n                security_groups  = []\r\n                self             = false\r\n                to_port          = 0\r\n            },\r\n        ]\r\n      ~ id                     = \"sg-00e75aa1f2fc5d9e9\" -> (known after apply)\r\n        ingress                = [\r\n            {\r\n                cidr_blocks      = [\r\n                    \"0.0.0.0/0\",\r\n                ]\r\n                description      = \"\"\r\n                from_port        = 80\r\n                ipv6_cidr_blocks = []\r\n                prefix_list_ids  = []\r\n                protocol         = \"tcp\"\r\n                security_groups  = []\r\n                self             = false\r\n                to_port          = 80\r\n            },\r\n        ]\r\n      ~ name                   = \"webservers-stage-elb\" -> \"webservers-stage2-elb\" # forces replacement\r\n      ~ owner_id               = \"170091157278\" -> (known after apply)\r\n        revoke_rules_on_delete = false\r\n      - tags                   = {} -> null\r\n      ~ vpc_id                 = \"vpc-e8a15983\" -> (known after apply)\r\n    }\r\n\r\n  # module.webserver_cluster.aws_security_group.instance must be replaced\r\n+/- resource \"aws_security_group\" \"instance\" {\r\n      ~ arn                    = \"arn:aws:ec2:us-east-2:170091157278:security-group/sg-0774ace0accdfd348\" -> (known after apply)\r\n        description            = \"Managed by Terraform\"\r\n      ~ egress                 = [] -> (known after apply)\r\n      ~ id                     = \"sg-0774ace0accdfd348\" -> (known after apply)\r\n        ingress                = [\r\n            {\r\n                cidr_blocks      = [\r\n                    \"0.0.0.0/0\",\r\n                ]\r\n                description      = \"\"\r\n                from_port        = 8080\r\n                ipv6_cidr_blocks = []\r\n                prefix_list_ids  = []\r\n                protocol         = \"tcp\"\r\n                security_groups  = []\r\n                self             = false\r\n                to_port          = 8080\r\n            },\r\n        ]\r\n      ~ name                   = \"webservers-stage-instance\" -> \"webservers-stage2-instance\" # forces replacement\r\n      ~ owner_id               = \"170091157278\" -> (known after apply)\r\n        revoke_rules_on_delete = false\r\n      - tags                   = {} -> null\r\n      ~ vpc_id                 = \"vpc-e8a15983\" -> (known after apply)\r\n    }\r\n\r\nPlan: 4 to add, 1 to change, 4 to destroy.\r\n\r\nDo you want to perform these actions?\r\n  Terraform will perform the actions described above.\r\n  Only 'yes' will be accepted to approve.\r\n\r\n  Enter a value: yes\r\n\r\nmodule.webserver_cluster.aws_elb.example: Destroying... [id=webservers-stage-clb]\r\nmodule.webserver_cluster.aws_security_group.instance: Creating...\r\nmodule.webserver_cluster.aws_elb.example: Destruction complete after 1s\r\nmodule.webserver_cluster.aws_security_group.elb: Destroying... [id=sg-00e75aa1f2fc5d9e9]\r\nmodule.webserver_cluster.aws_security_group.instance: Creation complete after 2s [id=sg-0b3b7c4ceb54ac416]\r\nmodule.webserver_cluster.aws_launch_configuration.example: Creating...\r\nmodule.webserver_cluster.aws_launch_configuration.example: Creation complete after 1s [id=terraform-20191213015144456000000001]\r\nmodule.webserver_cluster.aws_security_group.elb: Still destroying... [id=sg-00e75aa1f2fc5d9e9, 10s elapsed]\r\nmodule.webserver_cluster.aws_security_group.elb: Still destroying... [id=sg-00e75aa1f2fc5d9e9, 20s elapsed]\r\nmodule.webserver_cluster.aws_security_group.elb: Destruction complete after 28s\r\nmodule.webserver_cluster.aws_security_group.elb: Creating...\r\nmodule.webserver_cluster.aws_security_group.elb: Creation complete after 2s [id=sg-06f4f489b60ba9134]\r\nmodule.webserver_cluster.aws_elb.example: Creating...\r\nmodule.webserver_cluster.aws_elb.example: Creation complete after 4s [id=webservers-stage2-clb]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Modifying... [id=tf-asg-20191213010027291700000002]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Still modifying... [id=tf-asg-20191213010027291700000002, 10s elapsed]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Still modifying... [id=tf-asg-20191213010027291700000002, 20s elapsed]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Still modifying... [id=tf-asg-20191213010027291700000002, 30s elapsed]\r\nmodule.webserver_cluster.aws_autoscaling_group.example: Modifications complete after 39s [id=tf-asg-20191213010027291700000002]\r\nmodule.webserver_cluster.aws_launch_configuration.example: Destroying... [id=terraform-20191213010022791900000001]\r\nmodule.webserver_cluster.aws_launch_configuration.example: Destruction complete after 0s\r\nmodule.webserver_cluster.aws_security_group.instance: Destroying... [id=sg-0774ace0accdfd348]\r\nmodule.webserver_cluster.aws_security_group.instance: Still destroying... [id=sg-0774ace0accdfd348, 10s elapsed]\r\n...\r\nmodule.webserver_cluster.aws_security_group.instance: Still destroying... [id=sg-0774ace0accdfd348, 10m0s elapsed]\r\n\r\nError: Error deleting security group: DependencyViolation: resource sg-0774ace0accdfd348 has a dependent object\r\n        status code: 400, request id: d8801db8-65c1-4de1-9f7a-107b2cad247f\r\n\r\n\r\nReleasing state lock. This may take a few moments...\r\n```\r\nWhat am I missing?\r\n\r\n  [1]: https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca\r\n  [2]: https://blog.gruntwork.io/how-to-create-reusable-infrastructure-with-terraform-modules-25526d65f73d", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Is it the aws provider bug or the terraform bug? ", "keywords": ["provider"]}, {"source": "Text", "text": "Anyway, here is my directory structure: ``` C:\\Work\\terraform> tree /f Folder PATH listing for volume OSDisk Volume serial number is 689E-A096 C:. \u2502 .gitignore \u2502 \u251c\u2500\u2500\u2500backend \u2502 main.tf \u2502 terraform.tfstate \u2502 \u251c\u2500\u2500\u2500modules \u2502 \u2514\u2500\u2500\u2500services \u2502 \u2514\u2500\u2500\u2500webserver-cluster \u2502 main.tf \u2502 outputs.tf \u2502 variables.tf \u2502 \u2514\u2500\u2500\u2500stage \u2514\u2500\u2500\u2500services \u2514\u2500\u2500\u2500webserver-cluster main.tf ``` ", "keywords": ["cluster"]}, {"source": "Text", "text": "The backend folder contains the code to setup the S3 backend: ``` C:\\Work\\terraform\\backend> cat .\\main.tf provider \"aws\" { region = \"us-east-2\" } resource \"aws_s3_bucket\" \"terraform_state\" { bucket = \"mark-kharitonov-terraform-up-and-running-state\" force_destroy = true # Enable versioning so we can see the full revision history of our # state files versioning { enabled = true } # Enable server-side encryption by default server_side_encryption_configuration { rule { apply_server_side_encryption_by_default { sse_algorithm = \"AES256\" } } } } resource \"aws_dynamodb_table\" \"terraform_locks\" { name = \"terraform-up-and-running-locks\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"LockID\" attribute { name = \"LockID\" type = \"S\" } } C:\\Work\\terraform\\backend> terraform init Initializing the backend... Initializing provider plugins... - Checking for available provider plugins... - Downloading plugin for provider \"aws\" (hashicorp/aws) 2.41.0... ... * provider.aws: version = \"~> 2.41\" Terraform has been successfully initialized! ... C:\\Work\\terraform\\backend> terraform apply ", "keywords": ["bill", "provider"]}, {"source": "Text", "text": "Plan: 2 to add, 0 to change, 0 to destroy. ", "keywords": ["change"]}, {"source": "Text", "text": "Enter a value: yes aws_dynamodb_table.terraform_locks: Creating... aws_s3_bucket.terraform_state: Creating... aws_dynamodb_table.terraform_locks: Creation complete after 5s [id=terraform-up-and-running-locks] aws_s3_bucket.terraform_state: Creation complete after 9s [id=mark-kharitonov-terraform-up-and-running-state] Apply complete! Resources: 2 added, 0 changed, 0 destroyed. ", "keywords": ["change"]}, {"source": "Text", "text": "The guide describes its content, but here it is: ``` C:\\work\\terraform\\modules\\services\\webserver-cluster> cat .\\variables.tf variable \"server_port\" { description = \"The port the server will use for HTTP requests\" type = number default = 8080 } variable \"cluster_name\" { description = \"The name to use for all the cluster resources\" type = string } C:\\work\\terraform\\modules\\services\\webserver-cluster> cat .\\main.tf data \"aws_availability_zones\" \"all\" {} resource \"aws_launch_configuration\" \"example\" { image_id = \"ami-0c55b159cbfafe1f0\" instance_type = \"t2.micro\" security_groups = [aws_security_group.instance.id] user_data = <<-EOF #!/bin/bash echo \"Hello, World\" > index.html nohup busybox httpd -f -p \"${var.server_port}\" & EOF lifecycle { create_before_destroy = true } } resource \"aws_autoscaling_group\" \"example\" { launch_configuration = aws_launch_configuration.example.id availability_zones = data.aws_availability_zones.all.names min_size = 2 max_size = 10 load_balancers = [aws_elb.example.name] health_check_type = \"ELB\" tag { key = \"Name\" value = \"${var.cluster_name}-asg\" propagate_at_launch = true } } resource \"aws_elb\" \"example\" { name = \"${var.cluster_name}-clb\" security_groups = [aws_security_group.elb.id] availability_zones = data.aws_availability_zones.all.names health_check { target = \"HTTP:${var.server_port}/\" interval = 30 timeout = 3 healthy_threshold = 2 unhealthy_threshold = 2 } # This adds a listener for incoming HTTP requests. listener { lb_port = 80 lb_protocol = \"http\" instance_port = var.server_port instance_protocol = \"http\" } } resource \"aws_security_group\" \"elb\" { name = \"${var.cluster_name}-elb\" # Allow all outbound egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] } # Inbound HTTP from anywhere ingress { from_port = 80 to_port = 80 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } } resource \"aws_security_group\" \"instance\" { name = \"${var.cluster_name}-instance\" ingress { from_port = var.server_port to_port = var.server_port protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } } C:\\work\\terraform\\modules\\services\\webserver-cluster> cat .\\outputs.tf output \"clb_dns_name\" { value = aws_elb.example.dns_name description = \"The domain name of the load balancer\" } ``` ", "keywords": ["instance", "domain", "cluster"]}, {"source": "Text", "text": "And now I am using the module to create a cluster in staging named `webservers-stage`: ``` C:\\work\\terraform\\stage\\services\\webserver-cluster> terraform init Initializing modules... - webserver_cluster in ..\\..\\..\\modules\\services\\webserver-cluster Initializing the backend... Successfully configured the backend \"s3\"! ", "keywords": ["cluster"]}, {"source": "Text", "text": "Terraform will automatically use this backend unless the backend configuration changes. ", "keywords": ["change"]}, {"source": "Text", "text": "Initializing provider plugins... - Checking for available provider plugins... - Downloading plugin for provider \"aws\" (hashicorp/aws) 2.41.0... ... * provider.aws: version = \"~> 2.41\" Terraform has been successfully initialized! ... C:\\work\\terraform\\stage\\services\\webserver-cluster> terraform apply module.webserver_cluster.data.aws_availability_zones.all: Refreshing state... ", "keywords": ["provider", "cluster"]}, {"source": "Text", "text": "Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # module.webserver_cluster.aws_autoscaling_group.example will be created + resource \"aws_autoscaling_group\" \"example\" { ... + tag { + key = \"Name\" + propagate_at_launch = true + value = \"webservers-stage-asg\" } } # module.webserver_cluster.aws_elb.example will be created + resource \"aws_elb\" \"example\" { ... + name = \"webservers-stage-clb\" ... } # module.webserver_cluster.aws_launch_configuration.example will be created + resource \"aws_launch_configuration\" \"example\" { ... } # module.webserver_cluster.aws_security_group.elb will be created + resource \"aws_security_group\" \"elb\" { ... + name = \"webservers-stage-elb\" ... } # module.webserver_cluster.aws_security_group.instance will be created + resource \"aws_security_group\" \"instance\" { ... + name = \"webservers-stage-instance\" ... } Plan: 5 to add, 0 to change, 0 to destroy. ", "keywords": ["instance", "change"]}, {"source": "Text", "text": "Enter a value: yes module.webserver_cluster.aws_security_group.instance: Creating... module.webserver_cluster.aws_security_group.elb: Creating... module.webserver_cluster.aws_security_group.instance: Creation complete after 2s [id=sg-0774ace0accdfd348] module.webserver_cluster.aws_launch_configuration.example: Creating... module.webserver_cluster.aws_security_group.elb: Creation complete after 2s [id=sg-00e75aa1f2fc5d9e9] module.webserver_cluster.aws_elb.example: Creating... module.webserver_cluster.aws_launch_configuration.example: Creation complete after 1s [id=terraform-20191213010022791900000001] module.webserver_cluster.aws_elb.example: Creation complete after 4s [id=webservers-stage-clb] module.webserver_cluster.aws_autoscaling_group.example: Creating... module.webserver_cluster.aws_autoscaling_group.example: Still creating... [10s elapsed] module.webserver_cluster.aws_autoscaling_group.example: Still creating... [20s elapsed] module.webserver_cluster.aws_autoscaling_group.example: Still creating... [30s elapsed] module.webserver_cluster.aws_autoscaling_group.example: Still creating... [40s elapsed] module.webserver_cluster.aws_autoscaling_group.example: Creation complete after 41s [id=tf-asg-20191213010027291700000002] Apply complete! Resources: 5 added, 0 changed, 0 destroyed. ", "keywords": ["instance", "change"]}, {"source": "Text", "text": "The cluster is up and running. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Suppose I want to modify the value of the cluster_name variable effectively renaming all the resources: ``` C:\\work\\terraform\\stage\\services\\webserver-cluster> (cat .\\main.tf) -replace 'webservers-stage','webservers-stage2' | Out-File -Encoding ascii .\\main.tf C:\\work\\terraform\\stage\\services\\webserver-cluster> cat .\\main.tf provider \"aws\" { region = \"us-east-2\" } terraform { backend \"s3\" { # Replace this with your bucket name! bucket = \"mark-kharitonov-terraform-up-and-running-state\" key = \"stage/services/webserver-cluster/terraform.tfstate\" region = \"us-east-2\" # Replace this with your DynamoDB table name! dynamodb_table = \"terraform-up-and-running-locks\" encrypt = true } } module \"webserver_cluster\" { source = \"../../../modules/services/webserver-cluster\" cluster_name = \"webservers-stage2\" } ``` ", "keywords": ["provider", "cluster"]}, {"source": "Text", "text": "Now the desire is for the cluster name to be **webservers-stage2**. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Here is what happens: ``` C:\\work\\terraform\\stage\\services\\webserver-cluster> terraform.exe apply module.webserver_cluster.data.aws_availability_zones.all: Refreshing state... module.webserver_cluster.aws_security_group.elb: Refreshing state... [id=sg-00e75aa1f2fc5d9e9] module.webserver_cluster.aws_security_group.instance: Refreshing state... [id=sg-0774ace0accdfd348] module.webserver_cluster.aws_elb.example: Refreshing state... [id=webservers-stage-clb] module.webserver_cluster.aws_launch_configuration.example: Refreshing state... [id=terraform-20191213010022791900000001] module.webserver_cluster.aws_autoscaling_group.example: Refreshing state... ", "keywords": ["instance", "cluster"]}, {"source": "Text", "text": "Resource actions are indicated with the following symbols: ~ update in-place -/+ destroy and then create replacement +/- create replacement and then destroy Terraform will perform the following actions: # module.webserver_cluster.aws_autoscaling_group.example will be updated in-place ~ resource \"aws_autoscaling_group\" \"example\" { arn = \"arn:aws:autoscaling:us-east-2:170091157278:autoScalingGroup:5fe93e07-27d2-4d4e-91cc-24ae916ec735:autoScalingGroupName/tf-asg-20191213010027291700000002\" availability_zones = [ \"us-east-2a\", \"us-east-2b\", \"us-east-2c\", ] default_cooldown = 300 desired_capacity = 2 enabled_metrics = [] force_delete = false health_check_grace_period = 300 health_check_type = \"ELB\" id = \"tf-asg-20191213010027291700000002\" ~ launch_configuration = \"terraform-20191213010022791900000001\" -> (known after apply) ~ load_balancers = [ - \"webservers-stage-clb\", + \"webservers-stage2-clb\", ] max_instance_lifetime = 0 max_size = 10 metrics_granularity = \"1Minute\" min_size = 2 name = \"tf-asg-20191213010027291700000002\" protect_from_scale_in = false service_linked_role_arn = \"arn:aws:iam::170091157278:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling\" suspended_processes = [] target_group_arns = [] termination_policies = [] vpc_zone_identifier = [] wait_for_capacity_timeout = \"10m\" - tag { - key = \"Name\" -> null - propagate_at_launch = true -> null - value = \"webservers-stage-asg\" -> null } + tag { + key = \"Name\" + propagate_at_launch = true + value = \"webservers-stage2-asg\" } } # module.webserver_cluster.aws_elb.example must be replaced -/+ resource \"aws_elb\" \"example\" { ~ arn = \"arn:aws:elasticloadbalancing:us-east-2:170091157278:loadbalancer/webservers-stage-clb\" -> (known after apply) availability_zones = [ \"us-east-2a\", \"us-east-2b\", \"us-east-2c\", ] connection_draining = false connection_draining_timeout = 300 cross_zone_load_balancing = true ~ dns_name = \"webservers-stage-clb-641972551.us-east-2.elb.amazonaws.com\" -> (known after apply) ~ id = \"webservers-stage-clb\" -> (known after apply) idle_timeout = 60 ~ instances = [ - \"i-00617fcc06a5ae64f\", - \"i-0ee5eb03f3bf733b0\", ] -> (known after apply) ~ internal = false -> (known after apply) ~ name = \"webservers-stage-clb\" -> \"webservers-stage2-clb\" # forces replacement ~ security_groups = [ - \"sg-00e75aa1f2fc5d9e9\", ] -> (known after apply) ~ source_security_group = \"170091157278/webservers-stage-elb\" -> (known after apply) ~ source_security_group_id = \"sg-00e75aa1f2fc5d9e9\" -> (known after apply) ~ subnets = [ - \"subnet-3e7c2244\", - \"subnet-6569ef29\", - \"subnet-74e8081f\", ] -> (known after apply) - tags = {} -> null ~ zone_id = \"Z3AADJGX6KTTL2\" -> (known after apply) health_check { healthy_threshold = 2 interval = 30 target = \"HTTP:8080/\" timeout = 3 unhealthy_threshold = 2 } listener { instance_port = 8080 instance_protocol = \"http\" lb_port = 80 lb_protocol = \"http\" } } # module.webserver_cluster.aws_launch_configuration.example must be replaced +/- resource \"aws_launch_configuration\" \"example\" { associate_public_ip_address = false ~ ebs_optimized = false -> (known after apply) enable_monitoring = true ~ id = \"terraform-20191213010022791900000001\" -> (known after apply) image_id = \"ami-0c55b159cbfafe1f0\" instance_type = \"t2.micro\" + key_name = (known after apply) ~ name = \"terraform-20191213010022791900000001\" -> (known after apply) ~ security_groups = [ - \"sg-0774ace0accdfd348\", ] -> (known after apply) # forces replacement user_data = \"398ce7cb244926b5b22c0dcb00d885ac509c0ee5\" - vpc_classic_link_security_groups = [] -> null + ebs_block_device { + delete_on_termination = (known after apply) + device_name = (known after apply) + encrypted = (known after apply) + iops = (known after apply) + no_device = (known after apply) + snapshot_id = (known after apply) + volume_size = (known after apply) + volume_type = (known after apply) } + root_block_device { + delete_on_termination = (known after apply) + encrypted = (known after apply) + iops = (known after apply) + volume_size = (known after apply) + volume_type = (known after apply) } } # module.webserver_cluster.aws_security_group.elb must be replaced -/+ resource \"aws_security_group\" \"elb\" { ~ arn = \"arn:aws:ec2:us-east-2:170091157278:security-group/sg-00e75aa1f2fc5d9e9\" -> (known after apply) description = \"Managed by Terraform\" egress = [ { cidr_blocks = [ \"0.0.0.0/0\", ] description = \"\" from_port = 0 ipv6_cidr_blocks = [] prefix_list_ids = [] protocol = \"-1\" security_groups = [] self = false to_port = 0 }, ] ~ id = \"sg-00e75aa1f2fc5d9e9\" -> (known after apply) ingress = [ { cidr_blocks = [ \"0.0.0.0/0\", ] description = \"\" from_port = 80 ipv6_cidr_blocks = [] prefix_list_ids = [] protocol = \"tcp\" security_groups = [] self = false to_port = 80 }, ] ~ name = \"webservers-stage-elb\" -> \"webservers-stage2-elb\" # forces replacement ~ owner_id = \"170091157278\" -> (known after apply) revoke_rules_on_delete = false - tags = {} -> null ~ vpc_id = \"vpc-e8a15983\" -> (known after apply) } # module.webserver_cluster.aws_security_group.instance must be replaced +/- resource \"aws_security_group\" \"instance\" { ~ arn = \"arn:aws:ec2:us-east-2:170091157278:security-group/sg-0774ace0accdfd348\" -> (known after apply) description = \"Managed by Terraform\" ~ egress = [] -> (known after apply) ~ id = \"sg-0774ace0accdfd348\" -> (known after apply) ingress = [ { cidr_blocks = [ \"0.0.0.0/0\", ] description = \"\" from_port = 8080 ipv6_cidr_blocks = [] prefix_list_ids = [] protocol = \"tcp\" security_groups = [] self = false to_port = 8080 }, ] ~ name = \"webservers-stage-instance\" -> \"webservers-stage2-instance\" # forces replacement ~ owner_id = \"170091157278\" -> (known after apply) revoke_rules_on_delete = false - tags = {} -> null ~ vpc_id = \"vpc-e8a15983\" -> (known after apply) } Plan: 4 to add, 1 to change, 4 to destroy. ", "keywords": ["instance", "change"]}, {"source": "Text", "text": "Enter a value: yes module.webserver_cluster.aws_elb.example: Destroying... [id=webservers-stage-clb] module.webserver_cluster.aws_security_group.instance: Creating... module.webserver_cluster.aws_elb.example: Destruction complete after 1s module.webserver_cluster.aws_security_group.elb: Destroying... [id=sg-00e75aa1f2fc5d9e9] module.webserver_cluster.aws_security_group.instance: Creation complete after 2s [id=sg-0b3b7c4ceb54ac416] module.webserver_cluster.aws_launch_configuration.example: Creating... module.webserver_cluster.aws_launch_configuration.example: Creation complete after 1s [id=terraform-20191213015144456000000001] module.webserver_cluster.aws_security_group.elb: Still destroying... [id=sg-00e75aa1f2fc5d9e9, 10s elapsed] module.webserver_cluster.aws_security_group.elb: Still destroying... [id=sg-00e75aa1f2fc5d9e9, 20s elapsed] module.webserver_cluster.aws_security_group.elb: Destruction complete after 28s module.webserver_cluster.aws_security_group.elb: Creating... module.webserver_cluster.aws_security_group.elb: Creation complete after 2s [id=sg-06f4f489b60ba9134] module.webserver_cluster.aws_elb.example: Creating... module.webserver_cluster.aws_elb.example: Creation complete after 4s [id=webservers-stage2-clb] module.webserver_cluster.aws_autoscaling_group.example: Modifying... [id=tf-asg-20191213010027291700000002] module.webserver_cluster.aws_autoscaling_group.example: Still modifying... [id=tf-asg-20191213010027291700000002, 10s elapsed] module.webserver_cluster.aws_autoscaling_group.example: Still modifying... [id=tf-asg-20191213010027291700000002, 20s elapsed] module.webserver_cluster.aws_autoscaling_group.example: Still modifying... [id=tf-asg-20191213010027291700000002, 30s elapsed] module.webserver_cluster.aws_autoscaling_group.example: Modifications complete after 39s [id=tf-asg-20191213010027291700000002] module.webserver_cluster.aws_launch_configuration.example: Destroying... [id=terraform-20191213010022791900000001] module.webserver_cluster.aws_launch_configuration.example: Destruction complete after 0s module.webserver_cluster.aws_security_group.instance: Destroying... [id=sg-0774ace0accdfd348] module.webserver_cluster.aws_security_group.instance: Still destroying... [id=sg-0774ace0accdfd348, 10s elapsed] ... module.webserver_cluster.aws_security_group.instance: Still destroying... [id=sg-0774ace0accdfd348, 10m0s elapsed] Error: Error deleting security group: DependencyViolation: resource sg-0774ace0accdfd348 has a dependent object status code: 400, request id: d8801db8-65c1-4de1-9f7a-107b2cad247f Releasing state lock. ", "keywords": ["instance"]}]}, {"Id": "211120436", "PostHistoryTypeId": "1", "PostId": "59315467", "RevisionGUID": "fa224eb7-283f-4dca-9ad6-7ffa1405a16a", "CreationDate": "2019-12-13T02:49:05.677", "UserId": "80002", "Text": "terraform unable to rename multiple aws resources", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "211120437", "PostHistoryTypeId": "3", "PostId": "59315467", "RevisionGUID": "fa224eb7-283f-4dca-9ad6-7ffa1405a16a", "CreationDate": "2019-12-13T02:49:05.677", "UserId": "80002", "Text": "<terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "59496752", "PostTypeId": "2", "ParentId": "59315467", "CreationDate": "2019-12-27T06:16:41.240", "Score": "1", "Body": "<p>I think this is happening because the autoscaling group has launched instances that are attached to the security group. </p>\n\n<p>Unfortunately this is a known issue with Terraform and enforced dependencies in the underlying service. There isn't a workaround within Terraform at this time. You can see <a href=\"https://github.com/terraform-providers/terraform-provider-aws/issues/2445#issuecomment-352746226\" rel=\"nofollow noreferrer\">this open issue</a> on the terraform-provider-aws repo.</p>\n\n<p>I think the only way to get around this is to manually taint or destroy the <code>module.webserver_cluster.aws_autoscaling_group.example</code> resource before running <code>terraform apply</code>.</p>\n\n<p>Either run</p>\n\n<pre><code>terraform taint module.webserver_cluster.aws_autoscaling_group.example\n</code></pre>\n\n<p>or</p>\n\n<pre><code>terraform destroy -target=\"module.webserver_cluster.aws_autoscaling_group.example\"\n</code></pre>\n\n<p>and then run your <code>terraform apply</code></p>\n", "OwnerUserId": "11401195", "LastActivityDate": "2019-12-27T06:16:41.240", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "211906336", "PostHistoryTypeId": "2", "PostId": "59496752", "RevisionGUID": "d9ed84f7-0746-4833-aa0e-bd937f29c585", "CreationDate": "2019-12-27T06:16:41.240", "UserId": "11401195", "Text": "I think this is happening because the autoscaling group has launched instances that are attached to the security group. \r\n\r\nUnfortunately this is a known issue with Terraform and enforced dependencies in the underlying service. There isn't a workaround within Terraform at this time. You can see [this open issue][1] on the terraform-provider-aws repo.\r\n\r\nI think the only way to get around this is to manually taint or destroy the `module.webserver_cluster.aws_autoscaling_group.example` resource before running `terraform apply`.\r\n\r\nEither run\r\n```\r\nterraform taint module.webserver_cluster.aws_autoscaling_group.example\r\n```\r\nor\r\n```\r\nterraform destroy -target=\"module.webserver_cluster.aws_autoscaling_group.example\"\r\n```\r\n\r\nand then run your `terraform apply`\r\n\r\n  [1]: https://github.com/terraform-providers/terraform-provider-aws/issues/2445#issuecomment-352746226", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can see [this open issue][1] on the terraform-provider-aws repo. ", "keywords": ["provider"]}, {"source": "Text", "text": "Either run ``` terraform taint module.webserver_cluster.aws_autoscaling_group.example ``` or ``` terraform destroy -target=\"module.webserver_cluster.aws_autoscaling_group.example\" ``` and then run your `terraform apply` [1]: https://github.com/terraform-providers/terraform-provider-aws/issues/2445#issuecomment-352746226", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can see this open issue on the terraform-provider-aws repo. ", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Is it the aws provider bug or the terraform bug? ", "keywords": ["provider"]}, {"source": "Body", "text": "The guide describes its content, but here it is: And now I am using the module to create a cluster in staging named webservers-stage: It's magic! ", "keywords": ["cluster"]}, {"source": "Body", "text": "The cluster is up and running. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Now the desire is for the cluster name to be webservers-stage2. ", "keywords": ["cluster"]}]}