{"Id": "72456421", "PostTypeId": "1", "CreationDate": "2022-06-01T04:22:34.620", "Score": "2", "ViewCount": "1298", "Body": "<p>I have a DynamoDB table that is defined in a module. I want to migrate the table away from using this module, and define it in the DynamoDB table declaration that it ultimately expands to. However, when I do this, Terraform plans to destroy and recreate the table, which I'd like to avoid. Does anyone know how I can avoid this?</p>\n<p>Here's my module</p>\n<pre><code>variable &quot;table_name&quot; {\n  type = string\n}\n\nvariable &quot;sns_topic_arn&quot; {\n  type = string\n}\n\nvariable &quot;stream_enabled&quot; {\n  type = bool\n  default = false\n}\n\noutput &quot;table_arn&quot; {\n  value = aws_dynamodb_table.table.arn\n}\n\noutput &quot;stream_arn&quot; {\n  value = aws_dynamodb_table.table.stream_arn\n}\n\nresource &quot;aws_dynamodb_table&quot; &quot;table&quot; {\n  name = var.table_name\n  billing_mode = &quot;PAY_PER_REQUEST&quot;\n  hash_key = &quot;uuid&quot;\n  stream_enabled = var.stream_enabled\n  stream_view_type = var.stream_enabled ? &quot;NEW_IMAGE&quot; : null\n\n  attribute {\n    name = &quot;uuid&quot;\n    type = &quot;S&quot; \n  }\n}\n\nresource &quot;null_resource&quot; &quot;enable_point_in_time_recovery&quot; {\n  provisioner &quot;local-exec&quot; {\n    command = &quot;aws dynamodb update-continuous-backups --table-name ${var.table_name} --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true&quot;\n  }\n}\n</code></pre>\n<p>And here's where I invoke that module in existing code</p>\n<pre><code>    module &quot;tower_table&quot; {\n      source = &quot;./modules/kts_dynamodb&quot;\n      table_name = &quot;tower&quot;\n      sns_topic_arn = aws_sns_topic.sns.arn\n      stream_enabled = true\n    }\n</code></pre>\n<p>Now this is what I'm replacing it with</p>\n<pre><code>    resource &quot;aws_dynamodb_table&quot; &quot;tower&quot; {\n      name = &quot;tower&quot;\n      billing_mode = &quot;PAY_PER_REQUEST&quot;\n      hash_key = &quot;uuid&quot;\n      stream_enabled = true\n      stream_view_type = &quot;NEW_IMAGE&quot;\n    \n      attribute {\n        name = &quot;uuid&quot;\n        type = &quot;S&quot; \n      }\n    }\n\n    resource &quot;null_resource&quot; &quot;enable_point_in_time_recovery_on_tower_table&quot; {\n      provisioner &quot;local-exec&quot; {\n        command = &quot;aws dynamodb update-continuous-backups --table-name tower --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true&quot;\n      }\n    }\n</code></pre>\n<p>And this is the Terraform plan abridged because there are several uses of the table that are being updated in place or destroyed and readded but I believe those are fine.</p>\n<pre><code>  # aws_dynamodb_table.tower will be created\n  + resource &quot;aws_dynamodb_table&quot; &quot;tower&quot; {\n      + arn              = (known after apply)\n      + billing_mode     = &quot;PAY_PER_REQUEST&quot;\n      + hash_key         = &quot;uuid&quot;\n      + id               = (known after apply)\n      + name             = &quot;tower&quot;\n      + stream_arn       = (known after apply)\n      + stream_enabled   = true\n      + stream_label     = (known after apply)\n      + stream_view_type = &quot;NEW_IMAGE&quot;\n\n      + attribute {\n          + name = &quot;uuid&quot;\n          + type = &quot;S&quot;\n        }\n\n      + point_in_time_recovery {\n          + enabled = (known after apply)\n        }\n\n      + server_side_encryption {\n          + enabled     = (known after apply)\n          + kms_key_arn = (known after apply)\n        }\n    }\n\n      # null_resource.enable_point_in_time_recovery_on_tower_table will be created\n      + resource &quot;null_resource&quot; &quot;enable_point_in_time_recovery_on_tower_table&quot; {\n          + id = (known after apply)\n        }\n    \n      # module.tower_table.aws_dynamodb_table.table will be destroyed\n      # (because aws_dynamodb_table.table is not in configuration)\n      - resource &quot;aws_dynamodb_table&quot; &quot;table&quot; {\n          - arn              = &quot;arn:aws:dynamodb:us-east-1:563407091361:table/tower&quot; -&gt; null\n          - billing_mode     = &quot;PAY_PER_REQUEST&quot; -&gt; null\n          - hash_key         = &quot;uuid&quot; -&gt; null\n          - id               = &quot;tower&quot; -&gt; null\n          - name             = &quot;tower&quot; -&gt; null\n          - read_capacity    = 0 -&gt; null\n          - stream_arn       = &quot;arn:aws:dynamodb:us-east-1:563407091361:table/tower/stream/2021-06-05T19:07:29.088&quot; -&gt; null\n          - stream_enabled   = true -&gt; null\n          - stream_label     = &quot;2021-06-05T19:07:29.088&quot; -&gt; null\n          - stream_view_type = &quot;NEW_IMAGE&quot; -&gt; null\n          - tags             = {} -&gt; null\n          - write_capacity   = 0 -&gt; null\n    \n          - attribute {\n              - name = &quot;uuid&quot; -&gt; null\n              - type = &quot;S&quot; -&gt; null\n            }\n    \n          - point_in_time_recovery {\n              - enabled = true -&gt; null\n            }\n    \n          - ttl {\n              - enabled = false -&gt; null\n            }\n        }\n    \n      # module.tower_table.null_resource.enable_point_in_time_recovery will be destroyed\n      # (because null_resource.enable_point_in_time_recovery is not in configuration)\n      - resource &quot;null_resource&quot; &quot;enable_point_in_time_recovery&quot; {\n          - id = &quot;2361959608776928291&quot; -&gt; null\n        }\n    \n    Plan: 3 to add, 2 to change, 3 to destroy.\n</code></pre>\n", "OwnerUserId": "3433802", "LastActivityDate": "2022-06-01T04:22:34.620", "Title": "Migrate a DynamoDB table in Terraform module without destroying and recreating the table", "Tags": "<terraform><amazon-dynamodb><terraform-provider-aws><terraform-modules>", "AnswerCount": "0", "CommentCount": "2", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "128000688", "PostId": "72456421", "Score": "1", "Text": "The only thing that comes to my mind is to use the `moved` block: https://www.terraform.io/language/modules/develop/refactoring.", "CreationDate": "2022-06-01T07:13:33.437", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "134503729", "PostId": "72456421", "Score": "0", "Text": "How did you solve this problem? I'm facing the same", "CreationDate": "2023-05-17T14:47:24.567", "UserId": "2553006", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "271331884", "PostHistoryTypeId": "2", "PostId": "72456421", "RevisionGUID": "3d0a1efc-63cf-42f1-ad44-b160ac031c98", "CreationDate": "2022-06-01T04:22:34.620", "UserId": "3433802", "Text": "I have a DynamoDB table that is defined in a module. I want to migrate the table away from using this module, and define it in the DynamoDB table declaration that it ultimately expands to. However, when I do this, Terraform plans to destroy and recreate the table, which I'd like to avoid. Does anyone know how I can avoid this?\r\n\r\nHere's my module\r\n\r\n    variable \"table_name\" {\r\n      type = string\r\n    }\r\n    \r\n    variable \"sns_topic_arn\" {\r\n      type = string\r\n    }\r\n    \r\n    variable \"stream_enabled\" {\r\n      type = bool\r\n      default = false\r\n    }\r\n    \r\n    output \"table_arn\" {\r\n      value = aws_dynamodb_table.table.arn\r\n    }\r\n    \r\n    output \"stream_arn\" {\r\n      value = aws_dynamodb_table.table.stream_arn\r\n    }\r\n\r\n    resource \"aws_dynamodb_table\" \"table\" {\r\n      name = var.table_name\r\n      billing_mode = \"PAY_PER_REQUEST\"\r\n      hash_key = \"uuid\"\r\n      stream_enabled = var.stream_enabled\r\n      stream_view_type = var.stream_enabled ? \"NEW_IMAGE\" : null\r\n    \r\n      attribute {\r\n        name = \"uuid\"\r\n        type = \"S\" \r\n      }\r\n    }\r\n\r\n    resource \"null_resource\" \"enable_point_in_time_recovery\" {\r\n      provisioner \"local-exec\" {\r\n        command = \"aws dynamodb update-continuous-backups --table-name ${var.table_name} --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true\"\r\n      }\r\n    }\r\n\r\n\r\n\r\nAnd here's where I invoke that module in existing code\r\n\r\n        module \"tower_table\" {\r\n          source = \"./modules/kts_dynamodb\"\r\n          table_name = \"tower\"\r\n          sns_topic_arn = aws_sns_topic.sns.arn\r\n          stream_enabled = true\r\n        }\r\n\r\n    \r\nNow this is what I'm replacing it with\r\n    \r\n\r\n        resource \"aws_dynamodb_table\" \"tower\" {\r\n          name = \"tower\"\r\n          billing_mode = \"PAY_PER_REQUEST\"\r\n          hash_key = \"uuid\"\r\n          stream_enabled = true\r\n          stream_view_type = \"NEW_IMAGE\"\r\n        \r\n          attribute {\r\n            name = \"uuid\"\r\n            type = \"S\" \r\n          }\r\n        }\r\n    \r\n        resource \"null_resource\" \"enable_point_in_time_recovery_on_tower_table\" {\r\n          provisioner \"local-exec\" {\r\n            command = \"aws dynamodb update-continuous-backups --table-name tower --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true\"\r\n          }\r\n        }\r\n    \r\n    \r\nAnd this is the Terraform plan abridged because there are several uses of the table that are being updated in place or destroyed and readded but I believe those are fine.\r\n\r\n      # aws_dynamodb_table.tower will be created\r\n      + resource \"aws_dynamodb_table\" \"tower\" {\r\n          + arn              = (known after apply)\r\n          + billing_mode     = \"PAY_PER_REQUEST\"\r\n          + hash_key         = \"uuid\"\r\n          + id               = (known after apply)\r\n          + name             = \"tower\"\r\n          + stream_arn       = (known after apply)\r\n          + stream_enabled   = true\r\n          + stream_label     = (known after apply)\r\n          + stream_view_type = \"NEW_IMAGE\"\r\n    \r\n          + attribute {\r\n              + name = \"uuid\"\r\n              + type = \"S\"\r\n            }\r\n    \r\n          + point_in_time_recovery {\r\n              + enabled = (known after apply)\r\n            }\r\n    \r\n          + server_side_encryption {\r\n              + enabled     = (known after apply)\r\n              + kms_key_arn = (known after apply)\r\n            }\r\n        }\r\n    \r\n          # null_resource.enable_point_in_time_recovery_on_tower_table will be created\r\n          + resource \"null_resource\" \"enable_point_in_time_recovery_on_tower_table\" {\r\n              + id = (known after apply)\r\n            }\r\n        \r\n          # module.tower_table.aws_dynamodb_table.table will be destroyed\r\n          # (because aws_dynamodb_table.table is not in configuration)\r\n          - resource \"aws_dynamodb_table\" \"table\" {\r\n              - arn              = \"arn:aws:dynamodb:us-east-1:563407091361:table/tower\" -> null\r\n              - billing_mode     = \"PAY_PER_REQUEST\" -> null\r\n              - hash_key         = \"uuid\" -> null\r\n              - id               = \"tower\" -> null\r\n              - name             = \"tower\" -> null\r\n              - read_capacity    = 0 -> null\r\n              - stream_arn       = \"arn:aws:dynamodb:us-east-1:563407091361:table/tower/stream/2021-06-05T19:07:29.088\" -> null\r\n              - stream_enabled   = true -> null\r\n              - stream_label     = \"2021-06-05T19:07:29.088\" -> null\r\n              - stream_view_type = \"NEW_IMAGE\" -> null\r\n              - tags             = {} -> null\r\n              - write_capacity   = 0 -> null\r\n        \r\n              - attribute {\r\n                  - name = \"uuid\" -> null\r\n                  - type = \"S\" -> null\r\n                }\r\n        \r\n              - point_in_time_recovery {\r\n                  - enabled = true -> null\r\n                }\r\n        \r\n              - ttl {\r\n                  - enabled = false -> null\r\n                }\r\n            }\r\n        \r\n          # module.tower_table.null_resource.enable_point_in_time_recovery will be destroyed\r\n          # (because null_resource.enable_point_in_time_recovery is not in configuration)\r\n          - resource \"null_resource\" \"enable_point_in_time_recovery\" {\r\n              - id = \"2361959608776928291\" -> null\r\n            }\r\n        \r\n        Plan: 3 to add, 2 to change, 3 to destroy.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Here's my module variable \"table_name\" { type = string } variable \"sns_topic_arn\" { type = string } variable \"stream_enabled\" { type = bool default = false } output \"table_arn\" { value = aws_dynamodb_table.table.arn } output \"stream_arn\" { value = aws_dynamodb_table.table.stream_arn } resource \"aws_dynamodb_table\" \"table\" { name = var.table_name billing_mode = \"PAY_PER_REQUEST\" hash_key = \"uuid\" stream_enabled = var.stream_enabled stream_view_type = var.stream_enabled ? \"NEW_IMAGE\" : null attribute { name = \"uuid\" type = \"S\" } } resource \"null_resource\" \"enable_point_in_time_recovery\" { provisioner \"local-exec\" { command = \"aws dynamodb update-continuous-backups --table-name ${var.table_name} --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true\" } } And here's where I invoke that module in existing code module \"tower_table\" { source = \"./modules/kts_dynamodb\" table_name = \"tower\" sns_topic_arn = aws_sns_topic.sns.arn stream_enabled = true } ", "keywords": ["bill"]}, {"source": "Text", "text": "Now this is what I'm replacing it with resource \"aws_dynamodb_table\" \"tower\" { name = \"tower\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"uuid\" stream_enabled = true stream_view_type = \"NEW_IMAGE\" attribute { name = \"uuid\" type = \"S\" } } resource \"null_resource\" \"enable_point_in_time_recovery_on_tower_table\" { provisioner \"local-exec\" { command = \"aws dynamodb update-continuous-backups --table-name tower --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true\" } } ", "keywords": ["bill"]}, {"source": "Text", "text": "# aws_dynamodb_table.tower will be created + resource \"aws_dynamodb_table\" \"tower\" { + arn = (known after apply) + billing_mode = \"PAY_PER_REQUEST\" + hash_key = \"uuid\" + id = (known after apply) + name = \"tower\" + stream_arn = (known after apply) + stream_enabled = true + stream_label = (known after apply) + stream_view_type = \"NEW_IMAGE\" + attribute { + name = \"uuid\" + type = \"S\" } + point_in_time_recovery { + enabled = (known after apply) } + server_side_encryption { + enabled = (known after apply) + kms_key_arn = (known after apply) } } # null_resource.enable_point_in_time_recovery_on_tower_table will be created + resource \"null_resource\" \"enable_point_in_time_recovery_on_tower_table\" { + id = (known after apply) } # module.tower_table.aws_dynamodb_table.table will be destroyed # (because aws_dynamodb_table.table is not in configuration) - resource \"aws_dynamodb_table\" \"table\" { - arn = \"arn:aws:dynamodb:us-east-1:563407091361:table/tower\" -> null - billing_mode = \"PAY_PER_REQUEST\" -> null - hash_key = \"uuid\" -> null - id = \"tower\" -> null - name = \"tower\" -> null - read_capacity = 0 -> null - stream_arn = \"arn:aws:dynamodb:us-east-1:563407091361:table/tower/stream/2021-06-05T19:07:29.088\" -> null - stream_enabled = true -> null - stream_label = \"2021-06-05T19:07:29.088\" -> null - stream_view_type = \"NEW_IMAGE\" -> null - tags = {} -> null - write_capacity = 0 -> null - attribute { - name = \"uuid\" -> null - type = \"S\" -> null } - point_in_time_recovery { - enabled = true -> null } - ttl { - enabled = false -> null } } # module.tower_table.null_resource.enable_point_in_time_recovery will be destroyed # (because null_resource.enable_point_in_time_recovery is not in configuration) - resource \"null_resource\" \"enable_point_in_time_recovery\" { - id = \"2361959608776928291\" -> null } Plan: 3 to add, 2 to change, 3 to destroy.", "keywords": ["bill", "change"]}]}, {"Id": "271331886", "PostHistoryTypeId": "1", "PostId": "72456421", "RevisionGUID": "3d0a1efc-63cf-42f1-ad44-b160ac031c98", "CreationDate": "2022-06-01T04:22:34.620", "UserId": "3433802", "Text": "Migrate a DynamoDB table in Terraform module without destroying and recreating the table", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "271331887", "PostHistoryTypeId": "3", "PostId": "72456421", "RevisionGUID": "3d0a1efc-63cf-42f1-ad44-b160ac031c98", "CreationDate": "2022-06-01T04:22:34.620", "UserId": "3433802", "Text": "<terraform><amazon-dynamodb><terraform-provider-aws><terraform-modules>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}