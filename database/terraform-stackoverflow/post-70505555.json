{"Id": "70505555", "PostTypeId": "1", "CreationDate": "2021-12-28T10:08:08.003", "Score": "0", "ViewCount": "1331", "Body": "<p>I did setup an AWS SQS queue with Terraform. There are some subscribers running on AWS ECS. My plan was to setup a CloudWatch rule with a cron expression, which periodically sends a message into the SQS queue. The SQS queue looks like this:</p>\n<pre><code>resource &quot;aws_sqs_queue&quot; &quot;main-queue-fifo&quot; {\n  name                        = join(&quot;-&quot;, [var.environment, &quot;main&quot;, &quot;queue.fifo&quot;])\n  fifo_queue                  = true\n  content_based_deduplication = true\n  delay_seconds               = 0\n  max_message_size            = 51200  # 50 kb\n  message_retention_seconds   = 345600 # 4 days\n  receive_wait_time_seconds   = 10\n  visibility_timeout_seconds  = 180\n\n  tags = {\n    Environment = var.environment\n  }\n}\n</code></pre>\n<p>And the AWS CloudWatch rule + target looks like this:</p>\n<pre><code>resource &quot;aws_cloudwatch_event_rule&quot; &quot;sqs_cn_overdue_reminder&quot; {\n  name                = join(&quot;-&quot;, [var.environment, &quot;sqs-cn-overdue-reminder-rule&quot;]) \n  description         = &quot;Remind organisation to pay overdue credit notes&quot;\n  schedule_expression = &quot;cron(0 11 ? * MON-FRI *)&quot; # Monday to Friday 11:00\n}\n\nresource &quot;aws_cloudwatch_event_target&quot; &quot;sqs_cn_overdue_reminder&quot; {\n  target_id = join(&quot;-&quot;, [var.environment, &quot;sqs-cn-overdue-reminder-target&quot;])\n  arn       = aws_sqs_queue.main-queue-fifo.arn\n  input     = jsonencode({&quot;event&quot;: &quot;cn_overdue_reminder&quot;})\n  rule      = aws_cloudwatch_event_rule.sqs_cn_overdue_reminder.name\n  sqs_target {\n    message_group_id = &quot;main&quot;\n  }\n}\n</code></pre>\n<p>The problem is that the message never arrives in the SQS queue. In the rule metrics I can see that the invocation was triggered, but it failed. But I can not see why the invocation failed. Does anybody know why the invocation failed?</p>\n", "OwnerUserId": "661327", "LastEditorUserId": "174777", "LastEditDate": "2021-12-28T23:10:10.380", "LastActivityDate": "2021-12-28T23:10:10.380", "Title": "AWS CloudWatch event triggering SQS - not working", "Tags": "<amazon-web-services><amazon-sqs><amazon-cloudwatch><terraform-provider-aws><aws-event-bridge>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "260858261", "PostHistoryTypeId": "2", "PostId": "70505555", "RevisionGUID": "35065112-ab83-4ed7-a1c6-a48f1a20a8a7", "CreationDate": "2021-12-28T10:08:08.003", "UserId": "661327", "Text": "I did setup an AWS SQS queue with Terraform. There are some subscribers running on AWS ECS. My plan was to setup a CloudWatch rule with a cron expression, which periodically sends a message into the SQS queue. The SQS queue looks like this: \r\n\r\n```\r\nresource \"aws_sqs_queue\" \"main-queue-fifo\" {\r\n  name                        = join(\"-\", [var.environment, \"main\", \"queue.fifo\"])\r\n  fifo_queue                  = true\r\n  content_based_deduplication = true\r\n  delay_seconds               = 0\r\n  max_message_size            = 51200  # 50 kb\r\n  message_retention_seconds   = 345600 # 4 days\r\n  receive_wait_time_seconds   = 10\r\n  visibility_timeout_seconds  = 180\r\n\r\n  tags = {\r\n    Environment = var.environment\r\n  }\r\n}\r\n```\r\n\r\nAnd the AWS CloudWatch rule + target looks like this: \r\n\r\n```\r\nresource \"aws_cloudwatch_event_rule\" \"sqs_cn_overdue_reminder\" {\r\n  name                = join(\"-\", [var.environment, \"sqs-cn-overdue-reminder-rule\"]) \r\n  description         = \"Remind organisation to pay overdue credit notes\"\r\n  schedule_expression = \"cron(0 11 ? * MON-FRI *)\" # Monday to Friday 11:00\r\n}\r\n\r\nresource \"aws_cloudwatch_event_target\" \"sqs_cn_overdue_reminder\" {\r\n  target_id = join(\"-\", [var.environment, \"sqs-cn-overdue-reminder-target\"])\r\n  arn       = aws_sqs_queue.main-queue-fifo.arn\r\n  input     = jsonencode({\"event\": \"cn_overdue_reminder\"})\r\n  rule      = aws_cloudwatch_event_rule.sqs_cn_overdue_reminder.name\r\n  sqs_target {\r\n    message_group_id = \"main\"\r\n  }\r\n}\r\n```\r\n\r\nThe problem is that the message never arrives in the SQS queue. In the rule metrics I can see that the invocation was triggered, but it failed. But I can not see why the invocation failed. Does anybody know why the invocation failed? ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "And the AWS CloudWatch rule + target looks like this: ``` resource \"aws_cloudwatch_event_rule\" \"sqs_cn_overdue_reminder\" { name = join(\"-\", [var.environment, \"sqs-cn-overdue-reminder-rule\"]) description = \"Remind organisation to pay overdue credit notes\" schedule_expression = \"cron(0 11 ? * MON-FRI *)\" # Monday to Friday 11:00 } resource \"aws_cloudwatch_event_target\" \"sqs_cn_overdue_reminder\" { target_id = join(\"-\", [var.environment, \"sqs-cn-overdue-reminder-target\"]) arn = aws_sqs_queue.main-queue-fifo.arn input = jsonencode({\"event\": \"cn_overdue_reminder\"}) rule = aws_cloudwatch_event_rule.sqs_cn_overdue_reminder.name sqs_target { message_group_id = \"main\" } } ``` ", "keywords": ["pay"]}]}, {"Id": "260858263", "PostHistoryTypeId": "1", "PostId": "70505555", "RevisionGUID": "35065112-ab83-4ed7-a1c6-a48f1a20a8a7", "CreationDate": "2021-12-28T10:08:08.003", "UserId": "661327", "Text": "AWS CloudWatch event triggering SQS - not working", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "260858264", "PostHistoryTypeId": "3", "PostId": "70505555", "RevisionGUID": "35065112-ab83-4ed7-a1c6-a48f1a20a8a7", "CreationDate": "2021-12-28T10:08:08.003", "UserId": "661327", "Text": "<amazon-sqs><amazon-cloudwatch><terraform-provider-aws><aws-event-bridge>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "260899216", "PostHistoryTypeId": "6", "PostId": "70505555", "RevisionGUID": "ae8d53af-be3e-4c38-99d8-3237fad2b177", "CreationDate": "2021-12-28T23:10:10.380", "UserId": "174777", "Comment": "edited tags", "Text": "<amazon-web-services><amazon-sqs><amazon-cloudwatch><terraform-provider-aws><aws-event-bridge>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "70505556", "PostTypeId": "2", "ParentId": "70505555", "CreationDate": "2021-12-28T10:08:08.003", "Score": "2", "Body": "<p>After some hours of research I found out that the invocation failed because CloudWatch did not have the permission to access the SQS queue. SQS queues can have an optional access policy. After I added the access policy like in the example below, it worked perfectly.</p>\n<pre><code>resource &quot;aws_sqs_queue_policy&quot; &quot;main-queue-fifo-policy&quot; {\n  queue_url = aws_sqs_queue.main-queue-fifo.id\n  policy = data.aws_iam_policy_document.main-queue-policy-doc.json\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;main-queue-policy-doc&quot; {\n  statement {\n    effect  = &quot;Allow&quot;\n    actions = [&quot;sqs:SendMessage&quot;]\n\n    principals {\n      type        = &quot;Service&quot;\n      identifiers = [&quot;events.amazonaws.com&quot;]\n    }\n\n    resources = [aws_sqs_queue.main-queue-fifo.arn]\n  }\n}\n</code></pre>\n", "OwnerUserId": "661327", "LastActivityDate": "2021-12-28T10:08:08.003", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "260858267", "PostHistoryTypeId": "2", "PostId": "70505556", "RevisionGUID": "ad35507c-a8f2-4b56-a5da-cf27fabd5456", "CreationDate": "2021-12-28T10:08:08.003", "UserId": "661327", "Text": "After some hours of research I found out that the invocation failed because CloudWatch did not have the permission to access the SQS queue. SQS queues can have an optional access policy. After I added the access policy like in the example below, it worked perfectly. \r\n\r\n```\r\nresource \"aws_sqs_queue_policy\" \"main-queue-fifo-policy\" {\r\n  queue_url = aws_sqs_queue.main-queue-fifo.id\r\n  policy = data.aws_iam_policy_document.main-queue-policy-doc.json\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"main-queue-policy-doc\" {\r\n  statement {\r\n    effect  = \"Allow\"\r\n    actions = [\"sqs:SendMessage\"]\r\n\r\n    principals {\r\n      type        = \"Service\"\r\n      identifiers = [\"events.amazonaws.com\"]\r\n    }\r\n\r\n    resources = [aws_sqs_queue.main-queue-fifo.arn]\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "SQS queues can have an optional access policy. ", "keywords": ["policy"]}, {"source": "Text", "text": "After I added the access policy like in the example below, it worked perfectly. ", "keywords": ["policy"]}, {"source": "Text", "text": "``` resource \"aws_sqs_queue_policy\" \"main-queue-fifo-policy\" { queue_url = aws_sqs_queue.main-queue-fifo.id policy = data.aws_iam_policy_document.main-queue-policy-doc.json } data \"aws_iam_policy_document\" \"main-queue-policy-doc\" { statement { effect = \"Allow\" actions = [\"sqs:SendMessage\"] principals { type = \"Service\" identifiers = [\"events.amazonaws.com\"] } resources = [aws_sqs_queue.main-queue-fifo.arn] ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "SQS queues can have an optional access policy. ", "keywords": ["policy"]}, {"source": "Body", "text": "After I added the access policy like in the example below, it worked perfectly.", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": []}