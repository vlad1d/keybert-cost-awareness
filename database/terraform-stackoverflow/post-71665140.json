{"Id": "71665140", "PostTypeId": "1", "AcceptedAnswerId": "71665824", "CreationDate": "2022-03-29T15:50:30.390", "Score": "1", "ViewCount": "534", "Body": "<p>On terraform v0.14.4</p>\n<p>My variable looks like this:</p>\n<pre><code>variable &quot;my_config&quot; {\n  type = object({\n    instances = set(string)\n    locations = set(string)\n  })\n  default = {\n    locations = [\n      &quot;us&quot;,\n      &quot;asia&quot;\n    ]\n    instances = [\n      &quot;instance1&quot;,\n      &quot;instance2&quot;\n    ]\n  }\n</code></pre>\n<p>I want to loop over this var in a resource and create an instance of the resource for each location + instance. The &quot;name&quot; field of the resource will be <code>&quot;&lt;LOCATION&gt;_&lt;INSTANCE&gt;&quot;</code> as well.</p>\n<p>I could create a new var in locals that reads the my_config var and generates a new var that looks like this:</p>\n<pre><code>[\n  &quot;us_instance1&quot;,\n  &quot;us_instance2&quot;,\n  &quot;asia_instance1&quot;,\n  &quot;asia_instance2&quot;,\n]\n</code></pre>\n<p>I would prefer to not generate a new terraform var from this existing var though. Is it possible in a foreach loop to aggregate these two lists directly in a resource definition? Or is the only way to create a new data structure in locals?</p>\n<h1>EDIT</h1>\n<p>I cannot get the flatten example in answer provided to work inside a resource definition. I get this error: <code>The given &quot;for_each&quot; argument value is unsuitable: the &quot;for_each&quot; argument must be a map, or set of strings, and you have provided a value of type tuple.</code> This error happens if the type is <code>set(string)</code> or <code>list(string)</code>.</p>\n<pre><code># This works\noutput &quot;test&quot; {\n  value = flatten(\n    [\n      for location in var.my_config.locations : [\n        for instance in var.my_config.instances : &quot;${location}_${instance}&quot;\n      ]\n    ]\n  )\n}\n\n# This throws the error\nresource &quot;null_resource&quot; &quot;test&quot; {\n  for_each = flatten(\n    [\n      for location in var.my_config.locations : [\n        for instance in var.my_config.instances : &quot;${location}_${instance}&quot;\n      ]\n    ]\n  )\n  provisioner &quot;local-exec&quot; {\n    command = &quot;echo test&quot;\n  }\n}\n</code></pre>\n", "OwnerUserId": "1028270", "LastEditorUserId": "1028270", "LastEditDate": "2022-03-29T16:57:22.440", "LastActivityDate": "2022-03-29T17:04:10.880", "Title": "Is there a way to have a nested for loop without having to create a new variable in locals?", "Tags": "<terraform>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "267044711", "PostHistoryTypeId": "2", "PostId": "71665140", "RevisionGUID": "9ca414e4-5d5c-4fc5-8658-e5c8a9c82a0f", "CreationDate": "2022-03-29T15:50:30.390", "UserId": "1028270", "Text": "On terraform v0.14.4\r\n\r\nMy variable looks like this: \r\n\r\n    variable \"my_config\" {\r\n      default = {\r\n        locations = [\r\n          \"us\",\r\n          \"asia\"\r\n        ]\r\n        instances = [\r\n          \"instance1\",\r\n          \"instance2\"\r\n        ]\r\n      }\r\n    }\r\n\r\nI want to loop over this var in a resource and create an instance of the resource for each location + instance. The \"name\" field of the resource will be `\"<LOCATION>_<INSTANCE>\"` as well.\r\n\r\nI could create a new var in locals that reads the my_config var and generates a new var that looks like this:\r\n\r\n    [\r\n      \"us_instance1\",\r\n      \"us_instance2\",\r\n      \"asia_instance1\",\r\n      \"asia_instance2\",\r\n    ]\r\n\r\nI would prefer to not generate a new terraform var from this existing var though. Is it possible in a foreach loop to aggregate these two lists directly in a resource definition? Or is the only way to create a new data structure in locals?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "On terraform v0.14.4 My variable looks like this: variable \"my_config\" { default = { locations = [ \"us\", \"asia\" ] instances = [ \"instance1\", \"instance2\" ] } } I want to loop over this var in a resource and create an instance of the resource for each location + instance. ", "keywords": ["instance"]}]}, {"Id": "267044713", "PostHistoryTypeId": "1", "PostId": "71665140", "RevisionGUID": "9ca414e4-5d5c-4fc5-8658-e5c8a9c82a0f", "CreationDate": "2022-03-29T15:50:30.390", "UserId": "1028270", "Text": "Is there a way to have a nested for loop without having to create a new variable in locals?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "267044714", "PostHistoryTypeId": "3", "PostId": "71665140", "RevisionGUID": "9ca414e4-5d5c-4fc5-8658-e5c8a9c82a0f", "CreationDate": "2022-03-29T15:50:30.390", "UserId": "1028270", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "267049398", "PostHistoryTypeId": "5", "PostId": "71665140", "RevisionGUID": "1889c7a5-9ab6-4837-8293-e9500ebbfd12", "CreationDate": "2022-03-29T16:57:22.440", "UserId": "1028270", "Comment": "added 1057 characters in body", "Text": "On terraform v0.14.4\r\n\r\nMy variable looks like this: \r\n\r\n    variable \"my_config\" {\r\n      type = object({\r\n        instances = set(string)\r\n        locations = set(string)\r\n      })\r\n      default = {\r\n        locations = [\r\n          \"us\",\r\n          \"asia\"\r\n        ]\r\n        instances = [\r\n          \"instance1\",\r\n          \"instance2\"\r\n        ]\r\n      }\r\n\r\n\r\nI want to loop over this var in a resource and create an instance of the resource for each location + instance. The \"name\" field of the resource will be `\"<LOCATION>_<INSTANCE>\"` as well.\r\n\r\nI could create a new var in locals that reads the my_config var and generates a new var that looks like this:\r\n\r\n    [\r\n      \"us_instance1\",\r\n      \"us_instance2\",\r\n      \"asia_instance1\",\r\n      \"asia_instance2\",\r\n    ]\r\n\r\nI would prefer to not generate a new terraform var from this existing var though. Is it possible in a foreach loop to aggregate these two lists directly in a resource definition? Or is the only way to create a new data structure in locals?\r\n\r\nEDIT\r\n====\r\n\r\nI cannot get the flatten example in answer provided to work inside a resource definition. I get this error: `The given \"for_each\" argument value is unsuitable: the \"for_each\" argument\r\nmust be a map, or set of strings, and you have provided a value of type tuple.` This error happens if the type is `set(string)` or `list(string)`.\r\n\r\n    # This works\r\n    output \"test\" {\r\n      value = flatten(\r\n        [\r\n          for location in var.my_config.locations : [\r\n            for instance in var.my_config.instances : \"${location}_${instance}\"\r\n          ]\r\n        ]\r\n      )\r\n    }\r\n    \r\n    # This throws the error\r\n    resource \"null_resource\" \"test\" {\r\n      for_each = flatten(\r\n        [\r\n          for location in var.my_config.locations : [\r\n            for instance in var.my_config.instances : \"${location}_${instance}\"\r\n          ]\r\n        ]\r\n      )\r\n      provisioner \"local-exec\" {\r\n        command = \"echo test\"\r\n      }\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "On terraform v0.14.4 My variable looks like this: variable \"my_config\" { type = object({ instances = set(string) locations = set(string) }) default = { locations = [ \"us\", \"asia\" ] instances = [ \"instance1\", \"instance2\" ] } I want to loop over this var in a resource and create an instance of the resource for each location + instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "# This works output \"test\" { value = flatten( [ for location in var.my_config.locations : [ for instance in var.my_config.instances : \"${location}_${instance}\" ] ] ) } # This throws the error resource \"null_resource\" \"test\" { for_each = flatten( [ for location in var.my_config.locations : [ for instance in var.my_config.instances : \"${location}_${instance}\" ] ] ) provisioner \"local-exec\" { command = \"echo test\" } }", "keywords": ["instance", "test"]}]}], "answers": [{"Id": "71665824", "PostTypeId": "2", "ParentId": "71665140", "CreationDate": "2022-03-29T16:38:58.527", "Score": "1", "Body": "<p>To achieve the return value of:</p>\n<pre><code>[\n  &quot;us_instance1&quot;,\n  &quot;us_instance2&quot;,\n  &quot;asia_instance1&quot;,\n  &quot;asia_instance2&quot;,\n]\n</code></pre>\n<p>with the input of the variable <code>my_config</code>, you could:</p>\n<pre><code>flatten([for location in var.my_config.locations : [\n  for instance in var.my_config.instances : &quot;${location}_${instance}&quot;\n]])\n</code></pre>\n<p>Whether or not you define this in a <code>locals</code> block is up to you. If you plan on re-using this value multiple times, then it would be more efficient to define it as a <code>local</code>. If you plan on on only using it once, then it would certainly make more sense to not define it in <code>locals</code>.</p>\n<p>Note this also assumes <code>my_config</code> type is <code>object(list(string))</code>. The type was not given in the question, but if the type were otherwise then the code becomes much more obfuscated.</p>\n<p>For the additional question about using this value as a <code>for_each</code> meta-argument value at the resource scope, it would need to be converted to type <code>set(string)</code>. This can be done easily with the <code>toset</code> function:</p>\n<pre><code>resource &quot;resource&quot; &quot;this&quot; {\n  for_each = toset(&lt;expression above or variable with return value of above assigned to it&gt;)\n}\n</code></pre>\n", "OwnerUserId": "5343387", "LastEditorUserId": "5343387", "LastEditDate": "2022-03-29T17:04:10.880", "LastActivityDate": "2022-03-29T17:04:10.880", "CommentCount": "6", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "126656591", "PostId": "71665824", "Score": "0", "Text": "How would this look in a resource definition? Sorry maybe I'm being dense, but I would be setting `for_each` in the resource to this flatten() expression?", "CreationDate": "2022-03-29T16:41:21.753", "UserId": "1028270", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126656830", "PostId": "71665824", "Score": "0", "Text": "When I try to use this with for_each I get this error: `The given \"for_each\" argument value is unsuitable: the \"for_each\" argument\nmust be a map, or set of strings, and you have provided a value of type tuple.`", "CreationDate": "2022-03-29T16:52:55.343", "UserId": "1028270", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126656937", "PostId": "71665824", "Score": "0", "Text": "I updated my question. I was using `set(string)`, but it does not work with `list(string)` either.", "CreationDate": "2022-03-29T16:58:14.600", "UserId": "1028270", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126657017", "PostId": "71665824", "Score": "0", "Text": "@red888 With the new question about using this as a `for_each` meta-argument value at the resource scope, I can update the answer for the additional question.", "CreationDate": "2022-03-29T17:01:50.737", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126657062", "PostId": "71665824", "Score": "0", "Text": "OK guess I should have specified, but that is what I meant by `directly in a resource definition`. How else would that be possible without a for loop inside a resource?", "CreationDate": "2022-03-29T17:03:56.623", "UserId": "1028270", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "126657107", "PostId": "71665824", "Score": "1", "Text": "@red888 As stated in my comment above, I have updated the answer for the additional question. If it does not work for you, then please feel free to update with more necessary information.", "CreationDate": "2022-03-29T17:06:07.490", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "267048275", "PostHistoryTypeId": "2", "PostId": "71665824", "RevisionGUID": "35b77983-aead-4fc1-8f83-3cdbd844aa3c", "CreationDate": "2022-03-29T16:38:58.527", "UserId": "5343387", "Text": "To achieve the return value of:\r\n\r\n    [\r\n      \"us_instance1\",\r\n      \"us_instance2\",\r\n      \"asia_instance1\",\r\n      \"asia_instance2\",\r\n    ]\r\n\r\nwith the input of the variable `my_config`, you could:\r\n\r\n    flatten([for location in var.my_config.locations : [\r\n      for instance in var.my_config.instances : \"${location}_${instance}\"\r\n    ]])\r\n\r\nWhether or not you define this in a `locals` block is up to you. If you plan on re-using this value multiple times, then it would be more efficient to define it as a `local`. If you plan on on only using it once, then it would certainly make more sense to not define it in `locals`.\r\n\r\nNote this also assumes `my_config` type is `object(list(string))`. The type was not given in the question, but if the type were otherwise then the code becomes much more obfuscated.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To achieve the return value of: [ \"us_instance1\", \"us_instance2\", \"asia_instance1\", \"asia_instance2\", ] with the input of the variable `my_config`, you could: flatten([for location in var.my_config.locations : [ for instance in var.my_config.instances : \"${location}_${instance}\" ]]) ", "keywords": ["instance"]}, {"source": "Text", "text": "If you plan on re-using this value multiple times, then it would be more efficient to define it as a `local`. ", "keywords": ["efficient"]}]}, {"Id": "267049794", "PostHistoryTypeId": "5", "PostId": "71665824", "RevisionGUID": "cfc5ce7c-cc10-4dd2-80ca-d611f3334785", "CreationDate": "2022-03-29T17:03:37.167", "UserId": "5343387", "Comment": "added 307 characters in body", "Text": "To achieve the return value of:\r\n\r\n    [\r\n      \"us_instance1\",\r\n      \"us_instance2\",\r\n      \"asia_instance1\",\r\n      \"asia_instance2\",\r\n    ]\r\n\r\nwith the input of the variable `my_config`, you could:\r\n\r\n    flatten([for location in var.my_config.locations : [\r\n      for instance in var.my_config.instances : \"${location}_${instance}\"\r\n    ]])\r\n\r\nWhether or not you define this in a `locals` block is up to you. If you plan on re-using this value multiple times, then it would be more efficient to define it as a `local`. If you plan on on only using it once, then it would certainly make more sense to not define it in `locals`.\r\n\r\nNote this also assumes `my_config` type is `object(list(string))`. The type was not given in the question, but if the type were otherwise then the code becomes much more obfuscated.\r\n\r\nFor the additional question about using this value as a `for_each` meta-argument value at the resource scope, it would need to be converted to to type `set(string)`. This can be done easily with the `toset` function:\r\n\r\n    resource \"resource\" \"this\" {\r\n      for_each = toset(<expression above>)\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To achieve the return value of: [ \"us_instance1\", \"us_instance2\", \"asia_instance1\", \"asia_instance2\", ] with the input of the variable `my_config`, you could: flatten([for location in var.my_config.locations : [ for instance in var.my_config.instances : \"${location}_${instance}\" ]]) ", "keywords": ["instance"]}, {"source": "Text", "text": "If you plan on re-using this value multiple times, then it would be more efficient to define it as a `local`. ", "keywords": ["efficient"]}]}, {"Id": "267049837", "PostHistoryTypeId": "5", "PostId": "71665824", "RevisionGUID": "8feda9d1-9623-4e10-8a31-4fa2715055db", "CreationDate": "2022-03-29T17:04:10.880", "UserId": "5343387", "Comment": "added 307 characters in body", "Text": "To achieve the return value of:\r\n\r\n    [\r\n      \"us_instance1\",\r\n      \"us_instance2\",\r\n      \"asia_instance1\",\r\n      \"asia_instance2\",\r\n    ]\r\n\r\nwith the input of the variable `my_config`, you could:\r\n\r\n    flatten([for location in var.my_config.locations : [\r\n      for instance in var.my_config.instances : \"${location}_${instance}\"\r\n    ]])\r\n\r\nWhether or not you define this in a `locals` block is up to you. If you plan on re-using this value multiple times, then it would be more efficient to define it as a `local`. If you plan on on only using it once, then it would certainly make more sense to not define it in `locals`.\r\n\r\nNote this also assumes `my_config` type is `object(list(string))`. The type was not given in the question, but if the type were otherwise then the code becomes much more obfuscated.\r\n\r\nFor the additional question about using this value as a `for_each` meta-argument value at the resource scope, it would need to be converted to type `set(string)`. This can be done easily with the `toset` function:\r\n\r\n    resource \"resource\" \"this\" {\r\n      for_each = toset(<expression above or variable with return value of above assigned to it>)\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To achieve the return value of: [ \"us_instance1\", \"us_instance2\", \"asia_instance1\", \"asia_instance2\", ] with the input of the variable `my_config`, you could: flatten([for location in var.my_config.locations : [ for instance in var.my_config.instances : \"${location}_${instance}\" ]]) ", "keywords": ["instance"]}, {"source": "Text", "text": "If you plan on re-using this value multiple times, then it would be more efficient to define it as a `local`. ", "keywords": ["efficient"]}]}], "filtered-sentences": [{"source": "Body", "text": "If you plan on re-using this value multiple times, then it would be more efficient to define it as a local. ", "keywords": ["efficient"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "On terraform v0.14.4 My variable looks like this: I want to loop over this var in a resource and create an instance of the resource for each location + instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "The \"name\" field of the resource will be \"<LOCATION>_<INSTANCE>\" as well. ", "keywords": ["instance"]}]}