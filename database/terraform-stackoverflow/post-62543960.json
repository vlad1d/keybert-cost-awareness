{"Id": "62543960", "PostTypeId": "1", "AcceptedAnswerId": "62546450", "CreationDate": "2020-06-23T21:22:35.683", "Score": "1", "ViewCount": "865", "Body": "<p>I have a terraformed Azure MySQL instance and a WordPress docker instance running in an Azure Container Instance.  Both come up fine, but I can't see a way to <em>automatically</em> allow access from the container instance to MySQL because 1) the traffic is not coming through the external IP address, and 2) I don't know where the actual IP address is being created, and 3) I can't see a way to determine what the IP address is.</p>\n<pre><code>resource &quot;azurerm_container_group&quot; &quot;wp-container-group&quot; {\n   name                = var.container_group_name\n   location            = azurerm_resource_group.wordpress-resource-group.location\n   resource_group_name = azurerm_resource_group.wordpress-resource-group.name\n   ip_address_type     = &quot;public&quot;\n   dns_name_label      = var.dns_label\n   os_type             = &quot;Linux&quot;\n\n   container {\n      name   = &quot;wordpress&quot;\n      image  = &quot;wordpress:latest&quot;\n      ...\n   }\n   ...\n}\n\n\nresource &quot;azurerm_mysql_server&quot; &quot;wordpress_mysql&quot; {\n   name                = &quot;foo-bar&quot;\n   location            = azurerm_resource_group.wordpress-resource-group.location\n   resource_group_name = azurerm_resource_group.wordpress-resource-group.name\n\n   ....\n}\n\n\nresource &quot;azurerm_mysql_database&quot; &quot;wp-db&quot; {\n   name                = &quot;wordpress&quot;\n   resource_group_name = azurerm_resource_group.wordpress-resource-group.name\n   server_name         = azurerm_mysql_server.wordpress_mysql.name\n   charset             = &quot;utf8&quot;\n   collation           = &quot;utf8_general_ci&quot;\n}\n</code></pre>\n<p>This is set to allow traffic from the external IP address:</p>\n<pre><code>resource &quot;azurerm_mysql_firewall_rule&quot; &quot;allow_container&quot; {\n   name                = &quot;allow_wordpress_container&quot;\n   resource_group_name = azurerm_resource_group.wordpress-resource-group.name\n   server_name         = azurerm_mysql_server.wordpress_mysql.name\n   start_ip_address    = azurerm_container_group.wp-container-group.ip_address\n   end_ip_address      = azurerm_container_group.wp-container-group.ip_address\n}\n</code></pre>\n<p>When I SSH into the container instance and try to connect via the command line <code>mysql</code>, it tells me that it's using a different IP address than the external one---the internal one is in the 52.x.x.x range.  I can <em>manually</em> add this ip address as a firewall rule, but I want to do it automatically.</p>\n<p>So my question is: where does this 52.x.x.x address get assigned, and how can I access it in Terraform so that I can automatically configure the firewall rule between the container instance and mysql?</p>\n", "OwnerUserId": "267280", "LastEditorUserId": "267280", "LastEditDate": "2020-06-24T18:34:01.623", "LastActivityDate": "2022-02-01T15:16:09.117", "Title": "How to configure firewall between Azure Container Instance and Azure MySql automatically in Terraform?", "Tags": "<azure><terraform><azure-container-instances><azure-mysql-database>", "AnswerCount": "2", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "225093948", "PostHistoryTypeId": "2", "PostId": "62543960", "RevisionGUID": "d3005156-7325-441b-b918-d8f8f63aae69", "CreationDate": "2020-06-23T21:22:35.683", "UserId": "267280", "Text": "I have a terraformed Azure MySQL instance and a WordPress docker instance running in an Azure Container Instance.  Both come up fine, but I can't see a way to *automatically* allow access from the container instance to MySQL because 1) the traffic is not coming through the external IP address, and 2) I don't know where the actual IP address is being created, and 3) I can't see a way to determine what the IP address is.\r\n\r\n\r\n    resource \"azurerm_container_group\" \"wp-container-group\" {\r\n       name                = var.container_group_name\r\n       location            = azurerm_resource_group.wordpress-resource-group.location\r\n       resource_group_name = azurerm_resource_group.wordpress-resource-group.name\r\n       ip_address_type     = \"public\"\r\n       dns_name_label      = var.dns_label\r\n       os_type             = \"Linux\"\r\n\r\n       container {\r\n          name   = \"wordpress\"\r\n          image  = \"wordpress:latest\"\r\n          ...\r\n       }\r\n       ...\r\n    }\r\n\r\n\r\n    resource \"azurerm_mysql_server\" \"wordpress_mysql\" {\r\n       name                = \"foo-bar\"\r\n       location            = azurerm_resource_group.wordpress-resource-group.location\r\n       resource_group_name = azurerm_resource_group.wordpress-resource-group.name\r\n\r\n       ....\r\n    }\r\n\r\n\r\n    resource \"azurerm_mysql_database\" \"wp-db\" {\r\n       name                = \"wordpress\"\r\n       resource_group_name = azurerm_resource_group.wordpress-resource-group.name\r\n       server_name         = azurerm_mysql_server.wordpress_mysql.name\r\n       charset             = \"utf8\"\r\n       collation           = \"utf8_general_ci\"\r\n    }\r\n\r\nThis is set to allow traffic from the external IP address:\r\n\r\n    resource \"azurerm_mysql_firewall_rule\" \"allow_container\" {\r\n       name                = \"allow_wordpress_container\"\r\n       resource_group_name = azurerm_resource_group.wordpress-resource-group.name\r\n       server_name         = azurerm_mysql_server.wordpress_mysql.name\r\n       start_ip_address    = azurerm_container_group.wp-container-group.ip_address\r\n       end_ip_address      = azurerm_container_group.wp-container-group.ip_address\r\n    }\r\n\r\nWhen I SSH into the container instance and try to connect via the command line `mysql`, it tells me that it's using a different IP address than the external one---the internal one is in the 52.x.x.x range.  I can *manually* add this ip address as a firewall rule, but I want to do it automatically.\r\n\r\nSo my question is: where does this 52.x.x.x address get assigned, and how can I access it in Terraform so that I can automatically configure the firewall rule between the container instance and mysql?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have a terraformed Azure MySQL instance and a WordPress docker instance running in an Azure Container Instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Both come up fine, but I can't see a way to *automatically* allow access from the container instance to MySQL because 1) the traffic is not coming through the external IP address, and 2) I don't know where the actual IP address is being created, and 3) I can't see a way to determine what the IP address is. resource \"azurerm_container_group\" \"wp-container-group\" { name = var.container_group_name location = azurerm_resource_group.wordpress-resource-group.location resource_group_name = azurerm_resource_group.wordpress-resource-group.name ip_address_type = \"public\" dns_name_label = var.dns_label os_type = \"Linux\" container { name = \"wordpress\" image = \"wordpress:latest\" ... } ... } resource \"azurerm_mysql_server\" \"wordpress_mysql\" { name = \"foo-bar\" location = azurerm_resource_group.wordpress-resource-group.location resource_group_name = azurerm_resource_group.wordpress-resource-group.name .... } resource \"azurerm_mysql_database\" \"wp-db\" { name = \"wordpress\" resource_group_name = azurerm_resource_group.wordpress-resource-group.name server_name = azurerm_mysql_server.wordpress_mysql.name charset = \"utf8\" collation = \"utf8_general_ci\" } This is set to allow traffic from the external IP address: resource \"azurerm_mysql_firewall_rule\" \"allow_container\" { name = \"allow_wordpress_container\" resource_group_name = azurerm_resource_group.wordpress-resource-group.name server_name = azurerm_mysql_server.wordpress_mysql.name start_ip_address = azurerm_container_group.wp-container-group.ip_address end_ip_address = azurerm_container_group.wp-container-group.ip_address } When I SSH into the container instance and try to connect via the command line `mysql`, it tells me that it's using a different IP address than the external one---the internal one is in the 52.x.x.x range. ", "keywords": ["instance"]}, {"source": "Text", "text": "So my question is: where does this 52.x.x.x address get assigned, and how can I access it in Terraform so that I can automatically configure the firewall rule between the container instance and mysql?", "keywords": ["instance"]}]}, {"Id": "225093949", "PostHistoryTypeId": "1", "PostId": "62543960", "RevisionGUID": "d3005156-7325-441b-b918-d8f8f63aae69", "CreationDate": "2020-06-23T21:22:35.683", "UserId": "267280", "Text": "How to configure firewall between Azure Container and Azure MySql automatically in Terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "225093950", "PostHistoryTypeId": "3", "PostId": "62543960", "RevisionGUID": "d3005156-7325-441b-b918-d8f8f63aae69", "CreationDate": "2020-06-23T21:22:35.683", "UserId": "267280", "Text": "<azure><azure-devops><terraform><azure-container-instances><azure-mysql-database>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "225165543", "PostHistoryTypeId": "6", "PostId": "62543960", "RevisionGUID": "6f991736-8b2d-488f-9dee-e6f04033e01b", "CreationDate": "2020-06-24T18:12:57.630", "UserId": "11765721", "Comment": "This issue is not about azure-devops. Edit the tags.", "Text": "<azure><terraform><azure-container-instances><azure-mysql-database>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "225165544", "PostHistoryTypeId": "24", "PostId": "62543960", "RevisionGUID": "6f991736-8b2d-488f-9dee-e6f04033e01b", "CreationDate": "2020-06-24T18:12:57.630", "Comment": "Proposed by 11765721 approved by 10910450, 267280 edit id of 4860203", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "225166951", "PostHistoryTypeId": "4", "PostId": "62543960", "RevisionGUID": "51cb6f12-6b1b-40c4-996e-f605f16279aa", "CreationDate": "2020-06-24T18:34:01.623", "UserId": "267280", "Comment": "disambiguate azure service type", "Text": "How to configure firewall between Azure Container Instance and Azure MySql automatically in Terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "How to configure firewall between Azure Container Instance and Azure MySql automatically in Terraform?", "keywords": ["instance"]}]}], "answers": [{"Id": "70942967", "PostTypeId": "2", "ParentId": "62543960", "CreationDate": "2022-02-01T15:16:09.117", "Score": "0", "Body": "<p>Pay attention that &quot;allowing access to Azure services&quot; means access to all Azure services, even if not yours. The Azure Portal allows, when configuring the network connectivity of Azure Databases, to check &quot;Allow public access from Azure services and resources within Azure to this server group&quot; which seems nice. But the associated tooltip says &quot;This option configures the firewall to allow connections from IP addresses allocated to any Azure service or asset, <strong>including connections from the subscriptions of other customers.</strong>&quot;</p>\n<p>And also allowing IPs 0.0.0.0 to 255.255.255.255 to access your DB opens the door to the whole world ...</p>\n", "OwnerUserId": "17771585", "LastActivityDate": "2022-02-01T15:16:09.117", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "263191455", "PostHistoryTypeId": "2", "PostId": "70942967", "RevisionGUID": "7407c9dd-4ed2-4cc5-a4bf-7140c6838fa4", "CreationDate": "2022-02-01T15:16:09.117", "UserId": "17771585", "Text": "Pay attention that \"allowing access to Azure services\" means access to all Azure services, even if not yours. The Azure Portal allows, when configuring the network connectivity of Azure Databases, to check \"Allow public access from Azure services and resources within Azure to this server group\" which seems nice. But the associated tooltip says \"This option configures the firewall to allow connections from IP addresses allocated to any Azure service or asset, **including connections from the subscriptions of other customers.**\"\r\n\r\nAnd also allowing IPs 0.0.0.0 to 255.255.255.255 to access your DB opens the door to the whole world ...", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Pay attention that \"allowing access to Azure services\" means access to all Azure services, even if not yours. ", "keywords": ["pay"]}]}], "filtered-sentences": [{"source": "Body", "text": "Pay attention that \"allowing access to Azure services\" means access to all Azure services, even if not yours. ", "keywords": ["pay"]}]}, {"Id": "62546450", "PostTypeId": "2", "ParentId": "62543960", "CreationDate": "2020-06-24T02:01:20.213", "Score": "1", "Body": "<p>The outbound IP address associated with the container instance is not available as a property of the container. The IP address is not guaranteed to persist beyond container restart either, so it would not be a reliable identifier for a firewall rule.</p>\n<p>The simplest solution in this case would be to &quot;Allow access to Azure services&quot; in your database firewall. This is acheived by creating an <a href=\"https://www.terraform.io/docs/providers/azurerm/r/sql_firewall_rule.html#argument-reference\" rel=\"nofollow noreferrer\"><code>azurerm_sql_firewall_rule</code></a> having <code>start_ip_address</code> and <code>end_ip_address</code> set to &quot;0.0.0.0&quot;</p>\n", "OwnerUserId": "4601453", "LastEditorUserId": "4601453", "LastEditDate": "2020-06-24T19:14:13.440", "LastActivityDate": "2020-06-24T19:14:13.440", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "110637213", "PostId": "62546450", "Score": "0", "Text": "This indeed seems to be the easiest solution, as per  https://www.terraform.io/docs/providers/azurerm/r/sql_firewall_rule.html#argument-reference and https://learn.microsoft.com/en-us/rest/api/sql/firewallrules/createorupdate#request-body.  (It does seem to violate least-surprise that they use 0.0.0.0 to mean \"azure-internal\", but whatever.)", "CreationDate": "2020-06-24T18:17:41.470", "UserId": "267280", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "225104152", "PostHistoryTypeId": "2", "PostId": "62546450", "RevisionGUID": "e05b862b-819b-4022-b092-983c1e060b71", "CreationDate": "2020-06-24T02:01:20.213", "UserId": "4601453", "Text": "The outbound IP address associated with the container instance is not available as a property of the container. The IP address is not guaranteed to persist beyond container restart either, so it would not be a reliable identifier for a firewall rule.\r\n\r\nThe simplest solution in this case would be to \"Allow access to Azure services\" in your database firewall. This is acheived by creating an `[azurerm_sql_firewall_rule][1]` having `start_ip_address` and `end_ip_address` set to \"0.0.0.0\"\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/azurerm/r/sql_firewall_rule.html#argument-reference", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The outbound IP address associated with the container instance is not available as a property of the container. ", "keywords": ["instance"]}]}, {"Id": "225169575", "PostHistoryTypeId": "5", "PostId": "62546450", "RevisionGUID": "b0352570-1a4e-49d2-982b-5328f9d4e05e", "CreationDate": "2020-06-24T19:14:13.440", "UserId": "4601453", "Comment": "edited body", "Text": "The outbound IP address associated with the container instance is not available as a property of the container. The IP address is not guaranteed to persist beyond container restart either, so it would not be a reliable identifier for a firewall rule.\r\n\r\nThe simplest solution in this case would be to \"Allow access to Azure services\" in your database firewall. This is acheived by creating an [`azurerm_sql_firewall_rule`][1] having `start_ip_address` and `end_ip_address` set to \"0.0.0.0\"\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/azurerm/r/sql_firewall_rule.html#argument-reference", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The outbound IP address associated with the container instance is not available as a property of the container. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "The outbound IP address associated with the container instance is not available as a property of the container. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "How to configure firewall between Azure Container Instance and Azure MySql automatically in Terraform?", "keywords": ["instance"]}, {"source": "Body", "text": "I have a terraformed Azure MySQL instance and a WordPress docker instance running in an Azure Container Instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "Both come up fine, but I can't see a way to automatically allow access from the container instance to MySQL because 1) the traffic is not coming through the external IP address, and 2) I don't know where the actual IP address is being created, and 3) I can't see a way to determine what the IP address is. ", "keywords": ["instance"]}, {"source": "Body", "text": "This is set to allow traffic from the external IP address: When I SSH into the container instance and try to connect via the command line mysql, it tells me that it's using a different IP address than the external one---the internal one is in the 52.x.x.x range. ", "keywords": ["instance"]}, {"source": "Body", "text": "So my question is: where does this 52.x.x.x address get assigned, and how can I access it in Terraform so that I can automatically configure the firewall rule between the container instance and mysql?", "keywords": ["instance"]}]}