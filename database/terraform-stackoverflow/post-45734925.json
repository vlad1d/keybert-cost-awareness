{"Id": "45734925", "PostTypeId": "1", "AcceptedAnswerId": "45806071", "CreationDate": "2017-08-17T12:18:27.840", "Score": "12", "ViewCount": "12512", "Body": "<p>How can I get Terraform 0.10.1 to support two different providers without having to run 'terraform init' every time for each provider?</p>\n\n<p>I am trying to use Terraform to </p>\n\n<p>1) Provision an API server with the 'DigitalOcean' provider</p>\n\n<p>2) Subsequently use the 'Docker' provider to spin up my containers</p>\n\n<p>Any suggestions? Do I need to write an orchestrating script that wraps Terraform?</p>\n", "OwnerUserId": "772175", "LastEditorUserId": "772175", "LastEditDate": "2017-08-17T12:27:31.350", "LastActivityDate": "2019-11-13T06:50:54.353", "Title": "How to use multiple Terraform Providers sequentially", "Tags": "<terraform>", "AnswerCount": "3", "CommentCount": "4", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "78447052", "PostId": "45734925", "Score": "0", "Text": "Is your goal here to run Docker on a DigitalOcean droplet? That is, your `docker` provider configuration would contain the IP address of a droplet created with the `digitalocean` provider?", "CreationDate": "2017-08-17T20:56:47.063", "UserId": "281848", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "That is, your `docker` provider configuration would contain the IP address of a droplet created with the `digitalocean` provider?", "keywords": ["provider"]}]}, {"Id": "78465952", "PostId": "45734925", "Score": "0", "Text": "Yes exactly, but I know that from the terraform documentation that you cannot pass output from modules or resources as inputs to the provider.\n\nAs stated in: https://www.terraform.io/docs/configuration/providers.html (see the NOTE at the end of the page)", "CreationDate": "2017-08-18T10:30:43.077", "UserId": "772175", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Yes exactly, but I know that from the terraform documentation that you cannot pass output from modules or resources as inputs to the provider. ", "keywords": ["provider"]}]}, {"Id": "78466197", "PostId": "45734925", "Score": "0", "Text": "So as a first step I would just like to have multiple providers co-exist in the same terraform 'project'. In my case the 'DigitalOcean' provider and the 'Docker' provider without having to run 'terraform init' every time I switch between providers.", "CreationDate": "2017-08-18T10:36:07.417", "UserId": "772175", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "In my case the 'DigitalOcean' provider and the 'Docker' provider without having to run 'terraform init' every time I switch between providers.", "keywords": ["provider"]}]}, {"Id": "78466262", "PostId": "45734925", "Score": "0", "Text": "I am now looking into Terraform workspaces, and to see if I can use them for what I need.", "CreationDate": "2017-08-18T10:37:28.490", "UserId": "772175", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "154159303", "PostHistoryTypeId": "2", "PostId": "45734925", "RevisionGUID": "62d13a60-a25e-4027-a9c3-15297ac13d0b", "CreationDate": "2017-08-17T12:18:27.840", "UserId": "772175", "Text": "How can I get Terraform 0.10.1 to support two different providers without having to run 'terraform init' every time for each provider?\r\n\r\nI am trying to use Terraform to \r\n\r\n1) Provision an API server with the 'DigitalOcean' provider and..\r\n\r\n2) Subsequently use the 'Docker' provider to spin up my containers\r\n\r\nAny suggestions? Do I need to write a orchestrating script that wraps Terraform?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "How can I get Terraform 0.10.1 to support two different providers without having to run 'terraform init' every time for each provider? ", "keywords": ["provider"]}, {"source": "Text", "text": "I am trying to use Terraform to 1) Provision an API server with the 'DigitalOcean' provider and.. ", "keywords": ["provider"]}, {"source": "Text", "text": "2) Subsequently use the 'Docker' provider to spin up my containers ", "keywords": ["provider"]}]}, {"Id": "154159304", "PostHistoryTypeId": "1", "PostId": "45734925", "RevisionGUID": "62d13a60-a25e-4027-a9c3-15297ac13d0b", "CreationDate": "2017-08-17T12:18:27.840", "UserId": "772175", "Text": "How to use multiple Terraform Providers sequentially", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "154159305", "PostHistoryTypeId": "3", "PostId": "45734925", "RevisionGUID": "62d13a60-a25e-4027-a9c3-15297ac13d0b", "CreationDate": "2017-08-17T12:18:27.840", "UserId": "772175", "Text": "<terraform>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "154160109", "PostHistoryTypeId": "5", "PostId": "45734925", "RevisionGUID": "36aa4f88-538a-4288-aeaa-3c6fa79452d9", "CreationDate": "2017-08-17T12:27:31.350", "UserId": "772175", "Comment": "deleted 5 characters in body", "Text": "How can I get Terraform 0.10.1 to support two different providers without having to run 'terraform init' every time for each provider?\r\n\r\nI am trying to use Terraform to \r\n\r\n1) Provision an API server with the 'DigitalOcean' provider\r\n\r\n2) Subsequently use the 'Docker' provider to spin up my containers\r\n\r\nAny suggestions? Do I need to write an orchestrating script that wraps Terraform?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "How can I get Terraform 0.10.1 to support two different providers without having to run 'terraform init' every time for each provider? ", "keywords": ["provider"]}, {"source": "Text", "text": "Provision an API server with the 'DigitalOcean' provider 2) ", "keywords": ["provider"]}, {"source": "Text", "text": "Subsequently use the 'Docker' provider to spin up my containers ", "keywords": ["provider"]}]}], "answers": [{"Id": "45740487", "PostTypeId": "2", "ParentId": "45734925", "CreationDate": "2017-08-17T16:27:33.337", "Score": "1", "Body": "<p>Maybe you can use a provider instance within your resources/module to set up various resources with various providers.</p>\n\n<p><a href=\"https://www.terraform.io/docs/configuration/providers.html#multiple-provider-instances\" rel=\"nofollow noreferrer\">https://www.terraform.io/docs/configuration/providers.html#multiple-provider-instances</a></p>\n\n<p>The doc talks about multiple instances of same provider but I believe the same should be doable with distinct providers as well.</p>\n", "OwnerUserId": "1675384", "LastEditorUserId": "2066657", "LastEditDate": "2019-11-13T06:50:54.353", "LastActivityDate": "2019-11-13T06:50:54.353", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "78466305", "PostId": "45740487", "Score": "1", "Text": "Thanks for your answer but that is still a single provider used multiple times, and I instead wanted multiple providers running one after the other and not concurrently.", "CreationDate": "2017-08-18T10:38:32.070", "UserId": "772175", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Thanks for your answer but that is still a single provider used multiple times, and I instead wanted multiple providers running one after the other and not concurrently.", "keywords": ["provider"]}]}], "history": [{"Id": "154181006", "PostHistoryTypeId": "2", "PostId": "45740487", "RevisionGUID": "ba00bfd4-b5e8-4f2a-907a-2e1863127b47", "CreationDate": "2017-08-17T16:27:33.337", "UserId": "1675384", "Text": "Maybe you can use provider within your resources/module to setup various resources with various providers.\r\n\r\nhttps://www.terraform.io/docs/configuration/providers.html#multiple-provider-instances\r\n\r\nThe doc talks about multiple instances of same provider but I believe same should be doable with distinct providers as well.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Maybe you can use provider within your resources/module to setup various resources with various providers. ", "keywords": ["provider"]}, {"source": "Text", "text": "https://www.terraform.io/docs/configuration/providers.html#multiple-provider-instances ", "keywords": ["provider"]}, {"source": "Text", "text": "The doc talks about multiple instances of same provider but I believe same should be doable with distinct providers as well.", "keywords": ["provider"]}]}, {"Id": "209100070", "PostHistoryTypeId": "5", "PostId": "45740487", "RevisionGUID": "cb8dd60c-b1df-494e-8e6e-a2075e25f1da", "CreationDate": "2019-11-13T06:50:54.353", "UserId": "2066657", "Comment": "'setup' and 'set up' aren't the same.", "Text": "Maybe you can use a provider instance within your resources/module to set up various resources with various providers.\r\n\r\nhttps://www.terraform.io/docs/configuration/providers.html#multiple-provider-instances\r\n\r\nThe doc talks about multiple instances of same provider but I believe the same should be doable with distinct providers as well.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Maybe you can use a provider instance within your resources/module to set up various resources with various providers. ", "keywords": ["instance", "provider"]}, {"source": "Text", "text": "https://www.terraform.io/docs/configuration/providers.html#multiple-provider-instances ", "keywords": ["provider"]}, {"source": "Text", "text": "The doc talks about multiple instances of same provider but I believe the same should be doable with distinct providers as well.", "keywords": ["provider"]}]}, {"Id": "209100071", "PostHistoryTypeId": "24", "PostId": "45740487", "RevisionGUID": "cb8dd60c-b1df-494e-8e6e-a2075e25f1da", "CreationDate": "2019-11-13T06:50:54.353", "Comment": "Proposed by 2066657 approved by 1492229, 213032 edit id of 4569435", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": [{"source": "Body", "text": "Maybe you can use a provider instance within your resources/module to set up various resources with various providers. ", "keywords": ["instance", "provider"]}, {"source": "Body", "text": "https://www.terraform.io/docs/configuration/providers.html#multiple-provider-instances ", "keywords": ["provider"]}, {"source": "Body", "text": "The doc talks about multiple instances of same provider but I believe the same should be doable with distinct providers as well.", "keywords": ["provider"]}]}, {"Id": "45806071", "PostTypeId": "2", "ParentId": "45734925", "CreationDate": "2017-08-21T21:53:45.933", "Score": "9", "Body": "<p>Terraform's current design struggles with creating \"multi-layer\" architectures in a single configuration, due to the need to pass dynamic settings from one provider to another:</p>\n\n<pre><code>resource \"digitalocean_droplet\" \"example\" {\n  # (settings for a machine running docker)\n}\n\nprovider \"docker\" {\n  host = \"tcp://${digitalocean_droplet.example.ipv4_address_private}:2376/\"\n}\n</code></pre>\n\n<p>As you saw in the documentation, passing dynamic values into provider configuration doesn't fully work. It does actually <em>partially</em> work if you use it with care, so one way to get this done is to use a config like the above and then solve the \"chicken-and-egg\" problem by forcing Terraform to create the droplet first:</p>\n\n<pre><code>$ terraform plan -out=tfplan -target=digitalocean_droplet.example\n</code></pre>\n\n<p>The above will create a plan that only deals with the droplet and any of its dependencies, ignoring the docker resources. Once the Docker droplet is up and running, you can then re-run Terraform as normal to complete the setup, which should then work as expected because the Droplet's <code>ipv4_address_private</code> attribute will then be known. As long as the droplet is never replaced, Terraform can be used as normal after this.</p>\n\n<p>Using <code>-target</code> is fiddly, and so the current recommendation is to split such systems up into multiple configurations, with one for each conceptual \"layer\". This does, however, require initializing two separate working directories, which you indicated in your question that you didn't want to do. This <code>-target</code> trick allows you to get it done within a single configuration, at the expense of an unconventional workflow to get it initially bootstrapped.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2017-08-21T21:53:45.933", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "78636787", "PostId": "45806071", "Score": "0", "Text": "Thank you for your solution, I think that Terraform should eventually address the issue but until then this is the cleanest way to solve the issue.", "CreationDate": "2017-08-23T12:30:33.837", "UserId": "772175", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "79856535", "PostId": "45806071", "Score": "2", "Text": "There is a github issue that describes the current idea for how to eventually address this: https://github.com/hashicorp/terraform/issues/4149", "CreationDate": "2017-09-27T14:26:06.957", "UserId": "281848", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "154459487", "PostHistoryTypeId": "2", "PostId": "45806071", "RevisionGUID": "ef13c83f-a375-4939-839b-87205634dec5", "CreationDate": "2017-08-21T21:53:45.933", "UserId": "281848", "Text": "Terraform's current design struggles with creating \"multi-layer\" architectures in a single configuration, due to the need to pass dynamic settings from one provider to another:\r\n\r\n    resource \"digitalocean_droplet\" \"example\" {\r\n      # (settings for a machine running docker)\r\n    }\r\n\r\n    provider \"docker\" {\r\n      host = \"tcp://${digitalocean_droplet.example.ipv4_address_private}:2376/\"\r\n    }\r\n\r\nAs you saw in the documentation, passing dynamic values into provider configuration doesn't fully work. It does actually _partially_ work if you use it with care, so one way to get this done is to use a config like the above and then solve the \"chicken-and-egg\" problem by forcing Terraform to create the droplet first:\r\n\r\n    $ terraform plan -out=tfplan -target=digitalocean_droplet.example\r\n\r\nThe above will create a plan that only deals with the droplet and any of its dependencies, ignoring the docker resources. Once the Docker droplet is up and running, you can then re-run Terraform as normal to complete the setup, which should then work as expected because the Droplet's `ipv4_address_private` attribute will then be known. As long as the droplet is never replaced, Terraform can be used as normal after this.\r\n\r\nUsing `-target` is fiddly, and so the current recommendation is to split such systems up into multiple configurations, with one for each conceptual \"layer\". This does, however, require initializing two separate working directories, which you indicated in your question that you didn't want to do. This `-target` trick allows you to get it done within a single configuration, at the expense of an unconventional workflow to get it initially bootstrapped.\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Terraform's current design struggles with creating \"multi-layer\" architectures in a single configuration, due to the need to pass dynamic settings from one provider to another: resource \"digitalocean_droplet\" \"example\" { # (settings for a machine running docker) } provider \"docker\" { host = \"tcp://${digitalocean_droplet.example.ipv4_address_private}:2376/\" } ", "keywords": ["provider"]}, {"source": "Text", "text": "As you saw in the documentation, passing dynamic values into provider configuration doesn't fully work. ", "keywords": ["provider"]}, {"source": "Text", "text": "This `-target` trick allows you to get it done within a single configuration, at the expense of an unconventional workflow to get it initially bootstrapped.", "keywords": ["expense"]}]}], "filtered-sentences": [{"source": "Body", "text": "Terraform's current design struggles with creating \"multi-layer\" architectures in a single configuration, due to the need to pass dynamic settings from one provider to another: As you saw in the documentation, passing dynamic values into provider configuration doesn't fully work. ", "keywords": ["provider"]}, {"source": "Body", "text": "This -target trick allows you to get it done within a single configuration, at the expense of an unconventional workflow to get it initially bootstrapped.", "keywords": ["expense"]}]}, {"Id": "46330627", "PostTypeId": "2", "ParentId": "45734925", "CreationDate": "2017-09-20T19:47:00.650", "Score": "0", "Body": "<p>A little bit late...</p>\n\n<p>Well, got the same Problem. My workaround is to create modules.</p>\n\n<p>First you need a module for your docker Provider with an ip variable:</p>\n\n<pre><code># File: ./docker/main.tf\nvariable \"ip\" {}\n\nprovider \"docker\" {\n    host = \"tcp://${var.ip}:2375/\"\n}\n\nresource \"docker_container\" \"www\" {\n    provider = \"docker\"\n    name  = \"www\"\n}\n</code></pre>\n\n<p>Next one is to load that modul in your root configuration:</p>\n\n<pre><code># File: .main.tf\nmodule \"docker01\" {\n    source = \"./docker\"\n    ip = \"192.169.10.12\"\n}\n\nmodule \"docker02\" {\n    source = \"./docker\"\n    ip = \"192.169.10.12\"\n}\n</code></pre>\n\n<p>True, you will create on every node the same container, but in my case that's what i wanted. I currently haven't found a way to configure the hosts with an individual configuration. Maybe nested modules, but that didn't work in the first tries.</p>\n", "OwnerUserId": "8643823", "LastActivityDate": "2017-09-20T19:47:00.650", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "156614672", "PostHistoryTypeId": "2", "PostId": "46330627", "RevisionGUID": "d4980054-5ba3-4147-a76b-4b4cf0a33811", "CreationDate": "2017-09-20T19:47:00.650", "UserId": "8643823", "Text": "A little bit late...\r\n\r\nWell, got the same Problem. My workaround is to create modules.\r\n\r\nFirst you need a module for your docker Provider with an ip variable:\r\n\r\n    # File: ./docker/main.tf\r\n    variable \"ip\" {}\r\n    \r\n    provider \"docker\" {\r\n     host = \"tcp://${var.ip}:2375/\"\r\n    }\r\n\r\n    resource \"docker_container\" \"www\" {\r\n     provider = \"docker\"\r\n     name  = \"www\"\r\n    }\r\n\r\nNext one is to load that modul in your root configuration:\r\n\r\n    # File: .main.tf\r\n    module \"docker01\" {\r\n     source = \"./docker\"\r\n     ip = \"192.169.10.12\"\r\n    }\r\n    \r\n    module \"docker02\" {\r\n     source = \"./docker\"\r\n     ip = \"192.169.10.12\"\r\n    }\r\n\r\n\r\nTrue, you will create on every node the same container, but in my case that's what i wanted. I currently haven't found a way to configure the hosts with an individual configuration. Maybe nested modules, but that didn't work in the first tries.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "First you need a module for your docker Provider with an ip variable: # File: ./docker/main.tf variable \"ip\" {} provider \"docker\" { host = \"tcp://${var.ip}:2375/\" } resource \"docker_container\" \"www\" { provider = \"docker\" name = \"www\" } Next one is to load that modul in your root configuration: # File: .main.tf module \"docker01\" { source = \"./docker\" ip = \"192.169.10.12\" ", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "First you need a module for your docker Provider with an ip variable: Next one is to load that modul in your root configuration: True, you will create on every node the same container, but in my case that's what i wanted. ", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "How can I get Terraform 0.10.1 to support two different providers without having to run 'terraform init' every time for each provider? ", "keywords": ["provider"]}, {"source": "Body", "text": "Provision an API server with the 'DigitalOcean' provider 2) ", "keywords": ["provider"]}, {"source": "Body", "text": "Subsequently use the 'Docker' provider to spin up my containers ", "keywords": ["provider"]}]}