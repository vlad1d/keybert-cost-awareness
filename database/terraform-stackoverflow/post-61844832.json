{"Id": "61844832", "PostTypeId": "1", "CreationDate": "2020-05-16T23:11:26.303", "Score": "1", "ViewCount": "2125", "Body": "<p>I have just started working on a project that is hosted on an AWS EC2 Windows Instance with an IIS. I want to move this setup to more reliable place, and one of the first things I wanted to do was to move away from snowflake servers that are setup and configured by hand. </p>\n\n<p>So started looking at Terraform from Hashicorp. My thought was that I could define the entire setup including network etc in Terraform and that way make sure it was configured correctly. </p>\n\n<p>I thought I would start with defining a server. A simple Windows Server instance with an IIS installed. But this is where I run into my first problems. I thought I could configure the IIS from Terraform. I guess you can't. So my next thought was to combine Terraform with Powershell Desired State Configuration. </p>\n\n<p>I can setup an IIS server on a box using DSC. But I am stuck invoking DSC from Terraform. I can provision a vanilla server easily. I have tried looking for a good blog post on how to use DSC in combination with Terraform, but I can't find one that explains how to do it.</p>\n\n<p>Can anyone point me towards a good place to read up on this? Or alternatively if the reason I can't find this is that it is just bad practice and I should do it in another way, then please educate me.</p>\n\n<p>Thanks</p>\n\n<p>How can I provision IIS on EC2 Windows with a resource?</p>\n", "OwnerUserId": "1794286", "LastEditorUserId": "154527", "LastEditDate": "2020-05-18T04:10:13.133", "LastActivityDate": "2020-05-18T10:32:00.370", "Title": "How can I provision IIS on EC2 Windows with a resource?", "Tags": "<amazon-web-services><iis><amazon-ec2><terraform><powershell-dsc>", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "109396841", "PostId": "61844832", "Score": "0", "Text": "Yes, you should chain Terraform into a software provisioner, and Terraform should not itself be used for software provisioning. You can either do it directly  from Terraform via `provisioner` block, or with a `null` resource for example. The problem you are facing finding examples for DSC is because it is not a commonly used tool. Typically people use Ansible for this, or sometimes Puppet or Chef. There will be many guides and examples for those tools in conjunction with Terraform. Alternatively, bake IIS into a custom AMI via Packer and a software provisioner.", "CreationDate": "2020-05-17T11:11:07.043", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "109408329", "PostId": "61844832", "Score": "0", "Text": "Thanks Matt! I will definitely look at Ansible, Puppet and Chef. One of my previous projects used Chef, but I didn't have anything to do with that tool then. I have heard good things about DSC. But would you say it might be too early to adopt it?", "CreationDate": "2020-05-17T19:08:35.047", "UserId": "1794286", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "221835071", "PostHistoryTypeId": "2", "PostId": "61844832", "RevisionGUID": "9dd02437-9877-4bf1-a5b5-bbe2102d685f", "CreationDate": "2020-05-16T23:11:26.303", "UserId": "1794286", "Text": "I have just started working on a project that is hosted on an AWS EC2 Windows Instance with an IIS. I want to move this setup to more reliable place, and one of the first things I wanted to do was to move away from snowflake servers that are setup and configured by hand. \r\n\r\nSo started looking at Terraform from Hashicorp. My thought was that I could define the entire setup including network etc in Terraform and that way make sure it was configured correctly. \r\n\r\nI thought I would start with defining a server. A simple Windows Server instance with an IIS installed. But this is where I run into my first problems. I thought I could configure the IIS from Terraform. I guess you can't. So my next thought was to combine Terraform with Powershell Desired State Configuration. \r\n\r\nI can setup an IIS server on a box using DSC. But I am stuck invoking DSC from Terraform. I can provision a vanilla server easily. I have tried looking for a good blog post on how to use DSC in combination with Terraform, but I can't find one that explains how to do it.\r\n\r\nCan anyone point me towards a good place to read up on this? Or alternatively if the reason I can't find this is that it is just bad practice and I should do it in another way, then please educate me.\r\n\r\nThanks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have just started working on a project that is hosted on an AWS EC2 Windows Instance with an IIS. ", "keywords": ["instance"]}, {"source": "Text", "text": "A simple Windows Server instance with an IIS installed. ", "keywords": ["instance"]}]}, {"Id": "221835072", "PostHistoryTypeId": "1", "PostId": "61844832", "RevisionGUID": "9dd02437-9877-4bf1-a5b5-bbe2102d685f", "CreationDate": "2020-05-16T23:11:26.303", "UserId": "1794286", "Text": "Terraform EC2 Windows Server with IIS", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "221835073", "PostHistoryTypeId": "3", "PostId": "61844832", "RevisionGUID": "9dd02437-9877-4bf1-a5b5-bbe2102d685f", "CreationDate": "2020-05-16T23:11:26.303", "UserId": "1794286", "Text": "<amazon-web-services><iis><amazon-ec2><terraform><powershell-dsc>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "221908210", "PostHistoryTypeId": "5", "PostId": "61844832", "RevisionGUID": "c2b770f7-a095-4be7-9a1d-4c496fb4a59a", "CreationDate": "2020-05-18T04:10:13.133", "UserId": "154527", "Comment": "Phrase as question. Close by restating question.", "Text": "I have just started working on a project that is hosted on an AWS EC2 Windows Instance with an IIS. I want to move this setup to more reliable place, and one of the first things I wanted to do was to move away from snowflake servers that are setup and configured by hand. \r\n\r\nSo started looking at Terraform from Hashicorp. My thought was that I could define the entire setup including network etc in Terraform and that way make sure it was configured correctly. \r\n\r\nI thought I would start with defining a server. A simple Windows Server instance with an IIS installed. But this is where I run into my first problems. I thought I could configure the IIS from Terraform. I guess you can't. So my next thought was to combine Terraform with Powershell Desired State Configuration. \r\n\r\nI can setup an IIS server on a box using DSC. But I am stuck invoking DSC from Terraform. I can provision a vanilla server easily. I have tried looking for a good blog post on how to use DSC in combination with Terraform, but I can't find one that explains how to do it.\r\n\r\nCan anyone point me towards a good place to read up on this? Or alternatively if the reason I can't find this is that it is just bad practice and I should do it in another way, then please educate me.\r\n\r\nThanks\r\n\r\nHow can I provision IIS on EC2 Windows with a resource?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have just started working on a project that is hosted on an AWS EC2 Windows Instance with an IIS. ", "keywords": ["instance"]}, {"source": "Text", "text": "A simple Windows Server instance with an IIS installed. ", "keywords": ["instance"]}]}, {"Id": "221908211", "PostHistoryTypeId": "4", "PostId": "61844832", "RevisionGUID": "c2b770f7-a095-4be7-9a1d-4c496fb4a59a", "CreationDate": "2020-05-18T04:10:13.133", "UserId": "154527", "Comment": "Phrase as question. Close by restating question.", "Text": "How can I provision IIS on EC2 Windows with a resource?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "61861945", "PostTypeId": "2", "ParentId": "61844832", "CreationDate": "2020-05-18T03:23:53.473", "Score": "0", "Body": "<p>You can run arbitrary PowerShell scripts on startup as follows:</p>\n\n<pre><code>resource \"aws_instance\" \"windows_2016_server\" {\n//...\nuser_data = &lt;&lt;-EOF\n&lt;powershell&gt;\n$file = $env:SystemRoot + \"\\Temp\\${var.some_variable}\" + (Get-Date).ToString(\"MM-dd-yy-hh-mm\")\nNew-Item $file -ItemType file\n&lt;/powershell&gt;\nEOF\n//...\n}\n</code></pre>\n\n<p>You'll need a variable like this defined to use that (I'm providing a more complex example so there's a more useful starting point)</p>\n\n<pre><code>variable \"some_variable\" {\n    type = string\n    default = \"UserDataTestFile\"\n}\n</code></pre>\n\n<p>Instead of creating a timestamp file like the example above, you can invoke DSC to set up IIS as you normally would interactively from PowerShell on a server.</p>\n\n<p>You can read more about <strong>user_data</strong> on Windows here:\n<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html</a></p>\n\n<p><strong>user_data</strong> will include your PowerShell directly.</p>\n\n<p>You can use a <strong>templatefile(\"${module.path}/user-data.ps1, {some_variable = var.some_variable})</strong> instead of an inline script as above.</p>\n\n<p>Have user-data.ps1 in the same directory as the TF file that references it:</p>\n\n<pre><code>&lt;powershell&gt;\n$file = $env:SystemRoot + \"\\Temp\\${some_variable}\" + (Get-Date).ToString(\"MM-dd-yy-hh-mm\")\nNew-Item $file -ItemType file\n&lt;/powershell&gt;\n</code></pre>\n\n<p>You still need the <code>&lt;powershell&gt;&lt;/powershell&gt;</code> tags around your script source code. That's a requirement of how Windows on EC2 expects  PowerShell user-data scripts.</p>\n\n<p>And then update your TF file as follows:</p>\n\n<pre><code>resource \"aws_instance\" \"windows_2016_server\" {\n//...\nuser_data = templatefile(\"${module.path}/user-data.ps1, {\n  some_variable = var.some_variable\n})\n\n//...\n}\n</code></pre>\n\n<p>Note that in the file read by <strong>templatefile</strong> has variables like <strong>some_variable</strong> and NOT <strong>var.some_variable</strong>.</p>\n\n<p>Read more about <strong>templatefile</strong> here:</p>\n\n<p><a href=\"https://www.terraform.io/docs/configuration/functions/templatefile.html\" rel=\"nofollow noreferrer\">https://www.terraform.io/docs/configuration/functions/templatefile.html</a></p>\n", "OwnerUserId": "154527", "LastEditorUserId": "154527", "LastEditDate": "2020-05-18T10:32:00.370", "LastActivityDate": "2020-05-18T10:32:00.370", "CommentCount": "8", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "109423047", "PostId": "61861945", "Score": "1", "Text": "Thanks Alain\nSo I would use a `File Provisioner` to upload my DSC files to the server and then invoke them using the user data.\nJust a stupid question. It is called user data, so when I first looked at this I thought it would run at login and not boot. But that isn't the case is it? Preferably I would like to never have to log into the instance.", "CreationDate": "2020-05-18T08:49:26.560", "UserId": "1794286", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Preferably I would like to never have to log into the instance.", "keywords": ["instance"]}]}, {"Id": "109426182", "PostId": "61861945", "Score": "0", "Text": "There is no need to upload the script separately. The content provided to **user_data** is automatically associated with your EC2 metadata and loaded by the instance when it starts. I've written a lot of Terraform and I never use file provisioners. I often write user-data which fetches files from S3, the web, or services like GitHub.", "CreationDate": "2020-05-18T10:38:19.107", "UserId": "154527", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The content provided to **user_data** is automatically associated with your EC2 metadata and loaded by the instance when it starts. ", "keywords": ["instance"]}]}, {"Id": "109430766", "PostId": "61861945", "Score": "1", "Text": "I got it to work by creating a user in a powershell script in user data, and using that user to first upload the DSC files and afterwards using remote-exec to execute the DSC configuration. But after I got it all to work I can see that it isn't really a good way of doing it, just as you also say Alain. I like the DSC way of setting up the server. So I think I will continue down that route. But I will set up DSC Pull in the user data instead and try to see if I can make it pull directly from an S3 bucket.", "CreationDate": "2020-05-18T13:04:15.917", "UserId": "1794286", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "109430909", "PostId": "61861945", "Score": "0", "Text": "To pull from the S3 bucket the instance profile of your EC2 Windows will need s3:GetObject for the S3 object ARN and possibly kms:Decrypt for the KMS key ARN if you are using a customer master key to encrypt objects in S3. If you run into issues with that, post another question with your Terraform code and mention me in a comment :)", "CreationDate": "2020-05-18T13:08:25.233", "UserId": "154527", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To pull from the S3 bucket the instance profile of your EC2 Windows will need s3:GetObject for the S3 object ARN and possibly kms:Decrypt for the KMS key ARN if you are using a customer master key to encrypt objects in S3. ", "keywords": ["instance"]}]}, {"Id": "109430987", "PostId": "61861945", "Score": "1", "Text": "Thanks a lot. I will try that out.", "CreationDate": "2020-05-18T13:10:20.520", "UserId": "1794286", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "109487517", "PostId": "61861945", "Score": "1", "Text": "So I did a little digging and found that you need a DSC Pull server set up and that cannot be a simple S3 bucket. Oh well... Azure has a cheap service called Azure Automation that serves this purpose. This can be connected to my GitHub repo where I can store my DSC configurations under version control. What I do then is to use the user data to register my newly provisioned EC2 instance with Azure Automation... and presto I have it all up and running. There are Terraform modules if you run your VMs in Azure, but we don't. I will clean this up and then provide a step-by-step run through here.", "CreationDate": "2020-05-19T23:06:05.580", "UserId": "1794286", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Azure has a cheap service called Azure Automation that serves this purpose. ", "keywords": ["cheap"]}, {"source": "Text", "text": "What I do then is to use the user data to register my newly provisioned EC2 instance with Azure Automation... and presto I have it all up and running. ", "keywords": ["instance"]}]}, {"Id": "109487552", "PostId": "61861945", "Score": "1", "Text": "Thanks for pointing me towards the user data @alain-odea. It has simplified the setup A LOT.", "CreationDate": "2020-05-19T23:07:52.083", "UserId": "1794286", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "109525696", "PostId": "61861945", "Score": "0", "Text": "I'm so glad user-data is helpful for yoy. Paying it forward. I had a colleague do the same for me :)", "CreationDate": "2020-05-20T23:22:05.980", "UserId": "154527", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "221906797", "PostHistoryTypeId": "2", "PostId": "61861945", "RevisionGUID": "f5d80934-ef08-4fb5-821b-77e8690e328a", "CreationDate": "2020-05-18T03:23:53.473", "UserId": "154527", "Text": "You can run arbitrary PowerShell scripts on startup as follows:\r\n\r\n    resource \"aws_instance\" \"windows_2016_server\" {\r\n    //...\r\n    user_data = <<-EOF\r\n    <powershell>\r\n    $file = $env:SystemRoot + \"\\Temp\\\" + (Get-Date).ToString(\"MM-dd-yy-hh-mm\")\r\n    New-Item $file -ItemType file\r\n    </powershell>\r\n    EOF\r\n    //...\r\n    }\r\n\r\nInstead of creating a timestamp file like the example above, you can invoke DSC to set up IIS as you normally would interactively from PowerShell on a server.\r\n\r\nYou can read more about **user_data** on Windows here:\r\nhttps://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "221930097", "PostHistoryTypeId": "5", "PostId": "61861945", "RevisionGUID": "3365f8ad-c47a-4883-a4e5-d7e94c271f41", "CreationDate": "2020-05-18T10:32:00.370", "UserId": "154527", "Comment": "Provide file example. Expand user-data example to include a variable so that it is non-trivial.", "Text": "You can run arbitrary PowerShell scripts on startup as follows:\r\n\r\n    resource \"aws_instance\" \"windows_2016_server\" {\r\n    //...\r\n    user_data = <<-EOF\r\n    <powershell>\r\n    $file = $env:SystemRoot + \"\\Temp\\${var.some_variable}\" + (Get-Date).ToString(\"MM-dd-yy-hh-mm\")\r\n    New-Item $file -ItemType file\r\n    </powershell>\r\n    EOF\r\n    //...\r\n    }\r\n\r\nYou'll need a variable like this defined to use that (I'm providing a more complex example so there's a more useful starting point)\n\n    variable \"some_variable\" {\n        type = string\n        default = \"UserDataTestFile\"\n    }\n\nInstead of creating a timestamp file like the example above, you can invoke DSC to set up IIS as you normally would interactively from PowerShell on a server.\r\n\r\nYou can read more about **user_data** on Windows here:\r\nhttps://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html\r\n\n**user_data** will include your PowerShell directly.\n\nYou can use a **templatefile(\"${module.path}/user-data.ps1, {some_variable = var.some_variable})** instead of an inline script as above.\n\nHave user-data.ps1 in the same directory as the TF file that references it:\n\n    <powershell>\n    $file = $env:SystemRoot + \"\\Temp\\${some_variable}\" + (Get-Date).ToString(\"MM-dd-yy-hh-mm\")\n    New-Item $file -ItemType file\n    </powershell>\n\nYou still need the `<powershell></powershell>` tags around your script source code. That's a requirement of how Windows on EC2 expects  PowerShell user-data scripts.\n\nAnd then update your TF file as follows:\n\n    resource \"aws_instance\" \"windows_2016_server\" {\n    //...\n    user_data = templatefile(\"${module.path}/user-data.ps1, {\n      some_variable = var.some_variable\n    })\n   \n    //...\n    }\n\nNote that in the file read by **templatefile** has variables like **some_variable** and NOT **var.some_variable**.\n\nRead more about **templatefile** here:\n\nhttps://www.terraform.io/docs/configuration/functions/templatefile.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have just started working on a project that is hosted on an AWS EC2 Windows Instance with an IIS. ", "keywords": ["instance"]}, {"source": "Body", "text": "A simple Windows Server instance with an IIS installed. ", "keywords": ["instance"]}]}