{"Id": "64282651", "PostTypeId": "1", "CreationDate": "2020-10-09T15:06:15.490", "Score": "0", "ViewCount": "198", "Body": "<p>For quality reasons I want to compare AWS Services and Terraform code.\nSo I have an AWS environment and some corresponding Terraform code. And it is unclear what has been deployed and configured via code and what via the console or via a combination of both.</p>\n<p>What I would like to have, is something like a list of resources, which are not created by Terraform and the same for configurations.</p>\n<p>Is there a way to do this directly with Terraform (I did not find one) or are there other automatic solutions?</p>\n<p>If found this from about a year ago:\n<a href=\"https://www.reddit.com/r/devops/comments/9rev5f/how_do_i_diff_whats_in_terraform_vs_whats_in_aws/\" rel=\"nofollow noreferrer\">https://www.reddit.com/r/devops/comments/9rev5f/how_do_i_diff_whats_in_terraform_vs_whats_in_aws/</a></p>\n<p>But it also sums up my problem and has only a high effort solution.</p>\n<p>Kind regards</p>\n", "OwnerUserId": "7700012", "LastEditorUserId": "7700012", "LastEditDate": "2020-10-09T17:36:30.987", "LastActivityDate": "2020-10-09T17:36:30.987", "Title": "Get difference between Terraform Code and AWS / Cloud", "Tags": "<amazon-web-services><terraform>", "AnswerCount": "1", "CommentCount": "0", "ClosedDate": "2020-10-10T08:08:35.137", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "232493179", "PostHistoryTypeId": "2", "PostId": "64282651", "RevisionGUID": "0e38138b-7a53-4629-b2c4-7e2f818c9a46", "CreationDate": "2020-10-09T15:06:15.490", "UserId": "7700012", "Text": "for quality reasons I want to compare AWS Services and Terraform code. \r\nWhat I would like to have, is something like a list of resources, which are not created by Terraform and the same for configurations. \r\n\r\nIs there a way to do this directly with Terraform (I did not find one) or are there other automatic solutions?\r\n\r\nKind regards", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "232493180", "PostHistoryTypeId": "1", "PostId": "64282651", "RevisionGUID": "0e38138b-7a53-4629-b2c4-7e2f818c9a46", "CreationDate": "2020-10-09T15:06:15.490", "UserId": "7700012", "Text": "Get difference between Terraform Code and AWS / Cloud", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "232493181", "PostHistoryTypeId": "3", "PostId": "64282651", "RevisionGUID": "0e38138b-7a53-4629-b2c4-7e2f818c9a46", "CreationDate": "2020-10-09T15:06:15.490", "UserId": "7700012", "Text": "<amazon-web-services><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "232497466", "PostHistoryTypeId": "5", "PostId": "64282651", "RevisionGUID": "3ec3bcce-b4ee-4e33-bb51-1f35970b6d05", "CreationDate": "2020-10-09T16:10:49.567", "UserId": "7700012", "Comment": "added 212 characters in body", "Text": "For quality reasons I want to compare AWS Services and Terraform code. \r\nWhat I would like to have, is something like a list of resources, which are not created by Terraform and the same for configurations. \r\n\r\nIs there a way to do this directly with Terraform (I did not find one) or are there other automatic solutions?\r\n\r\nIf found this from about a year ago: \r\nhttps://www.reddit.com/r/devops/comments/9rev5f/how_do_i_diff_whats_in_terraform_vs_whats_in_aws/\r\n\r\nBut it also sums up my problem and has only a high effort solution. \r\n\r\nKind regards", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "232502195", "PostHistoryTypeId": "5", "PostId": "64282651", "RevisionGUID": "5793c340-cb1a-4790-828c-9fb302fa5178", "CreationDate": "2020-10-09T17:36:30.987", "UserId": "7700012", "Comment": "added 192 characters in body", "Text": "For quality reasons I want to compare AWS Services and Terraform code. \r\nSo I have an AWS environment and some corresponding Terraform code. And it is unclear what has been deployed and configured via code and what via the console or via a combination of both. \r\n\r\nWhat I would like to have, is something like a list of resources, which are not created by Terraform and the same for configurations. \r\n\r\nIs there a way to do this directly with Terraform (I did not find one) or are there other automatic solutions?\r\n\r\nIf found this from about a year ago: \r\nhttps://www.reddit.com/r/devops/comments/9rev5f/how_do_i_diff_whats_in_terraform_vs_whats_in_aws/\r\n\r\nBut it also sums up my problem and has only a high effort solution. \r\n\r\nKind regards", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "232538808", "PostHistoryTypeId": "10", "PostId": "64282651", "RevisionGUID": "d6621231-33d1-432d-b818-9cbe07ea7109", "CreationDate": "2020-10-10T08:08:35.137", "UserId": "584192", "Comment": "104", "Text": "{\"Voters\":[{\"Id\":2757035,\"DisplayName\":\"underscore_d\"},{\"Id\":2291321,\"DisplayName\":\"ydaetskcoR\"},{\"Id\":584192,\"DisplayName\":\"Samuel Liew\"}]}", "filtered-sentences": []}], "answers": [{"Id": "64284615", "PostTypeId": "2", "ParentId": "64282651", "CreationDate": "2020-10-09T17:21:48.293", "Score": "2", "Body": "<p>The best way to accomplish this is to make sure that all of your terraform stacks apply a tag like <code>ManagedByTerraform</code> to all taggable resources. Then you can pull a report of all resources that aren't tagged with that tag. Any taggable resource that doesn't have that tag was almost certainly not made by terraform. Unless you have problems with your permissions allowing people to remove such tags via the console or something.</p>\n<p>The only shortcoming here is that not everything is taggable. If you pay attention to the AWS release notes, you'll notice a trend for a strong and increased push for all resources to be taggable. So it's getting better.</p>\n<p>If you take this approach, I recommend using other tags too to help you know what git repo/module/etc is responsible for the creation of the resource too.</p>\n<p>If you want to enforce that all taggable resources are tagged, you can look into policy as code. Open Policy Agent allows you to run rules against terraform plans. And there is Hashicorps Sentry.</p>\n<p><a href=\"https://www.pulumi.com/\" rel=\"nofollow noreferrer\">Pulumi</a> has the concept of <a href=\"https://www.pulumi.com/docs/intro/concepts/programming-model/#transformations\" rel=\"nofollow noreferrer\">transformations</a>. A transformation can change all resources with a function and you can register a transformation on an entire stack with a short line of code. This is better than policy enforcement because it just updates your resources to be compliant, rather than just alerting you that they are not compliant. In other words, tagging all resources consistently is very simple.</p>\n", "OwnerUserId": "2977807", "LastActivityDate": "2020-10-09T17:21:48.293", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "113676251", "PostId": "64284615", "Score": "1", "Text": "Hello Geoff, thank you very much for your very helpful thoughts!\nCombined with a user, only allowed to use the API and not writing via the console, this should lead to some good Terraform enforcement, so one has not to worry about some differences.\n\nHaving some Terraform and an AWS-Environment where it is not clear what is done with Terraform and what via the console is another problem to be solved... I will update my question for more clarity.", "CreationDate": "2020-10-09T17:35:09.320", "UserId": "7700012", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "232501404", "PostHistoryTypeId": "2", "PostId": "64284615", "RevisionGUID": "2cde8a2b-29a8-43c1-ba40-c71dbdc92987", "CreationDate": "2020-10-09T17:21:48.293", "UserId": "2977807", "Text": "The best way to accomplish this is to make sure that all of your terraform stacks apply a tag like `ManagedByTerraform` to all taggable resources. Then you can pull a report of all resources that aren't tagged with that tag. Any taggable resource that doesn't have that tag was almost certainly not made by terraform. Unless you have problems with your permissions allowing people to remove such tags via the console or something.\r\n\r\nThe only shortcoming here is that not everything is taggable. If you pay attention to the AWS release notes, you'll notice a trend for a strong and increased push for all resources to be taggable. So it's getting better.\r\n\r\nIf you take this approach, I recommend using other tags too to help you know what git repo/module/etc is responsible for the creation of the resource too.\r\n\r\nIf you want to enforce that all taggable resources are tagged, you can look into policy as code. Open Policy Agent allows you to run rules against terraform plans. And there is Hashicorps Sentry.\r\n\r\n[Pulumi][1] has the concept of [transformations][2]. A transformation can change all resources with a function and you can register a transformation on an entire stack with a short line of code. This is better than policy enforcement because it just updates your resources to be compliant, rather than just alerting you that they are not compliant. In other words, tagging all resources consistently is very simple.\r\n\r\n  [1]: https://www.pulumi.com/\r\n  [2]: https://www.pulumi.com/docs/intro/concepts/programming-model/#transformations\r\n  [3]: https://github.com/pulumi/pulumi/issues/3901", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "If you pay attention to the AWS release notes, you'll notice a trend for a strong and increased push for all resources to be taggable. ", "keywords": ["pay"]}, {"source": "Text", "text": "If you want to enforce that all taggable resources are tagged, you can look into policy as code. ", "keywords": ["policy"]}, {"source": "Text", "text": "Open Policy Agent allows you to run rules against terraform plans. ", "keywords": ["policy"]}, {"source": "Text", "text": "A transformation can change all resources with a function and you can register a transformation on an entire stack with a short line of code. ", "keywords": ["change"]}, {"source": "Text", "text": "This is better than policy enforcement because it just updates your resources to be compliant, rather than just alerting you that they are not compliant. ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "If you pay attention to the AWS release notes, you'll notice a trend for a strong and increased push for all resources to be taggable. ", "keywords": ["pay"]}, {"source": "Body", "text": "If you want to enforce that all taggable resources are tagged, you can look into policy as code. ", "keywords": ["policy"]}, {"source": "Body", "text": "Open Policy Agent allows you to run rules against terraform plans. ", "keywords": ["policy"]}, {"source": "Body", "text": "A transformation can change all resources with a function and you can register a transformation on an entire stack with a short line of code. ", "keywords": ["change"]}, {"source": "Body", "text": "This is better than policy enforcement because it just updates your resources to be compliant, rather than just alerting you that they are not compliant. ", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": []}