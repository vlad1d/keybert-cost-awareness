{"Id": "38486335", "PostTypeId": "1", "AcceptedAnswerId": "41482391", "CreationDate": "2016-07-20T16:48:00.087", "Score": "120", "ViewCount": "33319", "Body": "<p>I am a little bit puzzled on the question whether to commit <code>.tfstate</code> files to Git or not. The <a href=\"https://www.terraform.io/intro/getting-started/build.html#apply\" rel=\"noreferrer\">Terraform documentation</a> states:</p>\n\n<blockquote>\n  <p>Terraform also put some state into the <code>terraform.tfstate</code> file by default. This state file is extremely important; it maps various resource metadata to actual resource IDs so that Terraform knows what it is managing. This file must be saved and distributed to anyone who might run Terraform. We recommend simply putting it into version control, since it generally isn't too large.</p>\n</blockquote>\n\n<p>Now, on the other hand, the accepted and upvoted answer on <a href=\"https://stackoverflow.com/questions/33157516/best-practices-when-using-terraform\">Best practices when using Terraform</a> states:</p>\n\n<blockquote>\n  <p>Terraform config can be used to provision many boxes on different infrastructure, each of which could have a different state. As it can also be run by multiple people this state should be in a centralised location (like S3) but <em>not</em> git.</p>\n</blockquote>\n\n<p>(Emphasis by the original author, not by me)</p>\n\n<p>Who is right, and if so, why?</p>\n", "OwnerUserId": "1333873", "LastEditorUserId": "213269", "LastEditDate": "2020-12-10T16:56:53.180", "LastActivityDate": "2022-08-19T13:38:06.620", "Title": "Should I commit .tfstate files to Git?", "Tags": "<git><terraform>", "AnswerCount": "4", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "links": [{"Id": "1225682063", "CreationDate": "2016-07-20T16:48:00.087", "PostId": "38486335", "RelatedPostId": "33157516", "LinkTypeId": "1"}], "history": [{"Id": "123078692", "PostHistoryTypeId": "2", "PostId": "38486335", "RevisionGUID": "0ac9d5b8-6f3c-48d9-a3d1-1db206862b1d", "CreationDate": "2016-07-20T16:48:00.087", "UserId": "1333873", "Text": "I am a little bit puzzled on the question whether to commit `.tfstate` files to Git or not. The [Terraform documentation](https://www.terraform.io/intro/getting-started/build.html#apply) states:\r\n\r\n> Terraform also put some state into the `terraform.tfstate` file by default. This state file is extremely important; it maps various resource metadata to actual resource IDs so that Terraform knows what it is managing. This file must be saved and distributed to anyone who might run Terraform. We recommend simply putting it into version control, since it generally isn't too large.\r\n\r\nNow, on the other hand, the accepted and upvoted answer on http://stackoverflow.com/questions/33157516/best-practices-when-using-terraform states:\r\n\r\n> Terraform config can be used to provision many boxes on different infrastructure, each of which could have a different state. As it can also be run by multiple people this state should be in a centralised location (like S3) but *not* git.\r\n\r\n(Emphasis by the original author, not by me)\r\n\r\nWho is right, and if so, why?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "123078693", "PostHistoryTypeId": "1", "PostId": "38486335", "RevisionGUID": "0ac9d5b8-6f3c-48d9-a3d1-1db206862b1d", "CreationDate": "2016-07-20T16:48:00.087", "UserId": "1333873", "Text": "Should I commit .tfstate files to Git?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "123078694", "PostHistoryTypeId": "3", "PostId": "38486335", "RevisionGUID": "0ac9d5b8-6f3c-48d9-a3d1-1db206862b1d", "CreationDate": "2016-07-20T16:48:00.087", "UserId": "1333873", "Text": "<devops><terraform>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "146794830", "PostHistoryTypeId": "5", "PostId": "38486335", "RevisionGUID": "9dc35497-d033-4c38-820e-d261f1ad2dc2", "CreationDate": "2017-05-23T12:00:21.383", "UserDisplayName": "URL Rewriter Bot", "Comment": "replaced http://stackoverflow.com/ with https://stackoverflow.com/", "Text": "I am a little bit puzzled on the question whether to commit `.tfstate` files to Git or not. The [Terraform documentation](https://www.terraform.io/intro/getting-started/build.html#apply) states:\r\n\r\n> Terraform also put some state into the `terraform.tfstate` file by default. This state file is extremely important; it maps various resource metadata to actual resource IDs so that Terraform knows what it is managing. This file must be saved and distributed to anyone who might run Terraform. We recommend simply putting it into version control, since it generally isn't too large.\r\n\r\nNow, on the other hand, the accepted and upvoted answer on https://stackoverflow.com/questions/33157516/best-practices-when-using-terraform states:\r\n\r\n> Terraform config can be used to provision many boxes on different infrastructure, each of which could have a different state. As it can also be run by multiple people this state should be in a centralised location (like S3) but *not* git.\r\n\r\n(Emphasis by the original author, not by me)\r\n\r\nWho is right, and if so, why?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "236656514", "PostHistoryTypeId": "6", "PostId": "38486335", "RevisionGUID": "753c45a4-4105-4cbc-b6b8-47fc3598561e", "CreationDate": "2020-12-10T16:56:53.180", "UserId": "213269", "Comment": "edited tags", "Text": "<git><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "38748987", "PostTypeId": "2", "ParentId": "38486335", "CreationDate": "2016-08-03T16:23:24.857", "Score": "100", "Body": "<p>There are a few reasons not to store your <code>.tfstate</code> files in Git:</p>\n<ol>\n<li>You are likely to forget to commit and push your changes after running <code>terraform apply</code>, so your teammates will have out-of-date <code>.tfstate</code> files. Also, without any locking on these state files, if two team members run Terraform at the same time on the same <code>.tfstate</code> files, you may overwrite each other's changes. You can solve both problems by both a) storing <code>.tfstate</code> files in an S3 bucket using <a href=\"https://www.terraform.io/docs/state/remote.html\" rel=\"noreferrer\">Terraform remote state</a>, which will push/pull the <code>.tfstate</code> files automatically every time you run <code>terraform apply</code> and b) using a tool like <a href=\"https://github.com/gruntwork-io/terragrunt\" rel=\"noreferrer\">terragrunt</a> to provide locking for your <code>.tfstate</code> files.</li>\n<li>The <code>.tfstate</code> files may contain secrets. For example, if you use the <a href=\"https://www.terraform.io/docs/providers/aws/r/db_instance.html\" rel=\"noreferrer\">aws_db_instance</a> resource, you have to specify a database password, and Terraform will store that, in plaintext, in the <code>.tfstate</code> file. This is a bad practice on Terraform's behalf to begin with and storing unencrypted secrets in version control only makes it worse. At least if you store <code>.tfstate</code> files in S3, you can enable encryption at rest (SSL provides encryption while in motion) and configure IAM policies to limit who has access. It's very far from ideal and we'll have to see if the see <a href=\"https://github.com/hashicorp/terraform/issues/516\" rel=\"noreferrer\">open issue discussing this problem</a> about it ever gets fixed.</li>\n</ol>\n<p>For more info, check out <a href=\"https://blog.gruntwork.io/how-to-manage-terraform-state-28f5697e68fa\" rel=\"noreferrer\">How to manage Terraform state</a> and <em><a href=\"http://www.terraformupandrunning.com/\" rel=\"noreferrer\">Terraform: Up &amp; Running</a></em>, both of which I wrote.</p>\n", "OwnerUserId": "483528", "LastEditorUserId": "7365866", "LastEditDate": "2022-08-19T13:38:06.620", "LastActivityDate": "2022-08-19T13:38:06.620", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "68625545", "PostId": "38748987", "Score": "11", "Text": "Here's another reason/way to look at this: consider TF+Git as software development using version control.\nIn that case, you wouldn't store your build artifacts (i.e. state files) in your VC repo, but instead in a central artifact repository (e.g. S3 bucket).", "CreationDate": "2016-11-19T21:34:37.640", "UserId": "389946", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "79910177", "PostId": "38748987", "Score": "4", "Text": "You don't need Terragrunt to provide locking anymore. It's now built into Terraform: https://www.terraform.io/docs/state/locking.html", "CreationDate": "2017-09-28T20:10:29.550", "UserId": "156787", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "97518898", "PostId": "38748987", "Score": "0", "Text": "I think it's fair to say that Terraform's `.tfstate` needs pessimistic locking, whereas Git provides optimistic locking.", "CreationDate": "2019-03-28T13:52:28.287", "UserId": "91590", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "124117357", "PostHistoryTypeId": "2", "PostId": "38748987", "RevisionGUID": "522e7343-17ea-43ca-a6fc-2563bb3cb4ca", "CreationDate": "2016-08-03T16:23:24.857", "UserId": "483528", "Text": "There are a few reasons not to store your `.tfstate` files in Git:\r\n\r\n1. You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. You can solve both problems by a) storing `.tfstate` files in an S3 bucket using [Terraform remote state](https://www.terraform.io/docs/state/remote/s3.html), which will push/pull the `.tfstate` files automatically every time you run `terraform apply` and b) using a tool like [terragrunt](https://github.com/gruntwork-io/terragrunt) to provide locking for your `.tfstate` files.\r\n1. The `.tfstate` files may contain secrets. For example, if you use the [aws_db_instance](https://www.terraform.io/docs/providers/aws/r/db_instance.html) resource, you have to specify a database password, and Terraform will store that, in plaintext, in the `.tfstate` file. This is a bad practice on Terraform's behalf to begin with and storing unencrypted secrets in version control only makes it worse. At least if you store `.tfstate` files in S3, you can enable encryption at rest (SSL provides encryption while in motion) and configure IAM policies to limit who has access. It's very far from ideal and we'll have to see if the see [open issue discussing this problem](https://github.com/hashicorp/terraform/issues/516) about it ever gets fixed.\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. ", "keywords": ["change"]}, {"source": "Text", "text": "Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. ", "keywords": ["change"]}]}, {"Id": "124119818", "PostHistoryTypeId": "5", "PostId": "38748987", "RevisionGUID": "3b6fad6d-7ffd-4edc-974d-e0cee86b1a83", "CreationDate": "2016-08-03T16:56:36.327", "UserId": "483528", "Comment": "added 108 characters in body", "Text": "There are a few reasons not to store your `.tfstate` files in Git:\r\n\r\n1. You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. You can solve both problems by a) storing `.tfstate` files in an S3 bucket using [Terraform remote state](https://www.terraform.io/docs/state/remote/s3.html), which will push/pull the `.tfstate` files automatically every time you run `terraform apply` and b) using a tool like [terragrunt](https://github.com/gruntwork-io/terragrunt) to provide locking for your `.tfstate` files.\r\n1. The `.tfstate` files may contain secrets. For example, if you use the [aws_db_instance](https://www.terraform.io/docs/providers/aws/r/db_instance.html) resource, you have to specify a database password, and Terraform will store that, in plaintext, in the `.tfstate` file. This is a bad practice on Terraform's behalf to begin with and storing unencrypted secrets in version control only makes it worse. At least if you store `.tfstate` files in S3, you can enable encryption at rest (SSL provides encryption while in motion) and configure IAM policies to limit who has access. It's very far from ideal and we'll have to see if the see [open issue discussing this problem](https://github.com/hashicorp/terraform/issues/516) about it ever gets fixed.\r\n\r\nSee [here](http://stackoverflow.com/a/38749508/483528) for a discussion of other Terraform best practices.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. ", "keywords": ["change"]}, {"source": "Text", "text": "Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. ", "keywords": ["change"]}]}, {"Id": "129194005", "PostHistoryTypeId": "5", "PostId": "38748987", "RevisionGUID": "aab1f22a-8f18-4207-b50a-401bac934ac8", "CreationDate": "2016-10-13T10:20:48.433", "UserId": "483528", "Comment": "added 21 characters in body", "Text": "There are a few reasons not to store your `.tfstate` files in Git:\r\n\r\n1. You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. You can solve both problems by a) storing `.tfstate` files in an S3 bucket using [Terraform remote state](https://www.terraform.io/docs/state/remote/s3.html), which will push/pull the `.tfstate` files automatically every time you run `terraform apply` and b) using a tool like [terragrunt](https://github.com/gruntwork-io/terragrunt) to provide locking for your `.tfstate` files.\r\n1. The `.tfstate` files may contain secrets. For example, if you use the [aws_db_instance](https://www.terraform.io/docs/providers/aws/r/db_instance.html) resource, you have to specify a database password, and Terraform will store that, in plaintext, in the `.tfstate` file. This is a bad practice on Terraform's behalf to begin with and storing unencrypted secrets in version control only makes it worse. At least if you store `.tfstate` files in S3, you can enable encryption at rest (SSL provides encryption while in motion) and configure IAM policies to limit who has access. It's very far from ideal and we'll have to see if the see [open issue discussing this problem](https://github.com/hashicorp/terraform/issues/516) about it ever gets fixed.\r\n\r\nFor more info, check out [How to manage Terraform state](https://blog.gruntwork.io/how-to-manage-terraform-state-28f5697e68fa).", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. ", "keywords": ["change"]}, {"source": "Text", "text": "Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. ", "keywords": ["change"]}]}, {"Id": "131810908", "PostHistoryTypeId": "5", "PostId": "38748987", "RevisionGUID": "fbaf6366-27e8-41c4-928c-12242ea97bf0", "CreationDate": "2016-11-17T18:05:10.913", "UserId": "483528", "Comment": "added 71 characters in body", "Text": "There are a few reasons not to store your `.tfstate` files in Git:\r\n\r\n1. You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. You can solve both problems by a) storing `.tfstate` files in an S3 bucket using [Terraform remote state](https://www.terraform.io/docs/state/remote/s3.html), which will push/pull the `.tfstate` files automatically every time you run `terraform apply` and b) using a tool like [terragrunt](https://github.com/gruntwork-io/terragrunt) to provide locking for your `.tfstate` files.\r\n1. The `.tfstate` files may contain secrets. For example, if you use the [aws_db_instance](https://www.terraform.io/docs/providers/aws/r/db_instance.html) resource, you have to specify a database password, and Terraform will store that, in plaintext, in the `.tfstate` file. This is a bad practice on Terraform's behalf to begin with and storing unencrypted secrets in version control only makes it worse. At least if you store `.tfstate` files in S3, you can enable encryption at rest (SSL provides encryption while in motion) and configure IAM policies to limit who has access. It's very far from ideal and we'll have to see if the see [open issue discussing this problem](https://github.com/hashicorp/terraform/issues/516) about it ever gets fixed.\r\n\r\nFor more info, check out [How to manage Terraform state](https://blog.gruntwork.io/how-to-manage-terraform-state-28f5697e68fa) and *[Terraform: Up & Running](http://www.terraformupandrunning.com/)*.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. ", "keywords": ["change"]}, {"source": "Text", "text": "Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. ", "keywords": ["change"]}]}, {"Id": "165502034", "PostHistoryTypeId": "5", "PostId": "38748987", "RevisionGUID": "f60ceab4-5ba5-407e-82bf-768a9c89461e", "CreationDate": "2018-01-26T09:53:44.863", "UserId": "7323141", "Comment": "Fixed dead link to Terraform's \"Remote State\" docs. (+ added word to appease SO's edit requirements)", "Text": "There are a few reasons not to store your `.tfstate` files in Git:\r\n\r\n1. You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. You can solve both problems by both a) storing `.tfstate` files in an S3 bucket using [Terraform remote state](https://www.terraform.io/docs/state/remote.html), which will push/pull the `.tfstate` files automatically every time you run `terraform apply` and b) using a tool like [terragrunt](https://github.com/gruntwork-io/terragrunt) to provide locking for your `.tfstate` files.\r\n1. The `.tfstate` files may contain secrets. For example, if you use the [aws_db_instance](https://www.terraform.io/docs/providers/aws/r/db_instance.html) resource, you have to specify a database password, and Terraform will store that, in plaintext, in the `.tfstate` file. This is a bad practice on Terraform's behalf to begin with and storing unencrypted secrets in version control only makes it worse. At least if you store `.tfstate` files in S3, you can enable encryption at rest (SSL provides encryption while in motion) and configure IAM policies to limit who has access. It's very far from ideal and we'll have to see if the see [open issue discussing this problem](https://github.com/hashicorp/terraform/issues/516) about it ever gets fixed.\r\n\r\nFor more info, check out [How to manage Terraform state](https://blog.gruntwork.io/how-to-manage-terraform-state-28f5697e68fa) and *[Terraform: Up & Running](http://www.terraformupandrunning.com/)*.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. ", "keywords": ["change"]}, {"source": "Text", "text": "Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. ", "keywords": ["change"]}]}, {"Id": "165502035", "PostHistoryTypeId": "24", "PostId": "38748987", "RevisionGUID": "f60ceab4-5ba5-407e-82bf-768a9c89461e", "CreationDate": "2018-01-26T09:53:44.863", "Comment": "Proposed by 7323141 approved by 2335675, 557419 edit id of 3530104", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "276573009", "PostHistoryTypeId": "5", "PostId": "38748987", "RevisionGUID": "36bb778e-5ade-45bf-bff7-a01c31116f0e", "CreationDate": "2022-08-19T13:38:06.620", "UserId": "7365866", "Comment": "add disclosure", "Text": "There are a few reasons not to store your `.tfstate` files in Git:\r\n\r\n1. You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. You can solve both problems by both a) storing `.tfstate` files in an S3 bucket using [Terraform remote state](https://www.terraform.io/docs/state/remote.html), which will push/pull the `.tfstate` files automatically every time you run `terraform apply` and b) using a tool like [terragrunt](https://github.com/gruntwork-io/terragrunt) to provide locking for your `.tfstate` files.\r\n1. The `.tfstate` files may contain secrets. For example, if you use the [aws_db_instance](https://www.terraform.io/docs/providers/aws/r/db_instance.html) resource, you have to specify a database password, and Terraform will store that, in plaintext, in the `.tfstate` file. This is a bad practice on Terraform's behalf to begin with and storing unencrypted secrets in version control only makes it worse. At least if you store `.tfstate` files in S3, you can enable encryption at rest (SSL provides encryption while in motion) and configure IAM policies to limit who has access. It's very far from ideal and we'll have to see if the see [open issue discussing this problem](https://github.com/hashicorp/terraform/issues/516) about it ever gets fixed.\r\n\r\nFor more info, check out [How to manage Terraform state](https://blog.gruntwork.io/how-to-manage-terraform-state-28f5697e68fa) and *[Terraform: Up & Running](http://www.terraformupandrunning.com/)*, both of which I wrote.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You are likely to forget to commit and push your changes after running `terraform apply`, so your teammates will have out-of-date `.tfstate` files. ", "keywords": ["change"]}, {"source": "Text", "text": "Also, without any locking on these state files, if two team members run Terraform at the same time on the same `.tfstate` files, you may overwrite each other's changes. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "You are likely to forget to commit and push your changes after running terraform apply, so your teammates will have out-of-date .tfstate files. ", "keywords": ["change"]}, {"source": "Body", "text": "Also, without any locking on these state files, if two team members run Terraform at the same time on the same .tfstate files, you may overwrite each other's changes. ", "keywords": ["change"]}]}, {"Id": "38497110", "PostTypeId": "2", "ParentId": "38486335", "CreationDate": "2016-07-21T06:59:08.990", "Score": "11", "Body": "<p>This is probably going to come down to preference but I would say git (or any other source control) is not a particularly good option for storing of state files as they are an output of the code you are writing much like a compiled binary or even minimised JS or LESS compiled to CSS.</p>\n\n<p>On top of that things may change quite rapidly in the state files as an output to things being run rather than things being actually changed in the code which makes the whole thing rather awkward.</p>\n\n<p>However, you do need some way of sharing these state files with any remote team members or even other devices if you are developing on different laptops/machines. You will also want some way to store and back these up because you're going to have some real pain if you lose a state file as Terraform uses the state files to work out what things it's managing so as not to step on the toes of other tooling.</p>\n\n<p>I'd say S3 is probably the best place you can put them right now. It's pretty much free, durability is excellent as is availability, there's very good native support for it in Terraform using the <a href=\"https://www.terraform.io/docs/state/remote/s3.html\" rel=\"noreferrer\">remote state</a> resource. And probably most importantly you only have to create an S3 bucket to get started. Having to build a <a href=\"https://www.consul.io/\" rel=\"noreferrer\">Consul</a> or <a href=\"https://coreos.com/etcd/\" rel=\"noreferrer\">etcd</a> cluster first without Terraform (otherwise you have a chicken and egg problem of where do you store the state for creating those?) is a bit of a pain even if you intend to use either of those products.</p>\n\n<p>Obviously if you're using OpenStack then <a href=\"http://docs.openstack.org/developer/swift/\" rel=\"noreferrer\">Swift</a> should make a good alternative (although I've not used it). I've also not used Hashicorp's <a href=\"https://www.hashicorp.com/atlas.html\" rel=\"noreferrer\">Atlas</a> but if you're happy to pay for that service it might be equally useful.</p>\n", "OwnerUserId": "2291321", "LastActivityDate": "2016-07-21T06:59:08.990", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "123120185", "PostHistoryTypeId": "2", "PostId": "38497110", "RevisionGUID": "4d27606a-d699-4ec9-b06c-732a7bda8b84", "CreationDate": "2016-07-21T06:59:08.990", "UserId": "2291321", "Text": "This is probably going to come down to preference but I would say git (or any other source control) is not a particularly good option for storing of state files as they are an output of the code you are writing much like a compiled binary or even minimised JS or LESS compiled to CSS.\r\n\r\nOn top of that things may change quite rapidly in the state files as an output to things being run rather than things being actually changed in the code which makes the whole thing rather awkward.\r\n\r\nHowever, you do need some way of sharing these state files with any remote team members or even other devices if you are developing on different laptops/machines. You will also want some way to store and back these up because you're going to have some real pain if you lose a state file as Terraform uses the state files to work out what things it's managing so as not to step on the toes of other tooling.\r\n\r\nI'd say S3 is probably the best place you can put them right now. It's pretty much free, durability is excellent as is availability, there's very good native support for it in Terraform using the [remote state][1] resource. And probably most importantly you only have to create an S3 bucket to get started. Having to build a [Consul][2] or [etcd][3] cluster first without Terraform (otherwise you have a chicken and egg problem of where do you store the state for creating those?) is a bit of a pain even if you intend to use either of those products.\r\n\r\nObviously if you're using OpenStack then [Swift][4] should make a good alternative (although I've not used it). I've also not used Hashicorp's [Atlas][5] but if you're happy to pay for that service it might be equally useful.\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/state/remote/s3.html\r\n  [2]: https://www.consul.io/\r\n  [3]: https://coreos.com/etcd/\r\n  [4]: http://docs.openstack.org/developer/swift/\r\n  [5]: https://www.hashicorp.com/atlas.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "On top of that things may change quite rapidly in the state files as an output to things being run rather than things being actually changed in the code which makes the whole thing rather awkward. ", "keywords": ["change"]}, {"source": "Text", "text": "Having to build a [Consul][2] or [etcd][3] cluster first without Terraform (otherwise you have a chicken and egg problem of where do you store the state for creating those?) is a bit of a pain even if you intend to use either of those products. ", "keywords": ["cluster"]}, {"source": "Text", "text": "I've also not used Hashicorp's [Atlas][5] but if you're happy to pay for that service it might be equally useful. [1]: https://www.terraform.io/docs/state/remote/s3.html [2]: https://www.consul.io/ [3]: https://coreos.com/etcd/ [4]: http://docs.openstack.org/developer/swift/ [5]: https://www.hashicorp.com/atlas.html", "keywords": ["pay"]}]}], "filtered-sentences": [{"source": "Body", "text": "On top of that things may change quite rapidly in the state files as an output to things being run rather than things being actually changed in the code which makes the whole thing rather awkward. ", "keywords": ["change"]}, {"source": "Body", "text": "Having to build a Consul or etcd cluster first without Terraform (otherwise you have a chicken and egg problem of where do you store the state for creating those?) is a bit of a pain even if you intend to use either of those products. ", "keywords": ["cluster"]}, {"source": "Body", "text": "I've also not used Hashicorp's Atlas but if you're happy to pay for that service it might be equally useful.", "keywords": ["pay"]}]}, {"Id": "49489164", "PostTypeId": "2", "ParentId": "38486335", "CreationDate": "2018-03-26T10:23:16.440", "Score": "3", "Body": "<p>I see an advantage to share <strong>terraform.tfstate</strong> via other means, rather than Git.</p>\n\n<p>For example: S3, Dropbox, etc.. (with versioning turned on)</p>\n\n<p>Then it will be possible to roll back to previous infrastructure state.</p>\n\n<p>For example, you roll back repository from commit B, back to commit A. If <strong>terraform.tfstate</strong> is unchanged - terraform will think how to roll back all stuff you've added during commit B. And rollback will be easy.</p>\n\n<p>In case <strong>terraform.tfstate</strong> was also rolled back to commit A - then terraform will think that <strong>terraform.tfstate</strong> is in sync with required configuration and will not apply the rollback to your infrastructure.</p>\n", "OwnerUserId": "6699227", "LastEditorUserId": "2066657", "LastEditDate": "2019-06-23T17:16:27.587", "LastActivityDate": "2019-06-23T17:16:27.587", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "134879050", "PostId": "49489164", "Score": "0", "Text": "This comment is underrated. If there is one good reason not to commit `terraform.tfstate`, this is this one because it is based on a technical reasoning and not on a policy of the team that thinks \"It's better like this\" just because they decided that it was. Thanks for your answer.", "CreationDate": "2023-06-17T14:17:36.387", "UserId": "4216654", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "If there is one good reason not to commit `terraform.tfstate`, this is this one because it is based on a technical reasoning and not on a policy of the team that thinks \"It's better like this\" just because they decided that it was. ", "keywords": ["policy"]}]}], "history": [{"Id": "169828308", "PostHistoryTypeId": "2", "PostId": "49489164", "RevisionGUID": "5943b8e2-1b16-494a-af6c-54914413cad5", "CreationDate": "2018-03-26T10:23:16.440", "UserId": "6699227", "Text": "# I see an advantage to share **terraform.tfstate** via other means, rather then Git \r\nFor example S3, Dropbox, etc.. (with versioning turned on)\r\n\r\nThen it will be possible to do rollback to previous infrastructure state.\r\n\r\nFor example, you rollback repository from commit B, back to commit A. If **terraform.tfstate** is unchanged - terraform will think how to rollback all stuff you've added during commit B. And rollback will be easy.\r\n\r\nIn case **terraform.tfstate** was also rolled back to commit A - then terraform will think that **terraform.tfstate** is in sync with required configuration and will not apply the rollback to your infrastructure.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "169828366", "PostHistoryTypeId": "5", "PostId": "49489164", "RevisionGUID": "f5b2f8f7-4923-4ff9-bad4-1c92e71f5ce6", "CreationDate": "2018-03-26T10:24:45.283", "UserId": "2227743", "Comment": "edited body", "Text": "I see an advantage to share **terraform.tfstate** via other means, rather then Git.\r\n\r\nFor example S3, Dropbox, etc.. (with versioning turned on)\r\n\r\nThen it will be possible to do rollback to previous infrastructure state.\r\n\r\nFor example, you rollback repository from commit B, back to commit A. If **terraform.tfstate** is unchanged - terraform will think how to rollback all stuff you've added during commit B. And rollback will be easy.\r\n\r\nIn case **terraform.tfstate** was also rolled back to commit A - then terraform will think that **terraform.tfstate** is in sync with required configuration and will not apply the rollback to your infrastructure.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "200224238", "PostHistoryTypeId": "5", "PostId": "49489164", "RevisionGUID": "0870d8c5-6312-490c-8d8a-46033e94006a", "CreationDate": "2019-06-23T17:16:27.587", "UserId": "2066657", "Comment": "THAN.  And 'rollback' is not the same as 'roll back'.  ", "Text": "I see an advantage to share **terraform.tfstate** via other means, rather than Git.\r\n\r\nFor example: S3, Dropbox, etc.. (with versioning turned on)\r\n\r\nThen it will be possible to roll back to previous infrastructure state.\r\n\r\nFor example, you roll back repository from commit B, back to commit A. If **terraform.tfstate** is unchanged - terraform will think how to roll back all stuff you've added during commit B. And rollback will be easy.\r\n\r\nIn case **terraform.tfstate** was also rolled back to commit A - then terraform will think that **terraform.tfstate** is in sync with required configuration and will not apply the rollback to your infrastructure.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "200224239", "PostHistoryTypeId": "24", "PostId": "49489164", "RevisionGUID": "0870d8c5-6312-490c-8d8a-46033e94006a", "CreationDate": "2019-06-23T17:16:27.587", "Comment": "Proposed by 2066657 approved by 5754, 7313844 edit id of 4347902", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "41482391", "PostTypeId": "2", "ParentId": "38486335", "CreationDate": "2017-01-05T10:18:59.413", "Score": "73", "Body": "<p><strong>TL;DR:</strong></p>\n\n<p><strong><em>Important!</strong> Storing in source control could expose <a href=\"https://www.terraform.io/docs/state/sensitive-data.html\" rel=\"noreferrer\">potentially sensitive data</a> and risks running Terraform against an old version of state. Don't do it.</em></p>\n\n<p>Terraform no longer recommends storing state in source control. Your 'good' options are remote or local.</p>\n\n<p>Remote state grants significant benefits vs both local and storing in source control. Details of these are below.</p>\n\n<hr>\n\n<p><strong>Original answer:</strong></p>\n\n<p>Yevgeniy's answer is a good one. The issue is somewhat less controversial now as Terraform have updated their docs to state:</p>\n\n<blockquote>\n  <p>Terraform also puts some state into the terraform.tfstate file by\n  default. This state file is extremely important; it maps various\n  resource metadata to actual resource IDs so that Terraform knows what\n  it is managing. This file must be saved and distributed to anyone who\n  might run Terraform. It is generally recommended to setup remote state\n  when working with Terraform. <strong>This will mean that any potential secrets\n  stored in the state file, will not be checked into version control</strong></p>\n</blockquote>\n\n<p>So there is no longer a disagreement between established best practice and official recommendations.</p>\n\n<hr>\n\n<p><strong>Update 2019-05-17</strong></p>\n\n<p>In <a href=\"https://www.terraform.io/docs/state/index.html\" rel=\"noreferrer\">the most recent version of the docs</a> this has been changed to say:</p>\n\n<blockquote>\n  <p>... This state is stored by default in a local file named\n  \"terraform.tfstate\", but it can also be stored remotely, which works\n  better in a team environment. ...</p>\n</blockquote>\n\n<p>I don't expect the advice will ever revert to source control being the preferred method of storing state. </p>\n\n<p>Despite the docs quote above <strong>remote state is still beneficial as a solo developer</strong></p>\n\n<p>Remote state allows the solo developer to:</p>\n\n<ul>\n<li>Work on/run their Terraform code from several devices</li>\n<li>Easily backup and protect against losing the state file, depending on backend chosen</li>\n<li>Segregate sections of their architecture via <a href=\"https://www.terraform.io/docs/state/remote.html#delegation-and-teamwork\" rel=\"noreferrer\">outputs</a></li>\n<li><a href=\"https://www.terraform.io/docs/state/sensitive-data.html#recommendations\" rel=\"noreferrer\">Automatically encrypt state file at rest</a>, depending on backend chosen</li>\n</ul>\n", "OwnerUserId": "1675774", "LastEditorUserId": "1675774", "LastEditDate": "2019-05-17T09:13:14.273", "LastActivityDate": "2019-05-17T09:13:14.273", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "98974295", "PostId": "41482391", "Score": "1", "Text": "I ended up utilizing an S3 backend to share and store state among different developers instead of committing it to the git repo. Thanks for this answer!", "CreationDate": "2019-05-16T17:36:04.907", "UserId": "2466819", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "135278572", "PostHistoryTypeId": "2", "PostId": "41482391", "RevisionGUID": "50f25ef2-296a-430a-886b-6bb862a4e70a", "CreationDate": "2017-01-05T10:18:59.413", "UserId": "1675774", "Text": "Yevgeniy's answer is a good one. The issue is somewhat less controversial now as Terraform have updated their docs to state:\r\n\r\n> Terraform also puts some state into the terraform.tfstate file by\r\n> default. This state file is extremely important; it maps various\r\n> resource metadata to actual resource IDs so that Terraform knows what\r\n> it is managing. This file must be saved and distributed to anyone who\r\n> might run Terraform. It is generally recommended to setup remote state\r\n> when working with Terraform. This will mean that any potential secrets\r\n> stored in the state file, will not be checked into version control\r\n\r\nSo there is no longer a disagreement between established best practice and official recommendations.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "197917321", "PostHistoryTypeId": "5", "PostId": "41482391", "RevisionGUID": "0361c897-dc38-4817-9009-4e15abcd28c6", "CreationDate": "2019-05-17T09:13:14.273", "UserId": "1675774", "Comment": "Added emphasis to highlight the changed section of the docs. Added updated docs. Added answer summary. Added rundown of remote vs local state benefits and specific risks for source control storage.", "Text": "**TL;DR:**\r\n\r\n***Important!** Storing in source control could expose [potentially sensitive data][1] and risks running Terraform against an old version of state. Don't do it.*\r\n\r\nTerraform no longer recommends storing state in source control. Your 'good' options are remote or local.\r\n\r\nRemote state grants significant benefits vs both local and storing in source control. Details of these are below.\r\n\r\n---\r\n\r\n**Original answer:**\r\n\r\nYevgeniy's answer is a good one. The issue is somewhat less controversial now as Terraform have updated their docs to state:\r\n\r\n> Terraform also puts some state into the terraform.tfstate file by\r\n> default. This state file is extremely important; it maps various\r\n> resource metadata to actual resource IDs so that Terraform knows what\r\n> it is managing. This file must be saved and distributed to anyone who\r\n> might run Terraform. It is generally recommended to setup remote state\r\n> when working with Terraform. **This will mean that any potential secrets\r\n> stored in the state file, will not be checked into version control**\r\n\r\n\r\nSo there is no longer a disagreement between established best practice and official recommendations.\r\n\r\n---\r\n\r\n**Update 2019-05-17**\r\n\r\nIn [the most recent version of the docs][2] this has been changed to say:\r\n\r\n> ... This state is stored by default in a local file named\r\n> \"terraform.tfstate\", but it can also be stored remotely, which works\r\n> better in a team environment. ...\r\n\r\n\r\nI don't expect the advice will ever revert to source control being the preferred method of storing state. \r\n\r\nDespite the docs quote above **remote state is still beneficial as a solo developer**\r\n\r\nRemote state allows the solo developer to:\r\n\r\n - Work on/run their Terraform code from several devices\r\n - Easily backup and protect against losing the state file, depending on backend chosen\r\n - Segregate sections of their architecture via [outputs][3]\r\n - [Automatically encrypt state file at rest][4], depending on backend chosen\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/state/sensitive-data.html\r\n  [2]: https://www.terraform.io/docs/state/index.html\r\n  [3]: https://www.terraform.io/docs/state/remote.html#delegation-and-teamwork\r\n  [4]: https://www.terraform.io/docs/state/sensitive-data.html#recommendations", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "In [the most recent version of the docs][2] this has been changed to say: > ... ", "keywords": ["change"]}, {"source": "Comment", "text": "Added emphasis to highlight the changed section of the docs. ", "keywords": ["change"]}, {"source": "Comment", "text": "Added rundown of remote vs local state benefits and specific risks for source control storage.", "keywords": ["storage"]}]}], "filtered-sentences": [{"source": "Body", "text": "In the most recent version of the docs this has been changed to say: ... ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": []}