{"Id": "41780995", "PostTypeId": "1", "CreationDate": "2017-01-21T15:17:49.857", "Score": "0", "ViewCount": "182", "Body": "<p>Let's say I've got a flashy CI and CD pipeline built using the tools I've mentioned in the question title. </p>\n\n<p>Let's also say that there are config files and other things which are parameterized with variables in all of those systems. Variables that, in fact, sometimes need to match across them all. Hostnames, ports, connection strings etc...</p>\n\n<p>How can I, or what tools are available, to keep those variables in a single place or at the very least, make sure they stay in sync with each other when they need to?</p>\n\n<p>My best thinking so far is to write some automated tests but since the variables are generally stored in the systems themselves, that feels a bit clunky. I could store the variables in more config in source but then some of them are secure variables (production passwords etc..) and that would be a bit of a compromise too.</p>\n\n<p>There's a ton of these variables and I can see it becoming a real issue the more I head down this road.</p>\n\n<p>Has anyone solved this yet?</p>\n", "OwnerUserId": "5559", "LastActivityDate": "2017-01-22T21:09:16.810", "Title": "What is a good solution for keeping variables in sync - Terraform, Chef, Jenkins, Octopus Deploy", "Tags": "<jenkins><continuous-integration><chef-infra><octopus-deploy><terraform>", "AnswerCount": "1", "CommentCount": "3", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "70775524", "PostId": "41780995", "Score": "0", "Text": "Is your configuration decoupled from your software? Or are you baking configuration directly into your binaries without the ability to change them later in the CI/CD pipeline?", "CreationDate": "2017-01-22T16:58:57.303", "UserId": "4360457", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Or are you baking configuration directly into your binaries without the ability to change them later in the CI/CD pipeline?", "keywords": ["change"]}]}, {"Id": "70781336", "PostId": "41780995", "Score": "0", "Text": "The config is tokenised in config files.", "CreationDate": "2017-01-22T21:54:24.067", "UserId": "5559", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "70873063", "PostId": "41780995", "Score": "0", "Text": "This sounds like a good use case for something like Consul - https://www.consul.io/.  You could solve both your \"sync\" issue and also the storage of secure variables.", "CreationDate": "2017-01-25T05:49:16.043", "UserId": "472798", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You could solve both your \"sync\" issue and also the storage of secure variables.", "keywords": ["storage"]}]}], "history": [{"Id": "136517617", "PostHistoryTypeId": "2", "PostId": "41780995", "RevisionGUID": "045dae39-053d-454e-a19f-a342c7ad8e7e", "CreationDate": "2017-01-21T15:17:49.857", "UserId": "5559", "Text": "Let's say I've got a flashy CI and CD pipeline built using the tools I've mentioned in the question title. \r\n\r\nLet's also say that there are config files and other things which are parameterized with variables in all of those systems. Variables that, in fact, sometimes need to match across them all. Hostnames, ports, connection strings etc...\r\n\r\nHow can I, or what tools are available, to keep those variables in a single place or at the very least, make sure they stay in sync with each other when they need to?\r\n\r\nMy best thinking so far is to write some automated tests but since the variables are generally stored in the systems themselves, that feels a bit clunky. I could store the variables in more config in source but then some of them are secure variables (production passwords etc..) and that would be a bit of a compromise too.\r\n\r\nThere's a ton of these variables and I can see it becoming a real issue the more I head down this road.\r\n\r\nHas anyone solved this yet?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "My best thinking so far is to write some automated tests but since the variables are generally stored in the systems themselves, that feels a bit clunky. ", "keywords": ["test"]}]}, {"Id": "136517618", "PostHistoryTypeId": "1", "PostId": "41780995", "RevisionGUID": "045dae39-053d-454e-a19f-a342c7ad8e7e", "CreationDate": "2017-01-21T15:17:49.857", "UserId": "5559", "Text": "What is a good solution for keeping variables in sync - Terraform, Chef, Jenkins, Octopus Deploy", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "136517619", "PostHistoryTypeId": "3", "PostId": "41780995", "RevisionGUID": "045dae39-053d-454e-a19f-a342c7ad8e7e", "CreationDate": "2017-01-21T15:17:49.857", "UserId": "5559", "Text": "<jenkins><continuous-integration><chef-infra><octopus-deploy><terraform>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "41796187", "PostTypeId": "2", "ParentId": "41780995", "CreationDate": "2017-01-22T21:09:16.810", "Score": "4", "Body": "<p>Your configuration management system (Chef), should be in charge of plumbing all of the variables to your CI system. Terraform state, and other databases will have to be persisted separately, but your CM system should be informing the other tools \"where the database for the current job lives\".</p>\n\n<p>There are a lot of different and reasonable ways to validate variables at different layers- Chef's <a href=\"https://docs.chef.io/policyfile.html\" rel=\"nofollow noreferrer\">Policyfile</a> stuff tries to move it to a build-time thing, for instance- but the most important thing you can do is try and minimize differences between environments. Lots of people start out with a clean series of deployment stages, and then three years later each one is so wild, woolly and weird that the stages have lost most of their utility. Being a consistent advocate for \"everything is the same everywhere, even though it's harder and more expensive\" is a vital political job.</p>\n", "OwnerUserId": "550866", "LastActivityDate": "2017-01-22T21:09:16.810", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "136589466", "PostHistoryTypeId": "2", "PostId": "41796187", "RevisionGUID": "484677bc-ab41-4b20-bd6a-cacf9cab4d66", "CreationDate": "2017-01-22T21:09:16.810", "UserId": "550866", "Text": "Your configuration management system (Chef), should be in charge of plumbing all of the variables to your CI system. Terraform state, and other databases will have to be persisted separately, but your CM system should be informing the other tools \"where the database for the current job lives\".\r\n\r\nThere are a lot of different and reasonable ways to validate variables at different layers- Chef's [Policyfile](https://docs.chef.io/policyfile.html) stuff tries to move it to a build-time thing, for instance- but the most important thing you can do is try and minimize differences between environments. Lots of people start out with a clean series of deployment stages, and then three years later each one is so wild, woolly and weird that the stages have lost most of their utility. Being a consistent advocate for \"everything is the same everywhere, even though it's harder and more expensive\" is a vital political job.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "There are a lot of different and reasonable ways to validate variables at different layers- Chef's [Policyfile](https://docs.chef.io/policyfile.html) stuff tries to move it to a build-time thing, for instance- but the most important thing you can do is try and minimize differences between environments. ", "keywords": ["instance"]}, {"source": "Text", "text": "Being a consistent advocate for \"everything is the same everywhere, even though it's harder and more expensive\" is a vital political job.", "keywords": ["expense"]}]}], "filtered-sentences": [{"source": "Body", "text": "There are a lot of different and reasonable ways to validate variables at different layers- Chef's Policyfile stuff tries to move it to a build-time thing, for instance- but the most important thing you can do is try and minimize differences between environments. ", "keywords": ["instance"]}, {"source": "Body", "text": "Being a consistent advocate for \"everything is the same everywhere, even though it's harder and more expensive\" is a vital political job.", "keywords": ["expense"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "My best thinking so far is to write some automated tests but since the variables are generally stored in the systems themselves, that feels a bit clunky. ", "keywords": ["test"]}]}