{"Id": "71012986", "PostTypeId": "1", "AcceptedAnswerId": "71015073", "CreationDate": "2022-02-07T02:51:26.150", "Score": "0", "ViewCount": "426", "Body": "<p>I have a request to setup budget alert on our resource groups located in different subscriptions.  I am  trying to decide if it make sense to do it thru PowerShell or Terraform to automate this process.  My thinking is that management would update a .csv file quarterly with the budget amount and alert threshold for each of the RGs they want to set alerts form.  The .csv will have the following fields/columns:</p>\n<blockquote>\n<p>SubscriptionName, SubscriptionId, ResourcegGropu, StartDate,\nEndDate,TimeGrain,ContactEmails,Contact,BudgetAmount,budgetName,\nalertLevels</p>\n</blockquote>\n<p>Any suggests?  Thanks</p>\n", "OwnerUserId": "5982308", "LastActivityDate": "2022-02-07T07:54:14.590", "Title": "Azure Cost Management - Budget Alert Script", "Tags": "<azure><azure-devops><terraform-provider-azure><azure-cost-calculation>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "263563395", "PostHistoryTypeId": "2", "PostId": "71012986", "RevisionGUID": "70e970d4-3d90-4723-8812-327da818248b", "CreationDate": "2022-02-07T02:51:26.150", "UserId": "5982308", "Text": "I have a request to setup budget alert on our resource groups located in different subscriptions.  I am  trying to decide if it make sense to do it thru PowerShell or Terraform to automate this process.  My thinking is that management would update a .csv file quarterly with the budget amount and alert threshold for each of the RGs they want to set alerts form.  The .csv will have the following fields/columns:\r\n\r\n> SubscriptionName, SubscriptionId, ResourcegGropu, StartDate,\r\n> EndDate,TimeGrain,ContactEmails,Contact,BudgetAmount,budgetName,\r\n> alertLevels\r\n\r\nAny suggests?  Thanks\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "263563397", "PostHistoryTypeId": "1", "PostId": "71012986", "RevisionGUID": "70e970d4-3d90-4723-8812-327da818248b", "CreationDate": "2022-02-07T02:51:26.150", "UserId": "5982308", "Text": "Azure Cost Management - Budget Alert Script", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Azure Cost Management - Budget Alert Script", "keywords": ["cost"]}]}, {"Id": "263563398", "PostHistoryTypeId": "3", "PostId": "71012986", "RevisionGUID": "70e970d4-3d90-4723-8812-327da818248b", "CreationDate": "2022-02-07T02:51:26.150", "UserId": "5982308", "Text": "<azure><azure-devops><terraform-provider-azure><azure-cost-calculation>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "71015073", "PostTypeId": "2", "ParentId": "71012986", "CreationDate": "2022-02-07T07:54:14.590", "Score": "0", "Body": "<p><em><strong>Using Terraform to perform the same operation on different Subscriptions will be difficult as <code>for_each</code> is not supported in provider blocks as shown in below image , so you will have to manually set up the provider blocks for all the subscriptions.</strong></em></p>\n<pre><code>locals{\n    budget=csvdecode(file(&quot;C:/Users/xxxxx/terraform/budgetalert/Budget.csv&quot;))\n}\nprovider &quot;azurerm&quot;{\n    for_each ={ for i , user in local.budget : i =&gt; budget }\n    features{}\n    subscription_id = each.value.SubscriptionId\n    alias = each.value.SubscriptionName\n}\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/8mWeb.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/8mWeb.png\" alt=\"enter image description here\" /></a></p>\n<p><em><strong>As a solution to do this from terraform you can create different .csv files for different subscriptions and call them in different resource provider blocks like below :</strong></em></p>\n<pre><code>provider &quot;azurerm&quot;{\n    features {}\n    subscription_id = &quot;b83-----xxxxxxxxxxx-xxxx-xxxxx----23f&quot;\n}\nprovider &quot;azurerm&quot; {\n    features {}\n  subscription_id = &quot;948--------x--xxxxxxxxxxxxx-xxxxxxx-59b&quot;\n  alias = &quot;Subscription2&quot;\n}\n\nlocals{\n    budgetsub1=csvdecode(file(&quot;C:/Users/xxxx/terraform/budgetalert/Budget.csv&quot;))\n    budgetsub2=csvdecode(file(&quot;C:/Users/xxxx/terraform/budgetalert/budgetsub2.csv&quot;))\n}\noutput &quot;local&quot; {\n  value=local.budgetsub1\n}\noutput &quot;local1&quot; {\n  value = local.budgetsub2\n}\n\ndata &quot;azurerm_resource_group&quot; &quot;rg_subscription1&quot;{\n    for_each = { for i , budget in local.budgetsub1 : i =&gt; budget }\n    name= each.value.ResourceGroup\n}\ndata &quot;azurerm_resource_group&quot; &quot;rg_subscription2&quot;{\n    provider = azurerm.Subscription2\n    for_each = { for i , budget in local.budgetsub2 : i =&gt; budget }\n    name= each.value.ResourceGroup\n}\n\nresource &quot;azurerm_consumption_budget_resource_group&quot; &quot;rg_budget_subscription1&quot; {\n    for_each = { for i , budget in local.budgetsub1 : i =&gt; budget }\n  name       = each.value.budgetName\n  amount     = each.value.BudgetAmount\n  time_grain = each.value.TimeGrain\n  time_period {\n    start_date = each.value.StartDate\n    end_date  = each.value.EndDate\n  }\n  resource_group_id = data.azurerm_resource_group.rg_subscription1[each.key].id\n  notification {\n      enabled = true\n    threshold      = 80\n    operator       = &quot;GreaterThanOrEqualTo&quot;\n    contact_emails = [&quot;${each.value.ContactEmails}&quot;]\n  }\n  lifecycle {\n    ignore_changes = [\n      time_period\n    ]\n  }\n}\nresource &quot;azurerm_consumption_budget_resource_group&quot; &quot;rg_budget_subscription2&quot; {\n    provider = azurerm.Subscription2\n    for_each = { for i , budget in local.budgetsub2 : i =&gt; budget }\n  name       = each.value.budgetName\n  amount     = each.value.BudgetAmount\n  time_grain = each.value.TimeGrain\n  time_period {\n    start_date = each.value.StartDate\n    end_date  = each.value.EndDate\n  }\n  resource_group_id = data.azurerm_resource_group.rg_subscription2[each.key].id\n  notification {\n      enabled = true\n    threshold      = 80\n    operator       = &quot;GreaterThanOrEqualTo&quot;\n    contact_emails = [&quot;${each.value.ContactEmails}&quot;]\n  }\n  lifecycle {\n    ignore_changes = [\n      time_period\n    ]\n  }\n}\n</code></pre>\n<p><strong>Output:</strong></p>\n<p><a href=\"https://i.stack.imgur.com/Amey4.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Amey4.png\" alt=\"enter image description here\" /></a></p>\n<p><a href=\"https://i.stack.imgur.com/rXUAC.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/rXUAC.png\" alt=\"enter image description here\" /></a>\n<a href=\"https://i.stack.imgur.com/GySzm.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/GySzm.png\" alt=\"enter image description here\" /></a></p>\n", "OwnerUserId": "15969299", "LastActivityDate": "2022-02-07T07:54:14.590", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "125549742", "PostId": "71015073", "Score": "0", "Text": "Hey Ansuman, thanks for the comments and the demo code.  Really appreciate.  Ya the switch of the subscriptions in TF was one of the concerns I have and glad you provided a workaround.  I will test it out and get back to you.", "CreationDate": "2022-02-07T16:32:49.050", "UserId": "5982308", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I will test it out and get back to you.", "keywords": ["test"]}]}, {"Id": "125559607", "PostId": "71015073", "Score": "0", "Text": "Hey Ansuman, your suggestion works as expected... but is is complaining about alert level: \n\nSubscriptionName,SubscriptionId,ResourceGroup,StartDate,EndDate,TimeGrain,ContactEmails,BudgetAmount,BudgetName,AlertLevels My Subscription,948---59b,RG1,2022-02-01,2022-12-31,Monthly,myemail1@contoso.com;myemail2@contoso.com,150,MyBudgetQA,75;85;95 As you can see, both fields contain multiple values separated by \";\". \n\nIt t is saying that it needs a number. Suggestions?", "CreationDate": "2022-02-08T00:52:13.813", "UserId": "5982308", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "125560901", "PostId": "71015073", "Score": "0", "Text": "Can you please post the complete error message to the post as well ..", "CreationDate": "2022-02-08T02:47:20.267", "UserId": "15969299", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "125577335", "PostId": "71015073", "Score": "0", "Text": "Sorry... here's the error message.  I think it is because each alert level is one separate entry.\n\nError: Incorrect attribute value type\n\u2502 \n\u2502   on AssignBudgetToRG.tf line 48, in resource \"azurerm_consumption_budget_resource_group\" \"rg_budget_subscription_dev\":\n\u2502   48:         threshold      = each.value.AlertLevels\n\u2502     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2502     \u2502 each.value.AlertLevels is \"50;75;95\"\n\u2502 \n\u2502 Inappropriate value for attribute \"threshold\": a number is required.", "CreationDate": "2022-02-08T16:19:10.520", "UserId": "5982308", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "125579687", "PostId": "71015073", "Score": "0", "Text": "@UltraGC, Yes so alert level can be one only like either 50 or 75 or 95 not all..if you want dynamic configuration for setting multiple alert levels then you can use dynamic block for notification again .", "CreationDate": "2022-02-08T17:46:24.640", "UserId": "15969299", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "263574300", "PostHistoryTypeId": "2", "PostId": "71015073", "RevisionGUID": "1736b6b2-f429-4144-a556-d5124f6934fd", "CreationDate": "2022-02-07T07:54:14.590", "UserId": "15969299", "Text": "***Using Terraform to perform the same operation on different Subscriptions will be difficult as `for_each` is not supported in provider blocks as shown in below image , so you will have to manually set up the provider blocks for all the subscriptions.*** \r\n\r\n    locals{\r\n        budget=csvdecode(file(\"C:/Users/xxxxx/terraform/budgetalert/Budget.csv\"))\r\n    }\r\n    provider \"azurerm\"{\r\n        for_each ={ for i , user in local.budget : i => budget }\r\n        features{}\r\n        subscription_id = each.value.SubscriptionId\r\n        alias = each.value.SubscriptionName\r\n    }\r\n\r\n[![enter image description here][1]][1]\r\n\r\n***As a solution to do this from terraform you can create different .csv files for different subscriptions and call them in different resource provider blocks like below :*** \r\n\r\n    provider \"azurerm\"{\r\n        features {}\r\n        subscription_id = \"b83-----xxxxxxxxxxx-xxxx-xxxxx----23f\"\r\n    }\r\n    provider \"azurerm\" {\r\n        features {}\r\n      subscription_id = \"948--------x--xxxxxxxxxxxxx-xxxxxxx-59b\"\r\n      alias = \"Subscription2\"\r\n    }\r\n    \r\n    locals{\r\n        budgetsub1=csvdecode(file(\"C:/Users/xxxx/terraform/budgetalert/Budget.csv\"))\r\n        budgetsub2=csvdecode(file(\"C:/Users/xxxx/terraform/budgetalert/budgetsub2.csv\"))\r\n    }\r\n    output \"local\" {\r\n      value=local.budgetsub1\r\n    }\r\n    output \"local1\" {\r\n      value = local.budgetsub2\r\n    }\r\n    \r\n    data \"azurerm_resource_group\" \"rg_subscription1\"{\r\n        for_each = { for i , budget in local.budgetsub1 : i => budget }\r\n        name= each.value.ResourceGroup\r\n    }\r\n    data \"azurerm_resource_group\" \"rg_subscription2\"{\r\n        provider = azurerm.Subscription2\r\n        for_each = { for i , budget in local.budgetsub2 : i => budget }\r\n        name= each.value.ResourceGroup\r\n    }\r\n    \r\n    resource \"azurerm_consumption_budget_resource_group\" \"rg_budget_subscription1\" {\r\n        for_each = { for i , budget in local.budgetsub1 : i => budget }\r\n      name       = each.value.budgetName\r\n      amount     = each.value.BudgetAmount\r\n      time_grain = each.value.TimeGrain\r\n      time_period {\r\n        start_date = each.value.StartDate\r\n        end_date  = each.value.EndDate\r\n      }\r\n      resource_group_id = data.azurerm_resource_group.rg_subscription1[each.key].id\r\n      notification {\r\n          enabled = true\r\n        threshold      = 80\r\n        operator       = \"GreaterThanOrEqualTo\"\r\n        contact_emails = [\"${each.value.ContactEmails}\"]\r\n      }\r\n      lifecycle {\r\n        ignore_changes = [\r\n          time_period\r\n        ]\r\n      }\r\n    }\r\n    resource \"azurerm_consumption_budget_resource_group\" \"rg_budget_subscription2\" {\r\n        provider = azurerm.Subscription2\r\n        for_each = { for i , budget in local.budgetsub2 : i => budget }\r\n      name       = each.value.budgetName\r\n      amount     = each.value.BudgetAmount\r\n      time_grain = each.value.TimeGrain\r\n      time_period {\r\n        start_date = each.value.StartDate\r\n        end_date  = each.value.EndDate\r\n      }\r\n      resource_group_id = data.azurerm_resource_group.rg_subscription2[each.key].id\r\n      notification {\r\n          enabled = true\r\n        threshold      = 80\r\n        operator       = \"GreaterThanOrEqualTo\"\r\n        contact_emails = [\"${each.value.ContactEmails}\"]\r\n      }\r\n      lifecycle {\r\n        ignore_changes = [\r\n          time_period\r\n        ]\r\n      }\r\n    }\r\n\r\n**Output:**\r\n\r\n[![enter image description here][2]][2]\r\n\r\n[![enter image description here][3]][3]\r\n[![enter image description here][4]][4]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/8mWeb.png\r\n  [2]: https://i.stack.imgur.com/Amey4.png\r\n  [3]: https://i.stack.imgur.com/rXUAC.png\r\n  [4]: https://i.stack.imgur.com/GySzm.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "***Using Terraform to perform the same operation on different Subscriptions will be difficult as `for_each` is not supported in provider blocks as shown in below image , so you will have to manually set up the provider blocks for all the subscriptions.*** locals{ budget=csvdecode(file(\"C:/Users/xxxxx/terraform/budgetalert/Budget.csv\")) } provider \"azurerm\"{ for_each ={ for i , user in local.budget : i => budget } features{} subscription_id = each.value.SubscriptionId alias = each.value.SubscriptionName } [![enter image description here][1]][1] ***As a solution to do this from terraform you can create different .csv files for different subscriptions and call them in different resource provider blocks like below :*** provider \"azurerm\"{ features {} subscription_id = \"b83-----xxxxxxxxxxx-xxxx-xxxxx----23f\" } provider \"azurerm\" { features {} subscription_id = \"948--------x--xxxxxxxxxxxxx-xxxxxxx-59b\" alias = \"Subscription2\" } locals{ budgetsub1=csvdecode(file(\"C:/Users/xxxx/terraform/budgetalert/Budget.csv\")) budgetsub2=csvdecode(file(\"C:/Users/xxxx/terraform/budgetalert/budgetsub2.csv\")) } output \"local\" { value=local.budgetsub1 } output \"local1\" { value = local.budgetsub2 } data \"azurerm_resource_group\" \"rg_subscription1\"{ for_each = { for i , budget in local.budgetsub1 : i => budget } name= each.value.ResourceGroup } data \"azurerm_resource_group\" \"rg_subscription2\"{ provider = azurerm.Subscription2 for_each = { for i , budget in local.budgetsub2 : i => budget } name= each.value.ResourceGroup } resource \"azurerm_consumption_budget_resource_group\" \"rg_budget_subscription1\" { for_each = { for i , budget in local.budgetsub1 : i => budget } name = each.value.budgetName amount = each.value.BudgetAmount time_grain = each.value.TimeGrain time_period { start_date = each.value.StartDate end_date = each.value.EndDate } resource_group_id = data.azurerm_resource_group.rg_subscription1[each.key].id notification { enabled = true threshold = 80 operator = \"GreaterThanOrEqualTo\" contact_emails = [\"${each.value.ContactEmails}\"] } lifecycle { ignore_changes = [ time_period ] } } resource \"azurerm_consumption_budget_resource_group\" \"rg_budget_subscription2\" { provider = azurerm.Subscription2 for_each = { for i , budget in local.budgetsub2 : i => budget } name = each.value.budgetName amount = each.value.BudgetAmount time_grain = each.value.TimeGrain time_period { start_date = each.value.StartDate end_date = each.value.EndDate } resource_group_id = data.azurerm_resource_group.rg_subscription2[each.key].id notification { enabled = true threshold = 80 operator = \"GreaterThanOrEqualTo\" contact_emails = [\"${each.value.ContactEmails}\"] } lifecycle { ignore_changes = [ time_period ] } } **Output:** [![enter image description here][2]][2] [![enter image description here][3]][3] [![enter image description here][4]][4] [1]: https://i.stack.imgur.com/8mWeb.png [2]: https://i.stack.imgur.com/Amey4.png [3]: https://i.stack.imgur.com/rXUAC.png [4]: https://i.stack.imgur.com/GySzm.png", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "Using Terraform to perform the same operation on different Subscriptions will be difficult as for_each is not supported in provider blocks as shown in below image , so you will have to manually set up the provider blocks for all the subscriptions. ", "keywords": ["provider"]}, {"source": "Body", "text": "As a solution to do this from terraform you can create different .csv files for different subscriptions and call them in different resource provider blocks like below : Output:", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Azure Cost Management - Budget Alert Script", "keywords": ["cost"]}]}