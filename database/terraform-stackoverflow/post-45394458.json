{"Id": "45394458", "PostTypeId": "1", "CreationDate": "2017-07-29T21:59:44.713", "Score": "30", "ViewCount": "45925", "Body": "<p>I\u00b4m using Terraform to create a script that builds some EC2 Servers and a MySQL RDS (using AWS Amazon Provider).</p>\n\n<p>Is there a way to execute a SQL script on this created RDS (i want to create users, tables, etc)?</p>\n\n<p>Thanks in advance,</p>\n\n<p>Att,</p>\n", "OwnerUserId": "8387570", "LastActivityDate": "2023-05-18T09:45:56.727", "Title": "How to apply SQL Scripts on RDS with Terraform", "Tags": "<terraform>", "AnswerCount": "7", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "links": [{"Id": "1597860241", "CreationDate": "2018-05-31T17:03:20.913", "PostId": "45394458", "RelatedPostId": "49563301", "LinkTypeId": "1"}], "history": [{"Id": "152762257", "PostHistoryTypeId": "2", "PostId": "45394458", "RevisionGUID": "11102203-2398-42dc-9d7c-3957be20b77c", "CreationDate": "2017-07-29T21:59:44.713", "UserId": "8387570", "Text": "I\u00b4m using Terraform to create a script that builds some EC2 Servers and a MySQL RDS (using AWS Amazon Provider).\r\n\r\nIs there a way to execute a SQL script on this created RDS (i want to create users, tables, etc)?\r\n\r\nThanks in advance,\r\n\r\nAtt,", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I\u00b4m using Terraform to create a script that builds some EC2 Servers and a MySQL RDS (using AWS Amazon Provider). ", "keywords": ["provider"]}]}, {"Id": "152762258", "PostHistoryTypeId": "1", "PostId": "45394458", "RevisionGUID": "11102203-2398-42dc-9d7c-3957be20b77c", "CreationDate": "2017-07-29T21:59:44.713", "UserId": "8387570", "Text": "How to apply SQL Scripts on RDS with Terraform", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "152762259", "PostHistoryTypeId": "3", "PostId": "45394458", "RevisionGUID": "11102203-2398-42dc-9d7c-3957be20b77c", "CreationDate": "2017-07-29T21:59:44.713", "UserId": "8387570", "Text": "<terraform>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "45401862", "PostTypeId": "2", "ParentId": "45394458", "CreationDate": "2017-07-30T16:05:31.740", "Score": "2", "Body": "<p>You'll want to use terraform remote exec in a provisioner resource. Getting db credentials to the instance is a different story. You can use something like <a href=\"https://www.consul.io/\" rel=\"nofollow noreferrer\">consul</a> or pull the creds from s3 and have the script parse. </p>\n\n<pre><code>resource \"aws_instance\" \"web\" {\n\n\n  provisioner \"remote-exec\" {\n    inline = [\n      \"chmod +x /tmp/script.sh\",\n      \"/tmp/script.sh args\",\n    ]\n  }\n}\n</code></pre>\n\n<p><a href=\"https://www.terraform.io/docs/provisioners/remote-exec.html#script\" rel=\"nofollow noreferrer\">https://www.terraform.io/docs/provisioners/remote-exec.html#script</a></p>\n", "OwnerUserId": "1794802", "LastActivityDate": "2017-07-30T16:05:31.740", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "152794486", "PostHistoryTypeId": "2", "PostId": "45401862", "RevisionGUID": "910f4ddf-6c77-4807-a4bc-363a55f1607a", "CreationDate": "2017-07-30T16:05:31.740", "UserId": "1794802", "Text": "You'll want to use terraform remote exec in a provisioner resource. Getting db credentials to the instance is a different story. You can use something like [consul](https://www.consul.io/) or pull the creds from s3 and have the script parse. \r\n\r\n    resource \"aws_instance\" \"web\" {\r\n  \r\n    \r\n      provisioner \"remote-exec\" {\r\n        inline = [\r\n          \"chmod +x /tmp/script.sh\",\r\n          \"/tmp/script.sh args\",\r\n        ]\r\n      }\r\n    }\r\n\r\nhttps://www.terraform.io/docs/provisioners/remote-exec.html#script\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Getting db credentials to the instance is a different story. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Getting db credentials to the instance is a different story. ", "keywords": ["instance"]}]}, {"Id": "56961030", "PostTypeId": "2", "ParentId": "45394458", "CreationDate": "2019-07-09T22:01:35.100", "Score": "11", "Body": "<p>Building upon ecoe's answer: </p>\n\n<p>For future readers using a Postgres RDS instance, this is what worked for me (you must have <a href=\"https://www.postgresql.org/docs/9.3/app-psql.html\" rel=\"noreferrer\">psql</a> installed on your machine): </p>\n\n<pre><code>variable \"db_username\" {\n  type = string\n}\n\nvariable \"db_password\" {\n  type = string\n}\n\nresource \"null_resource\" \"db_setup\" {\n\n  provisioner \"local-exec\" {\n\n    command = \"psql -h host_name_here -p 5432 -U \\\"${var.db_username}\\\" -d database_name_here -f \\\"path-to-file-with-sql-commands\\\"\"\n\n    environment = {\n      PGPASSWORD = \"${var.db_password}\"\n    }\n  }\n}\n</code></pre>\n", "OwnerUserId": "7600089", "LastEditorUserId": "7600089", "LastEditDate": "2019-07-09T22:07:31.510", "LastActivityDate": "2019-07-09T22:07:31.510", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "103013013", "PostId": "56961030", "Score": "0", "Text": "What about timeouts, if the db migrations take too long for instance?  It seems like health_checks could fail and terminate the task.  Is this not an issue with this approach?", "CreationDate": "2019-10-10T16:28:45.910", "UserId": "1623926", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "What about timeouts, if the db migrations take too long for instance? ", "keywords": ["instance"]}]}, {"Id": "103042557", "PostId": "56961030", "Score": "2", "Text": "Hmm this is a good point - this approach assumes you already have a database that is up and running. If you are building your db and running this snippet on the same \"terraform apply\", this may not work because the db might not be ready to receive SQL commands. \n\nTo avoid this, make sure your RDS instance is set up prior to running this. Does that answer your question?", "CreationDate": "2019-10-11T14:48:20.060", "UserId": "7600089", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To avoid this, make sure your RDS instance is set up prior to running this. ", "keywords": ["instance"]}]}, {"Id": "123407124", "PostId": "56961030", "Score": "0", "Text": "Is there any way to execute SQL script within VPC or private RDS instance?", "CreationDate": "2021-11-02T17:21:00.023", "UserId": "15105759", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Is there any way to execute SQL script within VPC or private RDS instance?", "keywords": ["instance"]}]}, {"Id": "127295777", "PostId": "56961030", "Score": "0", "Text": "@RounakJain you can open an ssh tunnel  using SSM manager to a bastion that lives within the same private subnet as the RDS. That will allow you to run `psql` command from your machine without exposing ur database to the public internet. Here's an [article](https://www.padok.fr/en/blog/aws-ssh-bastion) that may help setup this solution.", "CreationDate": "2022-04-28T10:55:08.427", "UserId": "4544056", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "201222350", "PostHistoryTypeId": "2", "PostId": "56961030", "RevisionGUID": "1e93b1f6-346d-409c-9384-660e1360c99e", "CreationDate": "2019-07-09T22:01:35.100", "UserId": "7600089", "Text": "Building upon ecoe's answer: \r\n\r\nFor future readers using a Postgres RDS instance, this is what worked for me (you must have [psql][1] installed on your machine): \r\n\r\n```\r\nresource \"null_resource\" \"db_setup\" {\r\n\r\n  provisioner \"local-exec\" {\r\n\r\n    command = \"psql -h host_name_here -p 5432 -U \\\"${var.database_username}\\\" -d database_name_here -f \\\"path-to-file-with-sql-commands\\\"\"\r\n\r\n    environment = {\r\n      PGPASSWORD = \"${var.database_password}\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n  [1]: https://www.postgresql.org/docs/9.3/app-psql.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For future readers using a Postgres RDS instance, this is what worked for me (you must have [psql][1] installed on your machine): ``` resource \"null_resource\" \"db_setup\" { provisioner \"local-exec\" { command = \"psql -h host_name_here -p 5432 -U \\\"${var.database_username}\\\" -d database_name_here -f \\\"path-to-file-with-sql-commands\\\"\" environment = { PGPASSWORD = \"${var.database_password}\" } } } ``` [1]: https://www.postgresql.org/docs/9.3/app-psql.html", "keywords": ["instance"]}]}, {"Id": "201222562", "PostHistoryTypeId": "5", "PostId": "56961030", "RevisionGUID": "b70a30fb-5abc-4880-8e74-0ef4ee660a4b", "CreationDate": "2019-07-09T22:07:31.510", "UserId": "7600089", "Comment": "added 84 characters in body", "Text": "Building upon ecoe's answer: \r\n\r\nFor future readers using a Postgres RDS instance, this is what worked for me (you must have [psql][1] installed on your machine): \r\n\r\n```\r\nvariable \"db_username\" {\r\n  type = string\r\n}\r\n\r\nvariable \"db_password\" {\r\n  type = string\r\n}\r\n\r\nresource \"null_resource\" \"db_setup\" {\r\n\r\n  provisioner \"local-exec\" {\r\n\r\n    command = \"psql -h host_name_here -p 5432 -U \\\"${var.db_username}\\\" -d database_name_here -f \\\"path-to-file-with-sql-commands\\\"\"\r\n\r\n    environment = {\r\n      PGPASSWORD = \"${var.db_password}\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n  [1]: https://www.postgresql.org/docs/9.3/app-psql.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For future readers using a Postgres RDS instance, this is what worked for me (you must have [psql][1] installed on your machine): ``` variable \"db_username\" { type = string } variable \"db_password\" { type = string } resource \"null_resource\" \"db_setup\" { provisioner \"local-exec\" { command = \"psql -h host_name_here -p 5432 -U \\\"${var.db_username}\\\" -d database_name_here -f \\\"path-to-file-with-sql-commands\\\"\" environment = { PGPASSWORD = \"${var.db_password}\" } } } ``` [1]: https://www.postgresql.org/docs/9.3/app-psql.html", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "For future readers using a Postgres RDS instance, this is what worked for me (you must have psql installed on your machine):", "keywords": ["instance"]}]}, {"Id": "76279575", "PostTypeId": "2", "ParentId": "45394458", "CreationDate": "2023-05-18T09:45:56.727", "Score": "0", "Body": "<p>Found a viable solution <a href=\"https://advancedweb.hu/how-to-run-sql-scripts-against-the-rds-data-api-with-terraform/\" rel=\"nofollow noreferrer\">here</a>.</p>\n<p>Uses shell also, but does not require a local psql client, nor ability to connect to psql server from localhost because it uses <code>aws rds-data execute-statement</code> to actually execute SQL statements.</p>\n<p>But for Aurora only, not a bare RDS psql.</p>\n", "OwnerUserId": "286595", "LastActivityDate": "2023-05-18T09:45:56.727", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "292967864", "PostHistoryTypeId": "2", "PostId": "76279575", "RevisionGUID": "9c32fb3a-8647-487e-9ff8-71e799571ad9", "CreationDate": "2023-05-18T09:45:56.727", "UserId": "286595", "Text": "Found a viable solution [here][1].\r\n\r\nUses shell also, but does not require a local psql client, nor ability to connect to psql server from localhost because it uses `aws rds-data execute-statement` to actually execute SQL statements.\r\n\r\nBut for Aurora only, not a bare RDS psql.\r\n\r\n  [1]: https://advancedweb.hu/how-to-run-sql-scripts-against-the-rds-data-api-with-terraform/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "74944990", "PostTypeId": "2", "ParentId": "45394458", "CreationDate": "2022-12-28T21:05:23.077", "Score": "0", "Body": "<p>I answered a similar question, this answer works for creating users, databases, roles, etc...</p>\n<blockquote>\n<p>Terraform's AWS provider only has functionality to provision the platform that hosts the MySQL DBMS (Aurora). Creating schemas, databases, roles etc... has to be done using the DBMS (running SQL queries).</p>\n<p>In order to do this through terraform, you'll have to use a provider created for MySQL (a quick google search found petoju/mysql - please complete the nessecary due dilligence when using open source libraries in a production environment!).</p>\n<p>Best practices for running database clusters in the cloud call for isolating the cluster in it's own private network (AWS VPC) with tightly controlled rules for incoming and outgoing traffic. This poses a problem as terraform will need to connect directly to MySQL in order to provision the resources.</p>\n<p>If you're running terraform from a CI/CD pipeline (GH Actions, CircleCI, etc...) that has limitied networking configuration, or on a local machine. You can create a 'bastion' ec2 instance that lives in a subnet with access to the outside internet. You can then setup an SSH tunnel to that instance from the CI runner that you can proxy the request through using the provider's proxy function or terraform's ALL_PROXY environment variable.</p>\n<p>If you have full control of the CI/CD runners (GH Actions self hosted runners) and they are running in another AWS VPC, you can setup VPC peering which will allow the runners to directly communicate with the Aurora clusters.</p>\n</blockquote>\n<p>Creating/Modifying tables should be controlled at the application layer, there are many platforms/libraries that allow you to create and manage migrations properly (such as <a href=\"https://www.liquibase.org/\" rel=\"nofollow noreferrer\">liquibase</a>, or more framework specific tools like <a href=\"https://www.liquibase.org/\" rel=\"nofollow noreferrer\">Umzug</a> for NodeJS).</p>\n<p>Managing table migrations through terraform is going to lead to a lot of headache.</p>\n", "OwnerUserId": "6115813", "LastActivityDate": "2022-12-28T21:05:23.077", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "285132234", "PostHistoryTypeId": "2", "PostId": "74944990", "RevisionGUID": "35ee75b5-ae75-42f3-9232-80c45f20d135", "CreationDate": "2022-12-28T21:05:23.077", "UserId": "6115813", "Text": "I answered a similar question, this answer works for creating users, databases, roles, etc...\r\n\r\n> Terraform's AWS provider only has functionality to provision the platform that hosts the MySQL DBMS (Aurora). Creating schemas, databases, roles etc... has to be done using the DBMS (running SQL queries).\r\n>\r\n>In order to do this through terraform, you'll have to use a provider created for MySQL (a quick google search found petoju/mysql - please complete the nessecary due dilligence when using open source libraries in a production environment!).\r\n>\r\n>Best practices for running database clusters in the cloud call for isolating the cluster in it's own private network (AWS VPC) with tightly controlled rules for incoming and outgoing traffic. This poses a problem as terraform will need to connect directly to MySQL in order to provision the resources.\r\n>\r\n>If you're running terraform from a CI/CD pipeline (GH Actions, CircleCI, etc...) that has limitied networking configuration, or on a local machine. You can create a 'bastion' ec2 instance that lives in a subnet with access to the outside internet. You can then setup an SSH tunnel to that instance from the CI runner that you can proxy the request through using the provider's proxy function or terraform's ALL_PROXY environment variable.\r\n>\r\n>If you have full control of the CI/CD runners (GH Actions self hosted runners) and they are running in another AWS VPC, you can setup VPC peering which will allow the runners to directly communicate with the Aurora clusters.\r\n\r\nCreating/Modifying tables should be controlled at the application layer, there are many platforms/libraries that allow you to create and manage migrations properly (such as [liquibase](https://www.liquibase.org/), or more framework specific tools like [Umzug](https://www.liquibase.org/) for NodeJS).\r\n\r\nManaging table migrations through terraform is going to lead to a lot of headache.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Terraform's AWS provider only has functionality to provision the platform that hosts the MySQL DBMS (Aurora). ", "keywords": ["provider"]}, {"source": "Text", "text": "> >In order to do this through terraform, you'll have to use a provider created for MySQL (a quick google search found petoju/mysql - please complete the nessecary due dilligence when using open source libraries in a production environment!). ", "keywords": ["provider"]}, {"source": "Text", "text": "> >Best practices for running database clusters in the cloud call for isolating the cluster in it's own private network (AWS VPC) with tightly controlled rules for incoming and outgoing traffic. ", "keywords": ["cluster"]}, {"source": "Text", "text": "> >If you're running terraform from a CI/CD pipeline (GH Actions, CircleCI, etc...) that has limitied networking configuration, or on a local machine. ", "keywords": ["networking"]}, {"source": "Text", "text": "You can create a 'bastion' ec2 instance that lives in a subnet with access to the outside internet. ", "keywords": ["instance"]}, {"source": "Text", "text": "You can then setup an SSH tunnel to that instance from the CI runner that you can proxy the request through using the provider's proxy function or terraform's ALL_PROXY environment variable. ", "keywords": ["instance", "provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "Terraform's AWS provider only has functionality to provision the platform that hosts the MySQL DBMS (Aurora). ", "keywords": ["provider"]}, {"source": "Body", "text": "In order to do this through terraform, you'll have to use a provider created for MySQL (a quick google search found petoju/mysql - please complete the nessecary due dilligence when using open source libraries in a production environment!). ", "keywords": ["provider"]}, {"source": "Body", "text": "Best practices for running database clusters in the cloud call for isolating the cluster in it's own private network (AWS VPC) with tightly controlled rules for incoming and outgoing traffic. ", "keywords": ["cluster"]}, {"source": "Body", "text": "If you're running terraform from a CI/CD pipeline (GH Actions, CircleCI, etc...) that has limitied networking configuration, or on a local machine. ", "keywords": ["networking"]}, {"source": "Body", "text": "You can create a 'bastion' ec2 instance that lives in a subnet with access to the outside internet. ", "keywords": ["instance"]}, {"source": "Body", "text": "You can then setup an SSH tunnel to that instance from the CI runner that you can proxy the request through using the provider's proxy function or terraform's ALL_PROXY environment variable. ", "keywords": ["instance", "provider"]}]}, {"Id": "72568320", "PostTypeId": "2", "ParentId": "45394458", "CreationDate": "2022-06-10T01:54:07.213", "Score": "0", "Body": "<p>my database is in private subnets and the security groups allow only the bastion to connect.<br />\nI have an SQL file that creates the different users and schemas.<br />\nThere can be better ways, but this works for my use case.</p>\n<p>the SQL file has passwords which I pass through terraform variables -</p>\n<pre><code>data &quot;template_file&quot; &quot;init_db&quot; {\n  template = file(&quot;./init-db.sql&quot;)\n\n  vars = {\n    account_service_db_password       = var.account_service_db_password\n    account_service_db_admin_password = var.account_service_db_admin_password\n\n    question_service_db_password       = var.question_service_db_password\n    question_service_db_admin_password = var.question_service_db_admin_password\n  }\n}\n\n</code></pre>\n<p>now I have to copy the SQL file and then execute commands -</p>\n<pre><code>resource &quot;aws_instance&quot; &quot;bastion&quot; {\n  # ...\n  instance_type = &quot;t2.micro&quot;\n  # ...\n\n  connection {\n    type        = &quot;ssh&quot;\n    host        = self.public_ip\n    user        = &quot;ec2-user&quot;\n    private_key = file(&quot;./n_virginia.pem&quot;)\n  }\n\n  provisioner &quot;file&quot; {\n    content     = data.template_file.init_db.rendered\n    destination = &quot;init-db.sql&quot;\n  }\n\n  provisioner &quot;remote-exec&quot; {\n    inline = [\n      &quot;sudo yum update -y&quot;,\n      &quot;sudo yum install mysql -y&quot;,\n      &quot;mysql -u ${var.db_root_username} -h ${aws_db_instance.main.address} -p${var.db_root_password} &lt; init-db.sql&quot;\n    ]\n  }\n}\n</code></pre>\n", "OwnerUserId": "11885333", "LastActivityDate": "2022-06-10T01:54:07.213", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "271940603", "PostHistoryTypeId": "2", "PostId": "72568320", "RevisionGUID": "5d1f4b3c-03fc-4fa1-b5f6-38b9b1c6c060", "CreationDate": "2022-06-10T01:54:07.213", "UserId": "11885333", "Text": "my database is in private subnets and the security groups allow only the bastion to connect.  \r\nI have an SQL file that creates the different users and schemas.  \r\nThere can be better ways, but this works for my use case.   \r\n\r\nthe SQL file has passwords which I pass through terraform variables - \r\n\r\n```tf\r\ndata \"template_file\" \"init_db\" {\r\n  template = file(\"./init-db.sql\")\r\n\r\n  vars = {\r\n    account_service_db_password       = var.account_service_db_password\r\n    account_service_db_admin_password = var.account_service_db_admin_password\r\n\r\n    question_service_db_password       = var.question_service_db_password\r\n    question_service_db_admin_password = var.question_service_db_admin_password\r\n  }\r\n}\r\n\r\n```\r\n\r\nnow I have to copy the SQL file and then execute commands -\r\n\r\n```tf\r\nresource \"aws_instance\" \"bastion\" {\r\n  # ...\r\n  instance_type = \"t2.micro\"\r\n  # ...\r\n\r\n  connection {\r\n    type        = \"ssh\"\r\n    host        = self.public_ip\r\n    user        = \"ec2-user\"\r\n    private_key = file(\"./n_virginia.pem\")\r\n  }\r\n\r\n  provisioner \"file\" {\r\n    content     = data.template_file.init_db.rendered\r\n    destination = \"init-db.sql\"\r\n  }\r\n\r\n  provisioner \"remote-exec\" {\r\n    inline = [\r\n      \"sudo yum update -y\",\r\n      \"sudo yum install mysql -y\",\r\n      \"mysql -u ${var.db_root_username} -h ${aws_db_instance.main.address} -p${var.db_root_password} < init-db.sql\"\r\n    ]\r\n  }\r\n}\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "70247067", "PostTypeId": "2", "ParentId": "45394458", "CreationDate": "2021-12-06T14:28:11.020", "Score": "0", "Body": "<p>Elaborating on the previous answers with a MySQL version.</p>\n<p><strong>MySQL version with file</strong></p>\n<pre><code>resource &quot;null_resource&quot; &quot;db_setup&quot; {\n  depends_on = [module.db, aws_security_group.rds_main, aws_default_security_group.default]\n  provisioner &quot;local-exec&quot; {\n    command = &quot;mysql --host=${module.db.this_db_instance_address} --port=${var.dbport} --user=${var.dbusername} --password=${var.dbpassword} --database=${var.dbname} &lt; ${file(${path.module}/init/db_structure.sql)}&quot;\n  }\n}\n</code></pre>\n<p><strong>MySQL version with local_file</strong></p>\n<pre><code>data &quot;local_file&quot; &quot;sql_script&quot; {\n  filename = &quot;${path.module}/init/db_structure.sql&quot;\n}\n\nresource &quot;null_resource&quot; &quot;db_setup&quot; {\n  depends_on = [module.db, aws_security_group.rds_main, aws_default_security_group.default]\n  provisioner &quot;local-exec&quot; {\n    command = &quot;mysql --host=${module.db.this_db_instance_address} --port=${var.dbport} --user=${var.dbusername} --password=${var.dbpassword} --database=${var.dbname} &lt; ${data.local_file.sql_script.content}&quot;\n  }\n}\n</code></pre>\n", "OwnerUserId": "11669366", "LastActivityDate": "2021-12-06T14:28:11.020", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "259481938", "PostHistoryTypeId": "2", "PostId": "70247067", "RevisionGUID": "a886c674-026b-4a69-a2a3-b28d1d15bfb6", "CreationDate": "2021-12-06T14:28:11.020", "UserId": "11669366", "Text": "Elaborating on the previous answers with a MySQL version.\r\n\r\n**MySQL version with file**\r\n    \r\n    resource \"null_resource\" \"db_setup\" {\r\n      depends_on = [module.db, aws_security_group.rds_main, aws_default_security_group.default]\r\n      provisioner \"local-exec\" {\r\n        command = \"mysql --host=${module.db.this_db_instance_address} --port=${var.dbport} --user=${var.dbusername} --password=${var.dbpassword} --database=${var.dbname} < ${file(${path.module}/init/db_structure.sql)}\"\r\n      }\r\n    }\r\n\r\n**MySQL version with local_file**\r\n\r\n    data \"local_file\" \"sql_script\" {\r\n      filename = \"${path.module}/init/db_structure.sql\"\r\n    }\r\n    \r\n    resource \"null_resource\" \"db_setup\" {\r\n      depends_on = [module.db, aws_security_group.rds_main, aws_default_security_group.default]\r\n      provisioner \"local-exec\" {\r\n        command = \"mysql --host=${module.db.this_db_instance_address} --port=${var.dbport} --user=${var.dbusername} --password=${var.dbpassword} --database=${var.dbname} < ${data.local_file.sql_script.content}\"\r\n      }\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "50629384", "PostTypeId": "2", "ParentId": "45394458", "CreationDate": "2018-05-31T17:03:20.913", "Score": "25", "Body": "<p>Like <a href=\"https://stackoverflow.com/questions/49563301/terraform-local-exec-command-for-executing-mysql-script\">this solution</a>, You can also avoid instance setup time/cost by using your own machine with local-exec <strong>IF your RDS database is publicly available and you have setup <code>ingress</code> to allow your machine to connect</strong>. Then, with credentials stored securely in your environment, you would just do something like:</p>\n<pre><code>resource &quot;null_resource&quot; &quot;db_setup&quot; {\n\n  # runs after database and security group providing external access is created\n  depends_on = [&quot;aws_db_instance.your_database_instance&quot;, &quot;aws_security_group.sg_allowing_external_access&quot;]\n\n    provisioner &quot;local-exec&quot; {\n        command = &quot;database connection command goes here&quot;\n        environment = {\n          # for instance, postgres would need the password here:\n          PGPASSWORD = &quot;${var.database_admin_password}&quot;\n        }\n    }\n}\n</code></pre>\n<p>Keep in mind that passwords and other sensitive variables can be <a href=\"https://www.terraform.io/intro/getting-started/variables.html#assigning-variables\" rel=\"nofollow noreferrer\">input into terraform separately</a>.</p>\n", "OwnerUserId": "1080804", "LastEditorUserId": "1080804", "LastEditDate": "2022-10-11T15:42:22.240", "LastActivityDate": "2022-10-11T15:42:22.240", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "98348785", "PostId": "50629384", "Score": "1", "Text": "Please note that, as mentioned by sub-OP, this means that \"public\" access to the database is required(either by a VPN or allowing connections to DB from the internet).", "CreationDate": "2019-04-25T06:35:06.723", "UserId": "4119226", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Please note that, as mentioned by sub-OP, this means that \"public\" access to the database is required(either by a VPN or allowing connections to DB from the internet).", "keywords": ["vpn"]}]}, {"Id": "123559246", "PostId": "50629384", "Score": "0", "Text": "Needs equal sign after `environment` to avoid \"Unsupported block type\" error?", "CreationDate": "2021-11-09T13:20:33.780", "UserId": "2205465", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "123611432", "PostId": "50629384", "Score": "0", "Text": "How will this configuration change, if I have my RDS in private subnet..?", "CreationDate": "2021-11-11T11:45:58.667", "UserId": "12917640", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "How will this configuration change, if I have my RDS in private subnet..?", "keywords": ["change"]}]}], "history": [{"Id": "174620049", "PostHistoryTypeId": "2", "PostId": "50629384", "RevisionGUID": "80212b2e-6cca-45ca-8407-c3ff6faee070", "CreationDate": "2018-05-31T17:03:20.913", "UserId": "1080804", "Text": "Like [this solution](https://stackoverflow.com/questions/49563301/terraform-local-exec-command-for-executing-mysql-script), You can also avoid instance setup time/cost by using your own machine with local-exec IF your RDS is publicly available and you have setup `ingress` to allow your machine to connect. Then, with credentials stored securely in your environment, you would just do something like:\r\n\r\n    resource \"null_resource\" \"db_setup\" {\r\n\r\n      # runs after database and security group providing external access is created\r\n      depends_on = [\"aws_db_instance.your_database_instance\", \"aws_security_group.sg_allowing_external_access\"]\r\n\r\n        provisioner \"local-exec\" {\r\n            command = \"database connection command goes here\"\r\n            environment {\r\n              # for instance, postgres would need the password here:\r\n              PGPASSWORD = \"${var.database_admin_password}\"\r\n            }\r\n        }\r\n    }\r\n\r\nKeep in mind that passwords and other sensitive variables can be [input into terraform separately](https://www.terraform.io/intro/getting-started/variables.html#assigning-variables).", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Like [this solution](https://stackoverflow.com/questions/49563301/terraform-local-exec-command-for-executing-mysql-script), You can also avoid instance setup time/cost by using your own machine with local-exec IF your RDS is publicly available and you have setup `ingress` to allow your machine to connect. ", "keywords": ["cost", "instance"]}, {"source": "Text", "text": "Then, with credentials stored securely in your environment, you would just do something like: resource \"null_resource\" \"db_setup\" { # runs after database and security group providing external access is created depends_on = [\"aws_db_instance.your_database_instance\", \"aws_security_group.sg_allowing_external_access\"] provisioner \"local-exec\" { command = \"database connection command goes here\" environment { # for instance, postgres would need the password here: PGPASSWORD = \"${var.database_admin_password}\" } } } Keep in mind that passwords and other sensitive variables can be [input into terraform separately](https://www.terraform.io/intro/getting-started/variables.html#assigning-variables).", "keywords": ["instance"]}]}, {"Id": "196531525", "PostHistoryTypeId": "5", "PostId": "50629384", "RevisionGUID": "eb553af1-d034-4cb8-91cf-c1e3ca59a35e", "CreationDate": "2019-04-25T17:48:04.577", "UserId": "1080804", "Comment": "emphasized public access is a requirement", "Text": "Like [this solution](https://stackoverflow.com/questions/49563301/terraform-local-exec-command-for-executing-mysql-script), You can also avoid instance setup time/cost by using your own machine with local-exec **IF your RDS database is publicly available and you have setup `ingress` to allow your machine to connect**. Then, with credentials stored securely in your environment, you would just do something like:\r\n\r\n    resource \"null_resource\" \"db_setup\" {\r\n\r\n      # runs after database and security group providing external access is created\r\n      depends_on = [\"aws_db_instance.your_database_instance\", \"aws_security_group.sg_allowing_external_access\"]\r\n\r\n        provisioner \"local-exec\" {\r\n            command = \"database connection command goes here\"\r\n            environment {\r\n              # for instance, postgres would need the password here:\r\n              PGPASSWORD = \"${var.database_admin_password}\"\r\n            }\r\n        }\r\n    }\r\n\r\nKeep in mind that passwords and other sensitive variables can be [input into terraform separately](https://www.terraform.io/intro/getting-started/variables.html#assigning-variables).", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Like [this solution](https://stackoverflow.com/questions/49563301/terraform-local-exec-command-for-executing-mysql-script), You can also avoid instance setup time/cost by using your own machine with local-exec **IF your RDS database is publicly available and you have setup `ingress` to allow your machine to connect**. ", "keywords": ["cost", "instance"]}, {"source": "Text", "text": "Then, with credentials stored securely in your environment, you would just do something like: resource \"null_resource\" \"db_setup\" { # runs after database and security group providing external access is created depends_on = [\"aws_db_instance.your_database_instance\", \"aws_security_group.sg_allowing_external_access\"] provisioner \"local-exec\" { command = \"database connection command goes here\" environment { # for instance, postgres would need the password here: PGPASSWORD = \"${var.database_admin_password}\" } } } Keep in mind that passwords and other sensitive variables can be [input into terraform separately](https://www", "keywords": ["instance"]}]}, {"Id": "279911944", "PostHistoryTypeId": "5", "PostId": "50629384", "RevisionGUID": "921dc4a3-7cbd-4c42-9075-3f25a338723e", "CreationDate": "2022-10-11T15:42:22.240", "UserId": "1080804", "Comment": "added 2 characters in body", "Text": "Like [this solution](https://stackoverflow.com/questions/49563301/terraform-local-exec-command-for-executing-mysql-script), You can also avoid instance setup time/cost by using your own machine with local-exec **IF your RDS database is publicly available and you have setup `ingress` to allow your machine to connect**. Then, with credentials stored securely in your environment, you would just do something like:\r\n\r\n    resource \"null_resource\" \"db_setup\" {\r\n\r\n      # runs after database and security group providing external access is created\r\n      depends_on = [\"aws_db_instance.your_database_instance\", \"aws_security_group.sg_allowing_external_access\"]\r\n\r\n        provisioner \"local-exec\" {\r\n            command = \"database connection command goes here\"\r\n            environment = {\r\n              # for instance, postgres would need the password here:\r\n              PGPASSWORD = \"${var.database_admin_password}\"\r\n            }\r\n        }\r\n    }\r\n\r\nKeep in mind that passwords and other sensitive variables can be [input into terraform separately](https://www.terraform.io/intro/getting-started/variables.html#assigning-variables).", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Like [this solution](https://stackoverflow.com/questions/49563301/terraform-local-exec-command-for-executing-mysql-script), You can also avoid instance setup time/cost by using your own machine with local-exec **IF your RDS database is publicly available and you have setup `ingress` to allow your machine to connect**. ", "keywords": ["cost", "instance"]}, {"source": "Text", "text": "Then, with credentials stored securely in your environment, you would just do something like: resource \"null_resource\" \"db_setup\" { # runs after database and security group providing external access is created depends_on = [\"aws_db_instance.your_database_instance\", \"aws_security_group.sg_allowing_external_access\"] provisioner \"local-exec\" { command = \"database connection command goes here\" environment = { # for instance, postgres would need the password here: PGPASSWORD = \"${var.database_admin_password}\" } } } Keep in mind that passwords and other sensitive variables can be [input into terraform separately](https://www", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Like this solution, You can also avoid instance setup time/cost by using your own machine with local-exec IF your RDS database is publicly available and you have setup ingress to allow your machine to connect. ", "keywords": ["cost", "instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I\u00b4m using Terraform to create a script that builds some EC2 Servers and a MySQL RDS (using AWS Amazon Provider). ", "keywords": ["provider"]}]}