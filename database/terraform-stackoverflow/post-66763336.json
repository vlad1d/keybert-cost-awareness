{"Id": "66763336", "PostTypeId": "1", "AcceptedAnswerId": "66764180", "CreationDate": "2021-03-23T12:40:23.130", "Score": "6", "ViewCount": "3623", "Body": "<p>I'm trying to get provisioned concurrency to work with my API gateway backed Lambda function.</p>\n<p>Following config does not work, AWS seems to completely ignore provisioned concurrency and will cold-start.</p>\n<pre><code>resource &quot;aws_lambda_function&quot; &quot;user_history&quot; {\n  publish          = true\n  filename         = &quot;../distribution/target/distribution/user-history.jar&quot;\n  function_name    = &quot;user-history_${var.user}_${terraform.workspace}&quot;\n  role             = aws_iam_role.lambda.arn\n  source_code_hash = filebase64sha256(&quot;../distribution/target/distribution/user-history.jar&quot;)\n  runtime          = &quot;java11&quot;\n  timeout          = 240\n  memory_size      = 512\n}\n\nresource &quot;aws_api_gateway_integration&quot; &quot;user_history&quot; {\n  rest_api_id             = aws_api_gateway_rest_api.vnm_api.id\n  resource_id             = aws_api_gateway_resource.user_history.id\n  http_method             = aws_api_gateway_method.user_history.http_method\n  integration_http_method = &quot;POST&quot;\n  type                    = &quot;AWS_PROXY&quot;\n  uri                     = aws_lambda_function.user_history.invoke_arn\n}\n\nresource &quot;aws_lambda_provisioned_concurrency_config&quot; &quot;user_history_provisioning&quot; {\n  function_name = aws_lambda_function.user_history.function_name\n  provisioned_concurrent_executions = 2\n  count = var.provisioning == true ? 1 : 0\n  qualifier = aws_lambda_function.user_history.version\n}\n</code></pre>\n<p>figuring it might've something to do with the version not being specified I tried adding config following the accepted answer here: <a href=\"https://stackoverflow.com/questions/52109413/terraform-what-is-the-uri-to-invoke-lambda-via-alias\">Terraform - what is the URI to invoke lambda via alias?</a></p>\n<pre><code>resource &quot;aws_lambda_alias&quot; &quot;user_history_alias&quot;{\n  name = &quot;user_history_version&quot;\n  description = &quot;Versioned alias&quot;\n  function_name = aws_lambda_function.user_history.arn\n  function_version = aws_lambda_function.user_history.version\n}\n\ndata &quot;aws_lambda_function&quot; &quot;user_history&quot; {\n  function_name = aws_lambda_function.user_history.function_name\n  qualifier = &quot;user_history_version&quot;\n}\n\nresource &quot;aws_api_gateway_integration&quot; &quot;user_history&quot; {\n  uri = aws_lambda_function.user_history.user_history_version.invoke_arn\n}\n</code></pre>\n<p>but now I'm getting an error that states <code>This object has no argument, nested block, or exported attribute named &quot;user_history_version&quot;</code></p>\n<p>Does anyone know how I can get my provisioned concurrency working?</p>\n", "OwnerUserId": "1417953", "LastActivityDate": "2021-03-23T13:29:58.220", "Title": "AWS Terraform Lambda Provisioned Concurrency", "Tags": "<amazon-web-services><terraform>", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "118017492", "PostId": "66763336", "Score": "0", "Text": "Do you see the provisioning setting being created in the AWS web console after you run `terraform apply`? You are only provisioning 2, so if there are 3 or more concurrent requests to this function you will still get cold starts.", "CreationDate": "2021-03-23T12:48:52.007", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "118017677", "PostId": "66763336", "Score": "0", "Text": "Yes, I can see the provisioning config on the lambda function in the AWS UI, AWS also shows concurrency is ready in this window. This is a currently still a development environment where I'm the only one accessing it, so I'd assume 2 instances is more than enough.", "CreationDate": "2021-03-23T12:55:30.837", "UserId": "1417953", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "1877925028", "CreationDate": "2021-03-23T12:40:23.130", "PostId": "66763336", "RelatedPostId": "52109413", "LinkTypeId": "1"}], "history": [{"Id": "243241390", "PostHistoryTypeId": "2", "PostId": "66763336", "RevisionGUID": "6758eb70-db42-495c-b2e3-ed0f86583a23", "CreationDate": "2021-03-23T12:40:23.130", "UserId": "1417953", "Text": "I'm trying to get provisioned concurrency to work with my API gateway backed Lambda function.\r\n\r\nFollowing config does not work, AWS seems to completely ignore provisioned concurrency and will cold-start.\r\n\r\n```terraform\r\nresource \"aws_lambda_function\" \"user_history\" {\r\n  publish          = true\r\n  filename         = \"../distribution/target/distribution/user-history.jar\"\r\n  function_name    = \"user-history_${var.user}_${terraform.workspace}\"\r\n  role             = aws_iam_role.lambda.arn\r\n  source_code_hash = filebase64sha256(\"../distribution/target/distribution/user-history.jar\")\r\n  runtime          = \"java11\"\r\n  timeout          = 240\r\n  memory_size      = 512\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"user_history\" {\r\n  rest_api_id             = aws_api_gateway_rest_api.vnm_api.id\r\n  resource_id             = aws_api_gateway_resource.user_history.id\r\n  http_method             = aws_api_gateway_method.user_history.http_method\r\n  integration_http_method = \"POST\"\r\n  type                    = \"AWS_PROXY\"\r\n  uri                     = aws_lambda_function.user_history.invoke_arn\r\n}\r\n\r\nresource \"aws_lambda_provisioned_concurrency_config\" \"user_history_provisioning\" {\r\n  function_name = aws_lambda_function.user_history.function_name\r\n  provisioned_concurrent_executions = 2\r\n  count = var.provisioning == true ? 1 : 0\r\n  qualifier = aws_lambda_function.user_history.version\r\n}\r\n```\r\n\r\nfiguring it might've something to do with the version not being specified I tried adding config following the accepted answer here: https://stackoverflow.com/questions/52109413/terraform-what-is-the-uri-to-invoke-lambda-via-alias\r\n\r\n```terraform\r\nresource \"aws_lambda_alias\" \"user_history_alias\"{\r\n  name = \"user_history_version\"\r\n  description = \"Versioned alias\"\r\n  function_name = aws_lambda_function.user_history.arn\r\n  function_version = aws_lambda_function.user_history.version\r\n}\r\n\r\ndata \"aws_lambda_function\" \"user_history\" {\r\n  function_name = aws_lambda_function.user_history.function_name\r\n  qualifier = \"user_history_version\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"user_history\" {\r\n  uri = aws_lambda_function.user_history.user_history_version.invoke_arn\r\n}\r\n```\r\n\r\nbut now I'm getting an error that states `This object has no argument, nested block, or exported attribute named \"user_history_version\"`\r\n\r\nDoes anyone know how I can get my provisioned concurrency working?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "243241391", "PostHistoryTypeId": "1", "PostId": "66763336", "RevisionGUID": "6758eb70-db42-495c-b2e3-ed0f86583a23", "CreationDate": "2021-03-23T12:40:23.130", "UserId": "1417953", "Text": "AWS Terraform Lambda Provisioned Concurrency", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "243241392", "PostHistoryTypeId": "3", "PostId": "66763336", "RevisionGUID": "6758eb70-db42-495c-b2e3-ed0f86583a23", "CreationDate": "2021-03-23T12:40:23.130", "UserId": "1417953", "Text": "<amazon-web-services><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "66764180", "PostTypeId": "2", "ParentId": "66763336", "CreationDate": "2021-03-23T13:29:58.220", "Score": "5", "Body": "<p>You're on the right track - if you use the unqualified lambda arn, you reference the version at $LATEST, while your provisioned concurrency uses the latest published version.</p>\n<p>You can fix your problem by either referencing the alias ARN (<code>aws_lambda_alias. user_history_alias.arn</code>), or, if you don't need the alias for something else, referencing <code>aws_lambda_function.user_history.qualified_arn</code>, which will be the latest published version.</p>\n", "OwnerUserId": "32771", "LastActivityDate": "2021-03-23T13:29:58.220", "CommentCount": "7", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "118019325", "PostId": "66764180", "Score": "0", "Text": "which configuration field would I put this qualified_arn? It can't go into the gateway integration uri field because I need an invoke arn there.", "CreationDate": "2021-03-23T13:47:44.030", "UserId": "1417953", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "118019737", "PostId": "66764180", "Score": "0", "Text": "It goes into the gateway integration uri field. AWS services don't distinguish between a lambda's base ARN and a qualified ARN - either can be invoked, and either can be managed separately in IAM.", "CreationDate": "2021-03-23T14:01:18.300", "UserId": "32771", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "118020077", "PostId": "66764180", "Score": "0", "Text": "The invoke arn can be templated, like `\"arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${aws_lambda_function.user_history.qualified_arn}/invocations\"`, or you can pull it from the alias's `invoke_arn`", "CreationDate": "2021-03-23T14:12:30.227", "UserId": "32771", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "118021467", "PostId": "66764180", "Score": "1", "Text": "I did `replace(aws_lambda_function.user_history.invoke_arn, aws_lambda_function.user_history.arn, aws_lambda_function.user_history.qualified_arn)` to get the same result. I also had to update the `aws_lambda_permission.function_name` to include the version to make it stick. It sorta seems to work, AWS metrics show invocations are made via provisioning, but the first request still feels kinda slow, faster than before, but still slow.", "CreationDate": "2021-03-23T14:55:04.147", "UserId": "1417953", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "118022830", "PostId": "66764180", "Score": "0", "Text": "update: I've tried to implement this fix across all the lambda functions I'm using, and suddenly nothing's working anymore. I'm going to investigate later why this is happening, but I've almost spent enough time on researching this stupid issue to call it sunk cost fallacy, blame Amazon for poor implementation, and just give up on the entire idea of it.", "CreationDate": "2021-03-23T15:35:58.730", "UserId": "1417953", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm going to investigate later why this is happening, but I've almost spent enough time on researching this stupid issue to call it sunk cost fallacy, blame Amazon for poor implementation, and just give up on the entire idea of it.", "keywords": ["cost"]}]}, {"Id": "118041053", "PostId": "66764180", "Score": "1", "Text": "The issue was permissions not being set to the qualified arn in some locations. First request is still slow, but it seems to perform faster than before.", "CreationDate": "2021-03-24T07:45:46.317", "UserId": "1417953", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "118049190", "PostId": "66764180", "Score": "0", "Text": "If you look in the cloudwatch logs for your function, you'll get a line called \"REPORT\" for each execution. Cold starts will have an entry in there that says INIT - it's useful for distinguishing a cold start from a VM spinup or other delay.", "CreationDate": "2021-03-24T12:53:52.273", "UserId": "32771", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "243244798", "PostHistoryTypeId": "2", "PostId": "66764180", "RevisionGUID": "6c88d29e-711f-41d4-ae4b-a006252ee7a4", "CreationDate": "2021-03-23T13:29:58.220", "UserId": "32771", "Text": "You're on the right track - if you use the unqualified lambda arn, you reference the version at $LATEST, while your provisioned concurrency uses the latest published version. \r\n\r\nYou can fix your problem by either referencing the alias ARN (`aws_lambda_alias. user_history_alias.arn`), or, if you don't need the alias for something else, referencing `aws_lambda_function.user_history.qualified_arn`, which will be the latest published version.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": false, "filtered-sentences": []}