{"Id": "44889859", "PostTypeId": "1", "AcceptedAnswerId": "44903178", "CreationDate": "2017-07-03T15:58:47.173", "Score": "6", "ViewCount": "11541", "Body": "<p>Has anyone tried using all these tools together?</p>\n\n<p>I'm currently using nginx-proxy and docker-compose for a four-container solution.</p>\n\n<p>I'm now trying to make deployment better/faster/cheaper and think terraform might be the piece I'm now looking for.</p>\n\n<p>My question is - does terraform work with docker-compose? Or is there too much overlap between them?</p>\n\n<p>Thanks for any advice!</p>\n", "OwnerUserId": "419751", "LastActivityDate": "2018-05-05T03:16:43.027", "Title": "Using Terraform with docker-compose and nginx-proxy", "Tags": "<docker-compose><terraform><jwilder-nginx-proxy>", "AnswerCount": "2", "CommentCount": "1", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "76773239", "PostId": "44889859", "Score": "1", "Text": "terraform is infrastructure as code, not configuration tool, I think you go with wrong tool, which should be done by ansible, puppet, chef, salt or other automation tool", "CreationDate": "2017-07-04T05:52:13.297", "UserId": "498256", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "150741565", "PostHistoryTypeId": "2", "PostId": "44889859", "RevisionGUID": "1df33b0f-77a6-4c1f-8df2-61a9478412e5", "CreationDate": "2017-07-03T15:58:47.173", "UserId": "419751", "Text": "Has anyone tried using all these tools together?\r\n\r\nI'm currently using nginx-proxy and docker-compose for a four-container solution.\r\n\r\nI'm now trying to make deployment better/faster/cheaper and think terraform might be the piece I'm now looking for.\r\n\r\nMy question is - does terraform work with docker-compose? Or is there too much overlap between them?\r\n\r\nThanks for any advice!\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I'm now trying to make deployment better/faster/cheaper and think terraform might be the piece I'm now looking for. ", "keywords": ["cheap"]}]}, {"Id": "150741566", "PostHistoryTypeId": "1", "PostId": "44889859", "RevisionGUID": "1df33b0f-77a6-4c1f-8df2-61a9478412e5", "CreationDate": "2017-07-03T15:58:47.173", "UserId": "419751", "Text": "Using Terraform with docker-compose and nginx-proxy", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "150741567", "PostHistoryTypeId": "3", "PostId": "44889859", "RevisionGUID": "1df33b0f-77a6-4c1f-8df2-61a9478412e5", "CreationDate": "2017-07-03T15:58:47.173", "UserId": "419751", "Text": "<docker-compose><terraform><jwilder-nginx-proxy>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "44911184", "PostTypeId": "2", "ParentId": "44889859", "CreationDate": "2017-07-04T17:06:24.323", "Score": "11", "Body": "<p>You can use Terraform provider as already suggested but if you want to stick to docker-compose for any reason you can also create your docker-compose file and run the necessary commands with user-data. Take a look to <a href=\"https://www.terraform.io/docs/providers/template/d/file.html\" rel=\"noreferrer\">template_file</a>  and <a href=\"https://www.terraform.io/docs/providers/template/d/cloudinit_config.html\" rel=\"noreferrer\">template_cloudinit_config</a></p>\n\n<p>Example</p>\n\n<p>nginx.tpl</p>\n\n<pre><code>#cloud-config\nwrite_files:\n - content: |\n        version: '2'\n        services:\n            nginx:\n              image: nginx:latest\n   path: /opt/docker-compose.yml\nruncmd:\n - 'docker-compose -f /opt/docker-compose.yml up -d'\n</code></pre>\n\n<p>nginx.tf</p>\n\n<pre><code>data \"template_file\" \"nginx\" {\n    template = \"${file(\"nginx.tpl\")}\"\n}\n\nresource \"aws_instance\" \"nginx\" {\n    instance_type = \"t2.micro\"\n    ami = \"ami-xxxxxxxx\"\n\n    user_data = \"${data.template_file.nginx.rendered}\"\n}\n</code></pre>\n\n<p>I use AWS but this should work with any provider supporting user-data and a box with cloud-init. Also this approach is suitable for autoscaling.</p>\n", "OwnerUserId": "6829177", "LastActivityDate": "2017-07-04T17:06:24.323", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "150824497", "PostHistoryTypeId": "2", "PostId": "44911184", "RevisionGUID": "b0399c8a-81b1-4b8b-a5ac-dc500ad62871", "CreationDate": "2017-07-04T17:06:24.323", "UserId": "6829177", "Text": "You can use Terraform provider as already suggested but if you want to stick to docker-compose for any reason you can also create your docker-compose file and run the necessary commands with user-data. Take a look to [template_file][1]  and [template_cloudinit_config][2]\r\n\r\nExample\r\n\r\nnginx.tpl\r\n\r\n    #cloud-config\r\n    write_files:\r\n     - content: |\r\n            version: '2'\r\n            services:\r\n                nginx:\r\n                  image: nginx:latest\r\n       path: /opt/docker-compose.yml\r\n    runcmd:\r\n     - 'docker-compose -f /opt/docker-compose.yml up -d'\r\n\r\n\r\nnginx.tf\r\n    \r\n    data \"template_file\" \"nginx\" {\r\n        template = \"${file(\"nginx.tpl\")}\"\r\n    }\r\n\r\n    resource \"aws_instance\" \"nginx\" {\r\n        instance_type = \"t2.micro\"\r\n        ami = \"ami-xxxxxxxx\"\r\n  \r\n        user_data = \"${data.template_file.nginx.rendered}\"\r\n    }\r\n\r\nI use AWS but this should work with any provider supporting user-data and a box with cloud-init. Also this approach is suitable for autoscaling.\r\n\r\n  [1]: https://www.terraform.io/docs/providers/template/d/file.html\r\n  [2]: https://www.terraform.io/docs/providers/template/d/cloudinit_config.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You can use Terraform provider as already suggested but if you want to stick to docker-compose for any reason you can also create your docker-compose file and run the necessary commands with user-data. ", "keywords": ["provider"]}, {"source": "Text", "text": "Take a look to [template_file][1] and [template_cloudinit_config][2] Example nginx.tpl #cloud-config write_files: - content: | version: '2' services: nginx: image: nginx:latest path: /opt/docker-compose.yml runcmd: - 'docker-compose -f /opt/docker-compose.yml up -d' nginx.tf data \"template_file\" \"nginx\" { template = \"${file(\"nginx.tpl\")}\" } resource \"aws_instance\" \"nginx\" { instance_type = \"t2.micro\" ami = \"ami-xxxxxxxx\" user_data = \"${data.template_file.nginx.rendered}\" } I use AWS but this should work with any provider supporting user-data and a box with cloud-init", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can use Terraform provider as already suggested but if you want to stick to docker-compose for any reason you can also create your docker-compose file and run the necessary commands with user-data. ", "keywords": ["provider"]}, {"source": "Body", "text": "Take a look to template_file and template_cloudinit_config Example nginx.tpl nginx.tf I use AWS but this should work with any provider supporting user-data and a box with cloud-init. ", "keywords": ["provider"]}]}, {"Id": "44903178", "PostTypeId": "2", "ParentId": "44889859", "CreationDate": "2017-07-04T10:14:49.227", "Score": "5", "Body": "<p>You can run single or multiple docker container in Terraform using the docker provider. </p>\n\n<p><a href=\"https://www.terraform.io/docs/providers/docker/index.html\" rel=\"noreferrer\">https://www.terraform.io/docs/providers/docker/index.html</a></p>\n\n<p>Sample nginx terraform config</p>\n\n<pre><code>provider \"docker\" {\n  host = \"tcp://ec2-xxxxxxx.compute.amazonaws.com:2375/\"\n}\nresource \"docker_image\" \"nginx\" {\n  name = \"nginx:1.11-alpine\"\n}\nresource \"docker_container\" \"nginx-server\" {\n  name = \"nginx-server\"\n  image = \"${docker_image.nginx.latest}\"\n  ports {\n    internal = 80\n    external = 80\n  }\n  volumes {\n    container_path  = \"/usr/share/nginx/html\"\n    host_path = \"/home/scrapbook/tutorial/www\"\n    read_only = true\n  }\n}\n</code></pre>\n", "OwnerUserId": "7975584", "LastActivityDate": "2017-07-04T10:14:49.227", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "150794358", "PostHistoryTypeId": "2", "PostId": "44903178", "RevisionGUID": "d66f48a8-6b99-4dec-8171-4de54e8c7dff", "CreationDate": "2017-07-04T10:14:49.227", "UserId": "7975584", "Text": "You can run single or multiple docker container in Terraform using the docker provider. \r\n\r\nhttps://www.terraform.io/docs/providers/docker/index.html\r\n\r\nSample nginx terraform config\r\n\r\n    provider \"docker\" {\r\n      host = \"tcp://ec2-xxxxxxx.compute.amazonaws.com:2375/\"\r\n    }\r\n    resource \"docker_image\" \"nginx\" {\r\n      name = \"nginx:1.11-alpine\"\r\n    }\r\n    resource \"docker_container\" \"nginx-server\" {\r\n      name = \"nginx-server\"\r\n      image = \"${docker_image.nginx.latest}\"\r\n      ports {\r\n        internal = 80\r\n        external = 80\r\n      }\r\n      volumes {\r\n        container_path  = \"/usr/share/nginx/html\"\r\n        host_path = \"/home/scrapbook/tutorial/www\"\r\n        read_only = true\r\n      }\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You can run single or multiple docker container in Terraform using the docker provider. ", "keywords": ["provider"]}, {"source": "Text", "text": "https://www.terraform.io/docs/providers/docker/index.html Sample nginx terraform config provider \"docker\" { host = \"tcp://ec2-xxxxxxx.compute.amazonaws.com:2375/\" } resource \"docker_image\" \"nginx\" { name = \"nginx:1.11-alpine\" } resource \"docker_container\" \"nginx-server\" { name = \"nginx-server\" image = \"${docker_image.nginx.latest}\" ports { internal = 80 external = 80 } volumes { container_path = \"/usr/share/nginx/html\" host_path = \"/home/scrapbook/tutorial/www\" read_only = true } ", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can run single or multiple docker container in Terraform using the docker provider. ", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I'm now trying to make deployment better/faster/cheaper and think terraform might be the piece I'm now looking for. ", "keywords": ["cheap"]}]}