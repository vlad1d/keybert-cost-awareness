{"Id": "70017904", "PostTypeId": "1", "CreationDate": "2021-11-18T10:05:55.917", "Score": "2", "ViewCount": "2076", "Body": "<p>Everytime there's a change in the dynamo table, it runs a trigger which then runs a lambda function. For now, the trigger runs whenever i add or delete a file both. Instead, I only want to run the trigger if the event type is INSERT. How can I achieve this?</p>\n<pre><code>resource &quot;aws_dynamodb_table&quot; &quot;filenames&quot; {\n  name           = local.dynamodb_table_filenames\n  billing_mode   = &quot;PROVISIONED&quot;\n  read_capacity  = 1000\n  write_capacity = 1000\n  hash_key       = &quot;filename&quot;\n  stream_enabled = true\n  stream_view_type = &quot;NEW_IMAGE&quot;\n\n  #range_key      = &quot;&quot;\n\n  attribute {\n    name = &quot;filename&quot;\n    type = &quot;S&quot;\n  }\n\n  tags = var.tags\n}\n\nresource &quot;aws_lambda_event_source_mapping&quot; &quot;allow_dynamodb_table_to_trigger_lambda&quot; {\n  event_source_arn  = aws_dynamodb_table.filenames.stream_arn\n  function_name     = aws_lambda_function.trigger_stepfunction_lambda.arn\n  starting_position = &quot;LATEST&quot;\n}\n\n</code></pre>\n", "OwnerDisplayName": "user13067694", "LastActivityDate": "2022-09-27T21:05:52.390", "Title": "run dynamodb trigger for specific event types", "Tags": "<amazon-web-services><aws-lambda><amazon-dynamodb><terraform><terraform-provider-aws>", "AnswerCount": "3", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "258244988", "PostHistoryTypeId": "2", "PostId": "70017904", "RevisionGUID": "8443b1bb-ff19-4d8f-b9c6-13fa7d8ea71f", "CreationDate": "2021-11-18T10:05:55.917", "UserDisplayName": "user13067694", "Text": "Everytime there's a change in the dynamo table, it runs a trigger which then runs a lambda function. For now, the trigger runs whenever i add or delete a file both. Instead, I only want to run the trigger if the event type is INSERT. How can I achieve this?\r\n\r\n```\r\nresource \"aws_dynamodb_table\" \"filenames\" {\r\n  name           = local.dynamodb_table_filenames\r\n  billing_mode   = \"PROVISIONED\"\r\n  read_capacity  = 1000\r\n  write_capacity = 1000\r\n  hash_key       = \"filename\"\r\n  stream_enabled = true\r\n  stream_view_type = \"NEW_IMAGE\"\r\n\r\n  #range_key      = \"\"\r\n\r\n  attribute {\r\n    name = \"filename\"\r\n    type = \"S\"\r\n  }\r\n\r\n  tags = var.tags\r\n}\r\n\r\nresource \"aws_lambda_event_source_mapping\" \"allow_dynamodb_table_to_trigger_lambda\" {\r\n  event_source_arn  = aws_dynamodb_table.filenames.stream_arn\r\n  function_name     = aws_lambda_function.trigger_stepfunction_lambda.arn\r\n  starting_position = \"LATEST\"\r\n}\r\n\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Everytime there's a change in the dynamo table, it runs a trigger which then runs a lambda function. ", "keywords": ["change"]}, {"source": "Text", "text": "How can I achieve this? ``` resource \"aws_dynamodb_table\" \"filenames\" { name = local.dynamodb_table_filenames billing_mode = \"PROVISIONED\" read_capacity = 1000 write_capacity = 1000 hash_key = \"filename\" stream_enabled = true stream_view_type = \"NEW_IMAGE\" #range_key = \"\" attribute { name = \"filename\" type = \"S\" ", "keywords": ["bill"]}]}, {"Id": "258244990", "PostHistoryTypeId": "1", "PostId": "70017904", "RevisionGUID": "8443b1bb-ff19-4d8f-b9c6-13fa7d8ea71f", "CreationDate": "2021-11-18T10:05:55.917", "UserDisplayName": "user13067694", "Text": "run dynamodb trigger for specific event types", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "258244991", "PostHistoryTypeId": "3", "PostId": "70017904", "RevisionGUID": "8443b1bb-ff19-4d8f-b9c6-13fa7d8ea71f", "CreationDate": "2021-11-18T10:05:55.917", "UserDisplayName": "user13067694", "Text": "<amazon-web-services><aws-lambda><amazon-dynamodb><terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "70715956", "PostTypeId": "2", "ParentId": "70017904", "CreationDate": "2022-01-14T20:00:45.240", "Score": "1", "Body": "<p>Sorry, unable to add a comment as I do not have enough reputation.\nI have been able to add a filter to a Dynamodb stream via the AWS Console.\nHowever, is this possible via Terraform?\nI have tried the example for &quot;SQS with event filter&quot; suggested in the below, but terraform errors out: <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_event_source_mapping\" rel=\"nofollow noreferrer\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_event_source_mapping</a></p>\n<pre><code>resource &quot;aws_lambda_event_source_mapping&quot; &quot;example&quot; {\n  event_source_arn = aws_sqs_queue.sqs_queue_test.arn\n  function_name    = aws_lambda_function.example.arn\n\n  filter_criteria {\n    filter {\n      pattern = jsonencode({\n        body = {\n          Temperature : [{ numeric : [&quot;&gt;&quot;, 0, &quot;&lt;=&quot;, 100] }]\n          Location : [&quot;New York&quot;]\n        }\n      })\n    }\n  }\n}\n</code></pre>\n<p>Error:\nError: Unsupported block type\n\u2502\n\u2502   on main.tf line 91, in resource &quot;aws_lambda_event_source_mapping&quot; &quot;example&quot;:\n\u2502   91:   filter_criteria {\n\u2502\n\u2502 Blocks of type &quot;filter_criteria&quot; are not expected here.</p>\n", "OwnerUserId": "17376685", "LastActivityDate": "2022-01-14T20:00:45.240", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "125052204", "PostId": "70715956", "Score": "0", "Text": "And it turns out to be I was using a slightly older version of terraform-provider-aws => 3.68.\nWhereas, the filter_criteria was implemented in 3.69\nhttps://github.com/hashicorp/terraform-provider-aws/issues/21921", "CreationDate": "2022-01-17T07:19:14.100", "UserId": "17376685", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "And it turns out to be I was using a slightly older version of terraform-provider-aws => 3.68. ", "keywords": ["provider"]}, {"source": "Text", "text": "Whereas, the filter_criteria was implemented in 3.69 https://github.com/hashicorp/terraform-provider-aws/issues/21921", "keywords": ["provider"]}]}], "history": [{"Id": "261972176", "PostHistoryTypeId": "2", "PostId": "70715956", "RevisionGUID": "47a445cc-833e-4274-a5fa-46f145b4be73", "CreationDate": "2022-01-14T20:00:45.240", "UserId": "17376685", "Text": "Sorry, unable to add a comment as I do not have enough reputation.\r\nI have been able to add a filter to a Dynamodb stream via the AWS Console.\r\nHowever, is this possible via Terraform?\r\nI have tried the example for \"SQS with event filter\" suggested in the below, but terraform errors out: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_event_source_mapping\r\n\r\n    resource \"aws_lambda_event_source_mapping\" \"example\" {\r\n      event_source_arn = aws_sqs_queue.sqs_queue_test.arn\r\n      function_name    = aws_lambda_function.example.arn\r\n    \r\n      filter_criteria {\r\n        filter {\r\n          pattern = jsonencode({\r\n            body = {\r\n              Temperature : [{ numeric : [\">\", 0, \"<=\", 100] }]\r\n              Location : [\"New York\"]\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\nError:\r\nError: Unsupported block type\r\n\u2502\r\n\u2502   on main.tf line 91, in resource \"aws_lambda_event_source_mapping\" \"example\":\r\n\u2502   91:   filter_criteria {\r\n\u2502\r\n\u2502 Blocks of type \"filter_criteria\" are not expected here.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "70228198", "PostTypeId": "2", "ParentId": "70017904", "CreationDate": "2021-12-04T18:07:52.607", "Score": "0", "Body": "<p>Announced on 26 Nov 2021, now it is possible to filter events for Amazon SQS, Amazon DynamoDB, and Amazon Kinesis.</p>\n<p>So in this case, is not required to implement the logic of filtering on lambda code, it can be done via Filter criteria (lambda configuration).</p>\n<p>For example, to specify the lambda function should only be trigger on INSERT events, you use the following filter criteria:</p>\n<pre><code>{\n    &quot;eventName&quot;: [ &quot;INSERT&quot; ]\n}\n</code></pre>\n<p>In the console appears in this way:\n<a href=\"https://i.stack.imgur.com/qhanp.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/qhanp.png\" alt=\"enter image description here\" /></a></p>\n<hr />\n<p>Similarly, to filter UPDATE events, the filter is:</p>\n<pre><code>{\n    &quot;eventName&quot;: [ &quot;MODIFY&quot; ]\n}\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/e5XXs.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/e5XXs.png\" alt=\"enter image description here\" /></a></p>\n<p>Announcement:\n<a href=\"https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lambda-event-filtering-amazon-sqs-dynamodb-kinesis-sources/?nc1=h_ls\" rel=\"nofollow noreferrer\">https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lambda-event-filtering-amazon-sqs-dynamodb-kinesis-sources/?nc1=h_ls</a></p>\n<p>Documentation:\n<a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax</a></p>\n", "OwnerUserId": "11598956", "LastActivityDate": "2021-12-04T18:07:52.607", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "124249822", "PostId": "70228198", "Score": "0", "Text": "I am using Terraform's aws_lambda_event_source_mapping resource to create a trigger. Is it possible to filter events using Terraform? or is it only possible with the console for now?", "CreationDate": "2021-12-09T10:08:04.180", "UserDisplayName": "user13067694", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124249861", "PostId": "70228198", "Score": "0", "Text": "I don't see a filters option in terraform's aws_dynamodb_table's docs either", "CreationDate": "2021-12-09T10:09:39.550", "UserDisplayName": "user13067694", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "259381545", "PostHistoryTypeId": "2", "PostId": "70228198", "RevisionGUID": "7b215d6b-6e58-41f6-ba51-c01ed8a6fa5a", "CreationDate": "2021-12-04T18:07:52.607", "UserId": "11598956", "Text": "Announced on 26 Nov 2021, now it is possible to filter events for Amazon SQS, Amazon DynamoDB, and Amazon Kinesis.\r\n\r\nSo in this case, is not required to implement the logic of filtering on lambda code, it can be done via Filter criteria (lambda configuration).\r\n\r\nFor example, to specify the lambda function should only be trigger on INSERT events, you use the following filter criteria:\r\n\r\n    {\r\n        \"eventName\": [ \"INSERT\" ]\r\n    }\r\nIn the console appears in this way:\r\n[![enter image description here][1]][1]\r\n\r\n\r\n---\r\nSimilarly, to filter UPDATE events, the filter is:\r\n\r\n    {\r\n        \"eventName\": [ \"MODIFY\" ]\r\n    }\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/qhanp.png\r\n  [2]: https://i.stack.imgur.com/e5XXs.png\r\n\r\nAnnouncement:\r\nhttps://aws.amazon.com/about-aws/whats-new/2021/11/aws-lambda-event-filtering-amazon-sqs-dynamodb-kinesis-sources/?nc1=h_ls\r\n\r\nDocumentation:\r\nhttps://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "70018189", "PostTypeId": "2", "ParentId": "70017904", "CreationDate": "2021-11-18T10:27:56.717", "Score": "0", "Body": "<blockquote>\n<p>How can I achieve this?</p>\n</blockquote>\n<p>You have to filter the events in your lambda function. A common pattern is to have two functions. The first function, connected to dynamodb stream, receives all db events, filters them and then distributes to other consumers.</p>\n<p>These consumers can be SNS, SQS other function and so on.</p>\n<p>The alternative is to use <a href=\"https://aws.amazon.com/about-aws/whats-new/2021/04/you-now-can-use-aws-cloudtrail-to-log-amazon-dynamodb-streams-da/\" rel=\"nofollow noreferrer\">CloudTrial data-plane events for DynamoDB</a>.</p>\n", "OwnerUserId": "248823", "LastEditorUserId": "82118", "LastEditDate": "2022-09-27T21:05:52.390", "LastActivityDate": "2022-09-27T21:05:52.390", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "123820957", "PostId": "70018189", "Score": "0", "Text": "so filter just with an if-else statement? in the lambda", "CreationDate": "2021-11-20T10:49:54.927", "UserDisplayName": "user13067694", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "123820987", "PostId": "70018189", "Score": "0", "Text": "@Jbd Yes, that would work.", "CreationDate": "2021-11-20T10:53:35.697", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "133167683", "PostId": "70018189", "Score": "0", "Text": "That is a BAD suggestion, That will add to the billing since you are filtering on the Lambda invocation, instead of on source.", "CreationDate": "2023-02-16T17:22:38.363", "UserId": "572771", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "That is a BAD suggestion, That will add to the billing since you are filtering on the Lambda invocation, instead of on source.", "keywords": ["bill"]}]}, {"Id": "133172759", "PostId": "70018189", "Score": "0", "Text": "@RafaelHerscovici If you know better one, please fee free to add it as an answer.", "CreationDate": "2023-02-16T22:45:14.857", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "133179166", "PostId": "70018189", "Score": "0", "Text": "use filter-criteria as suggested in other answers.", "CreationDate": "2023-02-17T09:34:34.023", "UserId": "572771", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "258246526", "PostHistoryTypeId": "2", "PostId": "70018189", "RevisionGUID": "bcc9a67c-f9dd-4da4-afa7-81cd89213412", "CreationDate": "2021-11-18T10:27:56.717", "UserId": "248823", "Text": "> How can I achieve this?\r\n\r\nYou have to filter the events in your lambda function. A common patter is to have two functions. The first function, connected to dynamodb stream, receives all db events, filters them and then distributes to other consumers. \r\n\r\nThese consumers can be SNS, SQS other function and so on. \r\n\r\nThe alternative is to use [CloudTrial data-plane events for DYnamoDB](https://aws.amazon.com/about-aws/whats-new/2021/04/you-now-can-use-aws-cloudtrail-to-log-amazon-dynamodb-streams-da/). ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "279055465", "PostHistoryTypeId": "5", "PostId": "70018189", "RevisionGUID": "539fd77c-a81f-4d1b-9e7b-e1872de1c26c", "CreationDate": "2022-09-27T21:05:52.390", "UserId": "82118", "Comment": "typos", "Text": "> How can I achieve this?\r\n\r\nYou have to filter the events in your lambda function. A common pattern is to have two functions. The first function, connected to dynamodb stream, receives all db events, filters them and then distributes to other consumers. \r\n\r\nThese consumers can be SNS, SQS other function and so on. \r\n\r\nThe alternative is to use [CloudTrial data-plane events for DynamoDB](https://aws.amazon.com/about-aws/whats-new/2021/04/you-now-can-use-aws-cloudtrail-to-log-amazon-dynamodb-streams-da/). ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Everytime there's a change in the dynamo table, it runs a trigger which then runs a lambda function. ", "keywords": ["change"]}]}