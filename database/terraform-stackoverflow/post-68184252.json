{"Id": "68184252", "PostTypeId": "1", "CreationDate": "2021-06-29T18:57:33.930", "Score": "1", "ViewCount": "303", "Body": "<p>I have an api that works as follows:</p>\n<ol>\n<li>Create Changeset using POST <code>/changeset/</code>, and get <code>changeset_id</code></li>\n<li>Create record using <code>changeset id</code> using POST <code>/record/</code></li>\n<li>Create record using <code>changeset id</code> using POST <code>/record/</code></li>\n<li>Create record using <code>changeset id</code> using POST <code>/record/</code> (etc...)</li>\n<li>Commit changeset  using POST <code>/changeset/&lt;id&gt;</code> with <code>status: &quot;committed&quot;</code>. Then all the records in the changeset become &quot;committed&quot;.</li>\n</ol>\n<p>I'd like to bundle this in my terraform provider, so that I can write something like:</p>\n<pre><code>resource my-record &quot;1&quot; {...}\n\nresource my-record &quot;2&quot; {...}\n\nresource my-record &quot;3&quot; {...}\n</code></pre>\n<p>and have all of the records committed as part of one changeset. Any changes to records within the terraform instance should also follow the logic of:</p>\n<ol>\n<li>Create changeset</li>\n<li>change a bunch of records</li>\n<li>Commit changeset</li>\n</ol>\n<p>Is there a way to accomplish this in the <code>terraform-plugin-sdk</code> ? Like somehow creating a common context for resources of the same type?</p>\n<p>Right now I'm creating and committing a changeset for every record, which is expensive.</p>\n", "OwnerUserId": "5932433", "LastActivityDate": "2021-09-01T05:43:08.767", "Title": "Handling a \"Changeset\" in a terraform provider", "Tags": "<go><terraform><terraform0.12+><terraform-template-file>", "AnswerCount": "1", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "249372366", "PostHistoryTypeId": "2", "PostId": "68184252", "RevisionGUID": "7c830846-7086-4af3-8458-7478241b4dee", "CreationDate": "2021-06-29T18:57:33.930", "UserId": "5932433", "Text": "I have an api that works as follows:\r\n\r\n1. Create Changeset using POST `/changeset/`, and get `changeset_id`\r\n2. Create record using `changeset id` using POST `/record/`\r\n3. Create record using `changeset id` using POST `/record/`\r\n4. Create record using `changeset id` using POST `/record/` (etc...)\r\n5. Commit changeset  using POST `/changeset/<id>` with `status: \"committed\"`. Then all the records in the changeset become \"committed\".\r\n\r\nI'd like to bundle this in my terraform provider, so that I can write something like:\r\n\r\n```\r\nresource my-record \"1\" {...}\r\n\r\nresource my-record \"2\" {...}\r\n\r\nresource my-record \"3\" {...}\r\n```\r\n\r\nand have all of the records committed as part of one changeset. Any changes to records within the terraform instance should also follow the logic of:\r\n\r\n1. Create changeset\r\n2. change a bunch of records\r\n3. Commit changeset\r\n\r\nIs there a way to accomplish this in the `terraform-plugin-sdk` ? Like somehow creating a common context for resources of the same type?\r\n\r\nRight now I'm creating and committing a changeset for every record, which is expensive.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have an api that works as follows: 1. Create Changeset using POST `/changeset/`, and get `changeset_id` 2. Create record using `changeset id` using POST `/record/` 3. Create record using `changeset id` using POST `/record/` 4. Create record using `changeset id` using POST `/record/` (etc...) 5. Commit changeset using POST `/changeset/` with `status: \"committed\"`. ", "keywords": ["change"]}, {"source": "Text", "text": "Then all the records in the changeset become \"committed\". ", "keywords": ["change"]}, {"source": "Text", "text": "I'd like to bundle this in my terraform provider, so that I can write something like: ``` resource my-record \"1\" {...} resource my-record \"2\" {...} resource my-record \"3\" {...} ``` and have all of the records committed as part of one changeset. ", "keywords": ["provider", "change"]}, {"source": "Text", "text": "Any changes to records within the terraform instance should also follow the logic of: 1. ", "keywords": ["instance", "change"]}, {"source": "Text", "text": "Create changeset 2. change a bunch of records ", "keywords": ["change"]}, {"source": "Text", "text": "Commit changeset ", "keywords": ["change"]}, {"source": "Text", "text": "Right now I'm creating and committing a changeset for every record, which is expensive.", "keywords": ["expense", "change"]}]}, {"Id": "249372367", "PostHistoryTypeId": "1", "PostId": "68184252", "RevisionGUID": "7c830846-7086-4af3-8458-7478241b4dee", "CreationDate": "2021-06-29T18:57:33.930", "UserId": "5932433", "Text": "Handling a \"Changeset\" in a terraform provider", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Handling a \"Changeset\" in a terraform provider", "keywords": ["provider", "change"]}]}, {"Id": "249372368", "PostHistoryTypeId": "3", "PostId": "68184252", "RevisionGUID": "7c830846-7086-4af3-8458-7478241b4dee", "CreationDate": "2021-06-29T18:57:33.930", "UserId": "5932433", "Text": "<go><terraform><terraform0.12+><terraform-template-file>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "69008328", "PostTypeId": "2", "ParentId": "68184252", "CreationDate": "2021-09-01T05:43:08.767", "Score": "0", "Body": "<p>Unfortunately, this setup is currently unsupported in terraform, see related <a href=\"https://github.com/hashicorp/terraform-plugin-sdk/issues/63\" rel=\"nofollow noreferrer\">issue</a>.</p>\n<p>One workaround you can use is to nest these resources into one &quot;meta&quot; resource, so you can create a changeset, add multiple records, and commit it inside one terraform resource. Your config will then look similar to this:</p>\n<pre><code>resource &quot;myprovider_changeset&quot; &quot;test&quot; {\n  record {\n    name = &quot;1&quot;\n    ...\n  }\n\n  record {\n    name = &quot;2&quot;\n    ...\n  }\n}\n</code></pre>\n<p>Basic idea for implementation would be to have a meta resource with <a href=\"https://www.terraform.io/docs/extend/schemas/schema-types.html#typeset\" rel=\"nofollow noreferrer\"><code>schema.TypeSet</code></a> attributes that define schemas for nested resources and then loop through these sets inside <code>Create</code>/<code>Update</code>/<code>Delete</code> functions.</p>\n<p>An example of providers doing the same is <a href=\"https://registry.terraform.io/providers/fastly/fastly/latest/docs/resources/service_v1\" rel=\"nofollow noreferrer\">fastly provider service_v1 resource</a>. You can check how this is implemented: <a href=\"https://github.com/fastly/terraform-provider-fastly/blob/main/fastly/base_fastly_service_v1.go\" rel=\"nofollow noreferrer\">meta resoruce</a>, <a href=\"https://github.com/fastly/terraform-provider-fastly/blob/main/fastly/block_fastly_service_v1_backend.go\" rel=\"nofollow noreferrer\">example of nested resource</a>.</p>\n", "OwnerUserId": "5169262", "LastActivityDate": "2021-09-01T05:43:08.767", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "252964916", "PostHistoryTypeId": "2", "PostId": "69008328", "RevisionGUID": "fc7505d6-b2a2-470a-b89a-65eaa70ab127", "CreationDate": "2021-09-01T05:43:08.767", "UserId": "5169262", "Text": "Unfortunately, this setup is currently unsupported in terraform, see related [issue](https://github.com/hashicorp/terraform-plugin-sdk/issues/63).\r\n\r\nOne workaround you can use is to nest these resources into one \"meta\" resource, so you can create a changeset, add multiple records, and commit it inside one terraform resource. Your config will then look similar to this:\r\n```hcl\r\nresource \"myprovider_changeset\" \"test\" {\r\n  record {\r\n    name = \"1\"\r\n    ...\r\n  }\r\n\r\n  record {\r\n    name = \"2\"\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\n\r\nBasic idea for implementation would be to have a meta resource with [`schema.TypeSet`](https://www.terraform.io/docs/extend/schemas/schema-types.html#typeset) attributes that define schemas for nested resources and then loop through these sets inside `Create`/`Update`/`Delete` functions.\r\n\r\nAn example of providers doing the same is [fastly provider service_v1 resource](https://registry.terraform.io/providers/fastly/fastly/latest/docs/resources/service_v1). You can check how this is implemented: [meta resoruce](https://github.com/fastly/terraform-provider-fastly/blob/main/fastly/base_fastly_service_v1.go), [example of nested resource](https://github.com/fastly/terraform-provider-fastly/blob/main/fastly/block_fastly_service_v1_backend.go).", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "One workaround you can use is to nest these resources into one \"meta\" resource, so you can create a changeset, add multiple records, and commit it inside one terraform resource. ", "keywords": ["change"]}, {"source": "Text", "text": "Your config will then look similar to this: ```hcl resource \"myprovider_changeset\" \"test\" { record { name = \"1\" ... } record { name = \"2\" ... } } ``` ", "keywords": ["test"]}, {"source": "Text", "text": "An example of providers doing the same is [fastly provider service_v1 resource](https://registry.terraform.io/providers/fastly/fastly/latest/docs/resources/service_v1). ", "keywords": ["provider"]}, {"source": "Text", "text": "You can check how this is implemented: [meta resoruce](https://github.com/fastly/terraform-provider-fastly/blob/main/fastly/base_fastly_service_v1.go), [example of nested resource](https://github.com/fastly/terraform-provider-fastly/blob/main/fastly/block_fastly_service_v1_backend.go).", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "One workaround you can use is to nest these resources into one \"meta\" resource, so you can create a changeset, add multiple records, and commit it inside one terraform resource. ", "keywords": ["change"]}, {"source": "Body", "text": "An example of providers doing the same is fastly provider service_v1 resource. ", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Handling a \"Changeset\" in a terraform provider", "keywords": ["provider", "change"]}, {"source": "Body", "text": "I have an api that works as follows: Create Changeset using POST /changeset/, and get changeset_id Create record using changeset id using POST /record/ Create record using changeset id using POST /record/ Create record using changeset id using POST /record/ (etc...) Commit changeset using POST /changeset/<id> with status: \"committed\". ", "keywords": ["change"]}, {"source": "Body", "text": "Then all the records in the changeset become \"committed\". ", "keywords": ["change"]}, {"source": "Body", "text": "I'd like to bundle this in my terraform provider, so that I can write something like: and have all of the records committed as part of one changeset. ", "keywords": ["provider", "change"]}, {"source": "Body", "text": "Any changes to records within the terraform instance should also follow the logic of: Create changeset change a bunch of records ", "keywords": ["instance", "change"]}, {"source": "Body", "text": "Commit changeset ", "keywords": ["change"]}, {"source": "Body", "text": "Right now I'm creating and committing a changeset for every record, which is expensive.", "keywords": ["expense", "change"]}]}