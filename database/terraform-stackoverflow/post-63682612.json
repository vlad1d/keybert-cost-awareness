{"Id": "63682612", "PostTypeId": "1", "AcceptedAnswerId": "63686088", "CreationDate": "2020-09-01T06:40:58.040", "Score": "0", "ViewCount": "6678", "Body": "<p>I have a below terraofrm code to fetch parameter from store</p>\n<pre><code>data &quot;aws_ssm_parameter&quot; &quot;foo&quot; {\n name = &quot;password&quot;\nwith_decryption = false\n}\n\nmodule &quot;lambda_env_vars&quot; {\nNew_password = data.aws_ssm_parameter.foo.value\n}\n\nplan output:-\nNew_password = Q#iuws##)9ssdhs(some encryptrd value)\n</code></pre>\n<p>How can I decrypt this to plain text in the lambda function?</p>\n<p>sample code I have been trying.</p>\n<pre><code>import boto3\nimport os\n\nfrom base64 import b64decode\n\ndef lambda_handler(event, context):\n    encrypted = os.environ['New_password']\n    decrypted = boto3.client('kms').decrypt(CiphertextBlob=b64decode(encrypted))['Plaintext']\n\n    print(&quot;Decrypted value:&quot;, decrypted)\n</code></pre>\n", "OwnerUserId": "11020763", "LastActivityDate": "2020-09-12T16:10:17.633", "Title": "How to decrypt ssm parameter secure string value returned by terraform data resource", "Tags": "<aws-lambda><terraform><boto3><terraform-provider-aws><amazon-kms>", "AnswerCount": "2", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "112613276", "PostId": "63682612", "Score": "1", "Text": "why don't you just use boto3 to retrieve the decrypted parameter instead of splitting that logic into two? What is the error your currently get?", "CreationDate": "2020-09-01T07:53:29.700", "UserId": "2442804", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112613427", "PostId": "63682612", "Score": "0", "Text": "Did you encrypt the ssm parameter with the default key? If so: did you change the key policy of that key? Is your lambda allowed to decrypt *anything*?", "CreationDate": "2020-09-01T07:59:07.860", "UserId": "2442804", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "If so: did you change the key policy of that key? ", "keywords": ["policy", "change"]}]}, {"Id": "112613443", "PostId": "63682612", "Score": "0", "Text": "What is the problem? Any error messages?", "CreationDate": "2020-09-01T07:59:49.453", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112617690", "PostId": "63682612", "Score": "0", "Text": "I don't have python knowledge,i am asking for sample code. I just tried that example from Google once and got error \"invalidciphertextexception\".", "CreationDate": "2020-09-01T10:28:58.103", "UserId": "11020763", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "229920286", "PostHistoryTypeId": "2", "PostId": "63682612", "RevisionGUID": "0303c507-ecc9-4e37-b798-f9cb2bd05fa7", "CreationDate": "2020-09-01T06:40:58.040", "UserId": "11020763", "Text": "I have a below terraofrm code to fetch parameter from store\r\n```\r\ndata \"aws_ssm_parameter\" \"foo\" {\r\n name = \"password\"\r\nwith_decryption = false\r\n}\r\n\r\nmodule \"lambda_env_vars\" {\r\nNew_password = data.aws_ssm_parameter.foo.value\r\n}\r\n\r\nplan output:-\r\nNew_password = Q#iuws##)9ssdhs(some encryptrd value)\r\n```\r\nHow can I decrypt this to plain text in the lambda function?\r\n\r\nsample code I have been trying.\r\n```\r\nimport boto3\r\nimport os\r\n\r\nfrom base64 import b64decode\r\n\r\ndef lambda_handler(event, context):\r\n    encrypted = os.environ['New_password']\r\n    decrypted = boto3.client('kms').decrypt(CiphertextBlob=b64decode(encrypted))['Plaintext']\r\n\r\n    print(\"Decrypted value:\", decrypted)\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "229920287", "PostHistoryTypeId": "1", "PostId": "63682612", "RevisionGUID": "0303c507-ecc9-4e37-b798-f9cb2bd05fa7", "CreationDate": "2020-09-01T06:40:58.040", "UserId": "11020763", "Text": "How to decrypt ssm parameter secure string value returned by terraform data resource", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "229920288", "PostHistoryTypeId": "3", "PostId": "63682612", "RevisionGUID": "0303c507-ecc9-4e37-b798-f9cb2bd05fa7", "CreationDate": "2020-09-01T06:40:58.040", "UserId": "11020763", "Text": "<aws-lambda><terraform><boto3><terraform-provider-aws><amazon-kms>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "63686088", "PostTypeId": "2", "ParentId": "63682612", "CreationDate": "2020-09-01T10:42:22.367", "Score": "2", "Body": "<p>After some research, I found that The AWS Encryption SDK cryptographically binds the encryption context to the encrypted data <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/services-parameter-store.html#parameter-store-encryption-context\" rel=\"nofollow noreferrer\">reference</a> so we have to use the same to decrypt. <strong>EncryptionContext</strong> solved the issue for me.</p>\n<p><strong>Note: This is Node js code</strong></p>\n<pre><code>const aws = require('aws-sdk')\nconst kms = new aws.KMS()\nexports.handler = async (event, context, callback) =&gt; {\n  var password_json = JSON.parse(process.env.New_password)\n  let params = {\n    CiphertextBlob: Buffer.from(password_json['value'], 'base64'),\n     EncryptionContext: {\n        'PARAMETER_ARN': password_json['arn']\n    }\n  }\n\n  let secret = null\n    const decrypted = await kms.decrypt(params).promise()\n\n          secret = decrypted.Plaintext.toString('utf-8')\n    \n  return secret;\n}\n</code></pre>\n<p><strong>Terraform Change</strong></p>\n<pre><code>module &quot;lambda_env_vars&quot; {\nNew_password = jsonencode(data.aws_ssm_parameter.foo)\n}\n</code></pre>\n<p><strong>ENV vars at lambda console looks like</strong></p>\n<pre><code>New_password {&quot;arn&quot;:&quot;arn:aws:ssm:xxxxx:41xxxxx:parameter/password&quot;,&quot;id&quot;:&quot;password&quot;,&quot;name&quot;:&quot;password&quot;,&quot;type&quot;:&quot;SecureString&quot;,&quot;value&quot;:&quot;xxxxxxxx&quot;,&quot;version&quot;:2,&quot;with_decryption&quot;:false}\n</code></pre>\n<p>This way(jsonencode) we can also avoid hardcoding parameter ARN inside code.</p>\n", "OwnerUserId": "11020763", "LastEditorUserId": "11020763", "LastEditDate": "2020-09-12T16:08:46.093", "LastActivityDate": "2020-09-12T16:08:46.093", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "112618296", "PostId": "63686088", "Score": "1", "Text": "Why are you passing the encrypted secret to the Lambda function at all instead of just fetching it from SSM parameter store decrypted in the Lambda function?", "CreationDate": "2020-09-01T10:50:19.310", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112621354", "PostId": "63686088", "Score": "0", "Text": "You should not ask a question in your answer. But the answer would be: the same way you get the encrypted password, by passing the arn as an environment variable. But still the question remains: why do you pass in the encrypted password in the first place, pass in the name of the password and just call a `get_parameter` on `ssm` instead of `decrypt` on `kms`.", "CreationDate": "2020-09-01T12:40:55.803", "UserId": "2442804", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112621834", "PostId": "63686088", "Score": "1", "Text": "From the docs you yourself linked: *\"You can decrypt an encrypted secure string parameter value by calling the AWS KMS Decrypt operation with the correct encryption context and the encrypted parameter value that the Systems Manager GetParameter operation returns. However, we encourage you to decrypt Parameter Store parameter values by using the GetParameter operation with the WithDecryption parameter.\"*", "CreationDate": "2020-09-01T12:56:35.703", "UserId": "2442804", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "112622729", "PostId": "63686088", "Score": "0", "Text": "Because in our case number of API calls to decrypt from SSM is huge which is most expensive than kms. so just as cost effective solution using Kms instead SSM decrypt.", "CreationDate": "2020-09-01T13:22:54.267", "UserId": "11020763", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Because in our case number of API calls to decrypt from SSM is huge which is most expensive than kms. so just as cost effective solution using Kms instead SSM decrypt.", "keywords": ["cost", "expense"]}]}, {"Id": "112644900", "PostId": "63686088", "Score": "0", "Text": "Then you should just cache the parameter retrieval in the lambda, cache indefinitely since it will never change anyway. There is no point in decrypting / getting the parameter for every lambda invocation but just once when the lambda execution environment is created.", "CreationDate": "2020-09-02T08:12:05.090", "UserId": "2442804", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Then you should just cache the parameter retrieval in the lambda, cache indefinitely since it will never change anyway. ", "keywords": ["change"]}]}], "history": [{"Id": "229934914", "PostHistoryTypeId": "2", "PostId": "63686088", "RevisionGUID": "a0ec4b1f-346c-4056-8640-35979fd951f1", "CreationDate": "2020-09-01T10:42:22.367", "UserId": "11020763", "Text": "After some research, I found that The AWS Encryption SDK cryptographically binds the encryption context to the encrypted data [reference](https://docs.aws.amazon.com/kms/latest/developerguide/services-parameter-store.html#parameter-store-encryption-context) so we have to use the same to decrypt. **EncryptionContext** in [boto3 usage](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kms.html) solved the issue for me.\r\n```\r\nimport base64\r\nimport boto3\r\nimport os\r\ndef decrypt(session, secret):\r\n    client = session.client('kms')\r\n    plaintext = client.decrypt(\r\n        CiphertextBlob=bytes(base64.b64decode(secret)),\r\n        EncryptionContext={\r\n        'PARAMETER_ARN': 'arn:aws:ssm:us-east-1:xxxxx:parameter/test'\r\n    }\r\n    )\r\n    return plaintext[\"Plaintext\"]\r\n\r\nsession = boto3.session.Session()\r\nencrypted = os.environ['New_password']\r\n\r\nprint decrypt(session, encrypted)\r\n```\r\nNow the problem is how can I avoid hard coding PARAMETER_ARN for each parameter reference?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "**EncryptionContext** in [boto3 usage](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kms.html) solved the issue for me. ``` import base64 import boto3 import os def decrypt(session, secret): client = session.client('kms') plaintext = client.decrypt( CiphertextBlob=bytes(base64.b64decode(secret)), EncryptionContext={ 'PARAMETER_ARN': 'arn:aws:ssm:us-east-1:xxxxx:parameter/test' } ) return plaintext[\"Plaintext\"] session = boto3.session.Session() encrypted = os.environ['New_password'] print decrypt(session, encrypted) ``` ", "keywords": ["test"]}]}, {"Id": "230694648", "PostHistoryTypeId": "5", "PostId": "63686088", "RevisionGUID": "370f5a3a-f42d-4f5f-9978-18788d7d0120", "CreationDate": "2020-09-12T16:08:46.093", "UserId": "11020763", "Comment": "added 337 characters in body", "Text": "After some research, I found that The AWS Encryption SDK cryptographically binds the encryption context to the encrypted data [reference](https://docs.aws.amazon.com/kms/latest/developerguide/services-parameter-store.html#parameter-store-encryption-context) so we have to use the same to decrypt. **EncryptionContext** solved the issue for me.\r\n\r\n**Note: This is Node js code**\r\n\r\n```\r\nconst aws = require('aws-sdk')\r\nconst kms = new aws.KMS()\r\nexports.handler = async (event, context, callback) => {\r\n  var password_json = JSON.parse(process.env.New_password)\r\n  let params = {\r\n    CiphertextBlob: Buffer.from(password_json['value'], 'base64'),\r\n     EncryptionContext: {\r\n        'PARAMETER_ARN': password_json['arn']\r\n    }\r\n  }\r\n\r\n  let secret = null\r\n    const decrypted = await kms.decrypt(params).promise()\r\n\r\n          secret = decrypted.Plaintext.toString('utf-8')\r\n    \r\n  return secret;\r\n}\r\n```\r\n\r\n**Terraform Change**\r\n```\r\nmodule \"lambda_env_vars\" {\r\nNew_password = jsonencode(data.aws_ssm_parameter.foo)\r\n}\r\n```\r\n\r\n**ENV vars at lambda console looks like**\r\n```\r\nNew_password {\"arn\":\"arn:aws:ssm:xxxxx:41xxxxx:parameter/password\",\"id\":\"password\",\"name\":\"password\",\"type\":\"SecureString\",\"value\":\"xxxxxxxx\",\"version\":2,\"with_decryption\":false}\r\n````\r\n\r\nThis way(jsonencode) we can also avoid hardcoding parameter ARN inside code.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "**Note: This is Node js code** ``` const aws = require('aws-sdk') const kms = new aws.KMS() exports.handler = async (event, context, callback) => { var password_json = JSON.parse(process.env.New_password) let params = { CiphertextBlob: Buffer.from(password_json['value'], 'base64'), EncryptionContext: { 'PARAMETER_ARN': password_json['arn'] } } let secret = null const decrypted = await kms.decrypt(params).promise() secret = decrypted.Plaintext.toString('utf-8') return secret; } ``` **Terraform Change** ``` module \"lambda_env_vars\" { New_password = jsonencode(data.aws_ssm_parameter.foo) } ``` ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "Note: This is Node js code Terraform Change ENV vars at lambda console looks like This way(jsonencode) we can also avoid hardcoding parameter ARN inside code.", "keywords": ["change"]}]}, {"Id": "63862316", "PostTypeId": "2", "ParentId": "63682612", "CreationDate": "2020-09-12T16:10:17.633", "Score": "0", "Body": "<p>Below is the python code with hardcoded parameter ARN</p>\n<pre><code>import base64\nimport boto3\nimport os\ndef decrypt(session, secret):\n    client = session.client('kms')\n    plaintext = client.decrypt(\n        CiphertextBlob=bytes(base64.b64decode(secret)),\n        EncryptionContext={\n        'PARAMETER_ARN': 'arn:aws:ssm:us-east-1:xxxxx:parameter/password'\n    }\n    )\n    return plaintext[&quot;Plaintext&quot;]\n\nsession = boto3.session.Session()\nencrypted = os.environ['New_password']\n\nprint decrypt(session, encrypted)\n</code></pre>\n", "OwnerUserId": "11020763", "LastActivityDate": "2020-09-12T16:10:17.633", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "230694707", "PostHistoryTypeId": "2", "PostId": "63862316", "RevisionGUID": "0423026e-bc66-4984-9c52-50e0a969a519", "CreationDate": "2020-09-12T16:10:17.633", "UserId": "11020763", "Text": "Below is the python code with hardcoded parameter ARN\r\n```\r\nimport base64\r\nimport boto3\r\nimport os\r\ndef decrypt(session, secret):\r\n    client = session.client('kms')\r\n    plaintext = client.decrypt(\r\n        CiphertextBlob=bytes(base64.b64decode(secret)),\r\n        EncryptionContext={\r\n        'PARAMETER_ARN': 'arn:aws:ssm:us-east-1:xxxxx:parameter/password'\r\n    }\r\n    )\r\n    return plaintext[\"Plaintext\"]\r\n\r\nsession = boto3.session.Session()\r\nencrypted = os.environ['New_password']\r\n\r\nprint decrypt(session, encrypted)\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}