{"Id": "73226483", "PostTypeId": "1", "CreationDate": "2022-08-03T18:58:07.010", "Score": "0", "ViewCount": "643", "Body": "<h1>Given</h1>\n<p>I have this code in terraform module (file <code>newrelic_nrql.tf</code>):</p>\n<pre><code>resource &quot;newrelic_nrql_alert_condition&quot; &quot;additional_alerts_condition&quot; {\n  count = length(var.additional_alerts)\n\n  account_id = var.newrelic_account_id\n  policy_id  = newrelic_alert_policy.policy.id\n\n  name        = format(&quot;%s-%s&quot;, local.container_name, var.additional_alerts[count.index].name_suffix)\n  type        = &quot;static&quot;\n  runbook_url = var.runbook_url\n  enabled     = var.additional_alerts[count.index].enabled\n\n  warning {\n    operator              = var.additional_alerts[count.index].operator\n    threshold             = var.additional_alerts[count.index].warning_threshold\n    threshold_duration    = var.additional_alerts[count.index].duration\n    threshold_occurrences = var.additional_alerts[count.index].occurences\n  }\n\n  critical {\n    operator              = var.additional_alerts[count.index].operator\n    threshold             = var.additional_alerts[count.index].critical_threshold\n    threshold_duration    = var.additional_alerts[count.index].duration\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\n  }\n\n  nrql {\n    query = var.additional_alerts[count.index].query\n  }\n\n  aggregation_window = 60\n  aggregation_method = &quot;event_flow&quot;\n  aggregation_delay  = 120\n\n  slide_by                     = 30\n  violation_time_limit_seconds = 3600\n}\n</code></pre>\n<p>It receives configuration from module input variable <code>var.additional_alerts</code>, that is a list of objects:</p>\n<pre><code>variable &quot;additional_alerts&quot; {\n  description = &quot;List of a custom alerts in case you need to create your own one&quot;\n  type = list(object({\n    name_suffix        = string\n    enabled            = bool\n    operator           = string\n    warning_enabled    = bool\n    warning_threshold  = number\n    critical_threshold = number\n    duration           = number\n    occurrences        = string\n    query              = string\n  }))\n  default = []\n}\n</code></pre>\n<h1>Goal</h1>\n<p>Please pay attention to object variable <code>warning_enabled = bool</code></p>\n<p>My goal is to enable or disable (remove) <code>warning</code> block from resource <code>&quot;additional_alerts_condition&quot;</code> conditionally, depending on variable <code>warning_enabled</code> value.</p>\n<p>For example. If <code>warning_enabled = true</code>, terraform resource should have both warning and critical blocks:</p>\n<pre><code> warning {\n    operator              = var.additional_alerts[count.index].operator\n    threshold             = var.additional_alerts[count.index].warning_threshold\n    threshold_duration    = var.additional_alerts[count.index].duration\n    threshold_occurrences = var.additional_alerts[count.index].occurences\n  }\n\n  critical {\n    operator              = var.additional_alerts[count.index].operator\n    threshold             = var.additional_alerts[count.index].critical_threshold\n    threshold_duration    = var.additional_alerts[count.index].duration\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\n  }\n</code></pre>\n<p>And if <code>warning_enabled = false</code>, terraform resource should have critical block only:</p>\n<pre><code>  critical {\n    operator              = var.additional_alerts[count.index].operator\n    threshold             = var.additional_alerts[count.index].critical_threshold\n    threshold_duration    = var.additional_alerts[count.index].duration\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\n  }\n</code></pre>\n<h1>What I've tried</h1>\n<p>I created 2 similar resources - 1st containing both critical and warning, 2nd - containing critical only. And tried to play with <code>count</code> expression, so only one of specified resources will be created.</p>\n<p>Warning + Critical:</p>\n<pre><code>resource &quot;newrelic_nrql_alert_condition&quot; &quot;additional_alerts_condition_full&quot; {\n  count = var.additional_alerts[count.index].warning_enabled == true ? length(var.additional_alerts) : 0\n\n  account_id = var.newrelic_account_id\n  policy_id  = newrelic_alert_policy.policy.id\n\n  name        = format(&quot;%s-%s&quot;, local.container_name, var.additional_alerts[count.index].name_suffix)\n  type        = &quot;static&quot;\n  runbook_url = var.runbook_url\n  enabled     = var.additional_alerts[count.index].enabled\n\n  warning {\n    operator              = var.additional_alerts[count.index].operator\n    threshold             = var.additional_alerts[count.index].warning_threshold\n    threshold_duration    = var.additional_alerts[count.index].duration\n    threshold_occurrences = var.additional_alerts[count.index].occurences\n  }\n\n  critical {\n    operator              = var.additional_alerts[count.index].operator\n    threshold             = var.additional_alerts[count.index].critical_threshold\n    threshold_duration    = var.additional_alerts[count.index].duration\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\n  }\n// omitted code\n}\n</code></pre>\n<p>Critical only:</p>\n<pre><code>resource &quot;newrelic_nrql_alert_condition&quot; &quot;additional_alerts_condition&quot; {\n  count = var.additional_alerts[count.index].warning_enabled == true ? 0 : length(var.additional_alerts)\n\n  account_id = var.newrelic_account_id\n  policy_id  = newrelic_alert_policy.policy.id\n\n  name        = format(&quot;%s-%s&quot;, local.container_name, var.additional_alerts[count.index].name_suffix)\n  type        = &quot;static&quot;\n  runbook_url = var.runbook_url\n  enabled     = var.additional_alerts[count.index].enabled\n\n  critical {\n    operator              = var.additional_alerts[count.index].operator\n    threshold             = var.additional_alerts[count.index].critical_threshold\n    threshold_duration    = var.additional_alerts[count.index].duration\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\n  }\n// omitted code\n}\n</code></pre>\n<p>In this case I'm getting error:</p>\n<pre><code>Error: Reference to &quot;count&quot; in non-counted context\n \non .terraform/modules/new_relic/newrelic_nrql.tf line 175, in resource &quot;newrelic_nrql_alert_condition&quot; &quot;additional_alerts_condition_full&quot;:\n175:   count = var.additional_alerts[count.index].warning_enabled == true ? length(var.additional_alerts) : 0\n\non .terraform/modules/new_relic/newrelic_nrql.tf line 213, in resource &quot;newrelic_nrql_alert_condition&quot; &quot;additional_alerts_condition&quot;:\n213:   count = var.additional_alerts[count.index].warning_enabled == true ? 0 : length(var.additional_alerts)\n</code></pre>\n<p>Could anyone please suggest how to fix my code?</p>\n<p>Or how this goal can be achieved with other design/approach?</p>\n", "OwnerUserId": "4137300", "LastActivityDate": "2022-08-10T12:19:37.607", "Title": "How to make optional block inside Terraform resource?", "Tags": "<terraform><newrelic>", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129324551", "PostId": "73226483", "Score": "4", "Text": "You can implement conditional blocks with https://stackoverflow.com/questions/69034600/terraform-only-use-properties-if-value-is-greater-than-one/69035305#69035305.", "CreationDate": "2022-08-03T19:18:48.247", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "1996473393", "CreationDate": "2022-08-03T19:18:48.247", "PostId": "73226483", "RelatedPostId": "69034600", "LinkTypeId": "1"}], "history": [{"Id": "275539417", "PostHistoryTypeId": "2", "PostId": "73226483", "RevisionGUID": "bf041963-fe17-45e1-8ffa-b95cb0437662", "CreationDate": "2022-08-03T18:58:07.010", "UserId": "4137300", "Text": "# Given\r\nI have this code in terraform module (file `newrelic_nrql.tf`):\r\n```\r\nresource \"newrelic_nrql_alert_condition\" \"additional_alerts_condition\" {\r\n  count = length(var.additional_alerts)\r\n\r\n  account_id = var.newrelic_account_id\r\n  policy_id  = newrelic_alert_policy.policy.id\r\n\r\n  name        = format(\"%s-%s\", local.container_name, var.additional_alerts[count.index].name_suffix)\r\n  type        = \"static\"\r\n  runbook_url = var.runbook_url\r\n  enabled     = var.additional_alerts[count.index].enabled\r\n\r\n  warning {\r\n    operator              = var.additional_alerts[count.index].operator\r\n    threshold             = var.additional_alerts[count.index].warning_threshold\r\n    threshold_duration    = var.additional_alerts[count.index].duration\r\n    threshold_occurrences = var.additional_alerts[count.index].occurences\r\n  }\r\n\r\n  critical {\r\n    operator              = var.additional_alerts[count.index].operator\r\n    threshold             = var.additional_alerts[count.index].critical_threshold\r\n    threshold_duration    = var.additional_alerts[count.index].duration\r\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\r\n  }\r\n\r\n  nrql {\r\n    query = var.additional_alerts[count.index].query\r\n  }\r\n\r\n  aggregation_window = 60\r\n  aggregation_method = \"event_flow\"\r\n  aggregation_delay  = 120\r\n\r\n  slide_by                     = 30\r\n  violation_time_limit_seconds = 3600\r\n}\r\n```\r\nIt receives configuration from module input variable `var.additional_alerts`, that is a list of objects:\r\n```\r\nvariable \"additional_alerts\" {\r\n  description = \"List of a custom alerts in case you need to create your own one\"\r\n  type = list(object({\r\n    name_suffix        = string\r\n    enabled            = bool\r\n    operator           = string\r\n    warning_enabled    = bool\r\n    warning_threshold  = number\r\n    critical_threshold = number\r\n    duration           = number\r\n    occurrences        = string\r\n    query              = string\r\n  }))\r\n  default = []\r\n}\r\n```\r\n# Goal\r\n\r\nPlease pay attention to object variable `warning_enabled = bool`\r\n\r\nMy goal is to enable or disable (remove) `warning` block from resource `\"additional_alerts_condition\"` conditionally, depending on variable `warning_enabled` value.\r\n\r\nFor example. If `warning_enabled = true`, terraform resource should have both warning and critical blocks:\r\n```\r\n warning {\r\n    operator              = var.additional_alerts[count.index].operator\r\n    threshold             = var.additional_alerts[count.index].warning_threshold\r\n    threshold_duration    = var.additional_alerts[count.index].duration\r\n    threshold_occurrences = var.additional_alerts[count.index].occurences\r\n  }\r\n\r\n  critical {\r\n    operator              = var.additional_alerts[count.index].operator\r\n    threshold             = var.additional_alerts[count.index].critical_threshold\r\n    threshold_duration    = var.additional_alerts[count.index].duration\r\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\r\n  }\r\n```\r\nAnd if `warning_enabled = false`, terraform resource should have critical block only:\r\n```\r\n  critical {\r\n    operator              = var.additional_alerts[count.index].operator\r\n    threshold             = var.additional_alerts[count.index].critical_threshold\r\n    threshold_duration    = var.additional_alerts[count.index].duration\r\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\r\n  }\r\n```\r\n# What I've tried\r\n\r\nI created 2 similar resources - 1st containing both critical and warning, 2nd - containing critical only. And tried to play with `count` expression, so only one of specified resources will be created.\r\n\r\nWarning + Critical:\r\n\r\n```\r\nresource \"newrelic_nrql_alert_condition\" \"additional_alerts_condition_full\" {\r\n  count = var.additional_alerts[count.index].warning_enabled == true ? length(var.additional_alerts) : 0\r\n\r\n  account_id = var.newrelic_account_id\r\n  policy_id  = newrelic_alert_policy.policy.id\r\n\r\n  name        = format(\"%s-%s\", local.container_name, var.additional_alerts[count.index].name_suffix)\r\n  type        = \"static\"\r\n  runbook_url = var.runbook_url\r\n  enabled     = var.additional_alerts[count.index].enabled\r\n\r\n  warning {\r\n    operator              = var.additional_alerts[count.index].operator\r\n    threshold             = var.additional_alerts[count.index].warning_threshold\r\n    threshold_duration    = var.additional_alerts[count.index].duration\r\n    threshold_occurrences = var.additional_alerts[count.index].occurences\r\n  }\r\n\r\n  critical {\r\n    operator              = var.additional_alerts[count.index].operator\r\n    threshold             = var.additional_alerts[count.index].critical_threshold\r\n    threshold_duration    = var.additional_alerts[count.index].duration\r\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\r\n  }\r\n// omitted code\r\n}\r\n```\r\n\r\nCritical only:\r\n\r\n```\r\nresource \"newrelic_nrql_alert_condition\" \"additional_alerts_condition\" {\r\n  count = var.additional_alerts[count.index].warning_enabled == true ? 0 : length(var.additional_alerts)\r\n\r\n  account_id = var.newrelic_account_id\r\n  policy_id  = newrelic_alert_policy.policy.id\r\n\r\n  name        = format(\"%s-%s\", local.container_name, var.additional_alerts[count.index].name_suffix)\r\n  type        = \"static\"\r\n  runbook_url = var.runbook_url\r\n  enabled     = var.additional_alerts[count.index].enabled\r\n\r\n  critical {\r\n    operator              = var.additional_alerts[count.index].operator\r\n    threshold             = var.additional_alerts[count.index].critical_threshold\r\n    threshold_duration    = var.additional_alerts[count.index].duration\r\n    threshold_occurrences = var.additional_alerts[count.index].occurrences\r\n  }\r\n// omitted code\r\n}\r\n```\r\n\r\nIn this case I'm getting error:\r\n\r\n```\r\nError: Reference to \"count\" in non-counted context\r\n \r\non .terraform/modules/new_relic/newrelic_nrql.tf line 175, in resource \"newrelic_nrql_alert_condition\" \"additional_alerts_condition_full\":\r\n175:   count = var.additional_alerts[count.index].warning_enabled == true ? length(var.additional_alerts) : 0\r\n\r\non .terraform/modules/new_relic/newrelic_nrql.tf line 213, in resource \"newrelic_nrql_alert_condition\" \"additional_alerts_condition\":\r\n213:   count = var.additional_alerts[count.index].warning_enabled == true ? 0 : length(var.additional_alerts)\r\n```\r\nCould anyone please suggest how to fix my code?\r\n\r\nOr how this goal can be achieved with other design/approach?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "# Given I have this code in terraform module (file `newrelic_nrql.tf`): ``` resource \"newrelic_nrql_alert_condition\" \"additional_alerts_condition\" { count = length(var.additional_alerts) account_id = var.newrelic_account_id policy_id = newrelic_alert_policy.policy.id name = format(\"%s-%s\", local.container_name, var.additional_alerts[count.index].name_suffix) type = \"static\" runbook_url = var.runbook_url enabled = var.additional_alerts[count.index].enabled warning { operator = var.additional_alerts[count.index].operator threshold = var.additional_alerts[count.index].warning_threshold threshold_duration = var.additional_alerts[count.index].duration threshold_occurrences = var.additional_alerts[count.index].occurences } critical { operator = var.additional_alerts[count.index].operator threshold = var.additional_alerts[count.index].critical_threshold threshold_duration = var.additional_alerts[count.index].duration threshold_occurrences = var.additional_alerts[count.index].occurrences } nrql { query = var.additional_alerts[count.index].query } aggregation_window = 60 aggregation_method = \"event_flow\" aggregation_delay = 120 slide_by = 30 violation_time_limit_seconds = 3600 } ``` ", "keywords": ["policy"]}, {"source": "Text", "text": "It receives configuration from module input variable `var.additional_alerts`, that is a list of objects: ``` variable \"additional_alerts\" { description = \"List of a custom alerts in case you need to create your own one\" type = list(object({ name_suffix = string enabled = bool operator = string warning_enabled = bool warning_threshold = number critical_threshold = number duration = number occurrences = string query = string })) default = [] } ``` # Goal Please pay attention to object variable `warning_enabled = bool` ", "keywords": ["pay"]}, {"source": "Text", "text": "Warning + Critical: ``` resource \"newrelic_nrql_alert_condition\" \"additional_alerts_condition_full\" { count = var.additional_alerts[count.index].warning_enabled == true ? length(var.additional_alerts) : 0 account_id = var.newrelic_account_id policy_id = newrelic_alert_policy.policy.id name = format(\"%s-%s\", local.container_name, var.additional_alerts[count.index].name_suffix) type = \"static\" runbook_url = var.runbook_url enabled = var.additional_alerts[count.index].enabled warning { operator = var.additional_alerts[count.index].operator threshold = var.additional_alerts[count.index].warning_threshold threshold_duration = var.additional_alerts[count.index].duration threshold_occurrences = var.additional_alerts[count.index].occurences } critical { operator = var.additional_alerts[count.index].operator threshold = var.additional_alerts[count.index].critical_threshold threshold_duration = var.additional_alerts[count.index].duration threshold_occurrences = var.additional_alerts[count.index].occurrences } // omitted code } ``` ", "keywords": ["policy"]}, {"source": "Text", "text": "Critical only: ``` resource \"newrelic_nrql_alert_condition\" \"additional_alerts_condition\" { count = var.additional_alerts[count.index].warning_enabled == true ? 0 : length(var.additional_alerts) account_id = var.newrelic_account_id policy_id = newrelic_alert_policy.policy.id name = format(\"%s-%s\", local.container_name, var.additional_alerts[count.index].name_suffix) type = \"static\" runbook_url = var.runbook_url enabled = var.additional_alerts[count.index].enabled critical { operator = var.additional_alerts[count.index].operator threshold = var.additional_alerts[count.index].critical_threshold threshold_duration = var.additional_alerts[count.index].duration threshold_occurrences = var.additional_alerts[count.index].occurrences } // omitted code } ``` ", "keywords": ["policy"]}]}, {"Id": "275539419", "PostHistoryTypeId": "1", "PostId": "73226483", "RevisionGUID": "bf041963-fe17-45e1-8ffa-b95cb0437662", "CreationDate": "2022-08-03T18:58:07.010", "UserId": "4137300", "Text": "How to make optional block inside Terraform resource?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "275539420", "PostHistoryTypeId": "3", "PostId": "73226483", "RevisionGUID": "bf041963-fe17-45e1-8ffa-b95cb0437662", "CreationDate": "2022-08-03T18:58:07.010", "UserId": "4137300", "Text": "<terraform><newrelic>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "73306227", "PostTypeId": "2", "ParentId": "73226483", "CreationDate": "2022-08-10T12:19:37.607", "Score": "0", "Body": "<pre><code>    variables.tf\n    \n    variable &quot;nrql_alert_conditions&quot; {\n      type = map(object({\n        aggregation_delay              = string\n        aggregation_method             = string\n        aggregation_window             = number\n        close_violations_on_expiration = bool\n        enabled                        = bool\n        fill_option                    = string\n        fill_value                     = number\n        expiration_duration            = number\n        open_violation_on_expiration   = bool\n        slide_by                       = string\n        policy_id                      = number\n        type                           = string\n        violation_time_limit_seconds   = number\n        runbook_url                    = string\n        nrql_file                      = string\n        critical = object({\n          operator              = string\n          threshold             = number\n          threshold_duration    = number\n          threshold_occurrences = string\n        })\n        warning = optional(object({\n          operator              = string\n          threshold             = number\n          threshold_duration    = number\n          threshold_occurrences = string\n        }))\n      }))\n    }\n    \n    main.tf\n    \n    data &quot;azurerm_client_config&quot; &quot;current&quot; {}\n    \n    resource &quot;newrelic_nrql_alert_condition&quot; &quot;this&quot; {\n      for_each                       = var.nrql_alert_conditions\n      name                           = each.key\n      policy_id                      = each.value[&quot;policy_id&quot;]\n      aggregation_delay              = each.value[&quot;aggregation_delay&quot;]\n      aggregation_method             = each.value[&quot;aggregation_method&quot;]\n      aggregation_window             = each.value[&quot;aggregation_window&quot;]\n      close_violations_on_expiration = each.value[&quot;close_violations_on_expiration&quot;]\n      enabled                        = each.value[&quot;enabled&quot;]\n      fill_value                     = each.value[&quot;fill_value&quot;]\n      expiration_duration            = each.value[&quot;expiration_duration&quot;]\n      fill_option                    = each.value[&quot;fill_option&quot;]\n      open_violation_on_expiration   = each.value[&quot;open_violation_on_expiration&quot;]\n      slide_by                       = each.value[&quot;slide_by&quot;]\n      type                           = each.value[&quot;type&quot;]\n      violation_time_limit_seconds   = each.value[&quot;violation_time_limit_seconds&quot;]\n      runbook_url                    = each.value[&quot;runbook_url&quot;]\n    \n      dynamic &quot;critical&quot; {\n        for_each = each.value.critical[*]\n        content {\n          operator              = critical.value.operator\n          threshold             = critical.value.threshold\n          threshold_duration    = critical.value.threshold_duration\n          threshold_occurrences = critical.value.threshold_occurrences\n        }\n      }\n    \n      dynamic &quot;warning&quot; {\n        for_each = each.value.warning[*]\n        content {\n          operator              = warning.value.operator\n          threshold             = warning.value.threshold\n          threshold_duration    = warning.value.threshold_duration\n          threshold_occurrences = warning.value.threshold_occurrences\n        }\n      }\n    \n      nrql {\n        query = file(each.value[&quot;nrql_file&quot;])\n      }\n    }\n    \n    versions.tf\n    \n    terraform {\n      required_version = &quot;&gt;= 1.2.6&quot;\n      required_providers {\n        azurerm = {\n          source = &quot;hashicorp/azurerm&quot;\n        }\n        newrelic = {\n          source = &quot;newrelic/newrelic&quot;\n        }\n      }\n      experiments = [module_variable_optional_attrs]\n    }\n    \nHere you can have this experiment block if you want the optional warning block, otherwise, you can assign the input as null when you provide the input, either way, it should be fine. And you can use the splat concept to leave the dynamic block as optional\n    \n    input variable:\n    locals {\n      nrql_alert_conditions = {\n        &quot;Error alert1&quot; = {\n          aggregation_delay              = &quot;120&quot;\n          aggregation_method             = &quot;&quot;\n          aggregation_window             = 600\n          close_violations_on_expiration = false\n          enabled                        = true\n          expiration_duration            = 0\n          fill_option                    = &quot;static&quot;\n          fill_value                     = 0\n          open_violation_on_expiration   = false\n          policy_id                      = policyid\n          slide_by                       = 60\n          type                           = &quot;static&quot;\n          violation_time_limit_seconds   = 1800\n          runbook_url                    = &quot;https://xxxx&quot;\n          nrql_file                      = &quot;samplequery1.nrql&quot;\n          critical = {\n            operator              = &quot;&quot;\n            threshold             = 111\n            threshold_duration    = 11\n            threshold_occurrences = &quot;&quot;\n          }\n        }\n&quot;Error alert2&quot; = {\n          aggregation_delay              = &quot;120&quot;\n          aggregation_method             = &quot;&quot;\n          aggregation_window             = 600\n          close_violations_on_expiration = false\n          enabled                        = true\n          expiration_duration            = 0\n          fill_option                    = &quot;static&quot;\n          fill_value                     = 0\n          open_violation_on_expiration   = false\n          policy_id                      = policyid\n          slide_by                       = 60\n          type                           = &quot;static&quot;\n          violation_time_limit_seconds   = 1800\n          runbook_url                    = &quot;https://xxxx&quot;\n          nrql_file                      = &quot;samplequery1.nrql&quot;\n          critical = {\n            operator              = &quot;&quot;\n            threshold             = 111\n            threshold_duration    = 11\n            threshold_occurrences = &quot;&quot;\n          }\n          warning = {\n            operator              = &quot;&quot;\n            threshold             = 111\n            threshold_duration    = 11\n            threshold_occurrences = &quot;&quot;\n          }\n        }\n      }\n    }\n</code></pre>\n", "OwnerUserId": "9942171", "LastActivityDate": "2022-08-10T12:19:37.607", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "275972230", "PostHistoryTypeId": "2", "PostId": "73306227", "RevisionGUID": "47aa020b-a398-41d1-9ef0-7ca0c76876b1", "CreationDate": "2022-08-10T12:19:37.607", "UserId": "9942171", "Text": "        variables.tf\r\n        \r\n        variable \"nrql_alert_conditions\" {\r\n          type = map(object({\r\n            aggregation_delay              = string\r\n            aggregation_method             = string\r\n            aggregation_window             = number\r\n            close_violations_on_expiration = bool\r\n            enabled                        = bool\r\n            fill_option                    = string\r\n            fill_value                     = number\r\n            expiration_duration            = number\r\n            open_violation_on_expiration   = bool\r\n            slide_by                       = string\r\n            policy_id                      = number\r\n            type                           = string\r\n            violation_time_limit_seconds   = number\r\n            runbook_url                    = string\r\n            nrql_file                      = string\r\n            critical = object({\r\n              operator              = string\r\n              threshold             = number\r\n              threshold_duration    = number\r\n              threshold_occurrences = string\r\n            })\r\n            warning = optional(object({\r\n              operator              = string\r\n              threshold             = number\r\n              threshold_duration    = number\r\n              threshold_occurrences = string\r\n            }))\r\n          }))\r\n        }\r\n        \r\n        main.tf\r\n        \r\n        data \"azurerm_client_config\" \"current\" {}\r\n        \r\n        resource \"newrelic_nrql_alert_condition\" \"this\" {\r\n          for_each                       = var.nrql_alert_conditions\r\n          name                           = each.key\r\n          policy_id                      = each.value[\"policy_id\"]\r\n          aggregation_delay              = each.value[\"aggregation_delay\"]\r\n          aggregation_method             = each.value[\"aggregation_method\"]\r\n          aggregation_window             = each.value[\"aggregation_window\"]\r\n          close_violations_on_expiration = each.value[\"close_violations_on_expiration\"]\r\n          enabled                        = each.value[\"enabled\"]\r\n          fill_value                     = each.value[\"fill_value\"]\r\n          expiration_duration            = each.value[\"expiration_duration\"]\r\n          fill_option                    = each.value[\"fill_option\"]\r\n          open_violation_on_expiration   = each.value[\"open_violation_on_expiration\"]\r\n          slide_by                       = each.value[\"slide_by\"]\r\n          type                           = each.value[\"type\"]\r\n          violation_time_limit_seconds   = each.value[\"violation_time_limit_seconds\"]\r\n          runbook_url                    = each.value[\"runbook_url\"]\r\n        \r\n          dynamic \"critical\" {\r\n            for_each = each.value.critical[*]\r\n            content {\r\n              operator              = critical.value.operator\r\n              threshold             = critical.value.threshold\r\n              threshold_duration    = critical.value.threshold_duration\r\n              threshold_occurrences = critical.value.threshold_occurrences\r\n            }\r\n          }\r\n        \r\n          dynamic \"warning\" {\r\n            for_each = each.value.warning[*]\r\n            content {\r\n              operator              = warning.value.operator\r\n              threshold             = warning.value.threshold\r\n              threshold_duration    = warning.value.threshold_duration\r\n              threshold_occurrences = warning.value.threshold_occurrences\r\n            }\r\n          }\r\n        \r\n          nrql {\r\n            query = file(each.value[\"nrql_file\"])\r\n          }\r\n        }\r\n        \r\n        versions.tf\r\n        \r\n        terraform {\r\n          required_version = \">= 1.2.6\"\r\n          required_providers {\r\n            azurerm = {\r\n              source = \"hashicorp/azurerm\"\r\n            }\r\n            newrelic = {\r\n              source = \"newrelic/newrelic\"\r\n            }\r\n          }\r\n          experiments = [module_variable_optional_attrs]\r\n        }\r\n        \r\n    Here you can have this experiment block if you want the optional warning block, otherwise, you can assign the input as null when you provide the input, either way, it should be fine. And you can use the splat concept to leave the dynamic block as optional\r\n        \r\n        input variable:\r\n        locals {\r\n          nrql_alert_conditions = {\r\n            \"Error alert1\" = {\r\n              aggregation_delay              = \"120\"\r\n              aggregation_method             = \"\"\r\n              aggregation_window             = 600\r\n              close_violations_on_expiration = false\r\n              enabled                        = true\r\n              expiration_duration            = 0\r\n              fill_option                    = \"static\"\r\n              fill_value                     = 0\r\n              open_violation_on_expiration   = false\r\n              policy_id                      = policyid\r\n              slide_by                       = 60\r\n              type                           = \"static\"\r\n              violation_time_limit_seconds   = 1800\r\n              runbook_url                    = \"https://xxxx\"\r\n              nrql_file                      = \"samplequery1.nrql\"\r\n              critical = {\r\n                operator              = \"\"\r\n                threshold             = 111\r\n                threshold_duration    = 11\r\n                threshold_occurrences = \"\"\r\n              }\r\n            }\r\n    \"Error alert2\" = {\r\n              aggregation_delay              = \"120\"\r\n              aggregation_method             = \"\"\r\n              aggregation_window             = 600\r\n              close_violations_on_expiration = false\r\n              enabled                        = true\r\n              expiration_duration            = 0\r\n              fill_option                    = \"static\"\r\n              fill_value                     = 0\r\n              open_violation_on_expiration   = false\r\n              policy_id                      = policyid\r\n              slide_by                       = 60\r\n              type                           = \"static\"\r\n              violation_time_limit_seconds   = 1800\r\n              runbook_url                    = \"https://xxxx\"\r\n              nrql_file                      = \"samplequery1.nrql\"\r\n              critical = {\r\n                operator              = \"\"\r\n                threshold             = 111\r\n                threshold_duration    = 11\r\n                threshold_occurrences = \"\"\r\n              }\r\n              warning = {\r\n                operator              = \"\"\r\n                threshold             = 111\r\n                threshold_duration    = 11\r\n                threshold_occurrences = \"\"\r\n              }\r\n            }\r\n          }\r\n        }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Given I have this code in terraform module (file newrelic_nrql.tf): It receives configuration from module input variable var.additional_alerts, that is a list of objects: Goal Please pay attention to object variable warning_enabled = bool My goal is to enable or disable (remove) warning block from resource \"additional_alerts_condition\" conditionally, depending on variable warning_enabled value. ", "keywords": ["pay"]}]}