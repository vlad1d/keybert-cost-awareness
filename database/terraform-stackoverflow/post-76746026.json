{"Id": "76746026", "PostTypeId": "1", "CreationDate": "2023-07-22T22:36:55.720", "Score": "1", "ViewCount": "44", "Body": "<p>i created a terraform that build http api gateway and connect to cognito. everything work well.\ni wanted to pull the user_id + email and watch them on dynamodb, so i created a lambda function that do just that and attached it to cognito as a trigger.</p>\n<p>i gave all the necessary permmisions through IAM role, and for some reason nothing is happening.(there are no lambda logs errors)</p>\n<p>i tried to create another lambda function with the same permissions and with the same code - and when i attach it manually to cognito - it works!</p>\n<p>why is it that when i create the lambda function on terraform and attach to it all it need - nothing happened, and when i attach it manually - it works?</p>\n<p>please share your thoughts with me</p>\n<p>my dynamodb</p>\n<pre><code>resource &quot;aws_dynamodb_table&quot; &quot;my_table&quot; {\n  name         = &quot;my-table&quot;\n  billing_mode = &quot;PAY_PER_REQUEST&quot;\n  hash_key     = &quot;user_id&quot;\n\n  attribute {\n    name = &quot;user_id&quot;\n    type = &quot;S&quot;\n  }\n}\n</code></pre>\n<p>my cognito</p>\n<pre><code>resource &quot;aws_cognito_user_pool&quot; &quot;user_pool&quot; {\n  name = &quot;user-pool&quot;\n  username_configuration {\n    case_sensitive = false\n  }\n  alias_attributes = [&quot;email&quot;, &quot;preferred_username&quot;]\n\n  auto_verified_attributes = [&quot;email&quot;]\n\n  password_policy {\n    minimum_length                   = 8\n    temporary_password_validity_days = 7\n  }\n  verification_message_template {\n    default_email_option = &quot;CONFIRM_WITH_CODE&quot;\n    email_subject        = &quot;Account Confirmation&quot;\n    email_message        = &quot;Your confirmation code is {####}&quot;\n  }\n  lambda_config {\n    post_authentication = aws_lambda_function.myfunction.arn\n  }\n  schema {\n    attribute_data_type      = &quot;String&quot;\n    developer_only_attribute = false\n    mutable                  = true\n    name                     = &quot;email&quot;\n    required                 = true\n\n    string_attribute_constraints {\n      min_length = 1\n      max_length = 256\n    }\n  }\n}\n\nresource &quot;aws_cognito_user_pool_client&quot; &quot;client&quot; {\n  name = &quot;demo-app-cognito-client&quot;\n\n  user_pool_id                         = aws_cognito_user_pool.user_pool.id\n  generate_secret                      = true\n  supported_identity_providers         = [&quot;COGNITO&quot;]\n  refresh_token_validity               = 90\n  allowed_oauth_flows                  = [&quot;code&quot;, &quot;implicit&quot;]\n  allowed_oauth_scopes                 = [&quot;phone&quot;, &quot;email&quot;, &quot;openid&quot;, &quot;profile&quot;, &quot;aws.cognito.signin.user.admin&quot;]\n  allowed_oauth_flows_user_pool_client = true\n  prevent_user_existence_errors        = &quot;ENABLED&quot;\n  callback_urls                        = [&quot;${aws_apigatewayv2_stage.lambda_stage.invoke_url}/&quot;]\n  explicit_auth_flows = [\n    &quot;ALLOW_REFRESH_TOKEN_AUTH&quot;,\n    &quot;ALLOW_USER_PASSWORD_AUTH&quot;,\n    &quot;ALLOW_ADMIN_USER_PASSWORD_AUTH&quot;\n  ]\n\n}\nresource &quot;aws_cognito_user_pool_domain&quot; &quot;cognito-domain&quot; {\n  domain       = var.domain_prefix\n  user_pool_id = aws_cognito_user_pool.user_pool.id\n}\n</code></pre>\n<p>my IAM</p>\n<pre><code>resource &quot;aws_iam_role&quot; &quot;cognito_role&quot; {\n  name               = &quot;cognito_role&quot;\n  assume_role_policy = jsonencode({\n    &quot;Version&quot; : &quot;2012-10-17&quot;,\n    &quot;Statement&quot; : [\n      {\n        &quot;Sid&quot; : &quot;&quot;,\n        &quot;Effect&quot; : &quot;Allow&quot;,\n        &quot;Principal&quot; : {\n          &quot;Service&quot; : &quot;lambda.amazonaws.com&quot;\n        },\n        &quot;Action&quot; : &quot;sts:AssumeRole&quot;\n      }\n    ]\n  })\n}\n\nresource &quot;aws_iam_policy&quot; &quot;cognito_project_policy&quot; {\n  name   = &quot;CognitoProjectPolicy&quot;\n  policy = jsonencode({\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n      {\n        &quot;Effect&quot;: &quot;Allow&quot;,\n        &quot;Action&quot; : [\n          &quot;ec2:CreateNetworkInterface&quot;,\n          &quot;ec2:DescribeNetworkInterfaces&quot;,\n          &quot;ec2:DeleteNetworkInterface&quot;,\n          &quot;ec2:DescribeInstances&quot;,\n          &quot;ec2:AttachNetworkInterface&quot;,\n          &quot;logs:CreateLogGroup&quot;,\n          &quot;logs:CreateLogStream&quot;,\n          &quot;logs:DescribeLogGroups&quot;,\n          &quot;logs:DescribeLogStreams&quot;,\n          &quot;logs:PutLogEvents&quot;,\n          &quot;logs:GetLogEvents&quot;,\n          &quot;logs:FilterLogEvents&quot;,\n          &quot;dynamodb:DeleteItem&quot;,\n          &quot;dynamodb:GetItem&quot;,\n          &quot;dynamodb:PutItem&quot;,\n          &quot;dynamodb:Query&quot;,\n          &quot;dynamodb:UpdateItem&quot;\n        ],\n        &quot;Resource&quot;: &quot;*&quot;\n      }\n    ]\n  })\n}\n\n# IAM Role Policy Attachment for &quot;cognito-role&quot;\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;cognito_project_policy_attach&quot; {\n  role       = aws_iam_role.cognito_role.name\n  policy_arn = aws_iam_policy.cognito_project_policy.arn\n}\n\n# IAM Role Policy Attachment AmazonDynamoDBFullAccess\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;AmazonDynamoDBFullAccess&quot; {\n  role       = aws_iam_role.cognito_role.name\n  policy_arn = &quot;arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess&quot;\n}\n\n# IAM Role Policy Attachment AmazonCognitoPowerUser\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;AmazonCognitoPowerUser&quot; {\n  role       = aws_iam_role.cognito_role.name\n  policy_arn = &quot;arn:aws:iam::aws:policy/AmazonCognitoPowerUser&quot;\n}\n\n# IAM Role Policy Attachment AmazonCognitoDeveloperAuthenticatedIdentities\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;AmazonCognitoDeveloperAuthenticatedIdentities&quot; {\n  role       = aws_iam_role.cognito_role.name\n  policy_arn = &quot;arn:aws:iam::aws:policy/AmazonCognitoDeveloperAuthenticatedIdentities&quot;\n}\n</code></pre>\n<p>my lambda terraform</p>\n<pre><code>resource &quot;aws_lambda_function&quot; &quot;myfunction&quot; {\n  filename         = &quot;myfunction.zip&quot;\n  function_name    = &quot;myfunction&quot;\n  role             = aws_iam_role.cognito_role.arn\n  handler          = &quot;myfunction.lambda_handler&quot;\n  runtime          = &quot;python3.10&quot;\n  timeout          = 300\n  source_code_hash = data.archive_file.post_authentication.output_base64sha256\n\n  environment {\n    variables = {\n      DYNAMODB_TABLE = aws_dynamodb_table.my_table.name\n    }\n  }\n  \n  vpc_config {\n    subnet_ids         = aws_subnet.private_subnets[*].id\n    security_group_ids = [aws_security_group.sg.id]\n  }\n}\n\nresource &quot;aws_lambda_permission&quot; &quot;store_user_to_dynamodb_permission&quot; {\n  statement_id  = &quot;AllowExecutionFromCognito&quot;\n  action        = &quot;lambda:InvokeFunction&quot;\n  function_name = aws_lambda_function.myfunction.function_name\n  principal     = &quot;cognito-idp.amazonaws.com&quot;\n  source_arn    = aws_cognito_user_pool.user_pool.arn\n}\n</code></pre>\n<p>my lambda function</p>\n<pre><code>import json\nimport boto3\nfrom datetime import datetime\n\ndynamodb = boto3.resource('dynamodb')\n\ndef lambda_handler(event, context):\n    try:\n        user_name = event['userName']\n        trigger_source = event['triggerSource']\n        user_attributes = event['request']['userAttributes']\n        email = user_attributes.get('email', '')\n        login_time = datetime.now().isoformat()\n        status = 'success' if trigger_source == 'PostAuthentication_Authentication' else 'failed'\n\n        table = dynamodb.Table('users')\n        table.put_item(\n            Item={\n                'user_id': user_name,\n                'email': email,\n                'login_time': login_time,\n                'status': status\n            }\n        )\n\n        return event\n    except KeyError as e:\n        return {\n            'errorMessage': str(e),\n            'errorType': 'KeyError',\n            'requestId': context.aws_request_id}\n</code></pre>\n", "OwnerUserId": "22269750", "LastEditorUserId": "8343484", "LastEditDate": "2023-07-23T09:34:36.297", "LastActivityDate": "2023-07-23T09:34:36.297", "Title": "pull items from cognito to dynamodb", "Tags": "<amazon-web-services><aws-lambda><terraform><amazon-dynamodb><terraform-provider-aws>", "AnswerCount": "0", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "135303604", "PostId": "76746026", "Score": "0", "Text": "Lambda function is deployed in a VPC. DynamoDB is an AWS public service. So either create a NAT Gateway which will then allow Lambda to talk to DynamoDB or create a Gateway VPC Endpoint for the Lambda function and add it to the route table of the subnets you are deploying Lambda into.", "CreationDate": "2023-07-23T07:54:59.643", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "So either create a NAT Gateway which will then allow Lambda to talk to DynamoDB or create a Gateway VPC Endpoint for the Lambda function and add it to the route table of the subnets you are deploying Lambda into.", "keywords": ["nat"]}]}, {"Id": "135304106", "PostId": "76746026", "Score": "0", "Text": "thanks for the reply!\nunfortunately i tried it(created vpc endpoint) and it's still not working :(", "CreationDate": "2023-07-23T09:21:31.210", "UserId": "22269750", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "135304177", "PostId": "76746026", "Score": "0", "Text": "It's hard to give a definitive answer since there is no knowledge on how your VPC is setup.", "CreationDate": "2023-07-23T09:34:08.570", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "135304413", "PostId": "76746026", "Score": "0", "Text": "Also, what ports are allowed in the SG assigned to the Lambda function?", "CreationDate": "2023-07-23T10:07:48.113", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "135309904", "PostId": "76746026", "Score": "0", "Text": "i gave it all trafic from http & ssh", "CreationDate": "2023-07-24T00:12:11.877", "UserId": "22269750", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "295735694", "PostHistoryTypeId": "2", "PostId": "76746026", "RevisionGUID": "625fffae-b6f0-4f7b-b827-8b97667a92cf", "CreationDate": "2023-07-22T22:36:55.720", "UserId": "22269750", "Text": "i created a terraform that build http api gateway and connect to cognito. everything work well.\r\ni wanted to pull the user_id + email and watch them on dynamodb, so i created a lambda function that do just that and attached it to cognito as a trigger.\r\n\r\ni gave all the necessary permmisions through IAM role, and for some reason nothing is happening.(there are no lambda logs errors)\r\n\r\ni tried to create another lambda function with the same permissions and with the same code - and when i attach it manually to cognito - it works!\r\n\r\nwhy is it that when i create the lambda function on terraform and attach to it all it need - nothing happened, and when i attach it manually - it works?\r\n\r\nplease share your thoughts with me\r\n\r\n\r\n```\r\nresource \"aws_dynamodb_table\" \"my_table\" {\r\n  name         = \"my-table\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key     = \"user_id\"\r\n\r\n  attribute {\r\n    name = \"user_id\"\r\n    type = \"S\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n```\r\nresource \"aws_cognito_user_pool\" \"user_pool\" {\r\n  name = \"user-pool\"\r\n  username_configuration {\r\n    case_sensitive = false\r\n  }\r\n  alias_attributes = [\"email\", \"preferred_username\"]\r\n\r\n  auto_verified_attributes = [\"email\"]\r\n\r\n  password_policy {\r\n    minimum_length                   = 8\r\n    temporary_password_validity_days = 7\r\n  }\r\n  verification_message_template {\r\n    default_email_option = \"CONFIRM_WITH_CODE\"\r\n    email_subject        = \"Account Confirmation\"\r\n    email_message        = \"Your confirmation code is {####}\"\r\n  }\r\n  lambda_config {\r\n    post_authentication = aws_lambda_function.myfunction.arn\r\n  }\r\n  schema {\r\n    attribute_data_type      = \"String\"\r\n    developer_only_attribute = false\r\n    mutable                  = true\r\n    name                     = \"email\"\r\n    required                 = true\r\n\r\n    string_attribute_constraints {\r\n      min_length = 1\r\n      max_length = 256\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_cognito_user_pool_client\" \"client\" {\r\n  name = \"demo-app-cognito-client\"\r\n\r\n  user_pool_id                         = aws_cognito_user_pool.user_pool.id\r\n  generate_secret                      = true\r\n  supported_identity_providers         = [\"COGNITO\"]\r\n  refresh_token_validity               = 90\r\n  allowed_oauth_flows                  = [\"code\", \"implicit\"]\r\n  allowed_oauth_scopes                 = [\"phone\", \"email\", \"openid\", \"profile\", \"aws.cognito.signin.user.admin\"]\r\n  allowed_oauth_flows_user_pool_client = true\r\n  prevent_user_existence_errors        = \"ENABLED\"\r\n  callback_urls                        = [\"${aws_apigatewayv2_stage.lambda_stage.invoke_url}/\"]\r\n  explicit_auth_flows = [\r\n    \"ALLOW_REFRESH_TOKEN_AUTH\",\r\n    \"ALLOW_USER_PASSWORD_AUTH\",\r\n    \"ALLOW_ADMIN_USER_PASSWORD_AUTH\"\r\n  ]\r\n\r\n}\r\nresource \"aws_cognito_user_pool_domain\" \"cognito-domain\" {\r\n  domain       = var.domain_prefix\r\n  user_pool_id = aws_cognito_user_pool.user_pool.id\r\n}\r\n```\r\n\r\n\r\n```\r\nresource \"aws_iam_role\" \"cognito_role\" {\r\n  name               = \"cognito_role\"\r\n  assume_role_policy = jsonencode({\r\n    \"Version\" : \"2012-10-17\",\r\n    \"Statement\" : [\r\n      {\r\n        \"Sid\" : \"\",\r\n        \"Effect\" : \"Allow\",\r\n        \"Principal\" : {\r\n          \"Service\" : \"lambda.amazonaws.com\"\r\n        },\r\n        \"Action\" : \"sts:AssumeRole\"\r\n      }\r\n    ]\r\n  })\r\n}\r\n\r\nresource \"aws_iam_policy\" \"cognito_project_policy\" {\r\n  name   = \"CognitoProjectPolicy\"\r\n  policy = jsonencode({\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n      {\r\n        \"Effect\": \"Allow\",\r\n        \"Action\" : [\r\n          \"ec2:CreateNetworkInterface\",\r\n          \"ec2:DescribeNetworkInterfaces\",\r\n          \"ec2:DeleteNetworkInterface\",\r\n          \"ec2:DescribeInstances\",\r\n          \"ec2:AttachNetworkInterface\",\r\n          \"logs:CreateLogGroup\",\r\n          \"logs:CreateLogStream\",\r\n          \"logs:DescribeLogGroups\",\r\n          \"logs:DescribeLogStreams\",\r\n          \"logs:PutLogEvents\",\r\n          \"logs:GetLogEvents\",\r\n          \"logs:FilterLogEvents\",\r\n          \"dynamodb:DeleteItem\",\r\n          \"dynamodb:GetItem\",\r\n          \"dynamodb:PutItem\",\r\n          \"dynamodb:Query\",\r\n          \"dynamodb:UpdateItem\"\r\n        ],\r\n        \"Resource\": \"*\"\r\n      }\r\n    ]\r\n  })\r\n}\r\n\r\n# IAM Role Policy Attachment for \"cognito-role\"\r\nresource \"aws_iam_role_policy_attachment\" \"cognito_project_policy_attach\" {\r\n  role       = aws_iam_role.cognito_role.name\r\n  policy_arn = aws_iam_policy.cognito_project_policy.arn\r\n}\r\n\r\n# IAM Role Policy Attachment AmazonDynamoDBFullAccess\r\nresource \"aws_iam_role_policy_attachment\" \"AmazonDynamoDBFullAccess\" {\r\n  role       = aws_iam_role.cognito_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\"\r\n}\r\n\r\n# IAM Role Policy Attachment AmazonCognitoPowerUser\r\nresource \"aws_iam_role_policy_attachment\" \"AmazonCognitoPowerUser\" {\r\n  role       = aws_iam_role.cognito_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonCognitoPowerUser\"\r\n}\r\n\r\n# IAM Role Policy Attachment AmazonCognitoDeveloperAuthenticatedIdentities\r\nresource \"aws_iam_role_policy_attachment\" \"AmazonCognitoDeveloperAuthenticatedIdentities\" {\r\n  role       = aws_iam_role.cognito_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonCognitoDeveloperAuthenticatedIdentities\"\r\n}\r\n```\r\n\r\n\r\n```\r\nresource \"aws_lambda_function\" \"myfunction\" {\r\n  filename         = \"myfunction.zip\"\r\n  function_name    = \"myfunction\"\r\n  role             = aws_iam_role.cognito_role.arn\r\n  handler          = \"myfunction.lambda_handler\"\r\n  runtime          = \"python3.10\"\r\n  timeout          = 300\r\n  source_code_hash = data.archive_file.post_authentication.output_base64sha256\r\n\r\n  environment {\r\n    variables = {\r\n      DYNAMODB_TABLE = aws_dynamodb_table.my_table.name\r\n    }\r\n  }\r\n  \r\n  vpc_config {\r\n    subnet_ids         = aws_subnet.private_subnets[*].id\r\n    security_group_ids = [aws_security_group.sg.id]\r\n  }\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"store_user_to_dynamodb_permission\" {\r\n  statement_id  = \"AllowExecutionFromCognito\"\r\n  action        = \"lambda:InvokeFunction\"\r\n  function_name = aws_lambda_function.myfunction.function_name\r\n  principal     = \"cognito-idp.amazonaws.com\"\r\n  source_arn    = aws_cognito_user_pool.user_pool.arn\r\n}\r\n```\r\n\r\n\r\n```\r\nimport json\r\nimport boto3\r\nfrom datetime import datetime\r\n\r\ndynamodb = boto3.resource('dynamodb')\r\n\r\ndef lambda_handler(event, context):\r\n    try:\r\n        user_name = event['userName']\r\n        trigger_source = event['triggerSource']\r\n        user_attributes = event['request']['userAttributes']\r\n        email = user_attributes.get('email', '')\r\n        login_time = datetime.now().isoformat()\r\n        status = 'success' if trigger_source == 'PostAuthentication_Authentication' else 'failed'\r\n\r\n        table = dynamodb.Table('users')\r\n        table.put_item(\r\n            Item={\r\n                'user_id': user_name,\r\n                'email': email,\r\n                'login_time': login_time,\r\n                'status': status\r\n            }\r\n        )\r\n\r\n        return event\r\n    except KeyError as e:\r\n        return {\r\n            'errorMessage': str(e),\r\n            'errorType': 'KeyError',\r\n            'requestId': context.aws_request_id}\r\n```\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "i gave all the necessary permmisions through IAM role, and for some reason nothing is happening.(there are no lambda logs errors) i tried to create another lambda function with the same permissions and with the same code - and when i attach it manually to cognito - it works! why is it that when i create the lambda function on terraform and attach to it all it need - nothing happened, and when i attach it manually - it works? please share your thoughts with me ``` resource \"aws_dynamodb_table\" \"my_table\" { name = \"my-table\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"user_id\" attribute { name = \"user_id\" type = \"S\" } } ``` ``` resource \"aws_cognito_user_pool\" \"user_pool\" { name = \"user-pool\" username_configuration { case_sensitive = false } alias_attributes = [\"email\", \"preferred_username\"] auto_verified_attributes = [\"email\"] password_policy { minimum_length = 8 temporary_password_validity_days = 7 } verification_message_template { default_email_option = \"CONFIRM_WITH_CODE\" email_subject = \"Account Confirmation\" email_message = \"Your confirmation code is {####}\" } lambda_config { post_authentication = aws_lambda_function.myfunction.arn } schema { attribute_data_type = \"String\" developer_only_attribute = false mutable = true name = \"email\" required = true string_attribute_constraints { min_length = 1 max_length = 256 } } } resource \"aws_cognito_user_pool_client\" \"client\" { name = \"demo-app-cognito-client\" user_pool_id = aws_cognito_user_pool.user_pool.id generate_secret = true supported_identity_providers = [\"COGNITO\"] refresh_token_validity = 90 allowed_oauth_flows = [\"code\", \"implicit\"] allowed_oauth_scopes = [\"phone\", \"email\", \"openid\", \"profile\", \"aws.cognito.signin.user.admin\"] allowed_oauth_flows_user_pool_client = true prevent_user_existence_errors = \"ENABLED\" callback_urls = [\"${aws_apigatewayv2_stage.lambda_stage.invoke_url}/\"] explicit_auth_flows = [ \"ALLOW_REFRESH_TOKEN_AUTH\", \"ALLOW_USER_PASSWORD_AUTH\", \"ALLOW_ADMIN_USER_PASSWORD_AUTH\" ] } resource \"aws_cognito_user_pool_domain\" \"cognito-domain\" { domain = var.domain_prefix user_pool_id = aws_cognito_user_pool.user_pool.id } ``` ``` resource \"aws_iam_role\" \"cognito_role\" { name = \"cognito_role\" assume_role_policy = jsonencode({ \"Version\" : \"2012-10-17\", \"Statement\" : [ { \"Sid\" : \"\", \"Effect\" : \"Allow\", \"Principal\" : { \"Service\" : \"lambda.amazonaws.com\" }, \"Action\" : \"sts:AssumeRole\" } ] }) } resource \"aws_iam_policy\" \"cognito_project_policy\" { name = \"CognitoProjectPolicy\" policy = jsonencode({ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\" : [ \"ec2:CreateNetworkInterface\", \"ec2:DescribeNetworkInterfaces\", \"ec2:DeleteNetworkInterface\", \"ec2:DescribeInstances\", \"ec2:AttachNetworkInterface\", \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:DescribeLogGroups\", \"logs:DescribeLogStreams\", \"logs:PutLogEvents\", \"logs:GetLogEvents\", \"logs:FilterLogEvents\", \"dynamodb:DeleteItem\", \"dynamodb:GetItem\", \"dynamodb:PutItem\", \"dynamodb:Query\", \"dynamodb:UpdateItem\" ], \"Resource\": \"*\" } ] }) } # IAM Role Policy Attachment for \"cognito-role\" resource \"aws_iam_role_policy_attachment\" \"cognito_project_policy_attach\" { role = aws_iam_role.cognito_role.name policy_arn = aws_iam_policy.cognito_project_policy.arn } # IAM Role Policy Attachment AmazonDynamoDBFullAccess resource \"aws_iam_role_policy_attachment\" \"AmazonDynamoDBFullAccess\" { role = aws_iam_role.cognito_role.name policy_arn = \"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\" } # IAM Role Policy Attachment AmazonCognitoPowerUser resource \"aws_iam_role_policy_attachment\" \"AmazonCognitoPowerUser\" { role = aws_iam_role.cognito_role.name policy_arn = \"arn:aws:iam::aws:policy/AmazonCognitoPowerUser\" } # IAM Role Policy Attachment AmazonCognitoDeveloperAuthenticatedIdentities resource \"aws_iam_role_policy_attachment\" \"AmazonCognitoDeveloperAuthenticatedIdentities\" { role = aws_iam_role.cognito_role.name policy_arn = \"arn:aws:iam::aws:policy/AmazonCognitoDeveloperAuthenticatedIdentities\" } ``` ``` resource \"aws_lambda_function\" \"myfunction\" { filename = \"myfunction.zip\" function_name = \"myfunction\" role = aws_iam_role.cognito_role.arn handler = \"myfunction.lambda_handler\" runtime = \"python3.10\" timeout = 300 source_code_hash = data.archive_file.post_authentication.output_base64sha256 environment { variables = { DYNAMODB_TABLE = aws_dynamodb_table.my_table.name } } vpc_config { subnet_ids = aws_subnet.private_subnets[*].id security_group_ids = [aws_security_group.sg.id] } } resource \"aws_lambda_permission\" \"store_user_to_dynamodb_permission\" { statement_id = \"AllowExecutionFromCognito\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.myfunction.function_name principal = \"cognito-idp.amazonaws.com\" source_arn = aws_cognito_user_pool.user_pool.arn } ``` ``` import json import boto3 from datetime import datetime dynamodb = boto3.resource('dynamodb') def lambda_handler(event, context): try: user_name = event['userName'] trigger_source = event['triggerSource'] user_attributes = event['request']['userAttributes'] email = user_attributes.get('email', '') login_time = datetime.now().isoformat() status = 'success' if trigger_source == 'PostAuthentication_Authentication' else 'failed' table = dynamodb.Table('users') table.put_item( Item={ 'user_id': user_name, 'email': email, 'login_time': login_time, 'status': status } ) return event except KeyError as e: return { 'errorMessage': str(e), 'errorType': 'KeyError', 'requestId': context.aws_request_id} ```", "keywords": ["bill", "domain", "policy"]}]}, {"Id": "295735696", "PostHistoryTypeId": "1", "PostId": "76746026", "RevisionGUID": "625fffae-b6f0-4f7b-b827-8b97667a92cf", "CreationDate": "2023-07-22T22:36:55.720", "UserId": "22269750", "Text": "pull items from cognito to dynamodb", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "295735697", "PostHistoryTypeId": "3", "PostId": "76746026", "RevisionGUID": "625fffae-b6f0-4f7b-b827-8b97667a92cf", "CreationDate": "2023-07-22T22:36:55.720", "UserId": "22269750", "Text": "<amazon-web-services><aws-lambda><terraform><amazon-dynamodb><amazon-cognito>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "295735698", "PostHistoryTypeId": "66", "PostId": "76746026", "RevisionGUID": "625fffae-b6f0-4f7b-b827-8b97667a92cf", "CreationDate": "2023-07-22T22:36:55.720", "UserId": "22269750", "filtered-sentences": []}, {"Id": "295735806", "PostHistoryTypeId": "5", "PostId": "76746026", "RevisionGUID": "6518725a-e50d-4102-997d-65327d7f56b4", "CreationDate": "2023-07-22T22:44:13.667", "UserId": "22269750", "Comment": "added 64 characters in body", "Text": "i created a terraform that build http api gateway and connect to cognito. everything work well.\r\ni wanted to pull the user_id + email and watch them on dynamodb, so i created a lambda function that do just that and attached it to cognito as a trigger.\r\n\r\ni gave all the necessary permmisions through IAM role, and for some reason nothing is happening.(there are no lambda logs errors)\r\n\r\ni tried to create another lambda function with the same permissions and with the same code - and when i attach it manually to cognito - it works!\r\n\r\nwhy is it that when i create the lambda function on terraform and attach to it all it need - nothing happened, and when i attach it manually - it works?\r\n\r\nplease share your thoughts with me\r\n\r\nmy dynamodb\r\n```\r\nresource \"aws_dynamodb_table\" \"my_table\" {\r\n  name         = \"my-table\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key     = \"user_id\"\r\n\r\n  attribute {\r\n    name = \"user_id\"\r\n    type = \"S\"\r\n  }\r\n}\r\n```\r\n\r\nmy cognito\r\n```\r\nresource \"aws_cognito_user_pool\" \"user_pool\" {\r\n  name = \"user-pool\"\r\n  username_configuration {\r\n    case_sensitive = false\r\n  }\r\n  alias_attributes = [\"email\", \"preferred_username\"]\r\n\r\n  auto_verified_attributes = [\"email\"]\r\n\r\n  password_policy {\r\n    minimum_length                   = 8\r\n    temporary_password_validity_days = 7\r\n  }\r\n  verification_message_template {\r\n    default_email_option = \"CONFIRM_WITH_CODE\"\r\n    email_subject        = \"Account Confirmation\"\r\n    email_message        = \"Your confirmation code is {####}\"\r\n  }\r\n  lambda_config {\r\n    post_authentication = aws_lambda_function.myfunction.arn\r\n  }\r\n  schema {\r\n    attribute_data_type      = \"String\"\r\n    developer_only_attribute = false\r\n    mutable                  = true\r\n    name                     = \"email\"\r\n    required                 = true\r\n\r\n    string_attribute_constraints {\r\n      min_length = 1\r\n      max_length = 256\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_cognito_user_pool_client\" \"client\" {\r\n  name = \"demo-app-cognito-client\"\r\n\r\n  user_pool_id                         = aws_cognito_user_pool.user_pool.id\r\n  generate_secret                      = true\r\n  supported_identity_providers         = [\"COGNITO\"]\r\n  refresh_token_validity               = 90\r\n  allowed_oauth_flows                  = [\"code\", \"implicit\"]\r\n  allowed_oauth_scopes                 = [\"phone\", \"email\", \"openid\", \"profile\", \"aws.cognito.signin.user.admin\"]\r\n  allowed_oauth_flows_user_pool_client = true\r\n  prevent_user_existence_errors        = \"ENABLED\"\r\n  callback_urls                        = [\"${aws_apigatewayv2_stage.lambda_stage.invoke_url}/\"]\r\n  explicit_auth_flows = [\r\n    \"ALLOW_REFRESH_TOKEN_AUTH\",\r\n    \"ALLOW_USER_PASSWORD_AUTH\",\r\n    \"ALLOW_ADMIN_USER_PASSWORD_AUTH\"\r\n  ]\r\n\r\n}\r\nresource \"aws_cognito_user_pool_domain\" \"cognito-domain\" {\r\n  domain       = var.domain_prefix\r\n  user_pool_id = aws_cognito_user_pool.user_pool.id\r\n}\r\n```\r\n\r\nmy IAM\r\n```\r\nresource \"aws_iam_role\" \"cognito_role\" {\r\n  name               = \"cognito_role\"\r\n  assume_role_policy = jsonencode({\r\n    \"Version\" : \"2012-10-17\",\r\n    \"Statement\" : [\r\n      {\r\n        \"Sid\" : \"\",\r\n        \"Effect\" : \"Allow\",\r\n        \"Principal\" : {\r\n          \"Service\" : \"lambda.amazonaws.com\"\r\n        },\r\n        \"Action\" : \"sts:AssumeRole\"\r\n      }\r\n    ]\r\n  })\r\n}\r\n\r\nresource \"aws_iam_policy\" \"cognito_project_policy\" {\r\n  name   = \"CognitoProjectPolicy\"\r\n  policy = jsonencode({\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n      {\r\n        \"Effect\": \"Allow\",\r\n        \"Action\" : [\r\n          \"ec2:CreateNetworkInterface\",\r\n          \"ec2:DescribeNetworkInterfaces\",\r\n          \"ec2:DeleteNetworkInterface\",\r\n          \"ec2:DescribeInstances\",\r\n          \"ec2:AttachNetworkInterface\",\r\n          \"logs:CreateLogGroup\",\r\n          \"logs:CreateLogStream\",\r\n          \"logs:DescribeLogGroups\",\r\n          \"logs:DescribeLogStreams\",\r\n          \"logs:PutLogEvents\",\r\n          \"logs:GetLogEvents\",\r\n          \"logs:FilterLogEvents\",\r\n          \"dynamodb:DeleteItem\",\r\n          \"dynamodb:GetItem\",\r\n          \"dynamodb:PutItem\",\r\n          \"dynamodb:Query\",\r\n          \"dynamodb:UpdateItem\"\r\n        ],\r\n        \"Resource\": \"*\"\r\n      }\r\n    ]\r\n  })\r\n}\r\n\r\n# IAM Role Policy Attachment for \"cognito-role\"\r\nresource \"aws_iam_role_policy_attachment\" \"cognito_project_policy_attach\" {\r\n  role       = aws_iam_role.cognito_role.name\r\n  policy_arn = aws_iam_policy.cognito_project_policy.arn\r\n}\r\n\r\n# IAM Role Policy Attachment AmazonDynamoDBFullAccess\r\nresource \"aws_iam_role_policy_attachment\" \"AmazonDynamoDBFullAccess\" {\r\n  role       = aws_iam_role.cognito_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\"\r\n}\r\n\r\n# IAM Role Policy Attachment AmazonCognitoPowerUser\r\nresource \"aws_iam_role_policy_attachment\" \"AmazonCognitoPowerUser\" {\r\n  role       = aws_iam_role.cognito_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonCognitoPowerUser\"\r\n}\r\n\r\n# IAM Role Policy Attachment AmazonCognitoDeveloperAuthenticatedIdentities\r\nresource \"aws_iam_role_policy_attachment\" \"AmazonCognitoDeveloperAuthenticatedIdentities\" {\r\n  role       = aws_iam_role.cognito_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonCognitoDeveloperAuthenticatedIdentities\"\r\n}\r\n```\r\n\r\nmy lambda terraform\r\n```\r\nresource \"aws_lambda_function\" \"myfunction\" {\r\n  filename         = \"myfunction.zip\"\r\n  function_name    = \"myfunction\"\r\n  role             = aws_iam_role.cognito_role.arn\r\n  handler          = \"myfunction.lambda_handler\"\r\n  runtime          = \"python3.10\"\r\n  timeout          = 300\r\n  source_code_hash = data.archive_file.post_authentication.output_base64sha256\r\n\r\n  environment {\r\n    variables = {\r\n      DYNAMODB_TABLE = aws_dynamodb_table.my_table.name\r\n    }\r\n  }\r\n  \r\n  vpc_config {\r\n    subnet_ids         = aws_subnet.private_subnets[*].id\r\n    security_group_ids = [aws_security_group.sg.id]\r\n  }\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"store_user_to_dynamodb_permission\" {\r\n  statement_id  = \"AllowExecutionFromCognito\"\r\n  action        = \"lambda:InvokeFunction\"\r\n  function_name = aws_lambda_function.myfunction.function_name\r\n  principal     = \"cognito-idp.amazonaws.com\"\r\n  source_arn    = aws_cognito_user_pool.user_pool.arn\r\n}\r\n```\r\n\r\nmy lambda function\r\n```\r\nimport json\r\nimport boto3\r\nfrom datetime import datetime\r\n\r\ndynamodb = boto3.resource('dynamodb')\r\n\r\ndef lambda_handler(event, context):\r\n    try:\r\n        user_name = event['userName']\r\n        trigger_source = event['triggerSource']\r\n        user_attributes = event['request']['userAttributes']\r\n        email = user_attributes.get('email', '')\r\n        login_time = datetime.now().isoformat()\r\n        status = 'success' if trigger_source == 'PostAuthentication_Authentication' else 'failed'\r\n\r\n        table = dynamodb.Table('users')\r\n        table.put_item(\r\n            Item={\r\n                'user_id': user_name,\r\n                'email': email,\r\n                'login_time': login_time,\r\n                'status': status\r\n            }\r\n        )\r\n\r\n        return event\r\n    except KeyError as e:\r\n        return {\r\n            'errorMessage': str(e),\r\n            'errorType': 'KeyError',\r\n            'requestId': context.aws_request_id}\r\n```\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "i gave all the necessary permmisions through IAM role, and for some reason nothing is happening.(there are no lambda logs errors) i tried to create another lambda function with the same permissions and with the same code - and when i attach it manually to cognito - it works! why is it that when i create the lambda function on terraform and attach to it all it need - nothing happened, and when i attach it manually - it works? please share your thoughts with me my dynamodb ``` resource \"aws_dynamodb_table\" \"my_table\" { name = \"my-table\" billing_mode = \"PAY_PER_REQUEST\" hash_key = \"user_id\" attribute { name = \"user_id\" type = \"S\" } } ``` my cognito ``` resource \"aws_cognito_user_pool\" \"user_pool\" { name = \"user-pool\" username_configuration { case_sensitive = false } alias_attributes = [\"email\", \"preferred_username\"] auto_verified_attributes = [\"email\"] password_policy { minimum_length = 8 temporary_password_validity_days = 7 } verification_message_template { default_email_option = \"CONFIRM_WITH_CODE\" email_subject = \"Account Confirmation\" email_message = \"Your confirmation code is {####}\" } lambda_config { post_authentication = aws_lambda_function.myfunction.arn } schema { attribute_data_type = \"String\" developer_only_attribute = false mutable = true name = \"email\" required = true string_attribute_constraints { min_length = 1 max_length = 256 } } } resource \"aws_cognito_user_pool_client\" \"client\" { name = \"demo-app-cognito-client\" user_pool_id = aws_cognito_user_pool.user_pool.id generate_secret = true supported_identity_providers = [\"COGNITO\"] refresh_token_validity = 90 allowed_oauth_flows = [\"code\", \"implicit\"] allowed_oauth_scopes = [\"phone\", \"email\", \"openid\", \"profile\", \"aws.cognito.signin.user.admin\"] allowed_oauth_flows_user_pool_client = true prevent_user_existence_errors = \"ENABLED\" callback_urls = [\"${aws_apigatewayv2_stage.lambda_stage.invoke_url}/\"] explicit_auth_flows = [ \"ALLOW_REFRESH_TOKEN_AUTH\", \"ALLOW_USER_PASSWORD_AUTH\", \"ALLOW_ADMIN_USER_PASSWORD_AUTH\" ] } resource \"aws_cognito_user_pool_domain\" \"cognito-domain\" { domain = var.domain_prefix user_pool_id = aws_cognito_user_pool.user_pool.id } ``` my IAM ``` resource \"aws_iam_role\" \"cognito_role\" { name = \"cognito_role\" assume_role_policy = jsonencode({ \"Version\" : \"2012-10-17\", \"Statement\" : [ { \"Sid\" : \"\", \"Effect\" : \"Allow\", \"Principal\" : { \"Service\" : \"lambda.amazonaws.com\" }, \"Action\" : \"sts:AssumeRole\" } ] }) } resource \"aws_iam_policy\" \"cognito_project_policy\" { name = \"CognitoProjectPolicy\" policy = jsonencode({ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\" : [ \"ec2:CreateNetworkInterface\", \"ec2:DescribeNetworkInterfaces\", \"ec2:DeleteNetworkInterface\", \"ec2:DescribeInstances\", \"ec2:AttachNetworkInterface\", \"logs:CreateLogGroup\", \"logs:CreateLogStream\", \"logs:DescribeLogGroups\", \"logs:DescribeLogStreams\", \"logs:PutLogEvents\", \"logs:GetLogEvents\", \"logs:FilterLogEvents\", \"dynamodb:DeleteItem\", \"dynamodb:GetItem\", \"dynamodb:PutItem\", \"dynamodb:Query\", \"dynamodb:UpdateItem\" ], \"Resource\": \"*\" } ] }) } # IAM Role Policy Attachment for \"cognito-role\" resource \"aws_iam_role_policy_attachment\" \"cognito_project_policy_attach\" { role = aws_iam_role.cognito_role.name policy_arn = aws_iam_policy.cognito_project_policy.arn } # IAM Role Policy Attachment AmazonDynamoDBFullAccess resource \"aws_iam_role_policy_attachment\" \"AmazonDynamoDBFullAccess\" { role = aws_iam_role.cognito_role.name policy_arn = \"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\" } # IAM Role Policy Attachment AmazonCognitoPowerUser resource \"aws_iam_role_policy_attachment\" \"AmazonCognitoPowerUser\" { role = aws_iam_role.cognito_role.name policy_arn = \"arn:aws:iam::aws:policy/AmazonCognitoPowerUser\" } # IAM Role Policy Attachment AmazonCognitoDeveloperAuthenticatedIdentities resource \"aws_iam_role_policy_attachment\" \"AmazonCognitoDeveloperAuthenticatedIdentities\" { role = aws_iam_role.cognito_role.name policy_arn = \"arn:aws:iam::aws:policy/AmazonCognitoDeveloperAuthenticatedIdentities\" } ``` my lambda terraform ``` resource \"aws_lambda_function\" \"myfunction\" { filename = \"myfunction.zip\" function_name = \"myfunction\" role = aws_iam_role.cognito_role.arn handler = \"myfunction.lambda_handler\" runtime = \"python3.10\" timeout = 300 source_code_hash = data.archive_file.post_authentication.output_base64sha256 environment { variables = { DYNAMODB_TABLE = aws_dynamodb_table.my_table.name } } vpc_config { subnet_ids = aws_subnet.private_subnets[*].id security_group_ids = [aws_security_group.sg.id] } } resource \"aws_lambda_permission\" \"store_user_to_dynamodb_permission\" { statement_id = \"AllowExecutionFromCognito\" action = \"lambda:InvokeFunction\" function_name = aws_lambda_function.myfunction.function_name principal = \"cognito-idp.amazonaws.com\" source_arn = aws_cognito_user_pool.user_pool.arn } ``` my lambda function ``` import json import boto3 from datetime import datetime dynamodb = boto3.resource('dynamodb') def lambda_handler(event, context): try: user_name = event['userName'] trigger_source = event['triggerSource'] user_attributes = event['request']['userAttributes'] email = user_attributes.get('email', '') login_time = datetime.now().isoformat() status = 'success' if trigger_source == 'PostAuthentication_Authentication' else 'failed' table = dynamodb.Table('users') table.put_item( Item={ 'user_id': user_name, 'email': email, 'login_time': login_time, 'status': status } ) return event except KeyError as e: return { 'errorMessage': str(e), 'errorType': 'KeyError', 'requestId': context.aws_request_id} ```", "keywords": ["bill", "domain", "policy"]}]}, {"Id": "295744702", "PostHistoryTypeId": "6", "PostId": "76746026", "RevisionGUID": "7409937b-4e2d-48e2-9ba1-8da279295fe2", "CreationDate": "2023-07-23T09:34:36.297", "UserId": "8343484", "Comment": "edited tags", "Text": "<amazon-web-services><aws-lambda><terraform><amazon-dynamodb><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}