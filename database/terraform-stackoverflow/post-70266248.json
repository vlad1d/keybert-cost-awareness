{"Id": "70266248", "PostTypeId": "1", "AcceptedAnswerId": "70274395", "CreationDate": "2021-12-07T19:59:56.513", "Score": "0", "ViewCount": "2083", "Body": "<p>I am attempting to generate a random username and password, store them in key vault and then immediately (after they are stored) retrieve them and use them as variables in the sql server creation.</p>\n<p>Considering this code:</p>\n<pre><code>resource &quot;random_string&quot; &quot;username&quot; {\n  length = 24\n  special = true\n  override_special = &quot;%@!&quot;\n}\n\nresource &quot;random_password&quot; &quot;password&quot; {\n  length = 24\n  special = true\n  override_special = &quot;%@!&quot;\n}\n\n# # Create KeyVault Secret\nresource &quot;azurerm_key_vault_secret&quot; &quot;sql-1-username&quot; {\n  name         = &quot;sql-server-1-username&quot;\n  value        = random_string.username.result\n  key_vault_id = azurerm_key_vault.key_vault.id\n  tags = merge(local.common_tags, tomap({&quot;type&quot; = &quot;key-vault-secret-username&quot;}), tomap({&quot;resource&quot; = azurerm_mssql_server.sql-server_1.name}))\n  depends_on = [azurerm_key_vault.key_vault]\n}\n\nresource &quot;azurerm_key_vault_secret&quot; &quot;sql-1-password&quot; {\n  name         = &quot;sql-server-1-password&quot;\n  value        = random_password.password.result\n  key_vault_id = azurerm_key_vault.key_vault.id\n  tags = merge(local.common_tags, tomap({&quot;type&quot; = &quot;key-vault-secret-password&quot;}), tomap({&quot;resource&quot; = azurerm_mssql_server.sql-server_1.name}))\n  depends_on = [azurerm_key_vault.key_vault]\n}\n\ndata &quot;azurerm_key_vault_secret&quot; &quot;sql-server-1-username&quot; {\n  name = &quot;sql-server-1-username&quot;\n  key_vault_id = azurerm_key_vault.key_vault.id\n}\n\ndata &quot;azurerm_key_vault_secret&quot; &quot;sql-server-1-password&quot; {\n  name = &quot;sql-server-1-password&quot;\n  key_vault_id = azurerm_key_vault.key_vault.id\n}\n\nresource &quot;azurerm_mssql_server&quot; &quot;sql-server_1&quot; {\n  name = &quot;${local.resource-name-prefix}-sql-server-1&quot;\n  resource_group_name = local.resource-group-name\n  location            = var.resource-location\n  version                      = &quot;12.0&quot;\n  administrator_login          = data.azurerm_key_vault_secret.sql-server-1-username.value\n  administrator_login_password = data.azurerm_key_vault_secret.sql-server-1-password.value\n  tags = merge(local.common_tags, tomap({&quot;type&quot; = &quot;mssql-server&quot;}))\n}\n</code></pre>\n<p>When running this via terraform I get:</p>\n<pre><code>\u2502 Error: KeyVault Secret &quot;sql-server-1-username&quot; &lt;&lt;&lt;KEY VAULT&gt;&gt;&gt; does not exist\n\u2502 \n\u2502   with data.azurerm_key_vault_secret.sql-server-1-username,\n\u2502   on sql-server.tf line 31, in data &quot;azurerm_key_vault_secret&quot; &quot;sql-server-1-username&quot;:\n\u2502   31: data &quot;azurerm_key_vault_secret&quot; &quot;sql-server-1-username&quot; {\n\u2502 \n\u2575\n\u2577\n\u2502 Error: KeyVault Secret &quot;sql-server-1-password&quot; &lt;&lt;&lt;KEY VAULT&gt;&gt;&gt; does not exist\n\u2502 \n\u2502   with data.azurerm_key_vault_secret.sql-server-1-password,\n\u2502   on sql-server.tf line 36, in data &quot;azurerm_key_vault_secret&quot; &quot;sql-server-1-password&quot;:\n\u2502   36: data &quot;azurerm_key_vault_secret&quot; &quot;sql-server-1-password&quot; {\n\u2502 \n</code></pre>\n<p>and I understand because at run time terraform is trying to evaluate that secret but it hasn't been created.</p>\n<p>My question is, is there a way to define a value, store it as a key vault secret and then upon completion of that azurerm_key_vault_secret resource being complete, retrieve that value?</p>\n<p>As a work around, I've put lifecycle blocks with ignore_change for the username and password values on both the key vault secret resources and the sql server. That <em>should</em> give me the same values in key vault being used as the username/password for the sql server, but that feels like the wrong solution.</p>\n<p>What would be the better way?</p>\n", "OwnerUserId": "5381514", "LastEditorUserId": "5381514", "LastEditDate": "2021-12-07T23:47:03.670", "LastActivityDate": "2021-12-08T14:19:44.407", "Title": "In terraform using Azure, is it possible to create a key vault secret and reference that secret in the same file on the same run?", "Tags": "<azure><terraform><azure-keyvault>", "AnswerCount": "1", "CommentCount": "6", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "124212667", "PostId": "70266248", "Score": "0", "Text": "Why are using data when you have the actual resource there?", "CreationDate": "2021-12-07T20:57:21.040", "UserId": "7599833", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124213046", "PostId": "70266248", "Score": "1", "Text": "What about using the \"random resources\" directly and save them later?", "CreationDate": "2021-12-07T21:15:33.597", "UserId": "10813099", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124213926", "PostId": "70266248", "Score": "0", "Text": "There is no such thing as `data.azurerm_key_vault_secret.sql-1-username` in your code.", "CreationDate": "2021-12-07T22:05:56.690", "UserId": "248823", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124215392", "PostId": "70266248", "Score": "0", "Text": "@Marcin You're right. I copied the wrong code. I've updated it.", "CreationDate": "2021-12-07T23:44:51.170", "UserId": "5381514", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124215452", "PostId": "70266248", "Score": "0", "Text": "@HelderSepulveda That's what I ended up doing. I was trying to limit the places I have to put lifecycle blocks to just the azurerm_key_vault_secret definitions and not have one in the sql server definition too. Now I just have multiple lifecycle blocks. I guess it doesn't really matter, I just wanted to ensure I was using whatever ended up in the key vault.", "CreationDate": "2021-12-07T23:49:41.813", "UserId": "5381514", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124215461", "PostId": "70266248", "Score": "0", "Text": "If you put a secret in the vault, you know what you put in, can't you just use that value directly?", "CreationDate": "2021-12-07T23:50:43.410", "UserId": "9208887", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "259582051", "PostHistoryTypeId": "2", "PostId": "70266248", "RevisionGUID": "e9df435c-e391-4d2c-a1c8-cfc5c8bff578", "CreationDate": "2021-12-07T19:59:56.513", "UserId": "5381514", "Text": "I am attempting to generate a random username and password, store them in key vault and then immediately (after they are stored) retrieve them and use them as variables in the sql server creation.\r\n\r\nConsidering this code:\r\n\r\n```\r\nresource \"random_string\" \"username\" {\r\n  length           = 24\r\n  special          = true\r\n  override_special = \"%@!\"\r\n}\r\n\r\nresource \"random_password\" \"password\" {\r\n  length           = 24\r\n  special          = true\r\n  override_special = \"%@!\"\r\n}\r\n\r\nresource \"azurerm_key_vault_secret\" \"sql-1-username\" {\r\n  name         = \"sql-server-1-username\"\r\n  value        = random_string.username.result\r\n  key_vault_id = azurerm_key_vault.key_vault.id\r\n  tags         = merge(local.common_tags, tomap({ \"type\" = \"key-vault-secret-username\" }), tomap({ \"resource\" = azurerm_mssql_server.sql-server_1.name }))\r\n  depends_on   = [azurerm_key_vault.key_vault]\r\n  }\r\n}\r\n\r\nresource \"azurerm_key_vault_secret\" \"sql-1-password\" {\r\n  name         = \"sql-server-1-password\"\r\n  value        = random_password.password.result\r\n  key_vault_id = azurerm_key_vault.key_vault.id\r\n  tags         = merge(local.common_tags, tomap({ \"type\" = \"key-vault-secret-password\" }), tomap({ \"resource\" = azurerm_mssql_server.sql-server_1.name }))\r\n  depends_on   = [azurerm_key_vault.key_vault]\r\n}\r\n\r\nresource \"azurerm_mssql_server\" \"sql-server_1\" {\r\n  name                         = \"${local.resource-name-prefix}-sql-server-1\"\r\n  resource_group_name          = local.resource-group-name\r\n  location                     = var.resource-location\r\n  version                      = \"12.0\"\r\n  administrator_login          = data.azurerm_key_vault_secret.sql-1-username.value\r\n  administrator_login_password = data.azurerm_key_vault_secret.sql-1-password.value\r\n  tags = merge(local.common_tags, tomap({ \"type\" = \"mssql-server\" }))\r\n}\r\n```\r\n\r\nWhen running this via terraform I get:\r\n```\r\n\u2502 Error: KeyVault Secret \"sql-server-1-username\" <<<KEY VAULT>>> does not exist\r\n\u2502 \r\n\u2502   with data.azurerm_key_vault_secret.sql-server-1-username,\r\n\u2502   on sql-server.tf line 31, in data \"azurerm_key_vault_secret\" \"sql-server-1-username\":\r\n\u2502   31: data \"azurerm_key_vault_secret\" \"sql-server-1-username\" {\r\n\u2502 \r\n\u2575\r\n\u2577\r\n\u2502 Error: KeyVault Secret \"sql-server-1-password\" <<<KEY VAULT>>> does not exist\r\n\u2502 \r\n\u2502   with data.azurerm_key_vault_secret.sql-server-1-password,\r\n\u2502   on sql-server.tf line 36, in data \"azurerm_key_vault_secret\" \"sql-server-1-password\":\r\n\u2502   36: data \"azurerm_key_vault_secret\" \"sql-server-1-password\" {\r\n\u2502 \r\n```\r\nand I understand because at run time terraform is trying to evaluate that secret but it hasn't been created.\r\n\r\nMy question is, is there a way to define a value, store it as a key vault secret and then upon completion of that azurerm_key_vault_secret resource being complete, retrieve that value?\r\n\r\nAs a work around, I've put lifecycle blocks with ignore_change for the username and password values on both the key vault secret resources and the sql server. That _should_ give me the same values in key vault being used as the username/password for the sql server, but that feels like the wrong solution.\r\n\r\nWhat would be the better way?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "259582053", "PostHistoryTypeId": "1", "PostId": "70266248", "RevisionGUID": "e9df435c-e391-4d2c-a1c8-cfc5c8bff578", "CreationDate": "2021-12-07T19:59:56.513", "UserId": "5381514", "Text": "In terraform using Azure, is it possible to create a key vault secret and reference that secret in the same file on the same run?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "259582054", "PostHistoryTypeId": "3", "PostId": "70266248", "RevisionGUID": "e9df435c-e391-4d2c-a1c8-cfc5c8bff578", "CreationDate": "2021-12-07T19:59:56.513", "UserId": "5381514", "Text": "<azure><terraform><azure-keyvault>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "259592656", "PostHistoryTypeId": "5", "PostId": "70266248", "RevisionGUID": "278c4901-b4b0-455c-97bf-baa85a232107", "CreationDate": "2021-12-07T23:47:03.670", "UserId": "5381514", "Comment": "added 221 characters in body", "Text": "I am attempting to generate a random username and password, store them in key vault and then immediately (after they are stored) retrieve them and use them as variables in the sql server creation.\r\n\r\nConsidering this code:\r\n\r\n```\r\nresource \"random_string\" \"username\" {\r\n  length = 24\r\n  special = true\r\n  override_special = \"%@!\"\r\n}\r\n\r\nresource \"random_password\" \"password\" {\r\n  length = 24\r\n  special = true\r\n  override_special = \"%@!\"\r\n}\r\n\r\n# # Create KeyVault Secret\r\nresource \"azurerm_key_vault_secret\" \"sql-1-username\" {\r\n  name         = \"sql-server-1-username\"\r\n  value        = random_string.username.result\r\n  key_vault_id = azurerm_key_vault.key_vault.id\r\n  tags = merge(local.common_tags, tomap({\"type\" = \"key-vault-secret-username\"}), tomap({\"resource\" = azurerm_mssql_server.sql-server_1.name}))\r\n  depends_on = [azurerm_key_vault.key_vault]\r\n}\r\n\r\nresource \"azurerm_key_vault_secret\" \"sql-1-password\" {\r\n  name         = \"sql-server-1-password\"\r\n  value        = random_password.password.result\r\n  key_vault_id = azurerm_key_vault.key_vault.id\r\n  tags = merge(local.common_tags, tomap({\"type\" = \"key-vault-secret-password\"}), tomap({\"resource\" = azurerm_mssql_server.sql-server_1.name}))\r\n  depends_on = [azurerm_key_vault.key_vault]\r\n}\r\n\r\ndata \"azurerm_key_vault_secret\" \"sql-server-1-username\" {\r\n  name = \"sql-server-1-username\"\r\n  key_vault_id = azurerm_key_vault.key_vault.id\r\n}\r\n\r\ndata \"azurerm_key_vault_secret\" \"sql-server-1-password\" {\r\n  name = \"sql-server-1-password\"\r\n  key_vault_id = azurerm_key_vault.key_vault.id\r\n}\r\n\r\nresource \"azurerm_mssql_server\" \"sql-server_1\" {\r\n  name = \"${local.resource-name-prefix}-sql-server-1\"\r\n  resource_group_name = local.resource-group-name\r\n  location            = var.resource-location\r\n  version                      = \"12.0\"\r\n  administrator_login          = data.azurerm_key_vault_secret.sql-server-1-username.value\r\n  administrator_login_password = data.azurerm_key_vault_secret.sql-server-1-password.value\r\n  tags = merge(local.common_tags, tomap({\"type\" = \"mssql-server\"}))\r\n}\r\n```\r\n\r\nWhen running this via terraform I get:\r\n```\r\n\u2502 Error: KeyVault Secret \"sql-server-1-username\" <<<KEY VAULT>>> does not exist\r\n\u2502 \r\n\u2502   with data.azurerm_key_vault_secret.sql-server-1-username,\r\n\u2502   on sql-server.tf line 31, in data \"azurerm_key_vault_secret\" \"sql-server-1-username\":\r\n\u2502   31: data \"azurerm_key_vault_secret\" \"sql-server-1-username\" {\r\n\u2502 \r\n\u2575\r\n\u2577\r\n\u2502 Error: KeyVault Secret \"sql-server-1-password\" <<<KEY VAULT>>> does not exist\r\n\u2502 \r\n\u2502   with data.azurerm_key_vault_secret.sql-server-1-password,\r\n\u2502   on sql-server.tf line 36, in data \"azurerm_key_vault_secret\" \"sql-server-1-password\":\r\n\u2502   36: data \"azurerm_key_vault_secret\" \"sql-server-1-password\" {\r\n\u2502 \r\n```\r\nand I understand because at run time terraform is trying to evaluate that secret but it hasn't been created.\r\n\r\nMy question is, is there a way to define a value, store it as a key vault secret and then upon completion of that azurerm_key_vault_secret resource being complete, retrieve that value?\r\n\r\nAs a work around, I've put lifecycle blocks with ignore_change for the username and password values on both the key vault secret resources and the sql server. That _should_ give me the same values in key vault being used as the username/password for the sql server, but that feels like the wrong solution.\r\n\r\nWhat would be the better way?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "70274395", "PostTypeId": "2", "ParentId": "70266248", "CreationDate": "2021-12-08T11:40:30.010", "Score": "1", "Body": "<p>When using <code>data.azurerm_key_vault_secret.*</code> in <code>azurerm_mssql_server</code> it doesn't consider dependency , so instead of creating the <em><strong>keyvault secret</strong></em> it creates the <em><strong>sqlserver</strong></em> first as it doesn't have any dependencies on the resources created by the file thats the reason you get the error .</p>\n<p>For solution , If you are creating the <em><strong>keyvault secret</strong></em> in the same file then instead of using <em><strong>data blocks</strong></em> , you can directly reference the value for <em><strong>administrator_login</strong></em> and <em><strong>administrator_login_password</strong></em> with <code>azurerm_key_vault_secret.sql-1-username.value</code> and <code>azurerm_key_vault_secret.sql-1-password.value</code>.</p>\n<p><strong>Your Code will be like below:</strong></p>\n<pre><code>resource &quot;random_string&quot; &quot;username&quot; {\n  length = 24\n  special = true\n  override_special = &quot;%@!&quot;\n}\n\nresource &quot;random_password&quot; &quot;password&quot; {\n  length = 24\n  special = true\n  override_special = &quot;%@!&quot;\n}\n\n# # Create KeyVault Secret\nresource &quot;azurerm_key_vault_secret&quot; &quot;sql-1-username&quot; {\n  name         = &quot;sql-server-1-username&quot;\n  value        = random_string.username.result\n  key_vault_id = azurerm_key_vault.key_vault.id\n  tags = merge(local.common_tags, tomap({&quot;type&quot; = &quot;key-vault-secret-username&quot;}), tomap({&quot;resource&quot; = azurerm_mssql_server.sql-server_1.name}))\n  depends_on = [azurerm_key_vault.key_vault]\n}\n\nresource &quot;azurerm_key_vault_secret&quot; &quot;sql-1-password&quot; {\n  name         = &quot;sql-server-1-password&quot;\n  value        = random_password.password.result\n  key_vault_id = azurerm_key_vault.key_vault.id\n  tags = merge(local.common_tags, tomap({&quot;type&quot; = &quot;key-vault-secret-password&quot;}), tomap({&quot;resource&quot; = azurerm_mssql_server.sql-server_1.name}))\n  depends_on = [azurerm_key_vault_secret.sql-1-username]\n}\n\n\nresource &quot;azurerm_mssql_server&quot; &quot;sql-server_1&quot; {\n  name = &quot;${local.resource-name-prefix}-sql-server-1&quot;\n  resource_group_name = local.resource-group-name\n  location            = var.resource-location\n  version                      = &quot;12.0&quot;\n  administrator_login          = azurerm_key_vault_secret.sql-1-username.value\n  administrator_login_password = azurerm_key_vault_secret.sql-1-password.value\n  tags = merge(local.common_tags, tomap({&quot;type&quot; = &quot;mssql-server&quot;}))\n  depends_on = [azurerm_key_vault_secret.sql-1-password]\n}\n</code></pre>\n", "OwnerUserId": "15969299", "LastEditorUserId": "15969299", "LastEditDate": "2021-12-08T14:19:44.407", "LastActivityDate": "2021-12-08T14:19:44.407", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "124229289", "PostId": "70274395", "Score": "0", "Text": "Hey, thanks for your reply. This is what I initially tried to do but I get a cycle error and that made me try other methods.\n```\n\u2502 Error: Cycle: azurerm_key_vault_secret.sql-1-username, azurerm_mssql_server.sql-server_1, azurerm_key_vault_secret.sql-1-password\n```", "CreationDate": "2021-12-08T14:13:08.280", "UserId": "5381514", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124229403", "PostId": "70274395", "Score": "0", "Text": "@JasonShive , may i know the version of azurerm and terraform you are using?", "CreationDate": "2021-12-08T14:17:18.507", "UserId": "15969299", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124229557", "PostId": "70274395", "Score": "0", "Text": "Also , i edited the code with depends on in 2nd secret.. it will be created after the 1st secret is created and then added a depends on in mssql as well", "CreationDate": "2021-12-08T14:22:30.173", "UserId": "15969299", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124229561", "PostId": "70274395", "Score": "0", "Text": "can you try the new updated code", "CreationDate": "2021-12-08T14:22:39.523", "UserId": "15969299", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "124256932", "PostId": "70274395", "Score": "0", "Text": "The depends on was something I had tried as well and it still throws a cycle error but I was overcomplicating the process and your solution is much more efficient.  However, I was using version 1.0.5 of the binary and 2.69.0 provider. This was because our azure government cloud runs failed on newer versions, but I suspect this to be resolved in the future.", "CreationDate": "2021-12-09T15:06:05.383", "UserId": "5381514", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The depends on was something I had tried as well and it still throws a cycle error but I was overcomplicating the process and your solution is much more efficient. ", "keywords": ["efficient"]}, {"source": "Text", "text": "However, I was using version 1.0.5 of the binary and 2.69.0 provider. ", "keywords": ["provider"]}]}], "history": [{"Id": "259624331", "PostHistoryTypeId": "2", "PostId": "70274395", "RevisionGUID": "c9476f09-c77b-42e0-b38b-cc2d6ab7ab05", "CreationDate": "2021-12-08T11:40:30.010", "UserId": "15969299", "Text": "When using `data.azurerm_key_vault_secret.*` in `azurerm_mssql_server` it doesn't consider dependency , so instead of creating the ***keyvault secret*** it creates the ***sqlserver*** first as it doesn't have any dependencies on the resources created by the file thats the reason you get the error .\r\n\r\nFor solution , If you are creating the ***keyvault secret*** in the same file then instead of using ***data blocks*** , you can directly reference the value for ***administrator_login*** and ***administrator_login_password*** with `azurerm_key_vault_secret.sql-1-username.value` and `azurerm_key_vault_secret.sql-1-password.value`.\r\n\r\n**Your Code will be like below:**\r\n\r\n    resource \"random_string\" \"username\" {\r\n      length = 24\r\n      special = true\r\n      override_special = \"%@!\"\r\n    }\r\n    \r\n    resource \"random_password\" \"password\" {\r\n      length = 24\r\n      special = true\r\n      override_special = \"%@!\"\r\n    }\r\n    \r\n    # # Create KeyVault Secret\r\n    resource \"azurerm_key_vault_secret\" \"sql-1-username\" {\r\n      name         = \"sql-server-1-username\"\r\n      value        = random_string.username.result\r\n      key_vault_id = azurerm_key_vault.key_vault.id\r\n      tags = merge(local.common_tags, tomap({\"type\" = \"key-vault-secret-username\"}), tomap({\"resource\" = azurerm_mssql_server.sql-server_1.name}))\r\n      depends_on = [azurerm_key_vault.key_vault]\r\n    }\r\n    \r\n    resource \"azurerm_key_vault_secret\" \"sql-1-password\" {\r\n      name         = \"sql-server-1-password\"\r\n      value        = random_password.password.result\r\n      key_vault_id = azurerm_key_vault.key_vault.id\r\n      tags = merge(local.common_tags, tomap({\"type\" = \"key-vault-secret-password\"}), tomap({\"resource\" = azurerm_mssql_server.sql-server_1.name}))\r\n      depends_on = [azurerm_key_vault.key_vault]\r\n    }\r\n    \r\n    \r\n    resource \"azurerm_mssql_server\" \"sql-server_1\" {\r\n      name = \"${local.resource-name-prefix}-sql-server-1\"\r\n      resource_group_name = local.resource-group-name\r\n      location            = var.resource-location\r\n      version                      = \"12.0\"\r\n      administrator_login          = azurerm_key_vault_secret.sql-1-username.value\r\n      administrator_login_password = azurerm_key_vault_secret.sql-1-password.value\r\n      tags = merge(local.common_tags, tomap({\"type\" = \"mssql-server\"}))\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "259635500", "PostHistoryTypeId": "5", "PostId": "70274395", "RevisionGUID": "c355aeea-1726-4ac2-8b28-df01d20b6022", "CreationDate": "2021-12-08T14:19:44.407", "UserId": "15969299", "Comment": "added 12 characters in body", "Text": "When using `data.azurerm_key_vault_secret.*` in `azurerm_mssql_server` it doesn't consider dependency , so instead of creating the ***keyvault secret*** it creates the ***sqlserver*** first as it doesn't have any dependencies on the resources created by the file thats the reason you get the error .\r\n\r\nFor solution , If you are creating the ***keyvault secret*** in the same file then instead of using ***data blocks*** , you can directly reference the value for ***administrator_login*** and ***administrator_login_password*** with `azurerm_key_vault_secret.sql-1-username.value` and `azurerm_key_vault_secret.sql-1-password.value`.\r\n\r\n**Your Code will be like below:**\r\n\r\n    resource \"random_string\" \"username\" {\r\n      length = 24\r\n      special = true\r\n      override_special = \"%@!\"\r\n    }\r\n    \r\n    resource \"random_password\" \"password\" {\r\n      length = 24\r\n      special = true\r\n      override_special = \"%@!\"\r\n    }\r\n    \r\n    # # Create KeyVault Secret\r\n    resource \"azurerm_key_vault_secret\" \"sql-1-username\" {\r\n      name         = \"sql-server-1-username\"\r\n      value        = random_string.username.result\r\n      key_vault_id = azurerm_key_vault.key_vault.id\r\n      tags = merge(local.common_tags, tomap({\"type\" = \"key-vault-secret-username\"}), tomap({\"resource\" = azurerm_mssql_server.sql-server_1.name}))\r\n      depends_on = [azurerm_key_vault.key_vault]\r\n    }\r\n    \r\n    resource \"azurerm_key_vault_secret\" \"sql-1-password\" {\r\n      name         = \"sql-server-1-password\"\r\n      value        = random_password.password.result\r\n      key_vault_id = azurerm_key_vault.key_vault.id\r\n      tags = merge(local.common_tags, tomap({\"type\" = \"key-vault-secret-password\"}), tomap({\"resource\" = azurerm_mssql_server.sql-server_1.name}))\r\n      depends_on = [azurerm_key_vault_secret.sql-1-username]\r\n    }\r\n    \r\n    \r\n    resource \"azurerm_mssql_server\" \"sql-server_1\" {\r\n      name = \"${local.resource-name-prefix}-sql-server-1\"\r\n      resource_group_name = local.resource-group-name\r\n      location            = var.resource-location\r\n      version                      = \"12.0\"\r\n      administrator_login          = azurerm_key_vault_secret.sql-1-username.value\r\n      administrator_login_password = azurerm_key_vault_secret.sql-1-password.value\r\n      tags = merge(local.common_tags, tomap({\"type\" = \"mssql-server\"}))\r\n      depends_on = [azurerm_key_vault_secret.sql-1-password]\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}