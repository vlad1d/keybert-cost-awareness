{"Id": "55366841", "PostTypeId": "1", "CreationDate": "2019-03-26T22:03:13.367", "Score": "4", "ViewCount": "1903", "Body": "<p>I am testing a cloudwatch alarm filter (to be precise checking if lambda maxed out in memory) to send to SNS which then is sent to SQS queue. However, I do not see the filter appeared in logs. \nThe setup is <code>cloudwatch (filtered alarm) -&gt; SNS -&gt; SQS -&gt;splunk</code></p>\n\n<p>What I have so far:</p>\n\n<pre><code>resource \"aws_cloudwatch_metric_alarm\" \"general_lambda_error\" {\n    depends_on = [\n      \"aws_cloudwatch_log_metric_filter.max_memory_time_out\",\n    ]   \n    alarm_name                = \"general_lambda_error\"\n    comparison_operator       = \"GreaterThanOrEqualToThreshold\" \n    evaluation_periods        = \"1\" \n    metric_name               = \"Errors\" \n    namespace                 = \"AWS/Lambda\" \n    period                    = \"60\" \n    statistic                 = \"SampleCount\" \n    threshold                 = \"2\"\n    alarm_description         = \"This metric monitors Lambda Memory Max Usage and other Errors: threshold=2\"\n    alarm_actions             = [ \"some-arn\" ]\n    dimensions {\n      FunctionName = \"lambda-test\"\n      Resource = \"lambda-test\"\n    }\n}\nresource \"aws_cloudwatch_log_metric_filter\" \"max_memory_time_out\" {\n    name                      = \"max_memory_time_out\"\n    pattern                   = \"[report_name=\\\"REPORT\\\", \n  request_id_name=\\\"RequestId:\\\", request_id_value, duration_name=\\\"Duration:\\\", duration_value, duration_unit=\\\"ms\\\", billed_duration_name_1=\\\"Billed\\\", bill_duration_name_2=\\\"Duration:\\\", billed_duration_value, billed_duration_unit=\\\"ms\\\", memory_size_name_1=\\\"Memory\\\", memory_size_name_2=\\\"Size:\\\", memory_size_value, memory_size_unit=\\\"MB\\\", max_memory_used_name_1=\\\"Max\\\", max_memory_used_name_2=\\\"Memory\\\", max_memory_used_name_3=\\\"Used:\\\", max_memory_used_value, max_memory_used_unit=\\\"MB\\\"]\"\n    log_group_name            = \"/aws/lambda/lambda-test\"\n    metric_transformation {\n      name      = \"SampleCount\"\n      namespace = \"cloudwatch_filter\"\n      value     = \"1\"\n    }\n}\n</code></pre>\n\n<p>How can I send the filtered message? I have found this <a href=\"https://stackoverflow.com/questions/52668487/sending-messages-to-sns-from-cloudwatch-via-regex\">link</a> which describes similar problem but solution is to create a lambda function. Can I do it without creating lambda function?</p>\n", "OwnerUserId": "4835773", "LastActivityDate": "2019-03-29T16:48:51.693", "Title": "How to send Cloudwatch alarm to SNS based on Cloudwatch log metric filter using Terraform", "Tags": "<terraform><amazon-cloudwatch><amazon-cloudwatch-metrics>", "AnswerCount": "1", "CommentCount": "4", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "97522624", "PostId": "55366841", "Score": "1", "Text": "You are mistaking a log filter with a log subscription filter. Log filters are use to create metrics, which can then be used to create alarms. Log subscription filters, are using to send filtered content to a destination such as Kinesis. I've done this by creating a firehose to send the data to S3, and then creating an S3 notfication to send to SQS. Then splunk can read from SQS.", "CreationDate": "2019-03-28T15:13:39.723", "UserId": "5660156", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "97523073", "PostId": "55366841", "Score": "0", "Text": "You also have a subscription filter to send logs to another lambda function, and have that Lambda function write the log entries to SQS", "CreationDate": "2019-03-28T15:23:26.247", "UserId": "5660156", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "97557309", "PostId": "55366841", "Score": "0", "Text": "@victorm could you provide small example of using kinesis firehose? Does that mean I can use log metric filter to create alarms?", "CreationDate": "2019-03-29T14:02:29.343", "UserId": "4835773", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "97590458", "PostId": "55366841", "Score": "0", "Text": "see below for an example.", "CreationDate": "2019-03-30T23:26:27.467", "UserId": "5660156", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "1661914019", "CreationDate": "2019-03-26T22:03:13.367", "PostId": "55366841", "RelatedPostId": "52668487", "LinkTypeId": "1"}], "history": [{"Id": "194481098", "PostHistoryTypeId": "2", "PostId": "55366841", "RevisionGUID": "1581250e-9990-4c21-8174-fd504faf322c", "CreationDate": "2019-03-26T22:03:13.367", "UserId": "4835773", "Text": "I am testing a cloudwatch alarm filter (to be precise checking if lambda maxed out in memory) to send to SNS which then is sent to SQS queue. However, I do not see the filter appeared in logs. \r\nThe setup is `cloudwatch (filtered alarm) -> SNS -> SQS ->splunk`\r\n\r\nWhat I have so far:\r\n\r\n    resource \"aws_cloudwatch_metric_alarm\" \"general_lambda_error\" {\r\n        depends_on = [\r\n          \"aws_cloudwatch_log_metric_filter.max_memory_time_out\",\r\n        ]   \r\n        alarm_name                = \"general_lambda_error\"\r\n        comparison_operator       = \"GreaterThanOrEqualToThreshold\" \r\n        evaluation_periods        = \"1\" \r\n        metric_name               = \"Errors\" \r\n        namespace                 = \"AWS/Lambda\" \r\n        period                    = \"60\" \r\n        statistic                 = \"SampleCount\" \r\n        threshold                 = \"2\"\r\n        alarm_description         = \"This metric monitors Lambda Memory Max Usage and other Errors: threshold=2\"\r\n        alarm_actions             = [ \"some-arn\" ]\r\n        dimensions {\r\n          FunctionName = \"lambda-test\"\r\n          Resource = \"lambda-test\"\r\n        }\r\n    }\r\n    resource \"aws_cloudwatch_log_metric_filter\" \"max_memory_time_out\" {\r\n        name                      = \"max_memory_time_out\"\r\n        pattern                   = \"[report_name=\\\"REPORT\\\", \r\n      request_id_name=\\\"RequestId:\\\", request_id_value, duration_name=\\\"Duration:\\\", duration_value, duration_unit=\\\"ms\\\", billed_duration_name_1=\\\"Billed\\\", bill_duration_name_2=\\\"Duration:\\\", billed_duration_value, billed_duration_unit=\\\"ms\\\", memory_size_name_1=\\\"Memory\\\", memory_size_name_2=\\\"Size:\\\", memory_size_value, memory_size_unit=\\\"MB\\\", max_memory_used_name_1=\\\"Max\\\", max_memory_used_name_2=\\\"Memory\\\", max_memory_used_name_3=\\\"Used:\\\", max_memory_used_value, max_memory_used_unit=\\\"MB\\\"]\"\r\n        log_group_name            = \"/aws/lambda/lambda-test\"\r\n        metric_transformation {\r\n          name      = \"SampleCount\"\r\n          namespace = \"cloudwatch_filter\"\r\n          value     = \"1\"\r\n        }\r\n    }\r\n\r\nHow can I send the filtered message? I have found this [link][1] which describes similar problem but solution is to create a lambda function. Can I do it without creating lambda function?\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/52668487/sending-messages-to-sns-from-cloudwatch-via-regex", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am testing a cloudwatch alarm filter (to be precise checking if lambda maxed out in memory) to send to SNS which then is sent to SQS queue. ", "keywords": ["test"]}, {"source": "Text", "text": "What I have so far: resource \"aws_cloudwatch_metric_alarm\" \"general_lambda_error\" { depends_on = [ \"aws_cloudwatch_log_metric_filter.max_memory_time_out\", ] alarm_name = \"general_lambda_error\" comparison_operator = \"GreaterThanOrEqualToThreshold\" evaluation_periods = \"1\" metric_name = \"Errors\" namespace = \"AWS/Lambda\" period = \"60\" statistic = \"SampleCount\" threshold = \"2\" alarm_description = \"This metric monitors Lambda Memory Max Usage and other Errors: threshold=2\" alarm_actions = [ \"some-arn\" ] dimensions { FunctionName = \"lambda-test\" Resource = \"lambda-test\" } } resource \"aws_cloudwatch_log_metric_filter\" \"max_memory_time_out\" { name = \"max_memory_time_out\" pattern = \"[report_name=\\\"REPORT\\\", request_id_name=\\\"RequestId:\\\", request_id_value, duration_name=\\\"Duration:\\\", duration_value, duration_unit=\\\"ms\\\", billed_duration_name_1=\\\"Billed\\\", bill_duration_name_2=\\\"Duration:\\\", billed_duration_value, billed_duration_unit=\\\"ms\\\", memory_size_name_1=\\\"Memory\\\", memory_size_name_2=\\\"Size:\\\", memory_size_value, memory_size_unit=\\\"MB\\\", max_memory_used_name_1=\\\"Max\\\", max_memory_used_name_2=\\\"Memory\\\", max_memory_used_name_3=\\\"Used:\\\", max_memory_used_value, max_memory_used_unit=\\\"MB\\\"]\" log_group_name = \"/aws/lambda/lambda-test\" metric_transformation { name = \"SampleCount\" namespace = \"cloudwatch_filter\" value = \"1\" ", "keywords": ["bill", "test"]}]}, {"Id": "194481099", "PostHistoryTypeId": "1", "PostId": "55366841", "RevisionGUID": "1581250e-9990-4c21-8174-fd504faf322c", "CreationDate": "2019-03-26T22:03:13.367", "UserId": "4835773", "Text": "How to send Cloudwatch alarm to SNS based on Cloudwatch log metric filter using Terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "194481100", "PostHistoryTypeId": "3", "PostId": "55366841", "RevisionGUID": "1581250e-9990-4c21-8174-fd504faf322c", "CreationDate": "2019-03-26T22:03:13.367", "UserId": "4835773", "Text": "<terraform><amazon-cloudwatch><amazon-cloudwatch-metrics>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "55422053", "PostTypeId": "2", "ParentId": "55366841", "CreationDate": "2019-03-29T16:48:51.693", "Score": "0", "Body": "<p>Here is the code for getting cloudwatch logs to S3:</p>\n\n<pre><code>resource \"aws_iam_role\" \"cloudwatchToFirehose\" {\n  name               = \"${var.env}-${var.name}FirehoseCWL-Role\"\n\n  assume_role_policy = &lt;&lt;JSON\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": { \"Service\": \"logs.${var.region}.amazonaws.com\"},\n      \"Effect\": \"Allow\"\n  }]\n}\nJSON\n}\n\nresource \"aws_iam_policy\" \"cloudwatchToFirehose\" {\n  name   = \"${var.env}-${var.name}FirehoseCWL-Policy\"\n\n  policy = &lt;&lt;JSON\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\":\"Allow\",\n      \"Action\": [\n                \"firehose:DeleteDeliveryStream\",\n                \"firehose:PutRecord\",\n                \"firehose:PutRecordBatch\",\n                \"firehose:UpdateDestination\"\n      ],\n      \"Resource\": [\"${aws_kinesis_firehose_delivery_stream.firehoseToS3.arn}\"]\n    }\n  ]\n}\nJSON\n}\n\nresource \"aws_iam_role_policy_attachment\" \"cloudwatchToFirehose\" {\n  role       = \"${aws_iam_role.cloudwatchToFirehose.name}\"\n  policy_arn = \"${aws_iam_policy.cloudwatchToFirehose.arn}\"\n}\n\nresource \"aws_iam_role\" \"firehoseToS3\" {\n  name               = \"${var.env}-${var.name}FirehoseS3-Role\"\n  assume_role_policy = &lt;&lt;JSON\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": { \"Service\": \"firehose.amazonaws.com\"},\n      \"Effect\": \"Allow\"\n  }]\n}\nJSON\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\nresource \"aws_iam_policy\" \"firehoseToS3\" {\n  name   = \"${var.env}-${var.name}FirehoseS3-Policy\"\n  policy = &lt;&lt;JSON\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:AbortMultipartUpload\",\n                \"s3:GetBucketLocation\",\n                \"s3:GetObject\",\n                \"s3:ListBucket\",\n                \"s3:ListBucketMultipartUploads\",\n                \"s3:PutObject\",\n                \"s3:PutObjectAcl\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::${var.logs_bucket}\",\n                \"arn:aws:s3:::${var.logs_bucket}/*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"kinesis:DescribeStream\",\n                \"kinesis:GetShardIterator\",\n                \"kinesis:GetRecords\"\n            ],\n            \"Resource\": \"${aws_kinesis_firehose_delivery_stream.firehoseToS3.arn}\"\n        },\n        {\n           \"Effect\": \"Allow\",\n           \"Action\": [\n               \"kms:Decrypt\",\n               \"kms:GenerateDataKey\"\n           ],\n           \"Resource\": [\n               \"${var.kms_general_key}\"\n           ]\n        },\n        {\n           \"Effect\": \"Allow\",\n           \"Action\": [\n               \"logs:PutLogEvents\"\n           ],\n           \"Resource\": [\n               \"arn:aws:logs:*:*:log-group:${var.org}-${var.group}-${var.environment}/Firehose:*\"\n           ]\n        },\n        {\n           \"Effect\": \"Allow\",\n           \"Action\": [\n               \"lambda:InvokeFunction\",\n               \"lambda:GetFunctionConfiguration\"\n           ],\n           \"Resource\": [\n               \"arn:aws:lambda:*:*:function:*:*\"\n           ]\n        }\n  ]\n}\nJSON\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\nresource \"aws_iam_role_policy_attachment\" \"firehoseToS3\" {\n  role       = \"${aws_iam_role.firehoseToS3.name}\"\n  policy_arn = \"${aws_iam_policy.firehoseToS3.arn}\"\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\nresource \"aws_kinesis_firehose_delivery_stream\" \"firehoseToS3\" {\n  name        = \"${var.env}-${var.name}Firehose-Stream\"\n  destination = \"s3\"\n\n  s3_configuration {\n    role_arn        = \"${aws_iam_role.firehoseToS3.arn}\"\n    bucket_arn      = \"arn:aws:s3:::${var.logs_bucket}\"\n    buffer_interval = \"300\"\n    buffer_size     = \"10\"\n    prefix          = \"${var.name}\"\n  }\n}\n\nresource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatchToFirehose\" {\n  count           = \"1\"\n  name            = \"${var.env}-${var.name}Filter-Subscription\"\n  role_arn        = \"${aws_iam_role.cloudwatchToFirehose.arn}\"\n  log_group_name  = \"${element(var.log_groups, count.index)}\"\n  filter_pattern  = \"\"\n  destination_arn = \"${aws_kinesis_firehose_delivery_stream.firehoseToS3.arn}\"\n}\n</code></pre>\n", "OwnerUserId": "5660156", "LastActivityDate": "2019-03-29T16:48:51.693", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "194706412", "PostHistoryTypeId": "2", "PostId": "55422053", "RevisionGUID": "e7cf2026-9389-42d6-b3d1-aaef4c14a60b", "CreationDate": "2019-03-29T16:48:51.693", "UserId": "5660156", "Text": "Here is the code for getting cloudwatch logs to S3:\r\n\r\n    resource \"aws_iam_role\" \"cloudwatchToFirehose\" {\r\n      name               = \"${var.env}-${var.name}FirehoseCWL-Role\"\r\n    \r\n      assume_role_policy = <<JSON\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [{\r\n          \"Action\": \"sts:AssumeRole\",\r\n          \"Principal\": { \"Service\": \"logs.${var.region}.amazonaws.com\"},\r\n          \"Effect\": \"Allow\"\r\n      }]\r\n    }\r\n    JSON\r\n    }\r\n    \r\n    resource \"aws_iam_policy\" \"cloudwatchToFirehose\" {\r\n      name   = \"${var.env}-${var.name}FirehoseCWL-Policy\"\r\n    \r\n      policy = <<JSON\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n        {\r\n          \"Effect\":\"Allow\",\r\n          \"Action\": [\r\n                    \"firehose:DeleteDeliveryStream\",\r\n                    \"firehose:PutRecord\",\r\n                    \"firehose:PutRecordBatch\",\r\n                    \"firehose:UpdateDestination\"\r\n          ],\r\n          \"Resource\": [\"${aws_kinesis_firehose_delivery_stream.firehoseToS3.arn}\"]\r\n        }\r\n      ]\r\n    }\r\n    JSON\r\n    }\r\n    \r\n    resource \"aws_iam_role_policy_attachment\" \"cloudwatchToFirehose\" {\r\n      role       = \"${aws_iam_role.cloudwatchToFirehose.name}\"\r\n      policy_arn = \"${aws_iam_policy.cloudwatchToFirehose.arn}\"\r\n    }\r\n    \r\n    resource \"aws_iam_role\" \"firehoseToS3\" {\r\n      name               = \"${var.env}-${var.name}FirehoseS3-Role\"\r\n      assume_role_policy = <<JSON\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [{\r\n          \"Action\": \"sts:AssumeRole\",\r\n          \"Principal\": { \"Service\": \"firehose.amazonaws.com\"},\r\n          \"Effect\": \"Allow\"\r\n      }]\r\n    }\r\n    JSON\r\n    \r\n      lifecycle {\r\n        create_before_destroy = true\r\n      }\r\n    }\r\n    \r\n    resource \"aws_iam_policy\" \"firehoseToS3\" {\r\n      name   = \"${var.env}-${var.name}FirehoseS3-Policy\"\r\n      policy = <<JSON\r\n    {\r\n      \"Version\": \"2012-10-17\",\r\n      \"Statement\": [\r\n            {\r\n                \"Effect\": \"Allow\",\r\n                \"Action\": [\r\n                    \"s3:AbortMultipartUpload\",\r\n                    \"s3:GetBucketLocation\",\r\n                    \"s3:GetObject\",\r\n                    \"s3:ListBucket\",\r\n                    \"s3:ListBucketMultipartUploads\",\r\n                    \"s3:PutObject\",\r\n                    \"s3:PutObjectAcl\"\r\n                ],\r\n                \"Resource\": [\r\n                    \"arn:aws:s3:::${var.logs_bucket}\",\r\n                    \"arn:aws:s3:::${var.logs_bucket}/*\"\r\n                ]\r\n            },\r\n            {\r\n                \"Effect\": \"Allow\",\r\n                \"Action\": [\r\n                    \"kinesis:DescribeStream\",\r\n                    \"kinesis:GetShardIterator\",\r\n                    \"kinesis:GetRecords\"\r\n                ],\r\n                \"Resource\": \"${aws_kinesis_firehose_delivery_stream.firehoseToS3.arn}\"\r\n            },\r\n            {\r\n               \"Effect\": \"Allow\",\r\n               \"Action\": [\r\n                   \"kms:Decrypt\",\r\n                   \"kms:GenerateDataKey\"\r\n               ],\r\n               \"Resource\": [\r\n                   \"${var.kms_general_key}\"\r\n               ]\r\n            },\r\n            {\r\n               \"Effect\": \"Allow\",\r\n               \"Action\": [\r\n                   \"logs:PutLogEvents\"\r\n               ],\r\n               \"Resource\": [\r\n                   \"arn:aws:logs:*:*:log-group:${var.org}-${var.group}-${var.environment}/Firehose:*\"\r\n               ]\r\n            },\r\n            {\r\n               \"Effect\": \"Allow\",\r\n               \"Action\": [\r\n                   \"lambda:InvokeFunction\",\r\n                   \"lambda:GetFunctionConfiguration\"\r\n               ],\r\n               \"Resource\": [\r\n                   \"arn:aws:lambda:*:*:function:*:*\"\r\n               ]\r\n            }\r\n      ]\r\n    }\r\n    JSON\r\n    \r\n      lifecycle {\r\n        create_before_destroy = true\r\n      }\r\n    }\r\n    \r\n    resource \"aws_iam_role_policy_attachment\" \"firehoseToS3\" {\r\n      role       = \"${aws_iam_role.firehoseToS3.name}\"\r\n      policy_arn = \"${aws_iam_policy.firehoseToS3.arn}\"\r\n      lifecycle {\r\n        create_before_destroy = true\r\n      }\r\n    }\r\n    \r\n    resource \"aws_kinesis_firehose_delivery_stream\" \"firehoseToS3\" {\r\n      name        = \"${var.env}-${var.name}Firehose-Stream\"\r\n      destination = \"s3\"\r\n    \r\n      s3_configuration {\r\n        role_arn        = \"${aws_iam_role.firehoseToS3.arn}\"\r\n        bucket_arn      = \"arn:aws:s3:::${var.logs_bucket}\"\r\n        buffer_interval = \"300\"\r\n        buffer_size     = \"10\"\r\n        prefix          = \"${var.name}\"\r\n      }\r\n    }\r\n    \r\n    resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatchToFirehose\" {\r\n      count           = \"1\"\r\n      name            = \"${var.env}-${var.name}Filter-Subscription\"\r\n      role_arn        = \"${aws_iam_role.cloudwatchToFirehose.arn}\"\r\n      log_group_name  = \"${element(var.log_groups, count.index)}\"\r\n      filter_pattern  = \"\"\r\n      destination_arn = \"${aws_kinesis_firehose_delivery_stream.firehoseToS3.arn}\"\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Here is the code for getting cloudwatch logs to S3: resource \"aws_iam_role\" \"cloudwatchToFirehose\" { name = \"${var.env}-${var.name}FirehoseCWL-Role\" assume_role_policy = <<JSON { \"Version\": \"2012-10-17\", \"Statement\": [{ \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"logs.${var.region}.amazonaws.com\"}, \"Effect\": \"Allow\" }] } JSON } resource \"aws_iam_policy\" \"cloudwatchToFirehose\" { name = \"${var.env}-${var.name}FirehoseCWL-Policy\" policy = <<JSON { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\":\"Allow\", \"Action\": [ \"firehose:DeleteDeliveryStream\", \"firehose:PutRecord\", \"firehose:PutRecordBatch\", \"firehose:UpdateDestination\" ], \"Resource\": [\"${aws_kinesis_firehose_delivery_stream.firehoseToS3.arn}\"] } ] } JSON } resource \"aws_iam_role_policy_attachment\" \"cloudwatchToFirehose\" { role = \"${aws_iam_role.cloudwatchToFirehose.name}\" policy_arn = \"${aws_iam_policy.cloudwatchToFirehose.arn}\" } resource \"aws_iam_role\" \"firehoseToS3\" { name = \"${var.env}-${var.name}FirehoseS3-Role\" assume_role_policy = <<JSON { \"Version\": \"2012-10-17\", \"Statement\": [{ \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"firehose.amazonaws.com\"}, \"Effect\": \"Allow\" }] } JSON lifecycle { create_before_destroy = true } } resource \"aws_iam_policy\" \"firehoseToS3\" { name = \"${var.env}-${var.name}FirehoseS3-Policy\" policy = <<JSON { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"s3:AbortMultipartUpload\", \"s3:GetBucketLocation\", \"s3:GetObject\", \"s3:ListBucket\", \"s3:ListBucketMultipartUploads\", \"s3:PutObject\", \"s3:PutObjectAcl\" ], \"Resource\": [ \"arn:aws:s3:::${var.logs_bucket}\", \"arn:aws:s3:::${var.logs_bucket}/*\" ] }, { \"Effect\": \"Allow\", \"Action\": [ \"kinesis:DescribeStream\", \"kinesis:GetShardIterator\", \"kinesis:GetRecords\" ], \"Resource\": \"${aws_kinesis_firehose_delivery_stream.firehoseToS3.arn}\" }, { \"Effect\": \"Allow\", \"Action\": [ \"kms:Decrypt\", \"kms:GenerateDataKey\" ], \"Resource\": [ \"${var.kms_general_key}\" ] }, { \"Effect\": \"Allow\", \"Action\": [ \"logs:PutLogEvents\" ], \"Resource\": [ \"arn:aws:logs:*:*:log-group:${var.org}-${var.group}-${var.environment}/Firehose:*\" ] }, { \"Effect\": \"Allow\", \"Action\": [ \"lambda:InvokeFunction\", \"lambda:GetFunctionConfiguration\" ], \"Resource\": [ \"arn:aws:lambda:*:*:function:*:*\" ] } ] } JSON lifecycle { create_before_destroy = true } } resource \"aws_iam_role_policy_attachment\" \"firehoseToS3\" { role = \"${aws_iam_role.firehoseToS3.name}\" policy_arn = \"${aws_iam_policy.firehoseToS3.arn}\" lifecycle { create_before_destroy = true } } resource \"aws_kinesis_firehose_delivery_stream\" \"firehoseToS3\" { name = \"${var.env}-${var.name}Firehose-Stream\" destination = \"s3\" s3_configuration { role_arn = \"${aws_iam_role.firehoseToS3.arn}\" bucket_arn = \"arn:aws:s3:::${var.logs_bucket}\" buffer_interval = \"300\" buffer_size = \"10\" prefix = \"${var.name}\" } } resource \"aws_cloudwatch_log_subscription_filter\" \"cloudwatchToFirehose\" { count = \"1\" name = \"${var.env}-${var.name}Filter-Subscription\" role_arn = \"${aws_iam_role.cloudwatchToFirehose.arn}\" log_group_name = \"${element(var.log_groups, count.index)}\" filter_pattern = \"\" destination_arn = \"${aws_kinesis_firehose_delivery_stream.firehoseToS3.arn", "keywords": ["policy"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I am testing a cloudwatch alarm filter (to be precise checking if lambda maxed out in memory) to send to SNS which then is sent to SQS queue. ", "keywords": ["test"]}]}