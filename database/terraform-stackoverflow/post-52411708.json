{"Id": "52411708", "PostTypeId": "1", "CreationDate": "2018-09-19T17:59:40.573", "Score": "0", "ViewCount": "1634", "Body": "<p>I have this docker container to run terraform.</p>\n\n<p>alias terraform='docker run -i -t -v ~/.aws:/root/.aws:ro -v $(pwd):/app -w /app/ rubendob/terraform:0.11.8'</p>\n\n<p>is just a copy of the official terraform image. Nothing fancy. </p>\n\n<pre><code>FROM golang:alpine\nMAINTAINER \"HashiCorp Terraform Team &lt;terraform@hashicorp.com&gt;\"\n\nENV TERRAFORM_VERSION=0.11.8\n\nRUN apk add --update git bash openssh\n\nENV TF_DEV=true\nENV TF_RELEASE=true\n\nWORKDIR $GOPATH/src/github.com/hashicorp/terraform\nRUN git clone https://github.com/hashicorp/terraform.git ./ &amp;&amp; \\\n    git checkout v${TERRAFORM_VERSION} &amp;&amp; \\\n    /bin/bash scripts/build.sh\n\nRUN rm -rf /var/lib/apt/lists/*\n\nWORKDIR $GOPATH\nENTRYPOINT [\"terraform\"]\n</code></pre>\n\n<p>So I called this way:</p>\n\n<pre><code>alias terraform='docker run -i -t -v ~/.aws:/root/.aws:ro -v $(pwd):/app -w /app/ rubendob/terraform:0.11.8'\n</code></pre>\n\n<p>Then I have the next folder structure and it was working ok since ups, I decided to run some terraform stuff in the dev folder.</p>\n\n<pre><code>ls -ls tf\ntotal 0\n0 drwxr-xr-x  3 ruben.ortiz  staff   96 15 sep 23:43 dev\n0 drwxr-xr-x  6 ruben.ortiz  staff  192 11 sep 19:53 modules\n0 drwxr-xr-x  4 ruben.ortiz  staff  128 15 sep 12:39 prod\n</code></pre>\n\n<p>I ran the container like</p>\n\n<pre><code>terraform plan tf/prod/\n</code></pre>\n\n<p>and worked ok but container created then the .terraform folder with tfstate, and other stuff.</p>\n\n<p>So if I want to run the same command but to dev environment simply cannot because it detects and previous .terraform folder</p>\n\n<pre><code>ls -lisah tf/.terraform/\ntotal 8\n901814 0 drwxr-xr-x   5 ruben.ortiz  staff   160B 15 sep 12:38 .\n885805 0 drwxr-xr-x   6 ruben.ortiz  staff   192B 15 sep 23:54 ..\n901815 0 drwxr-xr-x  15 ruben.ortiz  staff   480B 16 sep 00:05 modules\n901821 0 drwxr-xr-x   3 ruben.ortiz  staff    96B 10 sep 23:02 plugins\n901819 8 -rw-r--r--   1 ruben.ortiz  staff   567B 16 sep 18:43 terraform.tfstate\n</code></pre>\n\n<p>And if I enter into the dev folder, as I just set up a volume to the current directory it is not able to see the shared modules folder.</p>\n\n<p>How do you do guys to workaround this?</p>\n\n<p>Thanks!</p>\n", "OwnerUserId": "1708632", "LastActivityDate": "2018-09-22T16:18:03.917", "Title": "Dockerized terraform and tfstate", "Tags": "<docker><terraform>", "AnswerCount": "1", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "91768965", "PostId": "52411708", "Score": "4", "Text": "Terraform is already distributed as a statically-linked binary, so running it inside a container does not really present any advantages. That Dockerfile they are using also really needs to become a multi-stage build. If you are using this for a Jenkins agent, then it may be helpful.", "CreationDate": "2018-09-19T19:05:54.693", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "91772801", "PostId": "52411708", "Score": "0", "Text": "I was really looking forward to avoiding install terraform manually or using brew.", "CreationDate": "2018-09-19T21:38:52.573", "UserId": "1708632", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "95247482", "PostId": "52411708", "Score": "0", "Text": "there's nothing too painful about: 'brew install terraform' and linux is a simple install process with an executable binary. if you're looking to automate more with your Terraform deploy process take a look at Atlantis: https://www.runatlantis.io (recently acquired by Hashicorp).", "CreationDate": "2019-01-16T05:07:09.437", "UserId": "4053049", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "111757076", "PostId": "52411708", "Score": "0", "Text": "@Rubendob do not use the base golang image as it contains a lot of build dependencies. You are actually downloading more than a single Terraform Binary. You might be able to solve your problem using different value for `TF_DATA_DIR` per workspace", "CreationDate": "2020-07-31T21:58:07.113", "UserId": "3703307", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "182104957", "PostHistoryTypeId": "2", "PostId": "52411708", "RevisionGUID": "c9a4ceb7-dd6f-43cc-8ef8-e96aaf99c1db", "CreationDate": "2018-09-19T17:59:40.573", "UserId": "1708632", "Text": "I have this docker container to run terraform.\r\n\r\nalias terraform='docker run -i -t -v ~/.aws:/root/.aws:ro -v $(pwd):/app -w /app/ rubendob/terraform:0.11.8'\r\n\r\nis just a copy of the official terraform image. Nothing fancy. \r\n\r\n\r\n    FROM golang:alpine\r\n    MAINTAINER \"HashiCorp Terraform Team <terraform@hashicorp.com>\"\r\n    \r\n    ENV TERRAFORM_VERSION=0.11.8\r\n    \r\n    RUN apk add --update git bash openssh\r\n    \r\n    ENV TF_DEV=true\r\n    ENV TF_RELEASE=true\r\n    \r\n    WORKDIR $GOPATH/src/github.com/hashicorp/terraform\r\n    RUN git clone https://github.com/hashicorp/terraform.git ./ && \\\r\n        git checkout v${TERRAFORM_VERSION} && \\\r\n        /bin/bash scripts/build.sh\r\n    \r\n    RUN rm -rf /var/lib/apt/lists/*\r\n    \r\n    WORKDIR $GOPATH\r\n    ENTRYPOINT [\"terraform\"]\r\n\r\n\r\nSo I called this way:\r\n\r\n    alias terraform='docker run -i -t -v ~/.aws:/root/.aws:ro -v $(pwd):/app -w /app/ rubendob/terraform:0.11.8'\r\n\r\nThen I have the next folder structure and it was working ok since ups, I decided to run some terraform stuff in the dev folder.\r\n\r\n    ls -ls tf\r\n    total 0\r\n    0 drwxr-xr-x  3 ruben.ortiz  staff   96 15 sep 23:43 dev\r\n    0 drwxr-xr-x  6 ruben.ortiz  staff  192 11 sep 19:53 modules\r\n    0 drwxr-xr-x  4 ruben.ortiz  staff  128 15 sep 12:39 prod\r\n\r\nI ran the container like\r\n\r\n    terraform plan tf/prod/\r\n\r\nand worked ok but container created then the .terraform folder with tfstate, and other stuff.\r\n\r\nSo if I want to run the same command but to dev environment simply cannot because it detects and previous .terraform folder\r\n\r\n    ls -lisah tf/.terraform/\r\n    total 8\r\n    901814 0 drwxr-xr-x   5 ruben.ortiz  staff   160B 15 sep 12:38 .\r\n    885805 0 drwxr-xr-x   6 ruben.ortiz  staff   192B 15 sep 23:54 ..\r\n    901815 0 drwxr-xr-x  15 ruben.ortiz  staff   480B 16 sep 00:05 modules\r\n    901821 0 drwxr-xr-x   3 ruben.ortiz  staff    96B 10 sep 23:02 plugins\r\n    901819 8 -rw-r--r--   1 ruben.ortiz  staff   567B 16 sep 18:43 terraform.tfstate\r\n\r\nAnd if I enter into the dev folder, as I just set up a volume to the current directory it is not able to see the shared modules folder.\r\n\r\nHow do you do guys to workaround this?\r\n\r\nThanks!\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "182104958", "PostHistoryTypeId": "1", "PostId": "52411708", "RevisionGUID": "c9a4ceb7-dd6f-43cc-8ef8-e96aaf99c1db", "CreationDate": "2018-09-19T17:59:40.573", "UserId": "1708632", "Text": "Dockerized terraform and tfstate", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "182104959", "PostHistoryTypeId": "3", "PostId": "52411708", "RevisionGUID": "c9a4ceb7-dd6f-43cc-8ef8-e96aaf99c1db", "CreationDate": "2018-09-19T17:59:40.573", "UserId": "1708632", "Text": "<docker><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "52458523", "PostTypeId": "2", "ParentId": "52411708", "CreationDate": "2018-09-22T16:18:03.917", "Score": "3", "Body": "<p>I have to agree with the comments here. I would encourage you to re-evaluate the benefits you are gaining from this process. </p>\n\n<p>That being said, the reason it\u2019s causing conflicts is because you are trying to invoke 2 different workspaces from a common directory. You can avoid this by overriding the working directory when you enter the container (see <a href=\"https://docs.docker.com/engine/reference/run/#workdir\" rel=\"nofollow noreferrer\">https://docs.docker.com/engine/reference/run/#workdir</a>) or simply changing directory to the correct context. </p>\n\n<p>I would also suggest you try an alternative to managing environments using different workspaces.</p>\n\n<ol>\n<li>Don\u2019t use folders to manage your IaC environments. This leads to drift as there\u2019s no common template for your infrastructure. </li>\n<li>Do use a single workspace and variables to control environment specifications. \nExample: Write your modules so that when you change the environment variable (var.stage is popular) the plan alters to fit your requirements. Typically the environments should vary as little as possible with quantity, exposure and capacity usually being the variable configurations. Dev might deploy 1 VM with 1 core and 1GB RAM in private topology but production may be 3 VMs with 2 cores and 4GB RAM with additional public topology. You can of course have more variation: dev may run database process on the same server as the application to save cost but production may have a dedicated DB instance. All of this can be managed by changing a single variable, ternary statements and interpolation. </li>\n</ol>\n", "OwnerUserId": "6229946", "LastActivityDate": "2018-09-22T16:18:03.917", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "182305252", "PostHistoryTypeId": "2", "PostId": "52458523", "RevisionGUID": "b324543a-0edd-4d80-948d-b5f7198be833", "CreationDate": "2018-09-22T16:18:03.917", "UserId": "6229946", "Text": "I have to agree with the comments here. I would encourage you to re-evaluate the benefits you are gaining from this process. \n\nThat being said, the reason it\u2019s causing conflicts is because you are trying to invoke 2 different workspaces from a common directory. You can avoid this by overriding the working directory when you enter the container (see https://docs.docker.com/engine/reference/run/#workdir) or simply changing directory to the correct context. \n\nI would also suggest you try an alternative to managing environments using different workspaces.\n\n1. Don\u2019t use folders to manage your IaC environments. This leads to drift as there\u2019s no common template for your infrastructure. \n2. Do use a single workspace and variables to control environment specifications. \nExample: Write your modules so that when you change the environment variable (var.stage is popular) the plan alters to fit your requirements. Typically the environments should vary as little as possible with quantity, exposure and capacity usually being the variable configurations. Dev might deploy 1 VM with 1 core and 1GB RAM in private topology but production may be 3 VMs with 2 cores and 4GB RAM with additional public topology. You can of course have more variation: dev may run database process on the same server as the application to save cost but production may have a dedicated DB instance. All of this can be managed by changing a single variable, ternary statements and interpolation. \n\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can avoid this by overriding the working directory when you enter the container (see https://docs.docker.com/engine/reference/run/#workdir) or simply changing directory to the correct context. ", "keywords": ["change"]}, {"source": "Text", "text": "Example: Write your modules so that when you change the environment variable (var.stage is popular) the plan alters to fit your requirements. ", "keywords": ["change"]}, {"source": "Text", "text": "Dev might deploy 1 VM with 1 core and 1GB RAM in private topology but production may be 3 VMs with 2 cores and 4GB RAM with additional public topology. ", "keywords": ["ram"]}, {"source": "Text", "text": "You can of course have more variation: dev may run database process on the same server as the application to save cost but production may have a dedicated DB instance. ", "keywords": ["cost", "instance"]}, {"source": "Text", "text": "All of this can be managed by changing a single variable, ternary statements and interpolation.", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can avoid this by overriding the working directory when you enter the container (see https://docs.docker.com/engine/reference/run/#workdir) or simply changing directory to the correct context. ", "keywords": ["change"]}, {"source": "Body", "text": "Example: Write your modules so that when you change the environment variable (var.stage is popular) the plan alters to fit your requirements. ", "keywords": ["change"]}, {"source": "Body", "text": "Dev might deploy 1 VM with 1 core and 1GB RAM in private topology but production may be 3 VMs with 2 cores and 4GB RAM with additional public topology. ", "keywords": ["ram"]}, {"source": "Body", "text": "You can of course have more variation: dev may run database process on the same server as the application to save cost but production may have a dedicated DB instance. ", "keywords": ["cost", "instance"]}, {"source": "Body", "text": "All of this can be managed by changing a single variable, ternary statements and interpolation.", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": []}