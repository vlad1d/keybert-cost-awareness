{"Id": "65873494", "PostTypeId": "1", "AcceptedAnswerId": "65877332", "CreationDate": "2021-01-24T17:03:21.567", "Score": "2", "ViewCount": "1052", "Body": "<p>I've been trying to create a local development environment to play with terraform with localstack (<a href=\"https://github.com/localstack/localstack\" rel=\"nofollow noreferrer\">https://github.com/localstack/localstack</a>) running on docker.</p>\n<p>I was already able to create a S3 bucket to store the terraform state, but I also wanted to simulate the DynamoDB as lock.</p>\n<p>The configuration is:</p>\n<p>localstack docker-compose.yml:</p>\n<pre><code>version: &quot;3.2&quot;\nservices:\n  localstack:\n    image: localstack/localstack:latest\n    container_name: localstack\n    ports:\n      - &quot;4563-4599:4563-4599&quot;\n      - &quot;8080:8080&quot;\n    environment:\n      - DATA_DIR=/tmp/localstack/data\n      - DEBUG=1\n    volumes:\n      - &quot;./.localstack:/tmp/localstack&quot;\n      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;\n</code></pre>\n<p>First terraform:</p>\n<p>Used as initial bootstrap to create s3 tfstate storage and DynamoDB table for tfstate lock.</p>\n<pre><code>provider &quot;aws&quot; {\n  region                      = &quot;us-east-1&quot;\n  access_key                  = &quot;foo&quot;\n  secret_key                  = &quot;bar&quot;\n  skip_credentials_validation = true\n  skip_requesting_account_id  = true\n  skip_metadata_api_check     = true\n  s3_force_path_style         = true\n  endpoints {\n    apigateway     = &quot;http://localhost:4566&quot;\n    cloudformation = &quot;http://localhost:4566&quot;\n    cloudwatch     = &quot;http://localhost:4566&quot;\n    dynamodb       = &quot;http://localhost:4566&quot;\n    es             = &quot;http://localhost:4566&quot;\n    firehose       = &quot;http://localhost:4566&quot;\n    iam            = &quot;http://localhost:4566&quot;\n    kinesis        = &quot;http://localhost:4566&quot;\n    lambda         = &quot;http://localhost:4566&quot;\n    route53        = &quot;http://localhost:4566&quot;\n    redshift       = &quot;http://localhost:4566&quot;\n    s3             = &quot;http://localhost:4566&quot;\n    secretsmanager = &quot;http://localhost:4566&quot;\n    ses            = &quot;http://localhost:4566&quot;\n    sns            = &quot;http://localhost:4566&quot;\n    sqs            = &quot;http://localhost:4566&quot;\n    ssm            = &quot;http://localhost:4566&quot;\n    stepfunctions  = &quot;http://localhost:4566&quot;\n    sts            = &quot;http://localhost:4566&quot;\n  }\n}\n\nresource &quot;aws_s3_bucket&quot; &quot;terraform_state&quot; {\n  bucket = &quot;terraform-state&quot;\n  acl    = &quot;private&quot;\n\n  versioning {\n    enabled = true\n  }\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = &quot;AES256&quot;\n      }\n    }\n  }\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n\nresource &quot;aws_s3_bucket_public_access_block&quot; &quot;terraform_state_access&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  block_public_acls       = true\n  ignore_public_acls      = true\n  block_public_policy     = true\n  restrict_public_buckets = true\n}\n\nresource &quot;aws_dynamodb_table&quot; &quot;terraform_state_lock&quot; {\n  name           = &quot;terraformlock&quot;\n  read_capacity  = 5\n  write_capacity = 5\n  billing_mode   = &quot;PAY_PER_REQUEST&quot;\n  hash_key       = &quot;LockID&quot;\n\n  attribute {\n    name = &quot;LockID&quot;\n    type = &quot;S&quot;\n  }\n}\n</code></pre>\n<p>Second terraform:</p>\n<p>Creates resources and will store the state in s3 and use DynamoDB to create lock.</p>\n<pre><code>terraform {\n  backend &quot;s3&quot; {\n    bucket                      = &quot;terraform-state&quot;\n    key                         = &quot;main/terraform.tfstate&quot;\n    region                      = &quot;us-east-1&quot;\n    endpoint                    = &quot;http://localhost:4566&quot;\n    skip_credentials_validation = true\n    skip_metadata_api_check     = true\n    force_path_style            = true\n    dynamodb_table              = &quot;terraformlock&quot;\n    encrypt                     = true\n  }\n}\n\nprovider &quot;aws&quot; {\n  region                      = &quot;us-east-1&quot;\n  access_key                  = &quot;foo&quot;\n  secret_key                  = &quot;bar&quot;\n  skip_credentials_validation = true\n  skip_requesting_account_id  = true\n  skip_metadata_api_check     = true\n  s3_force_path_style         = true\n  endpoints {\n    apigateway     = &quot;http://localhost:4566&quot;\n    cloudformation = &quot;http://localhost:4566&quot;\n    cloudwatch     = &quot;http://localhost:4566&quot;\n    dynamodb       = &quot;http://localhost:4566&quot;\n    es             = &quot;http://localhost:4566&quot;\n    ec2            = &quot;http://localhost:4566&quot;\n    firehose       = &quot;http://localhost:4566&quot;\n    iam            = &quot;http://localhost:4566&quot;\n    kinesis        = &quot;http://localhost:4566&quot;\n    lambda         = &quot;http://localhost:4566&quot;\n    route53        = &quot;http://localhost:4566&quot;\n    redshift       = &quot;http://localhost:4566&quot;\n    s3             = &quot;http://localhost:4566&quot;\n    secretsmanager = &quot;http://localhost:4566&quot;\n    ses            = &quot;http://localhost:4566&quot;\n    sns            = &quot;http://localhost:4566&quot;\n    sqs            = &quot;http://localhost:4566&quot;\n    ssm            = &quot;http://localhost:4566&quot;\n    stepfunctions  = &quot;http://localhost:4566&quot;\n    sts            = &quot;http://localhost:4566&quot;\n  }\n}\n\nresource &quot;aws_sqs_queue&quot; &quot;test&quot; {\n  name = &quot;test&quot;\n  tags = {\n    &quot;Environment&quot; = &quot;dev&quot;\n  }\n}\n\nresource &quot;aws_sns_topic&quot; &quot;test&quot; {\n  name         = &quot;test&quot;\n  display_name = &quot;test&quot;\n}\n\n</code></pre>\n<p>Whenever I apply the second terraform, I get this error:</p>\n<pre><code>\u276f terraform apply\nAcquiring state lock. This may take a few moments...\n\nError: Error locking state: Error acquiring the state lock: 2 errors occurred:\n        * UnrecognizedClientException: The security token included in the request is invalid.\n        status code: 400, request id: UEGJV0SQ614NIEDRB93IAF0JQ7VV4KQNSO5AEMVJF66Q9ASUAAJG\n        * UnrecognizedClientException: The security token included in the request is invalid.\n        status code: 400, request id: U1IRF6CHGK7RM4SQEGVCSU699RVV4KQNSO5AEMVJF66Q9ASUAAJG\n\n\n\nTerraform acquires a state lock to protect the state from being written\nby multiple users at the same time. Please resolve the issue above and try\nagain. For most commands, you can disable locking with the &quot;-lock=false&quot;\nflag, but this is not recommended.\n</code></pre>\n<p>Anyone have ever tried this or would have idea about what is causing it?</p>\n", "OwnerUserId": "11897868", "LastEditorUserId": "248823", "LastEditDate": "2021-01-25T00:00:46.603", "LastActivityDate": "2021-01-25T00:00:46.603", "Title": "Can't use localstack dynamoDB to lock terraform state: UnrecognizedClientException", "Tags": "<amazon-web-services><amazon-dynamodb><terraform><terraform-provider-aws><localstack>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "239406011", "PostHistoryTypeId": "2", "PostId": "65873494", "RevisionGUID": "d7c3e4fb-61ba-450b-9279-2355031f0e4a", "CreationDate": "2021-01-24T17:03:21.567", "UserId": "11897868", "Text": "I've been trying to create a local development environment to play with terraform with localstack (https://github.com/localstack/localstack) running on docker.\r\n\r\nI was already able to create a S3 bucket to store the terraform state, but I also wanted to simulate the DynamoDB as lock.\r\n\r\nThe configuration is:\r\n\r\nlocalstack docker-compose.yml:\r\n\r\n```\r\nversion: \"3.2\"\r\nservices:\r\n  localstack:\r\n    image: localstack/localstack:latest\r\n    container_name: localstack\r\n    ports:\r\n      - \"4563-4599:4563-4599\"\r\n      - \"8080:8080\"\r\n    environment:\r\n      - DATA_DIR=/tmp/localstack/data\r\n      - DEBUG=1\r\n    volumes:\r\n      - \"./.localstack:/tmp/localstack\"\r\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\r\n```\r\n\r\nFirst terraform:\r\n\r\nUsed as initial bootstrap to create s3 tfstate storage and DynamoDB table for tfstate lock.\r\n```\r\nprovider \"aws\" {\r\n  region                      = \"us-east-1\"\r\n  access_key                  = \"foo\"\r\n  secret_key                  = \"bar\"\r\n  skip_credentials_validation = true\r\n  skip_requesting_account_id  = true\r\n  skip_metadata_api_check     = true\r\n  s3_force_path_style         = true\r\n  endpoints {\r\n    apigateway     = \"http://localhost:4566\"\r\n    cloudformation = \"http://localhost:4566\"\r\n    cloudwatch     = \"http://localhost:4566\"\r\n    dynamodb       = \"http://localhost:4566\"\r\n    es             = \"http://localhost:4566\"\r\n    firehose       = \"http://localhost:4566\"\r\n    iam            = \"http://localhost:4566\"\r\n    kinesis        = \"http://localhost:4566\"\r\n    lambda         = \"http://localhost:4566\"\r\n    route53        = \"http://localhost:4566\"\r\n    redshift       = \"http://localhost:4566\"\r\n    s3             = \"http://localhost:4566\"\r\n    secretsmanager = \"http://localhost:4566\"\r\n    ses            = \"http://localhost:4566\"\r\n    sns            = \"http://localhost:4566\"\r\n    sqs            = \"http://localhost:4566\"\r\n    ssm            = \"http://localhost:4566\"\r\n    stepfunctions  = \"http://localhost:4566\"\r\n    sts            = \"http://localhost:4566\"\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"terraform_state\" {\r\n  bucket = \"terraform-state\"\r\n  acl    = \"private\"\r\n\r\n  versioning {\r\n    enabled = true\r\n  }\r\n\r\n  server_side_encryption_configuration {\r\n    rule {\r\n      apply_server_side_encryption_by_default {\r\n        sse_algorithm = \"AES256\"\r\n      }\r\n    }\r\n  }\r\n\r\n  lifecycle {\r\n    prevent_destroy = true\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"terraform_state_access\" {\r\n  bucket = aws_s3_bucket.terraform_state.id\r\n\r\n  block_public_acls       = true\r\n  ignore_public_acls      = true\r\n  block_public_policy     = true\r\n  restrict_public_buckets = true\r\n}\r\n\r\nresource \"aws_dynamodb_table\" \"terraform_state_lock\" {\r\n  name           = \"terraformlock\"\r\n  read_capacity  = 5\r\n  write_capacity = 5\r\n  billing_mode   = \"PAY_PER_REQUEST\"\r\n  hash_key       = \"LockID\"\r\n\r\n  attribute {\r\n    name = \"LockID\"\r\n    type = \"S\"\r\n  }\r\n}\r\n```\r\n\r\n\r\nSecond terraform:\r\n\r\nCreates resources and will store the state in s3 and use DynamoDB to create lock.\r\n```\r\nterraform {\r\n  backend \"s3\" {\r\n    bucket                      = \"terraform-state\"\r\n    key                         = \"main/terraform.tfstate\"\r\n    region                      = \"us-east-1\"\r\n    endpoint                    = \"http://localhost:4566\"\r\n    skip_credentials_validation = true\r\n    skip_metadata_api_check     = true\r\n    force_path_style            = true\r\n    dynamodb_table              = \"terraformlock\"\r\n    encrypt                     = true\r\n  }\r\n}\r\n\r\nprovider \"aws\" {\r\n  region                      = \"us-east-1\"\r\n  access_key                  = \"foo\"\r\n  secret_key                  = \"bar\"\r\n  skip_credentials_validation = true\r\n  skip_requesting_account_id  = true\r\n  skip_metadata_api_check     = true\r\n  s3_force_path_style         = true\r\n  endpoints {\r\n    apigateway     = \"http://localhost:4566\"\r\n    cloudformation = \"http://localhost:4566\"\r\n    cloudwatch     = \"http://localhost:4566\"\r\n    dynamodb       = \"http://localhost:4566\"\r\n    es             = \"http://localhost:4566\"\r\n    ec2            = \"http://localhost:4566\"\r\n    firehose       = \"http://localhost:4566\"\r\n    iam            = \"http://localhost:4566\"\r\n    kinesis        = \"http://localhost:4566\"\r\n    lambda         = \"http://localhost:4566\"\r\n    route53        = \"http://localhost:4566\"\r\n    redshift       = \"http://localhost:4566\"\r\n    s3             = \"http://localhost:4566\"\r\n    secretsmanager = \"http://localhost:4566\"\r\n    ses            = \"http://localhost:4566\"\r\n    sns            = \"http://localhost:4566\"\r\n    sqs            = \"http://localhost:4566\"\r\n    ssm            = \"http://localhost:4566\"\r\n    stepfunctions  = \"http://localhost:4566\"\r\n    sts            = \"http://localhost:4566\"\r\n  }\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"test\" {\r\n  name = \"test\"\r\n  tags = {\r\n    \"Environment\" = \"dev\"\r\n  }\r\n}\r\n\r\nresource \"aws_sns_topic\" \"test\" {\r\n  name         = \"test\"\r\n  display_name = \"test\"\r\n}\r\n\r\n```\r\n\r\nWhenever I apply the second terraform, I get this error:\r\n```\r\n\u276f terraform apply\r\nAcquiring state lock. This may take a few moments...\r\n\r\nError: Error locking state: Error acquiring the state lock: 2 errors occurred:\r\n        * UnrecognizedClientException: The security token included in the request is invalid.\r\n        status code: 400, request id: UEGJV0SQ614NIEDRB93IAF0JQ7VV4KQNSO5AEMVJF66Q9ASUAAJG\r\n        * UnrecognizedClientException: The security token included in the request is invalid.\r\n        status code: 400, request id: U1IRF6CHGK7RM4SQEGVCSU699RVV4KQNSO5AEMVJF66Q9ASUAAJG\r\n\r\n\r\n\r\nTerraform acquires a state lock to protect the state from being written\r\nby multiple users at the same time. Please resolve the issue above and try\r\nagain. For most commands, you can disable locking with the \"-lock=false\"\r\nflag, but this is not recommended.\r\n```\r\n\r\nAnyone have ever tried this or would have idea about what is causing it?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The configuration is: localstack docker-compose.yml: ``` version: \"3.2\" services: localstack: image: localstack/localstack:latest container_name: localstack ports: - \"4563-4599:4563-4599\" - \"8080:8080\" environment: - DATA_DIR=/tmp/localstack/data - DEBUG=1 volumes: - \"./.localstack:/tmp/localstack\" - \"/var/run/docker.sock:/var/run/docker.sock\" ``` First terraform: Used as initial bootstrap to create s3 tfstate storage and DynamoDB table for tfstate lock. ", "keywords": ["storage"]}, {"source": "Text", "text": "``` provider \"aws\" { region = \"us-east-1\" access_key = \"foo\" secret_key = \"bar\" skip_credentials_validation = true skip_requesting_account_id = true skip_metadata_api_check = true s3_force_path_style = true endpoints { apigateway = \"http://localhost:4566\" cloudformation = \"http://localhost:4566\" cloudwatch = \"http://localhost:4566\" dynamodb = \"http://localhost:4566\" es = \"http://localhost:4566\" firehose = \"http://localhost:4566\" iam = \"http://localhost:4566\" kinesis = \"http://localhost:4566\" lambda = \"http://localhost:4566\" route53 = \"http://localhost:4566\" redshift = \"http://localhost:4566\" s3 = \"http://localhost:4566\" secretsmanager = \"http://localhost:4566\" ses = \"http://localhost:4566\" sns = \"http://localhost:4566\" sqs = \"http://localhost:4566\" ssm = \"http://localhost:4566\" stepfunctions = \"http://localhost:4566\" sts = \"http://localhost:4566\" } } resource \"aws_s3_bucket\" \"terraform_state\" { bucket = \"terraform-state\" acl = \"private\" versioning { enabled = true } server_side_encryption_configuration { rule { apply_server_side_encryption_by_default { sse_algorithm = \"AES256\" } } } lifecycle { prevent_destroy = true } } resource \"aws_s3_bucket_public_access_block\" \"terraform_state_access\" { bucket = aws_s3_bucket.terraform_state.id block_public_acls = true ignore_public_acls = true block_public_policy = true restrict_public_buckets = true } resource \"aws_dynamodb_table\" \"terraform_state_lock\" { name = \"terraformlock\" read_capacity = 5 write_capacity = 5 billing_mode = \"PAY_PER_REQUEST\" hash_key = \"LockID\" attribute { name = \"LockID\" type = \"S\" } } ``` Second terraform: Creates resources and will store the state in s3 and use DynamoDB to create lock. ", "keywords": ["bill", "provider"]}, {"source": "Text", "text": "``` terraform { backend \"s3\" { bucket = \"terraform-state\" key = \"main/terraform.tfstate\" region = \"us-east-1\" endpoint = \"http://localhost:4566\" skip_credentials_validation = true skip_metadata_api_check = true force_path_style = true dynamodb_table = \"terraformlock\" encrypt = true } } provider \"aws\" { region = \"us-east-1\" access_key = \"foo\" secret_key = \"bar\" skip_credentials_validation = true skip_requesting_account_id = true skip_metadata_api_check = true s3_force_path_style = true endpoints { apigateway = \"http://localhost:4566\" cloudformation = \"http://localhost:4566\" cloudwatch = \"http://localhost:4566\" dynamodb = \"http://localhost:4566\" es = \"http://localhost:4566\" ec2 = \"http://localhost:4566\" firehose = \"http://localhost:4566\" iam = \"http://localhost:4566\" kinesis = \"http://localhost:4566\" lambda = \"http://localhost:4566\" route53 = \"http://localhost:4566\" redshift = \"http://localhost:4566\" s3 = \"http://localhost:4566\" secretsmanager = \"http://localhost:4566\" ses = \"http://localhost:4566\" sns = \"http://localhost:4566\" sqs = \"http://localhost:4566\" ssm = \"http://localhost:4566\" stepfunctions = \"http://localhost:4566\" sts = \"http://localhost:4566\" } } resource \"aws_sqs_queue\" \"test\" { name = \"test\" tags = { \"Environment\" = \"dev\" } } resource \"aws_sns_topic\" \"test\" { name = \"test\" display_name = \"test\" } ``` ", "keywords": ["provider", "test"]}]}, {"Id": "239406012", "PostHistoryTypeId": "1", "PostId": "65873494", "RevisionGUID": "d7c3e4fb-61ba-450b-9279-2355031f0e4a", "CreationDate": "2021-01-24T17:03:21.567", "UserId": "11897868", "Text": "Can't use localstack dynamoDB to lock terraform state: UnrecognizedClientException", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "239406013", "PostHistoryTypeId": "3", "PostId": "65873494", "RevisionGUID": "d7c3e4fb-61ba-450b-9279-2355031f0e4a", "CreationDate": "2021-01-24T17:03:21.567", "UserId": "11897868", "Text": "<amazon-dynamodb><terraform><terraform-provider-aws><localstack>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "239422349", "PostHistoryTypeId": "6", "PostId": "65873494", "RevisionGUID": "a6ad52dd-5874-4963-ab1d-4e5c7955cd10", "CreationDate": "2021-01-25T00:00:46.603", "UserId": "248823", "Comment": "edited tags", "Text": "<amazon-web-services><amazon-dynamodb><terraform><terraform-provider-aws><localstack>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "65877332", "PostTypeId": "2", "ParentId": "65873494", "CreationDate": "2021-01-25T00:00:36.337", "Score": "2", "Body": "<p>This probably happens because you are trying to use <strong>real DynamoDB</strong>, rather then from <code>localstack</code>. To use localstack, you have to add</p>\n<pre><code>dynamodb_endpoint           = &quot;http://localhost:4566&quot;\n</code></pre>\n<p>to your <code>backend.S3</code> configuration. Once you updated your <code>backend</code> setup, you will have to reinitialize your TF using <code>terraform init</code>.</p>\n", "OwnerUserId": "248823", "LastActivityDate": "2021-01-25T00:00:36.337", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "116478040", "PostId": "65877332", "Score": "1", "Text": "Awesome! That did the trick! \nI thought the backend's endpoint was enough for it to use my local dynamodb.\nTurns I just learned that with terraform, we can even tfstate lock in another AWS account if we want to... Much appreciate!", "CreationDate": "2021-01-25T04:14:15.277", "UserId": "11897868", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "239422345", "PostHistoryTypeId": "2", "PostId": "65877332", "RevisionGUID": "ea3a985c-b5d8-4bc0-9599-8236a3a77962", "CreationDate": "2021-01-25T00:00:36.337", "UserId": "248823", "Text": "This probably happens because you are trying to use **real DynamoDB**, rather then from `localstack`. To use localstack, you have to add \r\n\r\n```\r\ndynamodb_endpoint           = \"http://localhost:4566\"\r\n```\r\n\r\nto your `backend.S3` configuration. Once you updated your `backend` setup, you will have to reinitialize your TF using `terraform init`.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "The configuration is: localstack docker-compose.yml: First terraform: Used as initial bootstrap to create s3 tfstate storage and DynamoDB table for tfstate lock. ", "keywords": ["storage"]}]}