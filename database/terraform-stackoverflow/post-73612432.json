{"Id": "73612432", "PostTypeId": "1", "AcceptedAnswerId": "73614397", "CreationDate": "2022-09-05T16:41:42.610", "Score": "2", "ViewCount": "556", "Body": "<p>I am trying to output gcp project information by doing something like this :</p>\n<pre><code>output &quot;projects&quot; {\n  value = tomap({\n    for project_name in [&quot;project_1&quot;, &quot;project_2&quot;, &quot;project_3&quot;] :\n    project_name =&gt; tomap({\n      id     = google_project.&quot;${project_name}&quot;.id\n      number = google_project.&quot;${project_name}&quot;.number\n    })\n  })\n  description = &quot;Projects&quot;\n}\n</code></pre>\n<p>Or like this :</p>\n<pre><code>output &quot;projects&quot; {\n  value = tomap({\n    for_each = toset([google_project.project_1,google_project.project_2])\n    id       = each.key.id\n    number   = each.key.number\n\n  })\n  description = &quot;Projects&quot;\n}\n</code></pre>\n<p>Is it at all possible to use resource names this way? Do I have to specify every resource by duplicating code?</p>\n<p>E.g.</p>\n<pre><code>output &quot;projects&quot; {\n  value = tomap({\n    project_1 = tomap({\n      id     = google_project.project_1.id\n      number = google_project.project_1.number\n    })\n    project_2 = tomap({\n      id     = google_project.project_2.id\n      number = google_project.project_2.number\n    })\n    project_3 = tomap({\n      id     = google_project.project_3 .id\n      number = google_project.pproject_3 .number\n    })\n  })\n  description = &quot;Projects&quot;\n}\n</code></pre>\n<p>EDIT : declared resources.</p>\n<p>In <code>main.tf</code> projects 1 to 3 are declared the same way.</p>\n<pre><code>resource &quot;google_project&quot; &quot;project_3&quot; {\n  name                = var.projects.project_3.name\n  project_id          = var.projects.project_3.id\n  folder_id           = google_folder.parent.name\n  billing_account     = data.google_billing_account.acct.id\n  auto_create_network = false\n}\n</code></pre>\n<p>in <code>variables.tf</code></p>\n<pre><code>variable &quot;projects&quot; {\n  type = map(object({\n    name = string\n    id   = string\n  }))\n}\n</code></pre>\n<p>in <code>variables.tfvars</code></p>\n<pre><code>projects = {\n  project_1= {\n    name = &quot;project_1&quot;\n    id   = &quot;project_1-12345&quot;\n  }  \n  project_2= {\n    name = &quot;project_2&quot;\n    id   = &quot;project_2-12345&quot;\n  }\n  project_3= {\n    name = &quot;project_2&quot;\n    id   = &quot;project_2-12345&quot;\n  }\n}\n</code></pre>\n", "OwnerUserId": "4375983", "LastEditorUserId": "4375983", "LastEditDate": "2022-09-06T09:13:07.630", "LastActivityDate": "2022-09-06T10:37:53.003", "Title": "Terraform : Is it possible to interpolate or loop through ressources from a list within the output block?", "Tags": "<terraform><terraform-provider-gcp>", "AnswerCount": "2", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129992150", "PostId": "73612432", "Score": "1", "Text": "No, you could use `for_each` probably, but there is information missing from the question. Can you add the resources to the question?", "CreationDate": "2022-09-05T17:20:13.070", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "277637722", "PostHistoryTypeId": "2", "PostId": "73612432", "RevisionGUID": "2f7f2cfd-b2fa-4723-ae2b-3bb72ee97d93", "CreationDate": "2022-09-05T16:41:42.610", "UserId": "4375983", "Text": "I am trying to output gcp project information by doing something like this :\r\n\r\n```HCL\r\noutput \"projects\" {\r\n  value = tomap({\r\n    for project_name in [\"project_1\", \"project_2\", \"project_3\"] :\r\n    project_name => tomap({\r\n      id     = google_project.\"${project_name}\".id\r\n      number = google_project.\"${project_name}\".number\r\n    })\r\n  })\r\n  description = \"Projects\"\r\n}\r\n```\r\n\r\nIs it at all possible to use resource names this way? Do I have to specify every resource by duplicating code?\r\n\r\nE.g.\r\n\r\n```HCL\r\noutput \"projects\" {\r\n  value = tomap({\r\n    project_1 = tomap({\r\n      id     = google_project.project_1.id\r\n      number = google_project.project_1.number\r\n    })\r\n    project_2 = tomap({\r\n      id     = google_project.project_2.id\r\n      number = google_project.project_2.number\r\n    })\r\n    project_3 = tomap({\r\n      id     = google_project.project_3 .id\r\n      number = google_project.pproject_3 .number\r\n    })\r\n  })\r\n  description = \"Projects\"\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "277637724", "PostHistoryTypeId": "1", "PostId": "73612432", "RevisionGUID": "2f7f2cfd-b2fa-4723-ae2b-3bb72ee97d93", "CreationDate": "2022-09-05T16:41:42.610", "UserId": "4375983", "Text": "Is it possible to interpolate ressource names from a list in Terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "277637725", "PostHistoryTypeId": "3", "PostId": "73612432", "RevisionGUID": "2f7f2cfd-b2fa-4723-ae2b-3bb72ee97d93", "CreationDate": "2022-09-05T16:41:42.610", "UserId": "4375983", "Text": "<terraform><terraform-provider-gcp>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "277662093", "PostHistoryTypeId": "5", "PostId": "73612432", "RevisionGUID": "2c28d760-1d61-4ed0-9b01-8bea97e374f1", "CreationDate": "2022-09-06T04:54:29.657", "UserId": "4375983", "Comment": "Added resources for projects creation", "Text": "I am trying to output gcp project information by doing something like this :\r\n\r\n```HCL\r\noutput \"projects\" {\r\n  value = tomap({\r\n    for project_name in [\"project_1\", \"project_2\", \"project_3\"] :\r\n    project_name => tomap({\r\n      id     = google_project.\"${project_name}\".id\r\n      number = google_project.\"${project_name}\".number\r\n    })\r\n  })\r\n  description = \"Projects\"\r\n}\r\n```\r\n\r\nIs it at all possible to use resource names this way? Do I have to specify every resource by duplicating code?\r\n\r\nE.g.\r\n\r\n```HCL\r\noutput \"projects\" {\r\n  value = tomap({\r\n    project_1 = tomap({\r\n      id     = google_project.project_1.id\r\n      number = google_project.project_1.number\r\n    })\r\n    project_2 = tomap({\r\n      id     = google_project.project_2.id\r\n      number = google_project.project_2.number\r\n    })\r\n    project_3 = tomap({\r\n      id     = google_project.project_3 .id\r\n      number = google_project.pproject_3 .number\r\n    })\r\n  })\r\n  description = \"Projects\"\r\n}\r\n```\r\n\r\nEDIT : declared resources.\r\n\r\nIn `main.tf` projects 1 to 3 are declared the same way.\r\n\r\n```HCL\r\nresource \"google_project\" \"project_3\" {\r\n  name                = var.projects.project_3.name\r\n  project_id          = var.projects.project_3.id\r\n  folder_id           = google_folder.net-ops.name\r\n  billing_account     = data.google_billing_account.acct.id\r\n  auto_create_network = false\r\n}\r\n```\r\n\r\nin `variables.tf`\r\n\r\n```HCL\r\nvariable \"projects\" {\r\n  type = map(object({\r\n    name = string\r\n    id   = string\r\n  }))\r\n}\r\n```\r\n\r\nin `variables.tfvars`\r\n\r\n```HCL\r\nprojects = {\r\n  project_1= {\r\n    name = \"project_1\"\r\n    id   = \"project_1-12345\"\r\n  }  \r\n  project_2= {\r\n    name = \"project_2\"\r\n    id   = \"project_2-12345\"\r\n  }\r\n  project_3= {\r\n    name = \"project_2\"\r\n    id   = \"project_2-12345\"\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "```HCL resource \"google_project\" \"project_3\" { name = var.projects.project_3.name project_id = var.projects.project_3.id folder_id = google_folder.net-ops.name billing_account = data.google_billing_account.acct.id auto_create_network = false } ``` in `variables.tf` ", "keywords": ["bill"]}]}, {"Id": "277662584", "PostHistoryTypeId": "5", "PostId": "73612432", "RevisionGUID": "a555df8a-d964-494f-8a3c-7e01d1e71370", "CreationDate": "2022-09-06T05:09:31.493", "UserId": "4375983", "Comment": "deleted 1 character in body", "Text": "I am trying to output gcp project information by doing something like this :\r\n\r\n```HCL\r\noutput \"projects\" {\r\n  value = tomap({\r\n    for project_name in [\"project_1\", \"project_2\", \"project_3\"] :\r\n    project_name => tomap({\r\n      id     = google_project.\"${project_name}\".id\r\n      number = google_project.\"${project_name}\".number\r\n    })\r\n  })\r\n  description = \"Projects\"\r\n}\r\n```\r\n\r\nIs it at all possible to use resource names this way? Do I have to specify every resource by duplicating code?\r\n\r\nE.g.\r\n\r\n```HCL\r\noutput \"projects\" {\r\n  value = tomap({\r\n    project_1 = tomap({\r\n      id     = google_project.project_1.id\r\n      number = google_project.project_1.number\r\n    })\r\n    project_2 = tomap({\r\n      id     = google_project.project_2.id\r\n      number = google_project.project_2.number\r\n    })\r\n    project_3 = tomap({\r\n      id     = google_project.project_3 .id\r\n      number = google_project.pproject_3 .number\r\n    })\r\n  })\r\n  description = \"Projects\"\r\n}\r\n```\r\n\r\nEDIT : declared resources.\r\n\r\nIn `main.tf` projects 1 to 3 are declared the same way.\r\n\r\n```HCL\r\nresource \"google_project\" \"project_3\" {\r\n  name                = var.projects.project_3.name\r\n  project_id          = var.projects.project_3.id\r\n  folder_id           = google_folder.parent.name\r\n  billing_account     = data.google_billing_account.acct.id\r\n  auto_create_network = false\r\n}\r\n```\r\n\r\nin `variables.tf`\r\n\r\n```HCL\r\nvariable \"projects\" {\r\n  type = map(object({\r\n    name = string\r\n    id   = string\r\n  }))\r\n}\r\n```\r\n\r\nin `variables.tfvars`\r\n\r\n```HCL\r\nprojects = {\r\n  project_1= {\r\n    name = \"project_1\"\r\n    id   = \"project_1-12345\"\r\n  }  \r\n  project_2= {\r\n    name = \"project_2\"\r\n    id   = \"project_2-12345\"\r\n  }\r\n  project_3= {\r\n    name = \"project_2\"\r\n    id   = \"project_2-12345\"\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "```HCL resource \"google_project\" \"project_3\" { name = var.projects.project_3.name project_id = var.projects.project_3.id folder_id = google_folder.parent.name billing_account = data.google_billing_account.acct.id auto_create_network = false } ``` in `variables.tf` ", "keywords": ["bill"]}]}, {"Id": "277675768", "PostHistoryTypeId": "4", "PostId": "73612432", "RevisionGUID": "21b52e98-30a3-4b24-a32c-6041fd363d8d", "CreationDate": "2022-09-06T09:13:07.630", "UserId": "4375983", "Comment": "edited title", "Text": "Terraform : Is it possible to interpolate or loop through ressources from a list within the output block?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "277675891", "PostHistoryTypeId": "5", "PostId": "73612432", "RevisionGUID": "21b52e98-30a3-4b24-a32c-6041fd363d8d", "CreationDate": "2022-09-06T09:13:07.630", "UserId": "4375983", "Comment": "edited title", "Text": "I am trying to output gcp project information by doing something like this :\r\n\r\n```HCL\r\noutput \"projects\" {\r\n  value = tomap({\r\n    for project_name in [\"project_1\", \"project_2\", \"project_3\"] :\r\n    project_name => tomap({\r\n      id     = google_project.\"${project_name}\".id\r\n      number = google_project.\"${project_name}\".number\r\n    })\r\n  })\r\n  description = \"Projects\"\r\n}\r\n```\r\n\r\nOr like this :\r\n\r\n```HCL\r\noutput \"projects\" {\r\n  value = tomap({\r\n    for_each = toset([google_project.project_1,google_project.project_2])\r\n    id       = each.key.id\r\n    number   = each.key.number\r\n\r\n  })\r\n  description = \"Projects\"\r\n}\r\n```\r\n\r\nIs it at all possible to use resource names this way? Do I have to specify every resource by duplicating code?\r\n\r\nE.g.\r\n\r\n```HCL\r\noutput \"projects\" {\r\n  value = tomap({\r\n    project_1 = tomap({\r\n      id     = google_project.project_1.id\r\n      number = google_project.project_1.number\r\n    })\r\n    project_2 = tomap({\r\n      id     = google_project.project_2.id\r\n      number = google_project.project_2.number\r\n    })\r\n    project_3 = tomap({\r\n      id     = google_project.project_3 .id\r\n      number = google_project.pproject_3 .number\r\n    })\r\n  })\r\n  description = \"Projects\"\r\n}\r\n```\r\n\r\nEDIT : declared resources.\r\n\r\nIn `main.tf` projects 1 to 3 are declared the same way.\r\n\r\n```HCL\r\nresource \"google_project\" \"project_3\" {\r\n  name                = var.projects.project_3.name\r\n  project_id          = var.projects.project_3.id\r\n  folder_id           = google_folder.parent.name\r\n  billing_account     = data.google_billing_account.acct.id\r\n  auto_create_network = false\r\n}\r\n```\r\n\r\nin `variables.tf`\r\n\r\n```HCL\r\nvariable \"projects\" {\r\n  type = map(object({\r\n    name = string\r\n    id   = string\r\n  }))\r\n}\r\n```\r\n\r\nin `variables.tfvars`\r\n\r\n```HCL\r\nprojects = {\r\n  project_1= {\r\n    name = \"project_1\"\r\n    id   = \"project_1-12345\"\r\n  }  \r\n  project_2= {\r\n    name = \"project_2\"\r\n    id   = \"project_2-12345\"\r\n  }\r\n  project_3= {\r\n    name = \"project_2\"\r\n    id   = \"project_2-12345\"\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "```HCL resource \"google_project\" \"project_3\" { name = var.projects.project_3.name project_id = var.projects.project_3.id folder_id = google_folder.parent.name billing_account = data.google_billing_account.acct.id auto_create_network = false } ``` in `variables.tf` ", "keywords": ["bill"]}]}], "answers": [{"Id": "73614956", "PostTypeId": "2", "ParentId": "73612432", "CreationDate": "2022-09-05T21:54:07.727", "Score": "2", "Body": "<p>I edited my initial answer after seeing the <code>Terraform</code> resource that creates a project. The need is a way to get a resource name in the output bloc with interpolation.</p>\n<p>I think if a single resource is used to create all the projets instead of one resource per projet, it's easier to expose this resource in the output bloc.</p>\n<p>For example you can configure <code>projects</code> metadata information from a json file, or directly a local variable or a <code>var</code> if needed :</p>\n<p>Example for a json file and local variable</p>\n<p>mymodule/resource/projects.json :</p>\n<pre class=\"lang-json prettyprint-override\"><code>{\n    &quot;projects&quot;: {\n        &quot;project_1&quot;: {\n            &quot;id&quot;: &quot;project_1&quot;,\n            &quot;number&quot;: &quot;23333311&quot;\n        },\n        &quot;project_2&quot;: {\n            &quot;id&quot;: &quot;project_2&quot;,\n            &quot;number&quot;: &quot;33399999&quot;\n        }\n    }\n}\n</code></pre>\n<p>Then retrieve <code>projects</code> as a variable from <code>locals.tf</code> file :</p>\n<p>mymodule/locals.tf :</p>\n<pre><code>locals {\n  projects = jsondecode(file(&quot;${path.module}/resource/projects.json&quot;))[&quot;projects&quot;]\n}\n</code></pre>\n<p>Create your projects in a single resource with a foreach :</p>\n<pre><code>resource &quot;google_project&quot; &quot;projects&quot; {\n  for_each           = local.projects\n  name                = each.key\n  project_id          = each.value[&quot;id&quot;]\n  folder_id           = google_folder.parent.name\n  billing_account     = data.google_billing_account.acct.id\n  auto_create_network = false\n}\n</code></pre>\n<p>Expose the projects <code>resource</code> in an <code>output.tf</code> file :</p>\n<pre><code>output &quot;projects&quot; {\n  value = google_project.projects\n  description = &quot;Projects&quot;\n}\n</code></pre>\n<p>The same principle can be done with a <code>var</code> instead of local variable.</p>\n", "OwnerUserId": "9261558", "LastEditorUserId": "9261558", "LastEditDate": "2022-09-06T10:37:53.003", "LastActivityDate": "2022-09-06T10:37:53.003", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129999277", "PostId": "73614956", "Score": "0", "Text": "yes, but then I wouldn't be getting them from a resource block, but from a `tfvars` like file, and I wouldn't be able to call on the project `id` and/or `number` as they were instantiated after the creation. The purpose is to skip the redundancy of inputing the `id` and `number` values myself, but to get them from terraform.", "CreationDate": "2022-09-06T04:58:12.613", "UserId": "4375983", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129999843", "PostId": "73614956", "Score": "0", "Text": "Ok I understand, in your output, I think you can use `foreach` with `each.key`. An example from this link : (exemple with Set of String) https://www.terraform.io/language/meta-arguments/for_each", "CreationDate": "2022-09-06T05:53:40.013", "UserId": "9261558", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130003532", "PostId": "73614956", "Score": "0", "Text": "nope can't use `for_each` in `output` module apparently. I get an error :  `The \"each\" object can be used only in \"module\" or \"resource\" blocks, and only when the \"for_each\" argument is set.`", "CreationDate": "2022-09-06T09:12:45.583", "UserId": "4375983", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130004493", "PostId": "73614956", "Score": "1", "Text": "Ok sorry, I thought it was possible.", "CreationDate": "2022-09-06T09:57:36.867", "UserId": "9261558", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130005123", "PostId": "73614956", "Score": "0", "Text": "Hi Imad, I edited my first answer, I thinks it's easier for you if you use a single `Terraform` resource that creates all the projects (with `foreach`). It's also easier then to expose this resource with an `output`. My example uses `locals variable` and json conf, but you can replace it with a `var`.", "CreationDate": "2022-09-06T10:28:25.233", "UserId": "9261558", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "277651325", "PostHistoryTypeId": "2", "PostId": "73614956", "RevisionGUID": "0101aa56-928c-4b8e-a5c9-640317c81b83", "CreationDate": "2022-09-05T21:54:07.727", "UserId": "9261558", "Text": "You can also configure `projects` metadata information from a json file : \r\n\r\nmymodule/resource/projects.json : \r\n\r\n```json\r\n{\r\n    \"projects\": {\r\n        \"project_1\": {\r\n            \"id\": \"project_1\",\r\n            \"number\": \"23333311\"\r\n        },\r\n        \"project_2\": {\r\n            \"id\": \"project_2\",\r\n            \"number\": \"33399999\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThen retrieve `projects` as a variable from `locals.tf` file : \r\n\r\nmymodule/locals.tf : \r\n\r\n```terraform\r\nlocals {\r\n  projects = jsondecode(file(\"${path.module}/resource/projects.json\"))[\"projects\"]\r\n}\r\n```\r\n\r\nGet projets variable in the `output.tf` file and expose it in an `output` bloc :\r\n\r\n```terraform\r\noutput \"projects\" {\r\n  value = local.projects\r\n  description = \"Projects\"\r\n}\r\n``` ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "277680605", "PostHistoryTypeId": "5", "PostId": "73614956", "RevisionGUID": "c43240da-a0c1-4e92-957e-e0c548aae398", "CreationDate": "2022-09-06T10:25:04.477", "UserId": "9261558", "Comment": "added 903 characters in body", "Text": "I edited my initial answer after seeing the `Terraform` resource that creates a project. The need is a way to get a resource name in the output bloc with interpolation.\r\n\r\nI think if a single resource is used to create all the projets instead of one resource per projet, it's easier to expose this resource in the output bloc.\r\n\r\nFor example you can configure `projects` metadata information from a json file, or directly a local variable or a `var` if needed : \r\n\r\nExample for a json file and local variable \r\n\r\nmymodule/resource/projects.json : \r\n\r\n```json\r\n{\r\n    \"projects\": {\r\n        \"project_1\": {\r\n            \"id\": \"project_1\",\r\n            \"number\": \"23333311\"\r\n        },\r\n        \"project_2\": {\r\n            \"id\": \"project_2\",\r\n            \"number\": \"33399999\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThen retrieve `projects` as a variable from `locals.tf` file : \r\n\r\nmymodule/locals.tf : \r\n\r\n```terraform\r\nlocals {\r\n  projects = jsondecode(file(\"${path.module}/resource/projects.json\"))[\"projects\"]\r\n}\r\n```\r\n\r\nCreate your projects in a single resource with a foreach : \r\n\r\n```terraform\r\nresource \"google_project\" \"projects\" {\r\n  for_each           = local.projects\r\n  name                = each.key\r\n  project_id          = each.value[\"id\"]\r\n  folder_id           = google_folder.parent.name\r\n  billing_account     = data.google_billing_account.acct.id\r\n  auto_create_network = false\r\n}\r\n```\r\n\r\nGet projets variable in the `output.tf` file and expose it in an `output` bloc :\r\n\r\n```terraform\r\noutput \"projects\" {\r\n  value = google_project.projects\r\n  description = \"Projects\"\r\n}\r\n``` \r\n\r\nThe same principle can be done with a `var` instead of local variable.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For example you can configure `projects` metadata information from a json file, or directly a local variable or a `var` if needed : Example for a json file and local variable mymodule/resource/projects.json : ```json { \"projects\": { \"project_1\": { \"id\": \"project_1\", \"number\": \"23333311\" }, \"project_2\": { \"id\": \"project_2\", \"number\": \"33399999\" } } } ``` Then retrieve `projects` as a variable from `locals.tf` file : mymodule/locals.tf : ```terraform locals { projects = jsondecode(file(\"${path.module}/resource/projects.json\"))[\"projects\"] } ``` Create your projects in a single resource with a foreach : ```terraform resource \"google_project\" \"projects\" { for_each = local.projects name = each.key project_id = each.value[\"id\"] folder_id = google_folder.parent.name billing_account = data.google_billing_account.acct.id auto_create_network = false } ``` Get projets variable in the `output.tf` file and expose it in an `output` bloc : ```terraform output \"projects\" { value = google_project.projects description = \"Projects\" ", "keywords": ["bill"]}]}, {"Id": "277681517", "PostHistoryTypeId": "5", "PostId": "73614956", "RevisionGUID": "62b814fd-502c-4f9e-ada3-a12d722feaaf", "CreationDate": "2022-09-06T10:37:53.003", "UserId": "9261558", "Comment": "deleted 25 characters in body", "Text": "I edited my initial answer after seeing the `Terraform` resource that creates a project. The need is a way to get a resource name in the output bloc with interpolation.\r\n\r\nI think if a single resource is used to create all the projets instead of one resource per projet, it's easier to expose this resource in the output bloc.\r\n\r\nFor example you can configure `projects` metadata information from a json file, or directly a local variable or a `var` if needed : \r\n\r\nExample for a json file and local variable \r\n\r\nmymodule/resource/projects.json : \r\n\r\n```json\r\n{\r\n    \"projects\": {\r\n        \"project_1\": {\r\n            \"id\": \"project_1\",\r\n            \"number\": \"23333311\"\r\n        },\r\n        \"project_2\": {\r\n            \"id\": \"project_2\",\r\n            \"number\": \"33399999\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThen retrieve `projects` as a variable from `locals.tf` file : \r\n\r\nmymodule/locals.tf : \r\n\r\n```terraform\r\nlocals {\r\n  projects = jsondecode(file(\"${path.module}/resource/projects.json\"))[\"projects\"]\r\n}\r\n```\r\n\r\nCreate your projects in a single resource with a foreach : \r\n\r\n```terraform\r\nresource \"google_project\" \"projects\" {\r\n  for_each           = local.projects\r\n  name                = each.key\r\n  project_id          = each.value[\"id\"]\r\n  folder_id           = google_folder.parent.name\r\n  billing_account     = data.google_billing_account.acct.id\r\n  auto_create_network = false\r\n}\r\n```\r\n\r\nExpose the projects `resource` in an `output.tf` file :\r\n\r\n```terraform\r\noutput \"projects\" {\r\n  value = google_project.projects\r\n  description = \"Projects\"\r\n}\r\n``` \r\n\r\nThe same principle can be done with a `var` instead of local variable.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For example you can configure `projects` metadata information from a json file, or directly a local variable or a `var` if needed : Example for a json file and local variable mymodule/resource/projects.json : ```json { \"projects\": { \"project_1\": { \"id\": \"project_1\", \"number\": \"23333311\" }, \"project_2\": { \"id\": \"project_2\", \"number\": \"33399999\" } } } ``` Then retrieve `projects` as a variable from `locals.tf` file : mymodule/locals.tf : ```terraform locals { projects = jsondecode(file(\"${path.module}/resource/projects.json\"))[\"projects\"] } ``` Create your projects in a single resource with a foreach : ```terraform resource \"google_project\" \"projects\" { for_each = local.projects name = each.key project_id = each.value[\"id\"] folder_id = google_folder.parent.name billing_account = data.google_billing_account.acct.id auto_create_network = false } ``` Expose the projects `resource` in an `output.tf` file : ```terraform output \"projects\" { value = google_project.projects description = \"Projects\" ", "keywords": ["bill"]}]}], "filtered-sentences": []}, {"Id": "73614397", "PostTypeId": "2", "ParentId": "73612432", "CreationDate": "2022-09-05T20:28:59.777", "Score": "2", "Body": "<p>I misunderstood your question originally. I see now that you want to reference a resource by a variable name. No you cannot do that. But your setup here doesn't really make sense, and seems more complex than it needs to be.</p>\n<p>Consider if these options would improve your setup.</p>\n<pre><code>locals {\n  projects = { # This is equivalent to your input.\n    project_1 = {\n      name = &quot;project_1&quot;\n      id   = &quot;project_1-12345&quot;\n    }\n    project_2 = {\n      name = &quot;project_2&quot;\n      id   = &quot;project_2-12345&quot;\n    }\n    project_3 = {\n      name = &quot;project_3&quot;\n      id   = &quot;project_3-12345&quot;\n    }\n  }\n}\n\nresource &quot;google_project&quot; &quot;this&quot; {\n  for_each = local.projects\n\n  name                = each.key # or each.value.name / don't really need name\n  project_id          = each.value.id\n  folder_id           = google_folder.parent.name\n  billing_account     = data.google_billing_account.acct.id\n  auto_create_network = false\n}\n\noutput &quot;projects_from_input&quot; {\n  description = &quot;You can of course, just use the input.&quot;\n  value       = local.projects\n}\n\noutput &quot;projects_explicit_values&quot; {\n  description = &quot;Alternatively, if you need a subset of resource values.&quot;\n  value = { for k, v in google_project.this : k =&gt; {\n    name = v.name\n    id   = v.project_id\n  } }\n}\n\noutput &quot;complete_resources&quot; {\n  description = &quot;But you can just output the complete resource.&quot;\n  value       = google_project.this\n}\n</code></pre>\n", "OwnerUserId": "2081835", "LastEditorUserId": "2081835", "LastEditDate": "2022-09-06T07:17:08.857", "LastActivityDate": "2022-09-06T07:17:08.857", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129999294", "PostId": "73614397", "Score": "0", "Text": "I'm not sure I got it right because I get an error :\n`Error: Invalid reference\n...\nA reference to a resource type must be followed by at least one attribute access, specifying the resource name.`", "CreationDate": "2022-09-06T04:59:34.150", "UserId": "4375983", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129999328", "PostId": "73614397", "Score": "0", "Text": "Can you provide an example to how you would write the output file with your method?", "CreationDate": "2022-09-06T05:02:14.583", "UserId": "4375983", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130005520", "PostId": "73614397", "Score": "0", "Text": "@Imad: I updated the answer. I originally misunderstood you. Maybe this will help.", "CreationDate": "2022-09-06T10:49:50.550", "UserId": "2081835", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "277648242", "PostHistoryTypeId": "2", "PostId": "73614397", "RevisionGUID": "befabfa9-4f04-4c98-85d1-cd8a264a6c01", "CreationDate": "2022-09-05T20:28:59.777", "UserId": "2081835", "Text": "Definitely. You just reference it like a map, and let terraform handle it with [conversion of complex types][1]. You could also use the [lookup function][2], if you want to provide a default.\r\n\r\n```hcl\r\nid = google_project[project_name].id\r\n```\r\n\r\nfor example. Or:\r\n\r\n```hcl\r\nid = lookup(google_project, project_name, \"\").id\r\n```\r\n\r\n[1]: https://www.terraform.io/language/expressions/type-constraints#conversion-of-complex-types\r\n[2]: https://www.terraform.io/language/functions/lookup", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "277668573", "PostHistoryTypeId": "5", "PostId": "73614397", "RevisionGUID": "e9cdd518-2b7c-47d2-8db4-502e4012f075", "CreationDate": "2022-09-06T07:17:08.857", "UserId": "2081835", "Comment": "Add updated answer. Remove unhelpful part.", "Text": "I misunderstood your question originally. I see now that you want to reference a resource by a variable name. No you cannot do that. But your setup here doesn't really make sense, and seems more complex than it needs to be.\r\n\r\nConsider if these options would improve your setup.\r\n\r\n```hcl\r\nlocals {\r\n  projects = { # This is equivalent to your input.\r\n    project_1 = {\r\n      name = \"project_1\"\r\n      id   = \"project_1-12345\"\r\n    }\r\n    project_2 = {\r\n      name = \"project_2\"\r\n      id   = \"project_2-12345\"\r\n    }\r\n    project_3 = {\r\n      name = \"project_3\"\r\n      id   = \"project_3-12345\"\r\n    }\r\n  }\r\n}\r\n\r\nresource \"google_project\" \"this\" {\r\n  for_each = local.projects\r\n\r\n  name                = each.key # or each.value.name / don't really need name\r\n  project_id          = each.value.id\r\n  folder_id           = google_folder.parent.name\r\n  billing_account     = data.google_billing_account.acct.id\r\n  auto_create_network = false\r\n}\r\n\r\noutput \"projects_from_input\" {\r\n  description = \"You can of course, just use the input.\"\r\n  value       = local.projects\r\n}\r\n\r\noutput \"projects_explicit_values\" {\r\n  description = \"Alternatively, if you need a subset of resource values.\"\r\n  value = { for k, v in google_project.this : k => {\r\n    name = v.name\r\n    id   = v.project_id\r\n  } }\r\n}\r\n\r\noutput \"complete_resources\" {\r\n  description = \"But you can just output the complete resource.\"\r\n  value       = google_project.this\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "```hcl locals { projects = { # This is equivalent to your input. project_1 = { name = \"project_1\" id = \"project_1-12345\" } project_2 = { name = \"project_2\" id = \"project_2-12345\" } project_3 = { name = \"project_3\" id = \"project_3-12345\" } } } resource \"google_project\" \"this\" { for_each = local.projects name = each.key # or each.value.name / don't really need name project_id = each.value.id folder_id = google_folder.parent.name billing_account = data.google_billing_account.acct.id auto_create_network = false } output \"projects_from_input\" { description = \"You can of course, just use the input.\" value = local.projects } output \"projects_explicit_values\" { description = \"Alternatively, if you need a subset of resource values.\" value = { for k, v in google_project.this : k => { name = v.name id = v.project_id } } } output \"complete_resources\" { description = \"But you can just output the complete resource.\" value = google_project.this } ```", "keywords": ["bill"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}