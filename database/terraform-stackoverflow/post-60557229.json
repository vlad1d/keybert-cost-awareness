{"Id": "60557229", "PostTypeId": "1", "CreationDate": "2020-03-06T03:42:09.843", "Score": "0", "ViewCount": "492", "Body": "<p>What is the best way to setup terraform for multiple environments (dev, stage, prod) in AWS with just a single account. My client has provided only a single account for us to use. Most write ups about using terraform always start off with using multiple accounts which I don't have. I plan on using S3 backend storage because there will be a couple of us supporting the infrastructure.</p>\n", "OwnerUserId": "2162698", "LastActivityDate": "2020-03-06T13:50:38.640", "Title": "Terraform setup using AWS with a single account for multiple environments", "Tags": "<amazon-web-services><terraform>", "AnswerCount": "2", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "107149696", "PostId": "60557229", "Score": "0", "Text": "https://www.terraform.io/docs/state/workspaces.html", "CreationDate": "2020-03-06T14:00:07.230", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "107165247", "PostId": "60557229", "Score": "0", "Text": "Don't use workspaces for multiple environment deployments unless you are only deploy pretty static infrastructure. Because it is not easy to branch your terraform code.   Say you are working on the next release updating terraform.   But you find a bug in production that needs an update.   There is no easy way to branch the production environment to patch and then merge the patch back into development.  The solution is to use a version control system like git for you terraform code.", "CreationDate": "2020-03-07T02:40:24.727", "UserId": "11799123", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "107171677", "PostId": "60557229", "Score": "0", "Text": "Of course you should version control your infrastructure as code so that you can track the changes and rollback in case of faults. If you adopt version control solutions, bugfixing your infrastructure will be as easy as bugfixing any application.\n\nIn the scenario proposed by @WaltDe, you could branch, fix the problem, test it in staging/dev and once you are satisfied you can merge it into master and apply to production.", "CreationDate": "2020-03-07T13:37:09.677", "UserId": "4948552", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Of course you should version control your infrastructure as code so that you can track the changes and rollback in case of faults. ", "keywords": ["change"]}, {"source": "Text", "text": "In the scenario proposed by @WaltDe, you could branch, fix the problem, test it in staging/dev and once you are satisfied you can merge it into master and apply to production.", "keywords": ["test"]}]}], "history": [{"Id": "216385646", "PostHistoryTypeId": "2", "PostId": "60557229", "RevisionGUID": "f14b3219-e155-4bb0-affb-345d66c63cb4", "CreationDate": "2020-03-06T03:42:09.843", "UserId": "2162698", "Text": "What is the best way to setup terraform for multiple environments (dev, stage, prod) in AWS with just a single account. My client has provided only a single account for us to use. Most write ups about using terraform always start off with using multiple accounts which I don't have. I plan on using S3 backend storage because there will be a couple of us supporting the infrastructure.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I plan on using S3 backend storage because there will be a couple of us supporting the infrastructure.", "keywords": ["storage"]}]}, {"Id": "216385647", "PostHistoryTypeId": "1", "PostId": "60557229", "RevisionGUID": "f14b3219-e155-4bb0-affb-345d66c63cb4", "CreationDate": "2020-03-06T03:42:09.843", "UserId": "2162698", "Text": "Terraform setup using AWS with a single account for multiple environments", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "216385648", "PostHistoryTypeId": "3", "PostId": "60557229", "RevisionGUID": "f14b3219-e155-4bb0-affb-345d66c63cb4", "CreationDate": "2020-03-06T03:42:09.843", "UserId": "2162698", "Text": "<amazon-web-services><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "60557643", "PostTypeId": "2", "ParentId": "60557229", "CreationDate": "2020-03-06T04:33:57.277", "Score": "-1", "Body": "<p>This will work for the most use cases</p>\n\n<p>Option 1: use regions</p>\n\n<p>This has the benefit of keeping things separated in the console and api calls. You will need to handle a few global named services like IAM and S3 but see option 2 on a solution. Also, make sure that the regions all have the services you need to use.  </p>\n\n<p>For example:</p>\n\n<ul>\n<li>us-east-1: prod</li>\n<li>us-east-2: qa</li>\n<li>us-west-2: dev</li>\n</ul>\n\n<p>In each region create a S3 bucket to store your state files.  Something like tfstate-01234567890-us-east-1, tfstate-01234567890-us-east-2, tfstate-01234567890-us-west-1 will ensure that you don't have conflicts. </p>\n\n<p>Option 2: use an environment tag</p>\n\n<p>Even if you are doing option 1 I still recommend implementing this as well.  It will let you do things like deploy multiple development environments.</p>\n\n<p>For each resource append the environment to the name and add the environment to the tags.</p>\n\n<p>Say you create a module </p>\n\n<pre><code>variable environment {\n  type = string\n}\nresource aws_lambda_function image_handler {\n  function_name = \"cool-function-${var.environment}\"\n  tags = {\n    environment: var.environment\n  }\n... \n</code></pre>\n\n<p>Then you would</p>\n\n<pre><code>module dev {\n  source = \"../path/to/above/module\"\n  environment = \"prod\"\n}\n</code></pre>\n", "OwnerUserId": "11799123", "LastActivityDate": "2020-03-06T04:33:57.277", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "216387291", "PostHistoryTypeId": "2", "PostId": "60557643", "RevisionGUID": "eaba1cc1-6587-48da-a66e-4812a19196e0", "CreationDate": "2020-03-06T04:33:57.277", "UserId": "11799123", "Text": "This will work for the most use cases\r\n\r\nOption 1: use regions\r\n\r\nThis has the benefit of keeping things separated in the console and api calls. You will need to handle a few global named services like IAM and S3 but see option 2 on a solution. Also, make sure that the regions all have the services you need to use.  \r\n\r\nFor example:\r\n   \r\n - us-east-1: prod\r\n - us-east-2: qa\r\n - us-west-2: dev\r\n\r\nIn each region create a S3 bucket to store your state files.  Something like tfstate-01234567890-us-east-1, tfstate-01234567890-us-east-2, tfstate-01234567890-us-west-1 will ensure that you don't have conflicts. \r\n\r\nOption 2: use an environment tag\r\n\r\nEven if you are doing option 1 I still recommend implementing this as well.  It will let you do things like deploy multiple development environments.\r\n\r\nFor each resource append the environment to the name and add the environment to the tags.\r\n\r\nSay you create a module \r\n\r\n```\r\nvariable environment {\r\n  type = string\r\n}\r\nresource aws_lambda_function image_handler {\r\n  function_name = \"cool-function-${var.environment}\"\r\n  tags = {\r\n    environment: var.environment\r\n  }\r\n... \r\n```\r\n\r\nThen you would\r\n```\r\nmodule dev {\r\n  source = \"../path/to/above/module\"\r\n  environment = \"prod\"\r\n}\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "60565461", "PostTypeId": "2", "ParentId": "60557229", "CreationDate": "2020-03-06T13:50:38.640", "Score": "-2", "Body": "<p>You should not split the environments using different regions. Regions are there to improve the resilience of the system in case e.g., a temporary breakdown occurs on a specific data center. </p>\n\n<p>Also having custom environment variables will not help you because you will end up\nhaving code duplication. </p>\n\n<p>Your north star should be having an <strong>exact</strong> replica of the two environments and avoid code duplication. Terraform helps you on this because it has the concept of <a href=\"https://www.terraform.io/docs/state/workspaces.html\" rel=\"nofollow noreferrer\">workspaces</a>. In this way you will be using the same configuration and you can change environment with a single command like <code>terraform workspace select staging/dev/production</code></p>\n", "OwnerUserId": "4948552", "LastActivityDate": "2020-03-06T13:50:38.640", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "107165124", "PostId": "60565461", "Score": "0", "Text": "Any opinions on workspaces vs isolation via file layout as described in this [Terragrunt blog post](https://blog.gruntwork.io/how-to-manage-terraform-state-28f5697e68fa)?", "CreationDate": "2020-03-07T02:22:35.860", "UserId": "2162698", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "107165144", "PostId": "60565461", "Score": "0", "Text": "The use of regions is for more than just resilience. 2 common use cases include edge or distributed architecture pushing the compute and data closer to the devices which reduces latency and improves user experience.  It can also lower cost.   Another use case is legal where data needs to be keep in country.  And for this question where the client is limiting them to one AWS accounts region is perfectly good for  dev, qa, and prod environments.   \n\nSee my response in the main comments above for why not to use workspaces.", "CreationDate": "2020-03-07T02:25:43.267", "UserId": "11799123", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It can also lower cost. ", "keywords": ["cost"]}]}, {"Id": "107171614", "PostId": "60565461", "Score": "0", "Text": "With this approach you end up having different environments for prod/stage/dev. For instance, response time can be very different depending from the region. Also, some regions might have specific settings which others don't", "CreationDate": "2020-03-07T13:33:05.347", "UserId": "4948552", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For instance, response time can be very different depending from the region. ", "keywords": ["instance"]}]}], "history": [{"Id": "216419444", "PostHistoryTypeId": "2", "PostId": "60565461", "RevisionGUID": "71a04c40-54a8-4049-9444-7e716565b14b", "CreationDate": "2020-03-06T13:50:38.640", "UserId": "4948552", "Text": "You should not split the environments using different regions. Regions are there to improve the resilience of the system in case e.g., a temporary breakdown occurs on a specific data center. \r\n\r\nAlso having custom environment variables will not help you because you will end up\r\nhaving code duplication. \r\n\r\nYour north star should be having an **exact** replica of the two environments and avoid code duplication. Terraform helps you on this because it has the concept of [workspaces][1]. In this way you will be using the same configuration and you can change environment with a single command like `terraform workspace select staging/dev/production`\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/state/workspaces.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "In this way you will be using the same configuration and you can change environment with a single command like `terraform workspace select staging/dev/production` [1]: https://www.terraform.io/docs/state/workspaces.html", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "In this way you will be using the same configuration and you can change environment with a single command like terraform workspace select staging/dev/production", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I plan on using S3 backend storage because there will be a couple of us supporting the infrastructure.", "keywords": ["storage"]}]}