{"Id": "74752778", "PostTypeId": "1", "AcceptedAnswerId": "74752879", "CreationDate": "2022-12-10T12:08:04.057", "Score": "0", "ViewCount": "171", "Body": "<p>I have a dynamoDB table called Cheque to represent a tables' cheque in a restaurant / bar.</p>\n<p>I want to apply a conditional put request on this table so that a new table can only be created if the following conditions are meet:</p>\n<ol>\n<li><code>tableNumber</code> does not currently exist AND</li>\n<li><code>restaurnatId</code> does not currently exist AND</li>\n<li><code>isOpen</code> status on the table is false (i.e. cheque is not open)</li>\n</ol>\n<p>I am creating my DynamoDB in Terraform like so:</p>\n<pre><code>resource &quot;aws_dynamodb_table&quot; &quot;ChequesDDB&quot; {\n  name           = &quot;Cheques_${var.env_name}&quot;\n  hash_key       = &quot;id&quot;\n  billing_mode   = &quot;PROVISIONED&quot;\n  read_capacity  = 5\n  write_capacity = 5\n  stream_enabled   = true\n  stream_view_type = &quot;NEW_AND_OLD_IMAGES&quot;\n  \n  attribute { \n    name = &quot;id&quot;\n    type = &quot;S&quot;\n  }\n\n  attribute { \n    name = &quot;tableNumber&quot;\n    type = &quot;N&quot;\n  }\n\n  global_secondary_index {\n    name      = &quot;TableNumber&quot;\n    hash_key  = &quot;tableNumber&quot;\n    write_capacity  = 5\n    read_capacity   = 5\n    projection_type = &quot;ALL&quot;\n  }\n}\n</code></pre>\n<p>Note: I am unsure if I need to set my <code>tableNumber</code> as a secondary index but plese let me know if this is not required.</p>\n<p>I am then trying to create a new cheque in the DynamoDB table with the following code:</p>\n<pre><code>const tableData: Cheque = {\n  id: randomUUID(),\n  isOpen: true,\n  tableNumber: cheque.tableNumber,\n  restaurantId: cheque.restaurantId,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n};\n\nconst params: DynamoDB.DocumentClient.PutItemInput = {\n  TableName: env.CHEQUE_DDB,\n  Item: tableData,\n  ConditionExpression: &quot;attribute_not_exists(tableNumber)&quot;\n};\n\nawait this.db.put(params).promise();\n</code></pre>\n<p>To start with, I am only trying to apply one condition which is to ensure the <code>tableNumber</code> doesn't already exist.</p>\n<p>But everytime I run this code, it creates a new entry in the table and I end up with multiple cheques open with table number <code>x</code>.</p>\n<p>If I update my conditional expression to be <code>attribute_not_exists(id)</code> then it appears to stop other entries from being opened with the same <code>id</code>. Is this because the <code>id</code> is the primary key?</p>\n<p>How can I apply these conditions to fields that are not primary keys and prevent multiple cheques being opened with the same table number?</p>\n", "OwnerUserId": "3528590", "LastActivityDate": "2022-12-10T12:24:03.713", "Title": "How to apply conditional put on DynamoDB?", "Tags": "<javascript><node.js><amazon-web-services><terraform><amazon-dynamodb>", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131937196", "PostId": "74752778", "Score": "0", "Text": "You might want to simply have a DynamoDB table that contains items for open cheques. It only needs pk=restaurantId and sk=tableNumber. The process of billing to an open cheque happens in a different table. When a cheque closes you do whatever's needed for billing, and then delete the pk/sk item from the open cheques table. Use the typical DynamoDB  conditional put when trying to add an open cheque so that it's rejected if a cheque is already open for that restaurant/table.", "CreationDate": "2022-12-10T21:51:46.277", "UserId": "271415", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The process of billing to an open cheque happens in a different table. ", "keywords": ["bill"]}, {"source": "Text", "text": "When a cheque closes you do whatever's needed for billing, and then delete the pk/sk item from the open cheques table. ", "keywords": ["bill"]}]}], "history": [{"Id": "284012646", "PostHistoryTypeId": "2", "PostId": "74752778", "RevisionGUID": "5aceb4db-027c-49df-b4e9-fae82106f450", "CreationDate": "2022-12-10T12:08:04.057", "UserId": "3528590", "Text": "I have a dynamoDB table called Cheque to represent a tables' cheque in a restaurant / bar.\r\n\r\nI want to apply a conditional put request on this table so that a new table can only be created if the following conditions are meet:\r\n\r\n1) `tableNumber` does not currently exist AND\r\n2) `restaurnatId` does not currently exist AND\r\n3) `isOpen` status on the table is false (i.e. cheque is not open)\r\n\r\nI am creating my DynamoDB in Terraform like so:\r\n\r\n```\r\nresource \"aws_dynamodb_table\" \"ChequesDDB\" {\r\n  name           = \"Cheques_${var.env_name}\"\r\n  hash_key       = \"id\"\r\n  billing_mode   = \"PROVISIONED\"\r\n  read_capacity  = 5\r\n  write_capacity = 5\r\n  stream_enabled   = true\r\n  stream_view_type = \"NEW_AND_OLD_IMAGES\"\r\n  \r\n  attribute { \r\n    name = \"id\"\r\n    type = \"S\"\r\n  }\r\n\r\n  attribute { \r\n    name = \"tableNumber\"\r\n    type = \"N\"\r\n  }\r\n\r\n  global_secondary_index {\r\n    name      = \"TableNumber\"\r\n    hash_key  = \"tableNumber\"\r\n    write_capacity  = 5\r\n    read_capacity   = 5\r\n    projection_type = \"ALL\"\r\n  }\r\n}\r\n```\r\n\r\nNote: I am unsure if I need to set my `tableNumber` as a secondary index but plese let me know if this is not required.\r\n\r\nI am then trying to create a new cheque in the DynamoDB table with the following code:\r\n\r\n```\r\nconst tableData: Cheque = {\r\n  id: randomUUID(),\r\n  isOpen: true,\r\n  tableNumber: cheque.tableNumber,\r\n  restaurantId: cheque.restaurantId,\r\n  createdAt: new Date().toISOString(),\r\n  updatedAt: new Date().toISOString(),\r\n};\r\n\r\nconst params: DynamoDB.DocumentClient.PutItemInput = {\r\n  TableName: env.CHEQUE_DDB,\r\n  Item: tableData,\r\n  ConditionExpression: \"attribute_not_exists(tableNumber)\"\r\n};\r\n\r\nawait this.db.put(params).promise();\r\n```\r\n\r\nTo start with, I am only trying to apply one condition which is to ensure the `tableNumber` doesn't already exist. \r\n\r\nBut everytime I run this code, it creates a new entry in the table and I end up with multiple cheques open with table number `x`.\r\n\r\nIf I update my conditional expression to be `attribute_not_exists(id)` then it appears to stop other entries from being opened with the same `id`. Is this because the `id` is the primary key?\r\n\r\nHow can I apply these conditions to fields that are not primary keys and prevent multiple cheques being opened with the same table number?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I want to apply a conditional put request on this table so that a new table can only be created if the following conditions are meet: 1) `tableNumber` does not currently exist AND 2) `restaurnatId` does not currently exist AND 3) `isOpen` status on the table is false (i.e. cheque is not open) I am creating my DynamoDB in Terraform like so: ``` resource \"aws_dynamodb_table\" \"ChequesDDB\" { name = \"Cheques_${var.env_name}\" hash_key = \"id\" billing_mode = \"PROVISIONED\" read_capacity = 5 write_capacity = 5 stream_enabled = true stream_view_type = \"NEW_AND_OLD_IMAGES\" attribute { name = \"id\" type = \"S\" } attribute { name = \"tableNumber\" type = \"N\" } global_secondary_index { name = \"TableNumber\" hash_key = \"tableNumber\" write_capacity = 5 read_capacity = 5 projection_type = \"ALL\" } } ``` ", "keywords": ["bill"]}]}, {"Id": "284012648", "PostHistoryTypeId": "1", "PostId": "74752778", "RevisionGUID": "5aceb4db-027c-49df-b4e9-fae82106f450", "CreationDate": "2022-12-10T12:08:04.057", "UserId": "3528590", "Text": "How to apply conditional put on DynamoDB?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "284012649", "PostHistoryTypeId": "3", "PostId": "74752778", "RevisionGUID": "5aceb4db-027c-49df-b4e9-fae82106f450", "CreationDate": "2022-12-10T12:08:04.057", "UserId": "3528590", "Text": "<javascript><node.js><amazon-web-services><terraform><amazon-dynamodb>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "74752879", "PostTypeId": "2", "ParentId": "74752778", "CreationDate": "2022-12-10T12:24:03.713", "Score": "1", "Body": "<p>A conditional check is only placed on a single item, in your case you generate a unique each time so that will always write a new item, as no item will exist fot that unique id.</p>\n<p>I would strongly advise against generating a unique id for the partition key, as it's essentially useless to you.</p>\n<p>RestaurantId would be a much better key, you can set the sort key as chequeId to ensure items are unique.</p>\n<p>Now you can conditionally put an item for a given restaurant/cheque and your conditions will evaluate correctly as you won't be generating a new item each time.</p>\n", "OwnerUserId": "7909676", "LastActivityDate": "2022-12-10T12:24:03.713", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131931389", "PostId": "74752879", "Score": "0", "Text": "OK that makes. Are you saying to use the restaurantId as the partition key? Wouldn't that cause issues because I couldn't have multiple items with the same restaurantId?", "CreationDate": "2022-12-10T13:29:16.150", "UserId": "3528590", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131931706", "PostId": "74752879", "Score": "0", "Text": "You can have multiple items with the same restaurantId, the sort key will define their uniqueness. That will also allow you to get all the table for a given restaurant in a single API call.", "CreationDate": "2022-12-10T13:53:32.840", "UserId": "7909676", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131932515", "PostId": "74752879", "Score": "0", "Text": "Ok that does seem to work quite nicely for uniqueness and querying all tables for a restaurant but is there a way to factor in if one table is closed (i.e. paid and the cheque is balanced). So in theory, you could have the same `restaurantId`, `tableNumber` but only one can have the `isOpen=true` flag?", "CreationDate": "2022-12-10T15:07:31.040", "UserId": "3528590", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131932643", "PostId": "74752879", "Score": "0", "Text": "You can still set a condition on `isOpen` when performing writes. You would probably need a \"master\" item for the table, and your writes would become transactions via TransactWriteItems. \n\nMost important that you decide what you needs and access patterns are before designing the schema.", "CreationDate": "2022-12-10T15:17:44.067", "UserId": "7909676", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131933026", "PostId": "74752879", "Score": "0", "Text": "Not sure I follow what you mean by having a master item. What would that look like? (BTW really appreciate these suggestions, very helpful, thanks)", "CreationDate": "2022-12-10T15:46:57.047", "UserId": "3528590", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "284013295", "PostHistoryTypeId": "2", "PostId": "74752879", "RevisionGUID": "19871878-f610-43b6-b580-2b7f06221471", "CreationDate": "2022-12-10T12:24:03.713", "UserId": "7909676", "Text": "A conditional check is only placed on a single item, in your case you generate a unique each time so that will always write a new item, as no item will exist fot that unique id. \r\n\r\nI would strongly advise against generating a unique id for the partition key, as it's essentially useless to you. \r\n\r\nRestaurantId would be a much better key, you can set the sort key as chequeId to ensure items are unique. \r\n\r\nNow you can conditionally put an item for a given restaurant/cheque and your conditions will evaluate correctly as you won't be generating a new item each time.  ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": false, "filtered-sentences": []}