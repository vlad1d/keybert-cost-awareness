{"Id": "50069369", "PostTypeId": "1", "CreationDate": "2018-04-27T19:49:00.490", "Score": "6", "ViewCount": "9269", "Body": "<p>Is there an efficient way to apply validation logic to variables used in a terraform run?\nSpecifically I want to check the length and casing of some variables.  The variables are a combination of ones declared in tfvars files, in variables.tf files, and collected during runtime by terraform.</p>\n\n<p>Thanks.</p>\n", "OwnerUserId": "107933", "LastActivityDate": "2020-04-16T12:32:11.520", "Title": "Efficient variable validation with Terraform", "Tags": "<terraform><hcl>", "AnswerCount": "3", "CommentCount": "1", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "87177579", "PostId": "50069369", "Score": "2", "Text": "This open issue looks promising: https://github.com/hashicorp/terraform/issues/2847 but so far no work has been done on it", "CreationDate": "2018-04-28T20:36:37.713", "UserId": "1054268", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "172262432", "PostHistoryTypeId": "2", "PostId": "50069369", "RevisionGUID": "ef65d1ab-dbda-4e98-9e43-cc0c679b4f0c", "CreationDate": "2018-04-27T19:49:00.490", "UserId": "107933", "Text": "Is there an efficient way to apply validation logic to variables used in a terraform run?\r\nSpecifically I want to check the length and casing of some variables.  The variables are a combination of ones declared in tfvars files, in variables.tf files, and collected during runtime by terraform.\r\n\r\nThanks.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Is there an efficient way to apply validation logic to variables used in a terraform run? ", "keywords": ["efficient"]}]}, {"Id": "172262433", "PostHistoryTypeId": "1", "PostId": "50069369", "RevisionGUID": "ef65d1ab-dbda-4e98-9e43-cc0c679b4f0c", "CreationDate": "2018-04-27T19:49:00.490", "UserId": "107933", "Text": "Efficient variable validation with Terraform", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Efficient variable validation with Terraform", "keywords": ["efficient"]}]}, {"Id": "172262434", "PostHistoryTypeId": "3", "PostId": "50069369", "RevisionGUID": "ef65d1ab-dbda-4e98-9e43-cc0c679b4f0c", "CreationDate": "2018-04-27T19:49:00.490", "UserId": "107933", "Text": "<terraform><hcl>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "61250339", "PostTypeId": "2", "ParentId": "50069369", "CreationDate": "2020-04-16T12:32:11.520", "Score": "0", "Body": "<p>Got inspired by this conversation and found the following already existing provider:\n<a href=\"https://github.com/craigmonson/terraform-provider-validate\" rel=\"nofollow noreferrer\">https://github.com/craigmonson/terraform-provider-validate</a></p>\n", "OwnerUserId": "2103431", "LastActivityDate": "2020-04-16T12:32:11.520", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "219350400", "PostHistoryTypeId": "2", "PostId": "61250339", "RevisionGUID": "1eee6351-44ec-494d-a528-cbac077521ef", "CreationDate": "2020-04-16T12:32:11.520", "UserId": "2103431", "Text": "Got inspired by this conversation and found the following already existing provider:\r\nhttps://github.com/craigmonson/terraform-provider-validate\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Got inspired by this conversation and found the following already existing provider: https://github.com/craigmonson/terraform-provider-validate", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "Got inspired by this conversation and found the following already existing provider: https://github.com/craigmonson/terraform-provider-validate", "keywords": ["provider"]}]}, {"Id": "50150366", "PostTypeId": "2", "ParentId": "50069369", "CreationDate": "2018-05-03T08:27:50.603", "Score": "1", "Body": "<p>This isn't something you can currently do directly with Terraform but I find it easier to just mangle the input variables to the required format if necessary.</p>\n\n<p>As an example the <a href=\"https://www.terraform.io/docs/providers/aws/r/lb_target_group.html\" rel=\"nofollow noreferrer\"><code>aws_lb_target_group</code> resource</a> takes a <a href=\"https://www.terraform.io/docs/providers/aws/r/lb_target_group.html#protocol\" rel=\"nofollow noreferrer\"><code>protocol</code> parameter</a> that currently requires it to be uppercased instead of automatically upper casing things and suppressing the diff like the <code>aws_lb_listener</code> resource does for the protocol (or even the <code>protocol</code> in the <code>health_check</code> block).</p>\n\n<p>To solve this I just use the <a href=\"https://www.terraform.io/docs/configuration/interpolation.html#upper-string-\" rel=\"nofollow noreferrer\"><code>upper</code> function</a> when creating the resource:</p>\n\n<pre><code>variable \"protocol\" {\n  default = \"http\"\n}\n\nresource \"aws_vpc\" \"main\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_lb_target_group\" \"test\" {\n  name     = \"tf-example-lb-tg\"\n  port     = 80\n  protocol = \"${upper(var.protocol)}\"\n  vpc_id   = \"${aws_vpc.main.id}\"\n}\n</code></pre>\n\n<p>As for checking length I just substring things to make them the right length. I currently do this for ALBs as the name has a max length of 32 and I have Gitlab CI create review environments for some services that get a name based on the slug of the Git branch name so have little control over the length that is used.</p>\n\n<pre><code>variable \"environment\" {}\nvariable \"service_name\" {}\n\nvariable \"internal\" {\n  default = true\n}\n\nresource \"aws_lb\" \"load_balancer\" {\n  name            = \"${substr(var.environment, 0, min(length(var.environment), 27 - length(var.service_name)))}-${var.service_name}-${var.internal ? \"int\" : \"ext\"}\"\n  internal        = \"${var.internal}\"\n  security_groups = [\"${aws_security_group.load_balancer.id}\"]\n  subnets         = [\"${data.aws_subnet_ids.selected.ids}\"]\n}\n</code></pre>\n\n<p>With the above then any combination of length of environment or service name will lead to the environment/service name pair being trimmed to 27 characters at most which leaves room for the extra characters that I want to specify.</p>\n", "OwnerUserId": "2291321", "LastActivityDate": "2018-05-03T08:27:50.603", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "87394271", "PostId": "50150366", "Score": "1", "Text": "Thanks, good stuff.  Could certainly combine some of those methods into a count in a little custom resource...raise an error if the condition fails (i.e. count >0).  I'm betting that a future terraform release provides a more concise and well documented way to do this.", "CreationDate": "2018-05-05T11:10:09.743", "UserId": "107933", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "172609298", "PostHistoryTypeId": "2", "PostId": "50150366", "RevisionGUID": "7d199f88-0078-47eb-8b69-ee523a13526c", "CreationDate": "2018-05-03T08:27:50.603", "UserId": "2291321", "Text": "This isn't something you can currently do directly with Terraform but I find it easier to just mangle the input variables to the required format if necessary.\r\n\r\nAs an example the [`aws_lb_target_group` resource][1] takes a [`protocol` parameter][2] that currently requires it to be uppercased instead of automatically upper casing things and suppressing the diff like the `aws_lb_listener` resource does for the protocol (or even the `protocol` in the `health_check` block).\r\n\r\nTo solve this I just use the [`upper` function][3] when creating the resource:\r\n\r\n    variable \"protocol\" {\r\n      default = \"http\"\r\n    }\r\n    \r\n    resource \"aws_vpc\" \"main\" {\r\n      cidr_block = \"10.0.0.0/16\"\r\n    }\r\n    \r\n    resource \"aws_lb_target_group\" \"test\" {\r\n      name     = \"tf-example-lb-tg\"\r\n      port     = 80\r\n      protocol = \"${upper(var.protocol)}\"\r\n      vpc_id   = \"${aws_vpc.main.id}\"\r\n    }\r\n\r\nAs for checking length I just substring things to make them the right length. I currently do this for ALBs as the name has a max length of 32 and I have Gitlab CI create review environments for some services that get a name based on the slug of the Git branch name so have little control over the length that is used.\r\n\r\n    variable \"environment\" {}\r\n    variable \"service_name\" {}\r\n    \r\n    variable \"internal\" {\r\n      default = true\r\n    }\r\n    \r\n    resource \"aws_lb\" \"load_balancer\" {\r\n      name            = \"${substr(var.environment, 0, min(length(var.environment), 27 - length(var.service_name)))}-${var.service_name}-${var.internal ? \"int\" : \"ext\"}\"\r\n      internal        = \"${var.internal}\"\r\n      security_groups = [\"${aws_security_group.load_balancer.id}\"]\r\n      subnets         = [\"${data.aws_subnet_ids.selected.ids}\"]\r\n    }\r\n\r\nWith the above then any combination of length of environment or service name will lead to the environment/service name pair being trimmed to 27 characters at most which leaves room for the extra characters that I want to specify.\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/r/lb_target_group.html\r\n  [2]: https://www.terraform.io/docs/providers/aws/r/lb_target_group.html#protocol\r\n  [3]: https://www.terraform.io/docs/configuration/interpolation.html#upper-string-", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "To solve this I just use the [`upper` function][3] when creating the resource: variable \"protocol\" { default = \"http\" } resource \"aws_vpc\" \"main\" { cidr_block = \"10.0.0.0/16\" } resource \"aws_lb_target_group\" \"test\" { name = \"tf-example-lb-tg\" port = 80 protocol = \"${upper(var.protocol)}\" vpc_id = \"${aws_vpc.main.id}\" } ", "keywords": ["test"]}]}], "filtered-sentences": []}, {"Id": "60424197", "PostTypeId": "2", "ParentId": "50069369", "CreationDate": "2020-02-26T23:37:51.673", "Score": "3", "Body": "<h1>Custom Validation Rules</h1>\n\n<ul>\n<li><a href=\"https://www.terraform.io/docs/configuration/variables.html#custom-validation-rules\" rel=\"nofollow noreferrer\">Terraform document - Input Variables - Custom Validation Rules</a></li>\n</ul>\n\n<h1>Results</h1>\n\n<h2>Failure case</h2>\n\n<pre><code>provider aws {\n     profile=\"default\"\n}\nterraform {\n  experiments = [variable_validation]\n}\n\n## Custom Validation Rules\nvariable \"test\" {\n  type        = string\n  description = \"Example to test the case and length of the variable\"\n  default = \"TEsT\"\n\n  validation {\n    condition     = length(var.test) &gt; 4 &amp;&amp; upper(var.test) == var.test\n    error_message = \"Validation condition of the test variable did not meet.\"\n  }\n}\n\n</code></pre>\n\n<h3>Execution</h3>\n\n<pre><code>$ terraform plan\n\nWarning: Experimental feature \"variable_validation\" is active\n\n  on main.tf line 5, in terraform:\n   5:   experiments = [variable_validation]\n\nExperimental features are subject to breaking changes in future minor or patch\nreleases, based on feedback.\n\nIf you have feedback on the design of this feature, please open a GitHub issue\nto discuss it.\n\n\nError: Invalid value for variable   # &lt;---------------------------\n\n  on main.tf line 9:\n   9: variable \"test\" {\n\nValidation condition of the test variable did not meet.\n\nThis was checked by the validation rule at main.tf:14,3-13.\n</code></pre>\n\n<h2>Pass case</h2>\n\n<pre><code>terraform {\n  experiments = [variable_validation]\n}\n\n## Custom Validation Rules\nvariable \"test\" {\n  type        = string\n  description = \"Example to test the case and length of the variable\"\n  default = \"TESTED\"\n\n  validation {\n    condition     = length(var.test) &gt; 4 &amp;&amp; upper(var.test) == var.test\n    error_message = \"Validation condition of the test variable did not meet.\"\n  }\n}\n</code></pre>\n\n<h3>Execution</h3>\n\n<pre><code>$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\n\n------------------------------------------------------------------------\n\nNo changes. Infrastructure is up-to-date.\n</code></pre>\n\n<h1>Others</h1>\n\n<p>Alternatively, use null_resource local-exec to implement logic in shell script, or use external provider to send the variable to an external program to validate?</p>\n", "OwnerUserId": "4281353", "LastActivityDate": "2020-02-26T23:37:51.673", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "215822022", "PostHistoryTypeId": "2", "PostId": "60424197", "RevisionGUID": "13c0052c-f082-4bc0-96b7-21b2d381fed8", "CreationDate": "2020-02-26T23:37:51.673", "UserId": "4281353", "Text": "# Custom Validation Rules\r\n\r\n* [Terraform document - Input Variables - Custom Validation Rules][1]\r\n\r\n# Results\r\n\r\n## Failure case\r\n```\r\nprovider aws {\r\n  profile=\"default\"\r\n}\r\nterraform {\r\n  experiments = [variable_validation]\r\n}\r\n\r\n## Custom Validation Rules\r\nvariable \"test\" {\r\n  type        = string\r\n  description = \"Example to test the case and length of the variable\"\r\n  default = \"TEsT\"\r\n\r\n  validation {\r\n    condition     = length(var.test) > 4 && upper(var.test) == var.test\r\n    error_message = \"Validation condition of the test variable did not meet.\"\r\n  }\r\n}\r\n\r\n```\r\n### Execution\r\n```\r\n$ terraform plan\r\n\r\nWarning: Experimental feature \"variable_validation\" is active\r\n\r\n  on main.tf line 5, in terraform:\r\n   5:   experiments = [variable_validation]\r\n\r\nExperimental features are subject to breaking changes in future minor or patch\r\nreleases, based on feedback.\r\n\r\nIf you have feedback on the design of this feature, please open a GitHub issue\r\nto discuss it.\r\n\r\n\r\nError: Invalid value for variable   # <---------------------------\r\n\r\n  on main.tf line 9:\r\n   9: variable \"test\" {\r\n\r\nValidation condition of the test variable did not meet.\r\n\r\nThis was checked by the validation rule at main.tf:14,3-13.\r\n```\r\n\r\n## Pass case\r\n```\r\nterraform {\r\n  experiments = [variable_validation]\r\n}\r\n\r\n## Custom Validation Rules\r\nvariable \"test\" {\r\n  type        = string\r\n  description = \"Example to test the case and length of the variable\"\r\n  default = \"TESTED\"\r\n\r\n  validation {\r\n    condition     = length(var.test) > 4 && upper(var.test) == var.test\r\n    error_message = \"Validation condition of the test variable did not meet.\"\r\n  }\r\n}\r\n```\r\n\r\n### Execution\r\n```\r\n$ terraform plan\r\nRefreshing Terraform state in-memory prior to plan...\r\nThe refreshed state will be used to calculate this plan, but will not be\r\npersisted to local or remote state storage.\r\n\r\n\r\n------------------------------------------------------------------------\r\n\r\nNo changes. Infrastructure is up-to-date.\r\n```\r\n\r\n# Others\r\n\r\nAlternatively, use null_resource local-exec to implement logic in shell script, or use external provider to send the variable to an external program to validate?\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/configuration/variables.html#custom-validation-rules", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "# Custom Validation Rules * [Terraform document - Input Variables - Custom Validation Rules][1] # Results ## Failure case ``` provider aws { profile=\"default\" } terraform { experiments = [variable_validation] } ## Custom Validation Rules variable \"test\" { type = string description = \"Example to test the case and length of the variable\" default = \"TEsT\" validation { condition = length(var.test) > 4 && upper(var.test) == var.test error_message = \"Validation condition of the test variable did not meet.\" } } ``` ### Execution ``` $ terraform plan Warning: Experimental feature \"variable_validation\" is active on main.tf line 5, in terraform: 5: experiments = [variable_validation] Experimental features are subject to breaking changes in future minor or patch releases, based on feedback. ", "keywords": ["provider", "feature", "change", "test"]}, {"source": "Text", "text": "If you have feedback on the design of this feature, please open a GitHub issue to discuss it. ", "keywords": ["feature"]}, {"source": "Text", "text": "Error: Invalid value for variable # <--------------------------- on main.tf line 9: 9: variable \"test\" { Validation condition of the test variable did not meet. ", "keywords": ["test"]}, {"source": "Text", "text": "``` ## Pass case ``` terraform { experiments = [variable_validation] } ## Custom Validation Rules variable \"test\" { type = string description = \"Example to test the case and length of the variable\" default = \"TESTED\" validation { condition = length(var.test) > 4 && upper(var.test) == var.test error_message = \"Validation condition of the test variable did not meet.\" } } ``` ### Execution ``` $ terraform plan Refreshing Terraform state in-memory prior to plan... ", "keywords": ["test"]}, {"source": "Text", "text": "The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ", "keywords": ["storage"]}, {"source": "Text", "text": "No changes. ", "keywords": ["change"]}, {"source": "Text", "text": "``` # Others Alternatively, use null_resource local-exec to implement logic in shell script, or use external provider to send the variable to an external program to validate? [1]: https://www", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "Custom Validation Rules Terraform document - Input Variables - Custom Validation Rules Results Failure case Execution Pass case Execution Others Alternatively, use null_resource local-exec to implement logic in shell script, or use external provider to send the variable to an external program to validate?", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Efficient variable validation with Terraform", "keywords": ["efficient"]}, {"source": "Body", "text": "Is there an efficient way to apply validation logic to variables used in a terraform run? ", "keywords": ["efficient"]}]}