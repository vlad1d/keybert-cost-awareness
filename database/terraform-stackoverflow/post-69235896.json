{"Id": "69235896", "PostTypeId": "1", "CreationDate": "2021-09-18T15:13:13.333", "Score": "1", "ViewCount": "1477", "Body": "<p>I am moving away from Github.com and to Codecommit, I have been leveraging terraforms modular approach to import GitHub repos as modules for years.  That said Codecommit is very different in that nature.  I have seen where people leverage SSH to clone the repos locally but I have also noticed codepipeline can leverage multiple sources.  I need a way to add multiple repos to my pipeline so I can replicate the modular github approach offered by terraform.  I want that code locally to execute it in a modular fashion.</p>\n<p>I have googled looking for an example that shows me how to leverage multiple codecommmit resources in my pipeline and i can not find anything that clearly outlines how to leverage multiple resources in terraform. Has anyone figured this out or have examples they can point me to?</p>\n", "OwnerUserId": "13893988", "LastActivityDate": "2022-01-17T14:39:01.283", "Title": "Terraform: AWS Codepipeline multiple Codecommit sources", "Tags": "<terraform><aws-codepipeline><aws-codecommit>", "AnswerCount": "2", "CommentCount": "6", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "122377180", "PostId": "69235896", "Score": "0", "Text": "https://docs.aws.amazon.com/codebuild/latest/userguide/sample-pipeline-multi-input-output.html - pretty easy to find on Google. CodePipeline is focused on deploying using AWS native constructs so it's not surprising to me there is not much information on using it with Terraform. Essentially you will be using Codebuild projects to call Terraform-so you would be best advised to focus on how to use CodeBuild projects with CodePipeline ( with multiple input sources as in the provided example ) with the understanding it's up to you as to what you do in those Codebuild projects", "CreationDate": "2021-09-18T22:09:13.737", "UserId": "15410530", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "122377268", "PostId": "69235896", "Score": "0", "Text": "Pay attention to how multiple input working directories are used, they are not nested e.g $CODEBUILD_SRC_DIR and $CODEBUILD_SRC_DIR_source2", "CreationDate": "2021-09-18T22:18:04.607", "UserId": "15410530", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Pay attention to how multiple input working directories are used, they are not nested e.g $CODEBUILD_SRC_DIR and $CODEBUILD_SRC_DIR_source2", "keywords": ["pay"]}]}, {"Id": "122377432", "PostId": "69235896", "Score": "0", "Text": "@ronan thanks for the reply.  I found that link earlier and working through the terraform resource to construct the second source.  Really appreciate the heads up on the directories will look into that.", "CreationDate": "2021-09-18T22:34:12.603", "UserId": "13893988", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "122377630", "PostId": "69235896", "Score": "0", "Text": "No worries. Maybe I misunderstood?  Are you using Terraform to create the pipelines or pipelines to run Terrraform - or both?", "CreationDate": "2021-09-18T22:54:59.257", "UserId": "15410530", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "122474544", "PostId": "69235896", "Score": "0", "Text": "Great comment, i did both, I created terraform to create the pipeline and the build projects.  That part is working nicely if you want to see it let me know.  The part i am struggling with is getting the terraform to create a second resource which in this case is another codecommit repo into the source.  Let me know if that clears it up for you.", "CreationDate": "2021-09-23T03:57:50.947", "UserId": "13893988", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "122494172", "PostId": "69235896", "Score": "0", "Text": "I've included a CF yaml example if that might help to visualise it to see if you are asking Terraform to do the right thing - One source stage with two actions - one for the pipeline definition and one for the thing to get deployed .", "CreationDate": "2021-09-23T18:05:22.573", "UserId": "15410530", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "254015014", "PostHistoryTypeId": "2", "PostId": "69235896", "RevisionGUID": "5b233026-09d7-457d-a507-8a88d1578499", "CreationDate": "2021-09-18T15:13:13.333", "UserId": "13893988", "Text": "I am moving away from Github.com and to Codecommit, I have been leveraging terraforms modular approach to import GitHub repos as modules for years.  That said Codecommit is very different in that nature.  I have seen where people leverage SSH to clone the repos locally but I have also noticed codepipeline can leverage multiple sources.  I need a way to add multiple repos to my pipeline so I can replicate the modular github approach offered by terraform.  I want that code locally to execute it in a modular fashion.\r\n\r\nI have googled looking for an example that shows me how to leverage multiple codecommmit resources in my pipeline and i can not find anything that clearly outlines how to leverage multiple resources in terraform. Has anyone figured this out or have examples they can point me to?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "254015016", "PostHistoryTypeId": "1", "PostId": "69235896", "RevisionGUID": "5b233026-09d7-457d-a507-8a88d1578499", "CreationDate": "2021-09-18T15:13:13.333", "UserId": "13893988", "Text": "Terraform: AWS Codepipeline multiple Codecommit sources", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "254015017", "PostHistoryTypeId": "3", "PostId": "69235896", "RevisionGUID": "5b233026-09d7-457d-a507-8a88d1578499", "CreationDate": "2021-09-18T15:13:13.333", "UserId": "13893988", "Text": "<terraform><aws-codepipeline><aws-codecommit>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "70743111", "PostTypeId": "2", "ParentId": "69235896", "CreationDate": "2022-01-17T14:39:01.283", "Score": "2", "Body": "<p>Looking into this, I have found that it's not very well documented anywhere which is actually very frustrating.  Leveraging hashicorp vague description of the service and AWS multi-input example I was finally able to come up with this for terraform:</p>\n<pre><code> &quot;aws_codepipeline&quot; &quot;foo&quot; {\n  name     = &quot;tf-test-pipeline&quot;\n  role_arn = &quot;codepipeline service role arn&quot;\n\n  artifact_store {\n    location = &quot;s3 bucket name, NOT THE ARN&quot;\n    type     = &quot;S3&quot;\n  }\n\n  stage {\n    name = &quot;Source&quot;\n\n    action {\n      name             = &quot;Source&quot;\n      category         = &quot;Source&quot;\n      owner            = &quot;AWS&quot;\n      provider         = &quot;CodeCommit&quot;\n      version         = &quot;1&quot;\n      output_artifacts = [&quot;src&quot;]\n\n      configuration = {\n        RepositoryName = &quot;vpc&quot; //MUST BE the name of the your codecommit repo\n        BranchName = &quot;master&quot;\n      }\n\n      run_order = &quot;1&quot;\n    }\n\n    action {\n      name             = &quot;2ndSource&quot; //you can make this any name\n      category         = &quot;Source&quot;\n      owner            = &quot;AWS&quot;\n      provider         = &quot;CodeCommit&quot;\n      version         = &quot;1&quot;\n      output_artifacts = [&quot;src2&quot;]\n\n      configuration = {\n        RepositoryName = &quot;ec2&quot; \n        BranchName = &quot;master&quot;\n      }\n      run_order = &quot;2&quot;\n    }\n\n\n  }\n\n\n  stage {\n    name = &quot;Build&quot;\n\n    action {\n      name            = &quot;Build&quot;\n      category        = &quot;Build&quot;\n      owner           = &quot;AWS&quot;\n      provider        = &quot;CodeBuild&quot;\n      input_artifacts = [&quot;src&quot;,&quot;src2&quot;] //pass through both repositories\n      version         = &quot;1&quot;\n\n      configuration = {\n        ProjectName = &quot;codebuild_project_name&quot;\n        PrimarySource = &quot;Source&quot;\n      }\n    }\n  }\n}\n</code></pre>\n<p>The trick here is to add additional sources into one stage, not separate ones.  The reference below shows two of them but I have been able to add three with no problem.</p>\n<p>Reference Links:</p>\n<p>Hashicorp CodePipeline\n<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codepipeline#run_order\" rel=\"nofollow noreferrer\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codepipeline#run_order</a></p>\n<p>AWS Multiple Inputs Json Example:\n<a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/sample-pipeline-multi-input-output.html\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/codebuild/latest/userguide/sample-pipeline-multi-input-output.html</a></p>\n<p>For those of you getting started for the first time, I recommend this link, it's pretty comprehensive and walks you through the entire build process which includes roles and policies:\n<a href=\"https://medium.com/swlh/intro-to-aws-codecommit-codepipeline-and-codebuild-with-terraform-179f4310fe07\" rel=\"nofollow noreferrer\">https://medium.com/swlh/intro-to-aws-codecommit-codepipeline-and-codebuild-with-terraform-179f4310fe07</a></p>\n", "OwnerUserId": "5552735", "LastActivityDate": "2022-01-17T14:39:01.283", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "262133120", "PostHistoryTypeId": "2", "PostId": "70743111", "RevisionGUID": "eadad7b5-0a34-4bab-a3d2-dae766cbc7c9", "CreationDate": "2022-01-17T14:39:01.283", "UserId": "5552735", "Text": "Looking into this, I have found that it's not very well documented anywhere which is actually very frustrating.  Leveraging hashicorp vague description of the service and AWS multi-input example I was finally able to come up with this for terraform:\r\n\r\n \r\n\r\n     \"aws_codepipeline\" \"foo\" {\r\n      name     = \"tf-test-pipeline\"\r\n      role_arn = \"codepipeline service role arn\"\r\n    \r\n      artifact_store {\r\n        location = \"s3 bucket name, NOT THE ARN\"\r\n        type     = \"S3\"\r\n      }\r\n    \r\n      stage {\r\n        name = \"Source\"\r\n    \r\n        action {\r\n          name             = \"Source\"\r\n          category         = \"Source\"\r\n          owner            = \"AWS\"\r\n          provider         = \"CodeCommit\"\r\n          version         = \"1\"\r\n          output_artifacts = [\"src\"]\r\n    \r\n          configuration = {\r\n            RepositoryName = \"vpc\" //MUST BE the name of the your codecommit repo\r\n            BranchName = \"master\"\r\n          }\r\n    \r\n          run_order = \"1\"\r\n        }\r\n    \r\n        action {\r\n          name             = \"2ndSource\" //you can make this any name\r\n          category         = \"Source\"\r\n          owner            = \"AWS\"\r\n          provider         = \"CodeCommit\"\r\n          version         = \"1\"\r\n          output_artifacts = [\"src2\"]\r\n    \r\n          configuration = {\r\n            RepositoryName = \"ec2\" \r\n            BranchName = \"master\"\r\n          }\r\n          run_order = \"2\"\r\n        }\r\n    \r\n    \r\n      }\r\n    \r\n    \r\n      stage {\r\n        name = \"Build\"\r\n    \r\n        action {\r\n          name            = \"Build\"\r\n          category        = \"Build\"\r\n          owner           = \"AWS\"\r\n          provider        = \"CodeBuild\"\r\n          input_artifacts = [\"src\",\"src2\"] //pass through both repositories\r\n          version         = \"1\"\r\n    \r\n          configuration = {\r\n            ProjectName = \"codebuild_project_name\"\r\n            PrimarySource = \"Source\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n\r\nThe trick here is to add additional sources into one stage, not separate ones.  The reference below shows two of them but I have been able to add three with no problem.\r\n\r\nReference Links:\r\n\r\nHashicorp CodePipeline \r\nhttps://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/codepipeline#run_order\r\n\r\nAWS Multiple Inputs Json Example:\r\nhttps://docs.aws.amazon.com/codebuild/latest/userguide/sample-pipeline-multi-input-output.html\r\n\r\nFor those of you getting started for the first time, I recommend this link, it's pretty comprehensive and walks you through the entire build process which includes roles and policies:\r\nhttps://medium.com/swlh/intro-to-aws-codecommit-codepipeline-and-codebuild-with-terraform-179f4310fe07\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Leveraging hashicorp vague description of the service and AWS multi-input example I was finally able to come up with this for terraform: \"aws_codepipeline\" \"foo\" { name = \"tf-test-pipeline\" role_arn = \"codepipeline service role arn\" artifact_store { location = \"s3 bucket name, NOT THE ARN\" type = \"S3\" } stage { name = \"Source\" action { name = \"Source\" category = \"Source\" owner = \"AWS\" provider = \"CodeCommit\" version = \"1\" output_artifacts = [\"src\"] configuration = { RepositoryName = \"vpc\" //MUST BE the name of the your codecommit repo BranchName = \"master\" } run_order = \"1\" } action { name = \"2ndSource\" //you can make this any name category = \"Source\" owner = \"AWS\" provider = \"CodeCommit\" version = \"1\" output_artifacts = [\"src2\"] configuration = { RepositoryName = \"ec2\" BranchName = \"master\" } run_order = \"2\" } } stage { name = \"Build\" action { name = \"Build\" category = \"Build\" owner = \"AWS\" provider = \"CodeBuild\" input_artifacts = [\"src\",\"src2\"] //pass through both repositories version = \"1\" configuration = { ProjectName = \"codebuild_project_name\" PrimarySource = \"Source\" } } } } ", "keywords": ["provider", "test"]}]}], "filtered-sentences": []}, {"Id": "69304949", "PostTypeId": "2", "ParentId": "69235896", "CreationDate": "2021-09-23T18:05:29.193", "Score": "-1", "Body": "<pre><code>#    _____  ____  _    _ _____   _____ ______ \n#   / ____|/ __ \\| |  | |  __ \\ / ____|  ____|\n#  | (___ | |  | | |  | | |__) | |    | |__   \n#   \\___ \\| |  | | |  | |  _  /| |    |  __|  \n#   ____) | |__| | |__| | | \\ \\| |____| |____ \n#  |_____/ \\____/ \\____/|_|  \\_\\\\_____|______|\n                                            \n                                            \n      Stages:\n        - Name: Source\n          Actions:\n            - ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeStarSourceConnection\n                Version: &quot;1&quot;\n              Configuration: \n                ConnectionArn: !Ref CodeStarConnectionArn\n                FullRepositoryId: !Ref BitBucketRepo\n                BranchName: !Ref BitBucketRepoReleaseBranch\n                OutputArtifactFormat: &quot;CODE_ZIP&quot;\n                DetectChanges: true\n              Name: SourceCode\n              OutputArtifacts:\n                - Name: !Sub ${SourceArtifactName}\n              Namespace: SourceVariables1\n              RunOrder: 1\n            - ActionTypeId:\n                Category: Source\n                Owner: AWS\n                Provider: CodeStarSourceConnection\n                Version: &quot;1&quot;\n              Configuration: \n                ConnectionArn: !Ref CodeStarConnectionArn\n                FullRepositoryId: !Ref PipelineBitBucketRepo\n                BranchName: !Ref PipelineBitBucketRepoReleaseBranch\n                OutputArtifactFormat: &quot;CODE_ZIP&quot;\n                DetectChanges: true\n              Name: PipelineDefinition\n              OutputArtifacts:\n                - Name: !Sub ${PipelineCodeArtifactName}\n              Namespace: SourceVariables2\n              RunOrder: 1\n\n\n\n#    _____ ______ _      ______   __  __ _    _ _______    _______ ______ \n#   / ____|  ____| |    |  ____| |  \\/  | |  | |__   __|/\\|__   __|  ____|\n#  | (___ | |__  | |    | |__    | \\  / | |  | |  | |  /  \\  | |  | |__   \n#   \\___ \\|  __| | |    |  __|   | |\\/| | |  | |  | | / /\\ \\ | |  |  __|  \n#   ____) | |____| |____| |      | |  | | |__| |  | |/ ____ \\| |  | |____ \n#  |_____/|______|______|_|      |_|  |_|\\____/   |_/_/    \\_\\_|  |______|\n                                                                        \n                                                                        \n\n\n        - !If\n          - ShouldUpatePipelineStackOnChange\n          - Name: UpdatePipeline\n\n            Actions:\n              - Name: CreateChangeSet\n                ActionTypeId:\n                  Category: Deploy\n                  Owner: AWS\n                  Provider: CloudFormation\n                  Version: &quot;1&quot;\n                Configuration:\n                  ActionMode: CHANGE_SET_REPLACE\n                  StackName: !Ref AWS::StackName\n                  ChangeSetName: !Sub ${AWS::StackName}-ChangeSet\n                  TemplatePath: !Sub ${PipelineCodeArtifactName}::${PipelineTemplateName}\n                  Capabilities: CAPABILITY_NAMED_IAM\n                  RoleArn: !GetAtt PipelineStackCloudFormationExecutionRole.Arn\n                InputArtifacts:\n                  - Name: !Sub ${PipelineCodeArtifactName}\n                RunOrder: 1\n              - Name: ExecuteChangeSet\n                ActionTypeId:\n                  Category: Deploy\n                  Owner: AWS\n                  Provider: CloudFormation\n                  Version: &quot;1&quot;\n                Configuration:\n                  ActionMode: CHANGE_SET_EXECUTE\n                  StackName: !Ref AWS::StackName\n                  ChangeSetName: !Sub ${AWS::StackName}-ChangeSet\n                  RoleArn: !GetAtt PipelineStackCloudFormationExecutionRole.Arn\n                OutputArtifacts:\n                  - Name: !Sub ${AWS::StackName}ChangeSet\n                RunOrder: 2\n          - !Ref AWS::NoValue\n</code></pre>\n", "OwnerUserId": "15410530", "LastActivityDate": "2021-09-23T18:05:29.193", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "122522899", "PostId": "69304949", "Score": "0", "Text": "Ronan let me check this out and see how i can work it.  Will get back to you with the progress.  thank you for this.", "CreationDate": "2021-09-24T20:17:20.233", "UserId": "13893988", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "254376834", "PostHistoryTypeId": "2", "PostId": "69304949", "RevisionGUID": "6d391f58-1513-4d93-95e3-2dd2ffe16429", "CreationDate": "2021-09-23T18:05:29.193", "UserId": "15410530", "Text": "```\r\n#    _____  ____  _    _ _____   _____ ______ \r\n#   / ____|/ __ \\| |  | |  __ \\ / ____|  ____|\r\n#  | (___ | |  | | |  | | |__) | |    | |__   \r\n#   \\___ \\| |  | | |  | |  _  /| |    |  __|  \r\n#   ____) | |__| | |__| | | \\ \\| |____| |____ \r\n#  |_____/ \\____/ \\____/|_|  \\_\\\\_____|______|\r\n                                            \r\n                                            \r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: CodeStarSourceConnection\r\n                Version: \"1\"\r\n              Configuration: \r\n                ConnectionArn: !Ref CodeStarConnectionArn\r\n                FullRepositoryId: !Ref BitBucketRepo\r\n                BranchName: !Ref BitBucketRepoReleaseBranch\r\n                OutputArtifactFormat: \"CODE_ZIP\"\r\n                DetectChanges: true\r\n              Name: SourceCode\r\n              OutputArtifacts:\r\n                - Name: !Sub ${SourceArtifactName}\r\n              Namespace: SourceVariables1\r\n              RunOrder: 1\r\n            - ActionTypeId:\r\n                Category: Source\r\n                Owner: AWS\r\n                Provider: CodeStarSourceConnection\r\n                Version: \"1\"\r\n              Configuration: \r\n                ConnectionArn: !Ref CodeStarConnectionArn\r\n                FullRepositoryId: !Ref PipelineBitBucketRepo\r\n                BranchName: !Ref PipelineBitBucketRepoReleaseBranch\r\n                OutputArtifactFormat: \"CODE_ZIP\"\r\n                DetectChanges: true\r\n              Name: PipelineDefinition\r\n              OutputArtifacts:\r\n                - Name: !Sub ${PipelineCodeArtifactName}\r\n              Namespace: SourceVariables2\r\n              RunOrder: 1\r\n\r\n\r\n\r\n#    _____ ______ _      ______   __  __ _    _ _______    _______ ______ \r\n#   / ____|  ____| |    |  ____| |  \\/  | |  | |__   __|/\\|__   __|  ____|\r\n#  | (___ | |__  | |    | |__    | \\  / | |  | |  | |  /  \\  | |  | |__   \r\n#   \\___ \\|  __| | |    |  __|   | |\\/| | |  | |  | | / /\\ \\ | |  |  __|  \r\n#   ____) | |____| |____| |      | |  | | |__| |  | |/ ____ \\| |  | |____ \r\n#  |_____/|______|______|_|      |_|  |_|\\____/   |_/_/    \\_\\_|  |______|\r\n                                                                        \r\n                                                                        \r\n\r\n\r\n        - !If\r\n          - ShouldUpatePipelineStackOnChange\r\n          - Name: UpdatePipeline\r\n\r\n            Actions:\r\n              - Name: CreateChangeSet\r\n                ActionTypeId:\r\n                  Category: Deploy\r\n                  Owner: AWS\r\n                  Provider: CloudFormation\r\n                  Version: \"1\"\r\n                Configuration:\r\n                  ActionMode: CHANGE_SET_REPLACE\r\n                  StackName: !Ref AWS::StackName\r\n                  ChangeSetName: !Sub ${AWS::StackName}-ChangeSet\r\n                  TemplatePath: !Sub ${PipelineCodeArtifactName}::${PipelineTemplateName}\r\n                  Capabilities: CAPABILITY_NAMED_IAM\r\n                  RoleArn: !GetAtt PipelineStackCloudFormationExecutionRole.Arn\r\n                InputArtifacts:\r\n                  - Name: !Sub ${PipelineCodeArtifactName}\r\n                RunOrder: 1\r\n              - Name: ExecuteChangeSet\r\n                ActionTypeId:\r\n                  Category: Deploy\r\n                  Owner: AWS\r\n                  Provider: CloudFormation\r\n                  Version: \"1\"\r\n                Configuration:\r\n                  ActionMode: CHANGE_SET_EXECUTE\r\n                  StackName: !Ref AWS::StackName\r\n                  ChangeSetName: !Sub ${AWS::StackName}-ChangeSet\r\n                  RoleArn: !GetAtt PipelineStackCloudFormationExecutionRole.Arn\r\n                OutputArtifacts:\r\n                  - Name: !Sub ${AWS::StackName}ChangeSet\r\n                RunOrder: 2\r\n          - !Ref AWS::NoValue\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "``` # _____ ____ _ _ _____ _____ ______ # / ____|/ __ \\| | | | __ \\ / ____| ____| # | (___ | | | | | | | |__) | | | |__ # \\___ \\| | | | | | | _ /| | | __| # ____) | |__| | |__| | | \\ \\| |____| |____ # |_____/ \\____/ \\____/|_| \\_\\\\_____|______| Stages: - Name: Source Actions: - ActionTypeId: Category: Source Owner: AWS Provider: CodeStarSourceConnection Version: \"1\" Configuration: ConnectionArn: !Ref CodeStarConnectionArn FullRepositoryId: !Ref BitBucketRepo BranchName: !Ref BitBucketRepoReleaseBranch OutputArtifactFormat: \"CODE_ZIP\" DetectChanges: true Name: SourceCode OutputArtifacts: - Name: !Sub ${SourceArtifactName} Namespace: SourceVariables1 RunOrder: 1 - ActionTypeId: Category: Source Owner: AWS Provider: CodeStarSourceConnection Version: \"1\" Configuration: ConnectionArn: !Ref CodeStarConnectionArn FullRepositoryId: !Ref PipelineBitBucketRepo BranchName: !Ref PipelineBitBucketRepoReleaseBranch OutputArtifactFormat: \"CODE_ZIP\" DetectChanges: true Name: PipelineDefinition OutputArtifacts: - Name: !Sub ${PipelineCodeArtifactName} Namespace: SourceVariables2 RunOrder: 1 # _____ ______ _ ______ __ __ _ _ _______ _______ ______ # / ____| ____| | | ____| | \\/ | | | |__ __|/\\|__ __| ____| # | (___ | |__ | | | |__ | \\ / | | | | | | / \\ | | | |__ # \\___ \\| __| | | | __| | |\\/| | | | | | | / /\\ \\ | | | __| # ____) | |____| |____| | | | | | |__| | | |/ ____ \\| | | |____ # |_____/|______|______|_| |_| |_|\\____/ |_/_/ \\_\\_| |______| - !If - ShouldUpatePipelineStackOnChange - Name: UpdatePipeline Actions: - Name: CreateChangeSet ActionTypeId: Category: Deploy Owner: AWS Provider: CloudFormation Version: \"1\" Configuration: ActionMode: CHANGE_SET_REPLACE StackName: !Ref AWS::StackName ChangeSetName: !Sub ${AWS::StackName}-ChangeSet TemplatePath: !Sub ${PipelineCodeArtifactName}::${PipelineTemplateName} Capabilities: CAPABILITY_NAMED_IAM RoleArn: !GetAtt PipelineStackCloudFormationExecutionRole.Arn InputArtifacts: - Name: !Sub ${PipelineCodeArtifactName} RunOrder: 1 - Name: ExecuteChangeSet ActionTypeId: Category: Deploy Owner: AWS Provider: CloudFormation Version: \"1\" Configuration: ActionMode: CHANGE_SET_EXECUTE StackName: !Ref AWS::StackName ChangeSetName: !Sub ${AWS::StackName}-ChangeSet RoleArn: !GetAtt PipelineStackCloudFormationExecutionRole.Arn OutputArtifacts: - Name: !Sub ${AWS::StackName}ChangeSet RunOrder: 2 - !Ref AWS::NoValue ```", "keywords": ["provider", "change"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}