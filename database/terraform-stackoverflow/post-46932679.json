{"Id": "46932679", "PostTypeId": "1", "CreationDate": "2017-10-25T12:38:46.527", "Score": "3", "ViewCount": "3003", "Body": "<p>I am trying to integrate <strong>Terraform</strong> go-SDK with my go-code where I already have an terraform template file and I need to create the infrastructure by importing that file to the go-SDK. I am not able to find any related documents. I tried with the <strong><a href=\"https://godoc.org/github.com/hashicorp/terraform\" rel=\"nofollow noreferrer\">godoc</a></strong> for terraform. With a little understanding, I tried to implement a simple terraform template. My terraform template file is,</p>\n\n<pre><code>provider \"aws\" {\n  access_key = \"xxxx\"\n  secret_key = \"xxxx\"\n  region     = \"xxxx\"\n}\n\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-xxxx\"\n  instance_type = \"t2.micro\"\n\n # The name of our SSH keypair.\n  key_name      = \"xxxx\" \n\n # Security groupID\n  vpc_security_group_ids = [\"sg-xxxx\"]\n\n #Subnet ID\n  subnet_id = \"subnet-xxxx\"\n\n}\n</code></pre>\n\n<p>I tried via commandLine and I am able to bring up an instance with this file.\nI tried the same via my go-code. My understanding is that I need to create a <strong>Context</strong> in order to <strong>apply</strong> it. For creating a <strong>Context,</strong> I need a <strong>module.Tree.</strong> So I tried creating a <strong>module.Tree</strong> with <strong>config.Config.</strong> I imported the above <strong>terraform</strong> template file to my go-code to create a <strong>config</strong> and a <strong>tree</strong>. My go-code looks like,</p>\n\n<pre><code>package main\n\nimport (\n   \"github.com/hashicorp/terraform/config\"\n   \"github.com/hashicorp/terraform/config/module\"\n   \"fmt\"\n)\n\nfunc main() {\n   con, err := config.LoadFile(path to .tf file)\n   fmt.Println(\"Config: \", con)\n   fmt.Println(\"Error: \", err)\n\n   fmt.Println(\"Validate: \", con.Validate())\n\n   tree := module.NewTree(\"testTree\", con)\n   fmt.Println(\"Tree: \", tree.String())\n}\n</code></pre>\n\n<p>When I execute my code, I am not getting any errors for loading the config from file, or validating the same. But I am getting the output as \"tree not loaded\",</p>\n\n<pre><code>Output:\nConfig:  &amp;{ &lt;nil&gt; &lt;nil&gt; [] [0xc4201cd0c0] [0xc4201f03c0] [] [] [] []}\nError:  &lt;nil&gt;\nValidate:  &lt;nil&gt;\nTree:  testTree  not loaded\n</code></pre>\n\n<p>Can someone help me out to implement this? Thanks in advance.</p>\n", "OwnerUserId": "4286896", "LastActivityDate": "2020-12-24T08:10:45.300", "Title": "Integration with terraform go-SDK", "Tags": "<go><sdk><terraform>", "AnswerCount": "0", "CommentCount": "4", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "80813691", "PostId": "46932679", "Score": "2", "Text": "Terraform doesn't have a \"go-SDK\" per say, it really isn't designed to be used as a library. Automated systems using terraform execute the terraform binary.", "CreationDate": "2017-10-25T13:11:44.697", "UserId": "32880", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "80840023", "PostId": "46932679", "Score": "0", "Text": "Thanks for your response @JimB. So should I go with executing the terraform binary to perform operations? Will that be efficient enough?", "CreationDate": "2017-10-26T05:31:31.513", "UserId": "4286896", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Will that be efficient enough?", "keywords": ["efficient"]}]}, {"Id": "80870812", "PostId": "46932679", "Score": "0", "Text": "What do you mean by \"efficient enough\"? Starting a new process isn't inefficient, and terraform will need to start more subprocess anyway. If you want to see how things work, you need to start at the top in main and walk your way down. There's a lot that needs to happen. Also note that because this isn't intended as a library, there is no compatibility contract for any of these APIs, and they can and will change at any time.", "CreationDate": "2017-10-26T18:47:31.403", "UserId": "32880", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "What do you mean by \"efficient enough\"? ", "keywords": ["efficient"]}, {"source": "Text", "text": "Also note that because this isn't intended as a library, there is no compatibility contract for any of these APIs, and they can and will change at any time.", "keywords": ["change"]}]}, {"Id": "80870939", "PostId": "46932679", "Score": "0", "Text": "Yes that's right. I started automating it via binary. Thanks for your response.", "CreationDate": "2017-10-26T18:51:33.263", "UserId": "4286896", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "history": [{"Id": "159114041", "PostHistoryTypeId": "2", "PostId": "46932679", "RevisionGUID": "bb10195c-0f97-41b6-ad6f-1abd513a5db4", "CreationDate": "2017-10-25T12:38:46.527", "UserId": "4286896", "Text": "I am trying to integrate **Terraform** go-SDK with my go-code where I already have an terraform template file and I need to create the infrastructure by importing that file to the go-SDK. I am not able to find any related documents. I tried with the **[godoc][1]** for terraform. With a little understanding, I tried to implement a simple terraform template. My terraform template file is,\r\n\r\n    provider \"aws\" {\r\n      access_key = \"xxxx\"\r\n      secret_key = \"xxxx\"\r\n      region     = \"xxxx\"\r\n    }\r\n\r\n    resource \"aws_instance\" \"example\" {\r\n      ami           = \"ami-xxxx\"\r\n      instance_type = \"t2.micro\"\r\n\r\n     # The name of our SSH keypair.\r\n      key_name      = \"xxxx\" \r\n\r\n     # Security groupID\r\n      vpc_security_group_ids = [\"sg-xxxx\"]\r\n\r\n     #Subnet ID\r\n      subnet_id = \"subnet-xxxx\"\r\n  \r\n    }\r\n\r\nI tried via commandLine and I am able to bring up an instance with this file.\r\nI tried the same via my go-code. My understanding is that I need to create a **Context** in order to **apply** it. For creating a **Context,** I need a **module.Tree.** So I tried creating a **module.Tree** with **config.Config.** I imported the above **terraform** template file to my go-code to create a **config** and a **tree**. My go-code looks like,\r\n\r\n    package main\r\n\r\n    import (\r\n    \"github.com/hashicorp/terraform/config\"\r\n    \"github.com/hashicorp/terraform/config/module\"\r\n    \"fmt\"\r\n    )\r\n\r\n    func main() {\r\n       con, err := config.LoadFile(path to .tf file)\r\n    fmt.Println(\"Config: \", con)\r\n    fmt.Println(\"Error: \", err)\r\n\r\n       fmt.Println(\"Validate: \", con.Validate())\r\n\r\n       tree := module.NewTree(\"testTree\", con)\r\n    fmt.Println(\"Tree: \", tree.String())\r\n    }\r\n\r\nWhen I execute my code, I am not getting any errors for loading the config from file, or validating the same. But I am getting the output as \"tree not loaded\",\r\n\r\n    Output:\r\n    Config:  &{ <nil> <nil> [] [0xc4201cd0c0] [0xc4201f03c0] [] [] [] []}\r\n    Error:  <nil>\r\n    Validate:  <nil>\r\n    Tree:  testTree  not loaded\r\n\r\nCan someone help me out to implement this? Thanks in advance.\r\n\r\n  [1]: https://godoc.org/github.com/hashicorp/terraform", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "My terraform template file is, provider \"aws\" { access_key = \"xxxx\" secret_key = \"xxxx\" region = \"xxxx\" } resource \"aws_instance\" \"example\" { ami = \"ami-xxxx\" instance_type = \"t2.micro\" # The name of our SSH keypair. key_name = \"xxxx\" # Security groupID vpc_security_group_ids = [\"sg-xxxx\"] #Subnet ID subnet_id = \"subnet-xxxx\" } I tried via commandLine and I am able to bring up an instance with this file. ", "keywords": ["instance", "provider"]}, {"source": "Text", "text": "My go-code looks like, package main import ( \"github.com/hashicorp/terraform/config\" \"github.com/hashicorp/terraform/config/module\" \"fmt\" ) func main() { con, err := config.LoadFile(path to .tf file) fmt.Println(\"Config: \", con) fmt.Println(\"Error: \", err) fmt.Println(\"Validate: \", con.Validate()) tree := module.NewTree(\"testTree\", con) fmt.Println(\"Tree: \", tree.String()) } When I execute my code, I am not getting any errors for loading the config from file, or validating the same. ", "keywords": ["test"]}, {"source": "Text", "text": "But I am getting the output as \"tree not loaded\", Output: Config: &{ [] [0xc4201cd0c0] [0xc4201f03c0] [] [] [] []} Error: Validate: Tree: testTree not loaded Can someone help me out to implement this? ", "keywords": ["test"]}]}, {"Id": "159114042", "PostHistoryTypeId": "1", "PostId": "46932679", "RevisionGUID": "bb10195c-0f97-41b6-ad6f-1abd513a5db4", "CreationDate": "2017-10-25T12:38:46.527", "UserId": "4286896", "Text": "Integration with terraform go-SDK", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "159114043", "PostHistoryTypeId": "3", "PostId": "46932679", "RevisionGUID": "bb10195c-0f97-41b6-ad6f-1abd513a5db4", "CreationDate": "2017-10-25T12:38:46.527", "UserId": "4286896", "Text": "<go><sdk><terraform>", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "My terraform template file is, I tried via commandLine and I am able to bring up an instance with this file. ", "keywords": ["instance"]}]}