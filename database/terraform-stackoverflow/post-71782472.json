{"Id": "71782472", "PostTypeId": "1", "CreationDate": "2022-04-07T12:48:24.263", "Score": "1", "ViewCount": "1194", "Body": "<p>I am trying to find out best way to managing terraform states in a multi-account multi-product setup. Here is what I am currently thinking:</p>\n<p><a href=\"https://i.stack.imgur.com/VEBO1.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/VEBO1.png\" alt=\"enter image description here\" /></a></p>\n<p>Is it a good idea to centralize tfstates for all the environment to one S3 bucket in a Centralized account? Any other best practices for managing tf states in a multi-account setup?</p>\n", "OwnerUserId": "5564926", "LastActivityDate": "2022-04-09T15:15:47.597", "Title": "Managing terraform states in a multi-account AWS environment setup", "Tags": "<amazon-web-services><terraform><state>", "AnswerCount": "2", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "126853243", "PostId": "71782472", "Score": "0", "Text": "I've seen it in use in multiple places. I'd probably go with Terraform Cloud rather than have the management overhead (opinion, so not an answer).", "CreationDate": "2022-04-07T12:53:39.103", "UserId": "13400729", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "267681194", "PostHistoryTypeId": "2", "PostId": "71782472", "RevisionGUID": "090d3c06-007d-4deb-a2d6-47ae51ee6274", "CreationDate": "2022-04-07T12:48:24.263", "UserId": "5564926", "Text": "I am trying to find out best way to managing terraform states in a multi-account multi-product setup. Here is what I am currently thinking:\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/VEBO1.png\r\n\r\nIs it a good idea to centralize tfstates for all the environment to one S3 bucket in a Centralized account? Any other best practices for managing tf states in a multi-account setup?  ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "267681196", "PostHistoryTypeId": "1", "PostId": "71782472", "RevisionGUID": "090d3c06-007d-4deb-a2d6-47ae51ee6274", "CreationDate": "2022-04-07T12:48:24.263", "UserId": "5564926", "Text": "Managing terraform states in a multi-account AWS environment setup", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "267681197", "PostHistoryTypeId": "3", "PostId": "71782472", "RevisionGUID": "090d3c06-007d-4deb-a2d6-47ae51ee6274", "CreationDate": "2022-04-07T12:48:24.263", "UserId": "5564926", "Text": "<amazon-web-services><terraform><state>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "71785707", "PostTypeId": "2", "ParentId": "71782472", "CreationDate": "2022-04-07T16:21:01.273", "Score": "0", "Body": "<p>Okay. We did have this problem exactly (still have it to some extent) while managing state files of Terraform deployments across different regions, environments on Azure.</p>\n<p>Though in your case, it is S3 I assume it's analogous to Azure Storage Blobs.</p>\n<p><strong>I'll start with advantages.</strong></p>\n<ol>\n<li>Centralized location to store all state files</li>\n<li>Consumers don't need to use worry about how &amp; where to store state files (no additional configuration needed)</li>\n<li>Easy to rotate access keys periodically as one S3 bucket access keys are updated</li>\n<li>Versioning is guaranteed by S3 I think like azure storage accounts (helpful when statefile gets corrupted &amp; you didn't ask for it but I thought of mentioning :))</li>\n</ol>\n<p><strong>Disadvantages::</strong></p>\n<ol>\n<li>Unless your deployments are running from a central place, you will end up sharing of secret keys/creds to someone at some point</li>\n<li>For whatever reason, if a state file has an active lease on &amp; deployment didn't release it, you need to wait for the team owning that S3 bucket to break the lease. This needs to be done in the event of restoring post state file corruption</li>\n<li>Your consumers keep on asking for elevated privileges as more issues they hit  with state files which gives them unwanted access to other state files (security risk)</li>\n<li>If more accounts are added over a period of time, problems only get bigger &amp; frequent</li>\n<li>Cost calculation. Though it might sound trivial as state files are usually tiny but it depends on the user behavior. If your application manages its configuration with terraform, state files grow exponentially &amp; it's all versioned on storage accounts &amp; it's hard to compute costs per state file.</li>\n</ol>\n<p>Having faced these problems, we eventually decided to decentralize the state file storage &amp; delegated to respective teams. Here, I'm talking about managing state files of several hundreds.</p>\n<p><strong>The lesson we learnt is ::</strong></p>\n<ul>\n<li>If you don't have too many state files &amp; your team has complete\ncontrol over the automation, storing centrally won't be of a big problem</li>\n<li>If multiple teams store state files centrally, then you will have to\nkeep in mind of the problems I stated above</li>\n<li>We didn't worry much about the data loss as both S3 &amp; Azure Storage Accounts come with very high availability (99.99%) &amp; zone level redundancy was more than sufficient.</li>\n</ul>\n", "OwnerUserId": "3405980", "LastActivityDate": "2022-04-07T16:21:01.273", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "126866561", "PostId": "71785707", "Score": "0", "Text": "Thank you @harshavmb for the detailed answer. With decentralization, what sort of problems did you encounter - e.g. multiple teams using different approaches for managing files or backup strategies, administration overheads, etc.?\n\na) API keys would be managed by individual product teams \n\nb) The policy in the centralized s3 bucket would specify which paths the product accounts will be allowed to write. \n\nc) Access between the central account and product accounts will be managed using appropriate roles using short-term creds from the token service (no long-term creds will be required)", "CreationDate": "2022-04-08T00:38:33.303", "UserId": "5564926", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "b) The policy in the centralized s3 bucket would specify which paths the product accounts will be allowed to write. ", "keywords": ["policy"]}]}, {"Id": "126866566", "PostId": "71785707", "Score": "0", "Text": "d) Even though all the accounts will share the same bucket, each account will have its own state file (using appropriate s3 prefix). The locking of state file within a given account will be managed using account-specific dynamodb table. The number of accounts for which tfstate management is required will be in the hundreds.\n\ne) For new accounts we have to update the role for product accounts to write to central state account and update s3 bucket policy to specify the s3 prefix where the new account will be able to write.", "CreationDate": "2022-04-08T00:38:52.797", "UserId": "5564926", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For new accounts we have to update the role for product accounts to write to central state account and update s3 bucket policy to specify the s3 prefix where the new account will be able to write.", "keywords": ["policy"]}]}, {"Id": "126870110", "PostId": "71785707", "Score": "0", "Text": "As mentioned in the last sentence, backup/data loss is of no concern for us. CSPs were giving 99.99% availability which we felt is happy. \nRegarding decentralization, we made few changes to automation to support storage accounts by respective teams. Teams will provide their storage accounts to store their statefiles which aren't shared among others.", "CreationDate": "2022-04-08T06:46:40.570", "UserId": "3405980", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Regarding decentralization, we made few changes to automation to support storage accounts by respective teams. ", "keywords": ["storage", "change"]}, {"source": "Text", "text": "Teams will provide their storage accounts to store their statefiles which aren't shared among others.", "keywords": ["storage"]}]}], "history": [{"Id": "267698143", "PostHistoryTypeId": "2", "PostId": "71785707", "RevisionGUID": "574ed256-072a-4e5d-b430-ecd1d6f3eed5", "CreationDate": "2022-04-07T16:21:01.273", "UserId": "3405980", "Text": "Okay. We did have this problem exactly (still have it to some extent) while managing state files of Terraform deployments across different regions, environments on Azure. \r\n\r\nThough in your case, it is S3 I assume it's analogous to Azure Storage Blobs. \r\n\r\n**I'll start with advantages.** \r\n\r\n 1. Centralized location to store all state files\r\n 2. Consumers don't need to use worry about how & where to store state files (no additional configuration needed)\r\n 3. Easy to rotate access keys periodically as one S3 bucket access keys are updated\r\n 4. Versioning is guaranteed by S3 I think like azure storage accounts (helpful when statefile gets corrupted & you didn't ask for it but I thought of mentioning :))\r\n\r\n**Disadvantages::**\r\n\r\n 1. Unless your deployments are running from a central place, you will end up sharing of secret keys/creds to someone at some point\r\n 2. For whatever reason, if a state file has an active lease on & deployment didn't release it, you need to wait for the team owning that S3 bucket to break the lease. This needs to be done in the event of restoring post state file corruption\r\n 3. Your consumers keep on asking for elevated privileges as more issues they hit  with state files which gives them unwanted access to other state files (security risk)\r\n 4. If more accounts are added over a period of time, problems only get bigger & frequent\r\n 5. Cost calculation. Though it might sound trivial as state files are usually tiny but it depends on the user behavior. If your application manages its configuration with terraform, state files grow exponentially & it's all versioned on storage accounts & it's hard to compute costs per state file. \r\n\r\nHaving faced these problems, we eventually decided to decentralize the state file storage & delegated to respective teams. Here, I'm talking about managing state files of several hundreds. \r\n\r\n**The lesson we learnt is ::** \r\n\r\n - If you don't have too many state files & your team has complete\r\n   control over the automation, storing centrally won't be of a big problem\r\n - If multiple teams store state files centrally, then you will have to\r\n   keep in mind of the problems I stated above\r\n - We didn't worry much about the data loss as both S3 & Azure Storage Accounts come with very high availability (99.99%) & zone level redundancy was more than sufficient. \r\n\r\n ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Though in your case, it is S3 I assume it's analogous to Azure Storage Blobs. ", "keywords": ["storage"]}, {"source": "Text", "text": "1. Centralized location to store all state files 2. Consumers don't need to use worry about how & where to store state files (no additional configuration needed) 3. Easy to rotate access keys periodically as one S3 bucket access keys are updated 4. Versioning is guaranteed by S3 I think like azure storage accounts (helpful when statefile gets corrupted & you didn't ask for it but I thought of mentioning :)) **Disadvantages::** ", "keywords": ["storage"]}, {"source": "Text", "text": "Cost calculation. ", "keywords": ["cost"]}, {"source": "Text", "text": "If your application manages its configuration with terraform, state files grow exponentially & it's all versioned on storage accounts & it's hard to compute costs per state file. ", "keywords": ["storage"]}, {"source": "Text", "text": "Having faced these problems, we eventually decided to decentralize the state file storage & delegated to respective teams. ", "keywords": ["storage"]}, {"source": "Text", "text": "**The lesson we learnt is ::** - If you don't have too many state files & your team has complete control over the automation, storing centrally won't be of a big problem - If multiple teams store state files centrally, then you will have to keep in mind of the problems I stated above - We didn't worry much about the data loss as both S3 & Azure Storage Accounts come with very high availability (99.99%) & zone level redundancy was more than sufficient.", "keywords": ["storage"]}]}], "filtered-sentences": [{"source": "Body", "text": "Though in your case, it is S3 I assume it's analogous to Azure Storage Blobs. ", "keywords": ["storage"]}, {"source": "Body", "text": "Easy to rotate access keys periodically as one S3 bucket access keys are updated Versioning is guaranteed by S3 I think like azure storage accounts (helpful when statefile gets corrupted & you didn't ask for it but I thought of mentioning :)) Disadvantages:: Unless your deployments are running from a central place, you will end up sharing of secret keys/creds to someone at some point For whatever reason, if a state file has an active lease on & deployment didn't release it, you need to wait for the team owning that S3 bucket to break the lease. ", "keywords": ["storage"]}, {"source": "Body", "text": "If more accounts are added over a period of time, problems only get bigger & frequent Cost calculation. ", "keywords": ["cost"]}, {"source": "Body", "text": "If your application manages its configuration with terraform, state files grow exponentially & it's all versioned on storage accounts & it's hard to compute costs per state file. ", "keywords": ["storage"]}, {"source": "Body", "text": "Having faced these problems, we eventually decided to decentralize the state file storage & delegated to respective teams. ", "keywords": ["storage"]}, {"source": "Body", "text": "If multiple teams store state files centrally, then you will have to keep in mind of the problems I stated above We didn't worry much about the data loss as both S3 & Azure Storage Accounts come with very high availability (99.99%) & zone level redundancy was more than sufficient.", "keywords": ["storage"]}]}, {"Id": "71809326", "PostTypeId": "2", "ParentId": "71782472", "CreationDate": "2022-04-09T15:15:47.597", "Score": "2", "Body": "<p>What I ended up doing was to create a centralized s3 bucket  for keeping track of states of resources deployed in other accounts. Here is an example of permission I have configured for the s3 bucket:</p>\n<pre><code>{\n  &quot;Version&quot;:&quot;2012-10-17&quot;,\n  &quot;Statement&quot;:[\n     {\n        &quot;Action&quot;:[\n           &quot;s3:ListBucket&quot;\n        ],\n        &quot;Effect&quot;:&quot;Allow&quot;,\n        &quot;Resource&quot;:&quot;arn:aws:s3:::global-tfstate-bucket&quot;,\n        &quot;Principal&quot;:&quot;*&quot;,\n        &quot;Condition&quot;:{\n           &quot;StringEquals&quot;:{\n              &quot;aws:PrincipalOrgID&quot;:&quot;o-3pp2fyy75f&quot;\n           }\n        }\n     },\n     {\n        &quot;Effect&quot;:&quot;Allow&quot;,\n        &quot;Principal&quot;:{\n          &quot;AWS&quot;:[\n            &quot;arn:aws:iam::111111739111:user/john&quot;\n         ]\n        },\n        &quot;Action&quot;:[\n           &quot;s3:GetObject&quot;,\n           &quot;s3:PutObject&quot;,\n           &quot;s3:DeleteObject&quot;           \n        ],\n        &quot;Resource&quot;:&quot;arn:aws:s3:::global-tfstate-bucket/111111739111/*&quot;\n     }\n  ]\n}\n</code></pre>\n<p>The above bucket policy allows users within our internal org (o-3pp2fyy75f) for listing s3 buckets (required by terraform). The second statement allows user john from account: 111111739111 permission to write to s3 bucket with prefix starting in global-tfstate-bucket/111111739111. Here is how I have configured terraform backend:</p>\n<pre><code>terraform {\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 3.74&quot;\n    }\n  }\n  backend &quot;s3&quot; {\n    region         = &quot;us-east-1&quot;\n    profile        = &quot;user-john-from-account-111111739111&quot; \n    bucket         = &quot;global-tfstate-bucket&quot;\n    key            = &quot;111111739111/terraform.tfstate&quot;\n  }\n}\n</code></pre>\n", "OwnerUserId": "5564926", "LastActivityDate": "2022-04-09T15:15:47.597", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "267832207", "PostHistoryTypeId": "2", "PostId": "71809326", "RevisionGUID": "5cf27acd-9422-46ff-b069-b412b818779d", "CreationDate": "2022-04-09T15:15:47.597", "UserId": "5564926", "Text": "What I ended up doing was to create a centralized s3 bucket  for keeping track of states of resources deployed in other accounts. Here is an example of permission I have configured for the s3 bucket:\r\n\r\n```\r\n{\r\n  \"Version\":\"2012-10-17\",\r\n  \"Statement\":[\r\n     {\r\n        \"Action\":[\r\n           \"s3:ListBucket\"\r\n        ],\r\n        \"Effect\":\"Allow\",\r\n        \"Resource\":\"arn:aws:s3:::global-tfstate-bucket\",\r\n        \"Principal\":\"*\",\r\n        \"Condition\":{\r\n           \"StringEquals\":{\r\n              \"aws:PrincipalOrgID\":\"o-3pp2fyy75f\"\r\n           }\r\n        }\r\n     },\r\n     {\r\n        \"Effect\":\"Allow\",\r\n        \"Principal\":{\r\n          \"AWS\":[\r\n            \"arn:aws:iam::111111739111:user/john\"\r\n         ]\r\n        },\r\n        \"Action\":[\r\n           \"s3:GetObject\",\r\n           \"s3:PutObject\",\r\n           \"s3:DeleteObject\"           \r\n        ],\r\n        \"Resource\":\"arn:aws:s3:::global-tfstate-bucket/111111739111/*\"\r\n     }\r\n  ]\r\n}\r\n```\r\n\r\nThe above bucket policy allows users within our internal org (o-3pp2fyy75f) for listing s3 buckets (required by terraform). The second statement allows user john from account: 111111739111 permission to write to s3 bucket with prefix starting in global-tfstate-bucket/111111739111. Here is how I have configured terraform backend:\r\n\r\n```\r\nterraform {\r\n  required_providers {\r\n    aws = {\r\n      source  = \"hashicorp/aws\"\r\n      version = \"~> 3.74\"\r\n    }\r\n  }\r\n  backend \"s3\" {\r\n    region         = \"us-east-1\"\r\n    profile        = \"user-john-from-account-111111739111\" \r\n    bucket         = \"global-tfstate-bucket\"\r\n    key            = \"111111739111/terraform.tfstate\"\r\n  }\r\n}\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The above bucket policy allows users within our internal org (o-3pp2fyy75f) for listing s3 buckets (required by terraform). ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "The above bucket policy allows users within our internal org (o-3pp2fyy75f) for listing s3 buckets (required by terraform). ", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": []}