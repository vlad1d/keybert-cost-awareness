{"Id": "59055395", "PostTypeId": "1", "AcceptedAnswerId": "59056580", "CreationDate": "2019-11-26T16:28:39.503", "Score": "35", "ViewCount": "22341", "Body": "<p>I am very new to GCP with terraform and I want to deploy all my modules using centralized tools.</p>\n\n<p>Is there any way to remove the step of enabling google API's every time so that deployment is not interrupted?</p>\n", "OwnerUserId": "12417145", "LastEditorUserId": "3399890", "LastEditDate": "2019-11-26T16:33:22.200", "LastActivityDate": "2023-06-14T03:19:05.587", "Title": "Can I automatically enable APIs when using GCP cloud with terraform?", "Tags": "<google-cloud-platform><terraform><terraform-provider-gcp>", "AnswerCount": "6", "CommentCount": "4", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "104350635", "PostId": "59055395", "Score": "1", "Text": "Can you add more details? Why do you need to enable APIs everytime? you should need to do once for a project", "CreationDate": "2019-11-26T16:36:44.247", "UserId": "1158351", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "104351454", "PostId": "59055395", "Score": "3", "Text": "I think I see the purpose of the question.  Imagine I create a brand new project and wish to populate that project with assets.  I might want to use Terraform.  However before my application can actually run, I may need to enable some APIs and it would be great if the Terraform script could do that too as I would consider that \"infrastructure setup\".", "CreationDate": "2019-11-26T17:01:11.483", "UserId": "1738915", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "104352387", "PostId": "59055395", "Score": "0", "Text": "hello @pradeep \nMy question is that I am using Jenkins as a centralized tool to deploy my modules in the GCP so during my deployment I have to enable the required APIs due to this it interrupts my process of deployment so there is any bypass to this.", "CreationDate": "2019-11-26T17:32:07.803", "UserId": "12417145", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "104353919", "PostId": "59055395", "Score": "1", "Text": "You can enable all the required API before starting application deployment using Terraform or gcloud commands. API can be enabled at project creation time or anytime after that.", "CreationDate": "2019-11-26T18:25:26.317", "UserId": "1158351", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "210026094", "PostHistoryTypeId": "2", "PostId": "59055395", "RevisionGUID": "d549439e-18cc-4983-85ac-5609670151c2", "CreationDate": "2019-11-26T16:28:39.503", "UserId": "12417145", "Text": "I am very new to GCP with terraform and I want to deploy all my modules using centralize tools so Is there any way to remove the step of enabling google API's every time so that deployment is not get interrupted. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "210026095", "PostHistoryTypeId": "1", "PostId": "59055395", "RevisionGUID": "d549439e-18cc-4983-85ac-5609670151c2", "CreationDate": "2019-11-26T16:28:39.503", "UserId": "12417145", "Text": "GCP cloud with terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "210026096", "PostHistoryTypeId": "3", "PostId": "59055395", "RevisionGUID": "d549439e-18cc-4983-85ac-5609670151c2", "CreationDate": "2019-11-26T16:28:39.503", "UserId": "12417145", "Text": "<google-cloud-platform><terraform><terraform-provider-gcp>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "210026412", "PostHistoryTypeId": "5", "PostId": "59055395", "RevisionGUID": "4655f8b1-3c78-4c51-97d5-349b043a4b02", "CreationDate": "2019-11-26T16:33:22.200", "UserId": "3399890", "Comment": "better title, clarify question", "Text": "I am very new to GCP with terraform and I want to deploy all my modules using centralized tools.\r\n\r\nIs there any way to remove the step of enabling google API's every time so that deployment is not interrupted?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "210026413", "PostHistoryTypeId": "4", "PostId": "59055395", "RevisionGUID": "4655f8b1-3c78-4c51-97d5-349b043a4b02", "CreationDate": "2019-11-26T16:33:22.200", "UserId": "3399890", "Comment": "better title, clarify question", "Text": "Can I automatically enable APIs when using GCP cloud with terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "59057295", "PostTypeId": "2", "ParentId": "59055395", "CreationDate": "2019-11-26T18:27:02.997", "Score": "13", "Body": "<p>Yes , you can use <code>google_project_service</code> resource to enable one API at a time. You can use <code>count</code> or other loop methods to enable multiple APIs. You would need project editor/owner role to do this.</p>\n<pre><code># Enable services in newly created GCP Project.\nresource &quot;google_project_service&quot; &quot;gcp_services&quot; {\n  count   = length(var.gcp_service_list)\n  project = google_project.demo_project.project_id\n  service = var.gcp_service_list[count.index]\n\n  disable_dependent_services = true\n}\n</code></pre>\n<p>You can find the complete example <a href=\"https://github.com/CloudNativeTech/gdg-terraform-gcp-workshop/blob/master/03-project/project.tf#L23\" rel=\"noreferrer\">here.</a></p>\n", "OwnerUserId": "1158351", "LastEditorUserId": "143880", "LastEditDate": "2020-10-28T21:29:37.883", "LastActivityDate": "2020-10-28T21:29:37.883", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "210033817", "PostHistoryTypeId": "2", "PostId": "59057295", "RevisionGUID": "f2a19b04-fbcb-4afd-b847-dbacab42a08b", "CreationDate": "2019-11-26T18:27:02.997", "UserId": "1158351", "Text": "Yes , you can use `google_project_service` resource to enable one API at a time. You can use count or other loop method to enable multiple APIs. You would need project editor/owner role to do this.\n\nYou can find the example here https://github.com/CloudNativeTech/gdg-terraform-gcp-workshop/blob/master/03-project/project.tf#L23\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "228560983", "PostHistoryTypeId": "5", "PostId": "59057295", "RevisionGUID": "71aee8ae-8f50-41d2-ac7d-17071e083d72", "CreationDate": "2020-08-11T15:38:13.230", "UserId": "2650622", "Comment": "add code example from link", "Text": "Yes , you can use `google_project_service` resource to enable one API at a time. You can use count or other loop method to enable multiple APIs. You would need project editor/owner role to do this.\r\n\r\n```\r\n# Enable services in newly created GCP Project.\r\nresource \"google_project_service\" \"gcp_services\" {\r\n  count   = length(var.gcp_service_list)\r\n  project = google_project.demo_project.project_id\r\n  service = var.gcp_service_list[count.index]\r\n\r\n  disable_dependent_services = true\r\n}\r\n```\r\n\r\nYou can find the complete example [here.](https://github.com/CloudNativeTech/gdg-terraform-gcp-workshop/blob/master/03-project/project.tf#L23)\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "233799813", "PostHistoryTypeId": "5", "PostId": "59057295", "RevisionGUID": "07c4aee0-9bd9-4b41-bab7-0922f95288ae", "CreationDate": "2020-10-28T21:29:37.883", "UserId": "143880", "Comment": "formatting", "Text": "Yes , you can use `google_project_service` resource to enable one API at a time. You can use `count` or other loop methods to enable multiple APIs. You would need project editor/owner role to do this.\r\n\r\n```\r\n# Enable services in newly created GCP Project.\r\nresource \"google_project_service\" \"gcp_services\" {\r\n  count   = length(var.gcp_service_list)\r\n  project = google_project.demo_project.project_id\r\n  service = var.gcp_service_list[count.index]\r\n\r\n  disable_dependent_services = true\r\n}\r\n```\r\n\r\nYou can find the complete example [here.](https://github.com/CloudNativeTech/gdg-terraform-gcp-workshop/blob/master/03-project/project.tf#L23)\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "76469864", "PostTypeId": "2", "ParentId": "59055395", "CreationDate": "2023-06-14T02:59:53.360", "Score": "0", "Body": "<p>All the answers are excellent; however, I'd like to add a new scenario not yet covered.</p>\n<p>I tried all the answers, e.g.,</p>\n<pre><code>resource &quot;google_project_service&quot; &quot;x&quot; {\n  project = ...\n  service = &quot;compute.googleapis.com&quot;\n}\n</code></pre>\n<p>but the <code>Compute Engine default service account</code> ends up in the <code>disabled</code> state:</p>\n<p><a href=\"https://i.stack.imgur.com/0psNV.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/0psNV.png\" alt=\"enter image description here\" /></a></p>\n<p>After a lot of investigation, I found the culprit to be the way I created the project. I used the following open source module to create the project:</p>\n<pre><code>module &quot;my_project&quot; {\n  source  = &quot;terraform-google-modules/project-factory/google&quot;\n  ...\n}\n</code></pre>\n<p>The open source module's underlying source code contains <a href=\"https://github.com/terraform-google-modules/terraform-google-project-factory/blob/e133faf3b31fb8ba701df103700e66a80d8b6f92/modules/core_project_factory/main.tf#L134-L136\" rel=\"nofollow noreferrer\">this snippet</a>:</p>\n<pre><code>resource &quot;google_project_default_service_accounts&quot; &quot;default_service_accounts&quot; {\n  count          = upper(var.default_service_account) == &quot;KEEP&quot; ? 0 : 1\n  action         = upper(var.default_service_account)\n  ...\n</code></pre>\n<p>where <a href=\"https://github.com/terraform-google-modules/terraform-google-project-factory/blob/e133faf3b31fb8ba701df103700e66a80d8b6f92/modules/core_project_factory/variables.tf#L208-L210\" rel=\"nofollow noreferrer\">the var's default value is this</a>:</p>\n<pre><code>variable &quot;default_service_account&quot; {\n  description = &quot;Project default service account setting: can be one of `delete`, `deprivilege`, `disable`, or `keep`.&quot;\n  default     = &quot;disable&quot;\n</code></pre>\n<p>The combined result is equivalent to the sample code at <a href=\"https://registry.terraform.io/providers/hashicorp/google-beta/latest/docs/resources/google_project_default_service_accounts#example-usage\" rel=\"nofollow noreferrer\">google_project_default_service_accounts</a>:</p>\n<pre><code>resource &quot;google_project_default_service_accounts&quot; &quot;my_project&quot; {\n  project = &quot;my-project-id&quot;\n  action = &quot;DISABLE&quot;\n  ...\n}\n</code></pre>\n<p>Therefore, the solution is:</p>\n<pre><code>module &quot;my_project&quot; {\n  source  = &quot;terraform-google-modules/project-factory/google&quot;\n  default_service_account = &quot;KEEP&quot;  # &lt;&lt;&lt;&lt;====== solution\n  ...\n}\n\n</code></pre>\n<p>Caveat: The security best practice is to disable the default SAs and create your own custom SAs, I suppose. So, my solution above is to solve a mystery, not to be considered the security best practice.</p>\n", "OwnerUserId": "13676217", "LastEditorUserId": "13676217", "LastEditDate": "2023-06-14T03:19:05.587", "LastActivityDate": "2023-06-14T03:19:05.587", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "135188173", "PostId": "76469864", "Score": "0", "Text": "Hi, this is an amazing post. I very much like detailed work. Kudos!", "CreationDate": "2023-07-13T11:42:53.963", "UserId": "1686903", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "294124204", "PostHistoryTypeId": "2", "PostId": "76469864", "RevisionGUID": "5c10c866-2447-48ea-afd7-796e0d013d43", "CreationDate": "2023-06-14T02:59:53.360", "UserId": "13676217", "Text": "All the answers are excellent; however, I'd like to add a new scenario not yet covered.\r\n\r\nI tried all the answers, e.g.,\r\n\r\n```terraform\r\nresource \"google_project_service\" \"x\" {\r\n  project = ...\r\n  service = \"compute.googleapis.com\"\r\n}\r\n```\r\n\r\nbut the `Compute Engine default service account` ends up in the `disabled` state. After a lot of investigation, I found the culprit to be the way I created the project. I used the following module to create the project:\r\n\r\n```terraform\r\nmodule \"my_project\" {\r\n  source  = \"terraform-google-modules/project-factory/google\"\r\n  ...\r\n}\r\n```\r\n\r\nThe module's underlying source code contains [this snippet][1]:\r\n```terraform\r\nresource \"google_project_default_service_accounts\" \"default_service_accounts\" {\r\n  count          = upper(var.default_service_account) == \"KEEP\" ? 0 : 1\r\n  action         = upper(var.default_service_account)\r\n  ...\r\n```\r\n\r\nwhere [the var's default value is this][2]:\r\n```terraform\r\nvariable \"default_service_account\" {\r\n  description = \"Project default service account setting: can be one of `delete`, `deprivilege`, `disable`, or `keep`.\"\r\n  default     = \"disable\"\r\n```\r\n\r\nThe combined result is equivalent to the sample code at [google_project_default_service_accounts][3]:\r\n```terraform\r\nresource \"google_project_default_service_accounts\" \"my_project\" {\r\n  project = \"my-project-id\"\r\n  action = \"DISABLE\"\r\n  ...\r\n}\r\n```\r\n\r\nTherefore, the solution is:\r\n```terraform\r\nmodule \"my_project\" {\r\n  source  = \"terraform-google-modules/project-factory/google\"\r\n  default_service_account = \"KEEP\"  # <<<<====== solution\r\n  ...\r\n}\r\n\r\n```\r\n\r\n  [1]: https://github.com/terraform-google-modules/terraform-google-project-factory/blob/e133faf3b31fb8ba701df103700e66a80d8b6f92/modules/core_project_factory/main.tf#L134-L136\r\n  [2]: https://github.com/terraform-google-modules/terraform-google-project-factory/blob/e133faf3b31fb8ba701df103700e66a80d8b6f92/modules/core_project_factory/variables.tf#L208-L210\r\n  [3]: https://registry.terraform.io/providers/hashicorp/google-beta/latest/docs/resources/google_project_default_service_accounts#example-usage", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "294124614", "PostHistoryTypeId": "5", "PostId": "76469864", "RevisionGUID": "bd1ba566-7a75-4204-8762-6d1934bd43cb", "CreationDate": "2023-06-14T03:08:29.410", "UserId": "13676217", "Comment": "added 207 characters in body", "Text": "All the answers are excellent; however, I'd like to add a new scenario not yet covered.\r\n\r\nI tried all the answers, e.g.,\r\n\r\n```terraform\r\nresource \"google_project_service\" \"x\" {\r\n  project = ...\r\n  service = \"compute.googleapis.com\"\r\n}\r\n```\r\n\r\nbut the `Compute Engine default service account` ends up in the `disabled` state. After a lot of investigation, I found the culprit to be the way I created the project. I used the following module to create the project:\r\n\r\n```terraform\r\nmodule \"my_project\" {\r\n  source  = \"terraform-google-modules/project-factory/google\"\r\n  ...\r\n}\r\n```\r\n\r\nThe module's underlying source code contains [this snippet][1]:\r\n```terraform\r\nresource \"google_project_default_service_accounts\" \"default_service_accounts\" {\r\n  count          = upper(var.default_service_account) == \"KEEP\" ? 0 : 1\r\n  action         = upper(var.default_service_account)\r\n  ...\r\n```\r\n\r\nwhere [the var's default value is this][2]:\r\n```terraform\r\nvariable \"default_service_account\" {\r\n  description = \"Project default service account setting: can be one of `delete`, `deprivilege`, `disable`, or `keep`.\"\r\n  default     = \"disable\"\r\n```\r\n\r\nThe combined result is equivalent to the sample code at [google_project_default_service_accounts][3]:\r\n```terraform\r\nresource \"google_project_default_service_accounts\" \"my_project\" {\r\n  project = \"my-project-id\"\r\n  action = \"DISABLE\"\r\n  ...\r\n}\r\n```\r\n\r\nTherefore, the solution is:\r\n```terraform\r\nmodule \"my_project\" {\r\n  source  = \"terraform-google-modules/project-factory/google\"\r\n  default_service_account = \"KEEP\"  # <<<<====== solution\r\n  ...\r\n}\r\n\r\n```\r\n\r\nCaveat: The security best practice is to disable the default SAs and create your own custom SAs, I suppose. So, my solution above is to solve a mystery, not to be considered the security best practice.\r\n\r\n\r\n  [1]: https://github.com/terraform-google-modules/terraform-google-project-factory/blob/e133faf3b31fb8ba701df103700e66a80d8b6f92/modules/core_project_factory/main.tf#L134-L136\r\n  [2]: https://github.com/terraform-google-modules/terraform-google-project-factory/blob/e133faf3b31fb8ba701df103700e66a80d8b6f92/modules/core_project_factory/variables.tf#L208-L210\r\n  [3]: https://registry.terraform.io/providers/hashicorp/google-beta/latest/docs/resources/google_project_default_service_accounts#example-usage", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "294124838", "PostHistoryTypeId": "5", "PostId": "76469864", "RevisionGUID": "351b4ecd-694d-4d3c-9cb5-de911d3f0ab8", "CreationDate": "2023-06-14T03:19:05.587", "UserId": "13676217", "Comment": "added 90 characters in body", "Text": "All the answers are excellent; however, I'd like to add a new scenario not yet covered.\r\n\r\nI tried all the answers, e.g.,\r\n\r\n```terraform\r\nresource \"google_project_service\" \"x\" {\r\n  project = ...\r\n  service = \"compute.googleapis.com\"\r\n}\r\n```\r\n\r\nbut the `Compute Engine default service account` ends up in the `disabled` state:\r\n\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\nAfter a lot of investigation, I found the culprit to be the way I created the project. I used the following open source module to create the project:\r\n\r\n```terraform\r\nmodule \"my_project\" {\r\n  source  = \"terraform-google-modules/project-factory/google\"\r\n  ...\r\n}\r\n```\r\n\r\nThe open source module's underlying source code contains [this snippet][2]:\r\n```terraform\r\nresource \"google_project_default_service_accounts\" \"default_service_accounts\" {\r\n  count          = upper(var.default_service_account) == \"KEEP\" ? 0 : 1\r\n  action         = upper(var.default_service_account)\r\n  ...\r\n```\r\n\r\nwhere [the var's default value is this][3]:\r\n```terraform\r\nvariable \"default_service_account\" {\r\n  description = \"Project default service account setting: can be one of `delete`, `deprivilege`, `disable`, or `keep`.\"\r\n  default     = \"disable\"\r\n```\r\n\r\nThe combined result is equivalent to the sample code at [google_project_default_service_accounts][4]:\r\n```terraform\r\nresource \"google_project_default_service_accounts\" \"my_project\" {\r\n  project = \"my-project-id\"\r\n  action = \"DISABLE\"\r\n  ...\r\n}\r\n```\r\n\r\nTherefore, the solution is:\r\n```terraform\r\nmodule \"my_project\" {\r\n  source  = \"terraform-google-modules/project-factory/google\"\r\n  default_service_account = \"KEEP\"  # <<<<====== solution\r\n  ...\r\n}\r\n\r\n```\r\n\r\nCaveat: The security best practice is to disable the default SAs and create your own custom SAs, I suppose. So, my solution above is to solve a mystery, not to be considered the security best practice.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/0psNV.png\r\n  [2]: https://github.com/terraform-google-modules/terraform-google-project-factory/blob/e133faf3b31fb8ba701df103700e66a80d8b6f92/modules/core_project_factory/main.tf#L134-L136\r\n  [3]: https://github.com/terraform-google-modules/terraform-google-project-factory/blob/e133faf3b31fb8ba701df103700e66a80d8b6f92/modules/core_project_factory/variables.tf#L208-L210\r\n  [4]: https://registry.terraform.io/providers/hashicorp/google-beta/latest/docs/resources/google_project_default_service_accounts#example-usage", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "72306829", "PostTypeId": "2", "ParentId": "59055395", "CreationDate": "2022-05-19T14:57:38.617", "Score": "4", "Body": "<p>2022 - Sharing my personal experience of enabling services using code</p>\n<h6>Why you should not enable services using Terraform</h6>\n<ol>\n<li><p>Usually a <strong>cost</strong> is associated with enabling services and Billing account have to be linked to the services at time. Example, you want to create a static public ip or setup a Cloud CDN.</p>\n</li>\n<li><p>Enabling services using code is possible as suggested in <a href=\"https://cloud.google.com/service-usage/docs/enable-disable#gcloud\" rel=\"nofollow noreferrer\">https://cloud.google.com/service-usage/docs/enable-disable#gcloud</a> and <a href=\"https://stackoverflow.com/a/72094901/1686903\">https://stackoverflow.com/a/72094901/1686903</a> (Using Terraform null resource running gcloud command) but the additional challenge is, <strong>enabling a service does not happen in second or minute</strong>.</p>\n<p>Adding wait/sleep or dependency flow helped me for a while but, in the long run it <strong>complicated my code</strong>.</p>\n</li>\n<li><p><strong>Cross dependency issues</strong>. Using Terraform code when I enabled services for Compute, then other developer were able to create resources. After sometime, when I no longer need and tried to <code>terraform destroy</code> I got several dependency issue.</p>\n</li>\n</ol>\n<blockquote>\n<p>TL;DR Enabling services is usually one-time task just like creating a billing account. As per my experience, I recommend not to automate such important things.</p>\n</blockquote>\n<p>Below is added on April 2023</p>\n<ol start=\"4\">\n<li><p><strong>Distribute your TF Code</strong>. As suggested in by @FreshMike &amp; @Juarez_Rudsatz, distribute your TF code into multiple folders.</p>\n<p>You can do this by product wise(Compute/Networking/IAM/ServiceAccounts/..) or module wise(Permissions/Admin/Module-A/Product-A/Product-B/..) or others depending on what suits your requirement.</p>\n<p>In my team project, we used a separate folder call <code>test/setup</code> and used this module <a href=\"https://registry.terraform.io/modules/terraform-google-modules/project-factory/google/latest/submodules/project_services\" rel=\"nofollow noreferrer\">https://registry.terraform.io/modules/terraform-google-modules/project-factory/google/latest/submodules/project_services</a> to enable multiple APIs in one go.</p>\n</li>\n</ol>\n", "OwnerUserId": "1686903", "LastEditorUserId": "1686903", "LastEditDate": "2023-04-14T15:40:35.123", "LastActivityDate": "2023-04-14T15:40:35.123", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "130787316", "PostId": "72306829", "Score": "1", "Text": "That's why I would suggest to split into multiple TF runs. One for settings up APIs, Network, External IPs, and a second for users, compute resources, LBs, the whole shebang. Now if you need to destroy you can destroy without affecting the one time stuff.", "CreationDate": "2022-10-14T21:48:45.883", "UserId": "4913747", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130823053", "PostId": "72306829", "Score": "0", "Text": "Thanks for your comment. I'm just curious, did it work for you? Did mean having multiple independent terraform folders right?", "CreationDate": "2022-10-17T09:52:53.507", "UserId": "1686903", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "133879346", "PostId": "72306829", "Score": "1", "Text": "It works well if used with [multiple terraform states](https://developer.hashicorp.com/terraform/language/state/remote). As mentioned above, it's interesting to split into multiple folders/modules/states and segregate things ilike:\n- IAM roles/users/groups\n- IAM role/permission assignments\n- Networking\n- Storage\n- Database\n- Instance/Compute\n- App\n- Services", "CreationDate": "2023-03-31T19:24:05.323", "UserId": "993390", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As mentioned above, it's interesting to split into multiple folders/modules/states and segregate things ilike: - IAM roles/users/groups - IAM role/permission assignments - Networking - Storage - Database - Instance/Compute - App - Services", "keywords": ["networking", "instance", "storage"]}]}, {"Id": "135170966", "PostId": "72306829", "Score": "0", "Text": "How do you handle referencing resources which are in another folder? Do you just hardcode the values?\n\nAlso, doesn't this introduce a required order of deployment - i.e. deploy this folder first, then that, etc.?", "CreationDate": "2023-07-12T08:24:13.777", "UserId": "13121493", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "270509784", "PostHistoryTypeId": "2", "PostId": "72306829", "RevisionGUID": "1af0f3f4-4df9-46c3-98f5-9c3d5066184f", "CreationDate": "2022-05-19T14:57:38.617", "UserId": "1686903", "Text": "2022 - Sharing my personal experience of enabling services using code\r\n\r\n###### Why you should not enable services using Terraform\r\n1. Usually a **cost** is associated with enabling services and Billing account have to be linked to the services at time. Example, you want to create a static public ip or setup a Cloud CDN.\r\n\r\n2. Enabling services using code is possible as suggested in https://cloud.google.com/service-usage/docs/enable-disable#gcloud and https://stackoverflow.com/a/72094901/1686903 (Using Terraform null resource running gcloud command) but the additional challenge is, **enabling a service does not happen in second or minute**.\r\n\r\n    Adding wait/sleep or dependency flow helped me for a while but, in the long run it **complicated my code**.\r\n\r\n\r\n3. **Cross dependency issues**. Using Terraform code when I enabled services for Compute, then other developer were able to create resources. After sometime, when I no longer need and tried to `terraform destroy` I got several dependency issue.\r\n\r\n> TL;DR Enabling services is usually one-time task just like creating a billing account. As per my experience, I recommend not to automate such important things.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Usually a **cost** is associated with enabling services and Billing account have to be linked to the services at time. ", "keywords": ["cost"]}, {"source": "Text", "text": "> TL;DR Enabling services is usually one-time task just like creating a billing account. ", "keywords": ["bill"]}]}, {"Id": "270509786", "PostHistoryTypeId": "33", "PostId": "72306829", "RevisionGUID": "1ec0891a-f5a3-4546-8f0c-701db062166f", "CreationDate": "2022-05-19T14:57:38.617", "UserId": "-1002", "Comment": "275023", "filtered-sentences": []}, {"Id": "291376526", "PostHistoryTypeId": "5", "PostId": "72306829", "RevisionGUID": "0543ce65-48ca-41df-90e6-3985b7e0065f", "CreationDate": "2023-04-14T15:40:35.123", "UserId": "1686903", "Comment": "Added new option based on suggestions.", "Text": "2022 - Sharing my personal experience of enabling services using code\r\n\r\n###### Why you should not enable services using Terraform\r\n1. Usually a **cost** is associated with enabling services and Billing account have to be linked to the services at time. Example, you want to create a static public ip or setup a Cloud CDN.\r\n\r\n2. Enabling services using code is possible as suggested in https://cloud.google.com/service-usage/docs/enable-disable#gcloud and https://stackoverflow.com/a/72094901/1686903 (Using Terraform null resource running gcloud command) but the additional challenge is, **enabling a service does not happen in second or minute**.\r\n\r\n    Adding wait/sleep or dependency flow helped me for a while but, in the long run it **complicated my code**.\r\n\r\n\r\n3. **Cross dependency issues**. Using Terraform code when I enabled services for Compute, then other developer were able to create resources. After sometime, when I no longer need and tried to `terraform destroy` I got several dependency issue.\r\n\r\n> TL;DR Enabling services is usually one-time task just like creating a billing account. As per my experience, I recommend not to automate such important things.\r\n\r\nBelow is added on April 2023\r\n\r\n4. **Distribute your TF Code**. As suggested in by @FreshMike & @Juarez_Rudsatz, distribute your TF code into multiple folders.\r\n\r\n   You can do this by product wise(Compute/Networking/IAM/ServiceAccounts/..) or module wise(Permissions/Admin/Module-A/Product-A/Product-B/..) or others depending on what suits your requirement.\r\n\r\n   In my team project, we used a separate folder call `test/setup` and used this module https://registry.terraform.io/modules/terraform-google-modules/project-factory/google/latest/submodules/project_services to enable multiple APIs in one go.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Usually a **cost** is associated with enabling services and Billing account have to be linked to the services at time. ", "keywords": ["cost"]}, {"source": "Text", "text": "> TL;DR Enabling services is usually one-time task just like creating a billing account. ", "keywords": ["bill"]}, {"source": "Text", "text": "You can do this by product wise(Compute/Networking/IAM/ServiceAccounts/..) or module wise(Permissions/Admin/Module-A/Product-A/Product-B/..) or others depending on what suits your requirement. ", "keywords": ["networking"]}, {"source": "Text", "text": "In my team project, we used a separate folder call `test/setup` and used this module https://registry.terraform.io/modules/terraform-google-modules/project-factory/google/latest/submodules/project_services to enable multiple APIs in one go.", "keywords": ["test"]}]}, {"Id": "291376527", "PostHistoryTypeId": "33", "PostId": "72306829", "RevisionGUID": "50d6a76e-fc7a-40e6-b6e0-7b78c2d435d2", "CreationDate": "2023-04-14T15:40:35.123", "UserId": "-1002", "Comment": "313794", "filtered-sentences": []}], "filtered-sentences": [{"source": "Body", "text": "Usually a cost is associated with enabling services and Billing account have to be linked to the services at time. ", "keywords": ["cost"]}, {"source": "Body", "text": "TL;DR Enabling services is usually one-time task just like creating a billing account. ", "keywords": ["bill"]}, {"source": "Body", "text": "You can do this by product wise(Compute/Networking/IAM/ServiceAccounts/..) or module wise(Permissions/Admin/Module-A/Product-A/Product-B/..) or others depending on what suits your requirement. ", "keywords": ["networking"]}, {"source": "Body", "text": "In my team project, we used a separate folder call test/setup and used this module https://registry.terraform.io/modules/terraform-google-modules/project-factory/google/latest/submodules/project_services to enable multiple APIs in one go.", "keywords": ["test"]}]}, {"Id": "67210655", "PostTypeId": "2", "ParentId": "59055395", "CreationDate": "2021-04-22T09:34:53.587", "Score": "21", "Body": "<p>instead of using <code>count</code> as suggested by @pradeep you may also loop over the services in question:</p>\n<pre><code>variable &quot;gcp_service_list&quot; {\n  description =&quot;The list of apis necessary for the project&quot;\n  type = list(string)\n  default = [\n    &quot;cloudresourcemanager.googleapis.com&quot;,\n    &quot;serviceusage.googleapis.com&quot;\n  ]\n}\n\nresource &quot;google_project_service&quot; &quot;gcp_services&quot; {\n  for_each = toset(var.gcp_service_list)\n  project = &quot;your-project-id&quot;\n  service = each.key\n}\n</code></pre>\n", "OwnerUserId": "6120063", "LastActivityDate": "2021-04-22T09:34:53.587", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "134930799", "PostId": "67210655", "Score": "0", "Text": "Cleanest solution on this page. Should probably be the accepted answer.", "CreationDate": "2023-06-21T21:25:44.403", "UserId": "799379", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "245167613", "PostHistoryTypeId": "2", "PostId": "67210655", "RevisionGUID": "9b317d23-cb3e-435f-a600-d1e2ed37ceef", "CreationDate": "2021-04-22T09:34:53.587", "UserId": "6120063", "Text": "instead of using `count` as suggested by @pradeep you may also loop over the services in question:\r\n\r\n    variable \"gcp_service_list\" {\r\n      description =\"The list of apis necessary for the project\"\r\n      type = list(string)\r\n      default = [\r\n        \"cloudresourcemanager.googleapis.com\",\r\n        \"serviceusage.googleapis.com\"\r\n      ]\r\n    }\r\n    \r\n    resource \"google_project_service\" \"gcp_services\" {\r\n      for_each = toset(var.gcp_service_list)\r\n      project = \"your-project-id\"\r\n      service = each.key\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "72094901", "PostTypeId": "2", "ParentId": "59055395", "CreationDate": "2022-05-03T04:50:50.890", "Score": "9", "Body": "<p>For those reading this in 2022, enabling <code>serviceusage</code> and <code>cloudresourcesmanager</code> automatically from Terraform doesn't work as enabling those APIs through the API has a dependency on them being already enabled...</p>\n<p>The solution is to do it through the gcloud command line:</p>\n<pre><code># Use `gcloud` to enable:\n# - serviceusage.googleapis.com\n# - cloudresourcemanager.googleapis.com\nresource &quot;null_resource&quot; &quot;enable_service_usage_api&quot; {\n  provisioner &quot;local-exec&quot; {\n    command = &quot;gcloud services enable serviceusage.googleapis.com cloudresourcemanager.googleapis.com --project ${var.project_id}&quot;\n  }\n\n  depends_on = [google_project.project]\n}\n\n# Wait for the new configuration to propagate\n# (might be redundant)\nresource &quot;time_sleep&quot; &quot;wait_project_init&quot; {\n  create_duration = &quot;60s&quot;\n\n  depends_on = [null_resource.enable_service_usage_api]\n}\n</code></pre>\n<p>More details on <a href=\"https://medium.com/rockedscience/how-to-fully-automate-the-deployment-of-google-cloud-platform-projects-with-terraform-16c33f1fb31f\" rel=\"noreferrer\">https://medium.com/rockedscience/how-to-fully-automate-the-deployment-of-google-cloud-platform-projects-with-terraform-16c33f1fb31f</a></p>\n", "OwnerUserId": "488054", "LastActivityDate": "2022-05-03T04:50:50.890", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129408210", "PostId": "72094901", "Score": "5", "Text": "This seems like a huge oversight from the team at Terraform. Has no one raised this issue on Github yet?", "CreationDate": "2022-08-08T09:16:52.747", "UserId": "2970710", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131175970", "PostId": "72094901", "Score": "1", "Text": "This should be a bug on the TF github not a \"work around\"", "CreationDate": "2022-11-03T10:06:01.540", "UserId": "542251", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "269363870", "PostHistoryTypeId": "2", "PostId": "72094901", "RevisionGUID": "901f52c8-8c61-4f7b-8d91-b67691c582b8", "CreationDate": "2022-05-03T04:50:50.890", "UserId": "488054", "Text": "For those reading this in 2022, enabling `serviceusage` and `cloudresourcesmanager` automatically from Terraform doesn't work as enabling those APIs through the API has a dependency on them being already enabled...\r\n\r\nThe solution is to do it through the gcloud command line:\r\n```\r\n# Use `gcloud` to enable:\r\n# - serviceusage.googleapis.com\r\n# - cloudresourcemanager.googleapis.com\r\nresource \"null_resource\" \"enable_service_usage_api\" {\r\n  provisioner \"local-exec\" {\r\n    command = \"gcloud services enable serviceusage.googleapis.com cloudresourcemanager.googleapis.com --project ${var.project_id}\"\r\n  }\r\n\r\n  depends_on = [google_project.project]\r\n}\r\n\r\n# Wait for the new configuration to propagate\r\n# (might be redundant)\r\nresource \"time_sleep\" \"wait_project_init\" {\r\n  create_duration = \"60s\"\r\n\r\n  depends_on = [null_resource.enable_service_usage_api]\r\n}\r\n```\r\n\r\nMore details on https://medium.com/rockedscience/how-to-fully-automate-the-deployment-of-google-cloud-platform-projects-with-terraform-16c33f1fb31f", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "59056580", "PostTypeId": "2", "ParentId": "59055395", "CreationDate": "2019-11-26T17:38:31.637", "Score": "34", "Body": "<p>There is a Terraform resource definition called &quot;google_project_service&quot; that allows one to enable a service (API).  This is documented at <a href=\"https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_service\" rel=\"noreferrer\">google_project_service</a>.</p>\n<p>An example of usage appears to be:</p>\n<pre><code>resource &quot;google_project_service&quot; &quot;project&quot; {\n  project = &quot;your-project-id&quot;\n  service = &quot;iam.googleapis.com&quot;\n}\n</code></pre>\n", "OwnerUserId": "1738915", "LastEditorUserId": "4304123", "LastEditDate": "2022-05-10T12:23:44.040", "LastActivityDate": "2022-05-10T12:23:44.040", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "111701012", "PostId": "59056580", "Score": "4", "Text": "not enabling serviceusage.googleapis.com, what could be the issue?", "CreationDate": "2020-07-30T07:00:02.197", "UserId": "1846528", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "210030880", "PostHistoryTypeId": "2", "PostId": "59056580", "RevisionGUID": "ead60dfd-f212-4b85-81a1-ee5fbd156a59", "CreationDate": "2019-11-26T17:38:31.637", "UserId": "1738915", "Text": "There is a Terraform resource definition called \"google_project_service\" that allows one to enable a service (API).  This is documented at [google_project_service](https://www.terraform.io/docs/providers/google/r/google_project_service.html).\r\n\r\nAn example of usage appears to be:\r\n\r\n```\r\nresource \"google_project_service\" \"project\" {\r\n  project = \"your-project-id\"\r\n  service = \"iam.googleapis.com\"\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "269858212", "PostHistoryTypeId": "5", "PostId": "59056580", "RevisionGUID": "42d1d1fc-525c-4df0-ab55-e8d398d7d594", "CreationDate": "2022-05-10T12:23:44.040", "UserId": "4304123", "Comment": "Fix the broken link to `google_project_service`.", "Text": "There is a Terraform resource definition called \"google_project_service\" that allows one to enable a service (API).  This is documented at [google_project_service](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_service).\r\n\r\nAn example of usage appears to be:\r\n\r\n```\r\nresource \"google_project_service\" \"project\" {\r\n  project = \"your-project-id\"\r\n  service = \"iam.googleapis.com\"\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "269858213", "PostHistoryTypeId": "24", "PostId": "59056580", "RevisionGUID": "42d1d1fc-525c-4df0-ab55-e8d398d7d594", "CreationDate": "2022-05-10T12:23:44.040", "Comment": "Proposed by 4304123 approved by 18069264, 409498 edit id of 5366250", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}