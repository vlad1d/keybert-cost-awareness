{"Id": "62451200", "PostTypeId": "1", "AcceptedAnswerId": "62482980", "CreationDate": "2020-06-18T13:33:20.790", "Score": "1", "ViewCount": "1893", "Body": "<p>Can I register a key pair of kms as a key pair for SSH login on an EC2 node?</p>\n\n<p>I would like to use Terraform to manage it.</p>\n", "OwnerUserId": "10641015", "LastActivityDate": "2020-06-20T07:47:39.397", "Title": "Can a kms keypair be registered in the EC2 keypair?", "Tags": "<amazon-ec2><terraform><terraform-provider-aws><amazon-kms><key-pair>", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "110449471", "PostId": "62451200", "Score": "2", "Text": "How would that work? Asymmetric keys on KMS don't allow you access to the private key so you wouldn't be able to use the key for SSH logins. Could you elaborate on what you're trying to achieve and maybe explain what you've read so far leading you to this decision?", "CreationDate": "2020-06-18T14:23:57.200", "UserId": "2291321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "110501329", "PostId": "62451200", "Score": "1", "Text": "@ydaetskcoR youare correct for CMKs, but not data keys. KMS can generate asymmetric data keys usable for client-side ops. It woild be awkward, but certainly not impossible.", "CreationDate": "2020-06-20T07:41:49.240", "UserId": "154527", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "224369131", "PostHistoryTypeId": "2", "PostId": "62451200", "RevisionGUID": "7bad8a24-21f5-4fc9-87f2-64f90bc50bad", "CreationDate": "2020-06-18T13:33:20.790", "UserId": "10641015", "Text": "Can I register a key pair of kms as a key pair for SSH login on an EC2 node?\r\n\r\nI would like to use Terraform to manage it.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "224369132", "PostHistoryTypeId": "1", "PostId": "62451200", "RevisionGUID": "7bad8a24-21f5-4fc9-87f2-64f90bc50bad", "CreationDate": "2020-06-18T13:33:20.790", "UserId": "10641015", "Text": "Can a kms keypair be registered in the EC2 keypair?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "224369133", "PostHistoryTypeId": "3", "PostId": "62451200", "RevisionGUID": "7bad8a24-21f5-4fc9-87f2-64f90bc50bad", "CreationDate": "2020-06-18T13:33:20.790", "UserId": "10641015", "Text": "<amazon-ec2><terraform><terraform-provider-aws><amazon-kms><key-pair>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "62482980", "PostTypeId": "2", "ParentId": "62451200", "CreationDate": "2020-06-20T07:37:58.717", "Score": "4", "Body": "<p>AWS KMS cannot, as of 2020-06-20, be directly used to manage SSH keys.</p>\n\n<p>You can use KMS to generate RSA and ECC data keys with it for client side encryption operations, but you would have to manage those keys yourself.</p>\n\n<p>AWS KMS currently supports:</p>\n\n<ol>\n<li>Encryption with symmetric keys (as of 2020-06-20 only AES)</li>\n<li>Digital signing with asymmetric keys (as of 2020-06-20 both RSA and ECC)</li>\n</ol>\n\n<p><a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\" rel=\"nofollow noreferrer\">KMS customer master keys (CMKs) for service-side encryption</a> (expensive and likely too high latency for practical use from an SSH client):</p>\n\n<blockquote>\n  <p>AWS KMS supports symmetric and asymmetric CMKs.</p>\n  \n  <ul>\n  <li>Symmetric CMK: Represents a single 256-bit secret encryption key that never leaves AWS KMS unencrypted. To use your symmetric CMK, you must call AWS KMS. </li>\n  <li>Asymmetric CMK: Represents a mathematically related public key and private key pair that you can use for encryption and decryption or signing and verification, but not both. The private key never leaves AWS KMS unencrypted. You can use the public key within AWS KMS by calling the AWS KMS API operations, or download the public key and use it outside of AWS KMS.</li>\n  </ul>\n</blockquote>\n\n<p>Using an assymetric CMK with SSH would require a modified client or a plugin I'm unaware of and would be quite expensive and slow.</p>\n\n<p><a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\" rel=\"nofollow noreferrer\">Data keys for use in client-side operations</a>;</p>\n\n<blockquote>\n  <p>AWS KMS also provides symmetric data keys and asymmetric data key pairs that are designed to be used for client-side cryptography outside of AWS KMS. The symmetric data key and the private key in an asymmetric data key pair are protected by a symmetric CMK in AWS KMS.</p>\n  \n  <ul>\n  <li>Symmetric data key \u2014 A symmetric encryption key that you can use to encrypt data outside of AWS KMS. This key is protected by a symmetric CMK in AWS KMS. \n  *Asymmetric data key pair \u2014 An RSA or elliptic curve (ECC) key pair that consists of a public key and a private key. You can use your data key pair outside of AWS KMS to encrypt and decrypt data, or sign messages and verify signatures. The private key is protected by a symmetric CMK in AWS KMS.</li>\n  </ul>\n</blockquote>\n\n<p>Using an asymmetric data key from KMS would be more practical, but would require either a modified client to use a CMK to unwrap it or would require you to manage the encryption of the key itself on the client side using your SSH client's features.</p>\n\n<p>You would also need to add the public key to the hosts you are logging into. One example would be to generate a CMK with Terraform and use a null_resource provisioner to create an asymmetric data key from it.</p>\n\n<p>You could then obtain the asymmetric data key's public key and add it as a keypair to EC2 for use in provisioning instances.</p>\n\n<p>This is terribly elaborate and unlikely to be worth the complexity. You are better off using ssh-keygen locally.</p>\n", "OwnerUserId": "154527", "LastEditorUserId": "154527", "LastEditDate": "2020-06-20T07:43:20.340", "LastActivityDate": "2020-06-20T07:43:20.340", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "224504299", "PostHistoryTypeId": "2", "PostId": "62482980", "RevisionGUID": "ab1b8aad-3482-45c2-b2fb-fe8e3c1c8393", "CreationDate": "2020-06-20T07:37:58.717", "UserId": "154527", "Text": "AWS KMS cannot, as of 2020-06-20, be directly used to manage SSH keys.\n\nYou can use KMS to generate RSA and ECC data keys with it for client side encryption operations, but you would have to manage those keys yourself.\n\nAWS KMS currently supports:\n\n 1. Encryption with symmetric keys (as of 2020-06-20 only AES)\n 2. Digital signing with asymmetric keys (as of 2020-06-20 both RSA and ECC)\n\n[KMS customer master keys (CMKs) for service-side encryption][1] (expensive and likely too high latency for practical use from an SSH client):\n\n> AWS KMS supports symmetric and asymmetric CMKs.\n>\n> * Symmetric CMK: Represents a single 256-bit secret encryption key that never leaves AWS KMS unencrypted. To use your symmetric CMK, you must call AWS KMS. \n> * Asymmetric CMK: Represents a mathematically related public key and private key pair that you can use for encryption and decryption or signing and verification, but not both. The private key never leaves AWS KMS unencrypted. You can use the public key within AWS KMS by calling the AWS KMS API operations, or download the public key and use it outside of AWS KMS.\n\nUsing an assymetric CMK with SSH would require a modified client or a plugin I'm unaware of and would be quite expensive and slow.\n\n[Data keys for use in client-side operations][1];\n\n> AWS KMS also provides symmetric data keys and asymmetric data key pairs that are designed to be used for client-side cryptography outside of AWS KMS. The symmetric data key and the private key in an asymmetric data key pair are protected by a symmetric CMK in AWS KMS.\n>\n> * Symmetric data key \u2014 A symmetric encryption key that you can use to encrypt data outside of AWS KMS. This key is protected by a symmetric CMK in AWS KMS. \n> *Asymmetric data key pair \u2014 An RSA or elliptic curve (ECC) key pair that consists of a public key and a private key. You can use your data key pair outside of AWS KMS to encrypt and decrypt data, or sign messages and verify signatures. The private key is protected by a symmetric CMK in AWS KMS.\n\nUsing an asymmetric data key from KMS would be more practical, but would require either a modified client to use a CMK to unwrap it or would require you to manage the encryption of the key itsef the client side using your SSH client's features. You would also need to add the public key to the hosts you are logging into. One example would be to generate a CMK with Terraform and use a null_resource provisioner to create an asymmetric data key from it. You could then obtain the asymmetric data key's public key and add it as a keypair to EC2 for use in provisioning instances. This is terribly elaborate ans unlikely to be worth the complexity. You are better off using ssh-keygen locally.\n\n  [1]: https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "AWS KMS currently supports: 1. Encryption with symmetric keys (as of 2020-06-20 only AES) 2. Digital signing with asymmetric keys (as of 2020-06-20 both RSA and ECC) [KMS customer master keys (CMKs) for service-side encryption][1] (expensive and likely too high latency for practical use from an SSH client): > AWS KMS supports symmetric and asymmetric CMKs. ", "keywords": ["expense"]}, {"source": "Text", "text": "Using an assymetric CMK with SSH would require a modified client or a plugin I'm unaware of and would be quite expensive and slow. ", "keywords": ["expense"]}]}, {"Id": "224504458", "PostHistoryTypeId": "5", "PostId": "62482980", "RevisionGUID": "907561c6-a02e-4b9e-a158-ed45def00961", "CreationDate": "2020-06-20T07:43:20.340", "UserId": "154527", "Comment": "Fix typo", "Text": "AWS KMS cannot, as of 2020-06-20, be directly used to manage SSH keys.\n\nYou can use KMS to generate RSA and ECC data keys with it for client side encryption operations, but you would have to manage those keys yourself.\n\nAWS KMS currently supports:\n\n 1. Encryption with symmetric keys (as of 2020-06-20 only AES)\n 2. Digital signing with asymmetric keys (as of 2020-06-20 both RSA and ECC)\n\n[KMS customer master keys (CMKs) for service-side encryption][1] (expensive and likely too high latency for practical use from an SSH client):\n\n> AWS KMS supports symmetric and asymmetric CMKs.\n>\n> * Symmetric CMK: Represents a single 256-bit secret encryption key that never leaves AWS KMS unencrypted. To use your symmetric CMK, you must call AWS KMS. \n> * Asymmetric CMK: Represents a mathematically related public key and private key pair that you can use for encryption and decryption or signing and verification, but not both. The private key never leaves AWS KMS unencrypted. You can use the public key within AWS KMS by calling the AWS KMS API operations, or download the public key and use it outside of AWS KMS.\n\nUsing an assymetric CMK with SSH would require a modified client or a plugin I'm unaware of and would be quite expensive and slow.\n\n[Data keys for use in client-side operations][1];\n\n> AWS KMS also provides symmetric data keys and asymmetric data key pairs that are designed to be used for client-side cryptography outside of AWS KMS. The symmetric data key and the private key in an asymmetric data key pair are protected by a symmetric CMK in AWS KMS.\n>\n> * Symmetric data key \u2014 A symmetric encryption key that you can use to encrypt data outside of AWS KMS. This key is protected by a symmetric CMK in AWS KMS. \n> *Asymmetric data key pair \u2014 An RSA or elliptic curve (ECC) key pair that consists of a public key and a private key. You can use your data key pair outside of AWS KMS to encrypt and decrypt data, or sign messages and verify signatures. The private key is protected by a symmetric CMK in AWS KMS.\n\nUsing an asymmetric data key from KMS would be more practical, but would require either a modified client to use a CMK to unwrap it or would require you to manage the encryption of the key itself on the client side using your SSH client's features.\n\nYou would also need to add the public key to the hosts you are logging into. One example would be to generate a CMK with Terraform and use a null_resource provisioner to create an asymmetric data key from it.\n\nYou could then obtain the asymmetric data key's public key and add it as a keypair to EC2 for use in provisioning instances.\n\nThis is terribly elaborate and unlikely to be worth the complexity. You are better off using ssh-keygen locally.\n\n  [1]: https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "AWS KMS currently supports: 1. Encryption with symmetric keys (as of 2020-06-20 only AES) 2. Digital signing with asymmetric keys (as of 2020-06-20 both RSA and ECC) [KMS customer master keys (CMKs) for service-side encryption][1] (expensive and likely too high latency for practical use from an SSH client): > AWS KMS supports symmetric and asymmetric CMKs. ", "keywords": ["expense"]}, {"source": "Text", "text": "Using an assymetric CMK with SSH would require a modified client or a plugin I'm unaware of and would be quite expensive and slow. ", "keywords": ["expense"]}]}], "filtered-sentences": [{"source": "Body", "text": "Digital signing with asymmetric keys (as of 2020-06-20 both RSA and ECC) KMS customer master keys (CMKs) for service-side encryption (expensive and likely too high latency for practical use from an SSH client): AWS KMS supports symmetric and asymmetric CMKs. ", "keywords": ["expense"]}, {"source": "Body", "text": "Using an assymetric CMK with SSH would require a modified client or a plugin I'm unaware of and would be quite expensive and slow. ", "keywords": ["expense"]}]}], "contains-topic": true, "filtered-sentences": []}