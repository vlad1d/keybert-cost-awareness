{"Id": "67836783", "PostTypeId": "1", "AcceptedAnswerId": "67837124", "CreationDate": "2021-06-04T11:53:32.077", "Score": "0", "ViewCount": "809", "Body": "<p>Let's say I have a module block like this:</p>\n<pre><code>resource &quot;aws_instance&quot; &quot;server&quot; {\n\n  ami           = &quot;ami-a1b2c3d4&quot;\n  instance_type = &quot;t2.micro&quot;\n  subnet_id     = var.subnet_ids\n\n  tags = {\n    Name = format(&quot;ami:%s&quot;, ami) # &lt;&lt; **How to do this?**\n  }\n}\n</code></pre>\n<p>And I have to use a module field such as <code>ami</code> in this example as a value to another field? Is there a way i can do this.</p>\n<p>Above is an example in really, I am working with custom module and one value gets used multiple times so I find it non-efficient to write/change same thing at multiple places. I also want to avoid creating a separate external variable.</p>\n<p>Is there a way above can be achieved with some sort of internal referencing of fields within same module?</p>\n", "OwnerUserId": "971741", "LastEditorUserId": "472495", "LastEditDate": "2023-03-08T14:46:55.343", "LastActivityDate": "2023-03-08T14:46:55.343", "Title": "Reference a field within same module", "Tags": "<terraform>", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "247875093", "PostHistoryTypeId": "2", "PostId": "67836783", "RevisionGUID": "2b7d51d4-4f6d-4472-98e9-87c8016aa8f2", "CreationDate": "2021-06-04T11:53:32.077", "UserId": "971741", "Text": "Lets say I have a module block like this:\r\n \r\n    resource \"aws_instance\" \"server\" {\r\n    \r\n      ami           = \"ami-a1b2c3d4\"\r\n      instance_type = \"t2.micro\"\r\n      subnet_id     = var.subnet_ids\r\n    \r\n      tags = {\r\n        Name = format(\"ami:%s\", ami) # << **How to do this?**\r\n      }\r\n    }\r\n\r\nAnd I have to use a module field such as `ami` in this example as a value to another field? Is there a way i can do this.\r\n\r\nAbove is an example in really, I am working with custom module and one value gets used multiple times so I find it non-efficient to write/change same thing at multiple places. I also want to avoid creating a separate external variable.\r\n\r\nIs there a way above can be achieved with some sort of internal referencing of fields within same module?\r\n\r\nTIA!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Above is an example in really, I am working with custom module and one value gets used multiple times so I find it non-efficient to write/change same thing at multiple places. ", "keywords": ["efficient", "change"]}]}, {"Id": "247875094", "PostHistoryTypeId": "1", "PostId": "67836783", "RevisionGUID": "2b7d51d4-4f6d-4472-98e9-87c8016aa8f2", "CreationDate": "2021-06-04T11:53:32.077", "UserId": "971741", "Text": "Reference a field within same module", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "247875095", "PostHistoryTypeId": "3", "PostId": "67836783", "RevisionGUID": "2b7d51d4-4f6d-4472-98e9-87c8016aa8f2", "CreationDate": "2021-06-04T11:53:32.077", "UserId": "971741", "Text": "<terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "289360412", "PostHistoryTypeId": "5", "PostId": "67836783", "RevisionGUID": "4666d460-bea3-4d00-b381-7b1dc7792f28", "CreationDate": "2023-03-08T14:46:55.343", "UserId": "472495", "Comment": "Fix spelling", "Text": "Let's say I have a module block like this:\r\n \r\n    resource \"aws_instance\" \"server\" {\r\n    \r\n      ami           = \"ami-a1b2c3d4\"\r\n      instance_type = \"t2.micro\"\r\n      subnet_id     = var.subnet_ids\r\n    \r\n      tags = {\r\n        Name = format(\"ami:%s\", ami) # << **How to do this?**\r\n      }\r\n    }\r\n\r\nAnd I have to use a module field such as `ami` in this example as a value to another field? Is there a way i can do this.\r\n\r\nAbove is an example in really, I am working with custom module and one value gets used multiple times so I find it non-efficient to write/change same thing at multiple places. I also want to avoid creating a separate external variable.\r\n\r\nIs there a way above can be achieved with some sort of internal referencing of fields within same module?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Above is an example in really, I am working with custom module and one value gets used multiple times so I find it non-efficient to write/change same thing at multiple places. ", "keywords": ["efficient", "change"]}]}], "answers": [{"Id": "67837124", "PostTypeId": "2", "ParentId": "67836783", "CreationDate": "2021-06-04T12:20:03.693", "Score": "0", "Body": "<p>Use variables to reuse values in the same module. If you want to access other <code>modules</code> <code>resourcesLets</code> use the <code>data</code> attribute.</p>\n<p>Example: start with using a module:</p>\n<pre><code>module &quot;dev-server&quot; {\n  source      = &quot;./modules/server&quot;\n  ami         = var.dev_ami_name\n  instance_id = var.instance_id\n}\n</code></pre>\n<p>Also add a module var file with the correct variables you're passing. Then your module:</p>\n<pre><code>  resource &quot;aws_instance&quot; &quot;server&quot; {\n  ami           = var.ami\n  instance_type = var.instance_id\n\n  tags = {\n    Name = format(&quot;ami:%s&quot;, var.ami) # &lt;&lt; **How to do this?**\n  }\n}\n</code></pre>\n", "OwnerUserId": "6810982", "LastActivityDate": "2021-06-04T12:20:03.693", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "247876444", "PostHistoryTypeId": "2", "PostId": "67837124", "RevisionGUID": "6576f6b4-83bf-49f6-96c8-1c9b51270cc1", "CreationDate": "2021-06-04T12:20:03.693", "UserId": "6810982", "Text": "Use variables to reuse values in the same module. If you want to access other `modules` `resourcesLets` use the `data` attribute. \r\n\r\nExample: start with using a module:\r\n\r\n    module \"dev-server\" {\r\n      source      = \"./modules/server\"\r\n      ami         = var.dev_ami_name\r\n      instance_id = var.instance_id\r\n    }\r\n\r\n\r\n\r\nAlso add a module var file with the correct variables you're passing. Then your module:\r\n\r\n      resource \"aws_instance\" \"server\" {\r\n      ami           = var.ami\r\n      instance_type = var.instance_id\r\n    \r\n      tags = {\r\n        Name = format(\"ami:%s\", var.ami) # << **How to do this?**\r\n      }\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "67877885", "PostTypeId": "2", "ParentId": "67836783", "CreationDate": "2021-06-07T19:49:45.013", "Score": "0", "Body": "<p>A general answer to this is to factor out the common value into a separate named value that you can refer to elsewhere.</p>\n<p>54m's answer shows one way to do that with <a href=\"https://www.terraform.io/docs/language/values/variables.html\" rel=\"nofollow noreferrer\">input variables</a>. That's a good choice if it's a value that should be chosen by the user of your module. If it's instead something that would make sense to have &quot;hard-coded&quot;, but still used in multiple locations, then you can use a <a href=\"https://www.terraform.io/docs/language/values/locals.html\" rel=\"nofollow noreferrer\">local value</a>:</p>\n<pre><code>locals {\n  ami_id = &quot;ami-a1b2c3d4&quot;\n}\n\nresource &quot;aws_instance&quot; &quot;server&quot; {\n  ami           = local.ami\n  instance_type = &quot;t2.micro&quot;\n  subnet_id     = var.subnet_ids\n\n  tags = {\n    Name = format(&quot;ami:%s&quot;, local.ami)\n  }\n}\n</code></pre>\n<p>A local value is private to the module that defined it, so this doesn't change the public interface of the module at all. In particular, it would not be possible for the user of this module to change the AMI ID, just like before.</p>\n<p>If you have experience with general-purpose programming languages then it might be helpful to think of input variables as being similar to function parameters, while local values are somewhat like local variables inside a function. In this analogy, the module itself corresponds with the function.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2021-06-07T19:49:45.013", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "248052605", "PostHistoryTypeId": "2", "PostId": "67877885", "RevisionGUID": "a3755eb6-b71a-4f75-9faa-556983605970", "CreationDate": "2021-06-07T19:49:45.013", "UserId": "281848", "Text": "A general answer to this is to factor out the common value into a separate named value that you can refer to elsewhere.\r\n\r\n54m's answer shows one way to do that with [input variables](https://www.terraform.io/docs/language/values/variables.html). That's a good choice if it's a value that should be chosen by the user of your module. If it's instead something that would make sense to have \"hard-coded\", but still used in multiple locations, then you can use a [local value](https://www.terraform.io/docs/language/values/locals.html):\r\n\r\n```\r\nlocals {\r\n  ami_id = \"ami-a1b2c3d4\"\r\n}\r\n\r\nresource \"aws_instance\" \"server\" {\r\n  ami           = local.ami\r\n  instance_type = \"t2.micro\"\r\n  subnet_id     = var.subnet_ids\r\n\r\n  tags = {\r\n    Name = format(\"ami:%s\", local.ami)\r\n  }\r\n}\r\n```\r\n\r\nA local value is private to the module that defined it, so this doesn't change the public interface of the module at all. In particular, it would not be possible for the user of this module to change the AMI ID, just like before.\r\n\r\nIf you have experience with general-purpose programming languages then it might be helpful to think of input variables as being similar to function parameters, while local values are somewhat like local variables inside a function. In this analogy, the module itself corresponds with the function.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "A local value is private to the module that defined it, so this doesn't change the public interface of the module at all. ", "keywords": ["change"]}, {"source": "Text", "text": "In particular, it would not be possible for the user of this module to change the AMI ID, just like before. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "A local value is private to the module that defined it, so this doesn't change the public interface of the module at all. ", "keywords": ["change"]}, {"source": "Body", "text": "In particular, it would not be possible for the user of this module to change the AMI ID, just like before. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Above is an example in really, I am working with custom module and one value gets used multiple times so I find it non-efficient to write/change same thing at multiple places. ", "keywords": ["efficient", "change"]}]}