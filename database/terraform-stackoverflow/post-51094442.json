{"Id": "51094442", "PostTypeId": "1", "AcceptedAnswerId": "51127788", "CreationDate": "2018-06-29T04:43:43.250", "Score": "13", "ViewCount": "10839", "Body": "<p>I'm provisioning a single windows server for testing with terraform in AWS. Every time i need to decrypt my windows password with my PEM file to connect. Instead, i chose the terraform argument <a href=\"https://www.terraform.io/docs/providers/aws/r/instance.html#get_password_data\" rel=\"noreferrer\"><code>get_password_data</code></a> and stored my <a href=\"https://www.terraform.io/docs/providers/aws/r/instance.html#password_data\" rel=\"noreferrer\"><code>password_data</code></a> in tfstate file. Now how do i decrypt the same with interpolation syntax <a href=\"https://www.terraform.io/docs/configuration/interpolation.html#rsadecrypt-string-key-\" rel=\"noreferrer\"><code>rsadecrypt</code></a></p>\n\n<p>Please find my below terraform code</p>\n\n<pre><code>### Resource for EC2 instance creation ###\n\nresource \"aws_instance\" \"ec2\" {\n  ami                   =   \"${var.ami}\"\n  instance_type         =   \"${var.instance_type}\"\n  key_name              =   \"${var.key_name}\"\n  subnet_id             =   \"${var.subnet_id}\"\n  security_groups       =  [\"${var.security_groups}\"]\n  availability_zone     =   \"${var.availability_zone}\"\n  private_ip            =   \"x.x.x.x\"\n  get_password_data     =   \"true\"\n\n  connection {\n    password            =   \"${rsadecrypt(self.password_data)}\"\n    }\n\n  root_block_device {\n              volume_type = \"${var.volume_type}\"\n              volume_size = \"${var.volume_size}\"\n    delete_on_termination = \"true\"\n    }\n\n  tags {\n        \"Cost Center\"  =  \"R1\"\n        \"Name\"         =  \"AD-test\"\n        \"Purpose\"      =  \"Task\"\n        \"Server Name\"  =  \"Active Directory\"\n        \"SME Name\"     =  \"Ravi\"\n    }\n\n}\n\n\noutput \"instance_id\" {\n  value = \"${aws_instance.ec2.id}\"\n}\n\n\n### Resource for EBS volume creation ###\n\n  resource \"aws_ebs_volume\" \"additional_vol\" {\n    availability_zone =  \"${var.availability_zone}\"\n    size              =  \"${var.size}\"\n    type              =  \"${var.type}\"\n}\n\n### Output of Volume ID ###\n\n  output \"vol_id\" {\n    value = \"${aws_ebs_volume.additional_vol.id}\"\n}\n\n### Resource for Volume attachment ###\n\n   resource \"aws_volume_attachment\" \"attach_vol\" {\n     device_name       = \"${var.device_name}\"\n     volume_id         = \"${aws_ebs_volume.additional_vol.id}\"\n     instance_id       = \"${aws_instance.ec2.id}\"\n     skip_destroy      = \"true\"\n}\n</code></pre>\n", "OwnerUserId": "4586921", "LastEditorUserId": "781754", "LastEditDate": "2018-12-16T16:33:19.040", "LastActivityDate": "2022-05-06T20:33:41.243", "Title": "How to decrypt windows administrator password in terraform?", "Tags": "<amazon-web-services><syntax><interpolation><terraform>", "AnswerCount": "3", "CommentCount": "1", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "99401832", "PostId": "51094442", "Score": "0", "Text": "nicely worded title to the question.", "CreationDate": "2019-05-31T21:06:39.547", "UserId": "321866", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "1689377881", "CreationDate": "2019-07-04T23:18:01.323", "PostId": "51094442", "RelatedPostId": "56884621", "LinkTypeId": "1"}, {"Id": "1779422941", "CreationDate": "2020-10-01T09:09:44.253", "PostId": "51094442", "RelatedPostId": "29010967", "LinkTypeId": "1"}], "history": [{"Id": "176568093", "PostHistoryTypeId": "2", "PostId": "51094442", "RevisionGUID": "90a90aa3-ee73-41a6-b342-5005a00b95d0", "CreationDate": "2018-06-29T04:43:43.250", "UserId": "4586921", "Text": "I'm provisioning a single windows server with terraform in AWS. Every time i need to decrypt my windows password with my PEM file. Instead, i chose the terraform argument `[get_password_data][1]` and stored my `password_date` in tfstate file. Now how do i decrypt the `password_data` with interpolation syntax `[rsadecrypt][1]`?\r\n\r\nPlease find my below terraform code\r\n\r\n        ### Resource for EC2 instance creation ###\r\n    \r\n    resource \"aws_instance\" \"ec2\" {\r\n      ami                     =   \"${var.ami}\"\r\n      instance_type           =   \"${var.instance_type}\"\r\n      key_name                =   \"${var.key_name}\"\r\n      subnet_id               =   \"${var.subnet_id}\"\r\n      security_groups         =  [\"${var.security_groups}\"]\r\n      availability_zone       =   \"${var.availability_zone}\"\r\n      private_ip              =   \"x.x.x.x\"\r\n      get_password_data       =   \"true\"\r\n    \r\n      root_block_device {\r\n                  volume_type =   \"${var.volume_type}\"\r\n                  volume_size =   \"${var.volume_size}\"\r\n        delete_on_termination =   \"true\"\r\n        }\r\n    \r\n      tags {\r\n          \"Cost Center\"       =   \"R1\"\r\n          \"Name\"              =   \"AD-test\"\r\n       \"Purpose\"           =   \"task\"\r\n       \"Server Name\"       =   \"demo\"\r\n       \"SME Name\"          =   \"Ravi\"\r\n        }\r\n    \r\n      user_data               =   \"${data.template_file.user_data.*.rendered[count.index]}\"\r\n      get_password_data       =   \"${data.aws_instance.win_password.password_data}\"\r\n    }\r\n    \r\n      data \"template_file\" \"user_data\" {\r\n          template            = \"${join(\"\", distinct(concat( list(file(element(var.user_data, 0))), list(file(element(var.user_data, 1))), list(file(element(var.user_data, 2))) )))}\"}\r\n    \r\n    \r\n    output \"instance_id\" {\r\n      value = \"${aws_instance.ec2.id}\"\r\n    }\r\n    \r\n    \r\n    ### Resource for EBS volume creation ###\r\n    resource \"aws_ebs_volume\" \"additional_vol\" {\r\n      availability_zone =  \"${var.availability_zone}\"\r\n      size       =  \"${var.size}\"\r\n      type       =  \"${var.type}\"\r\n    }\r\n    \r\n    ### Output of Volume ID ###\r\n    \r\n    output \"vol_id\" {\r\n      value = \"${aws_ebs_volume.additional_vol.id}\"\r\n    }\r\n    \r\n    ### Resource for Volume attachment ###\r\n    \r\n    resource \"aws_volume_attachment\" \"attach_vol\" {\r\n        device_name      = \"${var.device_name}\"\r\n        volume_id        = \"${aws_ebs_volume.additional_vol.id}\"\r\n        instance_id    = \"${aws_instance.ec2.id}\"\r\n        skip_destroy     = \"true\"\r\n    }\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/configuration/interpolation.html#rsadecrypt-string-key-", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Please find my below terraform code ### Resource for EC2 instance creation ### resource \"aws_instance\" \"ec2\" { ami = \"${var.ami}\" instance_type = \"${var.instance_type}\" key_name = \"${var.key_name}\" subnet_id = \"${var.subnet_id}\" security_groups = [\"${var.security_groups}\"] availability_zone = \"${var.availability_zone}\" private_ip = \"x.x.x.x\" get_password_data = \"true\" root_block_device { volume_type = \"${var.volume_type}\" volume_size = \"${var.volume_size}\" delete_on_termination = \"true\" } tags { \"Cost Center\" = \"R1\" \"Name\" = \"AD-test\" \"Purpose\" = \"task\" \"Server Name\" = \"demo\" \"SME Name\" = \"Ravi\" } user_data = \"${data.template_file.user_data.*.rendered[count.index]}\" get_password_data = \"${data.aws_instance.win_password.password_data}\" } data \"template_file\" \"user_data\" { template = \"${join(\"\", distinct(concat( list(file(element(var.user_data, 0))), list(file(element(var.user_data, 1))), list(file(element(var.user_data, 2))) )))}\"} output \"instance_id\" { value = \"${aws_instance.ec2.id}\" } ### Resource for EBS volume creation ### resource \"aws_ebs_volume\" \"additional_vol\" { availability_zone = \"${var.availability_zone}\" size = \"${var.size}\" type = \"${var.type}\" } ### Output of Volume ID ### output \"vol_id\" { value = \"${aws_ebs_volume.additional_vol.id}\" } ### Resource for Volume attachment ### resource \"aws_volume_attachment\" \"attach_vol\" { device_name = \"${var.device_name}\" volume_id = \"${aws_ebs_volume.additional_vol", "keywords": ["cost", "instance", "test"]}]}, {"Id": "176568094", "PostHistoryTypeId": "1", "PostId": "51094442", "RevisionGUID": "90a90aa3-ee73-41a6-b342-5005a00b95d0", "CreationDate": "2018-06-29T04:43:43.250", "UserId": "4586921", "Text": "How to decrypt windows administrator password in terraform?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "176568095", "PostHistoryTypeId": "3", "PostId": "51094442", "RevisionGUID": "90a90aa3-ee73-41a6-b342-5005a00b95d0", "CreationDate": "2018-06-29T04:43:43.250", "UserId": "4586921", "Text": "<amazon-web-services><syntax><interpolation><terraform><hashicorp>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "176568584", "PostHistoryTypeId": "5", "PostId": "51094442", "RevisionGUID": "8b12133e-7f61-4762-88ee-91d3044dbfa6", "CreationDate": "2018-06-29T04:58:07.430", "UserId": "4586921", "Comment": "Improved formatting along with few spelling mistakes", "Text": "I'm provisioning a single windows server for testing with terraform in AWS. Every time i need to decrypt my windows password with my PEM file to connect. Instead, i chose the terraform argument [`get_password_data`][1] and stored my [`password_data`][2] in tfstate file. Now how do i decrypt the same with interpolation syntax [`rsadecrypt`][3]\r\n\r\nPlease find my below terraform code\r\n\r\n        ### Resource for EC2 instance creation ###\r\n    \r\n    resource \"aws_instance\" \"ec2\" {\r\n      ami                     =   \"${var.ami}\"\r\n      instance_type           =   \"${var.instance_type}\"\r\n      key_name                =   \"${var.key_name}\"\r\n      subnet_id               =   \"${var.subnet_id}\"\r\n      security_groups         =  [\"${var.security_groups}\"]\r\n      availability_zone       =   \"${var.availability_zone}\"\r\n      private_ip              =   \"x.x.x.x\"\r\n      get_password_data       =   \"true\"\r\n    \r\n      root_block_device {\r\n                  volume_type =   \"${var.volume_type}\"\r\n                  volume_size =   \"${var.volume_size}\"\r\n        delete_on_termination =   \"true\"\r\n        }\r\n    \r\n      tags {\r\n          \"Cost Center\"       =   \"R1\"\r\n          \"Name\"              =   \"AD-test\"\r\n       \"Purpose\"           =   \"task\"\r\n       \"Server Name\"       =   \"demo\"\r\n       \"SME Name\"          =   \"Ravi\"\r\n        }\r\n    \r\n      user_data               =   \"${data.template_file.user_data.*.rendered[count.index]}\"\r\n      get_password_data       =   \"${data.aws_instance.win_password.password_data}\"\r\n    }\r\n    \r\n      data \"template_file\" \"user_data\" {\r\n          template            = \"${join(\"\", distinct(concat( list(file(element(var.user_data, 0))), list(file(element(var.user_data, 1))), list(file(element(var.user_data, 2))) )))}\"}\r\n    \r\n    \r\n    output \"instance_id\" {\r\n      value = \"${aws_instance.ec2.id}\"\r\n    }\r\n    \r\n    \r\n    ### Resource for EBS volume creation ###\r\n    resource \"aws_ebs_volume\" \"additional_vol\" {\r\n      availability_zone =  \"${var.availability_zone}\"\r\n      size       =  \"${var.size}\"\r\n      type       =  \"${var.type}\"\r\n    }\r\n    \r\n    ### Output of Volume ID ###\r\n    \r\n    output \"vol_id\" {\r\n      value = \"${aws_ebs_volume.additional_vol.id}\"\r\n    }\r\n    \r\n    ### Resource for Volume attachment ###\r\n    \r\n    resource \"aws_volume_attachment\" \"attach_vol\" {\r\n        device_name      = \"${var.device_name}\"\r\n        volume_id        = \"${aws_ebs_volume.additional_vol.id}\"\r\n        instance_id    = \"${aws_instance.ec2.id}\"\r\n        skip_destroy     = \"true\"\r\n    }\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/r/instance.html#get_password_data\r\n  [2]: https://www.terraform.io/docs/providers/aws/r/instance.html#password_data\r\n  [3]: https://www.terraform.io/docs/configuration/interpolation.html#rsadecrypt-string-key-", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm provisioning a single windows server for testing with terraform in AWS. ", "keywords": ["test"]}, {"source": "Text", "text": "Please find my below terraform code ### Resource for EC2 instance creation ### resource \"aws_instance\" \"ec2\" { ami = \"${var.ami}\" instance_type = \"${var.instance_type}\" key_name = \"${var.key_name}\" subnet_id = \"${var.subnet_id}\" security_groups = [\"${var.security_groups}\"] availability_zone = \"${var.availability_zone}\" private_ip = \"x.x.x.x\" get_password_data = \"true\" root_block_device { volume_type = \"${var.volume_type}\" volume_size = \"${var.volume_size}\" delete_on_termination = \"true\" } tags { \"Cost Center\" = \"R1\" \"Name\" = \"AD-test\" \"Purpose\" = \"task\" \"Server Name\" = \"demo\" \"SME Name\" = \"Ravi\" } user_data = \"${data.template_file.user_data.*.rendered[count.index]}\" get_password_data = \"${data.aws_instance.win_password.password_data}\" } data \"template_file\" \"user_data\" { template = \"${join(\"\", distinct(concat( list(file(element(var.user_data, 0))), list(file(element(var.user_data, 1))), list(file(element(var.user_data, 2))) )))}\"} output \"instance_id\" { value = \"${aws_instance.ec2.id}\" } ### Resource for EBS volume creation ### resource \"aws_ebs_volume\" \"additional_vol\" { availability_zone = \"${var.availability_zone}\" size = \"${var.size}\" type = \"${var.type}\" } ### Output of Volume ID ### output \"vol_id\" { value = \"${aws_ebs_volume.additional_vol.id}\" } ### Resource for Volume attachment ### resource \"aws_volume_attachment\" \"attach_vol\" { device_name = \"${var.device_name}\" volume_id = \"${aws_ebs_volume.additional_vol.id}\" instance_id = \"${aws_instance.ec2.id}\" skip_destroy = \"true\" } [1]: https://www", "keywords": ["cost", "instance", "test"]}, {"source": "Text", "text": ".terraform.io/docs/providers/aws/r/instance.html#get_password_data [2]: https://www.terraform.io/docs/providers/aws/r/instance.html#password_data [3]: https://www.terraform.io/docs/configuration/interpolation.html#rsadecrypt-string-key-", "keywords": ["instance"]}]}, {"Id": "176604781", "PostHistoryTypeId": "5", "PostId": "51094442", "RevisionGUID": "4643e929-7c8c-4d86-96cd-22651470f7c1", "CreationDate": "2018-06-29T14:12:45.813", "UserId": "4586921", "Comment": "Just removed inappropriate lines of code.", "Text": "I'm provisioning a single windows server for testing with terraform in AWS. Every time i need to decrypt my windows password with my PEM file to connect. Instead, i chose the terraform argument [`get_password_data`][1] and stored my [`password_data`][2] in tfstate file. Now how do i decrypt the same with interpolation syntax [`rsadecrypt`][3]\r\n\r\nPlease find my below terraform code\r\n\r\n    ### Resource for EC2 instance creation ###\r\n    \r\n    resource \"aws_instance\" \"ec2\" {\r\n      ami                   =   \"${var.ami}\"\r\n      instance_type         =   \"${var.instance_type}\"\r\n      key_name              =   \"${var.key_name}\"\r\n      subnet_id             =   \"${var.subnet_id}\"\r\n      security_groups       =  [\"${var.security_groups}\"]\r\n      availability_zone     =   \"${var.availability_zone}\"\r\n      private_ip            =   \"x.x.x.x\"\r\n      get_password_data     =   \"true\"\r\n      \r\n      connection {\r\n        password            =   \"${rsadecrypt(self.password_data)}\"\r\n        }\r\n    \r\n      root_block_device {\r\n                  volume_type = \"${var.volume_type}\"\r\n                  volume_size = \"${var.volume_size}\"\r\n        delete_on_termination = \"true\"\r\n        }\r\n    \r\n      tags {\r\n            \"Cost Center\"  =  \"R1\"\r\n            \"Name\"         =  \"AD-test\"\r\n         \"Purpose\"      =  \"Task\"\r\n         \"Server Name\"  =  \"Active Directory\"\r\n         \"SME Name\"     =  \"Ravi\"\r\n        }\r\n    \r\n    }\r\n    \r\n    \r\n    output \"instance_id\" {\r\n      value = \"${aws_instance.ec2.id}\"\r\n    }\r\n    \r\n    \r\n    ### Resource for EBS volume creation ###\r\n    \r\n      resource \"aws_ebs_volume\" \"additional_vol\" {\r\n        availability_zone =  \"${var.availability_zone}\"\r\n        size              =  \"${var.size}\"\r\n        type              =  \"${var.type}\"\r\n    }\r\n    \r\n    ### Output of Volume ID ###\r\n    \r\n      output \"vol_id\" {\r\n        value = \"${aws_ebs_volume.additional_vol.id}\"\r\n    }\r\n    \r\n    ### Resource for Volume attachment ###\r\n    \r\n       resource \"aws_volume_attachment\" \"attach_vol\" {\r\n         device_name       = \"${var.device_name}\"\r\n         volume_id         = \"${aws_ebs_volume.additional_vol.id}\"\r\n         instance_id       = \"${aws_instance.ec2.id}\"\r\n         skip_destroy      = \"true\"\r\n    }\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/r/instance.html#get_password_data\r\n  [2]: https://www.terraform.io/docs/providers/aws/r/instance.html#password_data\r\n  [3]: https://www.terraform.io/docs/configuration/interpolation.html#rsadecrypt-string-key-", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm provisioning a single windows server for testing with terraform in AWS. ", "keywords": ["test"]}, {"source": "Text", "text": "Please find my below terraform code ### Resource for EC2 instance creation ### resource \"aws_instance\" \"ec2\" { ami = \"${var.ami}\" instance_type = \"${var.instance_type}\" key_name = \"${var.key_name}\" subnet_id = \"${var.subnet_id}\" security_groups = [\"${var.security_groups}\"] availability_zone = \"${var.availability_zone}\" private_ip = \"x.x.x.x\" get_password_data = \"true\" connection { password = \"${rsadecrypt(self.password_data)}\" } root_block_device { volume_type = \"${var.volume_type}\" volume_size = \"${var.volume_size}\" delete_on_termination = \"true\" } tags { \"Cost Center\" = \"R1\" \"Name\" = \"AD-test\" \"Purpose\" = \"Task\" \"Server Name\" = \"Active Directory\" \"SME Name\" = \"Ravi\" } } output \"instance_id\" { value = \"${aws_instance.ec2.id}\" } ### Resource for EBS volume creation ### resource \"aws_ebs_volume\" \"additional_vol\" { availability_zone = \"${var.availability_zone}\" size = \"${var.size}\" type = \"${var.type}\" } ### Output of Volume ID ### output \"vol_id\" { value = \"${aws_ebs_volume.additional_vol.id}\" } ### Resource for Volume attachment ### resource \"aws_volume_attachment\" \"attach_vol\" { device_name = \"${var.device_name}\" volume_id = \"${aws_ebs_volume.additional_vol.id}\" instance_id = \"${aws_instance.ec2.id}\" skip_destroy = \"true\" } [1]: https://www.terraform.io/docs/providers/aws/r/instance.html#get_password_data [2]: https://www.terraform.io/docs/providers/aws/r/instance.html#password_data [3]: https://www.terraform.io/docs/configuration/interpolation.html#rsadecrypt-string-key-", "keywords": ["cost", "instance", "test"]}]}, {"Id": "187933524", "PostHistoryTypeId": "6", "PostId": "51094442", "RevisionGUID": "c45eecd4-3ecd-4aa8-8bec-3c89f72e7563", "CreationDate": "2018-12-16T16:33:19.040", "UserId": "781754", "Comment": "edited tags", "Text": "<amazon-web-services><syntax><interpolation><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "72147081", "PostTypeId": "2", "ParentId": "51094442", "CreationDate": "2022-05-06T20:33:41.243", "Score": "1", "Body": "<p>Rather than having .pem files lying around or explicitly inputting a public key, you can generate the key directly with <code>tls_private_key</code> and then directly copy the resulting password into AWS SSM Parameter Store so you can retrieve it from there after your infrastructure is stood up.</p>\n<p>Here's the way I generate the key:</p>\n<pre><code>resource &quot;tls_private_key&quot; &quot;instance_key&quot; {\n  algorithm = &quot;RSA&quot;\n}\n\nresource &quot;aws_key_pair&quot; &quot;instance_key_pair&quot; {\n  key_name   = &quot;${local.name_prefix}-instance-key&quot;\n  public_key = tls_private_key.instance_key.public_key_openssh\n}\n</code></pre>\n<p>In your <code>aws_instance</code> you want to be sure these are set:</p>\n<pre><code>  key_name                = aws_key_pair.instance_key_pair.key_name\n  get_password_data       = true\n</code></pre>\n<p>Finally, store the resulting password in SSM (NOTE: you need to wrap the private key <code>nonsensitive</code>):</p>\n<pre><code>resource &quot;aws_ssm_parameter&quot; &quot;windows_ec2&quot; {\n  depends_on = [aws_instance.winserver_instance[0]]\n  name       = &quot;/Microsoft/AD/${var.environment}/ec2-win-password&quot;\n  type       = &quot;SecureString&quot;\n  value = rsadecrypt(aws_instance.winserver_instance[0].password_data, nonsensitive(tls_private_key.instance_key\n  .private_key_pem))\n}\n</code></pre>\n", "OwnerUserId": "901376", "LastActivityDate": "2022-05-06T20:33:41.243", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "269640326", "PostHistoryTypeId": "2", "PostId": "72147081", "RevisionGUID": "54809b29-fdcb-47f7-af75-fc1037b003d5", "CreationDate": "2022-05-06T20:33:41.243", "UserId": "901376", "Text": "Rather than having .pem files lying around or explicitly inputting a public key, you can generate the key directly with `tls_private_key` and then directly copy the resulting password into AWS SSM Parameter Store so you can retrieve it from there after your infrastructure is stood up.\r\n\r\nHere's the way I generate the key:\r\n```\r\nresource \"tls_private_key\" \"instance_key\" {\r\n  algorithm = \"RSA\"\r\n}\r\n\r\nresource \"aws_key_pair\" \"instance_key_pair\" {\r\n  key_name   = \"${local.name_prefix}-instance-key\"\r\n  public_key = tls_private_key.instance_key.public_key_openssh\r\n}\r\n```\r\n\r\nIn your `aws_instance` you want to be sure these are set:\r\n```\r\n  key_name                = aws_key_pair.instance_key_pair.key_name\r\n  get_password_data       = true\r\n```\r\n\r\nFinally, store the resulting password in SSM (NOTE: you need to wrap the private key `nonsensitive`):\r\n```\r\nresource \"aws_ssm_parameter\" \"windows_ec2\" {\r\n  depends_on = [aws_instance.winserver_instance[0]]\r\n  name       = \"/Microsoft/AD/${var.environment}/ec2-win-password\"\r\n  type       = \"SecureString\"\r\n  value = rsadecrypt(aws_instance.winserver_instance[0].password_data, nonsensitive(tls_private_key.instance_key\r\n  .private_key_pem))\r\n}", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Here's the way I generate the key: ``` resource \"tls_private_key\" \"instance_key\" { algorithm = \"RSA\" } resource \"aws_key_pair\" \"instance_key_pair\" { key_name = \"${local.name_prefix}-instance-key\" public_key = tls_private_key.instance_key.public_key_openssh } ``` In your `aws_instance` you want to be sure these are set: ``` key_name = aws_key_pair.instance_key_pair.key_name get_password_data = true ``` Finally, store the resulting password in SSM (NOTE: you need to wrap the private key `nonsensitive`): ``` resource \"aws_ssm_parameter\" \"windows_ec2\" { depends_on = [aws_instance.winserver_instance[0]] name = \"/Microsoft/AD/${var.environment}/ec2-win-password\" type = \"SecureString\" value = rsadecrypt(aws_instance.winserver_instance[0].password_data, nonsensitive(tls_private_key.instance_key .private_key_pem)) }", "keywords": ["instance"]}]}], "filtered-sentences": []}, {"Id": "51127788", "PostTypeId": "2", "ParentId": "51094442", "CreationDate": "2018-07-01T23:48:40.860", "Score": "11", "Body": "<p>The password is encrypted using the key_pair you specified when launching the instance, you still need to use it to decrypt as <code>password_data</code> is still just the base64 encoded <strong>encrypted</strong> password data.</p>\n\n<p>You should use <code>${rsadecrypt(self.password_data,file(\"/path/to/private_key.pem\"))}</code></p>\n\n<p>This is for good reason. You really don't want just a base64 encoded password floating around in state.</p>\n\n<p>Short version:\nYou are missing the second argument in the interpolation function.</p>\n", "OwnerUserId": "7764563", "LastActivityDate": "2018-07-01T23:48:40.860", "CommentCount": "9", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "89243842", "PostId": "51127788", "Score": "0", "Text": "Error: Error refreshing state: 1 error(s) occurred:\n\n* module.Windows_ec2.output.ec2_password: rsadecrypt: crypto/rsa: decryption error in:\n\n${rsadecrypt(aws_instance.ec2.password_data, file(\"C:/terraform/Task1/test.pem\"))}", "CreationDate": "2018-07-02T05:26:59.413", "UserId": "4586921", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Error: Error refreshing state: 1 error(s) occurred: * module.Windows_ec2.output.ec2_password: rsadecrypt: crypto/rsa: decryption error in: ${rsadecrypt(aws_instance.ec2.password_data, file(\"C:/terraform/Task1/test.pem\"))}", "keywords": ["test"]}]}, {"Id": "89243883", "PostId": "51127788", "Score": "0", "Text": "I got the below error when using the `self.password_data` so i made a change.\n\nError: output 'ec2_password': cannot contain self-reference self.password_data", "CreationDate": "2018-07-02T05:28:59.177", "UserId": "4586921", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I got the below error when using the `self.password_data` so i made a change. ", "keywords": ["change"]}]}, {"Id": "89244879", "PostId": "51127788", "Score": "0", "Text": "Nice to see you resolved the first error. The second error seems to suggest something went wrong with decryption. Can you confirm that `C:\\terraform\\Task1\\test.pem` is the private key of the keypair used when launching the instance? Also, on that note, I noticed you used forward slashes instead of backslashes ;) not sure it matters, but it might.", "CreationDate": "2018-07-02T06:17:06.130", "UserId": "7764563", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Can you confirm that `C:\\terraform\\Task1\\test.pem` is the private key of the keypair used when launching the instance? ", "keywords": ["instance", "test"]}]}, {"Id": "89246936", "PostId": "51127788", "Score": "0", "Text": "Yes, i confirm that i'm using the correct key. Also if i use the backslash, it throws me an error like `illegal char escape`. Forward slash should be used here.", "CreationDate": "2018-07-02T07:37:03.767", "UserId": "4586921", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "89267991", "PostId": "51127788", "Score": "0", "Text": "Let me test this myself and get back to you. Maybe something wrong with the interpolation function. I know it's fairly new.", "CreationDate": "2018-07-02T18:33:28.043", "UserId": "7764563", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Let me test this myself and get back to you. ", "keywords": ["test"]}]}, {"Id": "89269622", "PostId": "51127788", "Score": "3", "Text": "Just tested this and it appears to work. Check out my gist: https://gist.github.com/mootpt/1ea7aac43e90d27ab890d45bc3b1d3d5. \n\nAll of this was done on Terraform 0.11.7. Can you confirm your version?", "CreationDate": "2018-07-02T19:41:48.867", "UserId": "7764563", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Just tested this and it appears to work. ", "keywords": ["test"]}]}, {"Id": "89279130", "PostId": "51127788", "Score": "2", "Text": "This comes to an end. its working as expected and could see the decrypted password in a state file.\n**Below is the working code:**\n`output \"ec2_password\" {\n    value = \"${rsadecrypt(aws_instance.ec2.password_data, file(\"C:/terraform/Task1/BOI-BOI.pem\"))}\"`", "CreationDate": "2018-07-03T06:05:03.017", "UserId": "4586921", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "99402132", "PostId": "51127788", "Score": "0", "Text": "Thanks for this, I was looking all day for a solution to this problem.", "CreationDate": "2019-05-31T21:23:41.933", "UserId": "321866", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "100336163", "PostId": "51127788", "Score": "0", "Text": "@mootpt I wonder if you can suggest how to fix the decryption when I have multiple windows instances (https://stackoverflow.com/questions/56884621/how-to-fix-rsadecrypt-argument-1-should-be-type-string-got-type-list-in)", "CreationDate": "2019-07-04T23:18:01.323", "UserId": "58129", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "176714797", "PostHistoryTypeId": "2", "PostId": "51127788", "RevisionGUID": "a2ebd14b-a7fb-4987-810c-eee24638143d", "CreationDate": "2018-07-01T23:48:40.860", "UserId": "7764563", "Text": "The password is encrypted using the key_pair you specified when launching the instance, you still need to use it to decrypt as `password_data` is still just the base64 encoded **encrypted** password data.\r\n\r\nYou should use `${rsadecrypt(self.password_data,file(\"/path/to/private_key.pem\"))}`\r\n\r\nThis is for good reason. You really don't want just a base64 encoded password floating around in state.\r\n\r\nShort version:\r\nYou are missing the second argument in the interpolation function.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The password is encrypted using the key_pair you specified when launching the instance, you still need to use it to decrypt as `password_data` is still just the base64 encoded **encrypted** password data. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "The password is encrypted using the key_pair you specified when launching the instance, you still need to use it to decrypt as password_data is still just the base64 encoded encrypted password data. ", "keywords": ["instance"]}]}, {"Id": "64152250", "PostTypeId": "2", "ParentId": "51094442", "CreationDate": "2020-10-01T09:09:44.253", "Score": "0", "Body": "<p>I know this is not related to the actual question but it might be useful if you don't want to expose your private key in a public environment (e.g.. Git)</p>\n<p>I would rather print the encrypted password</p>\n<pre><code>resource &quot;aws_instance&quot; &quot;ec2&quot; {\n    ami = .....\n    instance_type = .....\n    security_groups = [.....]\n    subnet_id = .....\n    iam_instance_profile = .....\n    key_name = .....\n    get_password_data = &quot;true&quot;\n    tags = {\n        Name = .....\n    }\n}\n</code></pre>\n<p>Like this</p>\n<pre><code>output &quot;Administrator_Password&quot; {\n   value = [\n     aws_instance.ec2.password_data\n   ]\n }\n</code></pre>\n<p>Then,</p>\n<ul>\n<li><p>Get base64 password and put it in a file called pwdbase64.txt</p>\n</li>\n<li><p>Run this command to decode the base64 to bin file</p>\n<p><strong>certutil -decode pwdbase64.txt password.bin</strong></p>\n</li>\n<li><p>Run this command to decrypt your password.bin</p>\n<p><strong>openssl rsautl -decrypt -inkey privatekey.openssh -in password.bin</strong></p>\n</li>\n</ul>\n<p>If you don't know how to play with openssl. Please check <a href=\"https://stackoverflow.com/a/29011321\">this</a> post</p>\n<p>privatekey.openssh should look like:</p>\n<pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCd+qQbLiSVuNludd67EtepR3g1+VzV6gjsZ+Q+RtuLf88cYQA3\n6M4rjVAy......1svfaU/powWKk7WWeE58dnnTZoLvHQ\nZUvFlHE/LUHCQkx8sSECQGatJGiS5fgZhvpzLn4amNwKkozZ3tc02fMzu8IgdEit\njrk5Zq8Vg71vH1Z5OU0kjgrR4ZCjG9ngGdaFV7K7ki0=\n-----END RSA PRIVATE KEY-----\n</code></pre>\n<p>public key should look like:</p>\n<pre><code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQAB......iFZmwQ==\n</code></pre>\n<p>terraform key pair code should look like</p>\n<pre><code>resource &quot;aws_key_pair&quot; &quot;key_pair_ec2&quot; {\n   key_name = &quot;key_pair_ec2&quot;\n   public_key = &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQAB......iFZmwQ==&quot;\n}\n</code></pre>\n<p><em>Pd: You can use puttygen to generate the keys</em></p>\n", "OwnerUserId": "8405097", "LastEditorUserId": "8405097", "LastEditDate": "2020-10-01T15:50:46.380", "LastActivityDate": "2020-10-01T15:50:46.380", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "231930608", "PostHistoryTypeId": "2", "PostId": "64152250", "RevisionGUID": "4c3793de-b73d-43b6-a5dc-add67cbc7891", "CreationDate": "2020-10-01T09:09:44.253", "UserId": "8405097", "Text": "I would rather print the encrypted password\r\n\r\n    resource \"aws_instance\" \"ec2\" {\r\n        ami = .....\r\n        instance_type = .....\r\n        security_groups = [.....]\r\n        subnet_id = .....\r\n        iam_instance_profile = .....\r\n        key_name = .....\r\n        get_password_data = \"true\"\r\n        tags = {\r\n            Name = .....\r\n        }\r\n    }\r\n\r\nLike this\r\n\r\n    output \"Administrator_Password\" {\r\n       value = [\r\n         aws_instance.ec2.password_data\r\n       ]\r\n     }\r\n\r\nThen, \r\n\r\n- Get base64 password and put it in a file called pwdbase64.txt\r\n- Run this command to decode the base64 to bin file\r\n\r\n    **certutil -decode pwdbase64.txt password.bin**\r\n\r\n- Run this command to decrypt your password.bin\r\n\r\n    **openssl rsautl -decrypt -inkey privatekey.openssh -in password.bin**\r\n\r\nIf you don't know how to play with openssl. Please check [this][1] post\r\n\r\nprivatekey.openssh should look like:\r\n\r\n    -----BEGIN RSA PRIVATE KEY-----\r\n    MIICXAIBAAKBgQCd+qQbLiSVuNludd67EtepR3g1+VzV6gjsZ+Q+RtuLf88cYQA3\r\n    6M4rjVAy......1svfaU/powWKk7WWeE58dnnTZoLvHQ\r\n    ZUvFlHE/LUHCQkx8sSECQGatJGiS5fgZhvpzLn4amNwKkozZ3tc02fMzu8IgdEit\r\n    jrk5Zq8Vg71vH1Z5OU0kjgrR4ZCjG9ngGdaFV7K7ki0=\r\n    -----END RSA PRIVATE KEY-----\r\n\r\npublic key should look like:\r\n\r\n    ssh-rsa AAAAB3NzaC1yc2EAAAADAQAB......iFZmwQ==\r\n\r\nterraform key pair code should look like\r\n\r\n    resource \"aws_key_pair\" \"key_pair_ec2\" {\r\n       key_name = \"key_pair_ec2\"\r\n       public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQAB......iFZmwQ==\"\r\n    }\r\n\r\n*Pd: You can use puttygen to generate the keys*\r\n\r\n  [1]: https://stackoverflow.com/a/29011321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "231954106", "PostHistoryTypeId": "5", "PostId": "64152250", "RevisionGUID": "a34b778d-d202-4c62-83b5-df56322c54e8", "CreationDate": "2020-10-01T14:56:58.717", "UserId": "8405097", "Comment": "added 142 characters in body", "Text": "I know this is not related to the actual question but it might be useful if you don't want to upload your private key to git for instance.\r\n\r\nI would rather print the encrypted password\r\n\r\n    resource \"aws_instance\" \"ec2\" {\r\n        ami = .....\r\n        instance_type = .....\r\n        security_groups = [.....]\r\n        subnet_id = .....\r\n        iam_instance_profile = .....\r\n        key_name = .....\r\n        get_password_data = \"true\"\r\n        tags = {\r\n            Name = .....\r\n        }\r\n    }\r\n\r\nLike this\r\n\r\n    output \"Administrator_Password\" {\r\n       value = [\r\n         aws_instance.ec2.password_data\r\n       ]\r\n     }\r\n\r\nThen, \r\n\r\n- Get base64 password and put it in a file called pwdbase64.txt\r\n- Run this command to decode the base64 to bin file\r\n\r\n    **certutil -decode pwdbase64.txt password.bin**\r\n\r\n- Run this command to decrypt your password.bin\r\n\r\n    **openssl rsautl -decrypt -inkey privatekey.openssh -in password.bin**\r\n\r\nIf you don't know how to play with openssl. Please check [this][1] post\r\n\r\nprivatekey.openssh should look like:\r\n\r\n    -----BEGIN RSA PRIVATE KEY-----\r\n    MIICXAIBAAKBgQCd+qQbLiSVuNludd67EtepR3g1+VzV6gjsZ+Q+RtuLf88cYQA3\r\n    6M4rjVAy......1svfaU/powWKk7WWeE58dnnTZoLvHQ\r\n    ZUvFlHE/LUHCQkx8sSECQGatJGiS5fgZhvpzLn4amNwKkozZ3tc02fMzu8IgdEit\r\n    jrk5Zq8Vg71vH1Z5OU0kjgrR4ZCjG9ngGdaFV7K7ki0=\r\n    -----END RSA PRIVATE KEY-----\r\n\r\npublic key should look like:\r\n\r\n    ssh-rsa AAAAB3NzaC1yc2EAAAADAQAB......iFZmwQ==\r\n\r\nterraform key pair code should look like\r\n\r\n    resource \"aws_key_pair\" \"key_pair_ec2\" {\r\n       key_name = \"key_pair_ec2\"\r\n       public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQAB......iFZmwQ==\"\r\n    }\r\n\r\n*Pd: You can use puttygen to generate the keys*\r\n\r\n  [1]: https://stackoverflow.com/a/29011321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I know this is not related to the actual question but it might be useful if you don't want to upload your private key to git for instance. ", "keywords": ["instance"]}]}, {"Id": "231958065", "PostHistoryTypeId": "5", "PostId": "64152250", "RevisionGUID": "8060cbd6-6043-4bbe-9cd1-07eac8cae7b3", "CreationDate": "2020-10-01T15:50:46.380", "UserId": "8405097", "Comment": "added 15 characters in body", "Text": "I know this is not related to the actual question but it might be useful if you don't want to expose your private key in a public environment (e.g.. Git)\r\n\r\nI would rather print the encrypted password\r\n\r\n    resource \"aws_instance\" \"ec2\" {\r\n        ami = .....\r\n        instance_type = .....\r\n        security_groups = [.....]\r\n        subnet_id = .....\r\n        iam_instance_profile = .....\r\n        key_name = .....\r\n        get_password_data = \"true\"\r\n        tags = {\r\n            Name = .....\r\n        }\r\n    }\r\n\r\nLike this\r\n\r\n    output \"Administrator_Password\" {\r\n       value = [\r\n         aws_instance.ec2.password_data\r\n       ]\r\n     }\r\n\r\nThen, \r\n\r\n- Get base64 password and put it in a file called pwdbase64.txt\r\n- Run this command to decode the base64 to bin file\r\n\r\n    **certutil -decode pwdbase64.txt password.bin**\r\n\r\n- Run this command to decrypt your password.bin\r\n\r\n    **openssl rsautl -decrypt -inkey privatekey.openssh -in password.bin**\r\n\r\nIf you don't know how to play with openssl. Please check [this][1] post\r\n\r\nprivatekey.openssh should look like:\r\n\r\n    -----BEGIN RSA PRIVATE KEY-----\r\n    MIICXAIBAAKBgQCd+qQbLiSVuNludd67EtepR3g1+VzV6gjsZ+Q+RtuLf88cYQA3\r\n    6M4rjVAy......1svfaU/powWKk7WWeE58dnnTZoLvHQ\r\n    ZUvFlHE/LUHCQkx8sSECQGatJGiS5fgZhvpzLn4amNwKkozZ3tc02fMzu8IgdEit\r\n    jrk5Zq8Vg71vH1Z5OU0kjgrR4ZCjG9ngGdaFV7K7ki0=\r\n    -----END RSA PRIVATE KEY-----\r\n\r\npublic key should look like:\r\n\r\n    ssh-rsa AAAAB3NzaC1yc2EAAAADAQAB......iFZmwQ==\r\n\r\nterraform key pair code should look like\r\n\r\n    resource \"aws_key_pair\" \"key_pair_ec2\" {\r\n       key_name = \"key_pair_ec2\"\r\n       public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQAB......iFZmwQ==\"\r\n    }\r\n\r\n*Pd: You can use puttygen to generate the keys*\r\n\r\n  [1]: https://stackoverflow.com/a/29011321", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I'm provisioning a single windows server for testing with terraform in AWS. ", "keywords": ["test"]}]}