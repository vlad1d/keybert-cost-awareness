{"Id": "67392350", "PostTypeId": "1", "CreationDate": "2021-05-04T21:17:19.573", "Score": "0", "ViewCount": "714", "Body": "<blockquote>\n<p><em><strong>What specific changes need to be made to the terraform syntax below in order for the <code>local-exec</code> provisioner to be able to successfully run the <code>az</code> cli command?</strong></em></p>\n</blockquote>\n<p>Here is the terraform code that is causing the problem:</p>\n<pre><code>resource &quot;azuredevops_git_repository&quot; &quot;repository&quot; {\n  project_id = data.azuredevops_project.p.id\n  name = var.repoName\n  initialization {\n    init_type = &quot;Uninitialized&quot;\n  }\n  provisioner &quot;local-exec&quot; {\n    working_dir = &quot;C:\\\\projects\\\\acm\\\\Apr2021\\\\config-outside-acm-path\\\\vars\\\\deleteThis\\\\&quot;\n    command = &quot;az repos import create --git-source-url \\&quot;${var.sourceRepo}\\&quot; --repository \\&quot;${azuredevops_git_repository.repository.name}\\&quot; --organization \\&quot;${var.azdoOrgServiceURL}\\&quot; --project \\&quot;${var.projectName}\\&quot;&quot;\n  }\n}\n</code></pre>\n<p>Here is the error we are getting:</p>\n<pre><code>Error: Error running command \n'az repos import create --git-source-url &quot;https://github.com/PublicGitHubAccount/public-github-repo.git&quot; \n--repository &quot;private-azure-repo&quot; --organization &quot;https://dev.azure.com/OurValidOrganizationName&quot; \n--project &quot;SampleProject&quot;'\n: exit status 1. \n\nOutput: --organization must be specified. \nThe value should be the URI of your Azure DevOps organization, for example: https://dev.azure.com/MyOrganization/ or your Azure DevOps Server organization. \nYou can set a default value by running: az devops configure --defaults organization=https://dev.azure.com/MyOrganization/. \nFor auto detection to work (--detect true), you must be in a local Git directory that has a &quot;remote&quot; referencing a Azure DevOps or Azure DevOps Server repository.\n</code></pre>\n<p>When we copy the command from the error message and we run that exact command as a shell command through a Python program, the command runs properly without error.  Here is the command that runs properly when executed using a Python shell:</p>\n<pre><code>'az repos import create --git-source-url &quot;https://github.com/PublicGitHubAccount/public-github-repo.git&quot; \n--repository &quot;private-azure-repo&quot; --organization &quot;https://dev.azure.com/OurValidOrganizationName&quot; \n--project &quot;SampleProject&quot;'  \n</code></pre>\n<p>Therefore, the problem is that terraform is failing to see the <code>--organization</code> variable even though you can see from above that terraform is properly interpolating the string.</p>\n", "OwnerUserId": "807797", "LastActivityDate": "2021-05-05T08:31:33.130", "Title": "terraform local-exec provisioner failing to see azdo organization in cli command", "Tags": "<azure><azure-devops><terraform><terraform-provider-azure>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "245968674", "PostHistoryTypeId": "2", "PostId": "67392350", "RevisionGUID": "b64a1736-bb67-49b9-8392-905c5a28bd6a", "CreationDate": "2021-05-04T21:17:19.573", "UserId": "807797", "Text": ">***What specific changes need to be made to the terraform syntax below in order for the `local-exec` provisioner to be able to successfully run the `az` cli command?***  \r\n  \r\nHere is the terraform code that is causing the problem:  \r\n  \r\n    resource \"azuredevops_git_repository\" \"repository\" {\r\n      project_id = data.azuredevops_project.p.id\r\n      name = var.repoName\r\n      initialization {\r\n        init_type = \"Uninitialized\"\r\n      }\r\n      provisioner \"local-exec\" {\r\n        working_dir = \"C:\\\\projects\\\\acm\\\\Apr2021\\\\config-outside-acm-path\\\\vars\\\\deleteThis\\\\\"\r\n        command = \"az repos import create --git-source-url \\\"${var.sourceRepo}\\\" --repository \\\"${azuredevops_git_repository.repository.name}\\\" --organization \\\"${var.azdoOrgServiceURL}\\\" --project \\\"${var.projectName}\\\"\"\r\n      }\r\n    }\r\n    \r\nHere is the error we are getting:  \r\n  \r\n    Error: Error running command \r\n    'az repos import create --git-source-url \"https://github.com/PublicGitHubAccount/public-github-repo.git\" \r\n    --repository \"private-azure-repo\" --organization \"https://dev.azure.com/OurValidOrganizationName\" \r\n    --project \"SampleProject\"'\r\n    : exit status 1. \r\n    \r\n    Output: --organization must be specified. \r\n    The value should be the URI of your Azure DevOps organization, for example: https://dev.azure.com/MyOrganization/ or your Azure DevOps Server organization. \r\n    You can set a default value by running: az devops configure --defaults organization=https://dev.azure.com/MyOrganization/. \r\n    For auto detection to work (--detect true), you must be in a local Git directory that has a \"remote\" referencing a Azure DevOps or Azure DevOps Server repository.\r\n  \r\nWhen we copy the command from the error message and we run that exact command as a shell command through a Python program, the command runs properly without error.  Here is the command that runs properly when executed using a Python shell:  \r\n  \r\n    'az repos import create --git-source-url \"https://github.com/PublicGitHubAccount/public-github-repo.git\" \r\n    --repository \"private-azure-repo\" --organization \"https://dev.azure.com/OurValidOrganizationName\" \r\n    --project \"SampleProject\"'  \r\n  \r\nTherefore, the problem is that terraform is failing to see the `--organization` variable even though you can see from above that terraform is properly interpolating the string.  \r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": ">***What specific changes need to be made to the terraform syntax below in order for the `local-exec` provisioner to be able to successfully run the `az` cli command?*** ", "keywords": ["change"]}]}, {"Id": "245968675", "PostHistoryTypeId": "1", "PostId": "67392350", "RevisionGUID": "b64a1736-bb67-49b9-8392-905c5a28bd6a", "CreationDate": "2021-05-04T21:17:19.573", "UserId": "807797", "Text": "terraform local-exec provisioner failing to see azdo organization in cli command", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "245968676", "PostHistoryTypeId": "3", "PostId": "67392350", "RevisionGUID": "b64a1736-bb67-49b9-8392-905c5a28bd6a", "CreationDate": "2021-05-04T21:17:19.573", "UserId": "807797", "Text": "<azure><azure-devops><terraform><terraform-provider-azure>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "67397747", "PostTypeId": "2", "ParentId": "67392350", "CreationDate": "2021-05-05T08:31:33.130", "Score": "0", "Body": "<p>Try to omit the double quotes (<strong>&quot;</strong>) that surrounding the URL to see if it can work:</p>\n<pre><code>command = &quot;az repos import create --git-source-url \\&quot;${var.sourceRepo}\\&quot; --repository \\&quot;${azuredevops_git_repository.repository.name}\\&quot; --organization ${var.azdoOrgServiceURL} --project \\&quot;${var.projectName}\\&quot;&quot;\n</code></pre>\n", "OwnerUserId": "14697693", "LastActivityDate": "2021-05-05T08:31:33.130", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "119128289", "PostId": "67397747", "Score": "0", "Text": "Omitting the quotes results in the literal `var.sourceRepo` being rendered instead of the variable value.  Note that the quotes are already escaped.  Also note that terraform requires the escaped quotes as part of its interpolation syntax.", "CreationDate": "2021-05-05T08:37:06.803", "UserId": "807797", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119152803", "PostId": "67397747", "Score": "0", "Text": "Hi @CodeMed,\nHow about explicitly entering the URL instead of using a variable in the command? Just like you have tried in the Python code.\nI think the issue may be caused by some syntax or format error that the terraform code may have some syntax / format restrictions and conventions.", "CreationDate": "2021-05-06T02:48:10.697", "UserId": "14697693", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "119205794", "PostId": "67397747", "Score": "0", "Text": "The explicit command works at the command line.  Therefore, the problem is in the way that the azure devops terraform provider is parsing the variable interpolation syntax.  We need to use variables inside terraform and not literals because, as you can imagine, the code to change literal strings in terraform modules during automation would be brittle, expensive to maintain, and prone to security breaches when secrets would accidentally get sent into version control.", "CreationDate": "2021-05-07T21:29:07.017", "UserId": "807797", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Therefore, the problem is in the way that the azure devops terraform provider is parsing the variable interpolation syntax. ", "keywords": ["provider"]}, {"source": "Text", "text": "We need to use variables inside terraform and not literals because, as you can imagine, the code to change literal strings in terraform modules during automation would be brittle, expensive to maintain, and prone to security breaches when secrets would accidentally get sent into version control.", "keywords": ["expense", "change"]}]}, {"Id": "119281655", "PostId": "67397747", "Score": "0", "Text": "Hi @CodeMed, if possible, can you share the YAML file of your pipeline on Azure DevOps? And specify which task are you using to run the terraform code in the pipeline?", "CreationDate": "2021-05-11T11:12:28.853", "UserId": "14697693", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "245991915", "PostHistoryTypeId": "2", "PostId": "67397747", "RevisionGUID": "669638ab-a00b-4f49-84e9-c6542308acb2", "CreationDate": "2021-05-05T08:31:33.130", "UserId": "14697693", "Text": "Try to omit the double quotes (**\"**) that surrounding the URL to see if it can work:\r\n```\r\ncommand = \"az repos import create --git-source-url \\\"${var.sourceRepo}\\\" --repository \\\"${azuredevops_git_repository.repository.name}\\\" --organization ${var.azdoOrgServiceURL} --project \\\"${var.projectName}\\\"\"\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "What specific changes need to be made to the terraform syntax below in order for the local-exec provisioner to be able to successfully run the az cli command? ", "keywords": ["change"]}]}