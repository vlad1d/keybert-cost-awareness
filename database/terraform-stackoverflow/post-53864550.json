{"Id": "53864550", "PostTypeId": "1", "AcceptedAnswerId": "53867447", "CreationDate": "2018-12-20T07:59:53.477", "Score": "9", "ViewCount": "4990", "Body": "<p>I want to use Terraform for deployment of my lambda functions. I did something like: </p>\n\n<pre><code>provider \"aws\" {\n    region = \"ap-southeast-1\"\n}\n\ndata \"archive_file\" \"lambda_zip\" {\n    type = \"zip\"\n    source_dir = \"src\"\n    output_path = \"build/lambdas.zip\"\n}\n\nresource \"aws_lambda_function\" \"test_terraform_function\" {\n    filename = \"build/lambdas.zip\"\n    function_name = \"test_terraform_function\"\n    handler = \"test.handler\"\n    runtime = \"nodejs8.10\"\n    role = \"arn:aws:iam::000000000:role/xxx-lambda-basic\"\n    memory_size = 128\n    timeout = 5\n    source_code_hash = \"${data.archive_file.lambda_zip.output_base64sha256}\"\n    tags = {\n        \"Cost Center\" = \"Consulting\"\n        Developer = \"Jiew Meng\"\n    }\n}\n</code></pre>\n\n<p>I find that when there is no change to test.js, terraform correctly detects no change </p>\n\n<pre><code>No changes. Infrastructure is up-to-date.\n</code></pre>\n\n<p>When I do change the test.js file, terraform does detect a change: </p>\n\n<pre><code>An execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  ~ aws_lambda_function.test_terraform_function\n      last_modified:    \"2018-12-20T07:47:16.888+0000\" =&gt; &lt;computed&gt;\n      source_code_hash: \"KpnhsytFF0yul6iESDCXiD2jl/LI9dv56SIJnwEi/hY=\" =&gt; \"JWIYsT8SszUjKEe1aVDY/ZWBVfrZYhhb1GrJL26rYdI=\"\n</code></pre>\n\n<p>It does zip up the new zip, however, it does not seem to update the function with the new ZIP. It seems like it thinks since the filename has no change, it does not upload ... How can I fix this behaviour? </p>\n\n<p>===== </p>\n\n<p>Following some of the answers here, I tried: </p>\n\n<ul>\n<li>Using <code>null_resource</code></li>\n<li>Using S3 bucket/object with etag</li>\n</ul>\n\n<p>And it does not update ... Why is that? </p>\n", "OwnerUserId": "292291", "LastEditorUserId": "292291", "LastEditDate": "2019-01-02T06:27:16.417", "LastActivityDate": "2019-01-02T06:27:16.417", "Title": "Terraform not uploading a new ZIP", "Tags": "<amazon-web-services><aws-lambda><terraform>", "AnswerCount": "4", "CommentCount": "2", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "94592997", "PostId": "53864550", "Score": "0", "Text": "If you see the output above, terraform has uploaded (or will upload) the function. For versioned functions it needs to be published, as Karl wrote in his answer.", "CreationDate": "2018-12-20T16:52:19.007", "UserId": "2753241", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "94951238", "PostId": "53864550", "Score": "0", "Text": "QQ. I am not able to replicate same behavior on my end?. which version of terraform are you on and are you running `terraform apply` command only right?. How do you know the function is not updated?. If you are validating via console, make sure you disable caching on lambda console.(Chrome: F12 -> Network -> Disable Cache) and check once while keep opening developer tools. Sometimes console gives me cached version of code on browser. PS - if this is the cause, let me know I will put my comment as answer :)", "CreationDate": "2019-01-06T04:54:32.000", "UserId": "5030709", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "188182034", "PostHistoryTypeId": "2", "PostId": "53864550", "RevisionGUID": "63a9d6de-4840-4557-ae1f-d43d0643c7cc", "CreationDate": "2018-12-20T07:59:53.477", "UserId": "292291", "Text": "I want to use Terraform for deployment of my lambda functions. I did something like: \r\n\r\n    provider \"aws\" {\r\n        region = \"ap-southeast-1\"\r\n    }\r\n    \r\n    data \"archive_file\" \"lambda_zip\" {\r\n        type = \"zip\"\r\n        source_dir = \"src\"\r\n        output_path = \"build/lambdas.zip\"\r\n    }\r\n    \r\n    resource \"aws_lambda_function\" \"test_terraform_function\" {\r\n        filename = \"build/lambdas.zip\"\r\n        function_name = \"test_terraform_function\"\r\n        handler = \"test.handler\"\r\n        runtime = \"nodejs8.10\"\r\n        role = \"arn:aws:iam::621567429603:role/income2-lambda-basic\"\r\n        memory_size = 128\r\n        timeout = 5\r\n        source_code_hash = \"${data.archive_file.lambda_zip.output_base64sha256}\"\r\n        tags = {\r\n            \"Cost Center\" = \"Consulting\"\r\n            Developer = \"Jiew Meng\"\r\n            Project = \"DigitalIncome\"\r\n        }\r\n    }\r\n\r\nI find that when there is no change to test.js, terraform correctly detects no change \r\n\r\n    No changes. Infrastructure is up-to-date.\r\n\r\nWhen I do change the test.js file, terraform does detect a change: \r\n\r\n    An execution plan has been generated and is shown below.\r\n    Resource actions are indicated with the following symbols:\r\n      ~ update in-place\r\n    \r\n    Terraform will perform the following actions:\r\n    \r\n      ~ aws_lambda_function.test_terraform_function\r\n          last_modified:    \"2018-12-20T07:47:16.888+0000\" => <computed>\r\n          source_code_hash: \"KpnhsytFF0yul6iESDCXiD2jl/LI9dv56SIJnwEi/hY=\" => \"JWIYsT8SszUjKEe1aVDY/ZWBVfrZYhhb1GrJL26rYdI=\"\r\n\r\nIt does zip up the new zip, however, it does not seem to update the function with the new ZIP. It seems like it thinks since the filename has no change, it does not upload ... How can I fix this behaviour? \r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I did something like: provider \"aws\" { region = \"ap-southeast-1\" } data \"archive_file\" \"lambda_zip\" { type = \"zip\" source_dir = \"src\" output_path = \"build/lambdas.zip\" } resource \"aws_lambda_function\" \"test_terraform_function\" { filename = \"build/lambdas.zip\" function_name = \"test_terraform_function\" handler = \"test.handler\" runtime = \"nodejs8.10\" role = \"arn:aws:iam::621567429603:role/income2-lambda-basic\" memory_size = 128 timeout = 5 source_code_hash = \"${data.archive_file.lambda_zip.output_base64sha256}\" tags = { \"Cost Center\" = \"Consulting\" Developer = \"Jiew Meng\" Project = \"DigitalIncome\" } } I find that when there is no change to test.js, terraform correctly detects no change No changes. ", "keywords": ["cost", "provider", "change", "test"]}, {"source": "Text", "text": "When I do change the test.js file, terraform does detect a change: ", "keywords": ["change", "test"]}, {"source": "Text", "text": "Resource actions are indicated with the following symbols: ~ update in-place Terraform will perform the following actions: ~ aws_lambda_function.test_terraform_function last_modified: \"2018-12-20T07:47:16.888+0000\" => source_code_hash: \"KpnhsytFF0yul6iESDCXiD2jl/LI9dv56SIJnwEi/hY=\" => \"JWIYsT8SszUjKEe1aVDY/ZWBVfrZYhhb1GrJL26rYdI=\" ", "keywords": ["test"]}, {"source": "Text", "text": "It seems like it thinks since the filename has no change, it does not upload ... ", "keywords": ["change"]}]}, {"Id": "188182035", "PostHistoryTypeId": "1", "PostId": "53864550", "RevisionGUID": "63a9d6de-4840-4557-ae1f-d43d0643c7cc", "CreationDate": "2018-12-20T07:59:53.477", "UserId": "292291", "Text": "Terraform not uploading a new ZIP", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "188182036", "PostHistoryTypeId": "3", "PostId": "53864550", "RevisionGUID": "63a9d6de-4840-4557-ae1f-d43d0643c7cc", "CreationDate": "2018-12-20T07:59:53.477", "UserId": "292291", "Text": "<amazon-web-services><aws-lambda><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "188764566", "PostHistoryTypeId": "5", "PostId": "53864550", "RevisionGUID": "87021a82-f023-41af-985b-5a4caff74fbb", "CreationDate": "2019-01-02T03:02:44.947", "UserId": "292291", "Comment": "deleted 46 characters in body", "Text": "I want to use Terraform for deployment of my lambda functions. I did something like: \r\n\r\n    provider \"aws\" {\r\n        region = \"ap-southeast-1\"\r\n    }\r\n    \r\n    data \"archive_file\" \"lambda_zip\" {\r\n        type = \"zip\"\r\n        source_dir = \"src\"\r\n        output_path = \"build/lambdas.zip\"\r\n    }\r\n    \r\n    resource \"aws_lambda_function\" \"test_terraform_function\" {\r\n        filename = \"build/lambdas.zip\"\r\n        function_name = \"test_terraform_function\"\r\n        handler = \"test.handler\"\r\n        runtime = \"nodejs8.10\"\r\n        role = \"arn:aws:iam::000000000:role/xxx-lambda-basic\"\r\n        memory_size = 128\r\n        timeout = 5\r\n        source_code_hash = \"${data.archive_file.lambda_zip.output_base64sha256}\"\r\n        tags = {\r\n            \"Cost Center\" = \"Consulting\"\r\n            Developer = \"Jiew Meng\"\r\n        }\r\n    }\r\n\r\nI find that when there is no change to test.js, terraform correctly detects no change \r\n\r\n    No changes. Infrastructure is up-to-date.\r\n\r\nWhen I do change the test.js file, terraform does detect a change: \r\n\r\n    An execution plan has been generated and is shown below.\r\n    Resource actions are indicated with the following symbols:\r\n      ~ update in-place\r\n    \r\n    Terraform will perform the following actions:\r\n    \r\n      ~ aws_lambda_function.test_terraform_function\r\n          last_modified:    \"2018-12-20T07:47:16.888+0000\" => <computed>\r\n          source_code_hash: \"KpnhsytFF0yul6iESDCXiD2jl/LI9dv56SIJnwEi/hY=\" => \"JWIYsT8SszUjKEe1aVDY/ZWBVfrZYhhb1GrJL26rYdI=\"\r\n\r\nIt does zip up the new zip, however, it does not seem to update the function with the new ZIP. It seems like it thinks since the filename has no change, it does not upload ... How can I fix this behaviour? \r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I did something like: provider \"aws\" { region = \"ap-southeast-1\" } data \"archive_file\" \"lambda_zip\" { type = \"zip\" source_dir = \"src\" output_path = \"build/lambdas.zip\" } resource \"aws_lambda_function\" \"test_terraform_function\" { filename = \"build/lambdas.zip\" function_name = \"test_terraform_function\" handler = \"test.handler\" runtime = \"nodejs8.10\" role = \"arn:aws:iam::000000000:role/xxx-lambda-basic\" memory_size = 128 timeout = 5 source_code_hash = \"${data.archive_file.lambda_zip.output_base64sha256}\" tags = { \"Cost Center\" = \"Consulting\" Developer = \"Jiew Meng\" } } I find that when there is no change to test.js, terraform correctly detects no change No changes. ", "keywords": ["cost", "provider", "change", "test"]}, {"source": "Text", "text": "When I do change the test.js file, terraform does detect a change: ", "keywords": ["change", "test"]}, {"source": "Text", "text": "Resource actions are indicated with the following symbols: ~ update in-place Terraform will perform the following actions: ~ aws_lambda_function.test_terraform_function last_modified: \"2018-12-20T07:47:16.888+0000\" => source_code_hash: \"KpnhsytFF0yul6iESDCXiD2jl/LI9dv56SIJnwEi/hY=\" => \"JWIYsT8SszUjKEe1aVDY/ZWBVfrZYhhb1GrJL26rYdI=\" ", "keywords": ["test"]}, {"source": "Text", "text": "It seems like it thinks since the filename has no change, it does not upload ... ", "keywords": ["change"]}]}, {"Id": "188769889", "PostHistoryTypeId": "33", "PostId": "53864550", "RevisionGUID": "8e839e41-5c17-4065-b117-db9fc736d444", "CreationDate": "2019-01-02T06:19:43.677", "UserId": "292291", "Comment": "174102", "filtered-sentences": []}, {"Id": "188770134", "PostHistoryTypeId": "5", "PostId": "53864550", "RevisionGUID": "d87e652d-3669-4cc8-9801-605e2e3d13a6", "CreationDate": "2019-01-02T06:27:16.417", "UserId": "292291", "Comment": "added 166 characters in body", "Text": "I want to use Terraform for deployment of my lambda functions. I did something like: \r\n\r\n    provider \"aws\" {\r\n        region = \"ap-southeast-1\"\r\n    }\r\n    \r\n    data \"archive_file\" \"lambda_zip\" {\r\n        type = \"zip\"\r\n        source_dir = \"src\"\r\n        output_path = \"build/lambdas.zip\"\r\n    }\r\n    \r\n    resource \"aws_lambda_function\" \"test_terraform_function\" {\r\n        filename = \"build/lambdas.zip\"\r\n        function_name = \"test_terraform_function\"\r\n        handler = \"test.handler\"\r\n        runtime = \"nodejs8.10\"\r\n        role = \"arn:aws:iam::000000000:role/xxx-lambda-basic\"\r\n        memory_size = 128\r\n        timeout = 5\r\n        source_code_hash = \"${data.archive_file.lambda_zip.output_base64sha256}\"\r\n        tags = {\r\n            \"Cost Center\" = \"Consulting\"\r\n            Developer = \"Jiew Meng\"\r\n        }\r\n    }\r\n\r\nI find that when there is no change to test.js, terraform correctly detects no change \r\n\r\n    No changes. Infrastructure is up-to-date.\r\n\r\nWhen I do change the test.js file, terraform does detect a change: \r\n\r\n    An execution plan has been generated and is shown below.\r\n    Resource actions are indicated with the following symbols:\r\n      ~ update in-place\r\n    \r\n    Terraform will perform the following actions:\r\n    \r\n      ~ aws_lambda_function.test_terraform_function\r\n          last_modified:    \"2018-12-20T07:47:16.888+0000\" => <computed>\r\n          source_code_hash: \"KpnhsytFF0yul6iESDCXiD2jl/LI9dv56SIJnwEi/hY=\" => \"JWIYsT8SszUjKEe1aVDY/ZWBVfrZYhhb1GrJL26rYdI=\"\r\n\r\nIt does zip up the new zip, however, it does not seem to update the function with the new ZIP. It seems like it thinks since the filename has no change, it does not upload ... How can I fix this behaviour? \r\n\r\n\r\n===== \r\n\r\nFollowing some of the answers here, I tried: \r\n\r\n- Using `null_resource`\r\n- Using S3 bucket/object with etag\r\n\r\nAnd it does not update ... Why is that? ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I did something like: provider \"aws\" { region = \"ap-southeast-1\" } data \"archive_file\" \"lambda_zip\" { type = \"zip\" source_dir = \"src\" output_path = \"build/lambdas.zip\" } resource \"aws_lambda_function\" \"test_terraform_function\" { filename = \"build/lambdas.zip\" function_name = \"test_terraform_function\" handler = \"test.handler\" runtime = \"nodejs8.10\" role = \"arn:aws:iam::000000000:role/xxx-lambda-basic\" memory_size = 128 timeout = 5 source_code_hash = \"${data.archive_file.lambda_zip.output_base64sha256}\" tags = { \"Cost Center\" = \"Consulting\" Developer = \"Jiew Meng\" } } I find that when there is no change to test.js, terraform correctly detects no change No changes. ", "keywords": ["cost", "provider", "change", "test"]}, {"source": "Text", "text": "When I do change the test.js file, terraform does detect a change: ", "keywords": ["change", "test"]}, {"source": "Text", "text": "Resource actions are indicated with the following symbols: ~ update in-place Terraform will perform the following actions: ~ aws_lambda_function.test_terraform_function last_modified: \"2018-12-20T07:47:16.888+0000\" => source_code_hash: \"KpnhsytFF0yul6iESDCXiD2jl/LI9dv56SIJnwEi/hY=\" => \"JWIYsT8SszUjKEe1aVDY/ZWBVfrZYhhb1GrJL26rYdI=\" ", "keywords": ["test"]}, {"source": "Text", "text": "It seems like it thinks since the filename has no change, it does not upload ... ", "keywords": ["change"]}]}, {"Id": "189277863", "PostHistoryTypeId": "34", "PostId": "53864550", "RevisionGUID": "825d0693-0b81-4633-9c1a-ba2c687c938e", "CreationDate": "2019-01-10T08:02:20.533", "UserId": "-1", "Comment": "174102", "filtered-sentences": []}], "answers": [{"Id": "53866475", "PostTypeId": "2", "ParentId": "53864550", "CreationDate": "2018-12-20T10:09:13.030", "Score": "3", "Body": "<p>There is a workaround to trigger the resource to be refreshed, if the target lambda file names are <code>src/main.py</code> and <code>src/handler.py</code>. If you have more files to be managed, add them one by one.</p>\n\n<pre><code>resource \"null_resource\" \"lambda\" {\n  triggers {\n    main    = \"${base64sha256(file(\"src/main.py\"))}\"\n    handler = \"${base64sha256(file(\"src/handler.py\"))}\"\n  }\n}\n\ndata \"archive_file\" \"lambda_zip\" {\n  type        = \"zip\"\n  source_dir  = \"src\"\n  output_path = \"build/lambdas.zip\"\n\n  depends_on = [\"null_resource.lambda\"]\n}\n</code></pre>\n\n<p>Let me know if this works for you.</p>\n", "OwnerUserId": "498256", "LastEditorUserId": "498256", "LastEditDate": "2018-12-20T22:47:37.170", "LastActivityDate": "2018-12-20T22:47:37.170", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "94840760", "PostId": "53866475", "Score": "0", "Text": "I tried using the base64 sha hash of the ZIP instead, but it still does not update the function correctly. When I tried with an S3 object, it does correctly upload the file but does not seem to update function source ...", "CreationDate": "2019-01-02T06:19:27.253", "UserId": "292291", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "188189852", "PostHistoryTypeId": "2", "PostId": "53866475", "RevisionGUID": "a7c59ada-a697-4f41-942a-892e34df5a42", "CreationDate": "2018-12-20T10:09:13.030", "UserId": "498256", "Text": "There is a workaround to trigger the resource to be refreshed, if the target lambda file names are `src/main.py` and `src/handler.py`, you can add more in it\r\n\r\n    resource \"null_resource\" \"lambda\" {\r\n      triggers {\r\n        main    = \"${base64sha256(file(\"src/main.py\"))}\"\r\n        handler = \"${base64sha256(file(\"src/handler.py\"))}\"\r\n      }\r\n    }\r\n    \r\n    data \"archive_file\" \"lambda_zip\" {\r\n      type        = \"zip\"\r\n      source_dir  = \"src\"\r\n      output_path = \"build/lambdas.zip\"\r\n    \r\n      depends_on = [\"null_resource.lambda\"]\r\n    }\r\n\r\nLet me know if this works for you.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "188232942", "PostHistoryTypeId": "5", "PostId": "53866475", "RevisionGUID": "105272f3-1ed7-4caa-a161-f0d3ff6fc6cf", "CreationDate": "2018-12-20T22:47:37.170", "UserId": "498256", "Comment": "added 36 characters in body", "Text": "There is a workaround to trigger the resource to be refreshed, if the target lambda file names are `src/main.py` and `src/handler.py`. If you have more files to be managed, add them one by one.\r\n\r\n    resource \"null_resource\" \"lambda\" {\r\n      triggers {\r\n        main    = \"${base64sha256(file(\"src/main.py\"))}\"\r\n        handler = \"${base64sha256(file(\"src/handler.py\"))}\"\r\n      }\r\n    }\r\n    \r\n    data \"archive_file\" \"lambda_zip\" {\r\n      type        = \"zip\"\r\n      source_dir  = \"src\"\r\n      output_path = \"build/lambdas.zip\"\r\n    \r\n      depends_on = [\"null_resource.lambda\"]\r\n    }\r\n\r\nLet me know if this works for you.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "53874404", "PostTypeId": "2", "ParentId": "53864550", "CreationDate": "2018-12-20T18:47:47.263", "Score": "0", "Body": "<p>I created this module to help ease some of the issues around deploying Lambda with Terraform: <a href=\"https://registry.terraform.io/modules/rojopolis/lambda-python-archive/aws/0.1.4\" rel=\"nofollow noreferrer\">https://registry.terraform.io/modules/rojopolis/lambda-python-archive/aws/0.1.4</a></p>\n\n<p>It may be useful in this scenario.  Basically, it replaces the \"archive_file\" data source with a specialized lambda archive data source to better manage stable source code hash, etc.</p>\n", "OwnerUserId": "633213", "LastActivityDate": "2018-12-20T18:47:47.263", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "188222095", "PostHistoryTypeId": "2", "PostId": "53874404", "RevisionGUID": "cfb932b1-2527-477d-895f-b2fb65f408fb", "CreationDate": "2018-12-20T18:47:47.263", "UserId": "633213", "Text": "I created this module to help ease some of the issues around deploying Lambda with Terraform: https://registry.terraform.io/modules/rojopolis/lambda-python-archive/aws/0.1.4\r\n\r\nIt may be useful in this scenario.  Basically, it replaces the \"archive_file\" data source with a specialized lambda archive data source to better manage stable source code hash, etc.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "53900036", "PostTypeId": "2", "ParentId": "53864550", "CreationDate": "2018-12-22T23:23:21.837", "Score": "2", "Body": "<p>There is 2 things you need to take care of:</p>\n\n<ul>\n<li>upload zip file to S3 if its content has changed</li>\n<li>update Lambda function if zip file content has changed</li>\n</ul>\n\n<p>I can see you are taking care of the latter with <code>source_code_hash</code>. I don't see how you handle the former. It could look like that:</p>\n\n<pre><code>resource \"aws_s3_bucket_object\" \"zip\" {\n  bucket               = \"${aws_s3_bucket.zip.bucket}\"\n  key                  = \"myzip.zip\"\n  source               = \"${path.module}/myzip.zip\"\n  etag                 = \"${md5(file(\"${path.module}/myzip.zip\"))}\"\n}\n</code></pre>\n\n<p><code>etag</code> is the most important option here.</p>\n", "OwnerUserId": "4925383", "LastActivityDate": "2018-12-22T23:23:21.837", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "94838432", "PostId": "53900036", "Score": "0", "Text": "Hmm ... isit required that I use `aws_s3_bucket_object`? I currently only use `aws_lambda_function`. Even then from the docs \"*source_code_hash - (Optional) Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either filename or s3_key. The usual way to set this is ${base64sha256(file(\"file.zip\"))}, where \"file.zip\" is the local filename of the lambda function source archive.*\". It seems like `source_code_hash` should trigger updates?", "CreationDate": "2019-01-02T03:02:01.763", "UserId": "292291", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "94838868", "PostId": "53900036", "Score": "0", "Text": "When I tried this, it says `invalid or unknown key: source` and `\"etag\": this field cannot be set`", "CreationDate": "2019-01-02T03:48:18.963", "UserId": "292291", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "188337020", "PostHistoryTypeId": "2", "PostId": "53900036", "RevisionGUID": "d5150175-9643-422b-bd7f-3b8a7de6aa64", "CreationDate": "2018-12-22T23:23:21.837", "UserId": "4925383", "Text": "There is 2 things you need to take care of:\r\n\r\n- upload zip file to S3 if its content has changed\r\n- update Lambda function if zip file content has changed\r\n\r\nI can see you are taking care of the latter with `source_code_hash`. I don't see how you handle the former. It could look like that:\r\n\r\n    resource \"aws_s3_bucket_object\" \"zip\" {\r\n      bucket               = \"${aws_s3_bucket.zip.bucket}\"\r\n      key                  = \"myzip.zip\"\r\n      source               = \"${path.module}/myzip.zip\"\r\n      etag                 = \"${md5(file(\"${path.module}/myzip.zip\"))}\"\r\n    }\r\n\r\n`etag` is the most important option here.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is 2 things you need to take care of: - upload zip file to S3 if its content has changed - update Lambda function if zip file content has changed I can see you are taking care of the latter with `source_code_hash`. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "There is 2 things you need to take care of: upload zip file to S3 if its content has changed update Lambda function if zip file content has changed I can see you are taking care of the latter with source_code_hash. ", "keywords": ["change"]}]}, {"Id": "53867447", "PostTypeId": "2", "ParentId": "53864550", "CreationDate": "2018-12-20T11:06:13.903", "Score": "8", "Body": "<p>I ran into the same issue and what solved it for me was publishing the Lambda functions automatically using the <a href=\"https://www.terraform.io/docs/providers/aws/r/lambda_function.html#publish\" rel=\"noreferrer\">publish argument</a>. To do so simply set <code>publish = true</code> in your <code>aws_lambda_function</code> resource.</p>\n\n<p>Note that your function will be versioned after this and each change will create a new one. Therefor you should make sure that you use the <code>qualified_arn</code> attribute reference if you're referring to the function in any of your other Terraform code.</p>\n", "OwnerUserId": "517616", "LastActivityDate": "2018-12-20T11:06:13.903", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "94593039", "PostId": "53867447", "Score": "0", "Text": "This only needs to be done if the function already is versioned.", "CreationDate": "2018-12-20T16:53:32.740", "UserId": "2753241", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "94841076", "PostId": "53867447", "Score": "0", "Text": "Seems like this was the problem ... but I dont recall versioning my function ... isit possible to try to disable versioning?", "CreationDate": "2019-01-02T06:35:57.690", "UserId": "292291", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "94841347", "PostId": "53867447", "Score": "0", "Text": "But I notice that publish alone does not seem to update $LATEST version until I switch to it manually. Afterwards when I go to $LATEST again its correct ... but why is that?", "CreationDate": "2019-01-02T06:50:14.580", "UserId": "292291", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "94982092", "PostId": "53867447", "Score": "0", "Text": "@JiewMeng I've only gotten it working with versioning. Note that you need to use the `qualified_arn` and not the `arn` to always refer to the correct version of the Lambda.", "CreationDate": "2019-01-07T12:41:51.957", "UserId": "517616", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "188193833", "PostHistoryTypeId": "2", "PostId": "53867447", "RevisionGUID": "14c9e208-d6d8-4d19-b5b9-3363946b1da9", "CreationDate": "2018-12-20T11:06:13.903", "UserId": "517616", "Text": "I ran into the same issue and what solved it for me was publishing the Lambda functions automatically using the [publish argument][1]. To do so simply set `publish = true` in your `aws_lambda_function` resource.\r\n\r\nNote that your function will be versioned after this and each change will create a new one. Therefor you should make sure that you use the `qualified_arn` attribute reference if you're referring to the function in any of your other Terraform code.\r\n\r\n\r\n  [1]: https://www.terraform.io/docs/providers/aws/r/lambda_function.html#publish", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Note that your function will be versioned after this and each change will create a new one. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "Note that your function will be versioned after this and each change will create a new one. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I did something like: I find that when there is no change to test.js, terraform correctly detects no change When I do change the test.js file, terraform does detect a change: It does zip up the new zip, however, it does not seem to update the function with the new ZIP. ", "keywords": ["change", "test"]}, {"source": "Body", "text": "It seems like it thinks since the filename has no change, it does not upload ... ", "keywords": ["change"]}]}