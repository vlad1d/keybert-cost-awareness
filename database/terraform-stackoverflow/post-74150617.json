{"Id": "74150617", "PostTypeId": "1", "CreationDate": "2022-10-21T08:11:00.543", "Score": "0", "ViewCount": "112", "Body": "<h1>Context</h1>\n<p>We were trying to fix an inconsistency between Terraform and our cloud provider because a database was deleted through the cloud's UI console and the changes were not properly imported into Terraform.</p>\n<p>For reasons we preferred to not do <code>terraform import</code> and proceeded to change the state file to remove all references to that database hoping that would allow us to run things like <code>plan</code>, and it did work, but we came across other issues...</p>\n<p>Oh, I should add that we run things like Helm through Terraform to set up our Kubernetes infra as well.</p>\n<h1>The problem</h1>\n<p>Now Terraform makes a plan to remove a Google Container Node Pool (desired outcome) and to update a Kubernetes resource of kind Ingress. The latter change is not really intended, although it could be because there's a Terraform module dependency between the module that sets up all the cluster (including node pools) and the module that sets up Ingress.</p>\n<p>Now the issue comes from updating that Ingress. Here's the plan:</p>\n<pre><code># Terraform will read AppRole from Vault\n\ndata &quot;vault_approle_auth_backend_role_id&quot; &quot;role&quot;  {\n  - backend   = &quot;approle&quot; -&gt; null\n  ~ id        = &quot;auth/approle/role/nginx-ingress/role-id&quot; -&gt; (known after apply)\n  ~ role_id   = &quot;&lt;some UUID&gt;&quot; -&gt; (known after apply)\n    role_name = &quot;nginx-ingress&quot;\n}\n\n# Now this is the resource that makes everything blow up\n\nresource &quot;helm_release&quot; &quot;nginx-ingress&quot; {\n    atomic                     = false\n    chart                      = &quot;.terraform/modules/nginx-ingress/terraform/../helm&quot;\n    ...\n\n    ...\n  - set_sensitive {\n      - name  = &quot;appRole.roleId&quot; -&gt; null\n      - value = (sensitive value)\n    }\n\n  + set_sensitive {\n      + name  = &quot;appRole.roleId&quot;\n      + value = (sensitive value)\n    }\n\n  - set_sensitive {\n      - name  = &quot;appRole.secretId&quot; -&gt; null\n      - value = (sensitive value)\n    }\n\n  + set_sensitive {\n      + name  = &quot;appRole.secretId&quot;\n      + value = (sensitive value)\n    }\n}\n</code></pre>\n<p>And here's the error message we get:</p>\n<pre><code>When expanding the plan for module.nginx-ingress.helm_release.nginx-ingress to\ninclude new values learned so far during apply, provider\n&quot;registry.terraform.io/hashicorp/helm&quot; produced an invalid new value for\n.set_sensitive: planned set element\ncty.ObjectVal(map[string]cty.Value{&quot;name&quot;:cty.StringVal(&quot;appRole.secretId&quot;),\n&quot;type&quot;:cty.NullVal(cty.String),\n&quot;value&quot;:cty.StringVal(&quot;&lt;some other UUID&gt;&quot;)}) does not\ncorrelate with any element in actual.\n\nThis is a bug in the provider, which should be reported in the provider's own\nissue tracker.\n</code></pre>\n<h1>What we tried</h1>\n<ul>\n<li>We thought that maybe the AppRole's secretId had rotated or changed, so we took the secretId from the State of another environment that uses the same AppRole from the same Vault and set it in our modified state file. That didn't work.</li>\n</ul>\n", "OwnerUserId": "8868327", "LastEditorUserId": "8868327", "LastEditDate": "2022-10-21T10:50:46.127", "LastActivityDate": "2022-10-21T10:50:46.127", "Title": "What does this error mean when trying to use an AppRole from Vault on an Ingress deployment?", "Tags": "<kubernetes><terraform><vault>", "AnswerCount": "0", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "130921590", "PostId": "74150617", "Score": "0", "Text": "\"proceeded to change the state file to remove all references to that database\" root cause right there. Are the reasons to not `terraform state mv` or `terraform state rm/terraform import` that compelling?", "CreationDate": "2022-10-21T10:58:02.183", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "\"proceeded to change the state file to remove all references to that database\" root cause right there. ", "keywords": ["change"]}]}, {"Id": "130924351", "PostId": "74150617", "Score": "0", "Text": "@MattSchuchard Overly simplistic pragmatism: the cost of setting up terraform locally for importing seemed higher than the cost of trying to change the state. We admittedly miss our DevOps team, who configured everything to run on jenkins.", "CreationDate": "2022-10-21T13:12:40.000", "UserId": "8868327", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Overly simplistic pragmatism: the cost of setting up terraform locally for importing seemed higher than the cost of trying to change the state. ", "keywords": ["cost", "change"]}]}, {"Id": "130924892", "PostId": "74150617", "Score": "0", "Text": "Ok, and you cannot modify the `Jenkinsfile` in source or embedded in the job to execute the `terraform import` within a one-off pipeline to modify the state? I am speculating based on estimates of permissions, interfacing, and state configuration.", "CreationDate": "2022-10-21T13:36:27.007", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "130924969", "PostId": "74150617", "Score": "0", "Text": "Approaching this instead from the Vault perspective instead of Jenkins: can you regenerate the AppRole authentication data in Terraform, and not attempt to verify idempotence by manipulating the state? That could maybe also fix this. I would also guess that this issue cannot be rectified through a change in Helm usage with the Helm provider.", "CreationDate": "2022-10-21T13:39:45.330", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I would also guess that this issue cannot be rectified through a change in Helm usage with the Helm provider.", "keywords": ["provider", "change"]}]}, {"Id": "130925446", "PostId": "74150617", "Score": "0", "Text": "@MattSchuchard I think running the `import` from Jenkins sounds like a good bet. We considered regenerating the AppRole, but it's shared between other cluster instances' Ingresses and we were afraid of affecting something else. I guess that if we take that path, we should specify a unique approle name.", "CreationDate": "2022-10-21T14:00:59.123", "UserId": "8868327", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We considered regenerating the AppRole, but it's shared between other cluster instances' ", "keywords": ["cluster"]}]}], "history": [{"Id": "280560445", "PostHistoryTypeId": "2", "PostId": "74150617", "RevisionGUID": "d13196aa-d591-457c-8c13-bcb088fb4d07", "CreationDate": "2022-10-21T08:11:00.543", "UserId": "8868327", "Text": "# Context\r\nWe were trying to fix an inconsistency between Terraform and our cloud provider because a database was deleted through the cloud's UI console and the changes were not properly imported into Terraform.\r\n\r\nWe're a small team of Devs abandoned by the DevOps team that set up the whole infrastructure and configuring Terraform locally is not really that straight forward, so we decided to be very pragmatic (perhaps too much) about it. Please bear with us.\r\n\r\nWe then proceeded to change the state file to remove all references to that database hoping that would allow us to run things like `plan`, and it did work, but we came across other issues...\r\n\r\nOh, I should add that we run things like Helm and stuff through Terraform to set up our Kubernetes infra as well.\r\n\r\n# The problem\r\nNow Terraform makes a plan to remove a Google Container Node Pool (desired outcome) and to update a Kubernetes resource of kind Ingress. The latter change is not really intended, although it could be because there's a Terraform module dependency between the module that sets up all the cluster and node pool things and the module that sets up Ingress.\r\n\r\nNow the issue comes from updating that Ingress. Here's the plan:\r\n```\r\n# Terraform will read AppRole from Vault\r\n\r\ndata \"vault_approle_auth_backend_role_id\" \"role\"  {\r\n  - backend   = \"approle\" -> null\r\n  ~ id        = \"auth/approle/role/nginx-ingress/role-id\" -> (known after apply)\r\n  ~ role_id   = \"<some UUID>\" -> (known after apply)\r\n    role_name = \"nginx-ingress\"\r\n}\r\n\r\n# Now this is the resource that makes everything blow up\r\n\r\nresource \"helm_release\" \"nginx-ingress\" {\r\n    atomic                     = false\r\n    chart                      = \".terraform/modules/nginx-ingress/terraform/../helm\"\r\n    ...\r\n\r\n    ...\r\n  - set_sensitive {\r\n      - name  = \"appRole.roleId\" -> null\r\n      - value = (sensitive value)\r\n    }\r\n\r\n  + set_sensitive {\r\n      + name  = \"appRole.roleId\"\r\n      + value = (sensitive value)\r\n    }\r\n\r\n  - set_sensitive {\r\n      - name  = \"appRole.secretId\" -> null\r\n      - value = (sensitive value)\r\n    }\r\n\r\n  + set_sensitive {\r\n      + name  = \"appRole.secretId\"\r\n      + value = (sensitive value)\r\n    }\r\n}\r\n```\r\n\r\nAnd here's the error message we get:\r\n\r\n```\r\nWhen expanding the plan for module.nginx-ingress.helm_release.nginx-ingress to\r\ninclude new values learned so far during apply, provider\r\n\"registry.terraform.io/hashicorp/helm\" produced an invalid new value for\r\n.set_sensitive: planned set element\r\ncty.ObjectVal(map[string]cty.Value{\"name\":cty.StringVal(\"appRole.secretId\"),\r\n\"type\":cty.NullVal(cty.String),\r\n\"value\":cty.StringVal(\"<some other UUID>\")}) does not\r\ncorrelate with any element in actual.\r\n\r\nThis is a bug in the provider, which should be reported in the provider's own\r\nissue tracker.\r\n```\r\n\r\n# What we tried\r\n- We thought that maybe the AppRole's secretId had rotated or changed, so we took the secretId from the State of another environment that uses the same AppRole from the same Vault and set it in our modified state file. That didn't work.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We were trying to fix an inconsistency between Terraform and our cloud provider because a database was deleted through the cloud's UI console and the changes were not properly imported into Terraform. ", "keywords": ["provider", "change"]}, {"source": "Text", "text": "We then proceeded to change the state file to remove all references to that database hoping that would allow us to run things like `plan`, and it did work, but we came across other issues... ", "keywords": ["change"]}, {"source": "Text", "text": "The latter change is not really intended, although it could be because there's a Terraform module dependency between the module that sets up all the cluster and node pool things and the module that sets up Ingress. ", "keywords": ["cluster", "change"]}, {"source": "Text", "text": "When expanding the plan for module.nginx-ingress.helm_release.nginx-ingress to include new values learned so far during apply, provider \"registry.terraform.io/hashicorp/helm\" produced an invalid new value for .set_sensitive: planned set element cty.ObjectVal(map[string]cty.Value{\"name\":cty.StringVal(\"appRole.secretId\"), \"type\":cty.NullVal(cty.String), \"value\":cty.StringVal(\"\")}) does not correlate with any element in actual. ", "keywords": ["provider"]}, {"source": "Text", "text": "This is a bug in the provider, which should be reported in the provider's own issue tracker. ", "keywords": ["provider"]}, {"source": "Text", "text": "``` # What we tried - We thought that maybe the AppRole's secretId had rotated or changed, so we took the secretId from the State of another environment that uses the same AppRole from the same Vault and set it in our modified state file. ", "keywords": ["change"]}]}, {"Id": "280560447", "PostHistoryTypeId": "1", "PostId": "74150617", "RevisionGUID": "d13196aa-d591-457c-8c13-bcb088fb4d07", "CreationDate": "2022-10-21T08:11:00.543", "UserId": "8868327", "Text": "What does this error mean when trying to use an AppRole from Vault on an Ingress deployment?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "280560448", "PostHistoryTypeId": "3", "PostId": "74150617", "RevisionGUID": "d13196aa-d591-457c-8c13-bcb088fb4d07", "CreationDate": "2022-10-21T08:11:00.543", "UserId": "8868327", "Text": "<terraform><vault>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "280562556", "PostHistoryTypeId": "6", "PostId": "74150617", "RevisionGUID": "9178b93e-b824-4dd5-ac38-c1425cc5d0d7", "CreationDate": "2022-10-21T08:43:21.387", "UserId": "8868327", "Comment": "edited tags", "Text": "<kubernetes><terraform><vault>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "280564425", "PostHistoryTypeId": "5", "PostId": "74150617", "RevisionGUID": "5dd63f54-c279-4592-8cf8-0fc6d6fc4c48", "CreationDate": "2022-10-21T09:14:24.707", "UserId": "8868327", "Comment": "deleted 202 characters in body", "Text": "# Context\r\nWe were trying to fix an inconsistency between Terraform and our cloud provider because a database was deleted through the cloud's UI console and the changes were not properly imported into Terraform.\r\n\r\nFor reasons we preferred to not do `terraform import` and proceeded to change the state file to remove all references to that database hoping that would allow us to run things like `plan`, and it did work, but we came across other issues...\r\n\r\nOh, I should add that we run things like Helm and stuff through Terraform to set up our Kubernetes infra as well.\r\n\r\n# The problem\r\nNow Terraform makes a plan to remove a Google Container Node Pool (desired outcome) and to update a Kubernetes resource of kind Ingress. The latter change is not really intended, although it could be because there's a Terraform module dependency between the module that sets up all the cluster and node pool things and the module that sets up Ingress.\r\n\r\nNow the issue comes from updating that Ingress. Here's the plan:\r\n```\r\n# Terraform will read AppRole from Vault\r\n\r\ndata \"vault_approle_auth_backend_role_id\" \"role\"  {\r\n  - backend   = \"approle\" -> null\r\n  ~ id        = \"auth/approle/role/nginx-ingress/role-id\" -> (known after apply)\r\n  ~ role_id   = \"<some UUID>\" -> (known after apply)\r\n    role_name = \"nginx-ingress\"\r\n}\r\n\r\n# Now this is the resource that makes everything blow up\r\n\r\nresource \"helm_release\" \"nginx-ingress\" {\r\n    atomic                     = false\r\n    chart                      = \".terraform/modules/nginx-ingress/terraform/../helm\"\r\n    ...\r\n\r\n    ...\r\n  - set_sensitive {\r\n      - name  = \"appRole.roleId\" -> null\r\n      - value = (sensitive value)\r\n    }\r\n\r\n  + set_sensitive {\r\n      + name  = \"appRole.roleId\"\r\n      + value = (sensitive value)\r\n    }\r\n\r\n  - set_sensitive {\r\n      - name  = \"appRole.secretId\" -> null\r\n      - value = (sensitive value)\r\n    }\r\n\r\n  + set_sensitive {\r\n      + name  = \"appRole.secretId\"\r\n      + value = (sensitive value)\r\n    }\r\n}\r\n```\r\n\r\nAnd here's the error message we get:\r\n\r\n```\r\nWhen expanding the plan for module.nginx-ingress.helm_release.nginx-ingress to\r\ninclude new values learned so far during apply, provider\r\n\"registry.terraform.io/hashicorp/helm\" produced an invalid new value for\r\n.set_sensitive: planned set element\r\ncty.ObjectVal(map[string]cty.Value{\"name\":cty.StringVal(\"appRole.secretId\"),\r\n\"type\":cty.NullVal(cty.String),\r\n\"value\":cty.StringVal(\"<some other UUID>\")}) does not\r\ncorrelate with any element in actual.\r\n\r\nThis is a bug in the provider, which should be reported in the provider's own\r\nissue tracker.\r\n```\r\n\r\n# What we tried\r\n- We thought that maybe the AppRole's secretId had rotated or changed, so we took the secretId from the State of another environment that uses the same AppRole from the same Vault and set it in our modified state file. That didn't work.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We were trying to fix an inconsistency between Terraform and our cloud provider because a database was deleted through the cloud's UI console and the changes were not properly imported into Terraform. ", "keywords": ["provider", "change"]}, {"source": "Text", "text": "For reasons we preferred to not do `terraform import` and proceeded to change the state file to remove all references to that database hoping that would allow us to run things like `plan`, and it did work, but we came across other issues... ", "keywords": ["change"]}, {"source": "Text", "text": "The latter change is not really intended, although it could be because there's a Terraform module dependency between the module that sets up all the cluster and node pool things and the module that sets up Ingress. ", "keywords": ["cluster", "change"]}, {"source": "Text", "text": "When expanding the plan for module.nginx-ingress.helm_release.nginx-ingress to include new values learned so far during apply, provider \"registry.terraform.io/hashicorp/helm\" produced an invalid new value for .set_sensitive: planned set element cty.ObjectVal(map[string]cty.Value{\"name\":cty.StringVal(\"appRole.secretId\"), \"type\":cty.NullVal(cty.String), \"value\":cty.StringVal(\"\")}) does not correlate with any element in actual. ", "keywords": ["provider"]}, {"source": "Text", "text": "This is a bug in the provider, which should be reported in the provider's own issue tracker. ", "keywords": ["provider"]}, {"source": "Text", "text": "``` # What we tried - We thought that maybe the AppRole's secretId had rotated or changed, so we took the secretId from the State of another environment that uses the same AppRole from the same Vault and set it in our modified state file. ", "keywords": ["change"]}]}, {"Id": "280570447", "PostHistoryTypeId": "5", "PostId": "74150617", "RevisionGUID": "47201bc3-2d59-4399-a4b3-a40f9b96bdc7", "CreationDate": "2022-10-21T10:50:46.127", "UserId": "8868327", "Comment": "deleted 8 characters in body", "Text": "# Context\r\nWe were trying to fix an inconsistency between Terraform and our cloud provider because a database was deleted through the cloud's UI console and the changes were not properly imported into Terraform.\r\n\r\nFor reasons we preferred to not do `terraform import` and proceeded to change the state file to remove all references to that database hoping that would allow us to run things like `plan`, and it did work, but we came across other issues...\r\n\r\nOh, I should add that we run things like Helm through Terraform to set up our Kubernetes infra as well.\r\n\r\n# The problem\r\nNow Terraform makes a plan to remove a Google Container Node Pool (desired outcome) and to update a Kubernetes resource of kind Ingress. The latter change is not really intended, although it could be because there's a Terraform module dependency between the module that sets up all the cluster (including node pools) and the module that sets up Ingress.\r\n\r\nNow the issue comes from updating that Ingress. Here's the plan:\r\n```\r\n# Terraform will read AppRole from Vault\r\n\r\ndata \"vault_approle_auth_backend_role_id\" \"role\"  {\r\n  - backend   = \"approle\" -> null\r\n  ~ id        = \"auth/approle/role/nginx-ingress/role-id\" -> (known after apply)\r\n  ~ role_id   = \"<some UUID>\" -> (known after apply)\r\n    role_name = \"nginx-ingress\"\r\n}\r\n\r\n# Now this is the resource that makes everything blow up\r\n\r\nresource \"helm_release\" \"nginx-ingress\" {\r\n    atomic                     = false\r\n    chart                      = \".terraform/modules/nginx-ingress/terraform/../helm\"\r\n    ...\r\n\r\n    ...\r\n  - set_sensitive {\r\n      - name  = \"appRole.roleId\" -> null\r\n      - value = (sensitive value)\r\n    }\r\n\r\n  + set_sensitive {\r\n      + name  = \"appRole.roleId\"\r\n      + value = (sensitive value)\r\n    }\r\n\r\n  - set_sensitive {\r\n      - name  = \"appRole.secretId\" -> null\r\n      - value = (sensitive value)\r\n    }\r\n\r\n  + set_sensitive {\r\n      + name  = \"appRole.secretId\"\r\n      + value = (sensitive value)\r\n    }\r\n}\r\n```\r\n\r\nAnd here's the error message we get:\r\n\r\n```\r\nWhen expanding the plan for module.nginx-ingress.helm_release.nginx-ingress to\r\ninclude new values learned so far during apply, provider\r\n\"registry.terraform.io/hashicorp/helm\" produced an invalid new value for\r\n.set_sensitive: planned set element\r\ncty.ObjectVal(map[string]cty.Value{\"name\":cty.StringVal(\"appRole.secretId\"),\r\n\"type\":cty.NullVal(cty.String),\r\n\"value\":cty.StringVal(\"<some other UUID>\")}) does not\r\ncorrelate with any element in actual.\r\n\r\nThis is a bug in the provider, which should be reported in the provider's own\r\nissue tracker.\r\n```\r\n\r\n# What we tried\r\n- We thought that maybe the AppRole's secretId had rotated or changed, so we took the secretId from the State of another environment that uses the same AppRole from the same Vault and set it in our modified state file. That didn't work.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We were trying to fix an inconsistency between Terraform and our cloud provider because a database was deleted through the cloud's UI console and the changes were not properly imported into Terraform. ", "keywords": ["provider", "change"]}, {"source": "Text", "text": "For reasons we preferred to not do `terraform import` and proceeded to change the state file to remove all references to that database hoping that would allow us to run things like `plan`, and it did work, but we came across other issues... ", "keywords": ["change"]}, {"source": "Text", "text": "The latter change is not really intended, although it could be because there's a Terraform module dependency between the module that sets up all the cluster (including node pools) and the module that sets up Ingress. ", "keywords": ["cluster", "change"]}, {"source": "Text", "text": "When expanding the plan for module.nginx-ingress.helm_release.nginx-ingress to include new values learned so far during apply, provider \"registry.terraform.io/hashicorp/helm\" produced an invalid new value for .set_sensitive: planned set element cty.ObjectVal(map[string]cty.Value{\"name\":cty.StringVal(\"appRole.secretId\"), \"type\":cty.NullVal(cty.String), \"value\":cty.StringVal(\"\")}) does not correlate with any element in actual. ", "keywords": ["provider"]}, {"source": "Text", "text": "This is a bug in the provider, which should be reported in the provider's own issue tracker. ", "keywords": ["provider"]}, {"source": "Text", "text": "What we tried - We thought that maybe the AppRole's secretId had rotated or changed, so we took the secretId from the State of another environment that uses the same AppRole from the same Vault and set it in our modified state file. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "We were trying to fix an inconsistency between Terraform and our cloud provider because a database was deleted through the cloud's UI console and the changes were not properly imported into Terraform. ", "keywords": ["provider", "change"]}, {"source": "Body", "text": "For reasons we preferred to not do terraform import and proceeded to change the state file to remove all references to that database hoping that would allow us to run things like plan, and it did work, but we came across other issues... ", "keywords": ["change"]}, {"source": "Body", "text": "The latter change is not really intended, although it could be because there's a Terraform module dependency between the module that sets up all the cluster (including node pools) and the module that sets up Ingress. ", "keywords": ["cluster", "change"]}, {"source": "Body", "text": "We thought that maybe the AppRole's secretId had rotated or changed, so we took the secretId from the State of another environment that uses the same AppRole from the same Vault and set it in our modified state file. ", "keywords": ["change"]}]}