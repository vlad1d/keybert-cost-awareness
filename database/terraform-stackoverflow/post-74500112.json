{"Id": "74500112", "PostTypeId": "1", "CreationDate": "2022-11-19T12:45:16.587", "Score": "1", "ViewCount": "287", "Body": "<p>My connection handshake times out when trying to connect to my RDS Aurora Serverless (v1) MySQL Cluster from an external source.</p>\n<p>I'm specifying the cluster and its security group in terraform, and leveraging the default AWS VPC for the account/region.</p>\n<p>Parameters for my cluster:</p>\n<pre><code>                cluster_identifier = &quot;some-cluster-name&quot;,\n                engine = &quot;aurora-mysql&quot;,\n                engine_mode = &quot;serverless&quot;,\n                database_name = &quot;db&quot;,\n                master_username = &quot;********&quot;,\n                master_password = &quot;********&quot;,\n                backup_retention_period = 5,\n                preferred_backup_window = &quot;07:00-09:00&quot;,\n                skip_final_snapshot = true,\n                storage_encrypted = true,\n                scaling_configuration = {\n                    max_capacity = 4,\n                    min_capacity = 1,\n                    seconds_until_auto_pause = 300\n                },\n                vpc_security_group_ids = [&quot;${aws_security_group.my_sg_defined_elsewhere.id}&quot;]\n</code></pre>\n<p>Security group rules:</p>\n<pre><code>                type = &quot;ingress&quot;,\n                from_port = 3306,\n                to_port = 3306,\n                protocol = &quot;tcp&quot;,\n                cidr_blocks = [&quot;0.0.0.0/0&quot;],\n                ipv6_cidr_blocks = [&quot;::/0&quot;],\n                security_group_id = &quot;${aws_security_group.my_sg_defined_elsewhere.id}&quot;\n</code></pre>\n<pre><code>                type = &quot;egress&quot;,\n                from_port = 0,\n                to_port = 0,\n                protocol = &quot;-1&quot;,\n                cidr_blocks = [&quot;0.0.0.0/0&quot;],\n                ipv6_cidr_blocks = [&quot;::/0&quot;],\n                security_group_id = &quot;${aws_security_group.my_sg_defined_elsewhere.id}&quot;  \n\n</code></pre>\n<p>Since I'm just using the default VPC, which I believe has public subnets, I'm assuming that if my security group rules are sufficient for public MySQL access then this should just work. Unfortunately using the cluster's generated endpoint and the correct credentials, I just get a timeout when trying to connect.</p>\n", "OwnerUserId": "389765", "LastEditorUserId": "389765", "LastEditDate": "2022-12-01T00:19:57.657", "LastActivityDate": "2022-12-01T00:19:57.657", "Title": "Unable to connect to AWS RDS Aurora (MySQL) Cluster from external source", "Tags": "<amazon-web-services><terraform><amazon-rds><terraform-provider-aws><aws-aurora-serverless>", "AnswerCount": "2", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131512417", "PostId": "74500112", "Score": "2", "Text": "You have to enable the \"publicly accessible\" flag on an RDS/Aurora cluster in order for Amazon to assign a public IP to the cluster's servers. If you don't have that enabled then you will only be able to access it from within the VPC. I know Aurora Serverless v1 does not support the publicly accessible setting. I'm not sure about v2 and I can't seem to find that info in the documentation. Do you have that setting enabled? When you resolve the DNS name from outside the VPC does it give a public or an internal IP address?", "CreationDate": "2022-11-19T13:43:48.570", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You have to enable the \"publicly accessible\" flag on an RDS/Aurora cluster in order for Amazon to assign a public IP to the cluster's servers. ", "keywords": ["cluster"]}]}, {"Id": "131515624", "PostId": "74500112", "Score": "0", "Text": "@MarkB \"I know Aurora Serverless v1 does not support\" -- ugh, yes I'm just seeing that now. And can confirm the DNS name shows an internal address. The only reason I'm using AWS at all for this use case is to take advantage of v1 being able to wind down to zero for cost savings. Routing through an EC2 doesn't really help me for that same reason, lambda seems out of the question for latency too. Not sure if there are any other clever options for lean access to a private endpoint if that's all that v1 will give me.", "CreationDate": "2022-11-19T17:41:36.990", "UserId": "389765", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The only reason I'm using AWS at all for this use case is to take advantage of v1 being able to wind down to zero for cost savings. ", "keywords": ["cost"]}]}, {"Id": "131516598", "PostId": "74500112", "Score": "0", "Text": "What type of application are you using this for? The application itself doesn't run inside AWS?", "CreationDate": "2022-11-19T18:59:16.370", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131658076", "PostId": "74500112", "Score": "0", "Text": "Nope, unfortunately I'm not able to move the app itself into AWS due to some GCP dependencies. Stuck as usual in a classic cloud lock-in struggle.", "CreationDate": "2022-11-27T03:34:12.290", "UserId": "389765", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "131716673", "PostId": "74500112", "Score": "0", "Text": "In light of your comments, consider re-titling the question to \"external control of serverless AWS infrastructure\" or similar, to get at the underlying issues, and integrating your comments into the question.", "CreationDate": "2022-11-30T00:05:13.273", "UserId": "10376320", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "2013520189", "CreationDate": "2022-11-29T23:56:47.577", "PostId": "74500112", "RelatedPostId": "51716530", "LinkTypeId": "1"}], "history": [{"Id": "282572270", "PostHistoryTypeId": "2", "PostId": "74500112", "RevisionGUID": "de5c72f3-7359-447b-8745-cd63a88b2a07", "CreationDate": "2022-11-19T12:45:16.587", "UserId": "389765", "Text": "My connection handshake times out when trying to connect to my RDS Aurora Serverless (v1) MySQL Cluster from an external source.\r\n\r\nI'm specifying the cluster and its security group in terraform, and leveraging the default AWS VPC for the account/region.\r\n\r\nParameters for my cluster:\r\n\r\n```\r\n                cluster_identifier = \"some-cluster-name\",\r\n                engine = \"aurora-mysql\",\r\n                engine_mode = \"serverless\",\r\n                database_name = \"db\",\r\n                master_username = \"********\",\r\n                master_password = \"********\",\r\n                backup_retention_period = 5,\r\n                preferred_backup_window = \"07:00-09:00\",\r\n                skip_final_snapshot = true,\r\n                storage_encrypted = true,\r\n                scaling_configuration = {\r\n                    max_capacity = 4,\r\n                    min_capacity = 1,\r\n                    seconds_until_auto_pause = 300\r\n                },\r\n                vpc_security_group_ids = [\"${aws_security_group.my_sg_defined_elsewhere.id}\"]\r\n```\r\n\r\nSecurity group rules: \r\n\r\n```\r\n                type = \"ingress\",\r\n                from_port = 3306,\r\n                to_port = 3306,\r\n                protocol = \"tcp\",\r\n                cidr_blocks = [\"0.0.0.0/0\"],\r\n                ipv6_cidr_blocks = [\"::/0\"],\r\n                security_group_id = \"${aws_security_group.my_sg_defined_elsewhere.id}\"\r\n```\r\n\r\n```\r\n                type = \"egress\",\r\n                from_port = 0,\r\n                to_port = 0,\r\n                protocol = \"-1\",\r\n                cidr_blocks = [\"0.0.0.0/0\"],\r\n                ipv6_cidr_blocks = [\"::/0\"],\r\n                security_group_id = \"${aws_security_group.my_sg_defined_elsewhere.id}\"  \r\n\r\n```\r\n\r\nSince I'm just using the default VPC, which I believe has public subnets, I'm assuming that if my security group rules are sufficient for public MySQL access then this should just work. Unfortunately using the cluster's generated endpoint and the correct credentials, I just get a timeout when trying to connect.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "My connection handshake times out when trying to connect to my RDS Aurora Serverless (v1) MySQL Cluster from an external source. ", "keywords": ["cluster"]}, {"source": "Text", "text": "I'm specifying the cluster and its security group in terraform, and leveraging the default AWS VPC for the account/region. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Parameters for my cluster: ``` cluster_identifier = \"some-cluster-name\", engine = \"aurora-mysql\", engine_mode = \"serverless\", database_name = \"db\", master_username = \"********\", master_password = \"********\", backup_retention_period = 5, preferred_backup_window = \"07:00-09:00\", skip_final_snapshot = true, storage_encrypted = true, scaling_configuration = { max_capacity = 4, min_capacity = 1, seconds_until_auto_pause = 300 }, vpc_security_group_ids = [\"${aws_security_group.my_sg_defined_elsewhere.id}\"] ``` Security group rules: ``` type = \"ingress\", from_port = 3306, to_port = 3306, protocol = \"tcp\", cidr_blocks = [\"0.0.0.0/0\"], ipv6_cidr_blocks = [\"::/0\"], security_group_id = \"${aws_security_group.my_sg_defined_elsewhere.id}\" ``` ``` type = \"egress\", from_port = 0, to_port = 0, protocol = \"-1\", cidr_blocks = [\"0.0.0.0/0\"], ipv6_cidr_blocks = [\"::/0\"], security_group_id = \"${aws_security_group.my_sg_defined_elsewhere.id}\" ``` Since I'm just using the default VPC, which I believe has public subnets, I'm assuming that if my security group rules are sufficient for public MySQL access then this should just work", "keywords": ["cluster"]}, {"source": "Text", "text": "Unfortunately using the cluster's generated endpoint and the correct credentials, I just get a timeout when trying to connect", "keywords": ["cluster"]}]}, {"Id": "282572272", "PostHistoryTypeId": "1", "PostId": "74500112", "RevisionGUID": "de5c72f3-7359-447b-8745-cd63a88b2a07", "CreationDate": "2022-11-19T12:45:16.587", "UserId": "389765", "Text": "Unable to connect to AWS RDS Aurora (MySQL) Cluster", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Unable to connect to AWS RDS Aurora (MySQL) Cluster", "keywords": ["cluster"]}]}, {"Id": "282572273", "PostHistoryTypeId": "3", "PostId": "74500112", "RevisionGUID": "de5c72f3-7359-447b-8745-cd63a88b2a07", "CreationDate": "2022-11-19T12:45:16.587", "UserId": "389765", "Text": "<amazon-web-services><terraform><amazon-rds><aws-security-group><aws-aurora-serverless>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "282582083", "PostHistoryTypeId": "6", "PostId": "74500112", "RevisionGUID": "d8d1927d-5508-4ba6-8b35-e930f7852041", "CreationDate": "2022-11-19T16:41:42.377", "UserId": "8343484", "Comment": "edited tags", "Text": "<amazon-web-services><terraform><amazon-rds><terraform-provider-aws><aws-aurora-serverless>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "283352942", "PostHistoryTypeId": "4", "PostId": "74500112", "RevisionGUID": "666c9398-b08c-462e-a06e-c60d70cba697", "CreationDate": "2022-12-01T00:19:57.657", "UserId": "389765", "Comment": "edited title", "Text": "Unable to connect to AWS RDS Aurora (MySQL) Cluster from external source", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Cluster from external source", "keywords": ["cluster"]}]}], "answers": [{"Id": "74587312", "PostTypeId": "2", "ParentId": "74500112", "CreationDate": "2022-11-27T03:36:38.090", "Score": "1", "Body": "<p>Just to close this off, thanks to some further hunting and Mark B's comments above, can confirm that I missed the fact that Aurora Serverless v1 does not support public endpoints, so no amount of playing around with my security groups would have helped. This is apparently possible with v2 but since it isn't true serverless (doesn't wind down to zero) it's not an option for me anyway. Hope this saves someone some headaches!</p>\n", "OwnerUserId": "389765", "LastActivityDate": "2022-11-27T03:36:38.090", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "133824316", "PostId": "74587312", "Score": "0", "Text": "thanks this was driving me crazy!", "CreationDate": "2023-03-28T16:35:06.873", "UserId": "8537770", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "283076264", "PostHistoryTypeId": "2", "PostId": "74587312", "RevisionGUID": "e5edddb1-f7ab-45ba-8f21-be4e63270b42", "CreationDate": "2022-11-27T03:36:38.090", "UserId": "389765", "Text": "Just to close this off, thanks to some further hunting and Mark B's comments above, can confirm that I missed the fact that Aurora Serverless v1 does not support public endpoints, so no amount of playing around with my security groups would have helped. This is apparently possible with v2 but since it isn't true serverless (doesn't wind down to zero) it's not an option for me anyway. Hope this saves someone some headaches!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "74621524", "PostTypeId": "2", "ParentId": "74500112", "CreationDate": "2022-11-29T23:56:47.577", "Score": "0", "Body": "<p>You can route the request through an <a href=\"https://stackoverflow.com/questions/51716530/aws-aurora-mysql-serverless-how-to-connect-from-mysql-workbench\">ec2 instance tunnel</a>, which uses <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html\" rel=\"nofollow noreferrer\">API Gateway</a> to control <a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/start-stop-lambda-eventbridge/\" rel=\"nofollow noreferrer\">lambda functions to start and stop the instance</a> as needed, so your AWS resources can still scale down to zero.</p>\n<p>As a side note, <a href=\"https://techcrunch.com/2022/11/28/aws-makes-lambda-cold-start-latency-a-thing-of-the-past-with-snapstart/?guccounter=1\" rel=\"nofollow noreferrer\">lambda latency is trivial</a> compared to serverless v1 cold-start times.</p>\n", "OwnerUserId": "10376320", "LastActivityDate": "2022-11-29T23:56:47.577", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "283274048", "PostHistoryTypeId": "2", "PostId": "74621524", "RevisionGUID": "a12833f6-b9cf-4638-a294-373b828c06dd", "CreationDate": "2022-11-29T23:56:47.577", "UserId": "10376320", "Text": "You can route the request through an [ec2 instance tunnel][1], which uses [API Gateway][2] to control [lambda functions to start and stop the instance][3] as needed, so your AWS resources can still scale down to zero. \r\n\r\nAs a side note, [lambda latency is trivial][4] compared to serverless v1 cold-start times.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/51716530/aws-aurora-mysql-serverless-how-to-connect-from-mysql-workbench\r\n  [2]: https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html\r\n  [3]: https://aws.amazon.com/premiumsupport/knowledge-center/start-stop-lambda-eventbridge/\r\n  [4]: https://techcrunch.com/2022/11/28/aws-makes-lambda-cold-start-latency-a-thing-of-the-past-with-snapstart/?guccounter=1", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can route the request through an [ec2 instance tunnel][1], which uses [API Gateway][2] to control [lambda functions to start and stop the instance][3] as needed, so your AWS resources can still scale down to zero. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can route the request through an ec2 instance tunnel, which uses API Gateway to control lambda functions to start and stop the instance as needed, so your AWS resources can still scale down to zero. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Cluster from external source", "keywords": ["cluster"]}, {"source": "Body", "text": "My connection handshake times out when trying to connect to my RDS Aurora Serverless (v1) MySQL Cluster from an external source. ", "keywords": ["cluster"]}, {"source": "Body", "text": "I'm specifying the cluster and its security group in terraform, and leveraging the default AWS VPC for the account/region. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Parameters for my cluster: Security group rules: Since I'm just using the default VPC, which I believe has public subnets, I'm assuming that if my security group rules are sufficient for public MySQL access then this should just work. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Unfortunately using the cluster's generated endpoint and the correct credentials, I just get a timeout when trying to connect.", "keywords": ["cluster"]}]}