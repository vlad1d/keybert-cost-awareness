{"Id": "63923209", "PostTypeId": "1", "CreationDate": "2020-09-16T15:21:40.660", "Score": "0", "ViewCount": "741", "Body": "<p>ok, so I am trying to attach an EBS volume which I have created using Terraform to an ASG's instance using userdata, but now issue is both are in different AZ's, due to which, it failing to attach. Below is the steps I am trying and failing:</p>\n<pre><code>resource &quot;aws_ebs_volume&quot; &quot;this&quot; {\n  for_each = var.ebs_block_device\n    size              = lookup(each.value,&quot;volume_size&quot;, null)\n    type              = lookup(each.value,&quot;volume_type&quot;, null)\n    iops              = lookup(each.value, &quot;iops&quot;, null)\n    encrypted         = lookup(each.value, &quot;volume_encrypt&quot;, null)\n    kms_key_id        = lookup(each.value, &quot;kms_key_id&quot;, null)\n    availability_zone = join(&quot;,&quot;,random_shuffle.az.result)\n} \n</code></pre>\n<p>In above resource, I am using random provider to get one AZ from list of AZs, and same list is provided to ASG resource below:</p>\n<pre><code>resource &quot;aws_autoscaling_group&quot; &quot;this&quot; {\n  desired_capacity          = var.desired_capacity\n  launch_configuration      = aws_launch_configuration.this.id\n  max_size                  = var.max_size\n  min_size                  = var.min_size\n  name                      = var.name\n  vpc_zone_identifier       = var.subnet_ids // &lt;------ HERE\n  health_check_grace_period = var.health_check_grace_period\n  load_balancers            = var.load_balancer_names\n  target_group_arns         = var.target_group_arns\n\n  tag {\n    key                 = &quot;Name&quot;\n    value               = var.name\n    propagate_at_launch = true\n  }\n}\n</code></pre>\n<p>And here is userdata which I am using:</p>\n<pre><code>TOKEN=`curl -X PUT &quot;http://169.254.169.254/latest/api/token&quot; -H &quot;X-aws-ec2-metadata-token-ttl-seconds: 21600&quot;`\n\ninstanceId = curl -H &quot;X-aws-ec2-metadata-token: $TOKEN&quot; http://169.254.169.254/latest/meta-data/instance-id\n\naws ec2 attach-volume --volume-id ${ebs_volume_id} --instance-id $instanceId --device /dev/nvme1n1\n</code></pre>\n<p>Above will attach the newly created volume, as I am passing output <code>${ebs_volume_id}</code> of above resource.</p>\n<p>But, its failing because instance and volume are in different AZs.</p>\n<p>Can anyone help me on this as a better solution than <strong>hardcoding AZ on both ASG and Volume</strong>?</p>\n", "OwnerUserId": "5267633", "LastEditorUserId": "2756409", "LastEditDate": "2021-08-17T21:03:42.743", "LastActivityDate": "2021-08-17T21:03:42.743", "Title": "Adding new AWS EBS Volume to ASG in same AZ", "Tags": "<amazon-web-services><terraform><amazon-ebs><aws-auto-scaling>", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "113036893", "PostId": "63923209", "Score": "0", "Text": "Why are you creating the EBS volume this way instead of configuring the EBS volume in the launch configuration?", "CreationDate": "2020-09-16T15:35:55.763", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "113039323", "PostId": "63923209", "Score": "0", "Text": "So when I change anything in userdata/lauch configuration, it doesn't delete/recreate volume", "CreationDate": "2020-09-16T17:03:25.440", "UserId": "5267633", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "So when I change anything in userdata/lauch configuration, it doesn't delete/recreate volume", "keywords": ["change"]}]}], "history": [{"Id": "230951957", "PostHistoryTypeId": "2", "PostId": "63923209", "RevisionGUID": "48bdc340-a66e-4a18-b5de-ea638b16bbc8", "CreationDate": "2020-09-16T15:21:40.660", "UserId": "5267633", "Text": "ok, so I am trying to attach an EBS volume which I have created using Terraform to an ASG's instance using userdata, but now issue is both are in different AZ's, due to which, it failing to attach. Below is the steps I am trying and failing:\r\n\r\n    resource \"aws_ebs_volume\" \"this\" {\r\n      for_each = var.ebs_block_device\r\n        size              = lookup(each.value,\"volume_size\", null)\r\n        type              = lookup(each.value,\"volume_type\", null)\r\n        iops              = lookup(each.value, \"iops\", null)\r\n        encrypted         = lookup(each.value, \"volume_encrypt\", null)\r\n        kms_key_id        = lookup(each.value, \"kms_key_id\", null)\r\n        availability_zone = join(\",\",random_shuffle.az.result)\r\n    } \r\nIn above resource, I am using random provider to get one AZ from list of AZs, and same list is provided to ASG resource below:\r\n\r\n    resource \"aws_autoscaling_group\" \"this\" {\r\n      desired_capacity          = var.desired_capacity\r\n      launch_configuration      = aws_launch_configuration.this.id\r\n      max_size                  = var.max_size\r\n      min_size                  = var.min_size\r\n      name                      = var.name\r\n      vpc_zone_identifier       = var.subnet_ids // <------ HERE\r\n      health_check_grace_period = var.health_check_grace_period\r\n      load_balancers            = var.load_balancer_names\r\n      target_group_arns         = var.target_group_arns\r\n    \r\n      tag {\r\n        key                 = \"Name\"\r\n        value               = var.name\r\n        propagate_at_launch = true\r\n      }\r\n    }\r\n\r\nAnd here is userdata which I am using:\r\n\r\n    TOKEN=`curl PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\r\n\r\n    instanceId = curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/instance-id\r\n\r\n    aws ec2 attach-volume --volume-id ${ebs_volume_id} --instance-id $instanceId --device /dev/nvme1n1\r\n\r\nAbove will attach the newly created volume, as I am passing output `${ebs_volume_id}` of above resource.\r\n\r\nBut, its failing because instance and volume are in different AZs.\r\n\r\nCan anyone help me on this as a better solution than **hardcoding AZ on both ASG and Volume**?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "ok, so I am trying to attach an EBS volume which I have created using Terraform to an ASG's instance using userdata, but now issue is both are in different AZ's, due to which, it failing to attach. ", "keywords": ["instance"]}, {"source": "Text", "text": "In above resource, I am using random provider to get one AZ from list of AZs, and same list is provided to ASG resource below: resource \"aws_autoscaling_group\" \"this\" { desired_capacity = var.desired_capacity launch_configuration = aws_launch_configuration.this.id max_size = var.max_size min_size = var.min_size name = var.name vpc_zone_identifier = var.subnet_ids // <------ HERE health_check_grace_period = var.health_check_grace_period load_balancers = var.load_balancer_names target_group_arns = var.target_group_arns tag { key = \"Name\" value = var.name propagate_at_launch = true } } And here is userdata which I am using: TOKEN=`curl PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"` instanceId = curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/instance-id aws ec2 attach-volume --volume-id ${ebs_volume_id} --instance-id $instanceId --device /dev/nvme1n1 Above will attach the newly created volume, as I am passing output `${ebs_volume_id}` of above resource", "keywords": ["instance", "provider"]}, {"source": "Text", "text": "But, its failing because instance and volume are in different AZs", "keywords": ["instance"]}]}, {"Id": "230951958", "PostHistoryTypeId": "1", "PostId": "63923209", "RevisionGUID": "48bdc340-a66e-4a18-b5de-ea638b16bbc8", "CreationDate": "2020-09-16T15:21:40.660", "UserId": "5267633", "Text": "Adding new AWS EBS Volume to ASG in same AZ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "230951959", "PostHistoryTypeId": "3", "PostId": "63923209", "RevisionGUID": "48bdc340-a66e-4a18-b5de-ea638b16bbc8", "CreationDate": "2020-09-16T15:21:40.660", "UserId": "5267633", "Text": "<amazon-web-services><terraform><amazon-ebs><aws-auto-scaling><ebs>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "230959611", "PostHistoryTypeId": "5", "PostId": "63923209", "RevisionGUID": "a7cf59d9-78be-4265-90cc-9652bed811d6", "CreationDate": "2020-09-16T17:18:24.080", "UserId": "5267633", "Comment": "added 3 characters in body", "Text": "ok, so I am trying to attach an EBS volume which I have created using Terraform to an ASG's instance using userdata, but now issue is both are in different AZ's, due to which, it failing to attach. Below is the steps I am trying and failing:\r\n\r\n    resource \"aws_ebs_volume\" \"this\" {\r\n      for_each = var.ebs_block_device\r\n        size              = lookup(each.value,\"volume_size\", null)\r\n        type              = lookup(each.value,\"volume_type\", null)\r\n        iops              = lookup(each.value, \"iops\", null)\r\n        encrypted         = lookup(each.value, \"volume_encrypt\", null)\r\n        kms_key_id        = lookup(each.value, \"kms_key_id\", null)\r\n        availability_zone = join(\",\",random_shuffle.az.result)\r\n    } \r\nIn above resource, I am using random provider to get one AZ from list of AZs, and same list is provided to ASG resource below:\r\n\r\n    resource \"aws_autoscaling_group\" \"this\" {\r\n      desired_capacity          = var.desired_capacity\r\n      launch_configuration      = aws_launch_configuration.this.id\r\n      max_size                  = var.max_size\r\n      min_size                  = var.min_size\r\n      name                      = var.name\r\n      vpc_zone_identifier       = var.subnet_ids // <------ HERE\r\n      health_check_grace_period = var.health_check_grace_period\r\n      load_balancers            = var.load_balancer_names\r\n      target_group_arns         = var.target_group_arns\r\n    \r\n      tag {\r\n        key                 = \"Name\"\r\n        value               = var.name\r\n        propagate_at_launch = true\r\n      }\r\n    }\r\n\r\nAnd here is userdata which I am using:\r\n\r\n    TOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\r\n\r\n    instanceId = curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/instance-id\r\n\r\n    aws ec2 attach-volume --volume-id ${ebs_volume_id} --instance-id $instanceId --device /dev/nvme1n1\r\n\r\nAbove will attach the newly created volume, as I am passing output `${ebs_volume_id}` of above resource.\r\n\r\nBut, its failing because instance and volume are in different AZs.\r\n\r\nCan anyone help me on this as a better solution than **hardcoding AZ on both ASG and Volume**?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "ok, so I am trying to attach an EBS volume which I have created using Terraform to an ASG's instance using userdata, but now issue is both are in different AZ's, due to which, it failing to attach. ", "keywords": ["instance"]}, {"source": "Text", "text": "In above resource, I am using random provider to get one AZ from list of AZs, and same list is provided to ASG resource below: resource \"aws_autoscaling_group\" \"this\" { desired_capacity = var.desired_capacity launch_configuration = aws_launch_configuration.this.id max_size = var.max_size min_size = var.min_size name = var.name vpc_zone_identifier = var.subnet_ids // <------ HERE health_check_grace_period = var.health_check_grace_period load_balancers = var.load_balancer_names target_group_arns = var.target_group_arns tag { key = \"Name\" value = var.name propagate_at_launch = true } } And here is userdata which I am using: TOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"` instanceId = curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/instance-id aws ec2 attach-volume --volume-id ${ebs_volume_id} --instance-id $instanceId --device /dev/nvme1n1 Above will attach the newly created volume, as I am passing output `${ebs_volume_id}` of above resource", "keywords": ["instance", "provider"]}, {"source": "Text", "text": "But, its failing because instance and volume are in different AZs", "keywords": ["instance"]}]}, {"Id": "252164843", "PostHistoryTypeId": "6", "PostId": "63923209", "RevisionGUID": "31959d34-8cf3-49ec-aea2-8bdbb713999d", "CreationDate": "2021-08-17T21:03:42.743", "UserId": "2756409", "Comment": "edited tags", "Text": "<amazon-web-services><terraform><amazon-ebs><aws-auto-scaling>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "64288057", "PostTypeId": "2", "ParentId": "63923209", "CreationDate": "2020-10-09T22:26:46.603", "Score": "0", "Body": "<p>I'd have to understand more about what you're trying to do to solve this with just the aws provider and terraform. And honestly, most ideas are going to be a bit complex.</p>\n<p>You could have an ASG per AZ. Otherwise, the ASG is going to select some AZ at each launch. And you'll have more instances in an AZ than you have volumes and volumes in other AZs with no instances to attach to.</p>\n<p>So you could create a number of volumes per az and an ASG per AZ. Then the userdata should list all the volumes in the AZ that are not attached to an instance. Then pick the id of the first volume that is unattached. Then attach it. If all are attached, you should trigger your alerting because you have more instances than you have volumes.</p>\n<p>Any attempt to do this with a single ASG is really an attempt at writing your own ASG but doing it in a way that fights with your actual ASG.</p>\n<hr />\n<p>But there is a company who offers managing this as a service. They also help you manage them as spot instances to save cost: <a href=\"https://spot.io/\" rel=\"nofollow noreferrer\">https://spot.io/</a></p>\n<p>The <a href=\"https://www.terraform.io/docs/providers/spotinst/r/elastigroup_aws.html\" rel=\"nofollow noreferrer\">elastigroup</a> resource is an ASG managed by them. So you won't have an aws asg anymore. But they have some interesting stateful configurations.</p>\n<blockquote>\n<p>We support instance persistence via the following configurations. all values are boolean. For more information on instance persistence please see: Stateful configuration\npersist_root_device - (Optional) Boolean, should the instance maintain its root device volumes.\npersist_block_devices - (Optional) Boolean, should the instance maintain its Data volumes.\npersist_private_ip - (Optional) Boolean, should the instance maintain its private IP.\nblock_devices_mode - (Optional) String, determine the way we attach the data volumes to the data devices, possible values: &quot;reattach&quot; and &quot;onLaunch&quot; (default is onLaunch).\nprivate_ips - (Optional) List of Private IPs to associate to the group instances.(e.g. &quot;172.1.1.0&quot;). Please note: This setting will only apply if persistence.persist_private_ip is set to true</p>\n</blockquote>\n<pre><code>stateful_deallocation {\n     should_delete_images              = false\n     should_delete_network_interfaces  = false\n     should_delete_volumes             = false\n     should_delete_snapshots           = false\n}\n</code></pre>\n<p>This allows you to have an autoscaler that preserves volumes and handles the complexities for you.</p>\n", "OwnerUserId": "2977807", "LastEditorUserId": "2977807", "LastEditDate": "2020-10-09T22:35:06.563", "LastActivityDate": "2020-10-09T22:35:06.563", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "232515799", "PostHistoryTypeId": "2", "PostId": "64288057", "RevisionGUID": "f1130b66-e56f-42da-b156-e0c12103e1b7", "CreationDate": "2020-10-09T22:26:46.603", "UserId": "2977807", "Text": "I'd have to understand more about what you're trying to do to solve this with just the aws provider and terraform. And honestly, most ideas are going to be a bit complex.\r\n\r\nYou could have an ASG per AZ. Otherwise, the ASG is going to select some AZ at each launch. And you'll have more instances in an AZ than you have volumes and volumes in other AZs with no instances to attach to.\r\n\r\nSo you could create a number of volumes per az and an ASG per AZ. Then the userdata should list all the volumes in the AZ that are not attached to an instance. Then pick the id of the first volume that is unattached. Then attach it. If all are attached, you should trigger your alerting because you have more instances than you have volumes.\r\n\r\n---\r\n\r\nBut there is a company who offers managing this as a service. They also help you manage them as spot instances to save cost: https://spot.io/\r\n\r\nThe [elastigroup][1] resource is an ASG managed by them. So you won't have an aws asg anymore. But they have some interesting stateful configurations.\r\n\r\n> We support instance persistence via the following configurations. all values are boolean. For more information on instance persistence please see: Stateful configuration\r\n> persist_root_device - (Optional) Boolean, should the instance maintain its root device volumes.\r\n> persist_block_devices - (Optional) Boolean, should the instance maintain its Data volumes.\r\n> persist_private_ip - (Optional) Boolean, should the instance maintain its private IP.\r\n> block_devices_mode - (Optional) String, determine the way we attach the data volumes to the data devices, possible values: \"reattach\" and \"onLaunch\" (default is onLaunch).\r\n> private_ips - (Optional) List of Private IPs to associate to the group instances.(e.g. \"172.1.1.0\"). Please note: This setting will only apply if persistence.persist_private_ip is set to true\r\n\r\n```\r\nstateful_deallocation {\r\n     should_delete_images              = false\r\n     should_delete_network_interfaces  = false\r\n     should_delete_volumes             = false\r\n     should_delete_snapshots           = false\r\n   }\r\n```\r\n\r\nThis allows you to have an autoscaler that preserves volumes and handles the complexities for you.\r\n\r\n  [1]: https://www.terraform.io/docs/providers/spotinst/r/elastigroup_aws.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'd have to understand more about what you're trying to do to solve this with just the aws provider and terraform. ", "keywords": ["provider"]}, {"source": "Text", "text": "Then the userdata should list all the volumes in the AZ that are not attached to an instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "They also help you manage them as spot instances to save cost: https://spot.io/ ", "keywords": ["cost"]}, {"source": "Text", "text": "> We support instance persistence via the following configurations. ", "keywords": ["instance"]}, {"source": "Text", "text": "For more information on instance persistence please see: Stateful configuration > persist_root_device - (Optional) Boolean, should the instance maintain its root device volumes. ", "keywords": ["instance"]}, {"source": "Text", "text": "> persist_block_devices - (Optional) Boolean, should the instance maintain its Data volumes. ", "keywords": ["instance"]}, {"source": "Text", "text": "> persist_private_ip - (Optional) Boolean, should the instance maintain its private IP. ", "keywords": ["instance"]}]}, {"Id": "232516072", "PostHistoryTypeId": "5", "PostId": "64288057", "RevisionGUID": "0b38ff8b-6c8b-44a2-9964-52ea2cda27f5", "CreationDate": "2020-10-09T22:35:06.563", "UserId": "2977807", "Comment": "added 145 characters in body", "Text": "I'd have to understand more about what you're trying to do to solve this with just the aws provider and terraform. And honestly, most ideas are going to be a bit complex.\r\n\r\nYou could have an ASG per AZ. Otherwise, the ASG is going to select some AZ at each launch. And you'll have more instances in an AZ than you have volumes and volumes in other AZs with no instances to attach to.\r\n\r\nSo you could create a number of volumes per az and an ASG per AZ. Then the userdata should list all the volumes in the AZ that are not attached to an instance. Then pick the id of the first volume that is unattached. Then attach it. If all are attached, you should trigger your alerting because you have more instances than you have volumes.\r\n\r\nAny attempt to do this with a single ASG is really an attempt at writing your own ASG but doing it in a way that fights with your actual ASG.\r\n\r\n---\r\n\r\nBut there is a company who offers managing this as a service. They also help you manage them as spot instances to save cost: https://spot.io/\r\n\r\nThe [elastigroup][1] resource is an ASG managed by them. So you won't have an aws asg anymore. But they have some interesting stateful configurations.\r\n\r\n> We support instance persistence via the following configurations. all values are boolean. For more information on instance persistence please see: Stateful configuration\r\n> persist_root_device - (Optional) Boolean, should the instance maintain its root device volumes.\r\n> persist_block_devices - (Optional) Boolean, should the instance maintain its Data volumes.\r\n> persist_private_ip - (Optional) Boolean, should the instance maintain its private IP.\r\n> block_devices_mode - (Optional) String, determine the way we attach the data volumes to the data devices, possible values: \"reattach\" and \"onLaunch\" (default is onLaunch).\r\n> private_ips - (Optional) List of Private IPs to associate to the group instances.(e.g. \"172.1.1.0\"). Please note: This setting will only apply if persistence.persist_private_ip is set to true\r\n\r\n```\r\nstateful_deallocation {\r\n     should_delete_images              = false\r\n     should_delete_network_interfaces  = false\r\n     should_delete_volumes             = false\r\n     should_delete_snapshots           = false\r\n}\r\n```\r\n\r\nThis allows you to have an autoscaler that preserves volumes and handles the complexities for you.\r\n\r\n  [1]: https://www.terraform.io/docs/providers/spotinst/r/elastigroup_aws.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'd have to understand more about what you're trying to do to solve this with just the aws provider and terraform. ", "keywords": ["provider"]}, {"source": "Text", "text": "Then the userdata should list all the volumes in the AZ that are not attached to an instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "They also help you manage them as spot instances to save cost: https://spot.io/ ", "keywords": ["cost"]}, {"source": "Text", "text": "> We support instance persistence via the following configurations. ", "keywords": ["instance"]}, {"source": "Text", "text": "For more information on instance persistence please see: Stateful configuration > persist_root_device - (Optional) Boolean, should the instance maintain its root device volumes. ", "keywords": ["instance"]}, {"source": "Text", "text": "> persist_block_devices - (Optional) Boolean, should the instance maintain its Data volumes. ", "keywords": ["instance"]}, {"source": "Text", "text": "> persist_private_ip - (Optional) Boolean, should the instance maintain its private IP. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "I'd have to understand more about what you're trying to do to solve this with just the aws provider and terraform. ", "keywords": ["provider"]}, {"source": "Body", "text": "Then the userdata should list all the volumes in the AZ that are not attached to an instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "They also help you manage them as spot instances to save cost: https://spot.io/ ", "keywords": ["cost"]}, {"source": "Body", "text": "We support instance persistence via the following configurations. ", "keywords": ["instance"]}, {"source": "Body", "text": "For more information on instance persistence please see: Stateful configuration persist_root_device - (Optional) Boolean, should the instance maintain its root device volumes. persist_block_devices - (Optional) Boolean, should the instance maintain its Data volumes. persist_private_ip - (Optional) Boolean, should the instance maintain its private IP. block_devices_mode - (Optional) String, determine the way we attach the data volumes to the data devices, possible values: \"reattach\" and \"onLaunch\" (default is onLaunch). private_ips - (Optional) List of Private IPs to associate to the group instances.(e.g. \"172.1.1.0\"). ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "ok, so I am trying to attach an EBS volume which I have created using Terraform to an ASG's instance using userdata, but now issue is both are in different AZ's, due to which, it failing to attach. ", "keywords": ["instance"]}, {"source": "Body", "text": "Below is the steps I am trying and failing: In above resource, I am using random provider to get one AZ from list of AZs, and same list is provided to ASG resource below: And here is userdata which I am using: Above will attach the newly created volume, as I am passing output ${ebs_volume_id} of above resource. ", "keywords": ["provider"]}, {"source": "Body", "text": "But, its failing because instance and volume are in different AZs. ", "keywords": ["instance"]}]}