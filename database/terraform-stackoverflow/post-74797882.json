{"Id": "74797882", "PostTypeId": "1", "AcceptedAnswerId": "74802315", "CreationDate": "2022-12-14T11:52:47.063", "Score": "0", "ViewCount": "362", "Body": "<p>In my main.tf im using a module, in the module there's this snippet:</p>\n<pre><code>resource &quot;aws_lb_listener&quot; &quot;ip_https&quot; {\n  count = length(var.ip_https_listener) &gt; 0 ? 1 : 0\n\n  load_balancer_arn = aws_lb.default.arn\n  port              = var.ip_https_listener.https_port\n  protocol          = &quot;HTTPS&quot;\n  ssl_policy        = var.https_ssl_policy\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    target_group_arn = aws_lb_target_group.ip[0].arn\n    type             = &quot;forward&quot;\n  }\n  depends_on = [aws_lb_target_group.ip]\n}\n</code></pre>\n<p>My problem with this that the listener will always have the same default action.\non my main.tf id like to create a boolean variable for example fixed\nin case fixed == true id like to be able to use the module the same only change the default action:</p>\n<pre><code>  default_action {\n        {\n            type = &quot;fixed-response&quot;\n            fixed_response = {\n            content_type = &quot;text/plain&quot;\n            message_body = &quot;FORBIDDEN&quot;\n            status_code  = &quot;403&quot;\n          }\n</code></pre>\n<p>what the easiet way to do that?</p>\n", "OwnerUserId": "13917424", "LastEditorUserId": "8343484", "LastEditDate": "2022-12-14T12:22:38.620", "LastActivityDate": "2022-12-15T08:23:58.587", "Title": "Terraform logic, check boolean variable, if true change snippet in module", "Tags": "<amazon-web-services><terraform><terraform-provider-aws>", "AnswerCount": "2", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132005482", "PostId": "74797882", "Score": "0", "Text": "You need to use [`dynamic` blocks](https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks)", "CreationDate": "2022-12-14T11:55:17.157", "UserId": "2442804", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "284269687", "PostHistoryTypeId": "2", "PostId": "74797882", "RevisionGUID": "7f5fec23-fb06-42b3-91c7-acc1f7d7cbb4", "CreationDate": "2022-12-14T11:52:47.063", "UserId": "13917424", "Text": "In my main.tf im using a module, in the module there's this snippet:\r\n```\r\nresource \"aws_lb_listener\" \"ip_https\" {\r\n  count = length(var.ip_https_listener) > 0 ? 1 : 0\r\n\r\n  load_balancer_arn = aws_lb.default.arn\r\n  port              = var.ip_https_listener.https_port\r\n  protocol          = \"HTTPS\"\r\n  ssl_policy        = var.https_ssl_policy\r\n  certificate_arn   = var.certificate_arn\r\n\r\n  default_action {\r\n    target_group_arn = aws_lb_target_group.ip[0].arn\r\n    type             = \"forward\"\r\n  }\r\n  depends_on = [aws_lb_target_group.ip]\r\n}\r\n```\r\n\r\nMy problem with this that the listener will always have the same default action.\r\non my main.tf id like to create a boolean variable for example fixed\r\nin case fixed == true id like to be able to use the module the same only change the default action:\r\n```\r\n  default_action {\r\n        {\r\n            type = \"fixed-response\"\r\n            fixed_response = {\r\n            content_type = \"text/plain\"\r\n            message_body = \"FORBIDDEN\"\r\n            status_code  = \"403\"\r\n          }\r\n```\r\nwhat the easiet way to do that?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "on my main.tf id like to create a boolean variable for example fixed in case fixed == true id like to be able to use the module the same only change the default action: ``` default_action { { type = \"fixed-response\" fixed_response = { content_type = \"text/plain\" message_body = \"FORBIDDEN\" status_code = \"403\" ", "keywords": ["change"]}]}, {"Id": "284269689", "PostHistoryTypeId": "1", "PostId": "74797882", "RevisionGUID": "7f5fec23-fb06-42b3-91c7-acc1f7d7cbb4", "CreationDate": "2022-12-14T11:52:47.063", "UserId": "13917424", "Text": "Terraform logic, check boolean variable, if true change snippet in module", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Terraform logic, check boolean variable, if true change snippet in module", "keywords": ["change"]}]}, {"Id": "284269690", "PostHistoryTypeId": "3", "PostId": "74797882", "RevisionGUID": "7f5fec23-fb06-42b3-91c7-acc1f7d7cbb4", "CreationDate": "2022-12-14T11:52:47.063", "UserId": "13917424", "Text": "<amazon-web-services><terraform><logic>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "284271660", "PostHistoryTypeId": "6", "PostId": "74797882", "RevisionGUID": "f27bba5c-a83a-4248-8780-518ed611dbf9", "CreationDate": "2022-12-14T12:22:38.620", "UserId": "8343484", "Comment": "edited tags", "Text": "<amazon-web-services><terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "74797913", "PostTypeId": "2", "ParentId": "74797882", "CreationDate": "2022-12-14T11:55:33.793", "Score": "1", "Body": "<p>This can be done with <code>for_each</code> meta-argument [1] and <code>dynamic</code> [2]:</p>\n<pre><code>  dynamic &quot;default_action&quot; {\n    for_each = var.fixed ? [1] : []\n    content {\n      type = &quot;fixed-response&quot;\n        fixed_response {\n        content_type = &quot;text/plain&quot;\n        message_body = &quot;FORBIDDEN&quot;\n        status_code  = &quot;403&quot;\n      }\n    }\n  }\n</code></pre>\n<hr />\n<p>[1] <a href=\"https://developer.hashicorp.com/terraform/language/meta-arguments/for_each\" rel=\"nofollow noreferrer\">https://developer.hashicorp.com/terraform/language/meta-arguments/for_each</a></p>\n<p>[2] <a href=\"https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks\" rel=\"nofollow noreferrer\">https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks</a></p>\n", "OwnerUserId": "8343484", "LastEditorUserId": "8343484", "LastEditDate": "2022-12-15T08:23:58.587", "LastActivityDate": "2022-12-15T08:23:58.587", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "284269869", "PostHistoryTypeId": "2", "PostId": "74797913", "RevisionGUID": "86599d76-7fdf-4af4-ba77-791eb71d00a2", "CreationDate": "2022-12-14T11:55:33.793", "UserId": "8343484", "Text": "This can be done with `for_each` meta-argument [1] and `dynamic` [2]:\r\n\r\n```hcl\r\n  dynamic \"default_action\" {\r\n    for_each = var.fixed ? [1] : []\r\n    content {\r\n      type = \"fixed-response\"\r\n        fixed_response = {\r\n        content_type = \"text/plain\"\r\n        message_body = \"FORBIDDEN\"\r\n        status_code  = \"403\"\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\n---\r\n\r\n[1] https://developer.hashicorp.com/terraform/language/meta-arguments/for_each\r\n\r\n[2] https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "284331305", "PostHistoryTypeId": "5", "PostId": "74797913", "RevisionGUID": "805f9aa3-179a-496b-a402-818dc998c8cd", "CreationDate": "2022-12-15T08:23:58.587", "UserId": "8343484", "Comment": "deleted 2 characters in body", "Text": "This can be done with `for_each` meta-argument [1] and `dynamic` [2]:\r\n\r\n```hcl\r\n  dynamic \"default_action\" {\r\n    for_each = var.fixed ? [1] : []\r\n    content {\r\n      type = \"fixed-response\"\r\n        fixed_response {\r\n        content_type = \"text/plain\"\r\n        message_body = \"FORBIDDEN\"\r\n        status_code  = \"403\"\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\n---\r\n\r\n[1] https://developer.hashicorp.com/terraform/language/meta-arguments/for_each\r\n\r\n[2] https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "74802315", "PostTypeId": "2", "ParentId": "74797882", "CreationDate": "2022-12-14T17:44:53.663", "Score": "2", "Body": "<p>Unfortunately this isn't as easy as it might first appear because the &quot;fixed-response&quot; example in your question isn't valid. According to the provider documentation, a &quot;fixed-response&quot; action should look like this:</p>\n<pre><code>  default_action {\n    type = &quot;fixed-response&quot;\n\n    fixed_response {\n      content_type = &quot;text/plain&quot;\n      message_body = &quot;FORBIDDEN&quot;\n      status_code  = &quot;403&quot;\n    }\n  }\n</code></pre>\n<p>Note that <code>fixed_response</code> is a nested block rather than an argument, which means that dynamically choosing the number of <code>fixed_response</code> blocks (either zero or one) will require using a <a href=\"https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks\" rel=\"nofollow noreferrer\"><code>dynamic</code> block</a> to generate a dynamic number of these blocks.</p>\n<p>Since there are only two possible cases for <code>default_action</code> I would implement this as a lookup table in a <a href=\"https://developer.hashicorp.com/terraform/language/values/locals\" rel=\"nofollow noreferrer\">local value</a> which shows each of the possible cases as a clear literal data structure, separate from the complexity of generating different nested blocks using <code>dynamic</code> blocks.</p>\n<p>For example:</p>\n<pre><code>variable &quot;ip_https_listener&quot; {\n  type = list(object({\n    https_port = number\n    fixed      = boolean\n  }))\n}\n\nlocals {\n  lb_listener_default_actions = {\n    forward_to_ip = {\n      type             = &quot;forward&quot;\n      target_group_arn = aws_lb_target_group.ip[0].arn\n    }\n    fixed_forbidden = {\n      type = &quot;fixed_response&quot;\n      fixed_response = {\n        content_type = &quot;text/plain&quot;\n        message_body = &quot;FORBIDDEN&quot;\n        status_code  = &quot;403&quot;\n      }\n    }\n  }\n\n  # This extends the var.ip_https_listener objects with an\n  # additional attribute &quot;default_action&quot;, so we can use\n  # local.ip_https_listeners instead of var.ip_https_listener\n  # below to access this conveniently.\n  ip_https_listeners = [\n    for l in var.ip_https_listener :\n    merge(\n      l,\n      {\n        default_action = local.lb_listener_default_actions[l.fixed ? &quot;fixed_response&quot; : &quot;forward_to_ip&quot;]\n      },\n  ]\n}\n\nresource &quot;aws_lb_listener&quot; &quot;ip_https&quot; {\n  for_each = length(local.ip_https_listener)\n\n  load_balancer_arn = aws_lb.default.arn\n  port              = local.ip_https_listener[count.index].https_port\n  # (...and all of your other arguments)\n\n  # Default actions for each listener are selected in the\n  # definition of local.ip_https_listeners, by looking up\n  # one of the possible default actions in\n  # local.lb_listener_default_actions .\n  default_action {\n    type             = local.ip_https_listeners[count.index].default_action.type\n    target_group_arn = try(local.ip_https_listeners[count.index].default_action.target_group_arn, null)\n\n    dynamic &quot;fixed_response&quot; {\n      for_each = try(local.ip_https_listeners[count.index].default_action.fixed_response, null)[*]\n      content {\n        content_type = fixed_response.value.content_type\n        message_body = fixed_response.value.message_body\n        status_code  = fixed_response.value.status_code\n      }\n    }\n  }\n}\n</code></pre>\n<p>There are three key parts to the above:</p>\n<ul>\n<li><p><code>local.lb_listener_default_actions</code> describes the two possible &quot;default actions&quot; that any LB listener can have. I arbitrarily named them <code>forward_to_ip</code> and <code>fixed_forbidden</code> here, but you can choose any name that you find descriptive as long as the <code>local.ip_https_listeners</code> condition results match.</p>\n</li>\n<li><p><code>local.ip_https_listeners</code> is an extension of <code>var.ip_https_listener</code> which adds the new attribute <code>default_action</code> to each of the objects in the list.</p>\n<p>This works by looking up one of the two members of <code>local.lb_listener_default_actions</code> based on whether the <code>fixed</code> attribute is true or false.</p>\n</li>\n<li><p>The <code>resource &quot;aws_lb_listener&quot; &quot;ip_https&quot;</code> block now uses <code>local.ip_https_listeners</code> instead of <code>var.ip_https_listener</code>, and its <code>default_action</code> block is now dynamic based on the <code>dynamic_action</code> attribute of each listener object.</p>\n<p>I used <a href=\"https://developer.hashicorp.com/terraform/language/functions/try\" rel=\"nofollow noreferrer\"><code>try</code></a> to concisely tolerate certain attributes being unset in the default action object, using <code>null</code> to represent absense instead. These expressions then each conditionally include the <code>target_group_arn</code> argument and the <code>fixed_response</code> nested block based on whether their corresponding attributes are set in the source <code>default_action</code> object.</p>\n</li>\n</ul>\n<hr />\n<p>There's a subjective design tradeoff here which I want to be explicit about. I chose to factor out the two possible sets of values for <code>default_action</code> into a separate local value because I think that'll make it easier to read and update them in future, but that does come at the expense of some extra indirection: it's no longer clear just from reading the resource block exactly how the <code>default_action</code> will be populated, and instead requires working backwards through all of these expressions to find the local value to update.</p>\n<p>I added a comment above the <code>default_action</code> block in the resource in an attempt to mitigate that by directing the future maintainer to the appropriate local value, but it would also be possible to write all of the values inline as part of all of these dynamic expressions and thus remove the indirection at the expense of making it (subjectively) harder to find and update a specific value.</p>\n<p>The repeated references to <code>local.ip_https_listeners[count.index]</code> are also unfortunate but come as a consequence of using a list of listeners and the <code>count</code> argument for repetition. If possible I would recommend changing the input variable to be a map of objects instead of a list of objects, and then using <code>for_each</code> to describe the repetition so that you can use <code>each.value</code> as a more concise way to refer to the current element. That is far beyond the scope of this question though, so I won't go into the details about it here.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2022-12-14T17:44:53.663", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132023901", "PostId": "74802315", "Score": "0", "Text": "Greatly appriciate the time and effort you took for answering me with such details. thank you", "CreationDate": "2022-12-15T07:53:55.520", "UserId": "13917424", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "284294642", "PostHistoryTypeId": "2", "PostId": "74802315", "RevisionGUID": "f01ccc0f-25c1-428e-9424-d33c3c88e265", "CreationDate": "2022-12-14T17:44:53.663", "UserId": "281848", "Text": "Unfortunately this isn't as easy as it might first appear because the \"fixed-response\" example in your question isn't valid. According to the provider documentation, a \"fixed-response\" action should look like this:\r\n\r\n```\r\n  default_action {\r\n    type = \"fixed-response\"\r\n\r\n    fixed_response {\r\n      content_type = \"text/plain\"\r\n      message_body = \"FORBIDDEN\"\r\n      status_code  = \"403\"\r\n    }\r\n  }\r\n```\r\n\r\nNote that `fixed_response` is a nested block rather than an argument, which means that dynamically choosing the number of `fixed_response` blocks (either zero or one) will require using a [`dynamic` block](https://developer.hashicorp.com/terraform/language/expressions/dynamic-blocks) to generate a dynamic number of these blocks.\r\n\r\nSince there are only two possible cases for `default_action` I would implement this as a lookup table in a [local value](https://developer.hashicorp.com/terraform/language/values/locals) which shows each of the possible cases as a clear literal data structure, separate from the complexity of generating different nested blocks using `dynamic` blocks.\r\n\r\nFor example:\r\n\r\n```\r\nvariable \"ip_https_listener\" {\r\n  type = list(object({\r\n    https_port = number\r\n    fixed      = boolean\r\n  }))\r\n}\r\n\r\nlocals {\r\n  lb_listener_default_actions = {\r\n    forward_to_ip = {\r\n      type             = \"forward\"\r\n      target_group_arn = aws_lb_target_group.ip[0].arn\r\n    }\r\n    fixed_forbidden = {\r\n      type = \"fixed_response\"\r\n      fixed_response = {\r\n        content_type = \"text/plain\"\r\n        message_body = \"FORBIDDEN\"\r\n        status_code  = \"403\"\r\n      }\r\n    }\r\n  }\r\n\r\n  # This extends the var.ip_https_listener objects with an\r\n  # additional attribute \"default_action\", so we can use\r\n  # local.ip_https_listeners instead of var.ip_https_listener\r\n  # below to access this conveniently.\r\n  ip_https_listeners = [\r\n    for l in var.ip_https_listener :\r\n    merge(\r\n      l,\r\n      {\r\n        default_action = local.lb_listener_default_actions[l.fixed ? \"fixed_response\" : \"forward_to_ip\"]\r\n      },\r\n  ]\r\n}\r\n\r\nresource \"aws_lb_listener\" \"ip_https\" {\r\n  for_each = length(local.ip_https_listener)\r\n\r\n  load_balancer_arn = aws_lb.default.arn\r\n  port              = local.ip_https_listener[count.index].https_port\r\n  # (...and all of your other arguments)\r\n\r\n  # Default actions for each listener are selected in the\r\n  # definition of local.ip_https_listeners, by looking up\r\n  # one of the possible default actions in\r\n  # local.lb_listener_default_actions .\r\n  default_action {\r\n    type             = local.ip_https_listeners[count.index].default_action.type\r\n    target_group_arn = try(local.ip_https_listeners[count.index].default_action.target_group_arn, null)\r\n\r\n    dynamic \"fixed_response\" {\r\n      for_each = try(local.ip_https_listeners[count.index].default_action.fixed_response, null)[*]\r\n      content {\r\n        content_type = fixed_response.value.content_type\r\n        message_body = fixed_response.value.message_body\r\n        status_code  = fixed_response.value.status_code\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThere are three key parts to the above:\r\n\r\n* `local.lb_listener_default_actions` describes the two possible \"default actions\" that any LB listener can have. I arbitrarily named them `forward_to_ip` and `fixed_forbidden` here, but you can choose any name that you find descriptive as long as the `local.ip_https_listeners` condition results match.\r\n* `local.ip_https_listeners` is an extension of `var.ip_https_listener` which adds the new attribute `default_action` to each of the objects in the list.\r\n\r\n    This works by looking up one of the two members of `local.lb_listener_default_actions` based on whether the `fixed` attribute is true or false.\r\n* The `resource \"aws_lb_listener\" \"ip_https\"` block now uses `local.ip_https_listeners` instead of `var.ip_https_listener`, and its `default_action` block is now dynamic based on the `dynamic_action` attribute of each listener object.\r\n\r\n    I used [`try`](https://developer.hashicorp.com/terraform/language/functions/try) to concisely tolerate certain attributes being unset in the default action object, using `null` to represent absense instead. These expressions then each conditionally include the `target_group_arn` argument and the `fixed_response` nested block based on whether their corresponding attributes are set in the source `default_action` object.\r\n\r\n---\r\n\r\nThere's a subjective design tradeoff here which I want to be explicit about. I chose to factor out the two possible sets of values for `default_action` into a separate local value because I think that'll make it easier to read and update them in future, but that does come at the expense of some extra indirection: it's no longer clear just from reading the resource block exactly how the `default_action` will be populated, and instead requires working backwards through all of these expressions to find the local value to update.\r\n\r\nI added a comment above the `default_action` block in the resource in an attempt to mitigate that by directing the future maintainer to the appropriate local value, but it would also be possible to write all of the values inline as part of all of these dynamic expressions and thus remove the indirection at the expense of making it (subjectively) harder to find and update a specific value.\r\n\r\nThe repeated references to `local.ip_https_listeners[count.index]` are also unfortunate but come as a consequence of using a list of listeners and the `count` argument for repetition. If possible I would recommend changing the input variable to be a map of objects instead of a list of objects, and then using `for_each` to describe the repetition so that you can use `each.value` as a more concise way to refer to the current element. That is far beyond the scope of this question though, so I won't go into the details about it here.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "According to the provider documentation, a \"fixed-response\" action should look like this: ``` default_action { type = \"fixed-response\" fixed_response { content_type = \"text/plain\" message_body = \"FORBIDDEN\" status_code = \"403\" } } ``` ", "keywords": ["provider"]}, {"source": "Text", "text": "I chose to factor out the two possible sets of values for `default_action` into a separate local value because I think that'll make it easier to read and update them in future, but that does come at the expense of some extra indirection: it's no longer clear just from reading the resource block exactly how the `default_action` will be populated, and instead requires working backwards through all of these expressions to find the local value to update. ", "keywords": ["expense"]}, {"source": "Text", "text": "I added a comment above the `default_action` block in the resource in an attempt to mitigate that by directing the future maintainer to the appropriate local value, but it would also be possible to write all of the values inline as part of all of these dynamic expressions and thus remove the indirection at the expense of making it (subjectively) harder to find and update a specific value. ", "keywords": ["expense"]}, {"source": "Text", "text": "If possible I would recommend changing the input variable to be a map of objects instead of a list of objects, and then using `for_each` to describe the repetition so that you can use `each.value` as a more concise way to refer to the current element. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "According to the provider documentation, a \"fixed-response\" action should look like this: Note that fixed_response is a nested block rather than an argument, which means that dynamically choosing the number of fixed_response blocks (either zero or one) will require using a dynamic block to generate a dynamic number of these blocks. ", "keywords": ["provider"]}, {"source": "Body", "text": "I chose to factor out the two possible sets of values for default_action into a separate local value because I think that'll make it easier to read and update them in future, but that does come at the expense of some extra indirection: it's no longer clear just from reading the resource block exactly how the default_action will be populated, and instead requires working backwards through all of these expressions to find the local value to update. ", "keywords": ["expense"]}, {"source": "Body", "text": "I added a comment above the default_action block in the resource in an attempt to mitigate that by directing the future maintainer to the appropriate local value, but it would also be possible to write all of the values inline as part of all of these dynamic expressions and thus remove the indirection at the expense of making it (subjectively) harder to find and update a specific value. ", "keywords": ["expense"]}, {"source": "Body", "text": "If possible I would recommend changing the input variable to be a map of objects instead of a list of objects, and then using for_each to describe the repetition so that you can use each.", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Terraform logic, check boolean variable, if true change snippet in module", "keywords": ["change"]}, {"source": "Body", "text": "on my main.tf id like to create a boolean variable for example fixed in case fixed == true id like to be able to use the module the same only change the default action: what the easiet way to do that?", "keywords": ["change"]}]}