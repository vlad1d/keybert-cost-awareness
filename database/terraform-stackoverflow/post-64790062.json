{"Id": "64790062", "PostTypeId": "1", "CreationDate": "2020-11-11T16:13:20.033", "Score": "0", "ViewCount": "196", "Body": "<p>I usually have one generic <strong>main.tf</strong> file that is the basis for all deployments to our environments (<strong>DEV/STAGING/LIVE</strong>). I have one parameter.tf file for each of those environments.</p>\n<p>There is always a requirement to have some more expensive Azure options enabled in the STAGING and LIVE environments over what DEV might have - in my example its enabling the Azure Defender for SQL and extended Auditing functions for Azure SQL servers (PaaS)</p>\n<p>This is a portion of my main.tf file that is generic...</p>\n<pre><code># Define SQL Server \nresource &quot;azurerm_mssql_server&quot; &quot;example&quot; {\n  name                          = var.azsqlserver1name\n  resource_group_name           = azurerm_resource_group.example.name\n  location                      = azurerm_resource_group.example.location\n  version                       = var.azsqlserver1version\n  administrator_login           = var.azsqlserver1sauser\n  administrator_login_password  = random_password.sql-password.result\n  public_network_access_enabled = &quot;true&quot; # set to false with vNet integration\n}\n\n# Define Storage Account and container for SQL Threat Detection Policy Audit Logs \nresource &quot;azurerm_storage_account&quot; &quot;example&quot; {\n  name                     = var.azsaname1\n  resource_group_name      = azurerm_resource_group.example.name\n  location                 = azurerm_resource_group.example.location\n  account_tier             = var.azsatier1\n  account_replication_type = var.azsasku1\n  access_tier              = var.azsaaccesstier1\n  account_kind             = var.azsakind1\n  enable_https_traffic_only  = &quot;true&quot;\n}\nresource &quot;azurerm_storage_container&quot; &quot;example&quot; {\n  name                  = &quot;vascans&quot;\n  storage_account_name  = azurerm_storage_account.example.name\n  container_access_type = &quot;private&quot;\n}\n\n# Defines Azure SQL Defender and Auditing - NOTE: Auditing - only SA out at the moment (11/2020) - Log Analytics and Event Hub in preview only\nresource &quot;azurerm_mssql_server_security_alert_policy&quot; &quot;example&quot; {\n  resource_group_name        = azurerm_resource_group.example.name\n  server_name                = azurerm_mssql_server.example.name\n  state                      = var.azsqltreatdetectionstate\n  storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint\n  storage_account_access_key = azurerm_storage_account.example.primary_access_key\n  email_account_admins       = var.azsqltreatdetectionemailadmins\n  retention_days             = var.azsqltreatdetectionretention\n}\nresource &quot;azurerm_mssql_server_vulnerability_assessment&quot; &quot;example&quot; {\n  server_security_alert_policy_id = azurerm_mssql_server_security_alert_policy.example.id\n  storage_container_path          = &quot;${azurerm_storage_account.example.primary_blob_endpoint}${azurerm_storage_container.example.name}/&quot;\n  storage_account_access_key      = azurerm_storage_account.example.primary_access_key\n  recurring_scans {\n    enabled                   = var.azsqlvscansrecurring\n    email_subscription_admins = var.azsqlvscansemailadmins\n  }\n}\nresource &quot;azurerm_mssql_server_extended_auditing_policy&quot; &quot;example&quot; {\n  server_id                               = azurerm_mssql_server.example.id\n  storage_endpoint                        = azurerm_storage_account.example.primary_blob_endpoint\n  storage_account_access_key              = azurerm_storage_account.example.primary_access_key\n  storage_account_access_key_is_secondary = false\n  retention_in_days                       = var.azsqlauditretentiondays\n}\n</code></pre>\n<p>What I need to do is have anything after the first <strong>&quot;azurerm_mssql_server&quot;</strong> resource to only be created in STAGING and LIVE (not DEV). I was planning to have a variable in the DEV/STAGING/LIVE parm tf files that state something like...</p>\n<p><strong>DEVparm.tf</strong></p>\n<pre><code>variable azsqlenableazuredefenderforsql {\n  default=&quot;false&quot;\n}\n</code></pre>\n<p><strong>STAGINGparm.tf and LIVEparm.tf</strong></p>\n<pre><code>variable azsqlenableazuredefenderforsql {\n  default=&quot;true&quot;\n}\n</code></pre>\n<p>If this possible to achieve? Thus far I've draw a blank and tested a few things, but they don't quite work. It seems a simple enough vision, but when there is no IF... statement</p>\n", "OwnerUserId": "12111749", "LastEditorUserId": "107625", "LastEditDate": "2020-11-12T08:04:15.563", "LastActivityDate": "2020-11-12T08:04:15.563", "Title": "Create main.tf resources only when a variable is set to true in the vars.tf file", "Tags": "<terraform><terraform-provider-azure>", "AnswerCount": "2", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "234711719", "PostHistoryTypeId": "2", "PostId": "64790062", "RevisionGUID": "a403cf41-7f83-405b-bc80-a56407b2b0a0", "CreationDate": "2020-11-11T16:13:20.033", "UserId": "12111749", "Text": "I usually have one generic **main.tf** file that is the basis for all deployments to our environments (**DEV/STAGING/LIVE**). I have one parameter.tf file for each of those environments. \r\n\r\nThere is always a requirement to have some more expensive Azure options enabled in the STAGING and LIVE environments over what DEV might have - in my example its enabling the Azure Defender for SQL and extended Auditing functions for Azure SQL servers (PaaS) \r\n\r\nThis is a portion of my main.tf file that is generic...\r\n\r\n    # Define SQL Server \r\n    resource \"azurerm_mssql_server\" \"example\" {\r\n      name                          = var.azsqlserver1name\r\n      resource_group_name           = azurerm_resource_group.example.name\r\n      location                      = azurerm_resource_group.example.location\r\n      version                       = var.azsqlserver1version\r\n      administrator_login           = var.azsqlserver1sauser\r\n      administrator_login_password  = random_password.sql-password.result\r\n      public_network_access_enabled = \"true\" # set to false with vNet integration\r\n    }\r\n    \r\n    # Define Storage Account and container for SQL Threat Detection Policy Audit Logs \r\n    resource \"azurerm_storage_account\" \"example\" {\r\n      name                     = var.azsaname1\r\n      resource_group_name      = azurerm_resource_group.example.name\r\n      location                 = azurerm_resource_group.example.location\r\n      account_tier             = var.azsatier1\r\n      account_replication_type = var.azsasku1\r\n      access_tier              = var.azsaaccesstier1\r\n      account_kind             = var.azsakind1\r\n      enable_https_traffic_only  = \"true\"\r\n    }\r\n    resource \"azurerm_storage_container\" \"example\" {\r\n      name                  = \"vascans\"\r\n      storage_account_name  = azurerm_storage_account.example.name\r\n      container_access_type = \"private\"\r\n    }\r\n    \r\n    # Defines Azure SQL Defender and Auditing - NOTE: Auditing - only SA out at the moment (11/2020) - Log Analytics and Event Hub in preview only\r\n    resource \"azurerm_mssql_server_security_alert_policy\" \"example\" {\r\n      resource_group_name        = azurerm_resource_group.example.name\r\n      server_name                = azurerm_mssql_server.example.name\r\n      state                      = var.azsqltreatdetectionstate\r\n      storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint\r\n      storage_account_access_key = azurerm_storage_account.example.primary_access_key\r\n      email_account_admins       = var.azsqltreatdetectionemailadmins\r\n      retention_days             = var.azsqltreatdetectionretention\r\n    }\r\n    resource \"azurerm_mssql_server_vulnerability_assessment\" \"example\" {\r\n      server_security_alert_policy_id = azurerm_mssql_server_security_alert_policy.example.id\r\n      storage_container_path          = \"${azurerm_storage_account.example.primary_blob_endpoint}${azurerm_storage_container.example.name}/\"\r\n      storage_account_access_key      = azurerm_storage_account.example.primary_access_key\r\n      recurring_scans {\r\n        enabled                   = var.azsqlvscansrecurring\r\n        email_subscription_admins = var.azsqlvscansemailadmins\r\n      }\r\n    }\r\n    resource \"azurerm_mssql_server_extended_auditing_policy\" \"example\" {\r\n      server_id                               = azurerm_mssql_server.example.id\r\n      storage_endpoint                        = azurerm_storage_account.example.primary_blob_endpoint\r\n      storage_account_access_key              = azurerm_storage_account.example.primary_access_key\r\n      storage_account_access_key_is_secondary = false\r\n      retention_in_days                       = var.azsqlauditretentiondays\r\n    }\r\n\r\nWhat I need to do is have anything after the first **\"azurerm_mssql_server\"** resource to only be created in STAGING and LIVE (not DEV). I was planning to have a variable in the DEV/STAGING/LIVE parm tf files that state something like...\r\n\r\n**DEVparm.tf**\r\n\r\n    variable azsqlenableazuredefenderforsql {\r\n      default=\"false\"\r\n    }\r\n\r\n**STAGINGparm.tf and LIVEparm.tf**\r\n\r\n    variable azsqlenableazuredefenderforsql {\r\n      default=\"true\"\r\n    }\r\n\r\nIf this possible to achieve? Thus far I've draw a blank and tested a few things, but they don't quite work. It seems a simple enough vision, but when there is no IF... statement\r\n\r\nThanks in advance! \r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is always a requirement to have some more expensive Azure options enabled in the STAGING and LIVE environments over what DEV might have - in my example its enabling the Azure Defender for SQL and extended Auditing functions for Azure SQL servers (PaaS) ", "keywords": ["expense"]}, {"source": "Text", "text": "# Define SQL Server resource \"azurerm_mssql_server\" \"example\" { name = var.azsqlserver1name resource_group_name = azurerm_resource_group.example.name location = azurerm_resource_group.example.location version = var.azsqlserver1version administrator_login = var.azsqlserver1sauser administrator_login_password = random_password.sql-password.result public_network_access_enabled = \"true\" # set to false with vNet integration } # Define Storage Account and container for SQL Threat Detection Policy Audit Logs resource \"azurerm_storage_account\" \"example\" { name = var.azsaname1 resource_group_name = azurerm_resource_group.example.name location = azurerm_resource_group.example.location account_tier = var.azsatier1 account_replication_type = var.azsasku1 access_tier = var.azsaaccesstier1 account_kind = var.azsakind1 enable_https_traffic_only = \"true\" } resource \"azurerm_storage_container\" \"example\" { name = \"vascans\" storage_account_name = azurerm_storage_account.example.name container_access_type = \"private\" } # Defines Azure SQL Defender and Auditing - NOTE: Auditing - only SA out at the moment (11/2020) - Log Analytics and Event Hub in preview only resource \"azurerm_mssql_server_security_alert_policy\" \"example\" { resource_group_name = azurerm_resource_group.example.name server_name = azurerm_mssql_server.example.name state = var.azsqltreatdetectionstate storage_endpoint = azurerm_storage_account.example.primary_blob_endpoint storage_account_access_key = azurerm_storage_account.example.primary_access_key email_account_admins = var.azsqltreatdetectionemailadmins retention_days = var.azsqltreatdetectionretention } resource \"azurerm_mssql_server_vulnerability_assessment\" \"example\" { server_security_alert_policy_id = azurerm_mssql_server_security_alert_policy.example.id storage_container_path = \"${azurerm_storage_account.example.primary_blob_endpoint}${azurerm_storage_container.example.name}/\" storage_account_access_key = azurerm_storage_account.example.primary_access_key recurring_scans { enabled = var.azsqlvscansrecurring email_subscription_admins = var.azsqlvscansemailadmins } } resource \"azurerm_mssql_server_extended_auditing_policy\" \"example\" { server_id = azurerm_mssql_server.example.id storage_endpoint = azurerm_storage_account.example.primary_blob_endpoint storage_account_access_key = azurerm_storage_account.example.primary_access_key storage_account_access_key_is_secondary = false retention_in_days = var.azsqlauditretentiondays } What I need to do is have anything after the first **\"azurerm_mssql_server\"** resource to only be created in STAGING and LIVE (not DEV). ", "keywords": ["storage", "policy"]}, {"source": "Text", "text": "Thus far I've draw a blank and tested a few things, but they don't quite work. ", "keywords": ["test"]}]}, {"Id": "234711720", "PostHistoryTypeId": "1", "PostId": "64790062", "RevisionGUID": "a403cf41-7f83-405b-bc80-a56407b2b0a0", "CreationDate": "2020-11-11T16:13:20.033", "UserId": "12111749", "Text": "Terraform - Create main.tf resources only when a variable is set to true in the vars.tf file", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "234711721", "PostHistoryTypeId": "3", "PostId": "64790062", "RevisionGUID": "a403cf41-7f83-405b-bc80-a56407b2b0a0", "CreationDate": "2020-11-11T16:13:20.033", "UserId": "12111749", "Text": "<terraform><terraform-provider-azure>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "234753923", "PostHistoryTypeId": "5", "PostId": "64790062", "RevisionGUID": "7c6919cc-2a57-4efd-b28b-993062606997", "CreationDate": "2020-11-12T08:04:15.563", "UserId": "107625", "Comment": "Removed tags from title", "Text": "I usually have one generic **main.tf** file that is the basis for all deployments to our environments (**DEV/STAGING/LIVE**). I have one parameter.tf file for each of those environments. \r\n\r\nThere is always a requirement to have some more expensive Azure options enabled in the STAGING and LIVE environments over what DEV might have - in my example its enabling the Azure Defender for SQL and extended Auditing functions for Azure SQL servers (PaaS) \r\n\r\nThis is a portion of my main.tf file that is generic...\r\n\r\n    # Define SQL Server \r\n    resource \"azurerm_mssql_server\" \"example\" {\r\n      name                          = var.azsqlserver1name\r\n      resource_group_name           = azurerm_resource_group.example.name\r\n      location                      = azurerm_resource_group.example.location\r\n      version                       = var.azsqlserver1version\r\n      administrator_login           = var.azsqlserver1sauser\r\n      administrator_login_password  = random_password.sql-password.result\r\n      public_network_access_enabled = \"true\" # set to false with vNet integration\r\n    }\r\n    \r\n    # Define Storage Account and container for SQL Threat Detection Policy Audit Logs \r\n    resource \"azurerm_storage_account\" \"example\" {\r\n      name                     = var.azsaname1\r\n      resource_group_name      = azurerm_resource_group.example.name\r\n      location                 = azurerm_resource_group.example.location\r\n      account_tier             = var.azsatier1\r\n      account_replication_type = var.azsasku1\r\n      access_tier              = var.azsaaccesstier1\r\n      account_kind             = var.azsakind1\r\n      enable_https_traffic_only  = \"true\"\r\n    }\r\n    resource \"azurerm_storage_container\" \"example\" {\r\n      name                  = \"vascans\"\r\n      storage_account_name  = azurerm_storage_account.example.name\r\n      container_access_type = \"private\"\r\n    }\r\n    \r\n    # Defines Azure SQL Defender and Auditing - NOTE: Auditing - only SA out at the moment (11/2020) - Log Analytics and Event Hub in preview only\r\n    resource \"azurerm_mssql_server_security_alert_policy\" \"example\" {\r\n      resource_group_name        = azurerm_resource_group.example.name\r\n      server_name                = azurerm_mssql_server.example.name\r\n      state                      = var.azsqltreatdetectionstate\r\n      storage_endpoint           = azurerm_storage_account.example.primary_blob_endpoint\r\n      storage_account_access_key = azurerm_storage_account.example.primary_access_key\r\n      email_account_admins       = var.azsqltreatdetectionemailadmins\r\n      retention_days             = var.azsqltreatdetectionretention\r\n    }\r\n    resource \"azurerm_mssql_server_vulnerability_assessment\" \"example\" {\r\n      server_security_alert_policy_id = azurerm_mssql_server_security_alert_policy.example.id\r\n      storage_container_path          = \"${azurerm_storage_account.example.primary_blob_endpoint}${azurerm_storage_container.example.name}/\"\r\n      storage_account_access_key      = azurerm_storage_account.example.primary_access_key\r\n      recurring_scans {\r\n        enabled                   = var.azsqlvscansrecurring\r\n        email_subscription_admins = var.azsqlvscansemailadmins\r\n      }\r\n    }\r\n    resource \"azurerm_mssql_server_extended_auditing_policy\" \"example\" {\r\n      server_id                               = azurerm_mssql_server.example.id\r\n      storage_endpoint                        = azurerm_storage_account.example.primary_blob_endpoint\r\n      storage_account_access_key              = azurerm_storage_account.example.primary_access_key\r\n      storage_account_access_key_is_secondary = false\r\n      retention_in_days                       = var.azsqlauditretentiondays\r\n    }\r\n\r\nWhat I need to do is have anything after the first **\"azurerm_mssql_server\"** resource to only be created in STAGING and LIVE (not DEV). I was planning to have a variable in the DEV/STAGING/LIVE parm tf files that state something like...\r\n\r\n**DEVparm.tf**\r\n\r\n    variable azsqlenableazuredefenderforsql {\r\n      default=\"false\"\r\n    }\r\n\r\n**STAGINGparm.tf and LIVEparm.tf**\r\n\r\n    variable azsqlenableazuredefenderforsql {\r\n      default=\"true\"\r\n    }\r\n\r\nIf this possible to achieve? Thus far I've draw a blank and tested a few things, but they don't quite work. It seems a simple enough vision, but when there is no IF... statement\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "There is always a requirement to have some more expensive Azure options enabled in the STAGING and LIVE environments over what DEV might have - in my example its enabling the Azure Defender for SQL and extended Auditing functions for Azure SQL servers (PaaS) ", "keywords": ["expense"]}, {"source": "Text", "text": "# Define SQL Server resource \"azurerm_mssql_server\" \"example\" { name = var.azsqlserver1name resource_group_name = azurerm_resource_group.example.name location = azurerm_resource_group.example.location version = var.azsqlserver1version administrator_login = var.azsqlserver1sauser administrator_login_password = random_password.sql-password.result public_network_access_enabled = \"true\" # set to false with vNet integration } # Define Storage Account and container for SQL Threat Detection Policy Audit Logs resource \"azurerm_storage_account\" \"example\" { name = var.azsaname1 resource_group_name = azurerm_resource_group.example.name location = azurerm_resource_group.example.location account_tier = var.azsatier1 account_replication_type = var.azsasku1 access_tier = var.azsaaccesstier1 account_kind = var.azsakind1 enable_https_traffic_only = \"true\" } resource \"azurerm_storage_container\" \"example\" { name = \"vascans\" storage_account_name = azurerm_storage_account.example.name container_access_type = \"private\" } # Defines Azure SQL Defender and Auditing - NOTE: Auditing - only SA out at the moment (11/2020) - Log Analytics and Event Hub in preview only resource \"azurerm_mssql_server_security_alert_policy\" \"example\" { resource_group_name = azurerm_resource_group.example.name server_name = azurerm_mssql_server.example.name state = var.azsqltreatdetectionstate storage_endpoint = azurerm_storage_account.example.primary_blob_endpoint storage_account_access_key = azurerm_storage_account.example.primary_access_key email_account_admins = var.azsqltreatdetectionemailadmins retention_days = var.azsqltreatdetectionretention } resource \"azurerm_mssql_server_vulnerability_assessment\" \"example\" { server_security_alert_policy_id = azurerm_mssql_server_security_alert_policy.example.id storage_container_path = \"${azurerm_storage_account.example.primary_blob_endpoint}${azurerm_storage_container.example.name}/\" storage_account_access_key = azurerm_storage_account.example.primary_access_key recurring_scans { enabled = var.azsqlvscansrecurring email_subscription_admins = var.azsqlvscansemailadmins } } resource \"azurerm_mssql_server_extended_auditing_policy\" \"example\" { server_id = azurerm_mssql_server.example.id storage_endpoint = azurerm_storage_account.example.primary_blob_endpoint storage_account_access_key = azurerm_storage_account.example.primary_access_key storage_account_access_key_is_secondary = false retention_in_days = var.azsqlauditretentiondays } What I need to do is have anything after the first **\"azurerm_mssql_server\"** resource to only be created in STAGING and LIVE (not DEV). ", "keywords": ["storage", "policy"]}, {"source": "Text", "text": "Thus far I've draw a blank and tested a few things, but they don't quite work. ", "keywords": ["test"]}]}, {"Id": "234753924", "PostHistoryTypeId": "4", "PostId": "64790062", "RevisionGUID": "7c6919cc-2a57-4efd-b28b-993062606997", "CreationDate": "2020-11-12T08:04:15.563", "UserId": "107625", "Comment": "Removed tags from title", "Text": "Create main.tf resources only when a variable is set to true in the vars.tf file", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "64790952", "PostTypeId": "2", "ParentId": "64790062", "CreationDate": "2020-11-11T17:07:30.237", "Score": "1", "Body": "<p>One way that a lot of people solve this is by combining the <code>count</code> parameter on resources with a ternary. For example, look at the section entitled &quot;If-Statements with the count parameter&quot; in <a href=\"https://blog.gruntwork.io/terraform-tips-tricks-loops-if-statements-and-gotchas-f739bbae55f9#478c\" rel=\"nofollow noreferrer\">https://blog.gruntwork.io/terraform-tips-tricks-loops-if-statements-and-gotchas-f739bbae55f9#478c</a>.</p>\n<p>Basically you can keep your <code>azsqlenableazuredefenderforsql</code> variable and then in your resources do something like:</p>\n<pre><code>resource &quot;azurerm_storage_container&quot; &quot;example&quot; {\n  count                 = var.azsqlenableazuredefenderforsql ? 1 : 0\n  name                  = &quot;vascans&quot;\n  storage_account_name  = azurerm_storage_account.example.name\n  container_access_type = &quot;private&quot;\n}\n</code></pre>\n", "OwnerUserId": "6692227", "LastActivityDate": "2020-11-11T17:07:30.237", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "114573079", "PostId": "64790952", "Score": "0", "Text": "Thanks - I was trying this out yesterday before posting up here. I didn't get that much joy out of it unfortunately - seems its an issue.https://github.com/hashicorp/terraform/issues/25578 My main issue is that the SA is also implied elsewhere in the other parts of the code, and that involves a lot of placing of [1] after the resource label...e.g. example[1].", "CreationDate": "2020-11-12T10:18:46.583", "UserId": "12111749", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "234715622", "PostHistoryTypeId": "2", "PostId": "64790952", "RevisionGUID": "047baa35-e52f-4169-b2a9-c8414b0ccaa2", "CreationDate": "2020-11-11T17:07:30.237", "UserId": "6692227", "Text": "One way that a lot of people solve this is by combining the `count` parameter on resources with a ternary. For example, look at the section entitled \"If-Statements with the count parameter\" in https://blog.gruntwork.io/terraform-tips-tricks-loops-if-statements-and-gotchas-f739bbae55f9#478c.\r\n\r\nBasically you can keep your `azsqlenableazuredefenderforsql` variable and then in your resources do something like:\r\n```\r\nresource \"azurerm_storage_container\" \"example\" {\r\n  count                 = var.azsqlenableazuredefenderforsql ? 1 : 0\r\n  name                  = \"vascans\"\r\n  storage_account_name  = azurerm_storage_account.example.name\r\n  container_access_type = \"private\"\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "64790950", "PostTypeId": "2", "ParentId": "64790062", "CreationDate": "2020-11-11T17:07:25.443", "Score": "1", "Body": "<p>If you need to flip a resource on and off that is easy to achieve with count = 1 or 0.  This is usually handled with the ternary operator.</p>\n<pre><code>resource &quot;some_resource&quot; &quot;example&quot; {\n count = terraform.workspace != &quot;development&quot; ? 1 : 0\n}\n</code></pre>\n<p>The count parameter was added to modules for terraform 0.13.  If you have a bundle of resources it could be an alterative method to excluding certain resources from building.</p>\n", "OwnerUserId": "3665058", "LastActivityDate": "2020-11-11T17:07:25.443", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "234715620", "PostHistoryTypeId": "2", "PostId": "64790950", "RevisionGUID": "5b6435a0-4b2d-40fc-85b0-d8caadfbb8e6", "CreationDate": "2020-11-11T17:07:25.443", "UserId": "3665058", "Text": "If you need to flip a resource on and off that is easy to achieve with count = 1 or 0.  This is usually handled with the ternary operator.\r\n\r\n```\r\nresource \"some_resource\" \"example\" {\r\n count = terraform.workspace != \"development\" ? 1 : 0\r\n}\r\n```\r\n\r\nThe count parameter was added to modules for terraform 0.13.  If you have a bundle of resources it could be an alterative method to excluding certain resources from building.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "There is always a requirement to have some more expensive Azure options enabled in the STAGING and LIVE environments over what DEV might have - in my example its enabling the Azure Defender for SQL and extended Auditing functions for Azure SQL servers (PaaS) ", "keywords": ["expense"]}, {"source": "Body", "text": "Thus far I've draw a blank and tested a few things, but they don't quite work. ", "keywords": ["test"]}]}