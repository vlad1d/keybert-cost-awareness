{"Id": "73198845", "PostTypeId": "1", "CreationDate": "2022-08-01T19:46:10.577", "Score": "0", "ViewCount": "990", "Body": "<p>I'm fairly new to AWS Firehose and Glue and everything, and I'm flummoxed.  I'm trying to get the data that comes through the firehose to be converted properly to a Parquet file in S3.</p>\n<p>My question is this: <strong>How can I make any record format conversions fail whenever they don't have the exact list of column names and data types that I'm looking for?</strong>  In other words, it should fail if there are more or fewer columns, columns with incorrect names, or values with incorrect data types.</p>\n<p>Below is all the background information on what I've attempted thus far and the Terraform code I currently have.</p>\n<p>Initially, I had it set up with the column names defined directly in the <code>aws_glue_catalog_table</code> resource in my Terraform file, but that was allowing data that should not have been accepted to get converted and stored as a Parquet file.  It was correctly handling data the data that I want it to handle, but it was also allowing a variety of bad data through.</p>\n<p>My desired column names (and their types) are:</p>\n<ul>\n<li>occurred_at: timestamp</li>\n<li>account_id: bigint</li>\n<li>form_id: string</li>\n<li>action: string</li>\n<li>url: string</li>\n<li>visitor_uuid: string</li>\n<li>properties: string</li>\n</ul>\n<p>An example object that it happily accepted is the following object; an excerpt from the database table is shown here:</p>\n<pre><code>                                                  Table &quot;public.accounts&quot;\n             Column             |            Type             | Collation | Nullable |               Default\n--------------------------------+-----------------------------+-----------+----------+--------------------------------------\n id                             | integer                     |           | not null | nextval('accounts_id_seq'::regclass)\n subscription_id                | integer                     |           |          |\n name                           | character varying(255)      |           |          |\n url                            | character varying(255)      |           |          |\n deleted_at                     | timestamp without time zone |           |          |\n created_at                     | timestamp without time zone |           | not null |\n updated_at                     | timestamp without time zone |           | not null |\n default_from_email             | character varying(255)      |           |          |\n default_postal_address         | text                        |           |          |\n default_from_name              | character varying(255)      |           |          |\n primary_email                  | character varying(255)      |           |          |\n disable_js                     | boolean                     |           |          | false\n status                         | character varying(255)      |           |          |\n is_onboarded                   | boolean                     |           |          |\n hide_guided_setup              | boolean                     |           |          |\n is_js_installed                | boolean                     |           |          |\n domain                         | character varying(255)      |           |          |\n enable_third_party_cookies     | boolean                     |           |          |\n phone_number                   | character varying(255)      |           |          |\n disable_analytics              | boolean                     |           |          | false\n has_activated_campaign         | boolean                     |           |          | false\n has_enabled_goal               | boolean                     |           |          | false\n current_setup_id               | integer                     |           |          |\n default_template_id            | integer                     |           |          |\n default_html_footer            | text                        |           |          |\n default_text_footer            | text                        |           |          |\n enable_lead_scoring            | boolean                     |           | not null | false\n raw_lead_settings              | text                        |           |          |\n regenerate_js                  | boolean                     |           |          | true\n sending_status                 | character varying(255)      |           |          |\n</code></pre>\n<p>The resulting parquet files have the <code>url</code> field populated, but the remaining 6 values, which don't have matching column names in the database table, are <code>None</code> (or <code>NaT</code> or <code>NaN</code>, depending on the column's data type).</p>\n<p>In an effort to reject bad data I attempted to use an AWS Glue Schema to handle the record format conversion.  I have tried both the Avro schema and protobuf, both of which fail in different ways.  I have not tried using JSON, because it doesn't seem to support timestamps, which I need.</p>\n<p>The Avro implementation yields failed conversion files uploaded to S3 which look like this:</p>\n<pre><code>{\n  &quot;attemptsMade&quot;:1,\n  &quot;arrivalTimestamp&quot;:1659372890895,\n  &quot;lastErrorCode&quot;:&quot;DataFormatConversion.InvalidSchema&quot;,\n  &quot;lastErrorMessage&quot;:&quot;The schema is invalid. The specified table has no columns.&quot;,\n  &quot;attemptEndingTimestamp&quot;:1659372956967,\n  &quot;rawData&quot;:&quot;eyJpZCI6MSwiYWNjb3VudF9pZCI6MSwiZm9ybV9pZCI6MSwidmlzaXRvcl91dWlkIjoiIiwiYWN0aW9uIjoic3VibWl0IiwiY3JlYXRlZF9hdCI6IjIwMTYtMDUtMThUMjI6MTU6MjkuNDIwWiIsInVwZGF0ZWRfYXQiOiIyMDE2LTA1LTE4VDIyOjE1OjI5LjQyMFoiLCJ1cmwiOiIiLCJtYW51YWxseV9vcGVuZWQiOm51bGwsIm9jY3VycmVkX2F0IjoiMjAxNi0wNS0xOFQyMjoxNToyOS40MTlaIn0=&quot;,\n  &quot;sequenceNumber&quot;:&quot;49631940267636444464128680289902809552022038273287258114&quot;,\n  &quot;subSequenceNumber&quot;:null,\n  &quot;dataCatalogTable&quot;: {\n    &quot;catalogId&quot;:null,\n    &quot;databaseName&quot;:&quot;drip-staging-sn-form-events-glue-db&quot;,\n    &quot;tableName&quot;:&quot;drip-staging-sn-form-events-glue-table&quot;,\n    &quot;region&quot;:&quot;us-east-1&quot;,\n    &quot;versionId&quot;:&quot;LATEST&quot;,\n    &quot;roleArn&quot;:&quot;arn:aws:iam::[[my AWS account number]]:role/drip-staging-sn-form-event-firehose-role&quot;\n  }\n}\n</code></pre>\n<p>I have no idea why it says it can't find the columns, because when I open up the Glue table in the AWS console, it shows the columns I expect to see, and it says that it pulled the columns from a Glue schema.</p>\n<p>Next, I tried protobufs, which failed when I tried to apply the Terraform plan, with the following error message:</p>\n<pre><code>aws_glue_catalog_table.sn_form_events: Modifying... [id=[[my AWS account number]]:drip-staging-sn-form-events-glue-db:drip-staging-sn-form-events-glue-table]\n\u2577\n\u2502 Error: Error updating Glue Catalog Table: InvalidInputException: No SchemaDereferencingStrategy found for schema type: PROTOBUF\n\u2502\n\u2502   with aws_glue_catalog_table.sn_form_events,\n\u2502   on drip-firehose-streams.tf line 61, in resource &quot;aws_glue_catalog_table&quot; &quot;sn_form_events&quot;:\n\u2502   61: resource &quot;aws_glue_catalog_table&quot; &quot;sn_form_events&quot; {\n</code></pre>\n<p>Here's the Terraform file that I'm using to set things up.  I've commented out the protobufs code and the <code>columns</code> within the Glue table, but the commented out versions are what I use when trying to use each of those alternatives.  Note that <code>var.resource_prefix</code> evaluates to <code>drip</code> and <code>var.resource_domain</code> evaluates to <code>staging</code></p>\n<pre><code>data &quot;aws_s3_bucket&quot; &quot;sn_form_event_destination&quot; {\n  bucket = &quot;drip-data-mart&quot;\n}\n\nresource &quot;aws_cloudwatch_log_group&quot; &quot;sn_form_events&quot; {\n  name              = &quot;/aws/kinesisfirehose/${var.resource_prefix}-${var.resource_domain}-sn-form-events&quot;\n  retention_in_days = 30\n}\n\nresource &quot;aws_cloudwatch_log_stream&quot; &quot;sn_form_events&quot; {\n  name           = &quot;DestinationDelivery&quot;\n  log_group_name = aws_cloudwatch_log_group.sn_form_events.name\n}\n\ndata &quot;template_file&quot; &quot;firehose_service_policy_json&quot; {\n  template = file(&quot;drip-role-firehose-service-policy.tpl&quot;)\n\n  vars = {\n    log_group_arn      = aws_cloudwatch_log_group.sn_form_events.arn\n    s3_bucket_arn      = data.aws_s3_bucket.sn_form_event_destination.arn\n    s3_prefix          = local.s3_prefix\n    glue_database_name = aws_glue_catalog_database.sn_form_events.name\n    glue_table_name    = aws_glue_catalog_table.sn_form_events.name\n  }\n}\n\nresource &quot;aws_iam_role&quot; &quot;firehose_role&quot; {\n  name = &quot;${var.resource_prefix}-${var.resource_domain}-sn-form-event-firehose-role&quot;\n\n  assume_role_policy = &lt;&lt;EOF\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n      &quot;Action&quot;: &quot;sts:AssumeRole&quot;,\n      &quot;Principal&quot;: {\n        &quot;Service&quot;: &quot;firehose.amazonaws.com&quot;\n      },\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Sid&quot;: &quot;&quot;\n    }\n  ]\n}\nEOF\n}\n\nresource &quot;aws_iam_policy&quot; &quot;firehose_service_policy&quot; {\n  name   = &quot;${local.pond_cc_name}SNFormEventFirehoseServicePolicy&quot;\n  policy = data.template_file.firehose_service_policy_json.rendered\n}\n\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;firehose-role-attach-service-policy&quot; {\n  role       = aws_iam_role.firehose_role.id\n  policy_arn = aws_iam_policy.firehose_service_policy.arn\n}\n\nresource &quot;aws_glue_catalog_database&quot; &quot;sn_form_events&quot; {\n  name = &quot;${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-db&quot;\n}\n\nresource &quot;aws_glue_catalog_table&quot; &quot;sn_form_events&quot; {\n  name          = &quot;${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-table&quot;\n  database_name = aws_glue_catalog_database.sn_form_events.name\n\n  table_type = &quot;EXTERNAL_TABLE&quot;\n\n  parameters = {\n    EXTERNAL              = &quot;TRUE&quot;\n    &quot;parquet.compression&quot; = &quot;SNAPPY&quot;\n  }\n\n  storage_descriptor {\n    location      = &quot;s3://${data.aws_s3_bucket.sn_form_event_destination.id}/${local.s3_prefix}sn-form-events&quot;\n    input_format  = &quot;org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat&quot;\n    output_format = &quot;org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat&quot;\n\n    ser_de_info {\n      name                  = &quot;${var.resource_prefix}-${var.resource_domain}-sn-form-events&quot;\n      serialization_library = &quot;org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe&quot;\n\n      parameters = {\n        &quot;serialization.format&quot; = 1\n      }\n    }\n\n    schema_reference {\n      schema_version_number = 1\n      schema_id {\n        schema_arn = &quot;arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn-form-events-glue-schema&quot;\n      }\n    }\n\n    # schema_reference {\n    #   schema_version_number = 1\n    #   schema_id {\n    #     schema_arn = &quot;arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn_form_events.proto&quot;\n    #   }\n    # }\n\n    # columns {\n    #   name = &quot;occurred_at&quot;\n    #   type = &quot;timestamp&quot;\n    # }\n\n    # columns {\n    #   name = &quot;account_id&quot;\n    #   type = &quot;bigint&quot;\n    # }\n\n    # columns {\n    #   name = &quot;form_id&quot;\n    #   type = &quot;string&quot;\n    # }\n\n    # columns {\n    #   name = &quot;action&quot;\n    #   type = &quot;string&quot;\n    # }\n\n    # columns {\n    #   name = &quot;url&quot;\n    #   type = &quot;string&quot;\n    # }\n\n    # columns {\n    #   name = &quot;visitor_uuid&quot;\n    #   type = &quot;string&quot;\n    # }\n\n    # columns {\n    #   name = &quot;properties&quot;\n    #   type = &quot;string&quot;\n    # }\n  }\n\n  depends_on = [\n    aws_glue_catalog_database.sn_form_events,\n    # aws_glue_schema.sn_form_events_glue_schema-protobuf\n    aws_glue_schema.sn_form_events_glue_schema\n  ]\n}\n\nresource &quot;aws_glue_registry&quot; &quot;sn_form_events_glue_schema_registry&quot; {\n  registry_name = &quot;sn-form-events-glue-schema-registry&quot;\n}\n\nresource &quot;aws_glue_schema&quot; &quot;sn_form_events_glue_schema&quot; {\n  schema_name       = &quot;sn-form-events-glue-schema&quot;\n  registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\n  data_format       = &quot;AVRO&quot;\n  compatibility     = &quot;NONE&quot;\n  schema_definition = &lt;&lt;EOF\n  {\n    &quot;type&quot;: &quot;record&quot;,\n    &quot;name&quot;: &quot;sn_form_events_glue_schema&quot;,\n    &quot;fields&quot;: [\n      {\n        &quot;name&quot;: &quot;occurred_at&quot;,\n        &quot;type&quot;: &quot;long&quot;,\n        &quot;logicalType&quot;: &quot;timestamp-millis&quot;\n      },\n      {\n        &quot;name&quot;: &quot;account_id&quot;,\n        &quot;type&quot;: &quot;long&quot;\n      },\n      {\n        &quot;name&quot;: &quot;form_id&quot;,\n        &quot;type&quot;: &quot;string&quot;\n      },\n      {\n        &quot;name&quot;: &quot;action&quot;,\n        &quot;type&quot;: &quot;string&quot;\n      },\n      {\n        &quot;name&quot;: &quot;url&quot;,\n        &quot;type&quot;: &quot;string&quot;\n      },\n      {\n        &quot;name&quot;: &quot;visitor_uuid&quot;,\n        &quot;type&quot;: &quot;string&quot;\n      },\n      {\n        &quot;name&quot;: &quot;properties&quot;,\n        &quot;type&quot;: &quot;string&quot;\n    }]\n  }\nEOF\n}\n\n# resource &quot;aws_glue_schema&quot; &quot;sn_form_events_glue_schema-protobuf&quot; {\n#   schema_name       = &quot;sn_form_events.proto&quot;\n#   registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\n#   data_format       = &quot;PROTOBUF&quot;\n#   compatibility     = &quot;NONE&quot;\n#   schema_definition = &lt;&lt;EOF\n#   syntax = &quot;proto3&quot;;\n#   package sn-form-events;\n\n#   import &quot;google/protobuf/timestamp.proto&quot;;\n\n#   message sn_form_events{\n#     google.protobuf.Timestamp occurred_at = 1;\n#     int64 account_id = 2;\n#     string form_id = 3;\n#     string action = 4;\n#     string url = 5;\n#     string visitor_uuid = 6;\n#     string properties = 7;\n#   }\n# EOF\n# }\n\nresource &quot;aws_kinesis_firehose_delivery_stream&quot; &quot;sn_form_events&quot; {\n  destination = &quot;extended_s3&quot;\n  name        = &quot;${var.resource_prefix}-${var.resource_domain}-sn-form-events&quot;\n\n  tags = {\n    Name = &quot;${var.resource_prefix}-${var.resource_domain}-sn-form-events&quot;\n  }\n\n  extended_s3_configuration {\n    bucket_arn          = data.aws_s3_bucket.sn_form_event_destination.arn\n    prefix              = &quot;${local.s3_prefix}year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/&quot;\n    buffer_interval     = var.resource_domain == &quot;production&quot; ? 300 : 60 # 5 minutes for production, 1 minute for staging\n    buffer_size         = 128                                            # 128 MB\n    compression_format  = &quot;UNCOMPRESSED&quot;\n    role_arn            = aws_iam_role.firehose_role.arn\n    error_output_prefix = &quot;${local.s3_prefix}failed_conversions/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/!{firehose:error-output-type}/&quot;\n\n    cloudwatch_logging_options {\n      enabled         = true\n      log_group_name  = aws_cloudwatch_log_group.sn_form_events.name\n      log_stream_name = aws_cloudwatch_log_stream.sn_form_events.name\n    }\n\n    data_format_conversion_configuration {\n      enabled = true\n\n      input_format_configuration {\n        deserializer {\n\n          open_x_json_ser_de {\n            case_insensitive                         = true\n            column_to_json_key_mappings              = {}\n            convert_dots_in_json_keys_to_underscores = false\n          }\n        }\n      }\n\n      output_format_configuration {\n        serializer {\n\n          parquet_ser_de {\n            block_size_bytes              = 268435456 # 256MiB - default at time of writing\n            compression                   = &quot;SNAPPY&quot;\n            enable_dictionary_compression = false\n            max_padding_bytes             = 0\n            page_size_bytes               = 1048576 # 1MiB - default at time of writing\n            writer_version                = &quot;V1&quot;\n          }\n        }\n      }\n\n      schema_configuration {\n        database_name = aws_glue_catalog_database.sn_form_events.name\n        region        = &quot;us-east-1&quot;\n        role_arn      = aws_iam_role.firehose_role.arn\n        table_name    = aws_glue_catalog_table.sn_form_events.name\n        version_id    = &quot;LATEST&quot;\n      }\n    }\n\n    processing_configuration {\n      enabled = false\n    }\n  }\n\n  server_side_encryption {\n    enabled  = false\n    key_type = &quot;AWS_OWNED_CMK&quot;\n  }\n\n  depends_on = [\n    aws_glue_catalog_table.sn_form_events,\n    aws_iam_role.firehose_role,\n    aws_glue_schema.sn_form_events_glue_schema\n  ]\n}\n</code></pre>\n<p>Here's my Terraform version and AWS provider version:</p>\n<pre><code>$ cat tf-state.tf\nterraform {\n  required_version = &quot;~&gt; 1.2.5&quot;\n\n  backend &quot;s3&quot; {}\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 4.23.0&quot;\n    }\n\n    template = {\n      source  = &quot;hashicorp/template&quot;\n      version = &quot;~&gt; 2.2.0&quot;\n    }\n  }\n}\n</code></pre>\n<p>Lastly, I've seen this specific answer to a different but similar question, and it did not resolve my issues: <a href=\"https://stackoverflow.com/a/69440421/3991562\">https://stackoverflow.com/a/69440421/3991562</a></p>\n<p>Thanks for any advice! :D</p>\n", "OwnerUserId": "3991562", "LastEditorUserId": "3991562", "LastEditDate": "2022-08-01T22:48:06.393", "LastActivityDate": "2022-08-01T22:48:06.393", "Title": "AWS Firehose Record Format Conversion With Schema", "Tags": "<amazon-web-services><terraform><terraform-provider-aws><amazon-kinesis-firehose>", "AnswerCount": "0", "CommentCount": "6", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129289713", "PostId": "73198845", "Score": "0", "Text": "And where have you defined the Glue schema resource?", "CreationDate": "2022-08-02T10:55:32.697", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129293962", "PostId": "73198845", "Score": "0", "Text": "Have you considered configuring Data Transformation (via Lambda) for the Firehose stream? You can implement custom validation logic and explicitly fail processing or drop the event whenever validation fails.", "CreationDate": "2022-08-02T13:58:59.997", "UserId": "1436031", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129295161", "PostId": "73198845", "Score": "0", "Text": "@MarkoE The Glue schema resource is defined in the Terraform file I've pasted (the fourth gray text box).  You should be able to find it if you CTRL+F (or Cmd+F) for `sn_form_events_glue_schema`.  Sorry, I know this is a wall of text, thanks for taking the time to look through it!\n\nAnd @AndrewNguonly I have considered that, but from what I understand, this should be possible to do without a Lambda, right?  Otherwise what's the point of a Glue schema?  And for that matter, it feels like this should be the default behavior of the Firehose itself.  I'll keep Lambdas in mind as a last resort", "CreationDate": "2022-08-02T14:45:31.103", "UserId": "3991562", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129295253", "PostId": "73198845", "Score": "1", "Text": "Not sure if this is related: https://github.com/awslabs/aws-glue-schema-registry/issues/201#issuecomment-1199804620. And yeah, I did miss the schema definition. :)", "CreationDate": "2022-08-02T14:49:19.433", "UserId": "8343484", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129298970", "PostId": "73198845", "Score": "0", "Text": "Interesting, thanks for the link!  That's at least confirmation that using protobufs is not going to work.  It's kind of annoying that AWS's own PR announcement seems to contradict this: https://aws.amazon.com/blogs/big-data/introducing-protocol-buffers-protobuf-schema-support-in-amazon-glue-schema-registry/\n\nMaybe I'm not reading it closely enough, though (which is definitely possible) :P", "CreationDate": "2022-08-02T17:37:11.487", "UserId": "3991562", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "129303775", "PostId": "73198845", "Score": "0", "Text": "Update: I noticed some text that indicates that firehose record conversion can only be done on JSON data.  I found this text when editing the \"Transform and convert records\" section, under the heading \"Convert record format\":\n```Data in Apache Parquet or Apache ORC format is typically more efficient to query than JSON. Kinesis Data Firehose can convert your JSON-formatted source records using a schema from a table defined in AWS Glue . For records that aren't in JSON format, create a Lambda function that converts them to JSON in the Transform source records with AWS Lambda section above.```", "CreationDate": "2022-08-02T22:23:11.657", "UserId": "3991562", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I found this text when editing the \"Transform and convert records\" section, under the heading \"Convert record format\": ```Data in Apache Parquet or Apache ORC format is typically more efficient to query than JSON. ", "keywords": ["efficient"]}]}], "links": [{"Id": "1996280583", "CreationDate": "2022-08-01T19:46:10.577", "PostId": "73198845", "RelatedPostId": "68125501", "LinkTypeId": "1"}], "history": [{"Id": "275393622", "PostHistoryTypeId": "2", "PostId": "73198845", "RevisionGUID": "29fee58c-7047-4bff-a1a9-2ceea54f87db", "CreationDate": "2022-08-01T19:46:10.577", "UserId": "3991562", "Text": "I'm fairly new to AWS Firehose and Glue and everything, and I'm flummoxed.  I'm trying to get the data that comes through the firehose to be converted properly to a Parquet file in S3.\r\n\r\nInitially, I had it set up with the column names defined directly in the `aws_glue_catalog_table` resource in my Terraform file, but that was allowing data that should not have been accepted to get converted and stored as a Parquet file.  It was correctly handling data the data that I want it to handle, but it was also allowing a variety of bad data through.\r\n\r\nMy desired column names (and their types) are:\r\n- occurred_at: timestamp\r\n- account_id: bigint\r\n- form_id: string\r\n- action: string\r\n- url: string\r\n- visitor_uuid: string\r\n- properties: string\r\n\r\nAn example object that it happily accepted is the following object; an excerpt from the database table is shown here:\r\n```\r\n                                                  Table \"public.accounts\"\r\n             Column             |            Type             | Collation | Nullable |               Default\r\n--------------------------------+-----------------------------+-----------+----------+--------------------------------------\r\n id                             | integer                     |           | not null | nextval('accounts_id_seq'::regclass)\r\n subscription_id                | integer                     |           |          |\r\n name                           | character varying(255)      |           |          |\r\n url                            | character varying(255)      |           |          |\r\n deleted_at                     | timestamp without time zone |           |          |\r\n created_at                     | timestamp without time zone |           | not null |\r\n updated_at                     | timestamp without time zone |           | not null |\r\n default_from_email             | character varying(255)      |           |          |\r\n default_postal_address         | text                        |           |          |\r\n default_from_name              | character varying(255)      |           |          |\r\n primary_email                  | character varying(255)      |           |          |\r\n disable_js                     | boolean                     |           |          | false\r\n status                         | character varying(255)      |           |          |\r\n is_onboarded                   | boolean                     |           |          |\r\n hide_guided_setup              | boolean                     |           |          |\r\n is_js_installed                | boolean                     |           |          |\r\n domain                         | character varying(255)      |           |          |\r\n enable_third_party_cookies     | boolean                     |           |          |\r\n phone_number                   | character varying(255)      |           |          |\r\n disable_analytics              | boolean                     |           |          | false\r\n has_activated_campaign         | boolean                     |           |          | false\r\n has_enabled_goal               | boolean                     |           |          | false\r\n current_setup_id               | integer                     |           |          |\r\n default_template_id            | integer                     |           |          |\r\n default_html_footer            | text                        |           |          |\r\n default_text_footer            | text                        |           |          |\r\n enable_lead_scoring            | boolean                     |           | not null | false\r\n raw_lead_settings              | text                        |           |          |\r\n regenerate_js                  | boolean                     |           |          | true\r\n sending_status                 | character varying(255)      |           |          |\r\n sending_status_reason          | character varying(255)      |           |          |\r\n track_replies                  | boolean                     |           |          |\r\n two_step_unsubscribe           | boolean                     |           |          |\r\n resend_confirmations           | boolean                     |           |          |\r\n post_unsubscribe_url           | character varying(255)      |           |          |\r\n incoming_list_size             | character varying(255)      |           |          |\r\n last_deliverability_violation  | timestamp without time zone |           |          |\r\n enable_facebook                | boolean                     |           |          |\r\n deliverability_violation_count | integer                     |           |          |\r\n show_drip_branding             | boolean                     |           |          |\r\n```\r\nIn an effort to reject bad data I attempted to use an AWS Glue Schema to handle the record format conversion.  I have tried both the Avro schema and protobuf, both of which fail in different ways.  I have not tried using JSON, because it doesn't seem to support timestamps, which I need.\r\n\r\nThe Avro implementation yields failed conversion files in S3 which look like this:\r\n```\r\n{\r\n  \"attemptsMade\":1,\r\n  \"arrivalTimestamp\":1659372890895,\r\n  \"lastErrorCode\":\"DataFormatConversion.InvalidSchema\",\r\n  \"lastErrorMessage\":\"The schema is invalid. The specified table has no columns.\",\r\n  \"attemptEndingTimestamp\":1659372956967,\r\n  \"rawData\":\"eyJpZCI6MSwiYWNjb3VudF9pZCI6MSwiZm9ybV9pZCI6MSwidmlzaXRvcl91dWlkIjoiIiwiYWN0aW9uIjoic3VibWl0IiwiY3JlYXRlZF9hdCI6IjIwMTYtMDUtMThUMjI6MTU6MjkuNDIwWiIsInVwZGF0ZWRfYXQiOiIyMDE2LTA1LTE4VDIyOjE1OjI5LjQyMFoiLCJ1cmwiOiIiLCJtYW51YWxseV9vcGVuZWQiOm51bGwsIm9jY3VycmVkX2F0IjoiMjAxNi0wNS0xOFQyMjoxNToyOS40MTlaIn0=\",\r\n  \"sequenceNumber\":\"49631940267636444464128680289902809552022038273287258114\",\r\n  \"subSequenceNumber\":null,\r\n  \"dataCatalogTable\": {\r\n    \"catalogId\":null,\r\n    \"databaseName\":\"drip-staging-sn-form-events-glue-db\",\r\n    \"tableName\":\"drip-staging-sn-form-events-glue-table\",\r\n    \"region\":\"us-east-1\",\r\n    \"versionId\":\"LATEST\",\r\n    \"roleArn\":\"arn:aws:iam::[[my AWS account number]]:role/drip-staging-sn-form-event-firehose-role\"\r\n  }\r\n}\r\n```\r\nNext, I tried protobufs, which failed when I tried to apply the Terraform plan, with the following error message:\r\n```\r\naws_glue_catalog_table.sn_form_events: Modifying... [id=[[my AWS account number]]:drip-staging-sn-form-events-glue-db:drip-staging-sn-form-events-glue-table]\r\n\u2577\r\n\u2502 Error: Error updating Glue Catalog Table: InvalidInputException: No SchemaDereferencingStrategy found for schema type: PROTOBUF\r\n\u2502\r\n\u2502   with aws_glue_catalog_table.sn_form_events,\r\n\u2502   on drip-firehose-streams.tf line 61, in resource \"aws_glue_catalog_table\" \"sn_form_events\":\r\n\u2502   61: resource \"aws_glue_catalog_table\" \"sn_form_events\" {\r\n```\r\nHere's the Terraform file that I'm using to set things up.  I've commented out the protobufs code and the `columns` within the Glue table, but the commented out versions are what I use when trying to use each of those alternatives.  Note that `var.resource_prefix` evaluates to `drip` and `var.resource_domain` evaluates to `staging`\r\n```\r\ndata \"aws_s3_bucket\" \"sn_form_event_destination\" {\r\n  bucket = \"drip-data-mart\"\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"sn_form_events\" {\r\n  name              = \"/aws/kinesisfirehose/${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n  retention_in_days = 30\r\n}\r\n\r\nresource \"aws_cloudwatch_log_stream\" \"sn_form_events\" {\r\n  name           = \"DestinationDelivery\"\r\n  log_group_name = aws_cloudwatch_log_group.sn_form_events.name\r\n}\r\n\r\ndata \"template_file\" \"firehose_service_policy_json\" {\r\n  template = file(\"drip-role-firehose-service-policy.tpl\")\r\n\r\n  vars = {\r\n    log_group_arn      = aws_cloudwatch_log_group.sn_form_events.arn\r\n    s3_bucket_arn      = data.aws_s3_bucket.sn_form_event_destination.arn\r\n    s3_prefix          = local.s3_prefix\r\n    glue_database_name = aws_glue_catalog_database.sn_form_events.name\r\n    glue_table_name    = aws_glue_catalog_table.sn_form_events.name\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"firehose_role\" {\r\n  name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-event-firehose-role\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": \"sts:AssumeRole\",\r\n      \"Principal\": {\r\n        \"Service\": \"firehose.amazonaws.com\"\r\n      },\r\n      \"Effect\": \"Allow\",\r\n      \"Sid\": \"\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_policy\" \"firehose_service_policy\" {\r\n  name   = \"${local.pond_cc_name}SNFormEventFirehoseServicePolicy\"\r\n  policy = data.template_file.firehose_service_policy_json.rendered\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"firehose-role-attach-service-policy\" {\r\n  role       = aws_iam_role.firehose_role.id\r\n  policy_arn = aws_iam_policy.firehose_service_policy.arn\r\n}\r\n\r\nresource \"aws_glue_catalog_database\" \"sn_form_events\" {\r\n  name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-db\"\r\n}\r\n\r\nresource \"aws_glue_catalog_table\" \"sn_form_events\" {\r\n  name          = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-table\"\r\n  database_name = aws_glue_catalog_database.sn_form_events.name\r\n\r\n  table_type = \"EXTERNAL_TABLE\"\r\n\r\n  parameters = {\r\n    EXTERNAL              = \"TRUE\"\r\n    \"parquet.compression\" = \"SNAPPY\"\r\n  }\r\n\r\n  storage_descriptor {\r\n    location      = \"s3://${data.aws_s3_bucket.sn_form_event_destination.id}/${local.s3_prefix}sn-form-events\"\r\n    input_format  = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\"\r\n    output_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\"\r\n\r\n    ser_de_info {\r\n      name                  = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n      serialization_library = \"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\"\r\n\r\n      parameters = {\r\n        \"serialization.format\" = 1\r\n      }\r\n    }\r\n\r\n    schema_reference {\r\n      schema_version_number = 1\r\n      schema_id {\r\n        schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn-form-events-glue-schema\"\r\n      }\r\n    }\r\n\r\n    # schema_reference {\r\n    #   schema_version_number = 1\r\n    #   schema_id {\r\n    #     schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn_form_events.proto\"\r\n    #   }\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"occurred_at\"\r\n    #   type = \"timestamp\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"account_id\"\r\n    #   type = \"bigint\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"form_id\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"action\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"url\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"visitor_uuid\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"properties\"\r\n    #   type = \"string\"\r\n    # }\r\n  }\r\n\r\n  depends_on = [\r\n    aws_glue_catalog_database.sn_form_events,\r\n    # aws_glue_schema.sn_form_events_glue_schema-protobuf\r\n    aws_glue_schema.sn_form_events_glue_schema\r\n  ]\r\n}\r\n\r\nresource \"aws_glue_registry\" \"sn_form_events_glue_schema_registry\" {\r\n  registry_name = \"sn-form-events-glue-schema-registry\"\r\n}\r\n\r\nresource \"aws_glue_schema\" \"sn_form_events_glue_schema\" {\r\n  schema_name       = \"sn-form-events-glue-schema\"\r\n  registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\r\n  data_format       = \"AVRO\"\r\n  compatibility     = \"NONE\"\r\n  schema_definition = <<EOF\r\n  {\r\n    \"type\": \"record\",\r\n    \"name\": \"sn_form_events_glue_schema\",\r\n    \"fields\": [\r\n      {\r\n        \"name\": \"occurred_at\",\r\n        \"type\": \"long\",\r\n        \"logicalType\": \"timestamp-millis\"\r\n      },\r\n      {\r\n        \"name\": \"account_id\",\r\n        \"type\": \"long\"\r\n      },\r\n      {\r\n        \"name\": \"form_id\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"action\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"url\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"visitor_uuid\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"properties\",\r\n        \"type\": \"string\"\r\n    }]\r\n  }\r\nEOF\r\n}\r\n\r\n# resource \"aws_glue_schema\" \"sn_form_events_glue_schema-protobuf\" {\r\n#   schema_name       = \"sn_form_events.proto\"\r\n#   registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\r\n#   data_format       = \"PROTOBUF\"\r\n#   compatibility     = \"NONE\"\r\n#   schema_definition = <<EOF\r\n#   syntax = \"proto3\";\r\n#   package sn-form-events;\r\n\r\n#   import \"google/protobuf/timestamp.proto\";\r\n\r\n#   message sn_form_events{\r\n#     google.protobuf.Timestamp occurred_at = 1;\r\n#     int64 account_id = 2;\r\n#     string form_id = 3;\r\n#     string action = 4;\r\n#     string url = 5;\r\n#     string visitor_uuid = 6;\r\n#     string properties = 7;\r\n#   }\r\n# EOF\r\n# }\r\n\r\nresource \"aws_kinesis_firehose_delivery_stream\" \"sn_form_events\" {\r\n  destination = \"extended_s3\"\r\n  name        = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n\r\n  tags = {\r\n    Name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n  }\r\n\r\n  extended_s3_configuration {\r\n    bucket_arn          = data.aws_s3_bucket.sn_form_event_destination.arn\r\n    prefix              = \"${local.s3_prefix}year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/\"\r\n    buffer_interval     = var.resource_domain == \"production\" ? 300 : 60 # 5 minutes for production, 1 minute for staging\r\n    buffer_size         = 128                                            # 128 MB\r\n    compression_format  = \"UNCOMPRESSED\"\r\n    role_arn            = aws_iam_role.firehose_role.arn\r\n    error_output_prefix = \"${local.s3_prefix}failed_conversions/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/!{firehose:error-output-type}/\"\r\n\r\n    cloudwatch_logging_options {\r\n      enabled         = true\r\n      log_group_name  = aws_cloudwatch_log_group.sn_form_events.name\r\n      log_stream_name = aws_cloudwatch_log_stream.sn_form_events.name\r\n    }\r\n\r\n    data_format_conversion_configuration {\r\n      enabled = true\r\n\r\n      input_format_configuration {\r\n        deserializer {\r\n\r\n          open_x_json_ser_de {\r\n            case_insensitive                         = true\r\n            column_to_json_key_mappings              = {}\r\n            convert_dots_in_json_keys_to_underscores = false\r\n          }\r\n        }\r\n      }\r\n\r\n      output_format_configuration {\r\n        serializer {\r\n\r\n          parquet_ser_de {\r\n            block_size_bytes              = 268435456 # 256MiB - default at time of writing\r\n            compression                   = \"SNAPPY\"\r\n            enable_dictionary_compression = false\r\n            max_padding_bytes             = 0\r\n            page_size_bytes               = 1048576 # 1MiB - default at time of writing\r\n            writer_version                = \"V1\"\r\n          }\r\n        }\r\n      }\r\n\r\n      schema_configuration {\r\n        database_name = aws_glue_catalog_database.sn_form_events.name\r\n        region        = \"us-east-1\"\r\n        role_arn      = aws_iam_role.firehose_role.arn\r\n        table_name    = aws_glue_catalog_table.sn_form_events.name\r\n        version_id    = \"LATEST\"\r\n      }\r\n    }\r\n\r\n    processing_configuration {\r\n      enabled = false\r\n    }\r\n  }\r\n\r\n  server_side_encryption {\r\n    enabled  = false\r\n    key_type = \"AWS_OWNED_CMK\"\r\n  }\r\n\r\n  depends_on = [\r\n    aws_glue_catalog_table.sn_form_events,\r\n    aws_iam_role.firehose_role,\r\n    aws_glue_schema.sn_form_events_glue_schema\r\n  ]\r\n}\r\n```\r\nLastly, I've seen this specific answer to a different but similar question, and it did not resolve my issues: https://stackoverflow.com/a/69440421/3991562\r\n\r\nThanks for any advice! :D", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "| deleted_at | timestamp without time zone | | | created_at | timestamp without time zone | | not null | updated_at | timestamp without time zone | | not null | default_from_email | character varying(255) | | | default_postal_address | text | | | default_from_name | character varying(255) | | | primary_email | character varying(255) | | | disable_js | boolean | | | false status | character varying(255) | | | is_onboarded | boolean | | | hide_guided_setup | boolean | | | is_js_installed | boolean | | | domain | character varying(255) | | | enable_third_party_cookies | boolean | | | phone_number | character varying(255) | | | disable_analytics | boolean | | | false has_activated_campaign | boolean | | | false has_enabled_goal | boolean | | | false current_setup_id | integer | | | default_template_id | integer | | | default_html_footer | text | | | default_text_footer | text | | | enable_lead_scoring | boolean | | not null | false raw_lead_settings | text | | | regenerate_js | boolean | | | true sending_status | character varying(255) | | | sending_status_reason | character varying(255) | | | track_replies | boolean | | | two_step_unsubscribe | boolean | | | resend_confirmations | boolean | | | post_unsubscribe_url | character varying(255) | ", "keywords": ["domain"]}, {"source": "Text", "text": "Note that `var.resource_prefix` evaluates to `drip` and `var.resource_domain` evaluates to `staging` ``` data \"aws_s3_bucket\" \"sn_form_event_destination\" { bucket = \"drip-data-mart\" } resource \"aws_cloudwatch_log_group\" \"sn_form_events\" { name = \"/aws/kinesisfirehose/${var.resource_prefix}-${var.resource_domain}-sn-form-events\" retention_in_days = 30 } resource \"aws_cloudwatch_log_stream\" \"sn_form_events\" { name = \"DestinationDelivery\" log_group_name = aws_cloudwatch_log_group.sn_form_events.name } data \"template_file\" \"firehose_service_policy_json\" { template = file(\"drip-role-firehose-service-policy.tpl\") vars = { log_group_arn = aws_cloudwatch_log_group.sn_form_events.arn s3_bucket_arn = data.aws_s3_bucket.sn_form_event_destination.arn s3_prefix = local.s3_prefix glue_database_name = aws_glue_catalog_database.sn_form_events.name glue_table_name = aws_glue_catalog_table.sn_form_events.name } } resource \"aws_iam_role\" \"firehose_role\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-event-firehose-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"firehose.amazonaws.com\" }, \"Effect\": \"Allow\", \"Sid\": \"\" } ] } EOF } resource \"aws_iam_policy\" \"firehose_service_policy\" { name = \"${local.pond_cc_name}SNFormEventFirehoseServicePolicy\" policy = data.template_file.firehose_service_policy_json.rendered } resource \"aws_iam_role_policy_attachment\" \"firehose-role-attach-service-policy\" { role = aws_iam_role.firehose_role.id policy_arn = aws_iam_policy.firehose_service_policy.arn } resource \"aws_glue_catalog_database\" \"sn_form_events\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-db\" } resource \"aws_glue_catalog_table\" \"sn_form_events\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-table\" database_name = aws_glue_catalog_database.sn_form_events.name table_type = \"EXTERNAL_TABLE\" parameters = { EXTERNAL = \"TRUE\" \"parquet.compression\" = \"SNAPPY\" } storage_descriptor { location = \"s3://${data.aws_s3_bucket.sn_form_event_destination.id}/${local.s3_prefix}sn-form-events\" input_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\" output_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\" ser_de_info { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\" serialization_library = \"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\" parameters = { \"serialization.format\" = 1 } } schema_reference { schema_version_number = 1 schema_id { schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn-form-events-glue-schema\" } } # schema_reference { # schema_version_number = 1 # schema_id { # schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn_form_events.proto\" # } # } # columns { # name = \"occurred_at\" # type = \"timestamp\" # } # columns { # name = \"account_id\" # type = \"bigint\" # } # columns { # name = \"form_id\" # type = \"string\" # } # columns { # name = \"action\" # type = \"string\" # } # columns { # name = \"url\" # type = \"string\" # } # columns { # name = \"visitor_uuid\" # type = \"string\" # } # columns { # name = \"properties\" # type = \"string\" # } } depends_on = [ aws_glue_catalog_database.sn_form_events, # aws_glue_schema.sn_form_events_glue_schema-protobuf aws_glue_schema.sn_form_events_glue_schema ] } resource \"aws_glue_registry\" \"sn_form_events_glue_schema_registry\" { registry_name = \"sn-form-events-glue-schema-registry\" } resource \"aws_glue_schema\" \"sn_form_events_glue_schema\" { schema_name = \"sn-form-events-glue-schema\" registry_arn = aws_glue_registry.sn_form_events_glue_schema_registry.arn data_format = \"AVRO\" compatibility = \"NONE\" schema_definition = <<EOF { \"type\": \"record\", \"name\": \"sn_form_events_glue_schema\", \"fields\": [ { \"name\": \"occurred_at\", \"type\": \"long\", \"logicalType\": \"timestamp-millis\" }, { \"name\": \"account_id\", \"type\": \"long\" ", "keywords": ["policy"]}]}, {"Id": "275393624", "PostHistoryTypeId": "1", "PostId": "73198845", "RevisionGUID": "29fee58c-7047-4bff-a1a9-2ceea54f87db", "CreationDate": "2022-08-01T19:46:10.577", "UserId": "3991562", "Text": "AWS Firehose Record Format Conversion With Schema", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "275393625", "PostHistoryTypeId": "3", "PostId": "73198845", "RevisionGUID": "29fee58c-7047-4bff-a1a9-2ceea54f87db", "CreationDate": "2022-08-01T19:46:10.577", "UserId": "3991562", "Text": "<amazon-web-services><terraform><terraform-provider-aws><amazon-kinesis-firehose>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "275397520", "PostHistoryTypeId": "5", "PostId": "73198845", "RevisionGUID": "ad0e2e68-500c-4d1c-9701-1f0a7b9c3e69", "CreationDate": "2022-08-01T21:01:00.403", "UserId": "3991562", "Comment": "Reduce clutter slightly and add more info", "Text": "I'm fairly new to AWS Firehose and Glue and everything, and I'm flummoxed.  I'm trying to get the data that comes through the firehose to be converted properly to a Parquet file in S3.\r\n\r\nInitially, I had it set up with the column names defined directly in the `aws_glue_catalog_table` resource in my Terraform file, but that was allowing data that should not have been accepted to get converted and stored as a Parquet file.  It was correctly handling data the data that I want it to handle, but it was also allowing a variety of bad data through.\r\n\r\nMy desired column names (and their types) are:\r\n- occurred_at: timestamp\r\n- account_id: bigint\r\n- form_id: string\r\n- action: string\r\n- url: string\r\n- visitor_uuid: string\r\n- properties: string\r\n\r\nAn example object that it happily accepted is the following object; an excerpt from the database table is shown here:\r\n```\r\n                                                  Table \"public.accounts\"\r\n             Column             |            Type             | Collation | Nullable |               Default\r\n--------------------------------+-----------------------------+-----------+----------+--------------------------------------\r\n id                             | integer                     |           | not null | nextval('accounts_id_seq'::regclass)\r\n subscription_id                | integer                     |           |          |\r\n name                           | character varying(255)      |           |          |\r\n url                            | character varying(255)      |           |          |\r\n deleted_at                     | timestamp without time zone |           |          |\r\n created_at                     | timestamp without time zone |           | not null |\r\n updated_at                     | timestamp without time zone |           | not null |\r\n default_from_email             | character varying(255)      |           |          |\r\n default_postal_address         | text                        |           |          |\r\n default_from_name              | character varying(255)      |           |          |\r\n primary_email                  | character varying(255)      |           |          |\r\n disable_js                     | boolean                     |           |          | false\r\n status                         | character varying(255)      |           |          |\r\n is_onboarded                   | boolean                     |           |          |\r\n hide_guided_setup              | boolean                     |           |          |\r\n is_js_installed                | boolean                     |           |          |\r\n domain                         | character varying(255)      |           |          |\r\n enable_third_party_cookies     | boolean                     |           |          |\r\n phone_number                   | character varying(255)      |           |          |\r\n disable_analytics              | boolean                     |           |          | false\r\n has_activated_campaign         | boolean                     |           |          | false\r\n has_enabled_goal               | boolean                     |           |          | false\r\n current_setup_id               | integer                     |           |          |\r\n default_template_id            | integer                     |           |          |\r\n default_html_footer            | text                        |           |          |\r\n default_text_footer            | text                        |           |          |\r\n enable_lead_scoring            | boolean                     |           | not null | false\r\n raw_lead_settings              | text                        |           |          |\r\n regenerate_js                  | boolean                     |           |          | true\r\n sending_status                 | character varying(255)      |           |          |\r\n```\r\nThe resulting parquet files have the `url` field populated, but the remaining 6 values, which don't have matching column names in the database table, are `None` (or `NaT` or `NaN`, depending on the column's data type).\r\n\r\nIn an effort to reject bad data I attempted to use an AWS Glue Schema to handle the record format conversion.  I have tried both the Avro schema and protobuf, both of which fail in different ways.  I have not tried using JSON, because it doesn't seem to support timestamps, which I need.\r\n\r\nThe Avro implementation yields failed conversion files uploaded to S3 which look like this:\r\n```\r\n{\r\n  \"attemptsMade\":1,\r\n  \"arrivalTimestamp\":1659372890895,\r\n  \"lastErrorCode\":\"DataFormatConversion.InvalidSchema\",\r\n  \"lastErrorMessage\":\"The schema is invalid. The specified table has no columns.\",\r\n  \"attemptEndingTimestamp\":1659372956967,\r\n  \"rawData\":\"eyJpZCI6MSwiYWNjb3VudF9pZCI6MSwiZm9ybV9pZCI6MSwidmlzaXRvcl91dWlkIjoiIiwiYWN0aW9uIjoic3VibWl0IiwiY3JlYXRlZF9hdCI6IjIwMTYtMDUtMThUMjI6MTU6MjkuNDIwWiIsInVwZGF0ZWRfYXQiOiIyMDE2LTA1LTE4VDIyOjE1OjI5LjQyMFoiLCJ1cmwiOiIiLCJtYW51YWxseV9vcGVuZWQiOm51bGwsIm9jY3VycmVkX2F0IjoiMjAxNi0wNS0xOFQyMjoxNToyOS40MTlaIn0=\",\r\n  \"sequenceNumber\":\"49631940267636444464128680289902809552022038273287258114\",\r\n  \"subSequenceNumber\":null,\r\n  \"dataCatalogTable\": {\r\n    \"catalogId\":null,\r\n    \"databaseName\":\"drip-staging-sn-form-events-glue-db\",\r\n    \"tableName\":\"drip-staging-sn-form-events-glue-table\",\r\n    \"region\":\"us-east-1\",\r\n    \"versionId\":\"LATEST\",\r\n    \"roleArn\":\"arn:aws:iam::[[my AWS account number]]:role/drip-staging-sn-form-event-firehose-role\"\r\n  }\r\n}\r\n```\r\nI have no idea why it says it can't find the columns, because when I open up the Glue table in the AWS console, it shows the columns I expect to see, and it says that it pulled the columns from a Glue schema.\r\n\r\nNext, I tried protobufs, which failed when I tried to apply the Terraform plan, with the following error message:\r\n```\r\naws_glue_catalog_table.sn_form_events: Modifying... [id=[[my AWS account number]]:drip-staging-sn-form-events-glue-db:drip-staging-sn-form-events-glue-table]\r\n\u2577\r\n\u2502 Error: Error updating Glue Catalog Table: InvalidInputException: No SchemaDereferencingStrategy found for schema type: PROTOBUF\r\n\u2502\r\n\u2502   with aws_glue_catalog_table.sn_form_events,\r\n\u2502   on drip-firehose-streams.tf line 61, in resource \"aws_glue_catalog_table\" \"sn_form_events\":\r\n\u2502   61: resource \"aws_glue_catalog_table\" \"sn_form_events\" {\r\n```\r\nHere's the Terraform file that I'm using to set things up.  I've commented out the protobufs code and the `columns` within the Glue table, but the commented out versions are what I use when trying to use each of those alternatives.  Note that `var.resource_prefix` evaluates to `drip` and `var.resource_domain` evaluates to `staging`\r\n```\r\ndata \"aws_s3_bucket\" \"sn_form_event_destination\" {\r\n  bucket = \"drip-data-mart\"\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"sn_form_events\" {\r\n  name              = \"/aws/kinesisfirehose/${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n  retention_in_days = 30\r\n}\r\n\r\nresource \"aws_cloudwatch_log_stream\" \"sn_form_events\" {\r\n  name           = \"DestinationDelivery\"\r\n  log_group_name = aws_cloudwatch_log_group.sn_form_events.name\r\n}\r\n\r\ndata \"template_file\" \"firehose_service_policy_json\" {\r\n  template = file(\"drip-role-firehose-service-policy.tpl\")\r\n\r\n  vars = {\r\n    log_group_arn      = aws_cloudwatch_log_group.sn_form_events.arn\r\n    s3_bucket_arn      = data.aws_s3_bucket.sn_form_event_destination.arn\r\n    s3_prefix          = local.s3_prefix\r\n    glue_database_name = aws_glue_catalog_database.sn_form_events.name\r\n    glue_table_name    = aws_glue_catalog_table.sn_form_events.name\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"firehose_role\" {\r\n  name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-event-firehose-role\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": \"sts:AssumeRole\",\r\n      \"Principal\": {\r\n        \"Service\": \"firehose.amazonaws.com\"\r\n      },\r\n      \"Effect\": \"Allow\",\r\n      \"Sid\": \"\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_policy\" \"firehose_service_policy\" {\r\n  name   = \"${local.pond_cc_name}SNFormEventFirehoseServicePolicy\"\r\n  policy = data.template_file.firehose_service_policy_json.rendered\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"firehose-role-attach-service-policy\" {\r\n  role       = aws_iam_role.firehose_role.id\r\n  policy_arn = aws_iam_policy.firehose_service_policy.arn\r\n}\r\n\r\nresource \"aws_glue_catalog_database\" \"sn_form_events\" {\r\n  name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-db\"\r\n}\r\n\r\nresource \"aws_glue_catalog_table\" \"sn_form_events\" {\r\n  name          = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-table\"\r\n  database_name = aws_glue_catalog_database.sn_form_events.name\r\n\r\n  table_type = \"EXTERNAL_TABLE\"\r\n\r\n  parameters = {\r\n    EXTERNAL              = \"TRUE\"\r\n    \"parquet.compression\" = \"SNAPPY\"\r\n  }\r\n\r\n  storage_descriptor {\r\n    location      = \"s3://${data.aws_s3_bucket.sn_form_event_destination.id}/${local.s3_prefix}sn-form-events\"\r\n    input_format  = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\"\r\n    output_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\"\r\n\r\n    ser_de_info {\r\n      name                  = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n      serialization_library = \"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\"\r\n\r\n      parameters = {\r\n        \"serialization.format\" = 1\r\n      }\r\n    }\r\n\r\n    schema_reference {\r\n      schema_version_number = 1\r\n      schema_id {\r\n        schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn-form-events-glue-schema\"\r\n      }\r\n    }\r\n\r\n    # schema_reference {\r\n    #   schema_version_number = 1\r\n    #   schema_id {\r\n    #     schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn_form_events.proto\"\r\n    #   }\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"occurred_at\"\r\n    #   type = \"timestamp\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"account_id\"\r\n    #   type = \"bigint\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"form_id\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"action\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"url\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"visitor_uuid\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"properties\"\r\n    #   type = \"string\"\r\n    # }\r\n  }\r\n\r\n  depends_on = [\r\n    aws_glue_catalog_database.sn_form_events,\r\n    # aws_glue_schema.sn_form_events_glue_schema-protobuf\r\n    aws_glue_schema.sn_form_events_glue_schema\r\n  ]\r\n}\r\n\r\nresource \"aws_glue_registry\" \"sn_form_events_glue_schema_registry\" {\r\n  registry_name = \"sn-form-events-glue-schema-registry\"\r\n}\r\n\r\nresource \"aws_glue_schema\" \"sn_form_events_glue_schema\" {\r\n  schema_name       = \"sn-form-events-glue-schema\"\r\n  registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\r\n  data_format       = \"AVRO\"\r\n  compatibility     = \"NONE\"\r\n  schema_definition = <<EOF\r\n  {\r\n    \"type\": \"record\",\r\n    \"name\": \"sn_form_events_glue_schema\",\r\n    \"fields\": [\r\n      {\r\n        \"name\": \"occurred_at\",\r\n        \"type\": \"long\",\r\n        \"logicalType\": \"timestamp-millis\"\r\n      },\r\n      {\r\n        \"name\": \"account_id\",\r\n        \"type\": \"long\"\r\n      },\r\n      {\r\n        \"name\": \"form_id\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"action\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"url\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"visitor_uuid\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"properties\",\r\n        \"type\": \"string\"\r\n    }]\r\n  }\r\nEOF\r\n}\r\n\r\n# resource \"aws_glue_schema\" \"sn_form_events_glue_schema-protobuf\" {\r\n#   schema_name       = \"sn_form_events.proto\"\r\n#   registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\r\n#   data_format       = \"PROTOBUF\"\r\n#   compatibility     = \"NONE\"\r\n#   schema_definition = <<EOF\r\n#   syntax = \"proto3\";\r\n#   package sn-form-events;\r\n\r\n#   import \"google/protobuf/timestamp.proto\";\r\n\r\n#   message sn_form_events{\r\n#     google.protobuf.Timestamp occurred_at = 1;\r\n#     int64 account_id = 2;\r\n#     string form_id = 3;\r\n#     string action = 4;\r\n#     string url = 5;\r\n#     string visitor_uuid = 6;\r\n#     string properties = 7;\r\n#   }\r\n# EOF\r\n# }\r\n\r\nresource \"aws_kinesis_firehose_delivery_stream\" \"sn_form_events\" {\r\n  destination = \"extended_s3\"\r\n  name        = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n\r\n  tags = {\r\n    Name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n  }\r\n\r\n  extended_s3_configuration {\r\n    bucket_arn          = data.aws_s3_bucket.sn_form_event_destination.arn\r\n    prefix              = \"${local.s3_prefix}year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/\"\r\n    buffer_interval     = var.resource_domain == \"production\" ? 300 : 60 # 5 minutes for production, 1 minute for staging\r\n    buffer_size         = 128                                            # 128 MB\r\n    compression_format  = \"UNCOMPRESSED\"\r\n    role_arn            = aws_iam_role.firehose_role.arn\r\n    error_output_prefix = \"${local.s3_prefix}failed_conversions/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/!{firehose:error-output-type}/\"\r\n\r\n    cloudwatch_logging_options {\r\n      enabled         = true\r\n      log_group_name  = aws_cloudwatch_log_group.sn_form_events.name\r\n      log_stream_name = aws_cloudwatch_log_stream.sn_form_events.name\r\n    }\r\n\r\n    data_format_conversion_configuration {\r\n      enabled = true\r\n\r\n      input_format_configuration {\r\n        deserializer {\r\n\r\n          open_x_json_ser_de {\r\n            case_insensitive                         = true\r\n            column_to_json_key_mappings              = {}\r\n            convert_dots_in_json_keys_to_underscores = false\r\n          }\r\n        }\r\n      }\r\n\r\n      output_format_configuration {\r\n        serializer {\r\n\r\n          parquet_ser_de {\r\n            block_size_bytes              = 268435456 # 256MiB - default at time of writing\r\n            compression                   = \"SNAPPY\"\r\n            enable_dictionary_compression = false\r\n            max_padding_bytes             = 0\r\n            page_size_bytes               = 1048576 # 1MiB - default at time of writing\r\n            writer_version                = \"V1\"\r\n          }\r\n        }\r\n      }\r\n\r\n      schema_configuration {\r\n        database_name = aws_glue_catalog_database.sn_form_events.name\r\n        region        = \"us-east-1\"\r\n        role_arn      = aws_iam_role.firehose_role.arn\r\n        table_name    = aws_glue_catalog_table.sn_form_events.name\r\n        version_id    = \"LATEST\"\r\n      }\r\n    }\r\n\r\n    processing_configuration {\r\n      enabled = false\r\n    }\r\n  }\r\n\r\n  server_side_encryption {\r\n    enabled  = false\r\n    key_type = \"AWS_OWNED_CMK\"\r\n  }\r\n\r\n  depends_on = [\r\n    aws_glue_catalog_table.sn_form_events,\r\n    aws_iam_role.firehose_role,\r\n    aws_glue_schema.sn_form_events_glue_schema\r\n  ]\r\n}\r\n```\r\nLastly, I've seen this specific answer to a different but similar question, and it did not resolve my issues: https://stackoverflow.com/a/69440421/3991562\r\n\r\nThanks for any advice! :D", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "| deleted_at | timestamp without time zone | | | created_at | timestamp without time zone | | not null | updated_at | timestamp without time zone | | not null | default_from_email | character varying(255) | | | default_postal_address | text | | | default_from_name | character varying(255) | | | primary_email | character varying(255) | | | disable_js | boolean | | | false status | character varying(255) | | | is_onboarded | boolean | | | hide_guided_setup | boolean | | | is_js_installed | boolean | | | domain | character varying(255) | | | enable_third_party_cookies | boolean | | | phone_number | character varying(255) | | | disable_analytics | boolean | | | false has_activated_campaign | boolean | | | false has_enabled_goal | boolean | | | false current_setup_id | integer | | | default_template_id | integer | | | default_html_footer | text | | | default_text_footer | text | | | enable_lead_scoring | boolean | | not null | false raw_lead_settings | text | | | regenerate_js | boolean | | | true sending_status | character varying(255) | ", "keywords": ["domain"]}, {"source": "Text", "text": "The resulting parquet files have the `url` field populated, but the remaining 6 values, which don't have matching column names in the database table, are `None` (or `NaT` or `NaN`, depending on the column's data type). ", "keywords": ["nat"]}, {"source": "Text", "text": "Note that `var.resource_prefix` evaluates to `drip` and `var.resource_domain` evaluates to `staging` ``` data \"aws_s3_bucket\" \"sn_form_event_destination\" { bucket = \"drip-data-mart\" } resource \"aws_cloudwatch_log_group\" \"sn_form_events\" { name = \"/aws/kinesisfirehose/${var.resource_prefix}-${var.resource_domain}-sn-form-events\" retention_in_days = 30 } resource \"aws_cloudwatch_log_stream\" \"sn_form_events\" { name = \"DestinationDelivery\" log_group_name = aws_cloudwatch_log_group.sn_form_events.name } data \"template_file\" \"firehose_service_policy_json\" { template = file(\"drip-role-firehose-service-policy.tpl\") vars = { log_group_arn = aws_cloudwatch_log_group.sn_form_events.arn s3_bucket_arn = data.aws_s3_bucket.sn_form_event_destination.arn s3_prefix = local.s3_prefix glue_database_name = aws_glue_catalog_database.sn_form_events.name glue_table_name = aws_glue_catalog_table.sn_form_events.name } } resource \"aws_iam_role\" \"firehose_role\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-event-firehose-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"firehose.amazonaws.com\" }, \"Effect\": \"Allow\", \"Sid\": \"\" } ] } EOF } resource \"aws_iam_policy\" \"firehose_service_policy\" { name = \"${local.pond_cc_name}SNFormEventFirehoseServicePolicy\" policy = data.template_file.firehose_service_policy_json.rendered } resource \"aws_iam_role_policy_attachment\" \"firehose-role-attach-service-policy\" { role = aws_iam_role.firehose_role.id policy_arn = aws_iam_policy.firehose_service_policy.arn } resource \"aws_glue_catalog_database\" \"sn_form_events\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-db\" } resource \"aws_glue_catalog_table\" \"sn_form_events\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-table\" database_name = aws_glue_catalog_database.sn_form_events.name table_type = \"EXTERNAL_TABLE\" parameters = { EXTERNAL = \"TRUE\" \"parquet.compression\" = \"SNAPPY\" } storage_descriptor { location = \"s3://${data.aws_s3_bucket.sn_form_event_destination.id}/${local.s3_prefix}sn-form-events\" input_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\" output_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\" ser_de_info { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\" serialization_library = \"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\" parameters = { \"serialization.format\" = 1 } } schema_reference { schema_version_number = 1 schema_id { schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn-form-events-glue-schema\" } } # schema_reference { # schema_version_number = 1 # schema_id { # schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn_form_events.proto\" # } # } # columns { # name = \"occurred_at\" # type = \"timestamp\" # } # columns { # name = \"account_id\" # type = \"bigint\" # } # columns { # name = \"form_id\" # type = \"string\" # } # columns { # name = \"action\" # type = \"string\" # } # columns { # name = \"url\" # type = \"string\" # } # columns { # name = \"visitor_uuid\" # type = \"string\" # } # columns { # name = \"properties\" # type = \"string\" # } } depends_on = [ aws_glue_catalog_database.sn_form_events, # aws_glue_schema.sn_form_events_glue_schema-protobuf aws_glue_schema.sn_form_events_glue_schema ] } resource \"aws_glue_registry\" \"sn_form_events_glue_schema_registry\" { registry_name = \"sn-form-events-glue-schema-registry\" } resource \"aws_glue_schema\" \"sn_form_events_glue_schema\" { schema_name = \"sn-form-events-glue-schema\" registry_arn = aws_glue_registry.sn_form_events_glue_schema_registry.arn data_format = \"AVRO\" compatibility = \"NONE\" schema_definition = <<EOF { \"type\": \"record\", \"name\": \"sn_form_events_glue_schema\", \"fields\": [ { \"name\": \"occurred_at\", \"type\": \"long\", \"logicalType\": \"timestamp-millis\" }, { \"name\": \"account_id\", \"type\": \"long\" ", "keywords": ["policy"]}]}, {"Id": "275399022", "PostHistoryTypeId": "5", "PostId": "73198845", "RevisionGUID": "09fb8b00-8516-4a74-b432-503ea73dad30", "CreationDate": "2022-08-01T21:35:39.323", "UserId": "3991562", "Comment": "Make my actual question much more clear", "Text": "I'm fairly new to AWS Firehose and Glue and everything, and I'm flummoxed.  I'm trying to get the data that comes through the firehose to be converted properly to a Parquet file in S3.\r\n\r\nMy question is this: **How can I make any record format conversions fail whenever they don't have the exact list of column names and data types that I'm looking for?**  In other words, it should fail if there are more or fewer columns, columns with incorrect names, or values with incorrect data types.\r\n\r\nBelow is all the background information on what I've attempted thus far and the Terraform code I currently have.\r\n\r\nInitially, I had it set up with the column names defined directly in the `aws_glue_catalog_table` resource in my Terraform file, but that was allowing data that should not have been accepted to get converted and stored as a Parquet file.  It was correctly handling data the data that I want it to handle, but it was also allowing a variety of bad data through.\r\n\r\nMy desired column names (and their types) are:\r\n- occurred_at: timestamp\r\n- account_id: bigint\r\n- form_id: string\r\n- action: string\r\n- url: string\r\n- visitor_uuid: string\r\n- properties: string\r\n\r\nAn example object that it happily accepted is the following object; an excerpt from the database table is shown here:\r\n```\r\n                                                  Table \"public.accounts\"\r\n             Column             |            Type             | Collation | Nullable |               Default\r\n--------------------------------+-----------------------------+-----------+----------+--------------------------------------\r\n id                             | integer                     |           | not null | nextval('accounts_id_seq'::regclass)\r\n subscription_id                | integer                     |           |          |\r\n name                           | character varying(255)      |           |          |\r\n url                            | character varying(255)      |           |          |\r\n deleted_at                     | timestamp without time zone |           |          |\r\n created_at                     | timestamp without time zone |           | not null |\r\n updated_at                     | timestamp without time zone |           | not null |\r\n default_from_email             | character varying(255)      |           |          |\r\n default_postal_address         | text                        |           |          |\r\n default_from_name              | character varying(255)      |           |          |\r\n primary_email                  | character varying(255)      |           |          |\r\n disable_js                     | boolean                     |           |          | false\r\n status                         | character varying(255)      |           |          |\r\n is_onboarded                   | boolean                     |           |          |\r\n hide_guided_setup              | boolean                     |           |          |\r\n is_js_installed                | boolean                     |           |          |\r\n domain                         | character varying(255)      |           |          |\r\n enable_third_party_cookies     | boolean                     |           |          |\r\n phone_number                   | character varying(255)      |           |          |\r\n disable_analytics              | boolean                     |           |          | false\r\n has_activated_campaign         | boolean                     |           |          | false\r\n has_enabled_goal               | boolean                     |           |          | false\r\n current_setup_id               | integer                     |           |          |\r\n default_template_id            | integer                     |           |          |\r\n default_html_footer            | text                        |           |          |\r\n default_text_footer            | text                        |           |          |\r\n enable_lead_scoring            | boolean                     |           | not null | false\r\n raw_lead_settings              | text                        |           |          |\r\n regenerate_js                  | boolean                     |           |          | true\r\n sending_status                 | character varying(255)      |           |          |\r\n```\r\nThe resulting parquet files have the `url` field populated, but the remaining 6 values, which don't have matching column names in the database table, are `None` (or `NaT` or `NaN`, depending on the column's data type).\r\n\r\nIn an effort to reject bad data I attempted to use an AWS Glue Schema to handle the record format conversion.  I have tried both the Avro schema and protobuf, both of which fail in different ways.  I have not tried using JSON, because it doesn't seem to support timestamps, which I need.\r\n\r\nThe Avro implementation yields failed conversion files uploaded to S3 which look like this:\r\n```\r\n{\r\n  \"attemptsMade\":1,\r\n  \"arrivalTimestamp\":1659372890895,\r\n  \"lastErrorCode\":\"DataFormatConversion.InvalidSchema\",\r\n  \"lastErrorMessage\":\"The schema is invalid. The specified table has no columns.\",\r\n  \"attemptEndingTimestamp\":1659372956967,\r\n  \"rawData\":\"eyJpZCI6MSwiYWNjb3VudF9pZCI6MSwiZm9ybV9pZCI6MSwidmlzaXRvcl91dWlkIjoiIiwiYWN0aW9uIjoic3VibWl0IiwiY3JlYXRlZF9hdCI6IjIwMTYtMDUtMThUMjI6MTU6MjkuNDIwWiIsInVwZGF0ZWRfYXQiOiIyMDE2LTA1LTE4VDIyOjE1OjI5LjQyMFoiLCJ1cmwiOiIiLCJtYW51YWxseV9vcGVuZWQiOm51bGwsIm9jY3VycmVkX2F0IjoiMjAxNi0wNS0xOFQyMjoxNToyOS40MTlaIn0=\",\r\n  \"sequenceNumber\":\"49631940267636444464128680289902809552022038273287258114\",\r\n  \"subSequenceNumber\":null,\r\n  \"dataCatalogTable\": {\r\n    \"catalogId\":null,\r\n    \"databaseName\":\"drip-staging-sn-form-events-glue-db\",\r\n    \"tableName\":\"drip-staging-sn-form-events-glue-table\",\r\n    \"region\":\"us-east-1\",\r\n    \"versionId\":\"LATEST\",\r\n    \"roleArn\":\"arn:aws:iam::[[my AWS account number]]:role/drip-staging-sn-form-event-firehose-role\"\r\n  }\r\n}\r\n```\r\nI have no idea why it says it can't find the columns, because when I open up the Glue table in the AWS console, it shows the columns I expect to see, and it says that it pulled the columns from a Glue schema.\r\n\r\nNext, I tried protobufs, which failed when I tried to apply the Terraform plan, with the following error message:\r\n```\r\naws_glue_catalog_table.sn_form_events: Modifying... [id=[[my AWS account number]]:drip-staging-sn-form-events-glue-db:drip-staging-sn-form-events-glue-table]\r\n\u2577\r\n\u2502 Error: Error updating Glue Catalog Table: InvalidInputException: No SchemaDereferencingStrategy found for schema type: PROTOBUF\r\n\u2502\r\n\u2502   with aws_glue_catalog_table.sn_form_events,\r\n\u2502   on drip-firehose-streams.tf line 61, in resource \"aws_glue_catalog_table\" \"sn_form_events\":\r\n\u2502   61: resource \"aws_glue_catalog_table\" \"sn_form_events\" {\r\n```\r\nHere's the Terraform file that I'm using to set things up.  I've commented out the protobufs code and the `columns` within the Glue table, but the commented out versions are what I use when trying to use each of those alternatives.  Note that `var.resource_prefix` evaluates to `drip` and `var.resource_domain` evaluates to `staging`\r\n```\r\ndata \"aws_s3_bucket\" \"sn_form_event_destination\" {\r\n  bucket = \"drip-data-mart\"\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"sn_form_events\" {\r\n  name              = \"/aws/kinesisfirehose/${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n  retention_in_days = 30\r\n}\r\n\r\nresource \"aws_cloudwatch_log_stream\" \"sn_form_events\" {\r\n  name           = \"DestinationDelivery\"\r\n  log_group_name = aws_cloudwatch_log_group.sn_form_events.name\r\n}\r\n\r\ndata \"template_file\" \"firehose_service_policy_json\" {\r\n  template = file(\"drip-role-firehose-service-policy.tpl\")\r\n\r\n  vars = {\r\n    log_group_arn      = aws_cloudwatch_log_group.sn_form_events.arn\r\n    s3_bucket_arn      = data.aws_s3_bucket.sn_form_event_destination.arn\r\n    s3_prefix          = local.s3_prefix\r\n    glue_database_name = aws_glue_catalog_database.sn_form_events.name\r\n    glue_table_name    = aws_glue_catalog_table.sn_form_events.name\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"firehose_role\" {\r\n  name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-event-firehose-role\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": \"sts:AssumeRole\",\r\n      \"Principal\": {\r\n        \"Service\": \"firehose.amazonaws.com\"\r\n      },\r\n      \"Effect\": \"Allow\",\r\n      \"Sid\": \"\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_policy\" \"firehose_service_policy\" {\r\n  name   = \"${local.pond_cc_name}SNFormEventFirehoseServicePolicy\"\r\n  policy = data.template_file.firehose_service_policy_json.rendered\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"firehose-role-attach-service-policy\" {\r\n  role       = aws_iam_role.firehose_role.id\r\n  policy_arn = aws_iam_policy.firehose_service_policy.arn\r\n}\r\n\r\nresource \"aws_glue_catalog_database\" \"sn_form_events\" {\r\n  name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-db\"\r\n}\r\n\r\nresource \"aws_glue_catalog_table\" \"sn_form_events\" {\r\n  name          = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-table\"\r\n  database_name = aws_glue_catalog_database.sn_form_events.name\r\n\r\n  table_type = \"EXTERNAL_TABLE\"\r\n\r\n  parameters = {\r\n    EXTERNAL              = \"TRUE\"\r\n    \"parquet.compression\" = \"SNAPPY\"\r\n  }\r\n\r\n  storage_descriptor {\r\n    location      = \"s3://${data.aws_s3_bucket.sn_form_event_destination.id}/${local.s3_prefix}sn-form-events\"\r\n    input_format  = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\"\r\n    output_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\"\r\n\r\n    ser_de_info {\r\n      name                  = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n      serialization_library = \"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\"\r\n\r\n      parameters = {\r\n        \"serialization.format\" = 1\r\n      }\r\n    }\r\n\r\n    schema_reference {\r\n      schema_version_number = 1\r\n      schema_id {\r\n        schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn-form-events-glue-schema\"\r\n      }\r\n    }\r\n\r\n    # schema_reference {\r\n    #   schema_version_number = 1\r\n    #   schema_id {\r\n    #     schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn_form_events.proto\"\r\n    #   }\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"occurred_at\"\r\n    #   type = \"timestamp\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"account_id\"\r\n    #   type = \"bigint\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"form_id\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"action\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"url\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"visitor_uuid\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"properties\"\r\n    #   type = \"string\"\r\n    # }\r\n  }\r\n\r\n  depends_on = [\r\n    aws_glue_catalog_database.sn_form_events,\r\n    # aws_glue_schema.sn_form_events_glue_schema-protobuf\r\n    aws_glue_schema.sn_form_events_glue_schema\r\n  ]\r\n}\r\n\r\nresource \"aws_glue_registry\" \"sn_form_events_glue_schema_registry\" {\r\n  registry_name = \"sn-form-events-glue-schema-registry\"\r\n}\r\n\r\nresource \"aws_glue_schema\" \"sn_form_events_glue_schema\" {\r\n  schema_name       = \"sn-form-events-glue-schema\"\r\n  registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\r\n  data_format       = \"AVRO\"\r\n  compatibility     = \"NONE\"\r\n  schema_definition = <<EOF\r\n  {\r\n    \"type\": \"record\",\r\n    \"name\": \"sn_form_events_glue_schema\",\r\n    \"fields\": [\r\n      {\r\n        \"name\": \"occurred_at\",\r\n        \"type\": \"long\",\r\n        \"logicalType\": \"timestamp-millis\"\r\n      },\r\n      {\r\n        \"name\": \"account_id\",\r\n        \"type\": \"long\"\r\n      },\r\n      {\r\n        \"name\": \"form_id\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"action\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"url\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"visitor_uuid\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"properties\",\r\n        \"type\": \"string\"\r\n    }]\r\n  }\r\nEOF\r\n}\r\n\r\n# resource \"aws_glue_schema\" \"sn_form_events_glue_schema-protobuf\" {\r\n#   schema_name       = \"sn_form_events.proto\"\r\n#   registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\r\n#   data_format       = \"PROTOBUF\"\r\n#   compatibility     = \"NONE\"\r\n#   schema_definition = <<EOF\r\n#   syntax = \"proto3\";\r\n#   package sn-form-events;\r\n\r\n#   import \"google/protobuf/timestamp.proto\";\r\n\r\n#   message sn_form_events{\r\n#     google.protobuf.Timestamp occurred_at = 1;\r\n#     int64 account_id = 2;\r\n#     string form_id = 3;\r\n#     string action = 4;\r\n#     string url = 5;\r\n#     string visitor_uuid = 6;\r\n#     string properties = 7;\r\n#   }\r\n# EOF\r\n# }\r\n\r\nresource \"aws_kinesis_firehose_delivery_stream\" \"sn_form_events\" {\r\n  destination = \"extended_s3\"\r\n  name        = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n\r\n  tags = {\r\n    Name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n  }\r\n\r\n  extended_s3_configuration {\r\n    bucket_arn          = data.aws_s3_bucket.sn_form_event_destination.arn\r\n    prefix              = \"${local.s3_prefix}year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/\"\r\n    buffer_interval     = var.resource_domain == \"production\" ? 300 : 60 # 5 minutes for production, 1 minute for staging\r\n    buffer_size         = 128                                            # 128 MB\r\n    compression_format  = \"UNCOMPRESSED\"\r\n    role_arn            = aws_iam_role.firehose_role.arn\r\n    error_output_prefix = \"${local.s3_prefix}failed_conversions/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/!{firehose:error-output-type}/\"\r\n\r\n    cloudwatch_logging_options {\r\n      enabled         = true\r\n      log_group_name  = aws_cloudwatch_log_group.sn_form_events.name\r\n      log_stream_name = aws_cloudwatch_log_stream.sn_form_events.name\r\n    }\r\n\r\n    data_format_conversion_configuration {\r\n      enabled = true\r\n\r\n      input_format_configuration {\r\n        deserializer {\r\n\r\n          open_x_json_ser_de {\r\n            case_insensitive                         = true\r\n            column_to_json_key_mappings              = {}\r\n            convert_dots_in_json_keys_to_underscores = false\r\n          }\r\n        }\r\n      }\r\n\r\n      output_format_configuration {\r\n        serializer {\r\n\r\n          parquet_ser_de {\r\n            block_size_bytes              = 268435456 # 256MiB - default at time of writing\r\n            compression                   = \"SNAPPY\"\r\n            enable_dictionary_compression = false\r\n            max_padding_bytes             = 0\r\n            page_size_bytes               = 1048576 # 1MiB - default at time of writing\r\n            writer_version                = \"V1\"\r\n          }\r\n        }\r\n      }\r\n\r\n      schema_configuration {\r\n        database_name = aws_glue_catalog_database.sn_form_events.name\r\n        region        = \"us-east-1\"\r\n        role_arn      = aws_iam_role.firehose_role.arn\r\n        table_name    = aws_glue_catalog_table.sn_form_events.name\r\n        version_id    = \"LATEST\"\r\n      }\r\n    }\r\n\r\n    processing_configuration {\r\n      enabled = false\r\n    }\r\n  }\r\n\r\n  server_side_encryption {\r\n    enabled  = false\r\n    key_type = \"AWS_OWNED_CMK\"\r\n  }\r\n\r\n  depends_on = [\r\n    aws_glue_catalog_table.sn_form_events,\r\n    aws_iam_role.firehose_role,\r\n    aws_glue_schema.sn_form_events_glue_schema\r\n  ]\r\n}\r\n```\r\nLastly, I've seen this specific answer to a different but similar question, and it did not resolve my issues: https://stackoverflow.com/a/69440421/3991562\r\n\r\nThanks for any advice! :D", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "| | deleted_at | timestamp without time zone | | | created_at | timestamp without time zone | | not null | updated_at | timestamp without time zone | | not null | default_from_email | character varying(255) | | | default_postal_address | text | | | default_from_name | character varying(255) | | | primary_email | character varying(255) | | | disable_js | boolean | | | false status | character varying(255) | | | is_onboarded | boolean | | | hide_guided_setup | boolean | | | is_js_installed | boolean | | | domain | character varying(255) | | | enable_third_party_cookies | boolean | | | phone_number | character varying(255) | | | disable_analytics | boolean | | | false has_activated_campaign | boolean | | | false has_enabled_goal | boolean | | | false current_setup_id | integer | | | default_template_id | integer | | | default_html_footer | text | | | default_text_footer | text | | | enable_lead_scoring | boolean | | not null | false raw_lead_settings | text | | | regenerate_js | boolean | | | true sending_status | character varying(255) | ", "keywords": ["domain"]}, {"source": "Text", "text": "The resulting parquet files have the `url` field populated, but the remaining 6 values, which don't have matching column names in the database table, are `None` (or `NaT` or `NaN`, depending on the column's data type). ", "keywords": ["nat"]}, {"source": "Text", "text": "Note that `var.resource_prefix` evaluates to `drip` and `var.resource_domain` evaluates to `staging` ``` data \"aws_s3_bucket\" \"sn_form_event_destination\" { bucket = \"drip-data-mart\" } resource \"aws_cloudwatch_log_group\" \"sn_form_events\" { name = \"/aws/kinesisfirehose/${var.resource_prefix}-${var.resource_domain}-sn-form-events\" retention_in_days = 30 } resource \"aws_cloudwatch_log_stream\" \"sn_form_events\" { name = \"DestinationDelivery\" log_group_name = aws_cloudwatch_log_group.sn_form_events.name } data \"template_file\" \"firehose_service_policy_json\" { template = file(\"drip-role-firehose-service-policy.tpl\") vars = { log_group_arn = aws_cloudwatch_log_group.sn_form_events.arn s3_bucket_arn = data.aws_s3_bucket.sn_form_event_destination.arn s3_prefix = local.s3_prefix glue_database_name = aws_glue_catalog_database.sn_form_events.name glue_table_name = aws_glue_catalog_table.sn_form_events.name } } resource \"aws_iam_role\" \"firehose_role\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-event-firehose-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"firehose.amazonaws.com\" }, \"Effect\": \"Allow\", \"Sid\": \"\" } ] } EOF } resource \"aws_iam_policy\" \"firehose_service_policy\" { name = \"${local.pond_cc_name}SNFormEventFirehoseServicePolicy\" policy = data.template_file.firehose_service_policy_json.rendered } resource \"aws_iam_role_policy_attachment\" \"firehose-role-attach-service-policy\" { role = aws_iam_role.firehose_role.id policy_arn = aws_iam_policy.firehose_service_policy.arn } resource \"aws_glue_catalog_database\" \"sn_form_events\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-db\" } resource \"aws_glue_catalog_table\" \"sn_form_events\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-table\" database_name = aws_glue_catalog_database.sn_form_events.name table_type = \"EXTERNAL_TABLE\" parameters = { EXTERNAL = \"TRUE\" \"parquet.compression\" = \"SNAPPY\" } storage_descriptor { location = \"s3://${data.aws_s3_bucket.sn_form_event_destination.id}/${local.s3_prefix}sn-form-events\" input_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\" output_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\" ser_de_info { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\" serialization_library = \"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\" parameters = { \"serialization.format\" = 1 } } schema_reference { schema_version_number = 1 schema_id { schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn-form-events-glue-schema\" } } # schema_reference { # schema_version_number = 1 # schema_id { # schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn_form_events.proto\" # } # } # columns { # name = \"occurred_at\" # type = \"timestamp\" # } # columns { # name = \"account_id\" # type = \"bigint\" # } # columns { # name = \"form_id\" # type = \"string\" # } # columns { # name = \"action\" # type = \"string\" # } # columns { # name = \"url\" # type = \"string\" # } # columns { # name = \"visitor_uuid\" # type = \"string\" # } # columns { # name = \"properties\" # type = \"string\" # } } depends_on = [ aws_glue_catalog_database.sn_form_events, # aws_glue_schema.sn_form_events_glue_schema-protobuf aws_glue_schema.sn_form_events_glue_schema ] } resource \"aws_glue_registry\" \"sn_form_events_glue_schema_registry\" { registry_name = \"sn-form-events-glue-schema-registry\" } resource \"aws_glue_schema\" \"sn_form_events_glue_schema\" { schema_name = \"sn-form-events-glue-schema\" registry_arn = aws_glue_registry.sn_form_events_glue_schema_registry.arn data_format = \"AVRO\" compatibility = \"NONE\" schema_definition = <<EOF { \"type\": \"record\", \"name\": \"sn_form_events_glue_schema\", \"fields\": [ { \"name\": \"occurred_at\", \"type\": \"long\", \"logicalType\": \"timestamp-millis\" }, { \"name\": \"account_id\", \"type\": \"long\" }, { \"name\": \"form_id\", \"type\": \"string\" ", "keywords": ["policy"]}]}, {"Id": "275401406", "PostHistoryTypeId": "5", "PostId": "73198845", "RevisionGUID": "9d1dc8e4-86cc-442f-ba56-f382ca895976", "CreationDate": "2022-08-01T22:48:06.393", "UserId": "3991562", "Comment": "Add TF version and AWS provider version", "Text": "I'm fairly new to AWS Firehose and Glue and everything, and I'm flummoxed.  I'm trying to get the data that comes through the firehose to be converted properly to a Parquet file in S3.\r\n\r\nMy question is this: **How can I make any record format conversions fail whenever they don't have the exact list of column names and data types that I'm looking for?**  In other words, it should fail if there are more or fewer columns, columns with incorrect names, or values with incorrect data types.\r\n\r\nBelow is all the background information on what I've attempted thus far and the Terraform code I currently have.\r\n\r\nInitially, I had it set up with the column names defined directly in the `aws_glue_catalog_table` resource in my Terraform file, but that was allowing data that should not have been accepted to get converted and stored as a Parquet file.  It was correctly handling data the data that I want it to handle, but it was also allowing a variety of bad data through.\r\n\r\nMy desired column names (and their types) are:\r\n- occurred_at: timestamp\r\n- account_id: bigint\r\n- form_id: string\r\n- action: string\r\n- url: string\r\n- visitor_uuid: string\r\n- properties: string\r\n\r\nAn example object that it happily accepted is the following object; an excerpt from the database table is shown here:\r\n```\r\n                                                  Table \"public.accounts\"\r\n             Column             |            Type             | Collation | Nullable |               Default\r\n--------------------------------+-----------------------------+-----------+----------+--------------------------------------\r\n id                             | integer                     |           | not null | nextval('accounts_id_seq'::regclass)\r\n subscription_id                | integer                     |           |          |\r\n name                           | character varying(255)      |           |          |\r\n url                            | character varying(255)      |           |          |\r\n deleted_at                     | timestamp without time zone |           |          |\r\n created_at                     | timestamp without time zone |           | not null |\r\n updated_at                     | timestamp without time zone |           | not null |\r\n default_from_email             | character varying(255)      |           |          |\r\n default_postal_address         | text                        |           |          |\r\n default_from_name              | character varying(255)      |           |          |\r\n primary_email                  | character varying(255)      |           |          |\r\n disable_js                     | boolean                     |           |          | false\r\n status                         | character varying(255)      |           |          |\r\n is_onboarded                   | boolean                     |           |          |\r\n hide_guided_setup              | boolean                     |           |          |\r\n is_js_installed                | boolean                     |           |          |\r\n domain                         | character varying(255)      |           |          |\r\n enable_third_party_cookies     | boolean                     |           |          |\r\n phone_number                   | character varying(255)      |           |          |\r\n disable_analytics              | boolean                     |           |          | false\r\n has_activated_campaign         | boolean                     |           |          | false\r\n has_enabled_goal               | boolean                     |           |          | false\r\n current_setup_id               | integer                     |           |          |\r\n default_template_id            | integer                     |           |          |\r\n default_html_footer            | text                        |           |          |\r\n default_text_footer            | text                        |           |          |\r\n enable_lead_scoring            | boolean                     |           | not null | false\r\n raw_lead_settings              | text                        |           |          |\r\n regenerate_js                  | boolean                     |           |          | true\r\n sending_status                 | character varying(255)      |           |          |\r\n```\r\nThe resulting parquet files have the `url` field populated, but the remaining 6 values, which don't have matching column names in the database table, are `None` (or `NaT` or `NaN`, depending on the column's data type).\r\n\r\nIn an effort to reject bad data I attempted to use an AWS Glue Schema to handle the record format conversion.  I have tried both the Avro schema and protobuf, both of which fail in different ways.  I have not tried using JSON, because it doesn't seem to support timestamps, which I need.\r\n\r\nThe Avro implementation yields failed conversion files uploaded to S3 which look like this:\r\n```\r\n{\r\n  \"attemptsMade\":1,\r\n  \"arrivalTimestamp\":1659372890895,\r\n  \"lastErrorCode\":\"DataFormatConversion.InvalidSchema\",\r\n  \"lastErrorMessage\":\"The schema is invalid. The specified table has no columns.\",\r\n  \"attemptEndingTimestamp\":1659372956967,\r\n  \"rawData\":\"eyJpZCI6MSwiYWNjb3VudF9pZCI6MSwiZm9ybV9pZCI6MSwidmlzaXRvcl91dWlkIjoiIiwiYWN0aW9uIjoic3VibWl0IiwiY3JlYXRlZF9hdCI6IjIwMTYtMDUtMThUMjI6MTU6MjkuNDIwWiIsInVwZGF0ZWRfYXQiOiIyMDE2LTA1LTE4VDIyOjE1OjI5LjQyMFoiLCJ1cmwiOiIiLCJtYW51YWxseV9vcGVuZWQiOm51bGwsIm9jY3VycmVkX2F0IjoiMjAxNi0wNS0xOFQyMjoxNToyOS40MTlaIn0=\",\r\n  \"sequenceNumber\":\"49631940267636444464128680289902809552022038273287258114\",\r\n  \"subSequenceNumber\":null,\r\n  \"dataCatalogTable\": {\r\n    \"catalogId\":null,\r\n    \"databaseName\":\"drip-staging-sn-form-events-glue-db\",\r\n    \"tableName\":\"drip-staging-sn-form-events-glue-table\",\r\n    \"region\":\"us-east-1\",\r\n    \"versionId\":\"LATEST\",\r\n    \"roleArn\":\"arn:aws:iam::[[my AWS account number]]:role/drip-staging-sn-form-event-firehose-role\"\r\n  }\r\n}\r\n```\r\nI have no idea why it says it can't find the columns, because when I open up the Glue table in the AWS console, it shows the columns I expect to see, and it says that it pulled the columns from a Glue schema.\r\n\r\nNext, I tried protobufs, which failed when I tried to apply the Terraform plan, with the following error message:\r\n```\r\naws_glue_catalog_table.sn_form_events: Modifying... [id=[[my AWS account number]]:drip-staging-sn-form-events-glue-db:drip-staging-sn-form-events-glue-table]\r\n\u2577\r\n\u2502 Error: Error updating Glue Catalog Table: InvalidInputException: No SchemaDereferencingStrategy found for schema type: PROTOBUF\r\n\u2502\r\n\u2502   with aws_glue_catalog_table.sn_form_events,\r\n\u2502   on drip-firehose-streams.tf line 61, in resource \"aws_glue_catalog_table\" \"sn_form_events\":\r\n\u2502   61: resource \"aws_glue_catalog_table\" \"sn_form_events\" {\r\n```\r\nHere's the Terraform file that I'm using to set things up.  I've commented out the protobufs code and the `columns` within the Glue table, but the commented out versions are what I use when trying to use each of those alternatives.  Note that `var.resource_prefix` evaluates to `drip` and `var.resource_domain` evaluates to `staging`\r\n```\r\ndata \"aws_s3_bucket\" \"sn_form_event_destination\" {\r\n  bucket = \"drip-data-mart\"\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"sn_form_events\" {\r\n  name              = \"/aws/kinesisfirehose/${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n  retention_in_days = 30\r\n}\r\n\r\nresource \"aws_cloudwatch_log_stream\" \"sn_form_events\" {\r\n  name           = \"DestinationDelivery\"\r\n  log_group_name = aws_cloudwatch_log_group.sn_form_events.name\r\n}\r\n\r\ndata \"template_file\" \"firehose_service_policy_json\" {\r\n  template = file(\"drip-role-firehose-service-policy.tpl\")\r\n\r\n  vars = {\r\n    log_group_arn      = aws_cloudwatch_log_group.sn_form_events.arn\r\n    s3_bucket_arn      = data.aws_s3_bucket.sn_form_event_destination.arn\r\n    s3_prefix          = local.s3_prefix\r\n    glue_database_name = aws_glue_catalog_database.sn_form_events.name\r\n    glue_table_name    = aws_glue_catalog_table.sn_form_events.name\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"firehose_role\" {\r\n  name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-event-firehose-role\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": \"sts:AssumeRole\",\r\n      \"Principal\": {\r\n        \"Service\": \"firehose.amazonaws.com\"\r\n      },\r\n      \"Effect\": \"Allow\",\r\n      \"Sid\": \"\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_policy\" \"firehose_service_policy\" {\r\n  name   = \"${local.pond_cc_name}SNFormEventFirehoseServicePolicy\"\r\n  policy = data.template_file.firehose_service_policy_json.rendered\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"firehose-role-attach-service-policy\" {\r\n  role       = aws_iam_role.firehose_role.id\r\n  policy_arn = aws_iam_policy.firehose_service_policy.arn\r\n}\r\n\r\nresource \"aws_glue_catalog_database\" \"sn_form_events\" {\r\n  name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-db\"\r\n}\r\n\r\nresource \"aws_glue_catalog_table\" \"sn_form_events\" {\r\n  name          = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-table\"\r\n  database_name = aws_glue_catalog_database.sn_form_events.name\r\n\r\n  table_type = \"EXTERNAL_TABLE\"\r\n\r\n  parameters = {\r\n    EXTERNAL              = \"TRUE\"\r\n    \"parquet.compression\" = \"SNAPPY\"\r\n  }\r\n\r\n  storage_descriptor {\r\n    location      = \"s3://${data.aws_s3_bucket.sn_form_event_destination.id}/${local.s3_prefix}sn-form-events\"\r\n    input_format  = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\"\r\n    output_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\"\r\n\r\n    ser_de_info {\r\n      name                  = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n      serialization_library = \"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\"\r\n\r\n      parameters = {\r\n        \"serialization.format\" = 1\r\n      }\r\n    }\r\n\r\n    schema_reference {\r\n      schema_version_number = 1\r\n      schema_id {\r\n        schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn-form-events-glue-schema\"\r\n      }\r\n    }\r\n\r\n    # schema_reference {\r\n    #   schema_version_number = 1\r\n    #   schema_id {\r\n    #     schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn_form_events.proto\"\r\n    #   }\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"occurred_at\"\r\n    #   type = \"timestamp\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"account_id\"\r\n    #   type = \"bigint\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"form_id\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"action\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"url\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"visitor_uuid\"\r\n    #   type = \"string\"\r\n    # }\r\n\r\n    # columns {\r\n    #   name = \"properties\"\r\n    #   type = \"string\"\r\n    # }\r\n  }\r\n\r\n  depends_on = [\r\n    aws_glue_catalog_database.sn_form_events,\r\n    # aws_glue_schema.sn_form_events_glue_schema-protobuf\r\n    aws_glue_schema.sn_form_events_glue_schema\r\n  ]\r\n}\r\n\r\nresource \"aws_glue_registry\" \"sn_form_events_glue_schema_registry\" {\r\n  registry_name = \"sn-form-events-glue-schema-registry\"\r\n}\r\n\r\nresource \"aws_glue_schema\" \"sn_form_events_glue_schema\" {\r\n  schema_name       = \"sn-form-events-glue-schema\"\r\n  registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\r\n  data_format       = \"AVRO\"\r\n  compatibility     = \"NONE\"\r\n  schema_definition = <<EOF\r\n  {\r\n    \"type\": \"record\",\r\n    \"name\": \"sn_form_events_glue_schema\",\r\n    \"fields\": [\r\n      {\r\n        \"name\": \"occurred_at\",\r\n        \"type\": \"long\",\r\n        \"logicalType\": \"timestamp-millis\"\r\n      },\r\n      {\r\n        \"name\": \"account_id\",\r\n        \"type\": \"long\"\r\n      },\r\n      {\r\n        \"name\": \"form_id\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"action\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"url\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"visitor_uuid\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"name\": \"properties\",\r\n        \"type\": \"string\"\r\n    }]\r\n  }\r\nEOF\r\n}\r\n\r\n# resource \"aws_glue_schema\" \"sn_form_events_glue_schema-protobuf\" {\r\n#   schema_name       = \"sn_form_events.proto\"\r\n#   registry_arn      = aws_glue_registry.sn_form_events_glue_schema_registry.arn\r\n#   data_format       = \"PROTOBUF\"\r\n#   compatibility     = \"NONE\"\r\n#   schema_definition = <<EOF\r\n#   syntax = \"proto3\";\r\n#   package sn-form-events;\r\n\r\n#   import \"google/protobuf/timestamp.proto\";\r\n\r\n#   message sn_form_events{\r\n#     google.protobuf.Timestamp occurred_at = 1;\r\n#     int64 account_id = 2;\r\n#     string form_id = 3;\r\n#     string action = 4;\r\n#     string url = 5;\r\n#     string visitor_uuid = 6;\r\n#     string properties = 7;\r\n#   }\r\n# EOF\r\n# }\r\n\r\nresource \"aws_kinesis_firehose_delivery_stream\" \"sn_form_events\" {\r\n  destination = \"extended_s3\"\r\n  name        = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n\r\n  tags = {\r\n    Name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\"\r\n  }\r\n\r\n  extended_s3_configuration {\r\n    bucket_arn          = data.aws_s3_bucket.sn_form_event_destination.arn\r\n    prefix              = \"${local.s3_prefix}year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/\"\r\n    buffer_interval     = var.resource_domain == \"production\" ? 300 : 60 # 5 minutes for production, 1 minute for staging\r\n    buffer_size         = 128                                            # 128 MB\r\n    compression_format  = \"UNCOMPRESSED\"\r\n    role_arn            = aws_iam_role.firehose_role.arn\r\n    error_output_prefix = \"${local.s3_prefix}failed_conversions/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/!{firehose:error-output-type}/\"\r\n\r\n    cloudwatch_logging_options {\r\n      enabled         = true\r\n      log_group_name  = aws_cloudwatch_log_group.sn_form_events.name\r\n      log_stream_name = aws_cloudwatch_log_stream.sn_form_events.name\r\n    }\r\n\r\n    data_format_conversion_configuration {\r\n      enabled = true\r\n\r\n      input_format_configuration {\r\n        deserializer {\r\n\r\n          open_x_json_ser_de {\r\n            case_insensitive                         = true\r\n            column_to_json_key_mappings              = {}\r\n            convert_dots_in_json_keys_to_underscores = false\r\n          }\r\n        }\r\n      }\r\n\r\n      output_format_configuration {\r\n        serializer {\r\n\r\n          parquet_ser_de {\r\n            block_size_bytes              = 268435456 # 256MiB - default at time of writing\r\n            compression                   = \"SNAPPY\"\r\n            enable_dictionary_compression = false\r\n            max_padding_bytes             = 0\r\n            page_size_bytes               = 1048576 # 1MiB - default at time of writing\r\n            writer_version                = \"V1\"\r\n          }\r\n        }\r\n      }\r\n\r\n      schema_configuration {\r\n        database_name = aws_glue_catalog_database.sn_form_events.name\r\n        region        = \"us-east-1\"\r\n        role_arn      = aws_iam_role.firehose_role.arn\r\n        table_name    = aws_glue_catalog_table.sn_form_events.name\r\n        version_id    = \"LATEST\"\r\n      }\r\n    }\r\n\r\n    processing_configuration {\r\n      enabled = false\r\n    }\r\n  }\r\n\r\n  server_side_encryption {\r\n    enabled  = false\r\n    key_type = \"AWS_OWNED_CMK\"\r\n  }\r\n\r\n  depends_on = [\r\n    aws_glue_catalog_table.sn_form_events,\r\n    aws_iam_role.firehose_role,\r\n    aws_glue_schema.sn_form_events_glue_schema\r\n  ]\r\n}\r\n```\r\nHere's my Terraform version and AWS provider version:\r\n```\r\n$ cat tf-state.tf\r\nterraform {\r\n  required_version = \"~> 1.2.5\"\r\n\r\n  backend \"s3\" {}\r\n  required_providers {\r\n    aws = {\r\n      source  = \"hashicorp/aws\"\r\n      version = \"~> 4.23.0\"\r\n    }\r\n\r\n    template = {\r\n      source  = \"hashicorp/template\"\r\n      version = \"~> 2.2.0\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nLastly, I've seen this specific answer to a different but similar question, and it did not resolve my issues: https://stackoverflow.com/a/69440421/3991562\r\n\r\nThanks for any advice! :D", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "| | deleted_at | timestamp without time zone | | | created_at | timestamp without time zone | | not null | updated_at | timestamp without time zone | | not null | default_from_email | character varying(255) | | | default_postal_address | text | | | default_from_name | character varying(255) | | | primary_email | character varying(255) | | | disable_js | boolean | | | false status | character varying(255) | | | is_onboarded | boolean | | | hide_guided_setup | boolean | | | is_js_installed | boolean | | | domain | character varying(255) | | | enable_third_party_cookies | boolean | | | phone_number | character varying(255) | | | disable_analytics | boolean | | | false has_activated_campaign | boolean | | | false has_enabled_goal | boolean | | | false current_setup_id | integer | | | default_template_id | integer | | | default_html_footer | text | | | default_text_footer | text | | | enable_lead_scoring | boolean | | not null | false raw_lead_settings | text | | | regenerate_js | boolean | | | true sending_status | character varying(255) | ", "keywords": ["domain"]}, {"source": "Text", "text": "The resulting parquet files have the `url` field populated, but the remaining 6 values, which don't have matching column names in the database table, are `None` (or `NaT` or `NaN`, depending on the column's data type). ", "keywords": ["nat"]}, {"source": "Text", "text": "Note that `var.resource_prefix` evaluates to `drip` and `var.resource_domain` evaluates to `staging` ``` data \"aws_s3_bucket\" \"sn_form_event_destination\" { bucket = \"drip-data-mart\" } resource \"aws_cloudwatch_log_group\" \"sn_form_events\" { name = \"/aws/kinesisfirehose/${var.resource_prefix}-${var.resource_domain}-sn-form-events\" retention_in_days = 30 } resource \"aws_cloudwatch_log_stream\" \"sn_form_events\" { name = \"DestinationDelivery\" log_group_name = aws_cloudwatch_log_group.sn_form_events.name } data \"template_file\" \"firehose_service_policy_json\" { template = file(\"drip-role-firehose-service-policy.tpl\") vars = { log_group_arn = aws_cloudwatch_log_group.sn_form_events.arn s3_bucket_arn = data.aws_s3_bucket.sn_form_event_destination.arn s3_prefix = local.s3_prefix glue_database_name = aws_glue_catalog_database.sn_form_events.name glue_table_name = aws_glue_catalog_table.sn_form_events.name } } resource \"aws_iam_role\" \"firehose_role\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-event-firehose-role\" assume_role_policy = <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": \"sts:AssumeRole\", \"Principal\": { \"Service\": \"firehose.amazonaws.com\" }, \"Effect\": \"Allow\", \"Sid\": \"\" } ] } EOF } resource \"aws_iam_policy\" \"firehose_service_policy\" { name = \"${local.pond_cc_name}SNFormEventFirehoseServicePolicy\" policy = data.template_file.firehose_service_policy_json.rendered } resource \"aws_iam_role_policy_attachment\" \"firehose-role-attach-service-policy\" { role = aws_iam_role.firehose_role.id policy_arn = aws_iam_policy.firehose_service_policy.arn } resource \"aws_glue_catalog_database\" \"sn_form_events\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-db\" } resource \"aws_glue_catalog_table\" \"sn_form_events\" { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events-glue-table\" database_name = aws_glue_catalog_database.sn_form_events.name table_type = \"EXTERNAL_TABLE\" parameters = { EXTERNAL = \"TRUE\" \"parquet.compression\" = \"SNAPPY\" } storage_descriptor { location = \"s3://${data.aws_s3_bucket.sn_form_event_destination.id}/${local.s3_prefix}sn-form-events\" input_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\" output_format = \"org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\" ser_de_info { name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\" serialization_library = \"org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\" parameters = { \"serialization.format\" = 1 } } schema_reference { schema_version_number = 1 schema_id { schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn-form-events-glue-schema\" } } # schema_reference { # schema_version_number = 1 # schema_id { # schema_arn = \"arn:aws:glue:us-east-1:[[my AWS account number]]:schema/sn-form-events-glue-schema-registry/sn_form_events.proto\" # } # } # columns { # name = \"occurred_at\" # type = \"timestamp\" # } # columns { # name = \"account_id\" # type = \"bigint\" # } # columns { # name = \"form_id\" # type = \"string\" # } # columns { # name = \"action\" # type = \"string\" # } # columns { # name = \"url\" # type = \"string\" # } # columns { # name = \"visitor_uuid\" # type = \"string\" # } # columns { # name = \"properties\" # type = \"string\" # } } depends_on = [ aws_glue_catalog_database.sn_form_events, # aws_glue_schema.sn_form_events_glue_schema-protobuf aws_glue_schema.sn_form_events_glue_schema ] } resource \"aws_glue_registry\" \"sn_form_events_glue_schema_registry\" { registry_name = \"sn-form-events-glue-schema-registry\" } resource \"aws_glue_schema\" \"sn_form_events_glue_schema\" { schema_name = \"sn-form-events-glue-schema\" registry_arn = aws_glue_registry.sn_form_events_glue_schema_registry.arn data_format = \"AVRO\" compatibility = \"NONE\" schema_definition = <<EOF { \"type\": \"record\", \"name\": \"sn_form_events_glue_schema\", \"fields\": [ { \"name\": \"occurred_at\", \"type\": \"long\", \"logicalType\": \"timestamp-millis\" }, { \"name\": \"account_id\", \"type\": \"long\" }, { \"name\": \"form_id\", \"type\": \"string\" ", "keywords": ["policy"]}, {"source": "Text", "text": "}, { \"name\": \"action\", \"type\": \"string\" }, { \"name\": \"url\", \"type\": \"string\" }, { \"name\": \"visitor_uuid\", \"type\": \"string\" }, { \"name\": \"properties\", \"type\": \"string\" }] } EOF } # resource \"aws_glue_schema\" \"sn_form_events_glue_schema-protobuf\" { # schema_name = \"sn_form_events.proto\" # registry_arn = aws_glue_registry.sn_form_events_glue_schema_registry.arn # data_format = \"PROTOBUF\" # compatibility = \"NONE\" # schema_definition = <<EOF # syntax = \"proto3\"; # package sn-form-events; # import \"google/protobuf/timestamp.proto\"; # message sn_form_events{ # google.protobuf.Timestamp occurred_at = 1; # int64 account_id = 2; # string form_id = 3; # string action = 4; # string url = 5; # string visitor_uuid = 6; # string properties = 7; # } # EOF # } resource \"aws_kinesis_firehose_delivery_stream\" \"sn_form_events\" { destination = \"extended_s3\" name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\" tags = { Name = \"${var.resource_prefix}-${var.resource_domain}-sn-form-events\" } extended_s3_configuration { bucket_arn = data.aws_s3_bucket.sn_form_event_destination.arn prefix = \"${local.s3_prefix}year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/\" buffer_interval = var.resource_domain == \"production\" ? 300 : 60 # 5 minutes for production, 1 minute for staging buffer_size = 128 # 128 MB compression_format = \"UNCOMPRESSED\" role_arn = aws_iam_role.firehose_role.arn error_output_prefix = \"${local.s3_prefix}failed_conversions/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/!{firehose:error-output-type}/\" cloudwatch_logging_options { enabled = true log_group_name = aws_cloudwatch_log_group.sn_form_events.name log_stream_name = aws_cloudwatch_log_stream.sn_form_events.name } data_format_conversion_configuration { enabled = true input_format_configuration { deserializer { open_x_json_ser_de { case_insensitive = true column_to_json_key_mappings = {} convert_dots_in_json_keys_to_underscores = false } } } output_format_configuration { serializer { parquet_ser_de { block_size_bytes = 268435456 # 256MiB - default at time of writing compression = \"SNAPPY\" enable_dictionary_compression = false max_padding_bytes = 0 page_size_bytes = 1048576 # 1MiB - default at time of writing writer_version = \"V1\" } } } schema_configuration { database_name = aws_glue_catalog_database.sn_form_events.name region = \"us-east-1\" role_arn = aws_iam_role.firehose_role.arn table_name = aws_glue_catalog_table.sn_form_events.name version_id = \"LATEST\" } } processing_configuration { enabled = false } } server_side_encryption { enabled = false key_type = \"AWS_OWNED_CMK\" } depends_on = [ aws_glue_catalog_table.sn_form_events, aws_iam_role.firehose_role, aws_glue_schema.sn_form_events_glue_schema ] } ``` Here's my Terraform version and AWS provider version: ``` $ cat tf-state.tf terraform { required_version = \"~> 1.2.5\" backend \"s3\" {} required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 4.23.0\" ", "keywords": ["provider"]}, {"source": "Comment", "text": "Add TF version and AWS provider version", "keywords": ["provider"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "The resulting parquet files have the url field populated, but the remaining 6 values, which don't have matching column names in the database table, are None (or NaT or NaN, depending on the column's data type). ", "keywords": ["nat"]}, {"source": "Body", "text": "Here's my Terraform version and AWS provider version: Lastly, I've seen this specific answer to a different but similar question, and it did not resolve my issues: https://stackoverflow.com/a/69440421/3991562 Thanks for any advice! ", "keywords": ["provider"]}]}