{"Id": "72103920", "PostTypeId": "1", "CreationDate": "2022-05-03T18:32:17.627", "Score": "0", "ViewCount": "49", "Body": "<p>I am using Fargate for a task that runs every hour. As the docker image size is 1.5go, I want to use a ECR VPC endpoint to optimize the AWS data transfer fee.</p>\n<p>The fargate tasks run in a private subnet. The route table of one of the private subnet is the following (where eigw is eigress only internet gateway and nat-01 is a nat gateway in the public subnet):</p>\n<pre><code>Destination              Target\n10.50.0.0/16             local\n0.0.0.0/0                nat-01ec80c2754229321\n2a05:d012:43e:de00::/56  local\n::/0                      eigw-0a0c583a8390d5736\n</code></pre>\n<p><em>Expected behavior</em>: Right now, the Fargate task takes around 1 minute to start, due to the time it takes to docker pull the image. I expect that with the ECR VPC endpoint, the time it takes to start would go down.</p>\n<p><em>Actual behavior</em>: There is not a single second difference, which means I probably did something wrong!</p>\n<p><strong>My terraform setup:</strong></p>\n<p>The VPC, subnets and route tables:</p>\n<pre><code>module &quot;vpc&quot; {\n  source  = &quot;terraform-aws-modules/vpc/aws&quot;\n  version = &quot;~&gt; 2.21.0&quot;\n\n  name = &quot;dev-vpc&quot;\n  cidr = &quot;10.10.0.0/16&quot;\n\n  azs             = [&quot;eu-west-3a&quot;, &quot;eu-west-3b&quot;]\n  private_subnets = [&quot;10.10.0.0/20&quot;, &quot;10.10.32.0/20&quot;]\n  public_subnets  = [&quot;10.10.128.0/20&quot;, &quot;10.10.160.0/20&quot;]\n\n  enable_nat_gateway           = true\n  single_nat_gateway           = true\n  reuse_nat_ips                = false\n  enable_vpn_gateway           = false\n  enable_dns_hostnames         = true\n  create_database_subnet_group = true\n\n  enable_ipv6                                    = true\n  assign_ipv6_address_on_creation                = true\n  private_subnet_assign_ipv6_address_on_creation = false\n\n  public_subnet_ipv6_prefixes   = [0, 1]\n  private_subnet_ipv6_prefixes  = [2, 3]\n  database_subnet_ipv6_prefixes = [4, 5]\n\n  database_subnets = [&quot;10.10.64.0/20&quot;, &quot;10.10.80.0/20&quot;]\n\n  tags = {\n    ManagedByTerraform = &quot;true&quot;\n    EnvironmentType    = &quot;dev&quot;\n  }\n}\n</code></pre>\n<pre><code># the SG for the VPC endpoints\n\nresource &quot;aws_security_group&quot; &quot;vpce&quot; {\n  name   = &quot;dev-vpce-sg&quot;\n  vpc_id = module.vpc.vpc_id\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [module.vpc.vpc_cidr_block]\n  }\n  tags = {\n    Environment = &quot;dev&quot;\n  }\n}\n\n# all the VPC endpoints needed (from AWS documentation)\n\nresource &quot;aws_vpc_endpoint&quot; &quot;ecr_endpoint&quot; {\n  vpc_id              = module.vpc.vpc_id\n  private_dns_enabled = true\n  service_name        = &quot;com.amazonaws.eu-west-3.ecr.dkr&quot;\n  vpc_endpoint_type   = &quot;Interface&quot;\n  security_group_ids = [\n    aws_security_group.vpce.id,\n  ]\n  subnet_ids = module.vpc.private_subnets\n\n  tags = {\n    Name        = &quot;dkr-endpoint&quot;\n    Environment = &quot;dev&quot;\n  }\n}\n\nresource &quot;aws_vpc_endpoint&quot; &quot;ecr_api_endpoint&quot; {\n  vpc_id              = module.vpc.vpc_id\n  private_dns_enabled = true\n  service_name        = &quot;com.amazonaws.eu-west-3.ecr.api&quot;\n  vpc_endpoint_type   = &quot;Interface&quot;\n  security_group_ids = [\n    aws_security_group.vpce.id,\n  ]\n  subnet_ids = module.vpc.private_subnets\n\n  tags = {\n    Name        = &quot;ecr-api-endpoint&quot;\n    Environment = &quot;dev&quot;\n  }\n}\n\nresource &quot;aws_vpc_endpoint&quot; &quot;s3&quot; {\n  vpc_id            = module.vpc.vpc_id\n  service_name      = &quot;com.amazonaws.eu-west-3.s3&quot;\n  vpc_endpoint_type = &quot;Gateway&quot;\n  route_table_ids   = module.vpc.private_route_table_ids\n  policy            = &lt;&lt;-EOF\n  {\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Sid&quot;: &quot;&quot;,\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Principal&quot;: &quot;*&quot;,\n            &quot;Action&quot;: [\n                &quot;s3:PutObjectAcl&quot;,\n                &quot;s3:PutObject&quot;,\n                &quot;s3:ListBucket&quot;,\n                &quot;s3:GetObject&quot;,\n                &quot;s3:Delete*&quot;\n            ],\n            &quot;Resource&quot;: [\n                &quot;arn:aws:s3:::prod-eu-west-3-starport-layer-bucket&quot;,\n                &quot;arn:aws:s3:::prod-eu-west-3-starport-layer-bucket/*&quot;\n            ]\n        }\n    ]\n  }\n  EOF\n\n  tags = {\n    Name        = &quot;s3-endpoint&quot;\n    Environment = &quot;dev&quot;\n  }\n}\n\nresource &quot;aws_vpc_endpoint&quot; &quot;logs&quot; {\n  vpc_id              = module.vpc.vpc_id\n  private_dns_enabled = true\n  service_name        = &quot;com.amazonaws.eu-west-3.logs&quot;\n  vpc_endpoint_type   = &quot;Interface&quot;\n  security_group_ids = [\n    aws_security_group.vpce.id,\n  ]\n  subnet_ids = module.vpc.private_subnets\n\n  tags = {\n    Name        = &quot;logs-endpoint&quot;\n    Environment = &quot;dev&quot;\n  }\n}\n\nresource &quot;aws_vpc_endpoint&quot; &quot;ecs_agent&quot; {\n  vpc_id              = module.vpc.vpc_id\n  private_dns_enabled = true\n  service_name        = &quot;com.amazonaws.eu-west-3.ecs-agent&quot;\n  vpc_endpoint_type   = &quot;Interface&quot;\n  security_group_ids = [\n    aws_security_group.vpce.id,\n  ]\n  subnet_ids = module.vpc.private_subnets\n\n  tags = {\n    Name        = &quot;ecs-agent&quot;\n    Environment = &quot;dev&quot;\n  }\n}\n\nresource &quot;aws_vpc_endpoint&quot; &quot;ecs_telemetry&quot; {\n  vpc_id              = module.vpc.vpc_id\n  private_dns_enabled = true\n  service_name        = &quot;com.amazonaws.eu-west-3.ecs-telemetry&quot;\n  vpc_endpoint_type   = &quot;Interface&quot;\n  security_group_ids = [\n    aws_security_group.vpce.id,\n  ]\n  subnet_ids = module.vpc.private_subnets\n\n  tags = {\n    Name        = &quot;telemetry&quot;\n    Environment = &quot;dev&quot;\n  }\n}\n\nresource &quot;aws_vpc_endpoint&quot; &quot;ecs_endpoint&quot; {\n  vpc_id              = module.vpc.vpc_id\n  private_dns_enabled = true\n  service_name        = &quot;com.amazonaws.eu-west-3.ecs&quot;\n  vpc_endpoint_type   = &quot;Interface&quot;\n  security_group_ids = [\n    aws_security_group.vpce.id,\n  ]\n  subnet_ids = module.vpc.private_subnets\n\n  tags = {\n    Name        = &quot;ecs-endpoint&quot;\n    Environment = &quot;dev&quot;\n  }\n}\n</code></pre>\n<p>Can you let me know what can be wrong in my setup?</p>\n<p>I have zero knowledge in network engineering, so please let me know if you need further information.</p>\n", "OwnerUserId": "11226214", "LastActivityDate": "2022-05-03T18:32:17.627", "Title": "ECR VPC endpoint for fargate not working as expected", "Tags": "<amazon-web-services><amazon-s3><terraform>", "AnswerCount": "0", "CommentCount": "6", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "127401731", "PostId": "72103920", "Score": "1", "Text": "Why did you expect the VPC Endpoint to make the task start faster? The VPC endpoint is for providing network isolation. The traffic is still almost certainly going over the same network hardware in some AWS data center either way, so I would expect ECS to download images from ECR at whatever the max speed Amazon allows that to happen in either scenario.", "CreationDate": "2022-05-03T18:59:20.430", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127403950", "PostId": "72103920", "Score": "0", "Text": "I guess avoiding sending the traffic to the whole internet make the docker pull at least a bit faster, no?\nIf I am wrong, is there a way to check if my setup is working as expected ?", "CreationDate": "2022-05-03T20:58:19.027", "UserId": "11226214", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127403983", "PostId": "72103920", "Score": "0", "Text": "Btw, do you think my setup is correct?", "CreationDate": "2022-05-03T21:00:17.743", "UserId": "11226214", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127404270", "PostId": "72103920", "Score": "0", "Text": "It's not really sending your traffic \"to the whole internet\" it's just going out to an edge router in the same AWS data center. You aren't going to see a speed difference from that.   Your setup looks correct. You would have to do some `nslookup` or something from inside the subnet to verify the ECR endpoint is resolving to a VPC address.", "CreationDate": "2022-05-03T21:17:19.033", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "127404313", "PostId": "72103920", "Score": "0", "Text": "but I should at least expect to reduce the fees related to data transfer through the NAT gateway right ? thanks for your answers", "CreationDate": "2022-05-03T21:19:56.440", "UserId": "11226214", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "but I should at least expect to reduce the fees related to data transfer through the NAT gateway right ? thanks for your answers", "keywords": ["nat"]}]}, {"Id": "127404383", "PostId": "72103920", "Score": "0", "Text": "The data transfer cost on the endpoint is lower than the data transfer cost on a NAT Gateway, but you also have an hourly fee, per AZ, on the endpoint: https://aws.amazon.com/privatelink/pricing/ You would have to do the math based on your expected data transfer of ECR images to determine if that would going to save you any money.", "CreationDate": "2022-05-03T21:24:15.927", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The data transfer cost on the endpoint is lower than the data transfer cost on a NAT Gateway, but you also have an hourly fee, per AZ, on the endpoint: https://aws.amazon.com/privatelink/pricing/ ", "keywords": ["cost", "nat"]}]}], "history": [{"Id": "269412076", "PostHistoryTypeId": "2", "PostId": "72103920", "RevisionGUID": "95f120e9-3a49-4a45-a652-6a715b3eeaec", "CreationDate": "2022-05-03T18:32:17.627", "UserId": "11226214", "Text": "I am using Fargate for a task that runs every hour. As the docker image size is 1.5go, I want to use a ECR VPC endpoint to optimize the AWS data transfer fee. \r\n\r\nThe fargate tasks run in a private subnet. The route table of one of the private subnet is the following (where eigw is eigress only internet gateway and nat-01 is a nat gateway in the public subnet):\r\n\r\n```\r\nDestination              Target\r\n10.50.0.0/16             local\r\n0.0.0.0/0                nat-01ec80c2754229321\r\n2a05:d012:43e:de00::/56  local\r\n::/0                   eigw-0a0c583a8390d5736\r\n```\r\n\r\n*Expected behavior*: Right now, the Fargate task takes around 1 minute to start, due to the time it takes to docker pull the image. I expect that with the ECR VPC endpoint, the time it takes to start would go down.\r\n\r\n*Actual behavior*: There is not a single second difference, which means I probably did something wrong!\r\n\r\n**My terraform setup:**\r\n\r\nThe VPC, subnets and route tables:\r\n```terraform\r\nmodule \"vpc\" {\r\n  source  = \"terraform-aws-modules/vpc/aws\"\r\n  version = \"~> 2.21.0\"\r\n\r\n  name = \"dev-vpc\"\r\n  cidr = \"10.10.0.0/16\"\r\n\r\n  azs             = [\"eu-west-3a\", \"eu-west-3b\"]\r\n  private_subnets = [\"10.10.0.0/20\", \"10.10.32.0/20\"]\r\n  public_subnets  = [\"10.10.128.0/20\", \"10.10.160.0/20\"]\r\n\r\n  enable_nat_gateway           = true\r\n  single_nat_gateway           = true\r\n  reuse_nat_ips                = false\r\n  enable_vpn_gateway           = false\r\n  enable_dns_hostnames         = true\r\n  create_database_subnet_group = true\r\n\r\n  enable_ipv6                                    = true\r\n  assign_ipv6_address_on_creation                = true\r\n  private_subnet_assign_ipv6_address_on_creation = false\r\n\r\n  public_subnet_ipv6_prefixes   = [0, 1]\r\n  private_subnet_ipv6_prefixes  = [2, 3]\r\n  database_subnet_ipv6_prefixes = [4, 5]\r\n\r\n  database_subnets = [\"10.10.64.0/20\", \"10.10.80.0/20\"]\r\n\r\n  tags = {\r\n    ManagedByTerraform = \"true\"\r\n    EnvironmentType    = \"dev\"\r\n  }\r\n}\r\n```\r\n\r\n```terraform\r\n# the SG for the VPC endpoints\r\n\r\nresource \"aws_security_group\" \"vpce\" {\r\n  name   = \"dev-vpce-sg\"\r\n  vpc_id = module.vpc.vpc_id\r\n  ingress {\r\n    from_port   = 443\r\n    to_port     = 443\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [module.vpc.vpc_cidr_block]\r\n  }\r\n  tags = {\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n\r\n# all the VPC endpoints needed (from AWS documentation)\r\n\r\nresource \"aws_vpc_endpoint\" \"ecr_endpoint\" {\r\n  vpc_id              = module.vpc.vpc_id\r\n  private_dns_enabled = true\r\n  service_name        = \"com.amazonaws.eu-west-3.ecr.dkr\"\r\n  vpc_endpoint_type   = \"Interface\"\r\n  security_group_ids = [\r\n    aws_security_group.vpce.id,\r\n  ]\r\n  subnet_ids = module.vpc.private_subnets\r\n\r\n  tags = {\r\n    Name        = \"dkr-endpoint\"\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"ecr_api_endpoint\" {\r\n  vpc_id              = module.vpc.vpc_id\r\n  private_dns_enabled = true\r\n  service_name        = \"com.amazonaws.eu-west-3.ecr.api\"\r\n  vpc_endpoint_type   = \"Interface\"\r\n  security_group_ids = [\r\n    aws_security_group.vpce.id,\r\n  ]\r\n  subnet_ids = module.vpc.private_subnets\r\n\r\n  tags = {\r\n    Name        = \"ecr-api-endpoint\"\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"s3\" {\r\n  vpc_id            = module.vpc.vpc_id\r\n  service_name      = \"com.amazonaws.eu-west-3.s3\"\r\n  vpc_endpoint_type = \"Gateway\"\r\n  route_table_ids   = module.vpc.private_route_table_ids\r\n  policy            = <<-EOF\r\n  {\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n        {\r\n            \"Sid\": \"\",\r\n            \"Effect\": \"Allow\",\r\n            \"Principal\": \"*\",\r\n            \"Action\": [\r\n                \"s3:PutObjectAcl\",\r\n                \"s3:PutObject\",\r\n                \"s3:ListBucket\",\r\n                \"s3:GetObject\",\r\n                \"s3:Delete*\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:s3:::prod-eu-west-3-starport-layer-bucket\",\r\n                \"arn:aws:s3:::prod-eu-west-3-starport-layer-bucket/*\"\r\n            ]\r\n        }\r\n    ]\r\n  }\r\n  EOF\r\n\r\n  tags = {\r\n    Name        = \"s3-endpoint\"\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"logs\" {\r\n  vpc_id              = module.vpc.vpc_id\r\n  private_dns_enabled = true\r\n  service_name        = \"com.amazonaws.eu-west-3.logs\"\r\n  vpc_endpoint_type   = \"Interface\"\r\n  security_group_ids = [\r\n    aws_security_group.vpce.id,\r\n  ]\r\n  subnet_ids = module.vpc.private_subnets\r\n\r\n  tags = {\r\n    Name        = \"logs-endpoint\"\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"ecs_agent\" {\r\n  vpc_id              = module.vpc.vpc_id\r\n  private_dns_enabled = true\r\n  service_name        = \"com.amazonaws.eu-west-3.ecs-agent\"\r\n  vpc_endpoint_type   = \"Interface\"\r\n  security_group_ids = [\r\n    aws_security_group.vpce.id,\r\n  ]\r\n  subnet_ids = module.vpc.private_subnets\r\n\r\n  tags = {\r\n    Name        = \"ecs-agent\"\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"ecs_telemetry\" {\r\n  vpc_id              = module.vpc.vpc_id\r\n  private_dns_enabled = true\r\n  service_name        = \"com.amazonaws.eu-west-3.ecs-telemetry\"\r\n  vpc_endpoint_type   = \"Interface\"\r\n  security_group_ids = [\r\n    aws_security_group.vpce.id,\r\n  ]\r\n  subnet_ids = module.vpc.private_subnets\r\n\r\n  tags = {\r\n    Name        = \"telemetry\"\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"ecs_endpoint\" {\r\n  vpc_id              = module.vpc.vpc_id\r\n  private_dns_enabled = true\r\n  service_name        = \"com.amazonaws.eu-west-3.ecs\"\r\n  vpc_endpoint_type   = \"Interface\"\r\n  security_group_ids = [\r\n    aws_security_group.vpce.id,\r\n  ]\r\n  subnet_ids = module.vpc.private_subnets\r\n\r\n  tags = {\r\n    Name        = \"ecs-endpoint\"\r\n    Environment = \"dev\"\r\n  }\r\n}\r\n```\r\n\r\nCan you let me know what can be wrong in my setup?\r\n\r\nI have zero knowledge in network engineering, so please let me know if you need further information. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The route table of one of the private subnet is the following (where eigw is eigress only internet gateway and nat-01 is a nat gateway in the public subnet): ``` ", "keywords": ["nat"]}, {"source": "Text", "text": "Destination Target 10.50.0.0/16 local 0.0.0.0/0 nat-01ec80c2754229321 2a05:d012:43e:de00::/56 local ::/0 eigw-0a0c583a8390d5736 ``` ", "keywords": ["nat"]}, {"source": "Text", "text": "*Actual behavior*: There is not a single second difference, which means I probably did something wrong! **My terraform setup:** The VPC, subnets and route tables: ```terraform module \"vpc\" { source = \"terraform-aws-modules/vpc/aws\" version = \"~> 2.21.0\" name = \"dev-vpc\" cidr = \"10.10.0.0/16\" azs = [\"eu-west-3a\", \"eu-west-3b\"] private_subnets = [\"10.10.0.0/20\", \"10.10.32.0/20\"] public_subnets = [\"10.10.128.0/20\", \"10.10.160.0/20\"] enable_nat_gateway = true single_nat_gateway = true reuse_nat_ips = false enable_vpn_gateway = false enable_dns_hostnames = true create_database_subnet_group = true enable_ipv6 = true assign_ipv6_address_on_creation = true private_subnet_assign_ipv6_address_on_creation = false public_subnet_ipv6_prefixes = [0, 1] private_subnet_ipv6_prefixes = [2, 3] database_subnet_ipv6_prefixes = [4, 5] database_subnets = [\"10.10.64.0/20\", \"10.10.80.0/20\"] tags = { ManagedByTerraform = \"true\" EnvironmentType = \"dev\" } } ``` ```terraform # the SG for the VPC endpoints resource \"aws_security_group\" \"vpce\" { name = \"dev-vpce-sg\" vpc_id = module.vpc.vpc_id ingress { from_port = 443 to_port = 443 protocol = \"tcp\" cidr_blocks = [module.vpc.vpc_cidr_block] } tags = { Environment = \"dev\" } } # all the VPC endpoints needed (from AWS documentation) resource \"aws_vpc_endpoint\" \"ecr_endpoint\" { vpc_id = module.vpc.vpc_id private_dns_enabled = true service_name = \"com.amazonaws.eu-west-3.ecr.dkr\" vpc_endpoint_type = \"Interface\" security_group_ids = [ aws_security_group.vpce.id, ] subnet_ids = module.vpc.private_subnets tags = { Name = \"dkr-endpoint\" Environment = \"dev\" } } resource \"aws_vpc_endpoint\" \"ecr_api_endpoint\" { vpc_id = module.vpc.vpc_id private_dns_enabled = true service_name = \"com.amazonaws.eu-west-3.ecr.api\" vpc_endpoint_type = \"Interface\" security_group_ids = [ aws_security_group.vpce.id, ] subnet_ids = module.vpc.private_subnets tags = { Name = \"ecr-api-endpoint\" Environment = \"dev\" } } resource \"aws_vpc_endpoint\" \"s3\" { vpc_id = module.vpc.vpc_id service_name = \"com.amazonaws.eu-west-3.s3\" vpc_endpoint_type = \"Gateway\" route_table_ids = module.vpc.private_route_table_ids policy = <<-EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": [ \"s3:PutObjectAcl\", \"s3:PutObject\", \"s3:ListBucket\", \"s3:GetObject\", \"s3:Delete*\" ], \"Resource\": [ \"arn:aws:s3:::prod-eu-west-3-starport-layer-bucket\", \"arn:aws:s3:::prod-eu-west-3-starport-layer-bucket/*\" ] } ] } EOF tags = { Name = \"s3-endpoint\" Environment = \"dev\" } } resource \"aws_vpc_endpoint\" \"logs\" { vpc_id = module.vpc.vpc_id private_dns_enabled = true service_name = \"com.amazonaws.eu-west-3.logs\" vpc_endpoint_type = \"Interface\" security_group_ids = [ aws_security_group.vpce.id, ] subnet_ids = module.vpc.private_subnets tags = { Name = \"logs-endpoint\" Environment = \"dev\" } } resource \"aws_vpc_endpoint\" \"ecs_agent\" { vpc_id = module.vpc.vpc_id private_dns_enabled = true service_name = \"com.amazonaws.eu-west-3.ecs-agent\" vpc_endpoint_type = \"Interface\" security_group_ids = [ aws_security_group.vpce.id, ] subnet_ids = module.vpc.private_subnets tags = { Name = \"ecs-agent\" Environment = \"dev\" } } resource \"aws_vpc_endpoint\" \"ecs_telemetry\" { vpc_id = module.vpc.vpc_id private_dns_enabled = true service_name = \"com.amazonaws.eu-west-3.ecs-telemetry\" vpc_endpoint_type = \"Interface\" security_group_ids = [ aws_security_group.vpce.id, ] subnet_ids = module.vpc.private_subnets tags = { Name = \"telemetry\" Environment = \"dev\" } } resource \"aws_vpc_endpoint\" \"ecs_endpoint\" { vpc_id = module.vpc.vpc_id private_dns_enabled = true service_name = \"com.amazonaws.eu-west-3.ecs\" vpc_endpoint_type = \"Interface\" security_group_ids = [ aws_security_group.vpce.id, ] subnet_ids = module.vpc.private_subnets tags = { Name = \"ecs-endpoint\" Environment = \"dev\" ", "keywords": ["policy"]}]}, {"Id": "269412078", "PostHistoryTypeId": "1", "PostId": "72103920", "RevisionGUID": "95f120e9-3a49-4a45-a652-6a715b3eeaec", "CreationDate": "2022-05-03T18:32:17.627", "UserId": "11226214", "Text": "ECR VPC endpoint for fargate not working as expected", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "269412079", "PostHistoryTypeId": "3", "PostId": "72103920", "RevisionGUID": "95f120e9-3a49-4a45-a652-6a715b3eeaec", "CreationDate": "2022-05-03T18:32:17.627", "UserId": "11226214", "Text": "<amazon-web-services><amazon-s3><terraform>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "The route table of one of the private subnet is the following (where eigw is eigress only internet gateway and nat-01 is a nat gateway in the public subnet): ", "keywords": ["nat"]}]}