{"Id": "76946147", "PostTypeId": "1", "CreationDate": "2023-08-21T14:15:48.193", "Score": "0", "ViewCount": "81", "Body": "<p>I have inherited a AWS terraform setup where instances have been created with a count conditional, each instance has multiple ENIs, also created with a count conditional. Instances and ENIs are split across two AZs.</p>\n<p>Currently, we have security group ingress rules attached to all ENIs, but we are coming up against the 1000 SGR per ENI hard limit.</p>\n<p>There are hundreds of rules that I know are specific to only one AZ, and I want to take these rules out of my main .tf for these instances and apply them to the ENIs in the AZ where they belong.</p>\n<p>I have tried using the aws_network_interface_sg_attachment resource block, with a for_each meta argument, and a count conditional, like the ones below, but in each case once it's applied, on the next apply terraform tries to delete all of the attachments.</p>\n<pre><code>count\n\n resource &quot;aws_network_interface_sg_attachment&quot; &quot;ad-aza-1&quot; {\n  count = 4\n\n  security_group_id    = aws_security_group.SG-NAME-01.id\n  network_interface_id = element([&quot;eni-xxxx&quot;, &quot;eni-xxxx&quot;, &quot;eni-xxxx&quot;, &quot;eni-xxxx&quot;], count.index)\n}\n</code></pre>\n<p>for_each</p>\n<pre><code>variable &quot;eni_sg_map&quot; {\n  type = map(list(string))\n  default = {\n    &quot;eni-xxxx&quot; = [\n      &quot;sg-xxxx&quot;,\n      &quot;sg-xxxx&quot;,\n      &quot;sg-xxxx&quot;,\n    ]\n    &quot;eni-xxxx&quot; = [\n      &quot;sg-xxxx&quot;,\n      &quot;sg-xxxx&quot;,\n      &quot;sg-xxxx&quot;,\n    ]\n  }\n}\n\nresource &quot;aws_network_interface_sg_attachment&quot; &quot;ad-aza-1&quot; {\n  for_each = var.eni_sg_map\n\n  security_group_id    = each.value[0] \n  network_interface_id = each.key\n}\n\nresource &quot;aws_network_interface_sg_attachment&quot; &quot;ad-aza-2&quot; {\n  for_each = var.eni_sg_map\n\n  security_group_id    = each.value[1]  \n  network_interface_id = each.key\n}\n\nresource &quot;aws_network_interface_sg_attachment&quot; &quot;ad-aza-3&quot; {\n  for_each = var.eni_sg_map\n\n  security_group_id    = each.value[2] \n  network_interface_id = each.key\n}\n\n</code></pre>\n<p>I have 6 ENIs and 12 SGs in each AZ to attach, and I don't really want to create 144 hardcoded SG attachments, what is the most efficient way of doing this?</p>\n", "OwnerUserId": "10043082", "LastActivityDate": "2023-08-22T12:33:06.577", "Title": "How to efficiently create security group attachments in AWS in Terraform", "Tags": "<terraform><terraform-provider-aws>", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "296916819", "PostHistoryTypeId": "2", "PostId": "76946147", "RevisionGUID": "5cfe51d0-4bc8-404a-bd95-934f82834116", "CreationDate": "2023-08-21T14:15:48.193", "UserId": "10043082", "Text": "I have inherited a AWS terraform setup where instances have been created with a count conditional, each instance has multiple ENIs, also created with a count conditional. Instances and ENIs are split across two AZs. \r\n\r\nCurrently, we have security group ingress rules attached to all ENIs, but we are coming up against the 1000 SGR per ENI hard limit. \r\n\r\nThere are hundreds of rules that I know are specific to only one AZ, and I want to take these rules out of my main .tf for these instances and apply them to the ENIs in the AZ where they belong. \r\n\r\n \r\n\r\nI have tried using the aws_network_interface_sg_attachment resource block, with a for_each meta argument, and a count conditional, like the ones below, but in each case once it's applied, on the next apply terraform tries to delete all of the attachments. \r\n\r\n```\r\ncount\r\n\r\n resource \"aws_network_interface_sg_attachment\" \"ad-aza-1\" {\r\n  count = 4\r\n\r\n  security_group_id    = aws_security_group.SG-NAME-01.id\r\n  network_interface_id = element([\"eni-xxxx\", \"eni-xxxx\", \"eni-xxxx\", \"eni-xxxx\"], count.index)\r\n}\r\n```\r\n\r\nfor_each\r\n\r\n```\r\nvariable \"eni_sg_map\" {\r\n  type = map(list(string))\r\n  default = {\r\n    \"eni-xxxx\" = [\r\n      \"sg-xxxx\",\r\n      \"sg-xxxx\",\r\n      \"sg-xxxx\",\r\n    ]\r\n    \"eni-xxxx\" = [\r\n      \"sg-xxxx\",\r\n      \"sg-xxxx\",\r\n      \"sg-xxxx\",\r\n    ]\r\n  }\r\n}\r\n\r\nresource \"aws_network_interface_sg_attachment\" \"ad-aza-1\" {\r\n  for_each = var.eni_sg_map\r\n\r\n  security_group_id    = each.value[0] \r\n  network_interface_id = each.key\r\n}\r\n\r\nresource \"aws_network_interface_sg_attachment\" \"ad-aza-2\" {\r\n  for_each = var.eni_sg_map\r\n\r\n  security_group_id    = each.value[1]  \r\n  network_interface_id = each.key\r\n}\r\n\r\nresource \"aws_network_interface_sg_attachment\" \"ad-aza-3\" {\r\n  for_each = var.eni_sg_map\r\n\r\n  security_group_id    = each.value[2] \r\n  network_interface_id = each.key\r\n}\r\n\r\n```\r\nI have 6 ENIs and 12 SGs in each AZ to attach, and I don't really want to create 144 hardcoded SG attachments, what is the most efficient way of doing this?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have inherited a AWS terraform setup where instances have been created with a count conditional, each instance has multiple ENIs, also created with a count conditional. ", "keywords": ["instance"]}, {"source": "Text", "text": "I have 6 ENIs and 12 SGs in each AZ to attach, and I don't really want to create 144 hardcoded SG attachments, what is the most efficient way of doing this", "keywords": ["efficient"]}]}, {"Id": "296916821", "PostHistoryTypeId": "1", "PostId": "76946147", "RevisionGUID": "5cfe51d0-4bc8-404a-bd95-934f82834116", "CreationDate": "2023-08-21T14:15:48.193", "UserId": "10043082", "Text": "How to efficiently create security group attachments in AWS in Terraform", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "296916822", "PostHistoryTypeId": "3", "PostId": "76946147", "RevisionGUID": "5cfe51d0-4bc8-404a-bd95-934f82834116", "CreationDate": "2023-08-21T14:15:48.193", "UserId": "10043082", "Text": "<terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "296916823", "PostHistoryTypeId": "66", "PostId": "76946147", "RevisionGUID": "5cfe51d0-4bc8-404a-bd95-934f82834116", "CreationDate": "2023-08-21T14:15:48.193", "UserId": "10043082", "filtered-sentences": []}], "answers": [{"Id": "76953363", "PostTypeId": "2", "ParentId": "76946147", "CreationDate": "2023-08-22T12:33:06.577", "Score": "0", "Body": "<p><em>security_group_id</em> in <em>aws_network_interface_sg_attachment</em> resource doesn't accept a list of security group ids, so we have to create attachment individually for each security group. The terraform code bellow is one way to automate this process:</p>\n<pre><code>locals {\n  eni_to_sg_map = distinct(flatten([\n     for eni,sgs in var.eni_sg_map : [\n       for sg in sgs: {\n         eni = eni\n         sg = sg\n      }]]\n  ))\n}\n\n\nresource &quot;aws_network_interface_sg_attachment&quot; &quot;ad-aza-1&quot; {\n  for_each = { for eni in local.eni_to_sg_map: &quot;${eni.eni}.${eni.sg}&quot; =&gt; eni }\n  security_group_id    = each.value.sg\n  network_interface_id = each.value.eni\n}\n</code></pre>\n", "OwnerUserId": "4934694", "LastActivityDate": "2023-08-22T12:33:06.577", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "296958468", "PostHistoryTypeId": "2", "PostId": "76953363", "RevisionGUID": "aea4c7a6-a189-4602-9ef3-fe697e450e22", "CreationDate": "2023-08-22T12:33:06.577", "UserId": "4934694", "Text": "*security_group_id* in *aws_network_interface_sg_attachment* resource doesn't accept a list of security group ids, so we have to create attachment individually for each security group. The terraform code bellow is one way to automate this process:\r\n\r\n    locals {\r\n      eni_to_sg_map = distinct(flatten([\r\n         for eni,sgs in var.eni_sg_map : [\r\n           for sg in sgs: {\r\n             eni = eni\r\n             sg = sg\r\n          }]]\r\n      ))\r\n    }\r\n\r\n\r\n    resource \"aws_network_interface_sg_attachment\" \"ad-aza-1\" {\r\n      for_each = { for eni in local.eni_to_sg_map: \"${eni.eni}.${eni.sg}\" => eni }\r\n      security_group_id    = each.value.sg\r\n      network_interface_id = each.value.eni\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have inherited a AWS terraform setup where instances have been created with a count conditional, each instance has multiple ENIs, also created with a count conditional. ", "keywords": ["instance"]}, {"source": "Body", "text": "for_each I have 6 ENIs and 12 SGs in each AZ to attach, and I don't really want to create 144 hardcoded SG attachments, what is the most efficient way of doing this?", "keywords": ["efficient"]}]}