{"Id": "74184690", "PostTypeId": "1", "CreationDate": "2022-10-24T17:24:13.557", "Score": "-3", "ViewCount": "794", "Body": "<p><strong>My error</strong>\n<a href=\"https://i.stack.imgur.com/fp6BT.png\" rel=\"nofollow noreferrer\">enter image description here</a></p>\n<p>Invalid value for &quot;path&quot; parameter: no file exists at &quot;cis-userdata.sh&quot;; this function works only with files that are distributed as part of the configuration source code, so if this file will be created by a resource in this configuration you must instead obtain this result from an attribute of that resource.</p>\n<p>My files:\n<a href=\"https://i.stack.imgur.com/z3MBj.png\" rel=\"nofollow noreferrer\">enter image description here</a>\nMy code:</p>\n<p>EC2.tf</p>\n<pre><code>    # ------------------------------------------------------------------------------------------------------------\n    # ------------------------------- EC2 Module with Latest Ubuntu AMI ------------------------------------------\n    # ------------------------------ No Network Interfaces. Imports Only -----------------------------------------\n    # ------------------------------------------------------------------------------------------------------------\n\n    resource &quot;aws_instance&quot; &quot;ec2&quot; {\n      ami                     = data.aws_ami.ubuntu.id\n      instance_type           = var.instance_type\n      iam_instance_profile    = var.iam_instance_profile\n      monitoring              = var.monitoring\n      disable_api_termination = var.disable_api_termination\n      ebs_optimized           = true\n      key_name                = var.key_name\n      vpc_security_group_ids  = var.security_groups\n      subnet_id               = var.subnet_id\n      user_data = templatefile(var.template, {\n        HOSTNAME      = var.name,\n        linuxPlatform = &quot;&quot;,\n        isRPM         = &quot;&quot;,\n      })\n\n      metadata_options {\n        http_endpoint               = &quot;enabled&quot;\n        http_tokens                 = &quot;required&quot;\n        http_put_response_hop_limit = 1\n      }\n\n      tags = {\n        Creator             = var.creator\n        &quot;Cost Center&quot;       = var.cost_center\n        Stack               = var.stack\n        Name                = var.name\n        ControlledByAnsible = var.controlled_by_ansible\n        ConfigAnsible       = var.configansible\n      }\n\n      root_block_device {\n        delete_on_termination = true\n        encrypted             = true\n        kms_key_id            = var.kms_key_arn # Arn instead of id to avoid forced replacement.\n        volume_size           = 16\n        tags = {\n          Creator       = var.creator\n          &quot;Cost Center&quot; = var.cost_center\n          Stack         = var.stack\n          Name          = var.name\n        }\n      }\n\n      lifecycle {\n        ignore_changes = [\n          ami,\n          user_data,\n          root_block_device,\n        ]\n      }\n    }\n\n    data &quot;aws_ami&quot; &quot;ubuntu&quot; {\n      most_recent = true\n\n      filter {\n        name   = &quot;name&quot;\n        values = [&quot;ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*&quot;]\n      }\n\n      filter {\n        name   = &quot;virtualization-type&quot;\n        values = [&quot;hvm&quot;]\n      }\n\n      owners = [&quot;xxxx&quot;] # Canonical\n    }\n</code></pre>\n<p>variables.tf</p>\n<pre><code>      variable &quot;name&quot; {\n        default = &quot;xxx-prod&quot;\n      }\n\n      variable &quot;instance_type&quot; {\n        default = &quot;m5.large&quot;\n      }\n\n      variable &quot;public_ip&quot; {\n        default = false\n      }\n\n      variable &quot;instance_id&quot; {\n        default = &quot;&quot;\n      }\n\n      variable &quot;stateManager&quot; {\n        default = &quot;&quot;\n      }\n\n      variable &quot;iam_instance_profile&quot; {\n        default = &quot;infra-&quot; # Required for systems manager\n      }\n\n      variable &quot;security_groups&quot; {\n        default = [&quot;sg-xxxx&quot;] # \n      }\n\n      variable &quot;subnet_id&quot; {\n        default = &quot;subnet-xxxx&quot; \n      }\n\n      variable &quot;availability_zone&quot; {\n        default = &quot;us-east-1a&quot;\n      }\n\n      variable &quot;disable_api_termination&quot; {\n        default = &quot;true&quot;\n      }\n\n      variable &quot;kms_key_arn&quot; {\n        default = &quot;arn:aws:kms:us-east-1:xxxxx:key/xxxx&quot;\n      }\n\n      variable &quot;creator&quot; {\n        default = &quot;xxx@xxx.com&quot;\n      }\n\n      variable &quot;cost_center&quot; {\n        default = &quot;xxx&quot;\n      }\n\n      variable &quot;stack&quot; {\n        default = &quot;Production&quot;\n      }\n\n      variable &quot;controlled_by_ansible&quot; {\n        default = &quot;False&quot;\n      }\n\n      variable &quot;country&quot; {\n        default = &quot;&quot;\n      }\n\n      variable &quot;ec2_number&quot; {\n        default = &quot;01&quot;\n      }\n\n      variable &quot;monitoring&quot; {\n        default = true\n      }\n\n      variable &quot;device&quot; {\n        default = &quot;/dev/xvda&quot;\n      }\n\n      variable &quot;template&quot; {\n        default = (&quot;cis-userdata.sh&quot;)\n      }\n\n      variable &quot;key_name&quot; {\n        default = &quot;xxx&quot;\n      }\n\n      variable &quot;image_id&quot; {\n        default = &quot;ami-xxx&quot;\n      }\n\n      variable &quot;volume_size&quot; {\n        default = 16\n      }\n</code></pre>\n", "OwnerUserId": "18626150", "LastActivityDate": "2022-10-25T06:35:15.677", "Title": "Terraform EC2 Invalid value for \"path\" parameter: no file exists at \"userdataFile\"", "Tags": "<amazon-web-services><amazon-ec2><terraform><terraform-provider-aws><terraform-template-file>", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "130978633", "PostId": "74184690", "Score": "2", "Text": "http://idownvotedbecau.se/imageofanexception/", "CreationDate": "2022-10-24T17:42:52.653", "UserId": "13070", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "links": [{"Id": "2010019993", "CreationDate": "2022-10-25T06:35:15.677", "PostId": "74184690", "RelatedPostId": "62598410", "LinkTypeId": "1"}], "history": [{"Id": "280753009", "PostHistoryTypeId": "2", "PostId": "74184690", "RevisionGUID": "6ca9f25e-5eee-46a1-aa03-b09d7c08c5e1", "CreationDate": "2022-10-24T17:24:13.557", "UserId": "18626150", "Text": "**My error**\r\n[enter image description here][1]\r\n\r\nInvalid value for \"path\" parameter: no file exists at \"cis-userdata.sh\"; this function works only with files that are distributed as part of the configuration source code, so if this file will be created by a resource in this configuration you must instead obtain this result from an attribute of that resource.\r\n\r\nMy files:\r\n[enter image description here][2]\r\nMy code:\r\n\r\nEC2.tf\r\n\r\n        # ------------------------------------------------------------------------------------------------------------\r\n        # ------------------------------- EC2 Module with Latest Ubuntu AMI ------------------------------------------\r\n        # ------------------------------ No Network Interfaces. Imports Only -----------------------------------------\r\n        # ------------------------------------------------------------------------------------------------------------\r\n\r\n        resource \"aws_instance\" \"ec2\" {\r\n          ami                     = data.aws_ami.ubuntu.id\r\n          instance_type           = var.instance_type\r\n          iam_instance_profile    = var.iam_instance_profile\r\n          monitoring              = var.monitoring\r\n          disable_api_termination = var.disable_api_termination\r\n          ebs_optimized           = true\r\n          key_name                = var.key_name\r\n          vpc_security_group_ids  = var.security_groups\r\n          subnet_id               = var.subnet_id\r\n          user_data = templatefile(var.template, {\r\n            HOSTNAME      = var.name,\r\n            linuxPlatform = \"\",\r\n            isRPM         = \"\",\r\n          })\r\n\r\n          metadata_options {\r\n            http_endpoint               = \"enabled\"\r\n            http_tokens                 = \"required\"\r\n            http_put_response_hop_limit = 1\r\n          }\r\n\r\n          tags = {\r\n            Creator             = var.creator\r\n            \"Cost Center\"       = var.cost_center\r\n            Stack               = var.stack\r\n            Name                = var.name\r\n            ControlledByAnsible = var.controlled_by_ansible\r\n            ConfigAnsible       = var.configansible\r\n          }\r\n\r\n          root_block_device {\r\n            delete_on_termination = true\r\n            encrypted             = true\r\n            kms_key_id            = var.kms_key_arn # Arn instead of id to avoid forced replacement.\r\n            volume_size           = 16\r\n            tags = {\r\n              Creator       = var.creator\r\n              \"Cost Center\" = var.cost_center\r\n              Stack         = var.stack\r\n              Name          = var.name\r\n            }\r\n          }\r\n\r\n          lifecycle {\r\n            ignore_changes = [\r\n              ami,\r\n              user_data,\r\n              root_block_device,\r\n            ]\r\n          }\r\n        }\r\n\r\n        data \"aws_ami\" \"ubuntu\" {\r\n          most_recent = true\r\n\r\n          filter {\r\n            name   = \"name\"\r\n            values = [\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"]\r\n          }\r\n\r\n          filter {\r\n            name   = \"virtualization-type\"\r\n            values = [\"hvm\"]\r\n          }\r\n\r\n          owners = [\"xxxx\"] # Canonical\r\n        }\r\n\r\nvariables.tf\r\n\r\n          variable \"name\" {\r\n            default = \"xxx-prod\"\r\n          }\r\n\r\n          variable \"instance_type\" {\r\n            default = \"m5.large\"\r\n          }\r\n\r\n          variable \"public_ip\" {\r\n            default = false\r\n          }\r\n\r\n          variable \"instance_id\" {\r\n            default = \"\"\r\n          }\r\n\r\n          variable \"stateManager\" {\r\n            default = \"\"\r\n          }\r\n\r\n          variable \"iam_instance_profile\" {\r\n            default = \"infra-\" # Required for systems manager\r\n          }\r\n\r\n          variable \"security_groups\" {\r\n            default = [\"sg-xxxx\"] # \r\n          }\r\n\r\n          variable \"subnet_id\" {\r\n            default = \"subnet-xxxx\" \r\n          }\r\n\r\n          variable \"availability_zone\" {\r\n            default = \"us-east-1a\"\r\n          }\r\n\r\n          variable \"disable_api_termination\" {\r\n            default = \"true\"\r\n          }\r\n\r\n          variable \"kms_key_arn\" {\r\n            default = \"arn:aws:kms:us-east-1:xxxxx:key/xxxx\"\r\n          }\r\n\r\n          variable \"creator\" {\r\n            default = \"xxx@xxx.com\"\r\n          }\r\n\r\n          variable \"cost_center\" {\r\n            default = \"xxx\"\r\n          }\r\n\r\n          variable \"stack\" {\r\n            default = \"Production\"\r\n          }\r\n\r\n          variable \"controlled_by_ansible\" {\r\n            default = \"False\"\r\n          }\r\n\r\n          variable \"country\" {\r\n            default = \"\"\r\n          }\r\n\r\n          variable \"ec2_number\" {\r\n            default = \"01\"\r\n          }\r\n\r\n          variable \"monitoring\" {\r\n            default = true\r\n          }\r\n\r\n          variable \"device\" {\r\n            default = \"/dev/xvda\"\r\n          }\r\n\r\n          variable \"template\" {\r\n            default = (\"cis-userdata.sh\")\r\n          }\r\n\r\n          variable \"key_name\" {\r\n            default = \"xxx\"\r\n          }\r\n\r\n          variable \"image_id\" {\r\n            default = \"ami-xxx\"\r\n          }\r\n\r\n          variable \"volume_size\" {\r\n            default = 16\r\n          }\r\n\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/fp6BT.png\r\n  [2]: https://i.stack.imgur.com/z3MBj.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "My files: [enter image description here][2] My code: EC2.tf # ------------------------------------------------------------------------------------------------------------ # ------------------------------- EC2 Module with Latest Ubuntu AMI ------------------------------------------ # ------------------------------ No Network Interfaces. Imports Only ----------------------------------------- # ------------------------------------------------------------------------------------------------------------ resource \"aws_instance\" \"ec2\" { ami = data.aws_ami.ubuntu.id instance_type = var.instance_type iam_instance_profile = var.iam_instance_profile monitoring = var.monitoring disable_api_termination = var.disable_api_termination ebs_optimized = true key_name = var.key_name vpc_security_group_ids = var.security_groups subnet_id = var.subnet_id user_data = templatefile(var.template, { HOSTNAME = var.name, linuxPlatform = \"\", isRPM = \"\", }) metadata_options { http_endpoint = \"enabled\" http_tokens = \"required\" http_put_response_hop_limit = 1 } tags = { Creator = var.creator \"Cost Center\" = var.cost_center Stack = var.stack Name = var.name ControlledByAnsible = var.controlled_by_ansible ConfigAnsible = var.configansible } root_block_device { delete_on_termination = true encrypted = true kms_key_id = var.kms_key_arn # Arn instead of id to avoid forced replacement. volume_size = 16 tags = { Creator = var.creator \"Cost Center\" = var.cost_center Stack = var.stack Name = var.name } } lifecycle { ignore_changes = [ ami, user_data, root_block_device, ] } } data \"aws_ami\" \"ubuntu\" { most_recent = true filter { name = \"name\" values = [\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"] } filter { name = \"virtualization-type\" values = [\"hvm\"] } owners = [\"xxxx\"] # Canonical } variables.tf variable \"name\" { default = \"xxx-prod\" } variable \"instance_type\" { default = \"m5.large\" } variable \"public_ip\" { default = false } variable \"instance_id\" { default = \"\" } variable \"stateManager\" { default = \"\" } variable \"iam_instance_profile\" { default = \"infra-\" # Required for systems manager } variable \"security_groups\" { default = [\"sg-xxxx\"] # } variable \"subnet_id\" { default = \"subnet-xxxx\" } variable \"availability_zone\" { default = \"us-east-1a\" } variable \"disable_api_termination\" { default = \"true\" } variable \"kms_key_arn\" { default = \"arn:aws:kms:us-east-1:xxxxx:key/xxxx\" } variable \"creator\" { default = \"xxx@xxx.com\" } variable \"cost_center\" { default = \"xxx\" } variable \"stack\" { default = \"Production\" } variable \"controlled_by_ansible\" { default = \"False\" } variable \"country\" { default = \"\" } variable \"ec2_number\" { default = \"01\" ", "keywords": ["cost"]}]}, {"Id": "280753011", "PostHistoryTypeId": "1", "PostId": "74184690", "RevisionGUID": "6ca9f25e-5eee-46a1-aa03-b09d7c08c5e1", "CreationDate": "2022-10-24T17:24:13.557", "UserId": "18626150", "Text": "Terraform EC2 Invalid value for \"path\" parameter: no file exists at \"userdataFile\"", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "280753012", "PostHistoryTypeId": "3", "PostId": "74184690", "RevisionGUID": "6ca9f25e-5eee-46a1-aa03-b09d7c08c5e1", "CreationDate": "2022-10-24T17:24:13.557", "UserId": "18626150", "Text": "<amazon-web-services><amazon-ec2><terraform><terraform-provider-aws><terraform-template-file>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "74189925", "PostTypeId": "2", "ParentId": "74184690", "CreationDate": "2022-10-25T06:35:15.677", "Score": "0", "Body": "<pre><code>resource &quot;aws_instance&quot; &quot;ec2&quot; {\n  ami                     = data.aws_ami.ubuntu.id\n  instance_type           = var.instance_type\n  iam_instance_profile    = var.iam_instance_profile\n  monitoring              = var.monitoring\n  disable_api_termination = var.disable_api_termination\n  ebs_optimized           = true\n  key_name                = var.key_name\n  vpc_security_group_ids  = var.security_groups\n  subnet_id               = var.subnet_id\n\n  user_data = templatefile(&quot;${path.module}/${var.template}&quot;, {\n    HOSTNAME      = var.name,\n    linuxPlatform = &quot;&quot;,\n    isRPM         = &quot;&quot;,\n  })\n\n  metadata_options {\n    http_endpoint               = &quot;enabled&quot;\n    http_tokens                 = &quot;required&quot;\n    http_put_response_hop_limit = 1\n  }\n\n  tags = {\n    Creator             = var.creator\n    &quot;Cost Center&quot;       = var.cost_center\n    Stack               = var.stack\n    Name                = var.name\n    ControlledByAnsible = var.controlled_by_ansible\n    ConfigAnsible       = var.configansible\n  }\n\n  root_block_device {\n    delete_on_termination = true\n    encrypted             = true\n    kms_key_id            = var.kms_key_arn # Arn instead of id to avoid forced replacement.\n    volume_size           = 16\n    tags = {\n      Creator       = var.creator\n      &quot;Cost Center&quot; = var.cost_center\n      Stack         = var.stack\n      Name          = var.name\n    }\n  }\n\n  lifecycle {\n    ignore_changes = [\n      ami,\n      user_data,\n      root_block_device,\n    ]\n  }\n}\n</code></pre>\n<p><strong>cis-userdata.sh</strong> would contain the user_data for setting up the AMI as follows.</p>\n<pre><code>#!/bin/bash\nsudo apt update\n\ncd /home/ubuntu\n\nsudo apt-get purge 'apache2*'\nsudo apt install -y apache2\nsudo ufw allow 'Apache Full'\nsudo systemctl enable apache2\nsudo systemctl start apache2\nsudo echo \u201cHello World from $(hostname -f)\u201d &gt; /var/www/html/index.html\n</code></pre>\n<p>For more, visit this answer <a href=\"https://stackoverflow.com/a/62599263/11145307\">https://stackoverflow.com/a/62599263/11145307</a></p>\n", "OwnerUserId": "11145307", "LastActivityDate": "2022-10-25T06:35:15.677", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "280781609", "PostHistoryTypeId": "2", "PostId": "74189925", "RevisionGUID": "fef1acfc-2284-408f-bba3-b55d693becdf", "CreationDate": "2022-10-25T06:35:15.677", "UserId": "11145307", "Text": "    resource \"aws_instance\" \"ec2\" {\r\n      ami                     = data.aws_ami.ubuntu.id\r\n      instance_type           = var.instance_type\r\n      iam_instance_profile    = var.iam_instance_profile\r\n      monitoring              = var.monitoring\r\n      disable_api_termination = var.disable_api_termination\r\n      ebs_optimized           = true\r\n      key_name                = var.key_name\r\n      vpc_security_group_ids  = var.security_groups\r\n      subnet_id               = var.subnet_id\r\n\r\n      user_data = templatefile(\"${path.module}/${var.template}\", {\r\n        HOSTNAME      = var.name,\r\n        linuxPlatform = \"\",\r\n        isRPM         = \"\",\r\n      })\r\n\r\n      metadata_options {\r\n        http_endpoint               = \"enabled\"\r\n        http_tokens                 = \"required\"\r\n        http_put_response_hop_limit = 1\r\n      }\r\n\r\n      tags = {\r\n        Creator             = var.creator\r\n        \"Cost Center\"       = var.cost_center\r\n        Stack               = var.stack\r\n        Name                = var.name\r\n        ControlledByAnsible = var.controlled_by_ansible\r\n        ConfigAnsible       = var.configansible\r\n      }\r\n\r\n      root_block_device {\r\n        delete_on_termination = true\r\n        encrypted             = true\r\n        kms_key_id            = var.kms_key_arn # Arn instead of id to avoid forced replacement.\r\n        volume_size           = 16\r\n        tags = {\r\n          Creator       = var.creator\r\n          \"Cost Center\" = var.cost_center\r\n          Stack         = var.stack\r\n          Name          = var.name\r\n        }\r\n      }\r\n\r\n      lifecycle {\r\n        ignore_changes = [\r\n          ami,\r\n          user_data,\r\n          root_block_device,\r\n        ]\r\n      }\r\n    }\r\n\r\n**cis-userdata.sh** would contain the user_data for setting up the AMI as follows.\r\n\r\n````\r\n#!/bin/bash\r\nsudo apt update\r\n\r\ncd /home/ubuntu\r\n\r\nsudo apt-get purge 'apache2*'\r\nsudo apt install -y apache2\r\nsudo ufw allow 'Apache Full'\r\nsudo systemctl enable apache2\r\nsudo systemctl start apache2\r\nsudo echo \u201cHello World from $(hostname -f)\u201d > /var/www/html/index.html\r\n````\r\n\r\nFor more, visit this answer https://stackoverflow.com/a/62599263/11145307", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "resource \"aws_instance\" \"ec2\" { ami = data.aws_ami.ubuntu.id instance_type = var.instance_type iam_instance_profile = var.iam_instance_profile monitoring = var.monitoring disable_api_termination = var.disable_api_termination ebs_optimized = true key_name = var.key_name vpc_security_group_ids = var.security_groups subnet_id = var.subnet_id user_data = templatefile(\"${path.module}/${var.template}\", { HOSTNAME = var.name, linuxPlatform = \"\", isRPM = \"\", }) metadata_options { http_endpoint = \"enabled\" http_tokens = \"required\" http_put_response_hop_limit = 1 } tags = { Creator = var.creator \"Cost Center\" = var.cost_center Stack = var.stack Name = var.name ControlledByAnsible = var.controlled_by_ansible ConfigAnsible = var.configansible } root_block_device { delete_on_termination = true encrypted = true kms_key_id = var.kms_key_arn # Arn instead of id to avoid forced replacement. volume_size = 16 tags = { Creator = var.creator \"Cost Center\" = var.cost_center Stack = var.stack Name = var.name } } lifecycle { ignore_changes = [ ami, user_data, root_block_device, ] } } **cis-userdata.sh** would contain the user_data for setting up the AMI as follows. ```` ", "keywords": ["cost"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}