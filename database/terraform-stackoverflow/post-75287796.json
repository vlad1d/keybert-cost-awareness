{"Id": "75287796", "PostTypeId": "1", "CreationDate": "2023-01-30T17:08:28.353", "Score": "1", "ViewCount": "154", "Body": "<p>I am trying to fix the well known issue with having multiple pipelines and colleagues are running terraform plan and getting the following error:</p>\n<pre><code>\u2502 Error: Error acquiring the state lock\n</code></pre>\n<p>I would like to know if there is any source of the possible ways to get rid of this issue so ci/cd and engineers can run plan without needing to wait for a long time until they are able to work.</p>\n<p>Even hashicorp is saying to be careful with force unlock there are risks for multiple writes:</p>\n<blockquote>\n<p>Be very careful with this command. If you unlock the state when\nsomeone else is holding the lock it could cause multiple writers.\nForce unlock should only be used to unlock your own lock in the\nsituation where automatic unlocking failed.</p>\n</blockquote>\n<p>Is there a way that we can write the file to the disk before performing the plan ?</p>\n", "OwnerUserId": "14626777", "LastActivityDate": "2023-01-30T18:07:41.043", "Title": "terraform locked state file s3 solution", "Tags": "<terraform><terraform-provider-aws>", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132853373", "PostId": "75287796", "Score": "0", "Text": "You could queue the pipeline executions such that each pipeline execution is gated by the previous execution. Alternatively, you could also implement a wait on acquiring the state lock within the pipeline.", "CreationDate": "2023-01-30T19:22:10.567", "UserId": "5343387", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "287118380", "PostHistoryTypeId": "2", "PostId": "75287796", "RevisionGUID": "6cca9aba-466e-4eb3-bc21-d673cc0a7927", "CreationDate": "2023-01-30T17:08:28.353", "UserId": "14626777", "Text": "I am trying to fix the well known issue with having multiple pipelines and colleagues are running terraform plan and getting the following error:\r\n\r\n\r\n    \u2502 Error: Error acquiring the state lock\r\n\r\nI would like to know if there is any source of the possible ways to get rid of this issue so ci/cd and engineers can run plan without needing to wait for a long time until they are able to work.\r\n\r\nEven hashicorp is saying to be careful with force unlock there are risks for multiple writes:\r\n\r\n> Be very careful with this command. If you unlock the state when\r\n> someone else is holding the lock it could cause multiple writers.\r\n> Force unlock should only be used to unlock your own lock in the\r\n> situation where automatic unlocking failed.\r\n\r\nIs there a way that we can write the file to the disk before performing the plan ?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "287118382", "PostHistoryTypeId": "1", "PostId": "75287796", "RevisionGUID": "6cca9aba-466e-4eb3-bc21-d673cc0a7927", "CreationDate": "2023-01-30T17:08:28.353", "UserId": "14626777", "Text": "terraform locked state file s3 solution", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "287118383", "PostHistoryTypeId": "3", "PostId": "75287796", "RevisionGUID": "6cca9aba-466e-4eb3-bc21-d673cc0a7927", "CreationDate": "2023-01-30T17:08:28.353", "UserId": "14626777", "Text": "<terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "75288440", "PostTypeId": "2", "ParentId": "75287796", "CreationDate": "2023-01-30T18:07:41.043", "Score": "1", "Body": "<p>The locking is there to protect you. You may run a plan <em>(or <a href=\"https://developer.hashicorp.com/terraform/cli/commands/apply#lock-false\" rel=\"nofollow noreferrer\">apply</a>)</em> with <a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan#lock-false\" rel=\"nofollow noreferrer\"><code>--lock=false</code></a>:</p>\n<pre><code>terraform plan --lock=false\n</code></pre>\n<p>But <strong>I wouldn't encourage that</strong> as you may lose the benefits of state locking, it's there to protect you from conflicting modifications made to your infrastructure.</p>\n<p>You would like to run a <code>terraform plan</code> against the most recent state which is usually written by the very last <code>apply</code> operation you run on your main/master branch.</p>\n<p>If the plan takes too long to apply or to run while your engineers are working on different sub-parts of the infrastructure, you would consider a possible refactoring where you break your infrastructure to multiple folders where you run a separate terraform plan/apply for each of them <a href=\"https://cloud.google.com/docs/terraform/best-practices-for-terraform#minimize-resources\" rel=\"nofollow noreferrer\">(src)</a>, of course this may come with cost of refactoring and moving resources from a state to another.</p>\n<p>One other approach is to disable the state refresh on PR pipelines by setting a <a href=\"https://developer.hashicorp.com/terraform/cli/commands/plan#refresh-false\" rel=\"nofollow noreferrer\"><code>--refresh=false</code></a> which is as well not making you take the full advantages of Terraform's state management with diffs and state locking.</p>\n<hr />\n<p>And of course, as a last resort for few exceptions where you have a locked state, you may consider running a manual <a href=\"https://developer.hashicorp.com/terraform/cli/commands/force-unlock\" rel=\"nofollow noreferrer\"><code>terraform force-unlock [options] LOCK_ID</code></a> in few exceptions (for example when a plan gets cancelled, or the runner drops connection so it doesn't release the state).</p>\n<p>Resources:</p>\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/language/state/locking\" rel=\"nofollow noreferrer\">https://developer.hashicorp.com/terraform/language/state/locking</a></li>\n<li><a href=\"https://cloud.google.com/docs/terraform/best-practices-for-terraform\" rel=\"nofollow noreferrer\">https://cloud.google.com/docs/terraform/best-practices-for-terraform</a></li>\n<li><a href=\"https://github.com/hashicorp/terraform/issues/28130#issuecomment-801422713\" rel=\"nofollow noreferrer\">https://github.com/hashicorp/terraform/issues/28130#issuecomment-801422713</a></li>\n</ul>\n", "OwnerUserId": "5078746", "LastActivityDate": "2023-01-30T18:07:41.043", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "132891057", "PostId": "75288440", "Score": "0", "Text": "Thanks a lot for the recommendations. I believe that the the refresh false option is the most suitable as we do not use plan in pipelines only in certain environments.\nAlso I found a nice description of the plan command that could explain why this option is kind of safe to use:\n`\nThe terraform plan command lets you to preview the actions Terraform would take to modify your infrastructure, or save a speculative plan which you can apply later. \n\n`The function of terraform plan is speculative: you cannot apply it unless you save its contents and pass them to a terraform apply command.`", "CreationDate": "2023-02-01T14:51:35.957", "UserId": "14626777", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "132892390", "PostId": "75288440", "Score": "0", "Text": "Nice! Hope that helped you", "CreationDate": "2023-02-01T15:50:25.003", "UserId": "5078746", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "287122010", "PostHistoryTypeId": "2", "PostId": "75288440", "RevisionGUID": "70bc3812-1661-4f8b-8a21-f01ebf79b9a9", "CreationDate": "2023-01-30T18:07:41.043", "UserId": "5078746", "Text": "The locking is there to protect you. You may run a plan *(or [apply][1])* with [`--lock=false`][2]:\r\n\r\n    terraform plan --lock=false\r\n\r\nBut **I wouldn't encourage that** as you may lose the benefits of state locking, it's there to protect you from conflicting modifications made to your infrastructure. \r\n\r\nYou would like to run a `terraform plan` against the most recent state which is usually written by the very last `apply` operation you run on your main/master branch.\r\n\r\nIf the plan takes too long to apply or to run while your engineers are working on different sub-parts of the infrastructure, you would consider a possible refactoring where you break your infrastructure to multiple folders where you run a separate terraform plan/apply for each of them [(src)][3], of course this may come with cost of refactoring and moving resources from a state to another.\r\n\r\nOne other approach is to disable the state refresh on PR pipelines by setting a [`--refresh=false`][4] which is as well not making you take the full advantages of Terraform's state management with diffs and state locking.\r\n\r\n---\r\n\r\nAnd of course, as a last resort for few exceptions where you have a locked state, you may consider running a manual [`terraform force-unlock [options] LOCK_ID`][5] in few exceptions (for example when a plan gets cancelled, or the runner drops connection so it doesn't release the state). \r\n\r\nResources:\r\n\r\n- https://developer.hashicorp.com/terraform/language/state/locking\r\n- https://cloud.google.com/docs/terraform/best-practices-for-terraform\r\n- https://github.com/hashicorp/terraform/issues/28130#issuecomment-801422713\r\n\r\n\r\n  [1]: https://developer.hashicorp.com/terraform/cli/commands/apply#lock-false\r\n  [2]: https://developer.hashicorp.com/terraform/cli/commands/plan#lock-false\r\n  [3]: https://cloud.google.com/docs/terraform/best-practices-for-terraform#minimize-resources\r\n  [4]: https://developer.hashicorp.com/terraform/cli/commands/plan#refresh-false\r\n  [5]: https://developer.hashicorp.com/terraform/cli/commands/force-unlock", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "If the plan takes too long to apply or to run while your engineers are working on different sub-parts of the infrastructure, you would consider a possible refactoring where you break your infrastructure to multiple folders where you run a separate terraform plan/apply for each of them [(src)][3], of course this may come with cost of refactoring and moving resources from a state to another. ", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "If the plan takes too long to apply or to run while your engineers are working on different sub-parts of the infrastructure, you would consider a possible refactoring where you break your infrastructure to multiple folders where you run a separate terraform plan/apply for each of them (src), of course this may come with cost of refactoring and moving resources from a state to another. ", "keywords": ["cost"]}]}], "contains-topic": true, "filtered-sentences": []}