{"Id": "76984136", "PostTypeId": "1", "CreationDate": "2023-08-26T17:39:21.990", "Score": "-1", "ViewCount": "21", "Body": "<p>I hope all of you and your families are okay. I'd like to ask for advice.</p>\n<p>I'm currently working in the process to start making Cloud Projects with IaC. We are trying to make terraform modules that accomplish several security policies that have forced us to avoid using public modules and public resources. So we need to create each AWS resource into a module which already implements the necessary security controls, for example into S3 element, we need to create the bucket with public access disabled, encrypted by SSE-S3, the versioning turned on and so on.</p>\n<p>We also have modules for principal elements on the accounts that we named \u201cLanding Zones\u201d, for example Networking, Security, Communication, etc. These landing zones are supposed to be implemented on the majority of accounts.</p>\n<p>All the projects have the necessity to be purged from all the infra deployed in a spontaneous moment or via scheduled work plan (only having infra on workdays at work hours) to save some money especially on pre prod environments.</p>\n<p>In order to that and taking the example of the next project:</p>\n<p>A project has a VPC composed of Subnets, RouteTables, Attachment transit gateway. Also in security we have several services such as CloudTrail, GuardDuty, AWS Config, and others. We have private endpoints and NAT Gateways. And for the application infra we\u2019re using ECS with fargates, and RDS for database and EFS for sharing content for the fargates.</p>\n<p>Which is the best practice to accomplish a good management of the infra. Taking into consideration that the fargates will be in constant change, growing in number, changing versions of the docker image etc.</p>\n<p>We have considered this to possible ways, Have two terraform projects, one for everything that needs to stay deployed on the account and all the other infra that can be purged any moment.</p>\n<pre><code>--------------Do not necessary to delete-------------------\n\u251c\u2500\u2500Landing Zone Networking\n\u2502   \u2514\u2500\u2500 main.tf // contains VPC, subnet, RT, attachment transit gateways\n--------------Do not necessary to delete-------------------\n\n\n--------------Prone to be removed-------------------\n\u251c\u2500\u2500HUGE_PROJECT\n\u2502   \u2514\u2500\u2500 main.tf\n\u2514\u2500\u2500 modules //REMOTE PRE VALIDATED MODULES\n    \u251c\u2500\u2500 Landing Zone Security\n    \u2502   \u251c\u2500\u2500 main.tf      // contains CloudTrail, GuardDuty, Config\n    \u2502   \u251c\u2500\u2500 outputs.tf\n    \u2502   \u2514\u2500\u2500 variables.tf\n    \u251c\u2500\u2500 Landing Zone Communications\n    \u2502   \u251c\u2500\u2500 main.tf      // contains NAT Gateways, Private Endpoints\n    \u2502   \u251c\u2500\u2500 outputs.tf\n    \u2502   \u2514\u2500\u2500 variables.tf\n    \u251c\u2500\u2500 Application\n    \u2502   \u251c\u2500\u2500 main.tf      // contains ECS cluster, ECS Service, ECS Task\n    \u2502   \u251c\u2500\u2500 outputs.tf\n    \u2502   \u2514\u2500\u2500 variables.tf\n    \u251c\u2500\u2500 Database\n    \u2502   \u251c\u2500\u2500 main.tf      // contains RDS and all the necessary components\n    \u2502   \u251c\u2500\u2500 outputs.tf\n    \u2502   \u2514\u2500\u2500 variables.tf\n    \u251c\u2500\u2500 Storage\n    \u2502   \u251c\u2500\u2500 main.tf      // EFS\n    \u2502   \u251c\u2500\u2500 outputs.tf\n    \u2502   \u2514\u2500\u2500 variables.tf\n   \n--------------Prone to be removed-------------------\n</code></pre>\n<p>In this approach we thing we can have only two states files and if we need to remove all the infra we will do it in a quick way. With this approach wi will win a operative facility, cause we can manage the inputs and outputs originated by the terraform modules in the easiest way. But the project can be complex.</p>\n<p>And this one:</p>\n<pre><code>\u251c\u2500\u2500Landing Zone Networking\n\u2502   \u2514\u2500\u2500 main.tf // contains VPC, subnet, RT, attachment transit gateways\n\u2502   \u251c\u2500\u2500 outputs.tf\n\u2502   \u2514\u2500\u2500 variables.tf\n\n\n\u251c\u2500\u2500 Landing Zone Security\n\u2502   \u251c\u2500\u2500 main.tf      // contains CloudTrail, GuardDuty, Config\n\u2502   \u251c\u2500\u2500 outputs.tf\n\u2502   \u2514\u2500\u2500 variables.tf\n\n\n\u251c\u2500\u2500 Landing Zone Communications\n\u2502   \u251c\u2500\u2500 main.tf      // contains NAT Gateways, Private Endpoints\n\u2502   \u251c\u2500\u2500 outputs.tf\n\u2502   \u2514\u2500\u2500 variables.tf\n\n\n\u251c\u2500\u2500 Application\n\u2502   \u251c\u2500\u2500 main.tf      // contains ECS cluster, ECS Service, ECS Task\n\u2502   \u251c\u2500\u2500 outputs.tf\n\u2502   \u2514\u2500\u2500 variables.tf\n\n\n\u251c\u2500\u2500 Database\n\u2502   \u251c\u2500\u2500 main.tf      // contains RDS and all the necessary components\n\u2502   \u251c\u2500\u2500 outputs.tf\n\u2502   \u2514\u2500\u2500 variables.tf\n\n\n\u251c\u2500\u2500 Storage\n\u2502   \u251c\u2500\u2500 main.tf      // EFS\n\u2502   \u251c\u2500\u2500 outputs.tf\n\u2502   \u2514\u2500\u2500 variables.tf\n   \n</code></pre>\n<p>We'll have several projects of terraform with several states and when we need to apply changes only affect the particular project as same as the state. With this we win facility on managing the projects \u2018cause they are fine-grained projects. But the dependencies in inputs will be satisfied via data sources on Terraform code.</p>\n<p>Sorry if this is too much text, but we want to start this terraform era with the right foot.</p>\n<p>How do you guys manage similar projects?\nWhich is the most secure and efficient way to manage these large projects?\nAre we doing something wrong?</p>\n<p>I\u2019ll be immensely grateful if some of you can text me some advice!</p>\n<p>Thanks for reading and greetings from Mexico City.</p>\n", "OwnerUserId": "8513351", "LastActivityDate": "2023-08-26T17:39:21.990", "Title": "How to manage huge terraform projects?", "Tags": "<amazon-web-services><terraform><terraform-provider-aws>", "AnswerCount": "0", "CommentCount": "4", "ClosedDate": "2023-08-26T18:31:30.360", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "135713378", "PostId": "76984136", "Score": "1", "Text": "Although this was closed for needs more focus. I think it would also be closed for \"opinion based\" as there is no right or wrong answer here. However your not the first person to go along this journey. Having driven terraform early adoption in my org to now driving a devops team that does all its infra with terragrunt and terratest I would still say there are no right or wrong answers. Instead I will post a collection of links that really helped me on this journey", "CreationDate": "2023-08-26T19:05:20.697", "UserId": "1212401", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "135713387", "PostId": "76984136", "Score": "0", "Text": "https://www.youtube.com/watch?v=wgzgVm7Sqlk - This vid is 6 years old but the core of it is still true and i expect most people can related to have been on these 5 steps in the past.", "CreationDate": "2023-08-26T19:05:54.100", "UserId": "1212401", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "135713396", "PostId": "76984136", "Score": "0", "Text": "https://terragrunt.gruntwork.io/ - terragrunt can really make your large scale deployments modular and managed in seperate files but still runnable through a single command etc. It allows you to make better reuse and templating of things like your backend block etc", "CreationDate": "2023-08-26T19:07:01.423", "UserId": "1212401", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "135713406", "PostId": "76984136", "Score": "0", "Text": "https://www.terraform-best-practices.com/examples/terraform - has some opinionated examples mostly from Anton Babenko who has been on the terraform scene and AWS scene for a while", "CreationDate": "2023-08-26T19:08:38.510", "UserId": "1212401", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "297144376", "PostHistoryTypeId": "2", "PostId": "76984136", "RevisionGUID": "938fcdc6-18f0-4813-a8cd-ae05ea6ab2c3", "CreationDate": "2023-08-26T17:39:21.990", "UserId": "8513351", "Text": "I hope all of you and your families are okay. I'd like to ask for advice. \r\n\r\nI'm currently working in the process to start making Cloud Projects with IaC. We are trying to make terraform modules that accomplish several security policies that have forced us to avoid using public modules and public resources. So we need to create each AWS resource into a module which already implements the necessary security controls, for example into S3 element, we need to create the bucket with public access disabled, encrypted by SSE-S3, the versioning turned on and so on.\r\n\r\nWe also have modules for principal elements on the accounts that we named \u201cLanding Zones\u201d, for example Networking, Security, Communication, etc. These landing zones are supposed to be implemented on the majority of accounts. \r\n\r\nAll the projects have the necessity to be purged from all the infra deployed in a spontaneous moment or via scheduled work plan (only having infra on workdays at work hours) to save some money especially on pre prod environments. \r\n\r\nIn order to that and taking the example of the next project:\r\n\r\nA project has a VPC composed of Subnets, RouteTables, Attachment transit gateway. Also in security we have several services such as CloudTrail, GuardDuty, AWS Config, and others. We have private endpoints and NAT Gateways. And for the application infra we\u2019re using ECS with fargates, and RDS for database and EFS for sharing content for the fargates. \r\n\r\nWhich is the best practice to accomplish a good management of the infra. Taking into consideration that the fargates will be in constant change, growing in number, changing versions of the docker image etc.\r\n\r\nWe have considered this to possible ways, Have two terraform projects, one for everything that needs to stay deployed on the account and all the other infra that can be purged any moment.\r\n\r\n    --------------Do not necessary to delete-------------------\r\n    \u251c\u2500\u2500Landing Zone Networking\r\n    \u2502   \u2514\u2500\u2500 main.tf // contains VPC, subnet, RT, attachment transit gateways\r\n    --------------Do not necessary to delete-------------------\r\n    \r\n    \r\n    --------------Prone to be removed-------------------\r\n    \u251c\u2500\u2500HUGE_PROJECT\r\n    \u2502   \u2514\u2500\u2500 main.tf\r\n    \u2514\u2500\u2500 modules //REMOTE PRE VALIDATED MODULES\r\n        \u251c\u2500\u2500 Landing Zone Security\r\n        \u2502   \u251c\u2500\u2500 main.tf      // contains CloudTrail, GuardDuty, Config\r\n        \u2502   \u251c\u2500\u2500 outputs.tf\r\n        \u2502   \u2514\u2500\u2500 variables.tf\r\n        \u251c\u2500\u2500 Landing Zone Communications\r\n        \u2502   \u251c\u2500\u2500 main.tf      // contains NAT Gateways, Private Endpoints\r\n        \u2502   \u251c\u2500\u2500 outputs.tf\r\n        \u2502   \u2514\u2500\u2500 variables.tf\r\n        \u251c\u2500\u2500 Application\r\n        \u2502   \u251c\u2500\u2500 main.tf      // contains ECS cluster, ECS Service, ECS Task\r\n        \u2502   \u251c\u2500\u2500 outputs.tf\r\n        \u2502   \u2514\u2500\u2500 variables.tf\r\n        \u251c\u2500\u2500 Database\r\n        \u2502   \u251c\u2500\u2500 main.tf      // contains RDS and all the necessary components\r\n        \u2502   \u251c\u2500\u2500 outputs.tf\r\n        \u2502   \u2514\u2500\u2500 variables.tf\r\n        \u251c\u2500\u2500 Storage\r\n        \u2502   \u251c\u2500\u2500 main.tf      // EFS\r\n        \u2502   \u251c\u2500\u2500 outputs.tf\r\n        \u2502   \u2514\u2500\u2500 variables.tf\r\n       \r\n    --------------Prone to be removed-------------------\r\n\r\nIn this approach we thing we can have only two states files and if we need to remove all the infra we will do it in a quick way. With this approach wi will win a operative facility, cause we can manage the inputs and outputs originated by the terraform modules in the easiest way. But the project can be complex.\r\n\r\n\r\nAnd this one:\r\n\r\n\r\n    \u251c\u2500\u2500Landing Zone Networking\r\n    \u2502   \u2514\u2500\u2500 main.tf // contains VPC, subnet, RT, attachment transit gateways\r\n    \u2502   \u251c\u2500\u2500 outputs.tf\r\n    \u2502   \u2514\u2500\u2500 variables.tf\r\n    \r\n    \r\n    \u251c\u2500\u2500 Landing Zone Security\r\n    \u2502   \u251c\u2500\u2500 main.tf      // contains CloudTrail, GuardDuty, Config\r\n    \u2502   \u251c\u2500\u2500 outputs.tf\r\n    \u2502   \u2514\u2500\u2500 variables.tf\r\n    \r\n    \r\n    \u251c\u2500\u2500 Landing Zone Communications\r\n    \u2502   \u251c\u2500\u2500 main.tf      // contains NAT Gateways, Private Endpoints\r\n    \u2502   \u251c\u2500\u2500 outputs.tf\r\n    \u2502   \u2514\u2500\u2500 variables.tf\r\n    \r\n    \r\n    \u251c\u2500\u2500 Application\r\n    \u2502   \u251c\u2500\u2500 main.tf      // contains ECS cluster, ECS Service, ECS Task\r\n    \u2502   \u251c\u2500\u2500 outputs.tf\r\n    \u2502   \u2514\u2500\u2500 variables.tf\r\n    \r\n    \r\n    \u251c\u2500\u2500 Database\r\n    \u2502   \u251c\u2500\u2500 main.tf      // contains RDS and all the necessary components\r\n    \u2502   \u251c\u2500\u2500 outputs.tf\r\n    \u2502   \u2514\u2500\u2500 variables.tf\r\n    \r\n    \r\n    \u251c\u2500\u2500 Storage\r\n    \u2502   \u251c\u2500\u2500 main.tf      // EFS\r\n    \u2502   \u251c\u2500\u2500 outputs.tf\r\n    \u2502   \u2514\u2500\u2500 variables.tf\r\n       \r\n\r\nWe'll have several projects of terraform with several states and when we need to apply changes only affect the particular project as same as the state. With this we win facility on managing the projects \u2018cause they are fine-grained projects. But the dependencies in inputs will be satisfied via data sources on Terraform code.\r\n\r\nSorry if this is too much text, but we want to start this terraform era with the right foot. \r\n\r\nHow do you guys manage similar projects? \r\nWhich is the most secure and efficient way to manage these large projects? \r\nAre we doing something wrong? \r\n\r\nI\u2019ll be immensely grateful if some of you can text me some advice! \r\n\r\nThanks for reading and greetings from Mexico City. \r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We also have modules for principal elements on the accounts that we named \u201cLanding Zones\u201d, for example Networking, Security, Communication, etc. ", "keywords": ["networking"]}, {"source": "Text", "text": "We have private endpoints and NAT Gateways. ", "keywords": ["nat"]}, {"source": "Text", "text": "Taking into consideration that the fargates will be in constant change, growing in number, changing versions of the docker image etc. ", "keywords": ["change"]}, {"source": "Text", "text": "--------------Do not necessary to delete------------------- \u251c\u2500\u2500Landing Zone Networking \u2502 \u2514\u2500\u2500 main.tf // contains VPC, subnet, RT, attachment transit gateways --------------Do not necessary to delete------------------- --------------Prone to be removed------------------- \u251c\u2500\u2500HUGE_PROJECT \u2502 \u2514\u2500\u2500 main.tf \u2514\u2500\u2500 modules ", "keywords": ["networking"]}, {"source": "Text", "text": "//REMOTE PRE VALIDATED MODULES \u251c\u2500\u2500 Landing Zone Security \u2502 \u251c\u2500\u2500 main.tf // contains CloudTrail, GuardDuty, Config \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 Landing Zone Communications \u2502 \u251c\u2500\u2500 main.tf // contains NAT Gateways, Private Endpoints \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 Application \u2502 \u251c\u2500\u2500 main.tf // contains ECS cluster, ECS Service, ECS Task \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 Database \u2502 \u251c\u2500\u2500 main.tf // contains RDS and all the necessary components \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 Storage \u2502 \u251c\u2500\u2500 main.tf // EFS \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf --------------Prone to be removed------------------- ", "keywords": ["nat", "storage", "cluster"]}, {"source": "Text", "text": "And this one: \u251c\u2500\u2500Landing Zone Networking \u2502 \u2514\u2500\u2500 main.tf // contains VPC, subnet, RT, attachment transit gateways \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 Landing Zone Security \u2502 \u251c\u2500\u2500 main.tf // contains CloudTrail, GuardDuty, Config \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 Landing Zone Communications \u2502 \u251c\u2500\u2500 main.tf // contains NAT Gateways, Private Endpoints \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 Application \u2502 \u251c\u2500\u2500 main.tf // contains ECS cluster, ECS Service, ECS Task \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 Database \u2502 \u251c\u2500\u2500 main.tf // contains RDS and all the necessary components \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 Storage \u2502 \u251c\u2500\u2500 main.tf // EFS \u2502 \u251c\u2500\u2500 outputs.tf \u2502 \u2514\u2500\u2500 variables.tf ", "keywords": ["networking", "nat", "storage", "cluster"]}, {"source": "Text", "text": "We'll have several projects of terraform with several states and when we need to apply changes only affect the particular project as same as the state. ", "keywords": ["change"]}, {"source": "Text", "text": "Which is the most secure and efficient way to manage these large projects? ", "keywords": ["efficient"]}]}, {"Id": "297144378", "PostHistoryTypeId": "1", "PostId": "76984136", "RevisionGUID": "938fcdc6-18f0-4813-a8cd-ae05ea6ab2c3", "CreationDate": "2023-08-26T17:39:21.990", "UserId": "8513351", "Text": "How to manage huge terraform projects?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "297144379", "PostHistoryTypeId": "3", "PostId": "76984136", "RevisionGUID": "938fcdc6-18f0-4813-a8cd-ae05ea6ab2c3", "CreationDate": "2023-08-26T17:39:21.990", "UserId": "8513351", "Text": "<amazon-web-services><terraform><terraform-provider-aws>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "297145417", "PostHistoryTypeId": "10", "PostId": "76984136", "RevisionGUID": "d600dd02-05db-4030-804b-6255d45f0e40", "CreationDate": "2023-08-26T18:31:30.360", "UserId": "-1", "Comment": "104", "Text": "{\"Voters\":[{\"Id\":830680,\"DisplayName\":\"Clive\"},{\"Id\":8343484,\"DisplayName\":\"Marko E\"},{\"Id\":3390419,\"DisplayName\":\"Paolo\"}]}", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "We also have modules for principal elements on the accounts that we named \u201cLanding Zones\u201d, for example Networking, Security, Communication, etc. ", "keywords": ["networking"]}, {"source": "Body", "text": "We have private endpoints and NAT Gateways. ", "keywords": ["nat"]}, {"source": "Body", "text": "Taking into consideration that the fargates will be in constant change, growing in number, changing versions of the docker image etc. ", "keywords": ["change"]}, {"source": "Body", "text": "And this one: We'll have several projects of terraform with several states and when we need to apply changes only affect the particular project as same as the state. ", "keywords": ["change"]}, {"source": "Body", "text": "Which is the most secure and efficient way to manage these large projects? ", "keywords": ["efficient"]}]}