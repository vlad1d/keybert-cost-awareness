{"Id": "65250228", "PostTypeId": "1", "AcceptedAnswerId": "65256094", "CreationDate": "2020-12-11T11:10:14.173", "Score": "4", "ViewCount": "11324", "Body": "<p>I am trying to build a galera cluster using terraform. To do that I need to render the galera config with the nodes ip, so I use a file template.</p>\n<p>When applying, terraform fires an error</p>\n<pre><code>Error: Cycle: data.template_file.galera_node_config, hcloud_server.galera_node\n</code></pre>\n<p>It seems there is a circular reference when applying because the servers are not being created before the data template is used.</p>\n<p>How may I circumvent this ?</p>\n<p>Thanks</p>\ngalera_node.tf\n<pre><code>data &quot;template_file&quot; &quot;galera_node_config&quot; {\n  template = file(&quot;sys/etc/mysql/mariadb.conf/galera.cnf&quot;)\n\n  vars = {\n    galera_node0 = hcloud_server.galera_node[0].ipv4_address\n    galera_node1 = hcloud_server.galera_node[1].ipv4_address\n    galera_node2 = hcloud_server.galera_node[2].ipv4_address\n    curnode_ip = hcloud_server.galera_node[count.index].ipv4_address\n    curnode = hcloud_server.galera_node[count.index].id\n    }\n}\n\n\nresource &quot;hcloud_server&quot; &quot;galera_node&quot; {\n  count       = var.galera_nodes\n  name        = &quot;galera-${count.index}&quot;\n  image       = var.os_type\n  server_type = var.server_type\n  location    = var.location\n  ssh_keys    = [hcloud_ssh_key.default.id]\n\n  labels = {\n    type = &quot;cluster&quot;\n  }\n\n  user_data = file(&quot;galera_cluster.sh&quot;)\n\n  provisioner &quot;file&quot; {\n    content     = data.template_file.galera_node_config.rendered\n    destination = &quot;/tmp/galera_cnf&quot;\n    connection {\n      type        = &quot;ssh&quot;\n      user        = &quot;root&quot;\n      host = self.ipv4_address\n      private_key = file(&quot;~/.ssh/id_rsa&quot;)\n    }\n\n  }\n\n\n\n}\n</code></pre>\n", "OwnerUserId": "1158405", "LastActivityDate": "2020-12-11T17:39:07.787", "Title": "Terraform fires Cycle error when applying", "Tags": "<terraform><infrastructure>", "AnswerCount": "2", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "236705348", "PostHistoryTypeId": "2", "PostId": "65250228", "RevisionGUID": "78233b12-f560-4580-b134-4f6c933a0110", "CreationDate": "2020-12-11T11:10:14.173", "UserId": "1158405", "Text": "I am trying to build a galera cluster using terraform. To do that I need to render the galera config with the nodes ip, so I use a file template.\r\n\r\nWhen applying, terraform fires an error\r\n\r\n```\r\nError: Cycle: data.template_file.galera_node_config, hcloud_server.galera_node\r\n```\r\n\r\nIt seems there is a circular reference when applying because the servers are not being created before the data template is used.\r\n\r\nHow may I circumvent this ?\r\n\r\nThanks\r\n\r\n#### galera_node.tf\r\n\r\n```\r\ndata \"template_file\" \"galera_node_config\" {\r\n  template = file(\"sys/etc/mysql/mariadb.conf/galera.cnf\")\r\n\r\n  vars = {\r\n    galera_node0 = hcloud_server.galera_node[0].ipv4_address\r\n    galera_node1 = hcloud_server.galera_node[1].ipv4_address\r\n    galera_node2 = hcloud_server.galera_node[2].ipv4_address\r\n    curnode_ip = hcloud_server.galera_node[count.index].ipv4_address\r\n    curnode = hcloud_server.galera_node[count.index].id\r\n    }\r\n}\r\n\r\n\r\nresource \"hcloud_server\" \"galera_node\" {\r\n  count       = var.galera_nodes\r\n  name        = \"galera-${count.index}\"\r\n  image       = var.os_type\r\n  server_type = var.server_type\r\n  location    = var.location\r\n  ssh_keys    = [hcloud_ssh_key.default.id]\r\n\r\n  labels = {\r\n    type = \"cluster\"\r\n  }\r\n\r\n  user_data = file(\"galera_cluster.sh\")\r\n\r\n  provisioner \"file\" {\r\n    content     = data.template_file.galera_node_config.rendered\r\n    destination = \"/tmp/galera_cnf\"\r\n    connection {\r\n      type        = \"ssh\"\r\n      user        = \"root\"\r\n      host = self.ipv4_address\r\n      private_key = file(\"~/.ssh/id_rsa\")\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I am trying to build a galera cluster using terraform. ", "keywords": ["cluster"]}, {"source": "Text", "text": "How may I circumvent this ? Thanks #### galera_node.tf ``` data \"template_file\" \"galera_node_config\" { template = file(\"sys/etc/mysql/mariadb.conf/galera.cnf\") vars = { galera_node0 = hcloud_server.galera_node[0].ipv4_address galera_node1 = hcloud_server.galera_node[1].ipv4_address galera_node2 = hcloud_server.galera_node[2].ipv4_address curnode_ip = hcloud_server.galera_node[count.index].ipv4_address curnode = hcloud_server.galera_node[count.index].id } } resource \"hcloud_server\" \"galera_node\" { count = var.galera_nodes name = \"galera-${count.index}\" image = var.os_type server_type = var.server_type location = var.location ssh_keys = [hcloud_ssh_key.default.id] labels = { type = \"cluster\" } user_data = file(\"galera_cluster.sh\") provisioner \"file\" { content = data.template_file.galera_node_config.rendered destination = \"/tmp/galera_cnf\" connection { type = \"ssh\" user = \"root\" host = self.ipv4_address private_key = file(\"~/.ssh/id_rsa\") } ", "keywords": ["cluster"]}]}, {"Id": "236705349", "PostHistoryTypeId": "1", "PostId": "65250228", "RevisionGUID": "78233b12-f560-4580-b134-4f6c933a0110", "CreationDate": "2020-12-11T11:10:14.173", "UserId": "1158405", "Text": "Terraform fires Cycle error when applying", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "236705350", "PostHistoryTypeId": "3", "PostId": "65250228", "RevisionGUID": "78233b12-f560-4580-b134-4f6c933a0110", "CreationDate": "2020-12-11T11:10:14.173", "UserId": "1158405", "Text": "<terraform><infrastructure>", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "65252462", "PostTypeId": "2", "ParentId": "65250228", "CreationDate": "2020-12-11T13:42:39.607", "Score": "1", "Body": "<p>You really try to use <code>data.template_file.galera_node_config</code> inside of your <code>resource &quot;hcloud_server&quot; &quot;galera_node&quot;</code> and use <code>hcloud_server.galera_node</code> in your <code>data.template_file</code>.</p>\n<p>To avoid this problem:</p>\n<ol>\n<li>Remove provisioner &quot;file&quot; from your hcloud_server.galera_node</li>\n<li>Move this provisioner &quot;file&quot; to a new null_resource e.g. like that:</li>\n</ol>\n<pre><code>resource &quot;null_resource&quot; template_upload {\n  count = var.galera_nodes\n  provisioner &quot;file&quot; {\n    content     = data.template_file.galera_node_config.rendered\n    destination = &quot;/tmp/galera_cnf&quot;\n    connection {\n      type        = &quot;ssh&quot;\n      user        = &quot;root&quot;\n      host = hcloud_server.galera_nodes[count.index].ipv4_address\n      private_key = file(&quot;~/.ssh/id_rsa&quot;)\n    }\ndepends_on = [hcloud_server.galera_node]\n}\n</code></pre>\n", "OwnerUserId": "5118431", "LastEditorUserId": "5118431", "LastEditDate": "2020-12-11T13:49:39.107", "LastActivityDate": "2020-12-11T13:49:39.107", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "115359709", "PostId": "65252462", "Score": "0", "Text": "I need to edit this of course. We need to add count to this new resource as well.", "CreationDate": "2020-12-11T13:46:09.653", "UserId": "5118431", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "115367532", "PostId": "65252462", "Score": "0", "Text": "Thanks, both approaches helped me.", "CreationDate": "2020-12-11T18:21:59.013", "UserId": "1158405", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "236714685", "PostHistoryTypeId": "2", "PostId": "65252462", "RevisionGUID": "7666ac0d-b5e7-4898-889d-f3ae80e6c30f", "CreationDate": "2020-12-11T13:42:39.607", "UserId": "5118431", "Text": "You really try to use ````data.template_file.galera_node_config```` inside of your ````resource \"hcloud_server\" \"galera_node\"```` and use ````hcloud_server.galera_node```` in your ````data.template_file````.\r\n\r\nTo avoid this problem:\r\n1. Remove provisioner \"file\" from your hcloud_server.galera_node\r\n2. Move this provisioner \"file\" to a new null_resource e.g. like that:\r\n````terraform\r\nlocals {\r\nipv4_address = hcloud_server.galera_node.ipv4_address\r\n}\r\n\r\nresource \"null_resource\" template_upload {\r\n  provisioner \"file\" {\r\n    content     = data.template_file.galera_node_config.rendered\r\n    destination = \"/tmp/galera_cnf\"\r\n    connection {\r\n      type        = \"ssh\"\r\n      user        = \"root\"\r\n      host = local.ipv4_address\r\n      private_key = file(\"~/.ssh/id_rsa\")\r\n    }\r\ndepends_on = [hcloud_server.galera_node]\r\n}\r\n````\r\nwhere you save your self.ipv4_address e.g. to locals beforehand.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "236715139", "PostHistoryTypeId": "5", "PostId": "65252462", "RevisionGUID": "854a5963-d0a2-4467-8308-49ffdaa15be6", "CreationDate": "2020-12-11T13:49:39.107", "UserId": "5118431", "Comment": "deleted 72 characters in body", "Text": "You really try to use ````data.template_file.galera_node_config```` inside of your ````resource \"hcloud_server\" \"galera_node\"```` and use ````hcloud_server.galera_node```` in your ````data.template_file````.\r\n\r\nTo avoid this problem:\r\n1. Remove provisioner \"file\" from your hcloud_server.galera_node\r\n2. Move this provisioner \"file\" to a new null_resource e.g. like that:\r\n````terraform\r\nresource \"null_resource\" template_upload {\r\n  count = var.galera_nodes\r\n  provisioner \"file\" {\r\n    content     = data.template_file.galera_node_config.rendered\r\n    destination = \"/tmp/galera_cnf\"\r\n    connection {\r\n      type        = \"ssh\"\r\n      user        = \"root\"\r\n      host = hcloud_server.galera_nodes[count.index].ipv4_address\r\n      private_key = file(\"~/.ssh/id_rsa\")\r\n    }\r\ndepends_on = [hcloud_server.galera_node]\r\n}\r\n````\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "65256094", "PostTypeId": "2", "ParentId": "65250228", "CreationDate": "2020-12-11T17:39:07.787", "Score": "4", "Body": "<p>The problem here is that you have multiple nodes that all depend on each other, and so there is no valid order for Terraform to create them: they must all be created before any other one can be created.</p>\n<p>To address this will require a different approach. There are a few different options for this, but the one that seems closest to what you were already trying is to use the special resource type <code>null_resource</code> to factor out the provisioning into a separate resource that Terraform can work on only after all of the <code>hcloud_server</code> instances are ready.</p>\n<p>Note also that the <code>template_file</code> data source is deprecated in favor of <a href=\"https://www.terraform.io/docs/configuration/functions/templatefile.html\" rel=\"nofollow noreferrer\">the <code>templatefile</code> function</a>, so this is a good opportunity to simplify the configuration by using the function instead.</p>\n<p>Both of those changes together lead to this:</p>\n<pre><code>resource &quot;hcloud_server&quot; &quot;galera_node&quot; {\n  count       = var.galera_nodes\n  name        = &quot;galera-${count.index}&quot;\n  image       = var.os_type\n  server_type = var.server_type\n  location    = var.location\n  ssh_keys    = [hcloud_ssh_key.default.id]\n\n  labels = {\n    type = &quot;cluster&quot;\n  }\n\n  user_data = file(&quot;galera_cluster.sh&quot;)\n}\n\nresource &quot;null_resource&quot; &quot;galera_config&quot; {\n  count = length(hcloud_server.galera_node)\n\n  triggers = {\n    config_file = templatefile(&quot;${path.module}/sys/etc/mysql/mariadb.conf/galera.cnf&quot;, {\n      all_addresses = hcloud_server.galera_node[*].ipv4_address\n      this_address  = hcloud_server.galera_node[count.index].ipv4_address\n      this_id       = hcloud_server.galera_node[count.index].id\n    })\n  }\n\n  provisioner &quot;file&quot; {\n    content     = self.triggers.config_file\n    destination = &quot;/tmp/galera_cnf&quot;\n    connection {\n      type        = &quot;ssh&quot;\n      user        = &quot;root&quot;\n      host        = hcloud_server.galera_node[count.index].ipv4_address\n      private_key = file(&quot;~/.ssh/id_rsa&quot;)\n    }\n  }\n}\n</code></pre>\n<p>The <code>triggers</code> argument above serves to tell Terraform that it must re-run the provisioner each time the configuration file changes in any way, which could for example be because you've added a new node: all of the existing nodes would then be reprovisioned to include that additional node in their configurations.</p>\n<p><a href=\"https://www.terraform.io/docs/provisioners/index.html#provisioners-are-a-last-resort\" rel=\"nofollow noreferrer\">Provisioners are considered a last resort</a> in the Terraform documentation, but in this particular case the alternatives would likely be considerably more complicated. A typical non-provisioner answer to this would be to use a service discovery system where each node can register itself on startup and then discover the other nodes, for example with <a href=\"https://www.consul.io/\" rel=\"nofollow noreferrer\">HashiCorp Consul</a>'s service catalog. But unless you have lots of similar use-cases in your infrastructure which could all share the Consul cluster, having to run another service is likely an unreasonable cost in comparison to just using a provisioner.</p>\n", "OwnerUserId": "281848", "LastActivityDate": "2020-12-11T17:39:07.787", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "115366779", "PostId": "65256094", "Score": "0", "Text": "Unfortunately have to use a deprecated version :(", "CreationDate": "2020-12-11T17:51:55.937", "UserId": "1158405", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "history": [{"Id": "236730014", "PostHistoryTypeId": "2", "PostId": "65256094", "RevisionGUID": "717e0bc3-42fd-4f0d-8f09-c569e91c3cc3", "CreationDate": "2020-12-11T17:39:07.787", "UserId": "281848", "Text": "The problem here is that you have multiple nodes that all depend on each other, and so there is no valid order for Terraform to create them: they must all be created before any other one can be created.\r\n\r\nTo address this will require a different approach. There are a few different options for this, but the one that seems closest to what you were already trying is to use the special resource type `null_resource` to factor out the provisioning into a separate resource that Terraform can work on only after all of the `hcloud_server` instances are ready.\r\n\r\nNote also that the `template_file` data source is deprecated in favor of [the `templatefile` function](https://www.terraform.io/docs/configuration/functions/templatefile.html), so this is a good opportunity to simplify the configuration by using the function instead.\r\n\r\nBoth of those changes together lead to this:\r\n\r\n```\r\nresource \"hcloud_server\" \"galera_node\" {\r\n  count       = var.galera_nodes\r\n  name        = \"galera-${count.index}\"\r\n  image       = var.os_type\r\n  server_type = var.server_type\r\n  location    = var.location\r\n  ssh_keys    = [hcloud_ssh_key.default.id]\r\n\r\n  labels = {\r\n    type = \"cluster\"\r\n  }\r\n\r\n  user_data = file(\"galera_cluster.sh\")\r\n}\r\n\r\nresource \"null_resource\" \"galera_config\" {\r\n  count = length(hcloud_server.galera_node)\r\n\r\n  triggers = {\r\n    config_file = templatefile(\"${path.module}/sys/etc/mysql/mariadb.conf/galera.cnf\", {\r\n      all_addresses = hcloud_server.galera_node[*].ipv4_address\r\n      this_address  = hcloud_server.galera_node[count.index].ipv4_address\r\n      this_id       = hcloud_server.galera_node[count.index].id\r\n    })\r\n  }\r\n\r\n  provisioner \"file\" {\r\n    content     = self.triggers.config_file\r\n    destination = \"/tmp/galera_cnf\"\r\n    connection {\r\n      type        = \"ssh\"\r\n      user        = \"root\"\r\n      host        = hcloud_server.galera_node[count.index].ipv4_address\r\n      private_key = file(\"~/.ssh/id_rsa\")\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe `triggers` argument above serves to tell Terraform that it must re-run the provisioner each time the configuration file changes in any way, which could for example be because you've added a new node: all of the existing nodes would then be reprovisioned to include that additional node in their configurations.\r\n\r\n[Provisioners are considered a last resort](https://www.terraform.io/docs/provisioners/index.html#provisioners-are-a-last-resort) in the Terraform documentation, but in this particular case the alternatives would likely be considerably more complicated. A typical non-provisioner answer to this would be to use a service discovery system where each node can register itself on startup and then discover the other nodes, for example with [HashiCorp Consul](https://www.consul.io/)'s service catalog. But unless you have lots of similar use-cases in your infrastructure which could all share the Consul cluster, having to run another service is likely an unreasonable cost in comparison to just using a provisioner.\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Both of those changes together lead to this: ``` resource \"hcloud_server\" \"galera_node\" { count = var.galera_nodes name = \"galera-${count.index}\" image = var.os_type server_type = var.server_type location = var.location ssh_keys = [hcloud_ssh_key.default.id] labels = { type = \"cluster\" } user_data = file(\"galera_cluster.sh\") } resource \"null_resource\" \"galera_config\" { count = length(hcloud_server.galera_node) triggers = { config_file = templatefile(\"${path.module}/sys/etc/mysql/mariadb.conf/galera.cnf\", { all_addresses = hcloud_server.galera_node[*].ipv4_address this_address = hcloud_server.galera_node[count.index].ipv4_address this_id = hcloud_server.galera_node[count.index].id }) } provisioner \"file\" { content = self.triggers.config_file destination = \"/tmp/galera_cnf\" connection { type = \"ssh\" user = \"root\" host = hcloud_server.galera_node[count.index].ipv4_address private_key = file(\"~/.ssh/id_rsa\") } } } ``` ", "keywords": ["cluster", "change"]}, {"source": "Text", "text": "The `triggers` argument above serves to tell Terraform that it must re-run the provisioner each time the configuration file changes in any way, which could for example be because you've added a new node: all of the existing nodes would then be reprovisioned to include that additional node in their configurations. ", "keywords": ["change"]}, {"source": "Text", "text": "But unless you have lots of similar use-cases in your infrastructure which could all share the Consul cluster, having to run another service is likely an unreasonable cost in comparison to just using a provisioner.", "keywords": ["cost", "cluster"]}]}], "filtered-sentences": [{"source": "Body", "text": "Both of those changes together lead to this: ", "keywords": ["change"]}, {"source": "Body", "text": "The triggers argument above serves to tell Terraform that it must re-run the provisioner each time the configuration file changes in any way, which could for example be because you've added a new node: all of the existing nodes would then be reprovisioned to include that additional node in their configurations. ", "keywords": ["change"]}, {"source": "Body", "text": "But unless you have lots of similar use-cases in your infrastructure which could all share the Consul cluster, having to run another service is likely an unreasonable cost in comparison to just using a provisioner.", "keywords": ["cost", "cluster"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I am trying to build a galera cluster using terraform. ", "keywords": ["cluster"]}]}